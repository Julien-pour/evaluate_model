[{"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list whose sum is equal to the target value.\n\n    Sample Input:\n    [1, 2, 3, 4, 5], 9\n\n    Sample Output:\n    True\n    \"\"\"\n    if target == 0:\n        return True\n    if len(arr) == 0:\n        return False\n    if arr[0] == target:\n        return True\n    return f(arr[1:], target) or f(arr[1:], target - arr[0])\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 9) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 300, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list whose sum is equal to the target value.\n\n    Sample Input:\n    [1, 2, 3, 4, 5], 9\n\n    Sample Output:\n    True\n    \"\"\"\n    if target == 0:\n        return True\n    if len(arr) == 0:\n        return False\n    if arr[0] == target:\n        return True\n    return f(arr[1:], target) or f(arr[1:], target - arr[0])", "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 4, 5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list whose sum is equal to the target value.\n\n    Sample Input:\n    [1, 2, 3, 4, 5], 9\n\n    Sample Output:\n    True\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 9) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 300, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list whose sum is equal to the target value.\n\n    Sample Input:\n    [1, 2, 3, 4, 5], 9\n\n    Sample Output:\n    True\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subsequence in the list whose sum is equal to the target value.\n\n    Sample Input:\n    [1, 2, 3, 4, 5], 9\n\n    Sample Output:\n    True\n    \"\"\"\n    if target == 0:\n        return True\n    if len(arr) == 0:\n        return False\n    if arr[0] == target:\n        return True\n    return f(arr[1:], target) or f(arr[1:], target - arr[0])\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 9) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 300, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subsequence in the list whose sum is equal to the target value.\n\n    Sample Input:\n    [1, 2, 3, 4, 5], 9\n\n    Sample Output:\n    True\n    \"\"\"\n    if target == 0:\n        return True\n    if len(arr) == 0:\n        return False\n    if arr[0] == target:\n        return True\n    return f(arr[1:], target) or f(arr[1:], target - arr[0])", "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 4, 5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given nested list whose sum is equal to 15.\n    \"\"\"\n\n    num_set = set()\n    for lst in nums:\n        for num in lst:\n            if 15 - num in num_set:\n                return True\n            num_set.add(num)\n    return False\n\ndef g(nums: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums\n\nassert f(g()) == False\n", "emb": null, "idx_generation": 300, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given nested list whose sum is equal to 15.\n    \"\"\"\n\n    num_set = set()\n    for lst in nums:\n        for num in lst:\n            if 15 - num in num_set:\n                return True\n            num_set.add(num)\n    return False", "solution_func": "def g(nums: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given nested list whose difference is equal to 5.\n    \"\"\"\n\n    num_set = set()\n    for lst in nums:\n        for num in lst:\n            if num - 5 in num_set or num + 5 in num_set:\n                return True\n            num_set.add(num)\n    return False\n\ndef g(nums: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 300, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given nested list whose difference is equal to 5.\n    \"\"\"\n\n    num_set = set()\n    for lst in nums:\n        for num in lst:\n            if num - 5 in num_set or num + 5 in num_set:\n                return True\n            num_set.add(num)\n    return False", "solution_func": "def g(nums: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given nested list whose product is equal to 20.\n    \"\"\"\n\n    num_set = set()\n    for lst in nums:\n        for num in lst:\n            if num != 0 and 20 % num == 0 and 20 // num in num_set:\n                return True\n            num_set.add(num)\n    return False\n\ndef g(nums: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 300, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given nested list whose product is equal to 20.\n    \"\"\"\n\n    num_set = set()\n    for lst in nums:\n        for num in lst:\n            if num != 0 and 20 % num == 0 and 20 // num in num_set:\n                return True\n            num_set.add(num)\n    return False", "solution_func": "def g(nums: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a square matrix.\n    A square matrix is a grid where the number of rows is equal to the number of columns.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    rows = len(arr)\n    for row in arr:\n        if len(row) != rows:\n            return False\n    return True\n\ndef g(arr: List[List[int]]):\n    return arr\n\nassert f(g([[1, 2, 3], [4, 5, 6], [7, 8, 9]])) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 300, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a square matrix.\n    A square matrix is a grid where the number of rows is equal to the number of columns.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    rows = len(arr)\n    for row in arr:\n        if len(row) != rows:\n            return False\n    return True", "solution_func": "def g(arr: List[List[int]]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a rectangular matrix.\n    A rectangular matrix is a grid where all rows have the same length.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n    for row in arr:\n        if len(row) != cols:\n            return False\n    return True\n\ndef g(arr: List[List[int]]):\n    return arr\n\nassert f(g([[1, 2, 3], [4, 5, 6], [7, 8, 9]])) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 300, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a rectangular matrix.\n    A rectangular matrix is a grid where all rows have the same length.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n    for row in arr:\n        if len(row) != cols:\n            return False\n    return True", "solution_func": "def g(arr: List[List[int]]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a diagonal matrix.\n    A diagonal matrix is a grid where all elements outside the main diagonal are zero.\n\n    Sample Input:\n    arr = [[1, 0, 0], [0, 5, 0], [0, 0, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n    for i in range(rows):\n        for j in range(cols):\n            if i != j and arr[i][j] != 0:\n                return False\n    return True\n\ndef g(arr: List[List[int]]):\n    return arr\n\nassert f(g([[1, 0, 0], [0, 5, 0], [0, 0, 9]])) == True\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 300, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a diagonal matrix.\n    A diagonal matrix is a grid where all elements outside the main diagonal are zero.\n\n    Sample Input:\n    arr = [[1, 0, 0], [0, 5, 0], [0, 0, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n    for i in range(rows):\n        for j in range(cols):\n            if i != j and arr[i][j] != 0:\n                return False\n    return True", "solution_func": "def g(arr: List[List[int]]):\n    return arr", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if a given list is a palindrome.\n\n    Example:\n    arr = [1, 2, 3, 2, 1]\n    The list is symmetric around its middle element and reads the same forwards and backwards.\n\n    Return True if the list is a palindrome, otherwise return False.\n    \"\"\"\n    return arr == arr[::-1]\n\ndef g(arr=[1, 2, 3, 2, 1]):\n    return arr\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 300, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if a given list is a palindrome.\n\n    Example:\n    arr = [1, 2, 3, 2, 1]\n    The list is symmetric around its middle element and reads the same forwards and backwards.\n\n    Return True if the list is a palindrome, otherwise return False.\n    \"\"\"\n    return arr == arr[::-1]", "solution_func": "def g(arr=[1, 2, 3, 2, 1]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Determine if it is possible to find a pair of numbers in a matrix that have a product equal to the target number.\n\n    Sample input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample output:\n    True\n\n    The pair of numbers (3, 4) has a product of 12, which is the target number.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for x in range(i, rows):\n                for y in range(j, cols):\n                    if matrix[i][j] * matrix[x][y] == target and (i != x or j != y):\n                        return True\n    return False\n\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, target // 8, 9]]\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 301, "target_skills": null, "problem_func": "from typing import*\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Determine if it is possible to find a pair of numbers in a matrix that have a product equal to the target number.\n\n    Sample input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample output:\n    True\n\n    The pair of numbers (3, 4) has a product of 12, which is the target number.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for x in range(i, rows):\n                for y in range(j, cols):\n                    if matrix[i][j] * matrix[x][y] == target and (i != x or j != y):\n                        return True\n    return False", "solution_func": "def g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, target // 8, 9]]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Determine if it is possible to find a pair of numbers in a matrix that sum to the target number.\n\n    Sample input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample output:\n    True\n\n    The pair of numbers (1, 6) has a sum of 7, which is the target number.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for x in range(i, rows):\n                for y in range(j, cols):\n                    if matrix[i][j] + matrix[x][y] == target and (i != x or j != y):\n                        return True\n    return False\n\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, target - 2, 9]]\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 301, "target_skills": null, "problem_func": "from typing import*\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Determine if it is possible to find a pair of numbers in a matrix that sum to the target number.\n\n    Sample input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample output:\n    True\n\n    The pair of numbers (1, 6) has a sum of 7, which is the target number.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for x in range(i, rows):\n                for y in range(j, cols):\n                    if matrix[i][j] + matrix[x][y] == target and (i != x or j != y):\n                        return True\n    return False", "solution_func": "def g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, target - 2, 9]]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Determine if it is possible to find a pair of adjacent numbers in a matrix that have a difference equal to the target number.\n\n    Sample input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample output:\n    True\n\n    The pair of numbers (2, 3) has a difference of 1, which is the target number.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            if i + 1 < rows and abs(matrix[i][j] - matrix[i+1][j]) == target:\n                return True\n            if j + 1 < cols and abs(matrix[i][j] - matrix[i][j+1]) == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, target + 3, 9]]\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 301, "target_skills": null, "problem_func": "from typing import*\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Determine if it is possible to find a pair of adjacent numbers in a matrix that have a difference equal to the target number.\n\n    Sample input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample output:\n    True\n\n    The pair of numbers (2, 3) has a difference of 1, which is the target number.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            if i + 1 < rows and abs(matrix[i][j] - matrix[i+1][j]) == target:\n                return True\n            if j + 1 < cols and abs(matrix[i][j] - matrix[i][j+1]) == target:\n                return True\n    return False", "solution_func": "def g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, target + 3, 9]]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a palindrome\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(size=5):\n    \"\"\"\n    Generate a list of numbers of the given size\n    \"\"\"\n    return list(range(1, size + 1))\n\nassert f(g()) == False\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 301, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a palindrome\n    \"\"\"\n    return nums == nums[::-1]", "solution_func": "def g(size=5):\n    \"\"\"\n    Generate a list of numbers of the given size\n    \"\"\"\n    return list(range(1, size + 1))", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is sorted in non-decreasing order\n    \"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\n\ndef g(size=5):\n    \"\"\"\n    Generate a list of numbers of the given size\n    \"\"\"\n    return list(range(size, 0, -1))\n\nassert f(g()) == False\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 301, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is sorted in non-decreasing order\n    \"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))", "solution_func": "def g(size=5):\n    \"\"\"\n    Generate a list of numbers of the given size\n    \"\"\"\n    return list(range(size, 0, -1))", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers contains any duplicates\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g(size=5):\n    \"\"\"\n    Generate a list of numbers of the given size\n    \"\"\"\n    return list(range(1, size + 1))\n\nassert f(g()) == False\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 301, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers contains any duplicates\n    \"\"\"\n    return len(nums) != len(set(nums))", "solution_func": "def g(size=5):\n    \"\"\"\n    Generate a list of numbers of the given size\n    \"\"\"\n    return list(range(1, size + 1))", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it contains a subarray of length 3 where the sum of the first two elements is equal to the third element.\n\n    Sample Input:\n    [1, 2, 3, 4, 5, 6, 7]\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(arr) - 2):\n        if arr[i] + arr[i + 1] == arr[i + 2]:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7]\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0], "idx_generation": 301, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it contains a subarray of length 3 where the sum of the first two elements is equal to the third element.\n\n    Sample Input:\n    [1, 2, 3, 4, 5, 6, 7]\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(arr) - 2):\n        if arr[i] + arr[i + 1] == arr[i + 2]:\n            return True\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7]", "map_ix": [1, 1, 0, 1, 0, 0, 0, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Calculate the sum of all prime numbers in the given list of integers.\n\n    Sample Input:\n    [2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Sample Output:\n    17\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return sum(num for num in nums if is_prime(num))\n\ndef g():\n    return [2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 17\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 301, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Calculate the sum of all prime numbers in the given list of integers.\n\n    Sample Input:\n    [2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Sample Output:\n    17\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return sum(num for num in nums if is_prime(num))", "solution_func": "def g():\n    return [2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, check if it is a palindrome.\n\n    Sample Input:\n    'racecar'\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == s[::-1]\n\ndef g():\n    return 'racecar'\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 301, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, check if it is a palindrome.\n\n    Sample Input:\n    'racecar'\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == s[::-1]", "solution_func": "def g():\n    return 'racecar'", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains any duplicate elements.\n    \"\"\"\n    return len(set(nums)) < len(nums)\n\ndef g(nums: List[int] = [1, 1, 2, 3, 4]):\n    \"\"\"\n    This solution returns the input list as is\n    \"\"\"\n    return nums\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 301, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains any duplicate elements.\n    \"\"\"\n    return len(set(nums)) < len(nums)", "solution_func": "def g(nums: List[int] = [1, 1, 2, 3, 4]):\n    \"\"\"\n    This solution returns the input list as is\n    \"\"\"\n    return nums", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a 2D array of integers and a target number, return True if the target number exists in the array, \n    otherwise return False.\n\n    Sample input:\n    arr = [[1, 2, 3],\n           [4, 5, 6],\n           [7, 8, 9]]\n    target = 10\n\n    Sample output:\n    False\n\n    Explanation: The target number 10 does not exist in the array.\n    \"\"\"\n    for row in arr:\n        if target in row:\n            return True\n    return False\n\ndef g(arr=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=10):\n    return arr, target\n\nassert f(*g()) == False\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 302, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a 2D array of integers and a target number, return True if the target number exists in the array, \n    otherwise return False.\n\n    Sample input:\n    arr = [[1, 2, 3],\n           [4, 5, 6],\n           [7, 8, 9]]\n    target = 10\n\n    Sample output:\n    False\n\n    Explanation: The target number 10 does not exist in the array.\n    \"\"\"\n    for row in arr:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(arr=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=10):\n    return arr, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(s: str, n: int) -> str:\n    \"\"\"\n    Given a string s and a number n, return a new string that repeats the input string n times.\n\n    Sample input:\n    s = \"Hello\"\n    n = 3\n\n    Sample output:\n    \"HelloHelloHello\"\n\n    Explanation: The input string \"Hello\" is repeated 3 times.\n    \"\"\"\n    return s * n\n\ndef g(s=\"Hello\", n=3):\n    return s, n\n\nassert f(*g()) == \"HelloHelloHello\"\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 302, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(s: str, n: int) -> str:\n    \"\"\"\n    Given a string s and a number n, return a new string that repeats the input string n times.\n\n    Sample input:\n    s = \"Hello\"\n    n = 3\n\n    Sample output:\n    \"HelloHelloHello\"\n\n    Explanation: The input string \"Hello\" is repeated 3 times.\n    \"\"\"\n    return s * n", "solution_func": "def g(s=\"Hello\", n=3):\n    return s, n", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the product of all the numbers in the list.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample output:\n    120\n\n    Explanation: The product of all the numbers in the list [1, 2, 3, 4, 5] is 120.\n    \"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n    return product\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(*g()) == 120\n\n", "emb": null, "idx_generation": 302, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the product of all the numbers in the list.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample output:\n    120\n\n    Explanation: The product of all the numbers in the list [1, 2, 3, 4, 5] is 120.\n    \"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n    return product", "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(seq: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subsequence in the list that adds up to the target value.\n    The subsequence can be non-contiguous.\n    \"\"\"\n    def subset_sum(numbers, target, memo={}):\n        if target in memo:\n            return memo[target]\n        if target == 0:\n            return True\n        if target < 0 or not numbers:\n            return False\n        include = subset_sum(numbers[1:], target - numbers[0], memo)\n        exclude = subset_sum(numbers[1:], target, memo)\n        memo[target] = include or exclude\n        return memo[target]\n\n    return subset_sum(seq, target)\n\ndef g(seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=15):\n    return (seq, target)\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 302, "target_skills": null, "problem_func": "from typing import*\ndef f(seq: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subsequence in the list that adds up to the target value.\n    The subsequence can be non-contiguous.\n    \"\"\"\n    def subset_sum(numbers, target, memo={}):\n        if target in memo:\n            return memo[target]\n        if target == 0:\n            return True\n        if target < 0 or not numbers:\n            return False\n        include = subset_sum(numbers[1:], target - numbers[0], memo)\n        exclude = subset_sum(numbers[1:], target, memo)\n        memo[target] = include or exclude\n        return memo[target]\n\n    return subset_sum(seq, target)", "solution_func": "def g(seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=15):\n    return (seq, target)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(dictionary: Dict[str, int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of values in the dictionary whose sum equals the target value.\n    \"\"\"\n    values = list(dictionary.values())\n    for i in range(len(values)):\n        for j in range(i+1, len(values)):\n            if values[i] + values[j] == target:\n                return True\n    return False\n\ndef g(dictionary={\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}, target=7):\n    return (dictionary, target)\n\nassert f(*g()) == True\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0], "idx_generation": 302, "target_skills": null, "problem_func": "from typing import*\nfrom typing import Dict\n\ndef f(dictionary: Dict[str, int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of values in the dictionary whose sum equals the target value.\n    \"\"\"\n    values = list(dictionary.values())\n    for i in range(len(values)):\n        for j in range(i+1, len(values)):\n            if values[i] + values[j] == target:\n                return True\n    return False", "solution_func": "def g(dictionary={\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}, target=7):\n    return (dictionary, target)", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(coordinates: List[Tuple[int, int]], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of coordinates in the list whose sum of x and y values equals the target value.\n    \"\"\"\n    for i in range(len(coordinates)):\n        for j in range(i+1, len(coordinates)):\n            if coordinates[i][0] + coordinates[j][0] == target or coordinates[i][1] + coordinates[j][1] == target:\n                return True\n    return False\n\ndef g(coordinates=[(1, 2), (3, 4), (5, 6), (7, 8)], target=12):\n    return (coordinates, target)\n\nassert f(*g()) == False\n", "emb": null, "idx_generation": 302, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List, Tuple\n\ndef f(coordinates: List[Tuple[int, int]], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of coordinates in the list whose sum of x and y values equals the target value.\n    \"\"\"\n    for i in range(len(coordinates)):\n        for j in range(i+1, len(coordinates)):\n            if coordinates[i][0] + coordinates[j][0] == target or coordinates[i][1] + coordinates[j][1] == target:\n                return True\n    return False", "solution_func": "def g(coordinates=[(1, 2), (3, 4), (5, 6), (7, 8)], target=12):\n    return (coordinates, target)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that sums up to the target value.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target: int):\n    return [2, 4, 6, 8, 10]\n\nassert f(g(), 12) == True\n", "emb": null, "idx_generation": 302, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that sums up to the target value.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False", "solution_func": "def g(target: int):\n    return [2, 4, 6, 8, 10]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is symmetric.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    if rows != cols:\n        return False\n\n    for i in range(rows):\n        for j in range(i + 1, cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g()) == False\n", "emb": null, "idx_generation": 302, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is symmetric.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    if rows != cols:\n        return False\n\n    for i in range(rows):\n        for j in range(i + 1, cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, pattern: str) -> bool:\n    \"\"\"\n    Check if the given pattern matches the string.\n    \"\"\"\n    if len(string) != len(pattern):\n        return False\n\n    pattern_map = {}\n    string_map = {}\n\n    for i in range(len(pattern)):\n        if pattern[i] not in pattern_map:\n            pattern_map[pattern[i]] = string[i]\n        if string[i] not in string_map:\n            string_map[string[i]] = pattern[i]\n        if pattern_map[pattern[i]] != string[i] or string_map[string[i]] != pattern[i]:\n            return False\n\n    return True\n\ndef g(pattern: str):\n    return \"abc\"\n\nassert f(g(), \"abb\") == False\n", "emb": null, "idx_generation": 302, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, pattern: str) -> bool:\n    \"\"\"\n    Check if the given pattern matches the string.\n    \"\"\"\n    if len(string) != len(pattern):\n        return False\n\n    pattern_map = {}\n    string_map = {}\n\n    for i in range(len(pattern)):\n        if pattern[i] not in pattern_map:\n            pattern_map[pattern[i]] = string[i]\n        if string[i] not in string_map:\n            string_map[string[i]] = pattern[i]\n        if pattern_map[pattern[i]] != string[i] or string_map[string[i]] != pattern[i]:\n            return False\n\n    return True", "solution_func": "def g(pattern: str):\n    return \"abc\"", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list contains any odd values.\n\n    Example:\n    arr = [1, 2, 3, 4, 5, 6]\n\n    Output:\n    True\n    \"\"\"\n    return any(num % 2 != 0 for num in arr)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g()) == True\n\n\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 302, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list contains any odd values.\n\n    Example:\n    arr = [1, 2, 3, 4, 5, 6]\n\n    Output:\n    True\n    \"\"\"\n    return any(num % 2 != 0 for num in arr)", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6]", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it contains any duplicate elements.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 1]):\n    return nums\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 303, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it contains any duplicate elements.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return len(nums) != len(set(nums))", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 1]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"\n    Given a string s and a target substring, check if the target substring appears at least twice consecutively in s.\n\n    Sample Input:\n    s = \"hellohello\"\n    target = \"hello\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return target * 2 in s\n\ndef g(s: str = \"hellohello\", target: str = \"hello\"):\n    return s, target\n\nassert f(*g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 303, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"\n    Given a string s and a target substring, check if the target substring appears at least twice consecutively in s.\n\n    Sample Input:\n    s = \"hellohello\"\n    target = \"hello\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return target * 2 in s", "solution_func": "def g(s: str = \"hellohello\", target: str = \"hello\"):\n    return s, target", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it is a palindrome.\n\n    Sample Input:\n    arr = [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return arr == arr[::-1]\n\ndef g(arr: List[int] = [1, 2, 3, 2, 1]):\n    return arr\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 303, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it is a palindrome.\n\n    Sample Input:\n    arr = [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return arr == arr[::-1]", "solution_func": "def g(arr: List[int] = [1, 2, 3, 2, 1]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target value, find if the target value exists in the matrix.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    target = 5\n    output: True\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\nassert f(g(), 5)\n\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 303, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target value, find if the target value exists in the matrix.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    target = 5\n    output: True\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(words: List[str]) -> List[str]:\n    \"\"\"\n    Given a list of words, return the list of words in alphabetical order.\n\n    Example:\n    words = ['banana', 'apple', 'cherry', 'date']\n    output: ['apple', 'banana', 'cherry', 'date']\n    \"\"\"\n    return sorted(words)\n\ndef g():\n    return ['banana', 'apple', 'cherry', 'date']\n\nassert f(g()) == ['apple', 'banana', 'cherry', 'date']\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 303, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str]) -> List[str]:\n    \"\"\"\n    Given a list of words, return the list of words in alphabetical order.\n\n    Example:\n    words = ['banana', 'apple', 'cherry', 'date']\n    output: ['apple', 'banana', 'cherry', 'date']\n    \"\"\"\n    return sorted(words)", "solution_func": "def g():\n    return ['banana', 'apple', 'cherry', 'date']", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum difference between any two numbers in the list.\n\n    Example:\n    nums = [1, 5, 3, 9, 2]\n    output: 8\n    \"\"\"\n    max_diff = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            diff = abs(nums[j] - nums[i])\n            max_diff = max(max_diff, diff)\n    return max_diff\n\ndef g():\n    return [1, 5, 3, 9, 2]\n\nassert f(g()) == 8\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 303, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum difference between any two numbers in the list.\n\n    Example:\n    nums = [1, 5, 3, 9, 2]\n    output: 8\n    \"\"\"\n    max_diff = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            diff = abs(nums[j] - nums[i])\n            max_diff = max(max_diff, diff)\n    return max_diff", "solution_func": "def g():\n    return [1, 5, 3, 9, 2]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: int, y: int, z: int, a: int, b: int) -> bool:\n    \"\"\"Check if there exists a pair of integers (a, b) such that a^x + b^y = z\"\"\"\n    return a**x + b**y == z\n\ndef g(x=2, y=3, z=25):\n    return x, y, z, 2, 3\n\nassert f(*g()) == True\n", "emb": null, "idx_generation": 303, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, y: int, z: int, a: int, b: int) -> bool:\n    \"\"\"Check if there exists a pair of integers (a, b) such that a^x + b^y = z\"\"\"\n    return a**x + b**y == z", "solution_func": "def g(x=2, y=3, z=25):\n    return x, y, z, 2, 3", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(lst: List[int], k: int) -> bool:\n    \"\"\"Check if there exists a subset of k numbers from the list whose sum is equal to k.\"\"\"\n\n    def subsets_sum_equal(lst, k, subset=[], index=0):\n        if len(subset) == k:\n            return sum(subset) == k\n        if index >= len(lst):\n            return False\n        with_num = subsets_sum_equal(lst, k, subset + [lst[index]], index + 1)\n        without_num = subsets_sum_equal(lst, k, subset, index + 1)\n        return with_num or without_num\n\n    return subsets_sum_equal(lst, k)\n\ndef g(k=4):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 303, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(lst: List[int], k: int) -> bool:\n    \"\"\"Check if there exists a subset of k numbers from the list whose sum is equal to k.\"\"\"\n\n    def subsets_sum_equal(lst, k, subset=[], index=0):\n        if len(subset) == k:\n            return sum(subset) == k\n        if index >= len(lst):\n            return False\n        with_num = subsets_sum_equal(lst, k, subset + [lst[index]], index + 1)\n        without_num = subsets_sum_equal(lst, k, subset, index + 1)\n        return with_num or without_num\n\n    return subsets_sum_equal(lst, k)", "solution_func": "def g(k=4):\n    return [1, 2, 3, 4, 5, 6]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], k: int) -> bool:\n    \"\"\"Check if the sum of any two elements in the list is equal to k.\"\"\"\n    seen = set()\n    for num in lst:\n        if k - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(k=10):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 303, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], k: int) -> bool:\n    \"\"\"Check if the sum of any two elements in the list is equal to k.\"\"\"\n    seen = set()\n    for num in lst:\n        if k - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(k=10):\n    return [1, 2, 3, 4, 5, 6]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the cumulative sum of the input list.\n    \"\"\"\n    cumulative_sum = [0]\n    for num in nums:\n        cumulative_sum.append(cumulative_sum[-1] + num)\n    return cumulative_sum\n\nassert f(g([1, 2, 3, 4, 5]), 9)\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 303, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False", "solution_func": "def g(nums: List[int]):\n    \"\"\"\n    This solution returns the cumulative sum of the input list.\n    \"\"\"\n    cumulative_sum = [0]\n    for num in nums:\n        cumulative_sum.append(cumulative_sum[-1] + num)\n    return cumulative_sum", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], x: int = 5, y: int = 10) -> bool:\n    \"\"\"\n    Given an array of integers arr, check if there exists a subarray of length x that sums up to y.\n    \"\"\"\n    for i in range(len(arr) - x + 1):\n        subarr = arr[i:i+x]\n        if sum(subarr) == y:\n            return True\n    return False\n\ndef g(x: int = 5, y: int = 10):\n    return [y] * x\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 304, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], x: int = 5, y: int = 10) -> bool:\n    \"\"\"\n    Given an array of integers arr, check if there exists a subarray of length x that sums up to y.\n    \"\"\"\n    for i in range(len(arr) - x + 1):\n        subarr = arr[i:i+x]\n        if sum(subarr) == y:\n            return True\n    return False", "solution_func": "def g(x: int = 5, y: int = 10):\n    return [y] * x", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, m: int, k: int) -> bool:\n    \"\"\"\n    Given three integers n, m, and k, determine if there exists a pair of integers (a, b) such that a^m + b^m = n^m - k^m.\n    \"\"\"\n    for a in range(n+1):\n        for b in range(m+1):\n            if a**m + b**m == n**m - k**m:\n                return True\n    return False\n\ndef g(n=2, m=3, k=4):\n    return n, m, k\n\nassert f(*g()) == False\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 304, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, k: int) -> bool:\n    \"\"\"\n    Given three integers n, m, and k, determine if there exists a pair of integers (a, b) such that a^m + b^m = n^m - k^m.\n    \"\"\"\n    for a in range(n+1):\n        for b in range(m+1):\n            if a**m + b**m == n**m - k**m:\n                return True\n    return False", "solution_func": "def g(n=2, m=3, k=4):\n    return n, m, k", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], k: int = 5) -> bool:\n    \"\"\"\n    Check if there exists a subarray of length k in the given array, such that the product of its elements is divisible by k.\n    \"\"\"\n    for i in range(len(arr) - k + 1):\n        subarr = arr[i:i+k]\n        subarr_product = 1\n        for num in subarr:\n            subarr_product *= num\n        if subarr_product % k == 0:\n            return True\n    return False\n\ndef g(k: int = 5):\n    return [k] * k\n\nassert f(g()) == True\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 304, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], k: int = 5) -> bool:\n    \"\"\"\n    Check if there exists a subarray of length k in the given array, such that the product of its elements is divisible by k.\n    \"\"\"\n    for i in range(len(arr) - k + 1):\n        subarr = arr[i:i+k]\n        subarr_product = 1\n        for num in subarr:\n            subarr_product *= num\n        if subarr_product % k == 0:\n            return True\n    return False", "solution_func": "def g(k: int = 5):\n    return [k] * k", "map_ix": [0, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains any prime numbers.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return any(is_prime(num) for num in nums)\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    \"\"\"\n    This solution returns the input list as is\n    \"\"\"\n    return nums\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 304, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains any prime numbers.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return any(is_prime(num) for num in nums)", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5]):\n    \"\"\"\n    This solution returns the input list as is\n    \"\"\"\n    return nums", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is sorted in non-decreasing order.\n    \"\"\"\n    return nums == sorted(nums)\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    \"\"\"\n    This solution returns the input list in non-increasing order.\n    \"\"\"\n    return sorted(nums, reverse=True)\n\nassert f(g()) == False\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 304, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is sorted in non-decreasing order.\n    \"\"\"\n    return nums == sorted(nums)", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5]):\n    \"\"\"\n    This solution returns the input list in non-increasing order.\n    \"\"\"\n    return sorted(nums, reverse=True)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there are any duplicate elements in the given list.\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    \"\"\"\n    This solution returns the input list with an additional duplicated element.\n    \"\"\"\n    return nums + [nums[0]]\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 304, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there are any duplicate elements in the given list.\n    \"\"\"\n    return len(nums) != len(set(nums))", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5]):\n    \"\"\"\n    This solution returns the input list with an additional duplicated element.\n    \"\"\"\n    return nums + [nums[0]]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target number, return the count of pairs of numbers in the list that sum up to the target.\n    \"\"\"\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                count += 1\n    return count\n\ndef g(nums: List[int], target: int):\n    \"\"\"\n    This solution returns the input list and target number as is.\n    \"\"\"\n    return nums, target\n\nassert f(g([1, 2, 3, 4, 5, 6, 7, 8, 9], 10)) == 4\n", "emb": null, "idx_generation": 304, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target number, return the count of pairs of numbers in the list that sum up to the target.\n    \"\"\"\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                count += 1\n    return count", "solution_func": "def g(nums: List[int], target: int):\n    \"\"\"\n    This solution returns the input list and target number as is.\n    \"\"\"\n    return nums, target", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if a given string is a palindrome.\n    \"\"\"\n    return string == string[::-1]\n\ndef g(string: str):\n    \"\"\"\n    This solution returns the input string as is.\n    \"\"\"\n    return string\n\nassert f(g(\"racecar\"))\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 304, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if a given string is a palindrome.\n    \"\"\"\n    return string == string[::-1]", "solution_func": "def g(string: str):\n    \"\"\"\n    This solution returns the input string as is.\n    \"\"\"\n    return string", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int) -> int:\n    \"\"\"\n    Find the sum of all prime numbers less than or equal to a given number n.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes_sum = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            primes_sum += i\n    return primes_sum\n\ndef g(n: int):\n    \"\"\"\n    This solution returns the input number as is.\n    \"\"\"\n    return n\n\nassert f(g(10)) == 17\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 304, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int) -> int:\n    \"\"\"\n    Find the sum of all prime numbers less than or equal to a given number n.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes_sum = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            primes_sum += i\n    return primes_sum", "solution_func": "def g(n: int):\n    \"\"\"\n    This solution returns the input number as is.\n    \"\"\"\n    return n", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a square matrix, check if it is a symmetric matrix.\n\n    A matrix is symmetric if it is equal to its transpose.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n    \n    The given matrix is symmetric.\n\n    \"\"\"\n    transpose = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n    \n    return matrix == transpose\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return (matrix,)\n\nassert f(*g()) == True\n\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 304, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a square matrix, check if it is a symmetric matrix.\n\n    A matrix is symmetric if it is equal to its transpose.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n    \n    The given matrix is symmetric.\n\n    \"\"\"\n    transpose = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n    \n    return matrix == transpose", "solution_func": "def g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return (matrix,)", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is sorted in ascending order.\n    \"\"\"\n    return nums == sorted(nums)\n\ndef g(nums: List[int] = [5, 4, 3, 2, 1]):\n    return nums\n\nassert f(g()) == False\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 305, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is sorted in ascending order.\n    \"\"\"\n    return nums == sorted(nums)", "solution_func": "def g(nums: List[int] = [5, 4, 3, 2, 1]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that multiply to the target value.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target % num == 0 and target // num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target: int = 0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 305, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that multiply to the target value.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target % num == 0 and target // num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(target: int = 0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains any negative numbers.\n    \"\"\"\n    return any(num < 0 for num in nums)\n\ndef g():\n    return [1, 2, -3, 4, -5, 6, -7, 8, 9, 10]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 305, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains any negative numbers.\n    \"\"\"\n    return any(num < 0 for num in nums)", "solution_func": "def g():\n    return [1, 2, -3, 4, -5, 6, -7, 8, 9, 10]", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n\n    Example:\n    nums = [1, 2, 3, 2, 1]\n    output: True\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 305, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n\n    Example:\n    nums = [1, 2, 3, 2, 1]\n    output: True\n    \"\"\"\n    return nums == nums[::-1]", "solution_func": "def g():\n    return [1, 2, 3, 2, 1]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(words: List[str], target_length=10) -> bool:\n    \"\"\"\n    Check if there is a combination of words that has a total length greater than or equal to the target length.\n    \"\"\"\n    def combination_length(words, target_length):\n        if target_length == 0:\n            return True\n        if not words or target_length < 0:\n            return False\n        return combination_length(words[1:], target_length - len(words[0])) or combination_length(words[1:], target_length)\n    return combination_length(words, target_length)\n\ndef g(target_length=10):\n    return [\"apple\", \"banana\", \"grape\", \"kiwi\", \"orange\"]\n\nassert f(g()) == True\n\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 305, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], target_length=10) -> bool:\n    \"\"\"\n    Check if there is a combination of words that has a total length greater than or equal to the target length.\n    \"\"\"\n    def combination_length(words, target_length):\n        if target_length == 0:\n            return True\n        if not words or target_length < 0:\n            return False\n        return combination_length(words[1:], target_length - len(words[0])) or combination_length(words[1:], target_length)\n    return combination_length(words, target_length)", "solution_func": "def g(target_length=10):\n    return [\"apple\", \"banana\", \"grape\", \"kiwi\", \"orange\"]", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size\n    \"\"\"\n    return [[0 if j > i else 1 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 305, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size\n    \"\"\"\n    return [[0 if j > i else 1 for j in range(size)] for i in range(size)]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\n\ndef f(word_list: List[str], pattern: str) -> List[str]:\n    \"\"\"\n    Given a list of words and a pattern, return a new list of words that match the pattern.\n    The pattern consists of lowercase English letters and each letter in the pattern corresponds to a unique word in the word list.\n    The length of the pattern and the length of the word list should be the same.\n    \"\"\"\n    def match_pattern(word: str, pattern: str) -> bool:\n        if len(word) != len(pattern):\n            return False\n        mapping = {}\n        for i in range(len(word)):\n            if pattern[i] in mapping:\n                if mapping[pattern[i]] != word[i]:\n                    return False\n            else:\n                mapping[pattern[i]] = word[i]\n        return True\n\n    return [word for word in word_list if match_pattern(word, pattern)]\n\ndef g(word_list=[\"cat\", \"dog\", \"bat\", \"rat\"], pattern=\"cab\"):\n    return (word_list, pattern)\n\nassert f(*g()) == ['cat', 'bat']\n\n", "emb": null, "idx_generation": 305, "target_skills": null, "problem_func": "from typing import*\n\ndef f(word_list: List[str], pattern: str) -> List[str]:\n    \"\"\"\n    Given a list of words and a pattern, return a new list of words that match the pattern.\n    The pattern consists of lowercase English letters and each letter in the pattern corresponds to a unique word in the word list.\n    The length of the pattern and the length of the word list should be the same.\n    \"\"\"\n    def match_pattern(word: str, pattern: str) -> bool:\n        if len(word) != len(pattern):\n            return False\n        mapping = {}\n        for i in range(len(word)):\n            if pattern[i] in mapping:\n                if mapping[pattern[i]] != word[i]:\n                    return False\n            else:\n                mapping[pattern[i]] = word[i]\n        return True\n\n    return [word for word in word_list if match_pattern(word, pattern)]", "solution_func": "def g(word_list=[\"cat\", \"dog\", \"bat\", \"rat\"], pattern=\"cab\"):\n    return (word_list, pattern)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix, find the sum of the elements in the main diagonal.\n    The main diagonal of a matrix is the diagonal that runs from the top left to the bottom right.\n    \"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    if n != m:\n        return None\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += matrix[i][i]\n    return diagonal_sum\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 15\n\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 305, "target_skills": null, "problem_func": "from typing import*\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix, find the sum of the elements in the main diagonal.\n    The main diagonal of a matrix is the diagonal that runs from the top left to the bottom right.\n    \"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    if n != m:\n        return None\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += matrix[i][i]\n    return diagonal_sum", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\n\ndef f(n: int, nums: List[int]) -> List[List[int]]:\n    \"\"\"\n    Given an integer n and a list of integers nums, find all unique combinations of nums where the sum of the combination is equal to n.\n    Each number in nums may only be used once in the combination.\n    \"\"\"\n    def backtrack(combination, remaining, start):\n        if remaining == 0:\n            result.append(combination[:])\n            return\n        for i in range(start, len(nums)):\n            if i > start and nums[i] == nums[i-1]:\n                continue\n            if nums[i] > remaining:\n                break\n            combination.append(nums[i])\n            backtrack(combination, remaining - nums[i], i + 1)\n            combination.pop()\n\n    nums.sort()\n    result = []\n    backtrack([], n, 0)\n    return result\n\ndef g(n=7, nums=[2, 3, 5, 4, 1, 6, 7, 7]):\n    return n, nums\n\nassert f(*g()) == [\n    [1, 2, 4],\n    [1, 3, 3],\n    [1, 6],\n    [2, 5],\n    [7]\n]\n\n", "emb": null, "idx_generation": 305, "target_skills": null, "problem_func": "from typing import*\n\ndef f(n: int, nums: List[int]) -> List[List[int]]:\n    \"\"\"\n    Given an integer n and a list of integers nums, find all unique combinations of nums where the sum of the combination is equal to n.\n    Each number in nums may only be used once in the combination.\n    \"\"\"\n    def backtrack(combination, remaining, start):\n        if remaining == 0:\n            result.append(combination[:])\n            return\n        for i in range(start, len(nums)):\n            if i > start and nums[i] == nums[i-1]:\n                continue\n            if nums[i] > remaining:\n                break\n            combination.append(nums[i])\n            backtrack(combination, remaining - nums[i], i + 1)\n            combination.pop()\n\n    nums.sort()\n    result = []\n    backtrack([], n, 0)\n    return result", "solution_func": "def g(n=7, nums=[2, 3, 5, 4, 1, 6, 7, 7]):\n    return n, nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[List[int]]:\n    \"\"\"\n    Given a list of integers and a target value, return all unique combinations of numbers that add up to the target.\n\n    Sample input:\n    nums = [2, 3, 6, 7]\n    target = 7\n\n    Sample output:\n    [[2, 2, 3], [7]]\n\n    Explanation:\n    The unique combinations that add up to 7 are [2, 2, 3] and [7].\n    \"\"\"\n    def backtrack(start, curr_sum, combination):\n        if curr_sum == target:\n            return [combination]\n        if curr_sum > target or start == len(nums):\n            return []\n        \n        result = []\n        for i in range(start, len(nums)):\n            result += backtrack(i, curr_sum + nums[i], combination + [nums[i]])\n        \n        return result\n    \n    nums.sort()\n    return backtrack(0, 0, [])\n\ndef g(nums: List[int] = [2, 3, 6, 7], target: int = 7):\n    return (nums, target)\n\nassert f(*g()) == [[2, 2, 3], [7]]\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 305, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> List[List[int]]:\n    \"\"\"\n    Given a list of integers and a target value, return all unique combinations of numbers that add up to the target.\n\n    Sample input:\n    nums = [2, 3, 6, 7]\n    target = 7\n\n    Sample output:\n    [[2, 2, 3], [7]]\n\n    Explanation:\n    The unique combinations that add up to 7 are [2, 2, 3] and [7].\n    \"\"\"\n    def backtrack(start, curr_sum, combination):\n        if curr_sum == target:\n            return [combination]\n        if curr_sum > target or start == len(nums):\n            return []\n        \n        result = []\n        for i in range(start, len(nums)):\n            result += backtrack(i, curr_sum + nums[i], combination + [nums[i]])\n        \n        return result\n    \n    nums.sort()\n    return backtrack(0, 0, [])", "solution_func": "def g(nums: List[int] = [2, 3, 6, 7], target: int = 7):\n    return (nums, target)", "map_ix": [0, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, find the product of all the elements in the matrix.\n    \"\"\"\n    result = 1\n    \n    for row in matrix:\n        for num in row:\n            result *= num\n        \n    return result\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 362880\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 306, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, find the product of all the elements in the matrix.\n    \"\"\"\n    result = 1\n    \n    for row in matrix:\n        for num in row:\n            result *= num\n        \n    return result", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the largest difference between any two numbers in the list.\n    \"\"\"\n    min_num = min(lst)\n    max_num = max(lst)\n    \n    return max_num - min_num\n\ndef g(lst=[1, 5, 3, 9, 7]):\n    return lst\n\nassert f(g()) == 8\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 306, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the largest difference between any two numbers in the list.\n    \"\"\"\n    min_num = min(lst)\n    max_num = max(lst)\n    \n    return max_num - min_num", "solution_func": "def g(lst=[1, 5, 3, 9, 7]):\n    return lst", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    \"\"\"\n    reversed_lst = lst[::-1]\n    return lst == reversed_lst\n\ndef g(lst=[1, 2, 3, 2, 1]):\n    return lst\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 306, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    \"\"\"\n    reversed_lst = lst[::-1]\n    return lst == reversed_lst", "solution_func": "def g(lst=[1, 2, 3, 2, 1]):\n    return lst", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains any negative elements.\n    \"\"\"\n    for num in nums:\n        if num < 0:\n            return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, -4, 5]):\n    \"\"\"\n    This solution returns the input list as is\n    \"\"\"\n    return nums\n\nassert f(g()) == True\n\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 306, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains any negative elements.\n    \"\"\"\n    for num in nums:\n        if num < 0:\n            return True\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, -4, 5]):\n    \"\"\"\n    This solution returns the input list as is\n    \"\"\"\n    return nums", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums: List[int] = [1, 2, 3, 2, 1]):\n    \"\"\"\n    This solution returns the input list as is\n    \"\"\"\n    return nums\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 306, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]", "solution_func": "def g(nums: List[int] = [1, 2, 3, 2, 1]):\n    \"\"\"\n    This solution returns the input list as is\n    \"\"\"\n    return nums", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is in ascending order.\n    \"\"\"\n    return nums == sorted(nums)\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    \"\"\"\n    This solution returns the input list as is\n    \"\"\"\n    return nums\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 306, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is in ascending order.\n    \"\"\"\n    return nums == sorted(nums)", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5]):\n    \"\"\"\n    This solution returns the input list as is\n    \"\"\"\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a pair of numbers such that their sum is equal to the target.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int], target: int):\n    return nums, target\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 306, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a pair of numbers such that their sum is equal to the target.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums: List[int], target: int):\n    return nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, determine if it is a symmetric matrix or not.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 306, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, determine if it is a symmetric matrix or not.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g(matrix: List[List[int]]):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"\n    Given an array of integers and an integer k, find out whether there are two distinct indices i and j in the array such that nums[i] = nums[j] and the absolute difference between i and j is at most k.\n    \"\"\"\n    num_dict = {}\n    for i, num in enumerate(arr):\n        if num in num_dict and i - num_dict[num] <= k:\n            return True\n        num_dict[num] = i\n    return False\n\ndef g(arr: List[int], k: int):\n    return arr, k\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 306, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"\n    Given an array of integers and an integer k, find out whether there are two distinct indices i and j in the array such that nums[i] = nums[j] and the absolute difference between i and j is at most k.\n    \"\"\"\n    num_dict = {}\n    for i, num in enumerate(arr):\n        if num in num_dict and i - num_dict[num] <= k:\n            return True\n        num_dict[num] = i\n    return False", "solution_func": "def g(arr: List[int], k: int):\n    return arr, k", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers that add up to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g(), 7) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 306, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers that add up to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5]):\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10, 12, 14, 16]) -> bool:\n    \"\"\"\n    Check if a given number n is divisible by all the numbers in a given list of integers.\n    \"\"\"\n    return all((n % num == 0 for num in nums))\ndef g(nums=[2, 4, 6, 8, 10, 12, 14, 16]):\n    return min(nums)\nassert f(g()) == True\n", "emb": null, "idx_generation": 307, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10, 12, 14, 16]) -> bool:\n    \"\"\"\n    Check if a given number n is divisible by all the numbers in a given list of integers.\n    \"\"\"\n    return all((n % num == 0 for num in nums))", "solution_func": "def g(nums=[2, 4, 6, 8, 10, 12, 14, 16]):\n    return min(nums)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, words=[\"hello\", \"world\", \"python\"]) -> bool:\n    \"\"\"\n    Check if a given string s contains all the words in a given list of strings.\n    \"\"\"\n    return all((word in s for word in words))\ndef g(words=[\"hello\", \"world\", \"python\"]):\n    return \" \".join(words)\nassert f(g()) == True\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 307, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, words=[\"hello\", \"world\", \"python\"]) -> bool:\n    \"\"\"\n    Check if a given string s contains all the words in a given list of strings.\n    \"\"\"\n    return all((word in s for word in words))", "solution_func": "def g(words=[\"hello\", \"world\", \"python\"]):\n    return \" \".join(words)", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom datetime import date\n\ndef f(d: date, year=2022, month=12, day=31) -> bool:\n    \"\"\"\n    Check if a given date d is later than a specific date defined by year, month, and day.\n    \"\"\"\n    return d > date(year, month, day)\ndef g(year=2022, month=12, day=31):\n    return date(year, month, day)\nassert f(g()) == True\n", "emb": null, "idx_generation": 307, "target_skills": null, "problem_func": "from typing import*\nfrom datetime import date\n\ndef f(d: date, year=2022, month=12, day=31) -> bool:\n    \"\"\"\n    Check if a given date d is later than a specific date defined by year, month, and day.\n    \"\"\"\n    return d > date(year, month, day)", "solution_func": "def g(year=2022, month=12, day=31):\n    return date(year, month, day)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(tri: List[int], edges=[[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]) -> bool:\n    \"\"\"Check if a given directed graph contains a cycle.\"\"\"\n    graph = {}\n    for edge in edges:\n        if edge[0] not in graph:\n            graph[edge[0]] = []\n        graph[edge[0]].append(edge[1])\n    visited = set()\n    def dfs(node, visited, stack):\n        visited.add(node)\n        stack.add(node)\n        for neighbor in graph.get(node, []):\n            if neighbor not in visited:\n                if dfs(neighbor, visited, stack):\n                    return True\n            elif neighbor in stack:\n                return True\n        stack.remove(node)\n        return False\n    for node in graph:\n        if dfs(node, visited, set()):\n            return True\n    return False\ndef g(edges = [[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]):\n    return edges\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 307, "target_skills": null, "problem_func": "from typing import*\ndef f(tri: List[int], edges=[[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]) -> bool:\n    \"\"\"Check if a given directed graph contains a cycle.\"\"\"\n    graph = {}\n    for edge in edges:\n        if edge[0] not in graph:\n            graph[edge[0]] = []\n        graph[edge[0]].append(edge[1])\n    visited = set()\n    def dfs(node, visited, stack):\n        visited.add(node)\n        stack.add(node)\n        for neighbor in graph.get(node, []):\n            if neighbor not in visited:\n                if dfs(neighbor, visited, stack):\n                    return True\n            elif neighbor in stack:\n                return True\n        stack.remove(node)\n        return False\n    for node in graph:\n        if dfs(node, visited, set()):\n            return True\n    return False", "solution_func": "def g(edges = [[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]):\n    return edges", "map_ix": [0, 0, 1, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(tri: List[int], edges=[[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]) -> bool:\n    \"\"\"Check if a given directed graph contains a cycle.\"\"\"\n    graph = {}\n    for edge in edges:\n        if edge[0] not in graph:\n            graph[edge[0]] = []\n        graph[edge[0]].append(edge[1])\n    visited = set()\n    def dfs(node, visited, stack):\n        visited.add(node)\n        stack.add(node)\n        for neighbor in graph.get(node, []):\n            if neighbor not in visited:\n                if dfs(neighbor, visited, stack):\n                    return True\n            elif neighbor in stack:\n                return True\n        stack.remove(node)\n        return False\n    for node in graph:\n        if dfs(node, visited, set()):\n            return True\n    return False\ndef g(edges = [[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]):\n    return edges\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 307, "target_skills": null, "problem_func": "from typing import*\ndef f(tri: List[int], edges=[[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]) -> bool:\n    \"\"\"Check if a given directed graph contains a cycle.\"\"\"\n    graph = {}\n    for edge in edges:\n        if edge[0] not in graph:\n            graph[edge[0]] = []\n        graph[edge[0]].append(edge[1])\n    visited = set()\n    def dfs(node, visited, stack):\n        visited.add(node)\n        stack.add(node)\n        for neighbor in graph.get(node, []):\n            if neighbor not in visited:\n                if dfs(neighbor, visited, stack):\n                    return True\n            elif neighbor in stack:\n                return True\n        stack.remove(node)\n        return False\n    for node in graph:\n        if dfs(node, visited, set()):\n            return True\n    return False", "solution_func": "def g(edges = [[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]):\n    return edges", "map_ix": [0, 0, 1, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(tri: List[int], edges=[[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]) -> bool:\n    \"\"\"Check if a given directed graph contains a cycle.\"\"\"\n    graph = {}\n    for edge in edges:\n        if edge[0] not in graph:\n            graph[edge[0]] = []\n        graph[edge[0]].append(edge[1])\n    visited = set()\n    def dfs(node, visited, stack):\n        visited.add(node)\n        stack.add(node)\n        for neighbor in graph.get(node, []):\n            if neighbor not in visited:\n                if dfs(neighbor, visited, stack):\n                    return True\n            elif neighbor in stack:\n                return True\n        stack.remove(node)\n        return False\n    for node in graph:\n        if dfs(node, visited, set()):\n            return True\n    return False\ndef g(edges = [[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]):\n    return edges\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 307, "target_skills": null, "problem_func": "from typing import*\ndef f(tri: List[int], edges=[[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]) -> bool:\n    \"\"\"Check if a given directed graph contains a cycle.\"\"\"\n    graph = {}\n    for edge in edges:\n        if edge[0] not in graph:\n            graph[edge[0]] = []\n        graph[edge[0]].append(edge[1])\n    visited = set()\n    def dfs(node, visited, stack):\n        visited.add(node)\n        stack.add(node)\n        for neighbor in graph.get(node, []):\n            if neighbor not in visited:\n                if dfs(neighbor, visited, stack):\n                    return True\n            elif neighbor in stack:\n                return True\n        stack.remove(node)\n        return False\n    for node in graph:\n        if dfs(node, visited, set()):\n            return True\n    return False", "solution_func": "def g(edges = [[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]):\n    return edges", "map_ix": [0, 0, 1, 0, 0, 0, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return arr\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 307, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True", "solution_func": "def g(arr: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport re\n\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if the given string is a valid email address.\n    \"\"\"\n    pattern = r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'\n    return bool(re.match(pattern, string))\n\ndef g(string: str = 'example@gmail.com'):\n    return string\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 307, "target_skills": null, "problem_func": "from typing import*\nimport re\n\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if the given string is a valid email address.\n    \"\"\"\n    pattern = r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'\n    return bool(re.match(pattern, string))", "solution_func": "def g(string: str = 'example@gmail.com'):\n    return string", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of any contiguous subarray.\n\n    Sample Input:\n    arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\n    Sample Output:\n    6\n    \"\"\"\n    current_sum = max_sum = arr[0]\n    for num in arr[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n\ndef g(arr: List[int] = [-2, 1, -3, 4, -1, 2, 1, -5, 4]):\n    return arr\n\nassert f(g()) == 6\n\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 307, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of any contiguous subarray.\n\n    Sample Input:\n    arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\n    Sample Output:\n    6\n    \"\"\"\n    current_sum = max_sum = arr[0]\n    for num in arr[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "solution_func": "def g(arr: List[int] = [-2, 1, -3, 4, -1, 2, 1, -5, 4]):\n    return arr", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Determine if all elements in the given list are even numbers.\n    \"\"\"\n    return all(num % 2 == 0 for num in nums)\n\ndef g(nums: List[int] = [2, 4, 6, 8, 10]):\n    return nums\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 307, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Determine if all elements in the given list are even numbers.\n    \"\"\"\n    return all(num % 2 == 0 for num in nums)", "solution_func": "def g(nums: List[int] = [2, 4, 6, 8, 10]):\n    return nums", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if i < j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size with random elements\n    \"\"\"\n    import random\n    return [[random.randint(0, 9) if i >= j else 0 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 308, "target_skills": null, "problem_func": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if i < j and matrix[i][j] != 0:\n                return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size with random elements\n    \"\"\"\n    import random\n    return [[random.randint(0, 9) if i >= j else 0 for j in range(size)] for i in range(size)]", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Find the maximum difference between any two elements in the list.\n    \"\"\"\n    min_val = float('inf')\n    max_diff = 0\n    for num in arr:\n        min_val = min(min_val, num)\n        max_diff = max(max_diff, num - min_val)\n    return max_diff\n\ndef g():\n    return [5, 10, 2, 8, 3, 7]\n\nassert f(g()) == 8\n\n", "emb": null, "idx_generation": 308, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Find the maximum difference between any two elements in the list.\n    \"\"\"\n    min_val = float('inf')\n    max_diff = 0\n    for num in arr:\n        min_val = min(min_val, num)\n        max_diff = max(max_diff, num - min_val)\n    return max_diff", "solution_func": "def g():\n    return [5, 10, 2, 8, 3, 7]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a Fibonacci sequence.\n    \"\"\"\n    if len(nums) < 3:\n        return False\n    for i in range(2, len(nums)):\n        if nums[i] != nums[i-1] + nums[i-2]:\n            return False\n    return True\n\ndef g(size=6):\n    \"\"\"\n    Generate a list of numbers that forms a Fibonacci sequence of the given size.\n    \"\"\"\n    nums = [0, 1]\n    while len(nums) < size:\n        nums.append(nums[-1] + nums[-2])\n    return nums\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 308, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a Fibonacci sequence.\n    \"\"\"\n    if len(nums) < 3:\n        return False\n    for i in range(2, len(nums)):\n        if nums[i] != nums[i-1] + nums[i-2]:\n            return False\n    return True", "solution_func": "def g(size=6):\n    \"\"\"\n    Generate a list of numbers that forms a Fibonacci sequence of the given size.\n    \"\"\"\n    nums = [0, 1]\n    while len(nums) < size:\n        nums.append(nums[-1] + nums[-2])\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the matrix is a magic square.\n\n    A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n\n    Sample Input:\n    [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    size = len(lst)\n    target_sum = size * (size**2 + 1) // 2\n\n    # Check rows\n    for row in lst:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for col in range(size):\n        if sum(lst[row][col] for row in range(size)) != target_sum:\n            return False\n\n    # Check diagonals\n    if sum(lst[i][i] for i in range(size)) != target_sum:\n        return False\n\n    if sum(lst[i][size-i-1] for i in range(size)) != target_sum:\n        return False\n\n    return True\n\ndef g(lst: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return lst\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 308, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(lst: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the matrix is a magic square.\n\n    A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n\n    Sample Input:\n    [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    size = len(lst)\n    target_sum = size * (size**2 + 1) // 2\n\n    # Check rows\n    for row in lst:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for col in range(size):\n        if sum(lst[row][col] for row in range(size)) != target_sum:\n            return False\n\n    # Check diagonals\n    if sum(lst[i][i] for i in range(size)) != target_sum:\n        return False\n\n    if sum(lst[i][size-i-1] for i in range(size)) != target_sum:\n        return False\n\n    return True", "solution_func": "def g(lst: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return lst", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the matrix is a magic square.\n\n    A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n\n    Sample Input:\n    [[8, 1, 6], [3, 5, 7], [4, 9, 2]]\n\n    Sample Output:\n    True\n    \"\"\"\n    size = len(lst)\n    target_sum = size * (size**2 + 1) // 2\n\n    # Check rows\n    for row in lst:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for col in range(size):\n        if sum(lst[row][col] for row in range(size)) != target_sum:\n            return False\n\n    # Check diagonals\n    if sum(lst[i][i] for i in range(size)) != target_sum:\n        return False\n\n    if sum(lst[i][size-i-1] for i in range(size)) != target_sum:\n        return False\n\n    return True\n\ndef g(lst: List[List[int]] = [[8, 1, 6], [3, 5, 7], [4, 9, 2]]):\n    return lst\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 308, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(lst: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the matrix is a magic square.\n\n    A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n\n    Sample Input:\n    [[8, 1, 6], [3, 5, 7], [4, 9, 2]]\n\n    Sample Output:\n    True\n    \"\"\"\n    size = len(lst)\n    target_sum = size * (size**2 + 1) // 2\n\n    # Check rows\n    for row in lst:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for col in range(size):\n        if sum(lst[row][col] for row in range(size)) != target_sum:\n            return False\n\n    # Check diagonals\n    if sum(lst[i][i] for i in range(size)) != target_sum:\n        return False\n\n    if sum(lst[i][size-i-1] for i in range(size)) != target_sum:\n        return False\n\n    return True", "solution_func": "def g(lst: List[List[int]] = [[8, 1, 6], [3, 5, 7], [4, 9, 2]]):\n    return lst", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the matrix is a magic square.\n\n    A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n\n    Sample Input:\n    [[16, 3, 2, 13], [5, 10, 11, 8], [9, 6, 7, 12], [4, 15, 14, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    size = len(lst)\n    target_sum = size * (size**2 + 1) // 2\n\n    # Check rows\n    for row in lst:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for col in range(size):\n        if sum(lst[row][col] for row in range(size)) != target_sum:\n            return False\n\n    # Check diagonals\n    if sum(lst[i][i] for i in range(size)) != target_sum:\n        return False\n\n    if sum(lst[i][size-i-1] for i in range(size)) != target_sum:\n        return False\n\n    return True\n\ndef g(lst: List[List[int]] = [[16, 3, 2, 13], [5, 10, 11, 8], [9, 6, 7, 12], [4, 15, 14, 1]]):\n    return lst\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 308, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(lst: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the matrix is a magic square.\n\n    A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n\n    Sample Input:\n    [[16, 3, 2, 13], [5, 10, 11, 8], [9, 6, 7, 12], [4, 15, 14, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    size = len(lst)\n    target_sum = size * (size**2 + 1) // 2\n\n    # Check rows\n    for row in lst:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for col in range(size):\n        if sum(lst[row][col] for row in range(size)) != target_sum:\n            return False\n\n    # Check diagonals\n    if sum(lst[i][i] for i in range(size)) != target_sum:\n        return False\n\n    if sum(lst[i][size-i-1] for i in range(size)) != target_sum:\n        return False\n\n    return True", "solution_func": "def g(lst: List[List[int]] = [[16, 3, 2, 13], [5, 10, 11, 8], [9, 6, 7, 12], [4, 15, 14, 1]]):\n    return lst", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if the target value is present in the matrix.\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    low = 0\n    high = m * n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        row = mid // n\n        col = mid % n\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g(), target=5) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 308, "target_skills": null, "problem_func": "from typing import*\n\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if the target value is present in the matrix.\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    low = 0\n    high = m * n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        row = mid // n\n        col = mid % n\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s: str = \"racecar\"):\n    return s\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 308, "target_skills": null, "problem_func": "from typing import*\n\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n    \"\"\"\n    return s == s[::-1]", "solution_func": "def g(s: str = \"racecar\"):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find two numbers in the list that add up to the target value.\n    \"\"\"\n    num_map = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_map:\n            return [num_map[complement], i]\n        num_map[num] = i\n    return []\n\ndef g(nums: List[int] = [2, 7, 11, 15], target: int = 9):\n    return nums\n\nassert f(g()) == [0, 1]\n", "emb": null, "idx_generation": 308, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find two numbers in the list that add up to the target value.\n    \"\"\"\n    num_map = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_map:\n            return [num_map[complement], i]\n        num_map[num] = i\n    return []", "solution_func": "def g(nums: List[int] = [2, 7, 11, 15], target: int = 9):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums: List[int] = [1, 2, 3, 2, 1]):\n    return nums\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 308, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward.\n    \"\"\"\n    return nums == nums[::-1]", "solution_func": "def g(nums: List[int] = [1, 2, 3, 2, 1]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if the target value is present in the matrix.\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    low = 0\n    high = m * n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        row = mid // n\n        col = mid % n\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g(), target=10) == False\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 309, "target_skills": null, "problem_func": "from typing import*\n\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if the target value is present in the matrix.\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    low = 0\n    high = m * n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        row = mid // n\n        col = mid % n\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a square matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6]]):\n    return matrix\n\nassert f(g()) == False\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 309, "target_skills": null, "problem_func": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a square matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if the target value is present in the matrix.\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    low = 0\n    high = m * n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        row = mid // n\n        col = mid % n\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g(), target=0) == False\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 309, "target_skills": null, "problem_func": "from typing import*\n\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if the target value is present in the matrix.\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    low = 0\n    high = m * n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        row = mid // n\n        col = mid % n\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\n\ndef f(lst: List[int], target: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    Find all pairs of numbers in the list lst that add up to the target.\n\n    Sample input:\n    lst = [1, 2, 3, 4, 5]\n    target = 5\n\n    Sample output:\n    [(1, 4), (2, 3)]\n\n    Explanation: The pairs of numbers (1, 4) and (2, 3) add up to 5 and they are present in the list.\n    \"\"\"\n    assert len(lst) > 1, 'Hint: The list should have at least 2 numbers.'\n    return [(i, j) for i in lst for j in lst if i + j == target and i != j]\n\ndef g(lst=[1, 2, 3, 4, 5], target=5):\n    return lst, target\n\nassert f(*g()) == [(1, 4), (2, 3)]\n", "emb": null, "idx_generation": 309, "target_skills": null, "problem_func": "import random\nfrom typing import*\n\ndef f(lst: List[int], target: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    Find all pairs of numbers in the list lst that add up to the target.\n\n    Sample input:\n    lst = [1, 2, 3, 4, 5]\n    target = 5\n\n    Sample output:\n    [(1, 4), (2, 3)]\n\n    Explanation: The pairs of numbers (1, 4) and (2, 3) add up to 5 and they are present in the list.\n    \"\"\"\n    assert len(lst) > 1, 'Hint: The list should have at least 2 numbers.'\n    return [(i, j) for i in lst for j in lst if i + j == target and i != j]", "solution_func": "def g(lst=[1, 2, 3, 4, 5], target=5):\n    return lst, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\n\ndef f(lst: List[int]) -> int:\n    \"\"\"\n    Find the sum of all the even numbers in the list lst.\n\n    Sample input:\n    lst = [1, 2, 3, 4, 5, 6]\n\n    Sample output:\n    12\n\n    Explanation: The even numbers in the list are 2, 4, and 6. Their sum is 12.\n    \"\"\"\n    return sum(num for num in lst if num % 2 == 0)\n\ndef g(lst=[1, 2, 3, 4, 5, 6]):\n    return lst\n\nassert f(*g()) == 12\n", "emb": null, "idx_generation": 309, "target_skills": null, "problem_func": "import random\nfrom typing import*\n\ndef f(lst: List[int]) -> int:\n    \"\"\"\n    Find the sum of all the even numbers in the list lst.\n\n    Sample input:\n    lst = [1, 2, 3, 4, 5, 6]\n\n    Sample output:\n    12\n\n    Explanation: The even numbers in the list are 2, 4, and 6. Their sum is 12.\n    \"\"\"\n    return sum(num for num in lst if num % 2 == 0)", "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6]):\n    return lst", "map_ix": null}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\n\ndef f(lst: List[int], k: int) -> List[int]:\n    \"\"\"\n    Find the k smallest numbers from the list lst.\n\n    Sample input:\n    lst = [9, 4, 7, 2, 5, 1]\n    k = 3\n\n    Sample output:\n    [1, 2, 4]\n\n    Explanation: The 3 smallest numbers from the list are 1, 2, and 4.\n    \"\"\"\n    assert k > 0, 'Hint: k should be a positive integer.'\n    return sorted(lst)[:k]\n\ndef g(lst=[9, 4, 7, 2, 5, 1], k=3):\n    return lst, k\n\nassert f(*g()) == [1, 2, 4]\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 309, "target_skills": null, "problem_func": "import random\nfrom typing import*\n\ndef f(lst: List[int], k: int) -> List[int]:\n    \"\"\"\n    Find the k smallest numbers from the list lst.\n\n    Sample input:\n    lst = [9, 4, 7, 2, 5, 1]\n    k = 3\n\n    Sample output:\n    [1, 2, 4]\n\n    Explanation: The 3 smallest numbers from the list are 1, 2, and 4.\n    \"\"\"\n    assert k > 0, 'Hint: k should be a positive integer.'\n    return sorted(lst)[:k]", "solution_func": "def g(lst=[9, 4, 7, 2, 5, 1], k=3):\n    return lst, k", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(strings: List[str], target_length: int) -> bool:\n    \"\"\"\n    Check if there exists a combination of strings in the list that can be concatenated to form a string with exactly target_length characters.\n    \"\"\"\n    combined_string = ''.join(strings)\n    return len(combined_string) == target_length\n\ndef g(strings: List[str], target_length: int):\n    \"\"\"\n    This solution returns the input list of strings and target length as is.\n    \"\"\"\n    return (strings, target_length)\n\nstrings = [\"abc\", \"def\", \"ghi\"]\ntarget_length = 9\n\nassert f(*g(strings, target_length)) == True\n\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 309, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(strings: List[str], target_length: int) -> bool:\n    \"\"\"\n    Check if there exists a combination of strings in the list that can be concatenated to form a string with exactly target_length characters.\n    \"\"\"\n    combined_string = ''.join(strings)\n    return len(combined_string) == target_length", "solution_func": "def g(strings: List[str], target_length: int):\n    \"\"\"\n    This solution returns the input list of strings and target length as is.\n    \"\"\"\n    return (strings, target_length)\n\nstrings = [\"abc\", \"def\", \"ghi\"]\ntarget_length = 9", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that can be multiplied to form the target value.\n    \"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n        if product == target:\n            return True\n    return False\n\ndef g(nums: List[int], target: int):\n    \"\"\"\n    This solution returns the input list of numbers and target value as is.\n    \"\"\"\n    return (nums, target)\n\nnums = [2, 3, 4, 5]\ntarget = 120\n\nassert f(*g(nums, target)) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 309, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that can be multiplied to form the target value.\n    \"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n        if product == target:\n            return True\n    return False", "solution_func": "def g(nums: List[int], target: int):\n    \"\"\"\n    This solution returns the input list of numbers and target value as is.\n    \"\"\"\n    return (nums, target)\n\nnums = [2, 3, 4, 5]\ntarget = 120", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that can be divided to form the target value.\n    \"\"\"\n    quotient = 1\n    for num in nums:\n        if num == 0:\n            continue\n        quotient /= num\n        if quotient == target:\n            return True\n    return False\n\ndef g(nums: List[int], target: int):\n    \"\"\"\n    This solution returns the input list of numbers and target value as is.\n    \"\"\"\n    return (nums, target)\n\nnums = [10, 2, 5]\ntarget = 1\n\nassert f(*g(nums, target)) == True\n\n", "emb": null, "idx_generation": 309, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that can be divided to form the target value.\n    \"\"\"\n    quotient = 1\n    for num in nums:\n        if num == 0:\n            continue\n        quotient /= num\n        if quotient == target:\n            return True\n    return False", "solution_func": "def g(nums: List[int], target: int):\n    \"\"\"\n    This solution returns the input list of numbers and target value as is.\n    \"\"\"\n    return (nums, target)\n\nnums = [10, 2, 5]\ntarget = 1", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(strings: List[str]) -> bool:\n    \"\"\"\n    Check if there exists a pair of strings in the list that have the same length.\n    \"\"\"\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if len(strings[i]) == len(strings[j]):\n                return True\n    return False\n\ndef g(strings=[\"apple\", \"banana\", \"kiwi\", \"orange\"]):\n    return strings\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 309, "target_skills": null, "problem_func": "from typing import*\ndef f(strings: List[str]) -> bool:\n    \"\"\"\n    Check if there exists a pair of strings in the list that have the same length.\n    \"\"\"\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if len(strings[i]) == len(strings[j]):\n                return True\n    return False", "solution_func": "def g(strings=[\"apple\", \"banana\", \"kiwi\", \"orange\"]):\n    return strings", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a pair of numbers whose sum is equal to a prime number.\n    \"\"\"\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    prime_sums = set()\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if is_prime(nums[i] + nums[j]):\n                return True\n\n    return False\n\ndef g(nums: List[int] = [2, 3, 5, 7, 11]):\n    return nums\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 310, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a pair of numbers whose sum is equal to a prime number.\n    \"\"\"\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    prime_sums = set()\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if is_prime(nums[i] + nums[j]):\n                return True\n\n    return False", "solution_func": "def g(nums: List[int] = [2, 3, 5, 7, 11]):\n    return nums", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    A palindrome is a list that reads the same forwards and backwards.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums: List[int] = [1, 2, 3, 2, 1]):\n    return nums\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 310, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    A palindrome is a list that reads the same forwards and backwards.\n    \"\"\"\n    return nums == nums[::-1]", "solution_func": "def g(nums: List[int] = [1, 2, 3, 2, 1]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains at least one duplicate element.\n    \"\"\"\n    return len(set(nums)) != len(nums)\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 1]):\n    return nums\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 310, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains at least one duplicate element.\n    \"\"\"\n    return len(set(nums)) != len(nums)", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 1]):\n    return nums", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains only prime numbers.\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\n    return all(is_prime(num) for num in nums)\n\ndef g():\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n\nassert f(g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 310, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains only prime numbers.\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\n    return all(is_prime(num) for num in nums)", "solution_func": "def g():\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]", "map_ix": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 310, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the sum of all the elements in the given list.\n    \"\"\"\n    return sum(nums)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == 15\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 310, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the sum of all the elements in the given list.\n    \"\"\"\n    return sum(nums)", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\n\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there is a pair of numbers in the list lst that multiply to the target.\n\n    Sample input:\n    lst = [1, 2, 3, 4, 5]\n    target = 20\n\n    Sample output:\n    True\n\n    Explanation: The pair of numbers (4, 5) multiply to 20 and they are present in the list.\n    \"\"\"\n    assert len(lst) > 1, 'Hint: The list should have at least 2 numbers.'\n    return any(i * j == target for i in lst for j in lst if i != j)\n\ndef g(lst=[1, 2, 3, 4, 5], target=20):\n    return lst, target\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 310, "target_skills": null, "problem_func": "import random\nfrom typing import*\n\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there is a pair of numbers in the list lst that multiply to the target.\n\n    Sample input:\n    lst = [1, 2, 3, 4, 5]\n    target = 20\n\n    Sample output:\n    True\n\n    Explanation: The pair of numbers (4, 5) multiply to 20 and they are present in the list.\n    \"\"\"\n    assert len(lst) > 1, 'Hint: The list should have at least 2 numbers.'\n    return any(i * j == target for i in lst for j in lst if i != j)", "solution_func": "def g(lst=[1, 2, 3, 4, 5], target=20):\n    return lst, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\n\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there is a pair of numbers in the list lst whose difference is equal to the target.\n\n    Sample input:\n    lst = [1, 2, 3, 4, 5]\n    target = 2\n\n    Sample output:\n    True\n\n    Explanation: The pair of numbers (3, 5) have a difference of 2 and they are present in the list.\n    \"\"\"\n    assert len(lst) > 1, 'Hint: The list should have at least 2 numbers.'\n    return any(abs(i - j) == target for i in lst for j in lst if i != j)\n\ndef g(lst=[1, 2, 3, 4, 5], target=2):\n    return lst, target\n\nassert f(*g()) == True\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 310, "target_skills": null, "problem_func": "import random\nfrom typing import*\n\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there is a pair of numbers in the list lst whose difference is equal to the target.\n\n    Sample input:\n    lst = [1, 2, 3, 4, 5]\n    target = 2\n\n    Sample output:\n    True\n\n    Explanation: The pair of numbers (3, 5) have a difference of 2 and they are present in the list.\n    \"\"\"\n    assert len(lst) > 1, 'Hint: The list should have at least 2 numbers.'\n    return any(abs(i - j) == target for i in lst for j in lst if i != j)", "solution_func": "def g(lst=[1, 2, 3, 4, 5], target=2):\n    return lst, target", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\n\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there is a triplet of numbers in the list lst that add up to the target.\n\n    Sample input:\n    lst = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample output:\n    True\n\n    Explanation: The triplet of numbers (2, 3, 4) add up to 9 and they are present in the list.\n    \"\"\"\n    assert len(lst) > 2, 'Hint: The list should have at least 3 numbers.'\n    return any(i + j + k == target for i in lst for j in lst for k in lst if i != j and i != k and j != k)\n\ndef g(lst=[1, 2, 3, 4, 5], target=9):\n    return lst, target\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 310, "target_skills": null, "problem_func": "import random\nfrom typing import*\n\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there is a triplet of numbers in the list lst that add up to the target.\n\n    Sample input:\n    lst = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample output:\n    True\n\n    Explanation: The triplet of numbers (2, 3, 4) add up to 9 and they are present in the list.\n    \"\"\"\n    assert len(lst) > 2, 'Hint: The list should have at least 3 numbers.'\n    return any(i + j + k == target for i in lst for j in lst for k in lst if i != j and i != k and j != k)", "solution_func": "def g(lst=[1, 2, 3, 4, 5], target=9):\n    return lst, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target number, check if there exists a pair of numbers in the list whose sum is equal to the target number.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        if target - num in num_set:\n            return True\n    return False\n\ndef g(target: int):\n    return [7, 3, 5, 2, 8, 4]\n\nassert f(g(), target=10) == True\n", "emb": null, "idx_generation": 310, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target number, check if there exists a pair of numbers in the list whose sum is equal to the target number.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        if target - num in num_set:\n            return True\n    return False", "solution_func": "def g(target: int):\n    return [7, 3, 5, 2, 8, 4]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=100, n=5) -> bool:\n    \"\"\"Find n distinct positive integers that sum to target\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target and all((i > 0 for i in nums))\ndef g(target = 100, n = 5):\n    return list(range(1, n+1))\nassert f(g())\n", "emb": null, "idx_generation": 311, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100, n=5) -> bool:\n    \"\"\"Find n distinct positive integers that sum to target\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target and all((i > 0 for i in nums))", "solution_func": "def g(target = 100, n = 5):\n    return list(range(1, n+1))", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='python', length=4) -> bool:\n    \"\"\"Check if the given string is a substring with length length of the target string\"\"\"\n    return s in target and len(s) == length\ndef g(target='python', length=4):\n    return target[1:5]\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 311, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='python', length=4) -> bool:\n    \"\"\"Check if the given string is a substring with length length of the target string\"\"\"\n    return s in target and len(s) == length", "solution_func": "def g(target='python', length=4):\n    return target[1:5]", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10, n=2) -> bool:\n    \"\"\"Check if there exists a submatrix of size n x n that has a sum equal to the target\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    for i in range(rows - n + 1):\n        for j in range(cols - n + 1):\n            submatrix_sum = sum(sum(matrix[i + k][j + l] for l in range(n)) for k in range(n))\n            if submatrix_sum == target:\n                return True\n    return False\n\ndef g(target=10, n=2):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n", "emb": null, "idx_generation": 311, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10, n=2) -> bool:\n    \"\"\"Check if there exists a submatrix of size n x n that has a sum equal to the target\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    for i in range(rows - n + 1):\n        for j in range(cols - n + 1):\n            submatrix_sum = sum(sum(matrix[i + k][j + l] for l in range(n)) for k in range(n))\n            if submatrix_sum == target:\n                return True\n    return False", "solution_func": "def g(target=10, n=2):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find and return the maximum product of any three numbers in the list.\n\n    Example:\n    arr = [1, 2, 3, 4, 5]\n\n    Output:\n    60\n\n    Explanation: The maximum product of any three numbers is 4 * 5 * 3 = 60.\n    \"\"\"\n    arr.sort()\n    return max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1])\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == 60\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 311, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find and return the maximum product of any three numbers in the list.\n\n    Example:\n    arr = [1, 2, 3, 4, 5]\n\n    Output:\n    60\n\n    Explanation: The maximum product of any three numbers is 4 * 5 * 3 = 60.\n    \"\"\"\n    arr.sort()\n    return max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1])", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find and return the sum of the largest and smallest numbers in the list.\n\n    Example:\n    arr = [5, 2, 9, 1, 7]\n\n    Output:\n    10\n\n    Explanation: The sum of the largest number (9) and the smallest number (1) is 10.\n    \"\"\"\n    return max(arr) + min(arr)\n\ndef g():\n    return [5, 2, 9, 1, 7]\n\nassert f(g()) == 10\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 311, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find and return the sum of the largest and smallest numbers in the list.\n\n    Example:\n    arr = [5, 2, 9, 1, 7]\n\n    Output:\n    10\n\n    Explanation: The sum of the largest number (9) and the smallest number (1) is 10.\n    \"\"\"\n    return max(arr) + min(arr)", "solution_func": "def g():\n    return [5, 2, 9, 1, 7]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with all the duplicate elements removed.\n\n    Example:\n    arr = [1, 2, 2, 3, 4, 4, 5, 5]\n\n    Output:\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    return list(set(arr))\n\ndef g():\n    return [1, 2, 2, 3, 4, 4, 5, 5]\n\nassert f(g()) == [1, 2, 3, 4, 5]\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 311, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with all the duplicate elements removed.\n\n    Example:\n    arr = [1, 2, 2, 3, 4, 4, 5, 5]\n\n    Output:\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    return list(set(arr))", "solution_func": "def g():\n    return [1, 2, 2, 3, 4, 4, 5, 5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"Given an array of integers, replace each element with the sum of all the other elements.\"\"\"\n    n = len(nums)\n    result = [0] * n\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                result[i] += nums[j]\n\n    return result\n\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    return (nums,)\n\nassert f(*g()) == [14, 13, 12, 11, 10]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 311, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"Given an array of integers, replace each element with the sum of all the other elements.\"\"\"\n    n = len(nums)\n    result = [0] * n\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                result[i] += nums[j]\n\n    return result", "solution_func": "def g():\n    nums = [1, 2, 3, 4, 5]\n    return (nums,)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> str:\n    \"\"\"Given a string, reverse the order of words in the string.\"\"\"\n    words = s.split()\n    reversed_words = words[::-1]\n    return ' '.join(reversed_words)\n\ndef g():\n    return \"Hello world\"\n\nassert f(g()) == \"world Hello\"\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 311, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> str:\n    \"\"\"Given a string, reverse the order of words in the string.\"\"\"\n    words = s.split()\n    reversed_words = words[::-1]\n    return ' '.join(reversed_words)", "solution_func": "def g():\n    return \"Hello world\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int]) -> Tuple[int, int]:\n    \"\"\"Given an array of integers, find the two numbers that appear only once while all other numbers appear twice.\"\"\"\n    xor = 0\n    for num in nums:\n        xor ^= num\n\n    mask = xor & -xor\n\n    num1 = 0\n    for num in nums:\n        if num & mask:\n            num1 ^= num\n\n    num2 = xor ^ num1\n\n    return num1, num2\n\ndef g():\n    nums = [1, 2, 3, 4, 4, 5, 5, 6]\n    return (nums,)\n\nassert f(*g()) == (1, 2)\n", "emb": null, "idx_generation": 311, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> Tuple[int, int]:\n    \"\"\"Given an array of integers, find the two numbers that appear only once while all other numbers appear twice.\"\"\"\n    xor = 0\n    for num in nums:\n        xor ^= num\n\n    mask = xor & -xor\n\n    num1 = 0\n    for num in nums:\n        if num & mask:\n            num1 ^= num\n\n    num2 = xor ^ num1\n\n    return num1, num2", "solution_func": "def g():\n    nums = [1, 2, 3, 4, 4, 5, 5, 6]\n    return (nums,)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n    A matrix is symmetric if it is equal to its transpose.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    transposed_matrix = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n    return matrix == transposed_matrix\n\ndef g(size=3):\n    \"\"\"\n    Generate a symmetric matrix of the given size\n    \"\"\"\n    return [[1 if j >= i else 0 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 311, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n    A matrix is symmetric if it is equal to its transpose.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    transposed_matrix = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n    return matrix == transposed_matrix", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a symmetric matrix of the given size\n    \"\"\"\n    return [[1 if j >= i else 0 for j in range(size)] for i in range(size)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(nums: List[int], target_sum: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that adds up to the target_sum.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target_sum: int = 8):\n    return (nums, target_sum)\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 312, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int], target_sum: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that adds up to the target_sum.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target_sum: int = 8):\n    return (nums, target_sum)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with only the even numbers from the original list.\n    \"\"\"\n    return [num for num in nums if num % 2 == 0]\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6]):\n    return nums\n\nassert f(g()) == [2, 4, 6]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 312, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with only the even numbers from the original list.\n    \"\"\"\n    return [num for num in nums if num % 2 == 0]", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix of integers, return a new matrix where each element is multiplied by 2.\n    \"\"\"\n    return [[num * 2 for num in row] for row in matrix]\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [[2, 4, 6], [8, 10, 12], [14, 16, 18]]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 312, "target_skills": null, "problem_func": "from typing import*\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix of integers, return a new matrix where each element is multiplied by 2.\n    \"\"\"\n    return [[num * 2 for num in row] for row in matrix]", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if all the elements in each row are unique.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    for row in matrix:\n        if len(row) != len(set(row)):\n            return False\n    return True\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 312, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if all the elements in each row are unique.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    for row in matrix:\n        if len(row) != len(set(row)):\n            return False\n    return True", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[str]]) -> bool:\n    \"\"\"\n    Given a list of strings, check if all the strings have the same length.\n\n    Sample Input:\n    arr = [\"abc\", \"def\", \"ghi\"]\n\n    Sample Output:\n    True\n    \"\"\"\n    length = len(arr[0])\n    for string in arr:\n        if len(string) != length:\n            return False\n    return True\n\ndef g(arr: List[str] = [\"abc\", \"def\", \"ghi\"]):\n    return arr\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 312, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[str]]) -> bool:\n    \"\"\"\n    Given a list of strings, check if all the strings have the same length.\n\n    Sample Input:\n    arr = [\"abc\", \"def\", \"ghi\"]\n\n    Sample Output:\n    True\n    \"\"\"\n    length = len(arr[0])\n    for string in arr:\n        if len(string) != length:\n            return False\n    return True", "solution_func": "def g(arr: List[str] = [\"abc\", \"def\", \"ghi\"]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D array of integers, check if the sum of each column is equal.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    column_sums = [sum(column) for column in zip(*arr)]\n    return all(column == column_sums[0] for column in column_sums)\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 312, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D array of integers, check if the sum of each column is equal.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    column_sums = [sum(column) for column in zip(*arr)]\n    return all(column == column_sums[0] for column in column_sums)", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: List[int], target=20) -> bool:\n    \"\"\"Find a list of integers that contains exactly four distinct values, such that the product of the values is equal to the target.\"\"\"\n    return len(set(x)) == 4 and all([x[i]*x[j]*x[k]*x[l] == target for i in range(len(x)) for j in range(i+1, len(x)) for k in range(j+1, len(x)) for l in range(k+1, len(x))])\ndef g(target=20):\n    return [1, 2, 4, 5]\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 312, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], target=20) -> bool:\n    \"\"\"Find a list of integers that contains exactly four distinct values, such that the product of the values is equal to the target.\"\"\"\n    return len(set(x)) == 4 and all([x[i]*x[j]*x[k]*x[l] == target for i in range(len(x)) for j in range(i+1, len(x)) for k in range(j+1, len(x)) for l in range(k+1, len(x))])", "solution_func": "def g(target=20):\n    return [1, 2, 4, 5]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Find the index of the first occurrence of a given substring in a string, and determine if it is a perfect square.\"\"\"\n    return s.find(substring) >= 0 and (s.find(substring))**(1/2) % 1 == 0\ndef g(substring='abc'):\n    return substring + 'def' + substring\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 312, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Find the index of the first occurrence of a given substring in a string, and determine if it is a perfect square.\"\"\"\n    return s.find(substring) >= 0 and (s.find(substring))**(1/2) % 1 == 0", "solution_func": "def g(substring='abc'):\n    return substring + 'def' + substring", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find a number whose square is equal to the sum of its digits.\"\"\"\n    return any([i**2 == sum([int(d) for d in str(i)]) for i in range(1, n)])\ndef g():\n    return 100\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 312, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find a number whose square is equal to the sum of its digits.\"\"\"\n    return any([i**2 == sum([int(d) for d in str(i)]) for i in range(1, n)])", "solution_func": "def g():\n    return 100", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the product of all the elements in the given list.\n    \"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n    return product\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == 120\n\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 312, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the product of all the elements in the given list.\n    \"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n    return product", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are exactly 'count' numbers that form a valid geometric progression with a common ratio of 'target'.\n\n    Sample Input:\n    nums = [2, 4, 8, 16, 32]\n    target = 2\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(nums[i] * target == nums[i+1] and nums[i+1] * target == nums[i+2] for i in range(len(nums)-2))\n\ndef g(nums: List[int] = [2, 4, 8, 16, 32], target: int = 2, count: int = 3):\n    return (nums, target, count)\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 313, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are exactly 'count' numbers that form a valid geometric progression with a common ratio of 'target'.\n\n    Sample Input:\n    nums = [2, 4, 8, 16, 32]\n    target = 2\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(nums[i] * target == nums[i+1] and nums[i+1] * target == nums[i+2] for i in range(len(nums)-2))", "solution_func": "def g(nums: List[int] = [2, 4, 8, 16, 32], target: int = 2, count: int = 3):\n    return (nums, target, count)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are exactly 'count' numbers that form a valid fibonacci sequence with a common difference of 'target'.\n\n    Sample Input:\n    nums = [1, 2, 3, 5, 8]\n    target = 1\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(nums[i] + target == nums[i+1] and nums[i+1] + target == nums[i+2] for i in range(len(nums)-2))\n\ndef g(nums: List[int] = [1, 2, 3, 5, 8], target: int = 1, count: int = 3):\n    return (nums, target, count)\n\nassert f(*g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 313, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are exactly 'count' numbers that form a valid fibonacci sequence with a common difference of 'target'.\n\n    Sample Input:\n    nums = [1, 2, 3, 5, 8]\n    target = 1\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(nums[i] + target == nums[i+1] and nums[i+1] + target == nums[i+2] for i in range(len(nums)-2))", "solution_func": "def g(nums: List[int] = [1, 2, 3, 5, 8], target: int = 1, count: int = 3):\n    return (nums, target, count)", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are exactly 'count' numbers that form a valid arithmetic progression with the sum of elements equal to 'target'.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 12\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(nums[i] + nums[i+1] + nums[i+2] == target for i in range(len(nums)-2))\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 12, count: int = 3):\n    return (nums, target, count)\n\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 313, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are exactly 'count' numbers that form a valid arithmetic progression with the sum of elements equal to 'target'.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 12\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(nums[i] + nums[i+1] + nums[i+2] == target for i in range(len(nums)-2))", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 12, count: int = 3):\n    return (nums, target, count)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of any contiguous subarray.\n\n    Sample Input:\n    [1, -2, 3, -4, 5, -6, 7, -8, 9]\n\n    Sample Output:\n    12\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum = max(num, curr_sum + num)\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n\ndef g() -> List[int]:\n    return [1, -2, 3, -4, 5, -6, 7, -8, 9]\n\nassert f(g()) == 12\n\n", "emb": null, "idx_generation": 313, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of any contiguous subarray.\n\n    Sample Input:\n    [1, -2, 3, -4, 5, -6, 7, -8, 9]\n\n    Sample Output:\n    12\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum = max(num, curr_sum + num)\n        max_sum = max(max_sum, curr_sum)\n    return max_sum", "solution_func": "def g() -> List[int]:\n    return [1, -2, 3, -4, 5, -6, 7, -8, 9]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with each element being the product of all the elements in the original list except the one at that position.\n\n    Sample Input:\n    [1, 2, 3, 4, 5]\n\n    Sample Output:\n    [120, 60, 40, 30, 24]\n    \"\"\"\n    n = len(nums)\n    result = [1] * n\n\n    left_product = 1\n    for i in range(n):\n        result[i] *= left_product\n        left_product *= nums[i]\n\n    right_product = 1\n    for i in range(n - 1, -1, -1):\n        result[i] *= right_product\n        right_product *= nums[i]\n\n    return result\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == [120, 60, 40, 30, 24]\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 313, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with each element being the product of all the elements in the original list except the one at that position.\n\n    Sample Input:\n    [1, 2, 3, 4, 5]\n\n    Sample Output:\n    [120, 60, 40, 30, 24]\n    \"\"\"\n    n = len(nums)\n    result = [1] * n\n\n    left_product = 1\n    for i in range(n):\n        result[i] *= left_product\n        left_product *= nums[i]\n\n    right_product = 1\n    for i in range(n - 1, -1, -1):\n        result[i] *= right_product\n        right_product *= nums[i]\n\n    return result", "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 1, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the length of the longest increasing subarray.\n\n    Sample Input:\n    [1, 2, 3, 2, 4, 5, 6, 7, 8, 9]\n\n    Sample Output:\n    6\n    \"\"\"\n    max_length = 1\n    length = 1\n    for i in range(1, len(nums)):\n        if nums[i] > nums[i-1]:\n            length += 1\n            max_length = max(max_length, length)\n        else:\n            length = 1\n    return max_length\n\ndef g() -> List[int]:\n    return [1, 2, 3, 2, 4, 5, 6, 7, 8, 9]\n\nassert f(g()) == 6\n\n", "emb": null, "idx_generation": 313, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the length of the longest increasing subarray.\n\n    Sample Input:\n    [1, 2, 3, 2, 4, 5, 6, 7, 8, 9]\n\n    Sample Output:\n    6\n    \"\"\"\n    max_length = 1\n    length = 1\n    for i in range(1, len(nums)):\n        if nums[i] > nums[i-1]:\n            length += 1\n            max_length = max(max_length, length)\n        else:\n            length = 1\n    return max_length", "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 2, 4, 5, 6, 7, 8, 9]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int], n=5, s=19) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 5, s = 19):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 313, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], n=5, s=19) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])", "solution_func": "def g(n = 5, s = 19):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x", "map_ix": [0, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int], n=6, s=24) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 6, s = 24):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 313, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], n=6, s=24) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])", "solution_func": "def g(n = 6, s = 24):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int], n=7, s=31) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 7, s = 31):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 313, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], n=7, s=31) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])", "solution_func": "def g(n = 7, s = 31):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"Calculate the sum of the largest element in each row of the matrix.\"\"\"\n    sums = []\n    for row in matrix:\n        max_value = max(row)\n        sums.append(max_value)\n    return sum(sums)\n\ndef g(matrix: List[List[int]]) -> List[List[int]]:\n    return matrix\n\nassert f(g([[1, 2, 3], [4, 5, 6], [7, 8, 9]])) == 24\n", "emb": null, "idx_generation": 313, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"Calculate the sum of the largest element in each row of the matrix.\"\"\"\n    sums = []\n    for row in matrix:\n        max_value = max(row)\n        sums.append(max_value)\n    return sum(sums)", "solution_func": "def g(matrix: List[List[int]]) -> List[List[int]]:\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose sum is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 6):\n    return nums, target\n\nassert f(*g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 314, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose sum is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 6):\n    return nums, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substring: str) -> bool:\n    \"\"\"\n    Check if the given string contains the given substring.\n    \"\"\"\n    return substring in s\n\ndef g(s: str = \"Hello, World!\", substring: str = \"Hello\"):\n    return s, substring\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 314, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring: str) -> bool:\n    \"\"\"\n    Check if the given string contains the given substring.\n    \"\"\"\n    return substring in s", "solution_func": "def g(s: str = \"Hello, World!\", substring: str = \"Hello\"):\n    return s, substring", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a square matrix, i.e., the number of rows is equal to the number of columns.\n    \"\"\"\n    rows = len(matrix)\n    if rows == 0:\n        return False\n    cols = len(matrix[0])\n    return rows == cols\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(*g()) == True\n", "emb": null, "idx_generation": 314, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a square matrix, i.e., the number of rows is equal to the number of columns.\n    \"\"\"\n    rows = len(matrix)\n    if rows == 0:\n        return False\n    cols = len(matrix[0])\n    return rows == cols", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substrings=['cat', 'dog', 'mouse']) -> bool:\n    \"\"\"\n    Find a string that contains all the substrings in any order\n    \"\"\"\n    return all((sub in s for sub in substrings))\ndef g(substrings = ['cat', 'dog', 'mouse']):\n    return \"\".join(substrings)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 314, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substrings=['cat', 'dog', 'mouse']) -> bool:\n    \"\"\"\n    Find a string that contains all the substrings in any order\n    \"\"\"\n    return all((sub in s for sub in substrings))", "solution_func": "def g(substrings = ['cat', 'dog', 'mouse']):\n    return \"\".join(substrings)", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Find a subset of numbers in the list that sum up to the target value.\n    \"\"\"\n    def subsetSum(numbers, target):\n        if target == 0:\n            return True\n        if not numbers or target < 0:\n            return False\n        return subsetSum(numbers[1:], target) or subsetSum(numbers[1:], target - numbers[0])\n\n    return subsetSum(x, target)\ndef g(target = 0):\n    return [-1, 2, 3, 5, 8, 10]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 314, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Find a subset of numbers in the list that sum up to the target value.\n    \"\"\"\n    def subsetSum(numbers, target):\n        if target == 0:\n            return True\n        if not numbers or target < 0:\n            return False\n        return subsetSum(numbers[1:], target) or subsetSum(numbers[1:], target - numbers[0])\n\n    return subsetSum(x, target)", "solution_func": "def g(target = 0):\n    return [-1, 2, 3, 5, 8, 10]", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: List[float], n: int = 3) -> bool:\n    \"\"\"\n    Find a list of n floating-point numbers that sum up to a whole number.\n    \"\"\"\n    return len(x) == n and sum(x).is_integer()\ndef g(n = 3):\n    return [1.5] * n\nassert f(g())\n", "emb": null, "idx_generation": 314, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[float], n: int = 3) -> bool:\n    \"\"\"\n    Find a list of n floating-point numbers that sum up to a whole number.\n    \"\"\"\n    return len(x) == n and sum(x).is_integer()", "solution_func": "def g(n = 3):\n    return [1.5] * n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], tot=10, n=3) -> bool:\n    \"\"\"Find n distinct positive even integers that sum to tot\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 == 0 for i in nums))\ndef g(tot = 10, n = 3):\n    return list(range(2, 2 * n + 1, 2))\nassert f(g())\n", "emb": null, "idx_generation": 314, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], tot=10, n=3) -> bool:\n    \"\"\"Find n distinct positive even integers that sum to tot\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 == 0 for i in nums))", "solution_func": "def g(tot = 10, n = 3):\n    return list(range(2, 2 * n + 1, 2))", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Check if it is possible to obtain the target number by evaluating the expression using the given numbers\"\"\"\n    if len(nums) == 1:\n        return nums[0] == target\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            a, b = nums[i], nums[j]\n            remaining = nums[:i] + nums[i+1:j] + nums[j+1:]\n            if f([a + b] + remaining, target) or f([a - b] + remaining, target) or f([b - a] + remaining, target) or f([a * b] + remaining, target) or (b != 0 and f([a / b] + remaining, target)) or (a != 0 and f([b / a] + remaining, target)):\n                return True\n    return False\n\ndef g(a=4, b=1, c=5, d=2):\n    return [a, b, c, d]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 314, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Check if it is possible to obtain the target number by evaluating the expression using the given numbers\"\"\"\n    if len(nums) == 1:\n        return nums[0] == target\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            a, b = nums[i], nums[j]\n            remaining = nums[:i] + nums[i+1:j] + nums[j+1:]\n            if f([a + b] + remaining, target) or f([a - b] + remaining, target) or f([b - a] + remaining, target) or f([a * b] + remaining, target) or (b != 0 and f([a / b] + remaining, target)) or (a != 0 and f([b / a] + remaining, target)):\n                return True\n    return False", "solution_func": "def g(a=4, b=1, c=5, d=2):\n    return [a, b, c, d]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], n=3) -> bool:\n    \"\"\"Check if the given list of numbers can be partitioned into n subsets with equal sums\"\"\"\n    target_sum = sum(nums) // n\n    if sum(nums) % n != 0:\n        return False\n    def is_possible(nums, n, target_sum, curr_sum=0, visited=set()):\n        if n == 0:\n            return True\n        if curr_sum == target_sum:\n            return is_possible(nums, n - 1, target_sum)\n        for i in range(len(nums)):\n            if i not in visited and curr_sum + nums[i] <= target_sum:\n                visited.add(i)\n                if is_possible(nums, n, target_sum, curr_sum + nums[i], visited):\n                    return True\n                visited.remove(i)\n        return False\n    return is_possible(nums, n, target_sum)\n\ndef g():\n    return [2, 3, 5, 7, 10, 12]\n\nassert f(g())\n", "emb": null, "idx_generation": 314, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], n=3) -> bool:\n    \"\"\"Check if the given list of numbers can be partitioned into n subsets with equal sums\"\"\"\n    target_sum = sum(nums) // n\n    if sum(nums) % n != 0:\n        return False\n    def is_possible(nums, n, target_sum, curr_sum=0, visited=set()):\n        if n == 0:\n            return True\n        if curr_sum == target_sum:\n            return is_possible(nums, n - 1, target_sum)\n        for i in range(len(nums)):\n            if i not in visited and curr_sum + nums[i] <= target_sum:\n                visited.add(i)\n                if is_possible(nums, n, target_sum, curr_sum + nums[i], visited):\n                    return True\n                visited.remove(i)\n        return False\n    return is_possible(nums, n, target_sum)", "solution_func": "def g():\n    return [2, 3, 5, 7, 10, 12]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the array that sum up to the target\"\"\"\n    seen = set()\n    for num in arr:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5], target=9):\n    return arr, target\n\nassert f(*g()) == True\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 314, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the array that sum up to the target\"\"\"\n    seen = set()\n    for num in arr:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(arr=[1, 2, 3, 4, 5], target=9):\n    return arr, target", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 1, 0]}, {"fitness": -Infinity, "program_str": "import random\nimport numpy as np\nfrom typing import*\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"Return the sum of all elements in the given matrix.\"\"\"\n    return sum(sum(row) for row in matrix)\n\ndef g(rows=3, cols=3):\n    \"\"\"Generate a matrix of size rows x cols with random integer values.\"\"\"\n    matrix = np.random.randint(low=0, high=10, size=(rows, cols))\n    return matrix.tolist()\n\nassert f(g()) == sum(sum(row) for row in g())\n", "emb": null, "idx_generation": 315, "target_skills": null, "problem_func": "import random\nimport numpy as np\nfrom typing import*\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"Return the sum of all elements in the given matrix.\"\"\"\n    return sum(sum(row) for row in matrix)", "solution_func": "def g(rows=3, cols=3):\n    \"\"\"Generate a matrix of size rows x cols with random integer values.\"\"\"\n    matrix = np.random.randint(low=0, high=10, size=(rows, cols))\n    return matrix.tolist()", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nimport numpy as np\nfrom typing import*\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"Return the product of the diagonal elements in the given matrix.\"\"\"\n    diagonal_product = 1\n    n = len(matrix)\n\n    for i in range(n):\n        diagonal_product *= matrix[i][i]\n\n    return diagonal_product\n\ndef g(n=3):\n    \"\"\"Generate a matrix of size n x n with random integer values.\"\"\"\n    matrix = np.random.randint(low=1, high=10, size=(n, n))\n    return matrix.tolist()\n\nassert f(g()) == np.prod(np.diagonal(np.array(g())))\n", "emb": null, "idx_generation": 315, "target_skills": null, "problem_func": "import random\nimport numpy as np\nfrom typing import*\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"Return the product of the diagonal elements in the given matrix.\"\"\"\n    diagonal_product = 1\n    n = len(matrix)\n\n    for i in range(n):\n        diagonal_product *= matrix[i][i]\n\n    return diagonal_product", "solution_func": "def g(n=3):\n    \"\"\"Generate a matrix of size n x n with random integer values.\"\"\"\n    matrix = np.random.randint(low=1, high=10, size=(n, n))\n    return matrix.tolist()", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nimport numpy as np\nfrom typing import*\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Return the row with the highest sum in the given matrix.\n\n    If multiple rows have the same highest sum, return all of them.\n    \"\"\"\n    row_sums = [sum(row) for row in matrix]\n    max_sum = max(row_sums)\n    max_sum_rows = [i for i, sum in enumerate(row_sums) if sum == max_sum]\n    return max_sum_rows\n\ndef g(rows=3, cols=3):\n    \"\"\"Generate a matrix of size rows x cols with random integer values.\"\"\"\n    matrix = np.random.randint(low=0, high=10, size=(rows, cols))\n    return matrix.tolist()\n\nassert f(g()) == [i for i, sum in enumerate([sum(row) for row in g()]) if sum == max([sum(row) for row in g()])]\n", "emb": null, "idx_generation": 315, "target_skills": null, "problem_func": "import random\nimport numpy as np\nfrom typing import*\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Return the row with the highest sum in the given matrix.\n\n    If multiple rows have the same highest sum, return all of them.\n    \"\"\"\n    row_sums = [sum(row) for row in matrix]\n    max_sum = max(row_sums)\n    max_sum_rows = [i for i, sum in enumerate(row_sums) if sum == max_sum]\n    return max_sum_rows", "solution_func": "def g(rows=3, cols=3):\n    \"\"\"Generate a matrix of size rows x cols with random integer values.\"\"\"\n    matrix = np.random.randint(low=0, high=10, size=(rows, cols))\n    return matrix.tolist()", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int, n=3) -> bool:\n    \"\"\"Check if there are n numbers in the list that add up to the target.\"\"\"\n    return any(sum(comb) == target for comb in combinations(nums, n))\ndef g():\n    return ([2, 4, 6, 8, 10], 18)\n\nassert f(*g(), n=2) == True\n", "emb": null, "idx_generation": 315, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int, n=3) -> bool:\n    \"\"\"Check if there are n numbers in the list that add up to the target.\"\"\"\n    return any(sum(comb) == target for comb in combinations(nums, n))", "solution_func": "def g():\n    return ([2, 4, 6, 8, 10], 18)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew']) -> bool:\n    \"\"\"Check if the given string is a concatenation of two strings from the substring list.\"\"\"\n    return any(s == sub1 + sub2 for sub1, sub2 in combinations(substrings, 2))\ndef g(substrings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew']):\n    return ''.join(substrings)\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 315, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew']) -> bool:\n    \"\"\"Check if the given string is a concatenation of two strings from the substring list.\"\"\"\n    return any(s == sub1 + sub2 for sub1, sub2 in combinations(substrings, 2))", "solution_func": "def g(substrings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew']):\n    return ''.join(substrings)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]], origin=(0, 0)) -> bool:\n    \"\"\"Check if all the given points lie on the same line passing through the origin.\"\"\"\n    x_values, y_values = zip(*points)\n    return len(set(x * y for x, y in zip(x_values, y_values))) == 1\ndef g():\n    return [(1, 2), (2, 4), (3, 6), (4, 8)]\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 315, "target_skills": null, "problem_func": "from typing import*\ndef f(points: List[Tuple[int, int]], origin=(0, 0)) -> bool:\n    \"\"\"Check if all the given points lie on the same line passing through the origin.\"\"\"\n    x_values, y_values = zip(*points)\n    return len(set(x * y for x, y in zip(x_values, y_values))) == 1", "solution_func": "def g():\n    return [(1, 2), (2, 4), (3, 6), (4, 8)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, find the maximum element in the matrix.\n    \"\"\"\n    max_element = float('-inf')\n    \n    for row in matrix:\n        for element in row:\n            if element > max_element:\n                max_element = element\n        \n    return max_element\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 9\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 315, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, find the maximum element in the matrix.\n    \"\"\"\n    max_element = float('-inf')\n    \n    for row in matrix:\n        for element in row:\n            if element > max_element:\n                max_element = element\n        \n    return max_element", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return the sum of each row in the matrix.\n    \"\"\"\n    row_sums = []\n    \n    for row in matrix:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n        \n    return row_sums\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [6, 15, 24]\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 315, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return the sum of each row in the matrix.\n    \"\"\"\n    row_sums = []\n    \n    for row in matrix:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n        \n    return row_sums", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 1, 0, 1, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return the sum of each column in the matrix.\n    \"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    \n    column_sums = [0] * m\n    \n    for i in range(m):\n        column_sum = 0\n        for j in range(n):\n            column_sum += matrix[j][i]\n        column_sums[i] = column_sum\n        \n    return column_sums\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [12, 15, 18]\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 315, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return the sum of each column in the matrix.\n    \"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    \n    column_sums = [0] * m\n    \n    for i in range(m):\n        column_sum = 0\n        for j in range(n):\n            column_sum += matrix[j][i]\n        column_sums[i] = column_sum\n        \n    return column_sums", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find if there are three numbers in the given list that add up to zero.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == 0:\n                    return True\n    return False\n\ndef g():\n    \"\"\"Generate a list of numbers.\"\"\"\n    return [1, -2, 3, -4, 5, -6]\n\nassert f(g()) == False\n", "emb": null, "idx_generation": 315, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find if there are three numbers in the given list that add up to zero.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == 0:\n                    return True\n    return False", "solution_func": "def g():\n    \"\"\"Generate a list of numbers.\"\"\"\n    return [1, -2, 3, -4, 5, -6]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the minimum sum of any contiguous subarray.\n\n    Sample Input:\n    arr = [1, -2, 3, -4, 5, -6]\n\n    Sample Output:\n    -6\n    \"\"\"\n    current_sum = min_sum = arr[0]\n    for num in arr[1:]:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum\n\ndef g(arr: List[int] = [1, -2, 3, -4, 5, -6]):\n    return arr\n\nassert f(g()) == -6\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0], "idx_generation": 316, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the minimum sum of any contiguous subarray.\n\n    Sample Input:\n    arr = [1, -2, 3, -4, 5, -6]\n\n    Sample Output:\n    -6\n    \"\"\"\n    current_sum = min_sum = arr[0]\n    for num in arr[1:]:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "solution_func": "def g(arr: List[int] = [1, -2, 3, -4, 5, -6]):\n    return arr", "map_ix": [1, 1, 0, 1, 0, 0, 0, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum product of any three numbers in the list.\n\n    Sample Input:\n    arr = [-3, -2, -1, 0, 1, 2, 3]\n\n    Sample Output:\n    18\n    \"\"\"\n    arr.sort()\n    n = len(arr)\n    return max(arr[0]*arr[1]*arr[n-1], arr[n-1]*arr[n-2]*arr[n-3])\n\ndef g(arr: List[int] = [-3, -2, -1, 0, 1, 2, 3]):\n    return arr\n\nassert f(g()) == 18\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 316, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum product of any three numbers in the list.\n\n    Sample Input:\n    arr = [-3, -2, -1, 0, 1, 2, 3]\n\n    Sample Output:\n    18\n    \"\"\"\n    arr.sort()\n    n = len(arr)\n    return max(arr[0]*arr[1]*arr[n-1], arr[n-1]*arr[n-2]*arr[n-3])", "solution_func": "def g(arr: List[int] = [-3, -2, -1, 0, 1, 2, 3]):\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the longest increasing subarray in the list.\n\n    Sample Input:\n    arr = [1, 2, 3, 2, 5, 6, 7, 3, 4, 5]\n\n    Sample Output:\n    [2, 5, 6, 7]\n    \"\"\"\n    max_len = 1\n    start = 0\n    end = 0\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            end = i\n        else:\n            if end - start + 1 > max_len:\n                max_len = end - start + 1\n                start = i\n                end = i\n    return arr[start:end+1]\n\ndef g(arr: List[int] = [1, 2, 3, 2, 5, 6, 7, 3, 4, 5]):\n    return arr\n\nassert f(g()) == [2, 5, 6, 7]\n", "emb": null, "idx_generation": 316, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the longest increasing subarray in the list.\n\n    Sample Input:\n    arr = [1, 2, 3, 2, 5, 6, 7, 3, 4, 5]\n\n    Sample Output:\n    [2, 5, 6, 7]\n    \"\"\"\n    max_len = 1\n    start = 0\n    end = 0\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            end = i\n        else:\n            if end - start + 1 > max_len:\n                max_len = end - start + 1\n                start = i\n                end = i\n    return arr[start:end+1]", "solution_func": "def g(arr: List[int] = [1, 2, 3, 2, 5, 6, 7, 3, 4, 5]):\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"Determine if the given list of lists contains any duplicates.\"\"\"\n    flat_list = [x for sublist in arr for x in sublist]\n    return len(flat_list) == len(set(flat_list))\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 316, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"Determine if the given list of lists contains any duplicates.\"\"\"\n    flat_list = [x for sublist in arr for x in sublist]\n    return len(flat_list) == len(set(flat_list))", "solution_func": "def g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"Determine if the given list of lists is a square matrix.\"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n    return all(len(row) == cols for row in arr) and rows == cols\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 316, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"Determine if the given list of lists is a square matrix.\"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n    return all(len(row) == cols for row in arr) and rows == cols", "solution_func": "def g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> List[List[int]]:\n    \"\"\"Transpose the given matrix.\"\"\"\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0]))]\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 316, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[List[int]]) -> List[List[int]]:\n    \"\"\"Transpose the given matrix.\"\"\"\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0]))]", "solution_func": "def g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find the maximum subarray sum that is less than or equal to the target.\n    If such a subarray exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr) + 1):\n            if sum(arr[i:j]) <= target:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g(), 10) == True\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 316, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find the maximum subarray sum that is less than or equal to the target.\n    If such a subarray exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr) + 1):\n            if sum(arr[i:j]) <= target:\n                return True\n    return False", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5]):\n    return arr", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers whose absolute difference is equal to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if abs(arr[i] - arr[j]) == target:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g(), 3) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 316, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers whose absolute difference is equal to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if abs(arr[i] - arr[j]) == target:\n                return True\n    return False", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find three numbers that form a geometric progression with the common ratio equal to the target.\n    If such a triplet exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                if arr[i] * target == arr[j] and arr[j] * target == arr[k]:\n                    return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 4, 8, 16]):\n    return arr\n\nassert f(g(), 2) == True\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 316, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find three numbers that form a geometric progression with the common ratio equal to the target.\n    If such a triplet exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                if arr[i] * target == arr[j] and arr[j] * target == arr[k]:\n                    return True\n    return False", "solution_func": "def g(arr: List[int] = [1, 2, 4, 8, 16]):\n    return arr", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the product of all odd numbers in the list.\n    \"\"\"\n    return reduce(lambda x, y: x * y, [num for num in nums if num % 2 != 0], 1)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 945\n", "emb": null, "idx_generation": 316, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the product of all odd numbers in the list.\n    \"\"\"\n    return reduce(lambda x, y: x * y, [num for num in nums if num % 2 != 0], 1)", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=5, b=7, c=20) -> bool:\n    \"\"\"Find n such that n + a == (the sum of the first c numbers) * b\"\"\"\n    return n + a == sum([i for i in range(c)]) * b\ndef g(a=5, b=7, c=20):\n    return -a + sum([i for i in range(c)]) * b\nassert f(g())\n\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 317, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=5, b=7, c=20) -> bool:\n    \"\"\"Find n such that n + a == (the sum of the first c numbers) * b\"\"\"\n    return n + a == sum([i for i in range(c)]) * b", "solution_func": "def g(a=5, b=7, c=20):\n    return -a + sum([i for i in range(c)]) * b", "map_ix": [0, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a pair of numbers whose product is equal to the target.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target / num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    nums = [2, 4, 6, 8, 10]\n    target = 48\n    return nums, target\n\nassert f(*g())\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 317, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a pair of numbers whose product is equal to the target.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target / num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g():\n    nums = [2, 4, 6, 8, 10]\n    target = 48\n    return nums, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str], target_length=15) -> bool:\n    \"\"\"\n    Check if there is a combination of words that has a total length less than or equal to the target length.\n    \"\"\"\n    def combination_length(words, target_length):\n        if target_length == 0:\n            return True\n        if not words:\n            return False\n        return combination_length(words[1:], target_length - len(words[0])) or combination_length(words[1:], target_length)\n    return not combination_length(words, target_length)\n\ndef g(target_length=15):\n    return [\"apple\", \"banana\", \"grape\", \"kiwi\", \"orange\"]\n\nassert f(g())\n\n", "emb": null, "idx_generation": 317, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], target_length=15) -> bool:\n    \"\"\"\n    Check if there is a combination of words that has a total length less than or equal to the target length.\n    \"\"\"\n    def combination_length(words, target_length):\n        if target_length == 0:\n            return True\n        if not words:\n            return False\n        return combination_length(words[1:], target_length - len(words[0])) or combination_length(words[1:], target_length)\n    return not combination_length(words, target_length)", "solution_func": "def g(target_length=15):\n    return [\"apple\", \"banana\", \"grape\", \"kiwi\", \"orange\"]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int], n=4, s=10) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a >= 0 for a in x])\ndef g(n = 4, s = 10):\n    x = [0] * n\n    x[0] = s\n    return x\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 317, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], n=4, s=10) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a >= 0 for a in x])", "solution_func": "def g(n = 4, s = 10):\n    x = [0] * n\n    x[0] = s\n    return x", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: List[int], n=6, s=25) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a % 2 == 0 for a in x])\ndef g(n = 6, s = 25):\n    x = [2] * n\n    x[0] = s - (2 * (n - 1))\n    return x\nassert f(g())\n", "emb": null, "idx_generation": 317, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], n=6, s=25) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a % 2 == 0 for a in x])", "solution_func": "def g(n = 6, s = 25):\n    x = [2] * n\n    x[0] = s - (2 * (n - 1))\n    return x", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int], n=3, s=12) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a % 3 == 0 for a in x])\ndef g(n = 3, s = 12):\n    x = [3] * n\n    x[0] = s - (3 * (n - 1))\n    return x\nassert f(g())\n", "emb": [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 317, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], n=3, s=12) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a % 3 == 0 for a in x])", "solution_func": "def g(n = 3, s = 12):\n    x = [3] * n\n    x[0] = s - (3 * (n - 1))\n    return x", "map_ix": [0, 0, 1, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose product is equal to 24.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if 24 // num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [2, 3, 4, 6]):\n    return nums\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 317, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose product is equal to 24.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if 24 // num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums: List[int] = [2, 3, 4, 6]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given nested list whose average is equal to 5.\n    \"\"\"\n    num_set = set()\n    for lst in nums:\n        for num in lst:\n            if (5 - num) * 2 in num_set:\n                return True\n            num_set.add(num)\n    return False\n\ndef g(nums: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 317, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given nested list whose average is equal to 5.\n    \"\"\"\n    num_set = set()\n    for lst in nums:\n        for num in lst:\n            if (5 - num) * 2 in num_set:\n                return True\n            num_set.add(num)\n    return False", "solution_func": "def g(nums: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose difference is equal to 5.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if num + 5 in num_set or num - 5 in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [3, 7, 8, 12]):\n    return nums\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 317, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose difference is equal to 5.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if num + 5 in num_set or num - 5 in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums: List[int] = [3, 7, 8, 12]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a grid where the sum of each row, each column, and both diagonals are the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    target_sum = sum(arr[0])\n    for i in range(n):\n        if sum(arr[i]) != target_sum:\n            return False\n        if sum(arr[j][i] for j in range(n)) != target_sum:\n            return False\n    if sum(arr[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(arr[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n", "emb": [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 317, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a grid where the sum of each row, each column, and both diagonals are the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    target_sum = sum(arr[0])\n    for i in range(n):\n        if sum(arr[i]) != target_sum:\n            return False\n        if sum(arr[j][i] for j in range(n)) != target_sum:\n            return False\n    if sum(arr[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(arr[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [1, 1, 1, 1, 0, 1, 1, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a symmetric matrix of the given size with random elements\n    \"\"\"\n    import random\n    return [[random.randint(0, 9) for _ in range(size)] for _ in range(size)]\n\nassert f(g()) == True\n\n\n", "emb": null, "idx_generation": 318, "target_skills": null, "problem_func": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a symmetric matrix of the given size with random elements\n    \"\"\"\n    import random\n    return [[random.randint(0, 9) for _ in range(size)] for _ in range(size)]", "map_ix": null}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size with random elements\n    \"\"\"\n    import random\n    return [[random.randint(0, 9) if j <= i else 0 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n\n\n", "emb": [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 318, "target_skills": null, "problem_func": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size with random elements\n    \"\"\"\n    import random\n    return [[random.randint(0, 9) if j <= i else 0 for j in range(size)] for i in range(size)]", "map_ix": [1, 1, 1, 1, 0, 1, 1, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    target_sum = sum(matrix[0])\n    # Check row sums\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check column sums\n    for j in range(cols):\n        col_sum = 0\n        for i in range(rows):\n            col_sum += matrix[i][j]\n        if col_sum != target_sum:\n            return False\n    # Check diagonal sums\n    diagonal_sum1 = 0\n    diagonal_sum2 = 0\n    for i in range(rows):\n        diagonal_sum1 += matrix[i][i]\n        diagonal_sum2 += matrix[i][cols-i-1]\n    if diagonal_sum1 != target_sum or diagonal_sum2 != target_sum:\n        return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a magic square of the given size\n    \"\"\"\n    import numpy as np\n    return np.matrix(np.arange(1, size*size+1).reshape(size, size))\n\nassert f(g()) == True\n\n\n", "emb": null, "idx_generation": 318, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    target_sum = sum(matrix[0])\n    # Check row sums\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check column sums\n    for j in range(cols):\n        col_sum = 0\n        for i in range(rows):\n            col_sum += matrix[i][j]\n        if col_sum != target_sum:\n            return False\n    # Check diagonal sums\n    diagonal_sum1 = 0\n    diagonal_sum2 = 0\n    for i in range(rows):\n        diagonal_sum1 += matrix[i][i]\n        diagonal_sum2 += matrix[i][cols-i-1]\n    if diagonal_sum1 != target_sum or diagonal_sum2 != target_sum:\n        return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a magic square of the given size\n    \"\"\"\n    import numpy as np\n    return np.matrix(np.arange(1, size*size+1).reshape(size, size))", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the list contains only even numbers.\"\"\"\n    return all(num % 2 == 0 for num in numbers)\n\ndef g(numbers: List[int] = [2, 4, 6, 8, 10]):\n    return numbers\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 318, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the list contains only even numbers.\"\"\"\n    return all(num % 2 == 0 for num in numbers)", "solution_func": "def g(numbers: List[int] = [2, 4, 6, 8, 10]):\n    return numbers", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in non-decreasing order.\"\"\"\n    return numbers == sorted(numbers)\n\ndef g(numbers: List[int] = [1, 2, 3, 4, 5]):\n    return numbers\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 318, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in non-decreasing order.\"\"\"\n    return numbers == sorted(numbers)", "solution_func": "def g(numbers: List[int] = [1, 2, 3, 4, 5]):\n    return numbers", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the list contains any duplicate elements.\"\"\"\n    return len(numbers) != len(set(numbers))\n\ndef g(numbers: List[int] = [1, 2, 3, 4, 5, 5]):\n    return numbers\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 318, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the list contains any duplicate elements.\"\"\"\n    return len(numbers) != len(set(numbers))", "solution_func": "def g(numbers: List[int] = [1, 2, 3, 4, 5, 5]):\n    return numbers", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target number, return True if the target number exists in the matrix,\n    otherwise return False.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    target = 10\n\n    Output:\n    False\n\n    Explanation: The target number 10 does not exist in the matrix.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=10):\n    return matrix, target\n\nassert f(*g()) == False\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0], "idx_generation": 318, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target number, return True if the target number exists in the matrix,\n    otherwise return False.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    target = 10\n\n    Output:\n    False\n\n    Explanation: The target number 10 does not exist in the matrix.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=10):\n    return matrix, target", "map_ix": [1, 0, 0, 0, 0, 1, 1, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target number, return True if the target number exists in the matrix,\n    otherwise return False.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    target = 6\n\n    Output:\n    True\n\n    Explanation: The target number 6 exists in the matrix.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=6):\n    return matrix, target\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 318, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target number, return True if the target number exists in the matrix,\n    otherwise return False.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    target = 6\n\n    Output:\n    True\n\n    Explanation: The target number 6 exists in the matrix.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=6):\n    return matrix, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target number, return True if the target number exists in the matrix,\n    otherwise return False.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    target = 2\n\n    Output:\n    True\n\n    Explanation: The target number 2 exists in the matrix.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=2):\n    return matrix, target\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 318, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target number, return True if the target number exists in the matrix,\n    otherwise return False.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    target = 2\n\n    Output:\n    True\n\n    Explanation: The target number 2 exists in the matrix.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=2):\n    return matrix, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n: int, target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, determine if there exists a combination of n numbers in the list that sums up to the target value.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    n = 3\n    target = 6\n    output: True\n    \"\"\"\n    def find_combination(curr_sum, count):\n        if count == n and curr_sum == target:\n            return True\n        if count > n or curr_sum > target:\n            return False\n        for i in range(len(nums)):\n            if find_combination(curr_sum + nums[i], count + 1):\n                return True\n        return False\n\n    return find_combination(0, 0)\n\n\ndef g(nums = [1, 2, 3, 4, 5], n = 3, target = 6):\n    return (nums, n, target)\n\n\nassert f(*g()) == True\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 318, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n: int, target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, determine if there exists a combination of n numbers in the list that sums up to the target value.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    n = 3\n    target = 6\n    output: True\n    \"\"\"\n    def find_combination(curr_sum, count):\n        if count == n and curr_sum == target:\n            return True\n        if count > n or curr_sum > target:\n            return False\n        for i in range(len(nums)):\n            if find_combination(curr_sum + nums[i], count + 1):\n                return True\n        return False\n\n    return find_combination(0, 0)", "solution_func": "def g(nums = [1, 2, 3, 4, 5], n = 3, target = 6):\n    return (nums, n, target)", "map_ix": [0, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if the given matrix is a magic square.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for i in range(n):\n        col_sum = sum(matrix[j][i] for j in range(n))\n        if col_sum != target_sum:\n            return False\n    # Check diagonal 1\n    diagonal1_sum = sum(matrix[i][i] for i in range(n))\n    if diagonal1_sum != target_sum:\n        return False\n    # Check diagonal 2\n    diagonal2_sum = sum(matrix[i][n - i - 1] for i in range(n))\n    if diagonal2_sum != target_sum:\n        return False\n    return True\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == False\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 319, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if the given matrix is a magic square.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for i in range(n):\n        col_sum = sum(matrix[j][i] for j in range(n))\n        if col_sum != target_sum:\n            return False\n    # Check diagonal 1\n    diagonal1_sum = sum(matrix[i][i] for i in range(n))\n    if diagonal1_sum != target_sum:\n        return False\n    # Check diagonal 2\n    diagonal2_sum = sum(matrix[i][n - i - 1] for i in range(n))\n    if diagonal2_sum != target_sum:\n        return False\n    return True", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if the given matrix is a magic square.\n\n    Sample Input:\n    matrix = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for i in range(n):\n        col_sum = sum(matrix[j][i] for j in range(n))\n        if col_sum != target_sum:\n            return False\n    # Check diagonal 1\n    diagonal1_sum = sum(matrix[i][i] for i in range(n))\n    if diagonal1_sum != target_sum:\n        return False\n    # Check diagonal 2\n    diagonal2_sum = sum(matrix[i][n - i - 1] for i in range(n))\n    if diagonal2_sum != target_sum:\n        return False\n    return True\n\ndef g(matrix: List[List[int]] = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]):\n    return matrix\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 319, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if the given matrix is a magic square.\n\n    Sample Input:\n    matrix = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for i in range(n):\n        col_sum = sum(matrix[j][i] for j in range(n))\n        if col_sum != target_sum:\n            return False\n    # Check diagonal 1\n    diagonal1_sum = sum(matrix[i][i] for i in range(n))\n    if diagonal1_sum != target_sum:\n        return False\n    # Check diagonal 2\n    diagonal2_sum = sum(matrix[i][n - i - 1] for i in range(n))\n    if diagonal2_sum != target_sum:\n        return False\n    return True", "solution_func": "def g(matrix: List[List[int]] = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if the given matrix is a magic square.\n\n    Sample Input:\n    matrix = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n\n    Sample Output:\n    False\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for i in range(n):\n        col_sum = sum(matrix[j][i] for j in range(n))\n        if col_sum != target_sum:\n            return False\n    # Check diagonal 1\n    diagonal1_sum = sum(matrix[i][i] for i in range(n))\n    if diagonal1_sum != target_sum:\n        return False\n    # Check diagonal 2\n    diagonal2_sum = sum(matrix[i][n - i - 1] for i in range(n))\n    if diagonal2_sum != target_sum:\n        return False\n    return True\n\ndef g(matrix: List[List[int]] = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]):\n    return matrix\n\nassert f(g()) == False\n", "emb": null, "idx_generation": 319, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if the given matrix is a magic square.\n\n    Sample Input:\n    matrix = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n\n    Sample Output:\n    False\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for i in range(n):\n        col_sum = sum(matrix[j][i] for j in range(n))\n        if col_sum != target_sum:\n            return False\n    # Check diagonal 1\n    diagonal1_sum = sum(matrix[i][i] for i in range(n))\n    if diagonal1_sum != target_sum:\n        return False\n    # Check diagonal 2\n    diagonal2_sum = sum(matrix[i][n - i - 1] for i in range(n))\n    if diagonal2_sum != target_sum:\n        return False\n    return True", "solution_func": "def g(matrix: List[List[int]] = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(l: List[int]) -> bool:\n    \"\"\"\n    Find a list of more than 995 distinct integers between 0 and 999, inclusive, such that each pair of integers\n    have a difference that is divisible by 7.\n    \"\"\"\n    return all((i in range(1000) and abs(i - j) % 7 == 0 for i in l for j in l if i != j)) and len(set(l)) > 995\ndef g():\n    return [0, 7] + list(range(14, 1000, 7))\nassert f(g())\n", "emb": null, "idx_generation": 319, "target_skills": null, "problem_func": "from typing import*\ndef f(l: List[int]) -> bool:\n    \"\"\"\n    Find a list of more than 995 distinct integers between 0 and 999, inclusive, such that each pair of integers\n    have a difference that is divisible by 7.\n    \"\"\"\n    return all((i in range(1000) and abs(i - j) % 7 == 0 for i in l for j in l if i != j)) and len(set(l)) > 995", "solution_func": "def g():\n    return [0, 7] + list(range(14, 1000, 7))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(l: List[int]) -> bool:\n    \"\"\"\n    Find a list of more than 995 distinct integers between 0 and 999, inclusive, such that each pair of integers\n    have a difference that is a prime number.\n    \"\"\"\n    def is_prime(n: int):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return all((i in range(1000) and is_prime(abs(i - j)) for i in l for j in l if i != j)) and len(set(l)) > 995\ndef g():\n    primes = [2]\n    n = 3\n    while len(primes) < 996:\n        if all(n % p for p in primes):\n            primes.append(n)\n        n += 1\n    return primes\nassert f(g())\n", "emb": null, "idx_generation": 319, "target_skills": null, "problem_func": "from typing import*\ndef f(l: List[int]) -> bool:\n    \"\"\"\n    Find a list of more than 995 distinct integers between 0 and 999, inclusive, such that each pair of integers\n    have a difference that is a prime number.\n    \"\"\"\n    def is_prime(n: int):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return all((i in range(1000) and is_prime(abs(i - j)) for i in l for j in l if i != j)) and len(set(l)) > 995", "solution_func": "def g():\n    primes = [2]\n    n = 3\n    while len(primes) < 996:\n        if all(n % p for p in primes):\n            primes.append(n)\n        n += 1\n    return primes", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(l: List[int]) -> bool:\n    \"\"\"\n    Find a list of more than 995 distinct integers between 0 and 999, inclusive, such that each pair of integers\n    have a difference that is a perfect square.\n    \"\"\"\n    def is_perfect_square(n: int):\n        sqrt_n = int(n ** 0.5)\n        return sqrt_n * sqrt_n == n\n    \n    return all((i in range(1000) and is_perfect_square(abs(i - j)) for i in l for j in l if i != j)) and len(set(l)) > 995\ndef g():\n    return [0] + [n * n for n in range(1, 32)] + [n * n + 1 for n in range(31)] + list(range(100 - 31, 1000))\nassert f(g())\n", "emb": null, "idx_generation": 319, "target_skills": null, "problem_func": "from typing import*\ndef f(l: List[int]) -> bool:\n    \"\"\"\n    Find a list of more than 995 distinct integers between 0 and 999, inclusive, such that each pair of integers\n    have a difference that is a perfect square.\n    \"\"\"\n    def is_perfect_square(n: int):\n        sqrt_n = int(n ** 0.5)\n        return sqrt_n * sqrt_n == n\n    \n    return all((i in range(1000) and is_perfect_square(abs(i - j)) for i in l for j in l if i != j)) and len(set(l)) > 995", "solution_func": "def g():\n    return [0] + [n * n for n in range(1, 32)] + [n * n + 1 for n in range(31)] + list(range(100 - 31, 1000))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the sum of all the positive numbers in the input list.\n    \"\"\"\n    positive_nums = [num for num in nums if num > 0]\n    return sum(positive_nums)\n\nassert f(g([3, -4, 7, -2, 1, -3, 1]), 6)\n", "emb": null, "idx_generation": 319, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False", "solution_func": "def g(nums: List[int]):\n    \"\"\"\n    This solution returns the sum of all the positive numbers in the input list.\n    \"\"\"\n    positive_nums = [num for num in nums if num > 0]\n    return sum(positive_nums)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the maximum number in the input list.\n    \"\"\"\n    return max(nums)\n\nassert f(g([3, -4, 7, -2, 1, -3, 1]), -2)\n", "emb": null, "idx_generation": 319, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False", "solution_func": "def g(nums: List[int]):\n    \"\"\"\n    This solution returns the maximum number in the input list.\n    \"\"\"\n    return max(nums)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the product of all the numbers in the input list.\n    \"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n    return product\n\nassert f(g([3, -4, 7, -2, 1, -3, 1]), -504)\n", "emb": null, "idx_generation": 319, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False", "solution_func": "def g(nums: List[int]):\n    \"\"\"\n    This solution returns the product of all the numbers in the input list.\n    \"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n    return product", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(words: List[str], target_length=10) -> bool:\n    \"\"\"\n    Given a list of words, check if there is a word whose length is equal to the target length.\n    \"\"\"\n    return any(len(word) == target_length for word in words)\n\ndef g(target_length=10):\n    return [\"apple\", \"banana\", \"orange\", \"grapefruit\"]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 319, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], target_length=10) -> bool:\n    \"\"\"\n    Given a list of words, check if there is a word whose length is equal to the target length.\n    \"\"\"\n    return any(len(word) == target_length for word in words)", "solution_func": "def g(target_length=10):\n    return [\"apple\", \"banana\", \"orange\", \"grapefruit\"]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find two numbers in the list that add up to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums.sort()\n    left = 0\n    right = len(nums) - 1\n    while left < right:\n        total = nums[left] + nums[right]\n        if total == target:\n            return True\n        elif total < target:\n            left += 1\n        else:\n            right -= 1\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g(), 10) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 320, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find two numbers in the list that add up to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums.sort()\n    left = 0\n    right = len(nums) - 1\n    while left < right:\n        total = nums[left] + nums[right]\n        if total == target:\n            return True\n        elif total < target:\n            left += 1\n        else:\n            right -= 1\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of any contiguous subarray.\n    Return the maximum sum.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum = max(num, curr_sum + num)\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n\ndef g(nums: List[int] = [1, -2, 3, -4, 5, -6, 7, -8, 9]):\n    return nums\n\nassert f(g()) == 12\n\n", "emb": null, "idx_generation": 320, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of any contiguous subarray.\n    Return the maximum sum.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum = max(num, curr_sum + num)\n        max_sum = max(max_sum, curr_sum)\n    return max_sum", "solution_func": "def g(nums: List[int] = [1, -2, 3, -4, 5, -6, 7, -8, 9]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix of integers, rotate the matrix 90 degrees clockwise.\n    Return the rotated matrix.\n\n    Sample input:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Sample output:\n    [[7, 4, 1],\n     [8, 5, 2],\n     [9, 6, 3]]\n    \"\"\"\n    n = len(matrix)\n    for i in range(n // 2):\n        for j in range(i, n - i - 1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[n - j - 1][i]\n            matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1]\n            matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1]\n            matrix[j][n - i - 1] = temp\n    return matrix\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n\n", "emb": null, "idx_generation": 320, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix of integers, rotate the matrix 90 degrees clockwise.\n    Return the rotated matrix.\n\n    Sample input:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Sample output:\n    [[7, 4, 1],\n     [8, 5, 2],\n     [9, 6, 3]]\n    \"\"\"\n    n = len(matrix)\n    for i in range(n // 2):\n        for j in range(i, n - i - 1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[n - j - 1][i]\n            matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1]\n            matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1]\n            matrix[j][n - i - 1] = temp\n    return matrix", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the sum of all the even numbers in the list.\n    \"\"\"\n    return sum(x for x in nums if x % 2 == 0)\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g()) == 30\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 320, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the sum of all the even numbers in the list.\n    \"\"\"\n    return sum(x for x in nums if x % 2 == 0)", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target value, count the number of occurrences of the target value in the list.\n    \"\"\"\n    return nums.count(target)\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 5):\n    return (nums, target)\n\nassert f(*g()) == 1\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 320, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target value, count the number of occurrences of the target value in the list.\n    \"\"\"\n    return nums.count(target)", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 5):\n    return (nums, target)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum product of any two numbers in the list.\n    \"\"\"\n    nums.sort()\n    return max(nums[-1] * nums[-2], nums[0] * nums[1])\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g()) == 90\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 320, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum product of any two numbers in the list.\n    \"\"\"\n    nums.sort()\n    return max(nums[-1] * nums[-2], nums[0] * nums[1])", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if any number in the list is divisible by the target\"\"\"\n    return any(num % target == 0 for num in nums)\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 2):\n    return (nums, target)\n\nassert f(*g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 320, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if any number in the list is divisible by the target\"\"\"\n    return any(num % target == 0 for num in nums)", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 2):\n    return (nums, target)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the average of all numbers in the list is greater than the target\"\"\"\n    return sum(nums) / len(nums) > target\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 4):\n    return (nums, target)\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 320, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the average of all numbers in the list is greater than the target\"\"\"\n    return sum(nums) / len(nums) > target", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 4):\n    return (nums, target)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the list is sorted in ascending order and all numbers are less than the target\"\"\"\n    return sorted(nums) == nums and all(num < target for num in nums)\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 15):\n    return (nums, target)\n\nassert f(*g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 320, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the list is sorted in ascending order and all numbers are less than the target\"\"\"\n    return sorted(nums) == nums and all(num < target for num in nums)", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 15):\n    return (nums, target)", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find the minimum subarray sum that is greater than or equal to the target.\n    If such a subarray exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr) + 1):\n            if sum(arr[i:j]) >= target:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g(), 10) == True\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 320, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find the minimum subarray sum that is greater than or equal to the target.\n    If such a subarray exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr) + 1):\n            if sum(arr[i:j]) >= target:\n                return True\n    return False", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5]):\n    return arr", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n: int, target: int) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if there exists a combination of n numbers in the list that sums up to the target value.\"\"\"\n    def find_combination(curr_sum, count):\n        if count == n and curr_sum == target:\n            return True\n        if count > n or curr_sum > target:\n            return False\n        for i in range(len(nums)):\n            if find_combination(curr_sum + nums[i], count + 1):\n                return True\n        return False\n\n    return find_combination(0, 0)\n\n\ndef g(nums = [1, 2, 3, 4, 5], n = 3, target = 6):\n    return (nums, n, target)\n\n\nassert f(*g()) == True\n\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 321, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n: int, target: int) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if there exists a combination of n numbers in the list that sums up to the target value.\"\"\"\n    def find_combination(curr_sum, count):\n        if count == n and curr_sum == target:\n            return True\n        if count > n or curr_sum > target:\n            return False\n        for i in range(len(nums)):\n            if find_combination(curr_sum + nums[i], count + 1):\n                return True\n        return False\n\n    return find_combination(0, 0)", "solution_func": "def g(nums = [1, 2, 3, 4, 5], n = 3, target = 6):\n    return (nums, n, target)", "map_ix": [0, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n: int, target: int) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if there exists a combination of n numbers in the list that sums up to the target value.\"\"\"\n    def find_combination(curr_sum, count):\n        if count == n and curr_sum == target:\n            return True\n        if count > n or curr_sum > target:\n            return False\n        for i in range(len(nums)):\n            if find_combination(curr_sum + nums[i], count + 1):\n                return True\n        return False\n\n    return find_combination(0, 0)\n\n\ndef g(nums = [1, 2, 3, 4, 5], n = 3, target = 9):\n    return (nums, n, target)\n\n\nassert f(*g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 321, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n: int, target: int) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if there exists a combination of n numbers in the list that sums up to the target value.\"\"\"\n    def find_combination(curr_sum, count):\n        if count == n and curr_sum == target:\n            return True\n        if count > n or curr_sum > target:\n            return False\n        for i in range(len(nums)):\n            if find_combination(curr_sum + nums[i], count + 1):\n                return True\n        return False\n\n    return find_combination(0, 0)", "solution_func": "def g(nums = [1, 2, 3, 4, 5], n = 3, target = 9):\n    return (nums, n, target)", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n: int, target: int) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if there exists a combination of n numbers in the list that sums up to the target value.\"\"\"\n    def find_combination(curr_sum, count):\n        if count == n and curr_sum == target:\n            return True\n        if count > n or curr_sum > target:\n            return False\n        for i in range(len(nums)):\n            if find_combination(curr_sum + nums[i], count + 1):\n                return True\n        return False\n\n    return find_combination(0, 0)\n\n\ndef g(nums = [1, 2, 3, 4, 5], n = 2, target = 6):\n    return (nums, n, target)\n\n\nassert f(*g()) == True\n\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 321, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n: int, target: int) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if there exists a combination of n numbers in the list that sums up to the target value.\"\"\"\n    def find_combination(curr_sum, count):\n        if count == n and curr_sum == target:\n            return True\n        if count > n or curr_sum > target:\n            return False\n        for i in range(len(nums)):\n            if find_combination(curr_sum + nums[i], count + 1):\n                return True\n        return False\n\n    return find_combination(0, 0)", "solution_func": "def g(nums = [1, 2, 3, 4, 5], n = 2, target = 6):\n    return (nums, n, target)", "map_ix": [0, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], k: int) -> int:\n    \"\"\"\n    Given a list of integers, find the length of the longest subarray with a sum divisible by k.\n\n    Example:\n    nums = [3, 6, 9, 12, 15]\n    k = 4\n    output: 3\n    \"\"\"\n    prefix_sum = 0\n    seen = {0: -1}\n    max_length = 0\n    for i, num in enumerate(nums):\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in seen:\n            length = i - seen[prefix_sum]\n            max_length = max(max_length, length)\n        else:\n            seen[prefix_sum] = i\n    return max_length\n\ndef g():\n    return [3, 6, 9, 12, 15], 4\n\nassert f(*g()) == 3\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 321, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k: int) -> int:\n    \"\"\"\n    Given a list of integers, find the length of the longest subarray with a sum divisible by k.\n\n    Example:\n    nums = [3, 6, 9, 12, 15]\n    k = 4\n    output: 3\n    \"\"\"\n    prefix_sum = 0\n    seen = {0: -1}\n    max_length = 0\n    for i, num in enumerate(nums):\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in seen:\n            length = i - seen[prefix_sum]\n            max_length = max(max_length, length)\n        else:\n            seen[prefix_sum] = i\n    return max_length", "solution_func": "def g():\n    return [3, 6, 9, 12, 15], 4", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, find the subarray with the maximum sum.\n\n    Example:\n    nums = [1, -2, 3, 4, -1, 2, 1, -5, 4]\n    output: [3, 4, -1, 2, 1]\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    end = 0\n    for i, num in enumerate(nums):\n        current_sum += num\n        if current_sum > max_sum:\n            max_sum = current_sum\n            end = i\n        if current_sum < 0:\n            current_sum = 0\n            start = i + 1\n    return nums[start:end+1]\n\ndef g():\n    return [1, -2, 3, 4, -1, 2, 1, -5, 4]\n\nassert f(g()) == [3, 4, -1, 2, 1]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 321, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, find the subarray with the maximum sum.\n\n    Example:\n    nums = [1, -2, 3, 4, -1, 2, 1, -5, 4]\n    output: [3, 4, -1, 2, 1]\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    end = 0\n    for i, num in enumerate(nums):\n        current_sum += num\n        if current_sum > max_sum:\n            max_sum = current_sum\n            end = i\n        if current_sum < 0:\n            current_sum = 0\n            start = i + 1\n    return nums[start:end+1]", "solution_func": "def g():\n    return [1, -2, 3, 4, -1, 2, 1, -5, 4]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix, rotate it 90 degrees clockwise.\n\n    Example:\n    matrix = [[1,2,3],\n              [4,5,6],\n              [7,8,9]]\n    output: [[7, 4, 1],\n             [8, 5, 2],\n             [9, 6, 3]]\n    \"\"\"\n    n = len(matrix)\n    for i in range(n // 2):\n        for j in range(i, n - i - 1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[n - j - 1][i]\n            matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1]\n            matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1]\n            matrix[j][n - i - 1] = temp\n    return matrix\n\ndef g():\n    return [[1,2,3],\n            [4,5,6],\n            [7,8,9]]\n\nassert f(g()) == [[7, 4, 1],\n                 [8, 5, 2],\n                 [9, 6, 3]]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 321, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix, rotate it 90 degrees clockwise.\n\n    Example:\n    matrix = [[1,2,3],\n              [4,5,6],\n              [7,8,9]]\n    output: [[7, 4, 1],\n             [8, 5, 2],\n             [9, 6, 3]]\n    \"\"\"\n    n = len(matrix)\n    for i in range(n // 2):\n        for j in range(i, n - i - 1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[n - j - 1][i]\n            matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1]\n            matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1]\n            matrix[j][n - i - 1] = temp\n    return matrix", "solution_func": "def g():\n    return [[1,2,3],\n            [4,5,6],\n            [7,8,9]]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Given an integer n, determine if there exists a positive integer whose decimal representation has exactly k 2's and k 5's\n    \"\"\"\n    count_2 = str(n).count('2')\n    count_5 = str(n).count('5')\n    return count_2 == count_5 == k\n\ndef g(k=3):\n    return int(\"222255555\")\n\nassert f(g(), 3) == True\n", "emb": null, "idx_generation": 321, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Given an integer n, determine if there exists a positive integer whose decimal representation has exactly k 2's and k 5's\n    \"\"\"\n    count_2 = str(n).count('2')\n    count_5 = str(n).count('5')\n    return count_2 == count_5 == k", "solution_func": "def g(k=3):\n    return int(\"222255555\")", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], target: str, k: int) -> bool:\n    \"\"\"\n    Given a list of words and a target word, determine if it is possible to select k different words from the list such that\n    the target word is a substring of each selected word.\n    \"\"\"\n    count = 0\n    for word in words:\n        if target in word:\n            count += 1\n        if count == k:\n            return True\n    return False\n\ndef g():\n    words = ['apple', 'banana', 'grape', 'pineapple', 'orange']\n    target = 'ap'\n    k = 3\n    return (words, target, k)\n\nassert f(*g()) == True\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 321, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], target: str, k: int) -> bool:\n    \"\"\"\n    Given a list of words and a target word, determine if it is possible to select k different words from the list such that\n    the target word is a substring of each selected word.\n    \"\"\"\n    count = 0\n    for word in words:\n        if target in word:\n            count += 1\n        if count == k:\n            return True\n    return False", "solution_func": "def g():\n    words = ['apple', 'banana', 'grape', 'pineapple', 'orange']\n    target = 'ap'\n    k = 3\n    return (words, target, k)", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int) -> List[List[int]]:\n    \"\"\"\n    Given an integer n, return a list of all unique combinations of numbers a, b, and c, such that a^2 + b^2 + c^2 = n.\n    \"\"\"\n    result = []\n    for a in range(1, n):\n        for b in range(a, n):\n            for c in range(b, n):\n                if a**2 + b**2 + c**2 == n:\n                    result.append([a, b, c])\n    return result\n\ndef g():\n    n = 100\n    return n\n\nassert f(g()) == [[3, 4, 5], [6, 8, 10]]\n", "emb": null, "idx_generation": 321, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int) -> List[List[int]]:\n    \"\"\"\n    Given an integer n, return a list of all unique combinations of numbers a, b, and c, such that a^2 + b^2 + c^2 = n.\n    \"\"\"\n    result = []\n    for a in range(1, n):\n        for b in range(a, n):\n            for c in range(b, n):\n                if a**2 + b**2 + c**2 == n:\n                    result.append([a, b, c])\n    return result", "solution_func": "def g():\n    n = 100\n    return n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import *\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if it is a symmetric matrix.\n    A matrix is symmetric if it is equal to its transpose.\n\n    Sample Input:\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n\n    Sample Output:\n    False\n    \"\"\"\n    transpose = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n    return matrix == transpose\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g()) == False\n", "emb": null, "idx_generation": 321, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if it is a symmetric matrix.\n    A matrix is symmetric if it is equal to its transpose.\n\n    Sample Input:\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n\n    Sample Output:\n    False\n    \"\"\"\n    transpose = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n    return matrix == transpose", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome list.\n    A palindrome list is a list that remains the same when reversed.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums: List[int] = [1, 2, 3, 2, 1]):\n    return nums\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 322, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome list.\n    A palindrome list is a list that remains the same when reversed.\n    \"\"\"\n    return nums == nums[::-1]", "solution_func": "def g(nums: List[int] = [1, 2, 3, 2, 1]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome list.\n    A palindrome list is a list that remains the same when reversed.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums: List[int] = [1, 2, 3, 2, 1]):\n    return nums\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 322, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome list.\n    A palindrome list is a list that remains the same when reversed.\n    \"\"\"\n    return nums == nums[::-1]", "solution_func": "def g(nums: List[int] = [1, 2, 3, 2, 1]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome list.\n    A palindrome list is a list that remains the same when reversed.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums: List[int] = [1, 2, 3, 2, 1]):\n    return nums\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 322, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome list.\n    A palindrome list is a list that remains the same when reversed.\n    \"\"\"\n    return nums == nums[::-1]", "solution_func": "def g(nums: List[int] = [1, 2, 3, 2, 1]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, find the sum of all elements in the matrix.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    output: 45\n    \"\"\"\n    total_sum = 0\n    for row in matrix:\n        for num in row:\n            total_sum += num\n    return total_sum\n\ndef g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\nassert f(g()) == 45\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 322, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, find the sum of all elements in the matrix.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    output: 45\n    \"\"\"\n    total_sum = 0\n    for row in matrix:\n        for num in row:\n            total_sum += num\n    return total_sum", "solution_func": "def g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return a list containing the sum of each row in the matrix.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    output: [6, 15, 24]\n    \"\"\"\n    row_sums = []\n    for row in matrix:\n        sum_row = sum(row)\n        row_sums.append(sum_row)\n    return row_sums\n\ndef g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\nassert f(g()) == [6, 15, 24]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 322, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return a list containing the sum of each row in the matrix.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    output: [6, 15, 24]\n    \"\"\"\n    row_sums = []\n    for row in matrix:\n        sum_row = sum(row)\n        row_sums.append(sum_row)\n    return row_sums", "solution_func": "def g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target: int) -> List[int]:\n    \"\"\"\n    Given a matrix of integers and a target number, return a list of all indices (row and column pairs) where the element is equal to the target.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    target = 5\n    output: [(1, 1)]\n    \"\"\"\n    target_indices = []\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == target:\n                target_indices.append((i, j))\n    return target_indices\n\ndef g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ], 5\n\nassert f(*g()) == [(1, 1)]\n", "emb": [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 322, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target: int) -> List[int]:\n    \"\"\"\n    Given a matrix of integers and a target number, return a list of all indices (row and column pairs) where the element is equal to the target.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    target = 5\n    output: [(1, 1)]\n    \"\"\"\n    target_indices = []\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == target:\n                target_indices.append((i, j))\n    return target_indices", "solution_func": "def g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ], 5", "map_ix": [1, 1, 1, 1, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a pair of numbers whose sum is equal to 10.\n\n    Example:\n    arr = [1, 2, 3, 4, 5, 6]\n\n    Output:\n    True\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == 10:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 322, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a pair of numbers whose sum is equal to 10.\n\n    Example:\n    arr = [1, 2, 3, 4, 5, 6]\n\n    Output:\n    True\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == 10:\n                return True\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if all the elements in the list are even.\n\n    Example:\n    arr = [2, 4, 6, 8, 10]\n\n    Output:\n    True\n    \"\"\"\n    return all(num % 2 == 0 for num in arr)\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 322, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if all the elements in the list are even.\n\n    Example:\n    arr = [2, 4, 6, 8, 10]\n\n    Output:\n    True\n    \"\"\"\n    return all(num % 2 == 0 for num in arr)", "solution_func": "def g():\n    return [2, 4, 6, 8, 10]", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list is sorted in non-decreasing order.\n\n    Example:\n    arr = [1, 2, 3, 4, 5, 6]\n\n    Output:\n    True\n    \"\"\"\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 322, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list is sorted in non-decreasing order.\n\n    Example:\n    arr = [1, 2, 3, 4, 5, 6]\n\n    Output:\n    True\n    \"\"\"\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size\n    \"\"\"\n    return [[0 if j > i else 1 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 322, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size\n    \"\"\"\n    return [[0 if j > i else 1 for j in range(size)] for i in range(size)]", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list is a palindrome.\n\n    Sample Input:\n    arr = [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            return False\n    return True\n\ndef g(arr: List[int] = [1, 2, 3, 2, 1]):\n    return arr\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 323, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list is a palindrome.\n\n    Sample Input:\n    arr = [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            return False\n    return True", "solution_func": "def g(arr: List[int] = [1, 2, 3, 2, 1]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, check if there exists a pair of integers in the list whose sum is equal to the target.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 6\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for num in arr:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 6):\n    return arr, target\n\nassert f(*g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0], "idx_generation": 323, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, check if there exists a pair of integers in the list whose sum is equal to the target.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 6\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for num in arr:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 6):\n    return arr, target", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[str], k: int) -> List[str]:\n    \"\"\"\n    Given a list of strings and an integer k, return a new list containing strings with length less than or equal to k.\n\n    Sample Input:\n    arr = [\"apple\", \"banana\", \"cherry\", \"date\"]\n    k = 5\n\n    Sample Output:\n    [\"apple\", \"date\"]\n    \"\"\"\n    return [s for s in arr if len(s) <= k]\n\ndef g(arr: List[str] = [\"apple\", \"banana\", \"cherry\", \"date\"], k: int = 5):\n    return arr, k\n\nassert f(*g()) == [\"apple\", \"date\"]\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 323, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[str], k: int) -> List[str]:\n    \"\"\"\n    Given a list of strings and an integer k, return a new list containing strings with length less than or equal to k.\n\n    Sample Input:\n    arr = [\"apple\", \"banana\", \"cherry\", \"date\"]\n    k = 5\n\n    Sample Output:\n    [\"apple\", \"date\"]\n    \"\"\"\n    return [s for s in arr if len(s) <= k]", "solution_func": "def g(arr: List[str] = [\"apple\", \"banana\", \"cherry\", \"date\"], k: int = 5):\n    return arr, k", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an identity matrix.\n\n    Sample Input:\n    matrix = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n            if i == j and matrix[i][j] != 1:\n                return False\n\n    return True\n\ndef g(n=3):\n    \"\"\"\n    Generate an identity matrix of size n x n.\n    \"\"\"\n    identity_matrix = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        identity_matrix[i][i] = 1\n\n    return identity_matrix\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 323, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an identity matrix.\n\n    Sample Input:\n    matrix = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n            if i == j and matrix[i][j] != 1:\n                return False\n\n    return True", "solution_func": "def g(n=3):\n    \"\"\"\n    Generate an identity matrix of size n x n.\n    \"\"\"\n    identity_matrix = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        identity_matrix[i][i] = 1\n\n    return identity_matrix", "map_ix": [1, 1, 0, 1, 0, 0, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a symmetric matrix.\n    A symmetric matrix is a square matrix that is equal to its transpose.\n\n    Sample Input:\n    arr = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i, n):\n            if arr[i][j] != arr[j][i]:\n                return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return arr\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 323, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a symmetric matrix.\n    A symmetric matrix is a square matrix that is equal to its transpose.\n\n    Sample Input:\n    arr = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i, n):\n            if arr[i][j] != arr[j][i]:\n                return False\n\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a sparse matrix.\n    A sparse matrix is a matrix in which most of the elements are zero.\n\n    Sample Input:\n    arr = [[1, 0, 0], [0, 0, 0], [0, 0, 2]]\n\n    Sample Output:\n    True\n    \"\"\"\n    count = 0\n    total = 0\n\n    for row in arr:\n        for num in row:\n            total += 1\n            if num == 0:\n                count += 1\n\n    return count / total >= 0.5\n\ndef g(arr: List[List[int]] = [[1, 0, 0], [0, 0, 0], [0, 0, 2]]):\n    return arr\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 323, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a sparse matrix.\n    A sparse matrix is a matrix in which most of the elements are zero.\n\n    Sample Input:\n    arr = [[1, 0, 0], [0, 0, 0], [0, 0, 2]]\n\n    Sample Output:\n    True\n    \"\"\"\n    count = 0\n    total = 0\n\n    for row in arr:\n        for num in row:\n            total += 1\n            if num == 0:\n                count += 1\n\n    return count / total >= 0.5", "solution_func": "def g(arr: List[List[int]] = [[1, 0, 0], [0, 0, 0], [0, 0, 2]]):\n    return arr", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there exists a pair of numbers in a list that sums up to a given target\"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), target=10) == True\n\n", "emb": null, "idx_generation": 323, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there exists a pair of numbers in a list that sums up to a given target\"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there exists three numbers in a list that sum up to a given target\"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g(), target=15) == True\n\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 323, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there exists three numbers in a list that sum up to a given target\"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False", "solution_func": "def g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Find if the given matrix is a symmetric matrix\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g()) == False\n\n", "emb": null, "idx_generation": 323, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Find if the given matrix is a symmetric matrix\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given nested list whose product is equal to 24.\n    \"\"\"\n\n    for lst in nums:\n        for i in range(len(lst)):\n            for j in range(i+1, len(lst)):\n                if lst[i] * lst[j] == 24:\n                    return True\n    return False\n\ndef g(nums: List[List[int]] = [[2, 4, 6], [3, 5, 9], [1, 8, 2]]):\n    return nums\n\nassert f(g()) == False\n", "emb": null, "idx_generation": 323, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given nested list whose product is equal to 24.\n    \"\"\"\n\n    for lst in nums:\n        for i in range(len(lst)):\n            for j in range(i+1, len(lst)):\n                if lst[i] * lst[j] == 24:\n                    return True\n    return False", "solution_func": "def g(nums: List[List[int]] = [[2, 4, 6], [3, 5, 9], [1, 8, 2]]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, return the sum of each column in the matrix.\n    \"\"\"\n    col_sums = []\n    \n    for i in range(len(matrix[0])):\n        col_sum = 0\n        for j in range(len(matrix)):\n            col_sum += matrix[j][i]\n        col_sums.append(col_sum)\n        \n    return col_sums\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [12, 15, 18]\n\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 324, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, return the sum of each column in the matrix.\n    \"\"\"\n    col_sums = []\n    \n    for i in range(len(matrix[0])):\n        col_sum = 0\n        for j in range(len(matrix)):\n            col_sum += matrix[j][i]\n        col_sums.append(col_sum)\n        \n    return col_sums", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, return the sum of all the elements in the matrix.\n    \"\"\"\n    total_sum = 0\n    \n    for row in matrix:\n        for num in row:\n            total_sum += num\n        \n    return total_sum\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 45\n\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 324, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, return the sum of all the elements in the matrix.\n    \"\"\"\n    total_sum = 0\n    \n    for row in matrix:\n        for num in row:\n            total_sum += num\n        \n    return total_sum", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return the product of each column in the matrix.\n    \"\"\"\n    col_products = []\n    \n    for i in range(len(matrix[0])):\n        col_product = 1\n        for j in range(len(matrix)):\n            col_product *= matrix[j][i]\n        col_products.append(col_product)\n        \n    return col_products\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [28, 80, 162]\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 324, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return the product of each column in the matrix.\n    \"\"\"\n    col_products = []\n    \n    for i in range(len(matrix[0])):\n        col_product = 1\n        for j in range(len(matrix)):\n            col_product *= matrix[j][i]\n        col_products.append(col_product)\n        \n    return col_products", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are three numbers in the given list that add up to the target number.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g()) == True\n\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 324, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are three numbers in the given list that add up to the target number.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target", "map_ix": [0, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find two numbers in the given list that add up to the target number,\n    and return the indices of those numbers as a list.\n\n    If no such numbers exist, return an empty list.\n    \"\"\"\n    seen = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in seen:\n            return [seen[complement], i]\n        seen[num] = i\n    return []\n\ndef g(nums=[1, 2, 3, 4, 5], target=7):\n    return nums, target\n\nassert f(*g()) == [2, 3]\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 324, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find two numbers in the given list that add up to the target number,\n    and return the indices of those numbers as a list.\n\n    If no such numbers exist, return an empty list.\n    \"\"\"\n    seen = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in seen:\n            return [seen[complement], i]\n        seen[num] = i\n    return []", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=7):\n    return nums, target", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport itertools\n\ndef f(nums: List[int], target: int) -> List[List[int]]:\n    \"\"\"\n    Find all unique combinations of numbers from the given list that add up to the target number,\n    and return them as a list of lists.\n\n    Each number in the given list can only be used once in each combination.\n\n    Example:\n    nums = [2, 3, 6, 7]\n    target = 7\n\n    Output:\n    [[2, 2, 3], [7]]\n    \"\"\"\n    combinations = []\n    nums.sort()\n    for i in range(1, len(nums) + 1):\n        for combination in itertools.combinations(nums, i):\n            if sum(combination) == target:\n                combinations.append(list(combination))\n    return combinations\n\ndef g(nums=[2, 3, 6, 7], target=7):\n    return nums, target\n\nassert f(*g()) == [[2, 2, 3], [7]]\n", "emb": null, "idx_generation": 324, "target_skills": null, "problem_func": "from typing import*\nimport itertools\n\ndef f(nums: List[int], target: int) -> List[List[int]]:\n    \"\"\"\n    Find all unique combinations of numbers from the given list that add up to the target number,\n    and return them as a list of lists.\n\n    Each number in the given list can only be used once in each combination.\n\n    Example:\n    nums = [2, 3, 6, 7]\n    target = 7\n\n    Output:\n    [[2, 2, 3], [7]]\n    \"\"\"\n    combinations = []\n    nums.sort()\n    for i in range(1, len(nums) + 1):\n        for combination in itertools.combinations(nums, i):\n            if sum(combination) == target:\n                combinations.append(list(combination))\n    return combinations", "solution_func": "def g(nums=[2, 3, 6, 7], target=7):\n    return nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\n\ndef f(nums: List[int], n: int, target: int) -> bool:\n    \"\"\"\n    Check if the sum of the first n numbers in the list is equal to the target value.\n    \"\"\"\n    return sum(nums[:n]) == target\n\ndef g(n = 5, target = 20):\n    return list(range(10))\n\nassert f(g(), n, target) == False\n\n", "emb": null, "idx_generation": 324, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int], n: int, target: int) -> bool:\n    \"\"\"\n    Check if the sum of the first n numbers in the list is equal to the target value.\n    \"\"\"\n    return sum(nums[:n]) == target", "solution_func": "def g(n = 5, target = 20):\n    return list(range(10))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\n\ndef f(nums: List[int], n: int) -> bool:\n    \"\"\"\n    Check if the sum of the first n numbers in the list is divisible by n.\n    \"\"\"\n    return sum(nums[:n]) % n == 0\n\ndef g(n = 5):\n    return list(range(10))\n\nassert f(g(), n) == False\n\n", "emb": null, "idx_generation": 324, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int], n: int) -> bool:\n    \"\"\"\n    Check if the sum of the first n numbers in the list is divisible by n.\n    \"\"\"\n    return sum(nums[:n]) % n == 0", "solution_func": "def g(n = 5):\n    return list(range(10))", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\n\ndef f(nums: List[int], n: int) -> bool:\n    \"\"\"\n    Check if the sum of the first n numbers in the list is less than the sum of the remaining numbers.\n    \"\"\"\n    return sum(nums[:n]) < sum(nums[n:])\n\ndef g(n = 5):\n    return list(range(10))\n\nassert f(g(), n) == True\n\n", "emb": null, "idx_generation": 324, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int], n: int) -> bool:\n    \"\"\"\n    Check if the sum of the first n numbers in the list is less than the sum of the remaining numbers.\n    \"\"\"\n    return sum(nums[:n]) < sum(nums[n:])", "solution_func": "def g(n = 5):\n    return list(range(10))", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport itertools\nfrom typing import *\nimport random\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subsequence with a sum equal to the target.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n    output: True\n    \"\"\"\n    for r in range(len(nums) + 1):\n        for combination in itertools.combinations(nums, r):\n            if sum(combination) == target:\n                return True\n    return False\n\ndef g(target: int):\n    nums = [random.randint(1, 10) for _ in range(6)]\n    return nums, target\n\nassert f(*g(15)) == True\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 324, "target_skills": null, "problem_func": "from typing import*\nimport itertools\nfrom typing import *\nimport random\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subsequence with a sum equal to the target.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n    output: True\n    \"\"\"\n    for r in range(len(nums) + 1):\n        for combination in itertools.combinations(nums, r):\n            if sum(combination) == target:\n                return True\n    return False", "solution_func": "def g(target: int):\n    nums = [random.randint(1, 10) for _ in range(6)]\n    return nums, target", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that sum up to the target value.\n    \"\"\"\n    nums = set()\n\n    for num in arr:\n        if target - num in nums:\n            return True\n        nums.add(num)\n\n    return False\n\ndef g(arr: List[int]):\n    \"\"\"\n    This solution returns the input list in reverse order.\n    \"\"\"\n    return arr[::-1]\n\nassert f(g([1, 2, 3, 4, 5]), 9)\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 325, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that sum up to the target value.\n    \"\"\"\n    nums = set()\n\n    for num in arr:\n        if target - num in nums:\n            return True\n        nums.add(num)\n\n    return False", "solution_func": "def g(arr: List[int]):\n    \"\"\"\n    This solution returns the input list in reverse order.\n    \"\"\"\n    return arr[::-1]", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if the given string is a valid palindrome.\n    \"\"\"\n    string = ''.join(char.lower() for char in string if char.isalnum())\n    return string == string[::-1]\n\ndef g():\n    \"\"\"\n    Generate a string with a palindrome.\n    \"\"\"\n    return \"A man, a plan, a canal, Panama!\"\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 325, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if the given string is a valid palindrome.\n    \"\"\"\n    string = ''.join(char.lower() for char in string if char.isalnum())\n    return string == string[::-1]", "solution_func": "def g():\n    \"\"\"\n    Generate a string with a palindrome.\n    \"\"\"\n    return \"A man, a plan, a canal, Panama!\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, check if it is a symmetric matrix.\n    A symmetric matrix is a square matrix that is equal to its transpose.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\n    Sample Output:\n    False\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g()) == False\n", "emb": null, "idx_generation": 325, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, check if it is a symmetric matrix.\n    A symmetric matrix is a square matrix that is equal to its transpose.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\n    Sample Output:\n    False\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target number, return True if the target number exists in the matrix,\n    otherwise return False.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    target = 10\n\n    Output:\n    False\n\n    Explanation: The target number 10 does not exist in the matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    row = 0\n    col = cols - 1\n\n    while row < rows and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=10):\n    return matrix, target\n\nassert f(*g()) == False\n\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 325, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target number, return True if the target number exists in the matrix,\n    otherwise return False.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    target = 10\n\n    Output:\n    False\n\n    Explanation: The target number 10 does not exist in the matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    row = 0\n    col = cols - 1\n\n    while row < rows and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=10):\n    return matrix, target", "map_ix": [1, 0, 1, 0, 0, 1, 1, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list where each element at index i of the new list is the product of all\n    the numbers in the original list except the one at i.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n\n    Output:\n    [120, 60, 40, 30, 24]\n\n    Explanation: The product of all numbers in the original list except the one at index 0 is 2*3*4*5 = 120.\n    The product of all numbers in the original list except the one at index 1 is 1*3*4*5 = 60.\n    The product of all numbers in the original list except the one at index 2 is 1*2*4*5 = 40.\n    The product of all numbers in the original list except the one at index 3 is 1*2*3*5 = 30.\n    The product of all numbers in the original list except the one at index 4 is 1*2*3*4 = 24.\n    \"\"\"\n    n = len(nums)\n    prefix_products = [1] * n\n    suffix_products = [1] * n\n    result = [1] * n\n\n    for i in range(1, n):\n        prefix_products[i] = prefix_products[i - 1] * nums[i - 1]\n\n    for i in range(n - 2, -1, -1):\n        suffix_products[i] = suffix_products[i + 1] * nums[i + 1]\n\n    for i in range(n):\n        result[i] = prefix_products[i] * suffix_products[i]\n\n    return result\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(*g()) == [120, 60, 40, 30, 24]\n\n", "emb": null, "idx_generation": 325, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list where each element at index i of the new list is the product of all\n    the numbers in the original list except the one at i.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n\n    Output:\n    [120, 60, 40, 30, 24]\n\n    Explanation: The product of all numbers in the original list except the one at index 0 is 2*3*4*5 = 120.\n    The product of all numbers in the original list except the one at index 1 is 1*3*4*5 = 60.\n    The product of all numbers in the original list except the one at index 2 is 1*2*4*5 = 40.\n    The product of all numbers in the original list except the one at index 3 is 1*2*3*5 = 30.\n    The product of all numbers in the original list except the one at index 4 is 1*2*3*4 = 24.\n    \"\"\"\n    n = len(nums)\n    prefix_products = [1] * n\n    suffix_products = [1] * n\n    result = [1] * n\n\n    for i in range(1, n):\n        prefix_products[i] = prefix_products[i - 1] * nums[i - 1]\n\n    for i in range(n - 2, -1, -1):\n        suffix_products[i] = suffix_products[i + 1] * nums[i + 1]\n\n    for i in range(n):\n        result[i] = prefix_products[i] * suffix_products[i]\n\n    return result", "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int) -> bool:\n    \"\"\"\n    Given an integer n, return True if n is a perfect square, otherwise return False.\n\n    Example:\n    n = 16\n\n    Output:\n    True\n\n    Explanation: 16 is a perfect square because 4*4 = 16.\n    \"\"\"\n    if n < 0:\n        return False\n\n    left = 0\n    right = n\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        square = mid * mid\n\n        if square == n:\n            return True\n        elif square < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False\n\ndef g(n=16):\n    return n\n\nassert f(*g()) == True\n\n", "emb": null, "idx_generation": 325, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(n: int) -> bool:\n    \"\"\"\n    Given an integer n, return True if n is a perfect square, otherwise return False.\n\n    Example:\n    n = 16\n\n    Output:\n    True\n\n    Explanation: 16 is a perfect square because 4*4 = 16.\n    \"\"\"\n    if n < 0:\n        return False\n\n    left = 0\n    right = n\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        square = mid * mid\n\n        if square == n:\n            return True\n        elif square < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False", "solution_func": "def g(n=16):\n    return n", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list nums whose sum is equal to the target\"\"\"\n    nums.sort()\n    left, right = 0, len(nums) - 1\n    while left < right:\n        curr_sum = nums[left] + nums[right]\n        if curr_sum == target:\n            return True\n        elif curr_sum < target:\n            left += 1\n        else:\n            right -= 1\n    return False\n\ndef g(nums=[2, 4, 6, 8, 10], target=12):\n    return (nums, target)\n\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 325, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list nums whose sum is equal to the target\"\"\"\n    nums.sort()\n    left, right = 0, len(nums) - 1\n    while left < right:\n        curr_sum = nums[left] + nums[right]\n        if curr_sum == target:\n            return True\n        elif curr_sum < target:\n            left += 1\n        else:\n            right -= 1\n    return False", "solution_func": "def g(nums=[2, 4, 6, 8, 10], target=12):\n    return (nums, target)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the string s is a palindrome\"\"\"\n    s = s.lower()\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] != s[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n\ndef g(s=\"level\"):\n    return s\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 325, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the string s is a palindrome\"\"\"\n    s = s.lower()\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] != s[right]:\n            return False\n        left += 1\n        right -= 1\n    return True", "solution_func": "def g(s=\"level\"):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list nums contains any duplicate elements\"\"\"\n    nums_set = set(nums)\n    return len(nums_set) != len(nums)\n\ndef g(nums=[1, 2, 3, 4, 5, 5]):\n    return nums\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 325, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list nums contains any duplicate elements\"\"\"\n    nums_set = set(nums)\n    return len(nums_set) != len(nums)", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 5]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there is a pair of numbers in the given list whose sum is equal to the target number.\n    \"\"\"\n    nums.sort()\n    left = 0\n    right = len(nums) - 1\n    while left < right:\n        curr_sum = nums[left] + nums[right]\n        if curr_sum == target:\n            return True\n        elif curr_sum < target:\n            left += 1\n        else:\n            right -= 1\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 325, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there is a pair of numbers in the given list whose sum is equal to the target number.\n    \"\"\"\n    nums.sort()\n    left = 0\n    right = len(nums) - 1\n    while left < right:\n        curr_sum = nums[left] + nums[right]\n        if curr_sum == target:\n            return True\n        elif curr_sum < target:\n            left += 1\n        else:\n            right -= 1\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, return the sum of all the diagonal elements.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Output: 15\n\n    Explanation: The diagonal elements are 1, 5, 9. Their sum is 15.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return 0\n    diagonal_sum = 0\n    for i in range(rows):\n        diagonal_sum += matrix[i][i]\n    return diagonal_sum\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 15\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 326, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, return the sum of all the diagonal elements.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Output: 15\n\n    Explanation: The diagonal elements are 1, 5, 9. Their sum is 15.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return 0\n    diagonal_sum = 0\n    for i in range(rows):\n        diagonal_sum += matrix[i][i]\n    return diagonal_sum", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return a list of the sums of each row.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Output: [6, 15, 24]\n\n    Explanation: The sums of the rows are [1+2+3, 4+5+6, 7+8+9] = [6, 15, 24].\n    \"\"\"\n    row_sums = []\n    for row in matrix:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n    return row_sums\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [6, 15, 24]\n\n", "emb": [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 326, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return a list of the sums of each row.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Output: [6, 15, 24]\n\n    Explanation: The sums of the rows are [1+2+3, 4+5+6, 7+8+9] = [6, 15, 24].\n    \"\"\"\n    row_sums = []\n    for row in matrix:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n    return row_sums", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [1, 1, 1, 1, 0, 1, 1, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    Given a matrix of integers and a target number, find the indices (row and column) of all occurrences of the target number in the matrix.\n    \"\"\"\n    indices = []\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target:\n                indices.append((i, j))\n    return indices\n\ndef g(matrix=[[1, 2, 3], [4, 2, 6], [7, 8, 2]], target=2):\n    return (matrix, target)\n\nassert f(*g()) == [(0, 1), (1, 1), (2, 2)]\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 326, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    Given a matrix of integers and a target number, find the indices (row and column) of all occurrences of the target number in the matrix.\n    \"\"\"\n    indices = []\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target:\n                indices.append((i, j))\n    return indices", "solution_func": "def g(matrix=[[1, 2, 3], [4, 2, 6], [7, 8, 2]], target=2):\n    return (matrix, target)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=5) -> bool:\n    \"\"\"\n    Given an array of integers and a target value, determine if there are two integers in the array\n    whose sum is equal to the target value.\n\n    Example:\n    arr = [1, 2, 3, 4, 5]\n    target = 7\n    output: True\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr = [1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 326, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=5) -> bool:\n    \"\"\"\n    Given an array of integers and a target value, determine if there are two integers in the array\n    whose sum is equal to the target value.\n\n    Example:\n    arr = [1, 2, 3, 4, 5]\n    target = 7\n    output: True\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(arr = [1, 2, 3, 4, 5]):\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"\n    Given a string and a substring, determine if the substring is present in the string.\n\n    Example:\n    s = \"abcdefg\"\n    substring = \"def\"\n    output: True\n    \"\"\"\n    return substring in s\n\ndef g(s = \"abcdefg\", substring='abc'):\n    return s\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 326, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"\n    Given a string and a substring, determine if the substring is present in the string.\n\n    Example:\n    s = \"abcdefg\"\n    substring = \"def\"\n    output: True\n    \"\"\"\n    return substring in s", "solution_func": "def g(s = \"abcdefg\", substring='abc'):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"\n    Given a matrix and a target value, determine if the target value is present in the matrix.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 5\n    output: True\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 326, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"\n    Given a matrix and a target value, determine if the target value is present in the matrix.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 5\n    output: True\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any combination sums up to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False\n\ndef g(k=3, target_sum=15):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\nassert f(g(), k=3, target_sum=15) == True\n", "emb": null, "idx_generation": 326, "target_skills": null, "problem_func": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any combination sums up to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False", "solution_func": "def g(k=3, target_sum=15):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list where each element is multiplied by 3.\n    \"\"\"\n    return [num * 3 for num in arr]\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr\n\nassert f(g()) == [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0], "idx_generation": 326, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list where each element is multiplied by 3.\n    \"\"\"\n    return [num * 3 for num in arr]", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> int:\n    \"\"\"\n    Find the number of occurrences of the target value in the given list.\n    Return the count of occurrences.\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num == target:\n            count += 1\n    return count\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 5):\n    return arr, target\n\nassert f(*g()) == 1\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0], "idx_generation": 326, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> int:\n    \"\"\"\n    Find the number of occurrences of the target value in the given list.\n    Return the count of occurrences.\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num == target:\n            count += 1\n    return count", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 5):\n    return arr, target", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, return the maximum element in the matrix.\n    \"\"\"\n    max_element = float('-inf')\n    \n    for row in matrix:\n        for element in row:\n            if element > max_element:\n                max_element = element\n        \n    return max_element\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 9\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 326, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, return the maximum element in the matrix.\n    \"\"\"\n    max_element = float('-inf')\n    \n    for row in matrix:\n        for element in row:\n            if element > max_element:\n                max_element = element\n        \n    return max_element", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int, operation: str) -> bool:\n    \"\"\"\n    Given a list of numbers `nums`, a target number `target`, and an operation `operation` ('+', '-', '*', '/'),\n    determine if it is possible to obtain the target number by applying the operation between the numbers in `nums`.\n\n    For example, if nums = [5, 2, 10] and target = 25, and operation = '*', we can obtain the target number by multiplying\n    5, 2, and 10 together (5 * 2 * 10 = 100) and then dividing by 4 (100 / 4 = 25).\n    \"\"\"\n    if operation == '+':\n        result = sum(nums)\n    elif operation == '-':\n        result = nums[0] - sum(nums[1:])\n    elif operation == '*':\n        result = 1\n        for num in nums:\n            result *= num\n    elif operation == '/':\n        result = nums[0] / sum(nums[1:])\n    return result == target\n\ndef g(nums: List[int] = [2, 3, 4, 5], target: int = 30, operation: str = '*'):\n    return (nums, target, operation)\n\nassert f(*g()) == True\n", "emb": null, "idx_generation": 327, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int, operation: str) -> bool:\n    \"\"\"\n    Given a list of numbers `nums`, a target number `target`, and an operation `operation` ('+', '-', '*', '/'),\n    determine if it is possible to obtain the target number by applying the operation between the numbers in `nums`.\n\n    For example, if nums = [5, 2, 10] and target = 25, and operation = '*', we can obtain the target number by multiplying\n    5, 2, and 10 together (5 * 2 * 10 = 100) and then dividing by 4 (100 / 4 = 25).\n    \"\"\"\n    if operation == '+':\n        result = sum(nums)\n    elif operation == '-':\n        result = nums[0] - sum(nums[1:])\n    elif operation == '*':\n        result = 1\n        for num in nums:\n            result *= num\n    elif operation == '/':\n        result = nums[0] / sum(nums[1:])\n    return result == target", "solution_func": "def g(nums: List[int] = [2, 3, 4, 5], target: int = 30, operation: str = '*'):\n    return (nums, target, operation)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers `nums` and a target number `target`, find if there exists a sublist (not necessarily contiguous)\n    of `nums` that sums up to the target number.\n\n    For example, if nums = [2, 4, 6, 8] and target = 14, the sublist [2, 6, 6] sums up to the target number.\n    \"\"\"\n    def subset_sum(nums, target, n):\n        if target == 0:\n            return True\n        if n == 0 and target != 0:\n            return False\n\n        if nums[n - 1] > target:\n            return subset_sum(nums, target, n - 1)\n\n        return subset_sum(nums, target, n - 1) or subset_sum(nums, target - nums[n - 1], n - 1)\n\n    return subset_sum(nums, target, len(nums))\n\ndef g(nums: List[int] = [2, 4, 6, 8], target: int = 14):\n    return (nums, target)\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 327, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers `nums` and a target number `target`, find if there exists a sublist (not necessarily contiguous)\n    of `nums` that sums up to the target number.\n\n    For example, if nums = [2, 4, 6, 8] and target = 14, the sublist [2, 6, 6] sums up to the target number.\n    \"\"\"\n    def subset_sum(nums, target, n):\n        if target == 0:\n            return True\n        if n == 0 and target != 0:\n            return False\n\n        if nums[n - 1] > target:\n            return subset_sum(nums, target, n - 1)\n\n        return subset_sum(nums, target, n - 1) or subset_sum(nums, target - nums[n - 1], n - 1)\n\n    return subset_sum(nums, target, len(nums))", "solution_func": "def g(nums: List[int] = [2, 4, 6, 8], target: int = 14):\n    return (nums, target)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers `nums` and a target number `target`, find if there exists a pair of numbers in `nums`\n    such that their sum is equal to the target number.\n\n    For example, if nums = [1, 2, 3, 4, 5] and target = 7, the pair (2, 5) sum up to the target number.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return (nums, target)\n\nassert f(*g()) == True\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0], "idx_generation": 327, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers `nums` and a target number `target`, find if there exists a pair of numbers in `nums`\n    such that their sum is equal to the target number.\n\n    For example, if nums = [1, 2, 3, 4, 5] and target = 7, the pair (2, 5) sum up to the target number.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return (nums, target)", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 1, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Find if there exists a subsequence of numbers in a list that sums up to a given target.\n    The subsequence can contain any number of elements.\n    \"\"\"\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target, num - 1, -1):\n            if dp[i - num]:\n                dp[i] = True\n    return dp[target]\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 10) -> List[int]:\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 327, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Find if there exists a subsequence of numbers in a list that sums up to a given target.\n    The subsequence can contain any number of elements.\n    \"\"\"\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target, num - 1, -1):\n            if dp[i - num]:\n                dp[i] = True\n    return dp[target]", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 10) -> List[int]:\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, k: int) -> bool:\n    \"\"\"\n    Find if there exists k elements in a list that sum up to a given target.\n    The elements can be in any order and can be repeated.\n    \"\"\"\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target, num - 1, -1):\n            if dp[i - num]:\n                dp[i] = True\n    return dp[target]\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 10, k: int = 3) -> List[int]:\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 327, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, k: int) -> bool:\n    \"\"\"\n    Find if there exists k elements in a list that sum up to a given target.\n    The elements can be in any order and can be repeated.\n    \"\"\"\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target, num - 1, -1):\n            if dp[i - num]:\n                dp[i] = True\n    return dp[target]", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 10, k: int = 3) -> List[int]:\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[List[int]]:\n    \"\"\"\n    Find all possible combinations of numbers in a list that sum up to a given target.\n    Each number in the list can be used multiple times.\n    \"\"\"\n    dp = [[] for _ in range(target + 1)]\n    dp[0] = [[]]\n    for num in nums:\n        for i in range(num, target + 1):\n            for comb in dp[i - num]:\n                dp[i].append(comb + [num])\n    return dp[target]\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 5) -> List[int]:\n    return nums\n\nassert f(g())\n", "emb": null, "idx_generation": 327, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[List[int]]:\n    \"\"\"\n    Find all possible combinations of numbers in a list that sum up to a given target.\n    Each number in the list can be used multiple times.\n    \"\"\"\n    dp = [[] for _ in range(target + 1)]\n    dp[0] = [[]]\n    for num in nums:\n        for i in range(num, target + 1):\n            for comb in dp[i - num]:\n                dp[i].append(comb + [num])\n    return dp[target]", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 5) -> List[int]:\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, a=93252338) -> bool:\n    \"\"\"Check if a number is divisible by a\"\"\"\n    return x % a == 0\ndef g(a = 93252338):\n    return a * 2\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0], "idx_generation": 327, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, a=93252338) -> bool:\n    \"\"\"Check if a number is divisible by a\"\"\"\n    return x % a == 0", "solution_func": "def g(a = 93252338):\n    return a * 2", "map_ix": [1, 1, 0, 1, 0, 0, 0, 1, 1, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: int, a=93252338) -> bool:\n    \"\"\"Check if a number is a perfect square\"\"\"\n    return x == a ** 2\ndef g(a = 93252338):\n    return int(a ** 0.5)\nassert f(g())\n", "emb": null, "idx_generation": 327, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, a=93252338) -> bool:\n    \"\"\"Check if a number is a perfect square\"\"\"\n    return x == a ** 2", "solution_func": "def g(a = 93252338):\n    return int(a ** 0.5)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: str, a=\"hello world\") -> bool:\n    \"\"\"Check if a string is a substring of a\"\"\"\n    return x in a\ndef g(a = \"hello world\"):\n    return a[3:8]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 327, "target_skills": null, "problem_func": "from typing import*\ndef f(x: str, a=\"hello world\") -> bool:\n    \"\"\"Check if a string is a substring of a\"\"\"\n    return x in a", "solution_func": "def g(a = \"hello world\"):\n    return a[3:8]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find a pair of numbers in the list that add up to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(arr)\n    for num in arr:\n        complement = target - num\n        if complement in nums_set and complement != num:\n            return True\n    return False\n\ndef g(arr: List[int], target: int):\n    return arr, target\n\nassert f(g([2, 5, 3, 4, 8], 10)) == True\n\n", "emb": null, "idx_generation": 327, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find a pair of numbers in the list that add up to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(arr)\n    for num in arr:\n        complement = target - num\n        if complement in nums_set and complement != num:\n            return True\n    return False", "solution_func": "def g(arr: List[int], target: int):\n    return arr, target", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that sums up to the target value.\n    \"\"\"\n    def find_combination(start, curr_sum):\n        if curr_sum == target:\n            return True\n        if curr_sum > target or start == len(nums):\n            return False\n        for i in range(start, len(nums)):\n            if find_combination(i + 1, curr_sum + nums[i]):\n                return True\n        return False\n\n    return find_combination(0, 0)\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is.\n    \"\"\"\n    return nums\n\nassert f(g([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]))\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 328, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that sums up to the target value.\n    \"\"\"\n    def find_combination(start, curr_sum):\n        if curr_sum == target:\n            return True\n        if curr_sum > target or start == len(nums):\n            return False\n        for i in range(start, len(nums)):\n            if find_combination(i + 1, curr_sum + nums[i]):\n                return True\n        return False\n\n    return find_combination(0, 0)", "solution_func": "def g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is.\n    \"\"\"\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of ten people having the same birthday in a group of n is near 1/10.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 1/10) ** 2 <= year_len\ndef g(year_len = 365):\n    n = 1\n    distinct_prob = 1.0\n    best = (1/10, 1)  # (difference between probability and 1/10, n)\n    while distinct_prob > 1/10:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(1/10 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 328, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of ten people having the same birthday in a group of n is near 1/10.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 1/10) ** 2 <= year_len", "solution_func": "def g(year_len = 365):\n    n = 1\n    distinct_prob = 1.0\n    best = (1/10, 1)  # (difference between probability and 1/10, n)\n    while distinct_prob > 1/10:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(1/10 - distinct_prob), n))\n\n    return best[1]", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains any duplicate values.\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is.\n    \"\"\"\n    return nums\n\nassert f(g([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n", "emb": null, "idx_generation": 328, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains any duplicate values.\n    \"\"\"\n    return len(nums) != len(set(nums))", "solution_func": "def g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is.\n    \"\"\"\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int = 3) -> bool:\n    \"\"\"\n    Check if there exists a subarray of length k in the given array, such that the sum of its elements is divisible by k.\n    \"\"\"\n    for i in range(len(arr) - k + 1):\n        subarr = arr[i:i+k]\n        if sum(subarr) % k == 0:\n            return True\n    return False\n\ndef g(k: int = 3):\n    return [k] * k\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 328, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int = 3) -> bool:\n    \"\"\"\n    Check if there exists a subarray of length k in the given array, such that the sum of its elements is divisible by k.\n    \"\"\"\n    for i in range(len(arr) - k + 1):\n        subarr = arr[i:i+k]\n        if sum(subarr) % k == 0:\n            return True\n    return False", "solution_func": "def g(k: int = 3):\n    return [k] * k", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int = 3) -> bool:\n    \"\"\"\n    Check if there exists a subarray of length k in the given array, such that the sum of its elements is less than k.\n    \"\"\"\n    for i in range(len(arr) - k + 1):\n        subarr = arr[i:i+k]\n        if sum(subarr) < k:\n            return True\n    return False\n\ndef g(k: int = 3):\n    return [k] * k\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 328, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int = 3) -> bool:\n    \"\"\"\n    Check if there exists a subarray of length k in the given array, such that the sum of its elements is less than k.\n    \"\"\"\n    for i in range(len(arr) - k + 1):\n        subarr = arr[i:i+k]\n        if sum(subarr) < k:\n            return True\n    return False", "solution_func": "def g(k: int = 3):\n    return [k] * k", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int = 3) -> bool:\n    \"\"\"\n    Check if there exists a subarray of length k in the given array, such that the sum of its elements is greater than the maximum element in the array.\n    \"\"\"\n    for i in range(len(arr) - k + 1):\n        subarr = arr[i:i+k]\n        if sum(subarr) > max(arr):\n            return True\n    return False\n\ndef g(k: int = 3):\n    return [k] * k\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 328, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int = 3) -> bool:\n    \"\"\"\n    Check if there exists a subarray of length k in the given array, such that the sum of its elements is greater than the maximum element in the array.\n    \"\"\"\n    for i in range(len(arr) - k + 1):\n        subarr = arr[i:i+k]\n        if sum(subarr) > max(arr):\n            return True\n    return False", "solution_func": "def g(k: int = 3):\n    return [k] * k", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in ascending order\"\"\"\n    return nums == sorted(nums)\n\ndef g(nums=[3, 1, 4, 2]):\n    return nums\n\nassert f(g()) == False\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 328, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in ascending order\"\"\"\n    return nums == sorted(nums)", "solution_func": "def g(nums=[3, 1, 4, 2]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the string is a palindrome\"\"\"\n    return s == s[::-1]\n\ndef g(s=\"radar\"):\n    return s\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 328, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the string is a palindrome\"\"\"\n    return s == s[::-1]", "solution_func": "def g(s=\"radar\"):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the string contains only uppercase letters\"\"\"\n    return s.isupper()\n\ndef g(s=\"HELLO\"):\n    return s\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 328, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the string contains only uppercase letters\"\"\"\n    return s.isupper()", "solution_func": "def g(s=\"HELLO\"):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if any number in the list is less than the target\"\"\"\n    return any(num < target for num in nums)\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 0):\n    return (nums, target)\n\nassert f(*g()) == True\n\n", "emb": null, "idx_generation": 328, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if any number in the list is less than the target\"\"\"\n    return any(num < target for num in nums)", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 0):\n    return (nums, target)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of any two non-overlapping subarrays.\n\n    Example:\n    nums = [2, -1, 3, 1, -2, 4]\n    output: 9\n    \"\"\"\n    max_sum = float('-inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            sum1 = sum(nums[i:j+1])\n            for k in range(j+2, len(nums)):\n                sum2 = sum(nums[k:])\n                max_sum = max(max_sum, sum1 + sum2)\n    return max_sum\n\ndef g():\n    return [2, -1, 3, 1, -2, 4]\n\nassert f(g()) == 9\n\n\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 329, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of any two non-overlapping subarrays.\n\n    Example:\n    nums = [2, -1, 3, 1, -2, 4]\n    output: 9\n    \"\"\"\n    max_sum = float('-inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            sum1 = sum(nums[i:j+1])\n            for k in range(j+2, len(nums)):\n                sum2 = sum(nums[k:])\n                max_sum = max(max_sum, sum1 + sum2)\n    return max_sum", "solution_func": "def g():\n    return [2, -1, 3, 1, -2, 4]", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the given string is a pangram.\n    A pangram is a string that contains every letter of the alphabet at least once.\n\n    Example:\n    s = \"The quick brown fox jumps over the lazy dog\"\n    output: True\n    \"\"\"\n    alphabet = set('abcdefghijklmnopqrstuvwxyz')\n    return set(s.lower()) >= alphabet\n\ndef g():\n    return \"The quick brown fox jumps over the lazy dog\"\n\nassert f(g()) == True\n\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 329, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the given string is a pangram.\n    A pangram is a string that contains every letter of the alphabet at least once.\n\n    Example:\n    s = \"The quick brown fox jumps over the lazy dog\"\n    output: True\n    \"\"\"\n    alphabet = set('abcdefghijklmnopqrstuvwxyz')\n    return set(s.lower()) >= alphabet", "solution_func": "def g():\n    return \"The quick brown fox jumps over the lazy dog\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of any three numbers in the list.\n\n    Example:\n    nums = [1, 5, 3, 9, 2]\n    output: 17\n    \"\"\"\n    max_sum = float('-inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                sum1 = nums[i] + nums[j] + nums[k]\n                max_sum = max(max_sum, sum1)\n    return max_sum\n\ndef g():\n    return [1, 5, 3, 9, 2]\n\nassert f(g()) == 17\n\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 329, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of any three numbers in the list.\n\n    Example:\n    nums = [1, 5, 3, 9, 2]\n    output: 17\n    \"\"\"\n    max_sum = float('-inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                sum1 = nums[i] + nums[j] + nums[k]\n                max_sum = max(max_sum, sum1)\n    return max_sum", "solution_func": "def g():\n    return [1, 5, 3, 9, 2]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list contains only even numbers.\"\"\"\n    return all(num % 2 == 0 for num in numbers)\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 329, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list contains only even numbers.\"\"\"\n    return all(num % 2 == 0 for num in numbers)", "solution_func": "def g():\n    return [2, 4, 6, 8, 10]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list contains any duplicate numbers.\"\"\"\n    return len(numbers) != len(set(numbers))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == False\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 329, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list contains any duplicate numbers.\"\"\"\n    return len(numbers) != len(set(numbers))", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list is sorted in non-decreasing order.\"\"\"\n    return all(numbers[i] <= numbers[i+1] for i in range(len(numbers)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 329, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list is sorted in non-decreasing order.\"\"\"\n    return all(numbers[i] <= numbers[i+1] for i in range(len(numbers)-1))", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(words: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Given a list of words and a prefix string, return a list of all words that start with the prefix.\n\n    Example:\n    words = [\"apple\", \"banana\", \"apricot\", \"orange\", \"grape\"]\n    prefix = \"ap\"\n    output: [\"apple\", \"apricot\"]\n    \"\"\"\n    prefix_words = []\n    for word in words:\n        if word.startswith(prefix):\n            prefix_words.append(word)\n    return prefix_words\n\ndef g():\n    return [\n        \"apple\", \"banana\", \"apricot\", \"orange\", \"grape\"\n    ], \"ap\"\n\nassert f(*g()) == [\"apple\", \"apricot\"]\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 329, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Given a list of words and a prefix string, return a list of all words that start with the prefix.\n\n    Example:\n    words = [\"apple\", \"banana\", \"apricot\", \"orange\", \"grape\"]\n    prefix = \"ap\"\n    output: [\"apple\", \"apricot\"]\n    \"\"\"\n    prefix_words = []\n    for word in words:\n        if word.startswith(prefix):\n            prefix_words.append(word)\n    return prefix_words", "solution_func": "def g():\n    return [\n        \"apple\", \"banana\", \"apricot\", \"orange\", \"grape\"\n    ], \"ap\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with the even numbers at the front followed by the odd numbers.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6]\n    output: [2, 4, 6, 1, 3, 5]\n    \"\"\"\n    even_nums = []\n    odd_nums = []\n    for num in nums:\n        if num % 2 == 0:\n            even_nums.append(num)\n        else:\n            odd_nums.append(num)\n    return even_nums + odd_nums\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(*g()) == [2, 4, 6, 1, 3, 5]\n\n", "emb": null, "idx_generation": 329, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with the even numbers at the front followed by the odd numbers.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6]\n    output: [2, 4, 6, 1, 3, 5]\n    \"\"\"\n    even_nums = []\n    odd_nums = []\n    for num in nums:\n        if num % 2 == 0:\n            even_nums.append(num)\n        else:\n            odd_nums.append(num)\n    return even_nums + odd_nums", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the maximum sum that can be obtained by adding any two numbers in the list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    output: 9 (4 + 5)\n    \"\"\"\n    max_sum = float('-inf')\n    n = len(nums)\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            current_sum = nums[i] + nums[j]\n            if current_sum > max_sum:\n                max_sum = current_sum\n    return max_sum\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(*g()) == 9\n\n", "emb": null, "idx_generation": 329, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the maximum sum that can be obtained by adding any two numbers in the list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    output: 9 (4 + 5)\n    \"\"\"\n    max_sum = float('-inf')\n    n = len(nums)\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            current_sum = nums[i] + nums[j]\n            if current_sum > max_sum:\n                max_sum = current_sum\n    return max_sum", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the given list whose sum is equal to the target number.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 329, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the given list whose sum is equal to the target number.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, t=100, upper=1000) -> bool:\n    \"\"\"\n    Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n    * if n is even, divide n by 2,\n    * if n is odd, multiply n by 3 and add 1\n    Find `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n    \"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 2 if n % 2 else n // 2\n    return n == 1 and m <= upper\n\ndef g(t = 100, upper = 1000):\n    bound = t + 10\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 1) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return min(prev)\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 330, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, t=100, upper=1000) -> bool:\n    \"\"\"\n    Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n    * if n is even, divide n by 2,\n    * if n is odd, multiply n by 3 and add 1\n    Find `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n    \"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 2 if n % 2 else n // 2\n    return n == 1 and m <= upper", "solution_func": "def g(t = 100, upper = 1000):\n    bound = t + 10\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 1) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return min(prev)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, t=100, upper=1000) -> bool:\n    \"\"\"\n    Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n    * if n is even, divide n by 2,\n    * if n is odd, multiply n by 3 and add 1\n    Find `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n    \"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= upper\n\ndef g(t = 100, upper = 1000):\n    bound = t + 12\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 2) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return min(prev)\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 330, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, t=100, upper=1000) -> bool:\n    \"\"\"\n    Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n    * if n is even, divide n by 2,\n    * if n is odd, multiply n by 3 and add 1\n    Find `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n    \"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= upper", "solution_func": "def g(t = 100, upper = 1000):\n    bound = t + 12\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 2) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return min(prev)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, t=100, upper=1000) -> bool:\n    \"\"\"\n    Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n    * if n is even, divide n by 2,\n    * if n is odd, multiply n by 3 and add 1\n    Find `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n    \"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= upper\n\ndef g(t = 100, upper = 1000):\n    bound = t + 14\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 3) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return min(prev)\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 330, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, t=100, upper=1000) -> bool:\n    \"\"\"\n    Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n    * if n is even, divide n by 2,\n    * if n is odd, multiply n by 3 and add 1\n    Find `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n    \"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= upper", "solution_func": "def g(t = 100, upper = 1000):\n    bound = t + 14\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 3) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return min(prev)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers `nums` and an integer `k`, find if there exists a subarray in the list that sums up to exactly k.\n    Return True if such a subarray exists, False otherwise.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    k = 7\n    Output: True\n    Explanation: The subarray [2, 5] sums up to 7.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == k:\n            return True\n        if prefix_sum - k in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], k: int = 7):\n    return (nums, k)\n\nassert f(*g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0], "idx_generation": 330, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers `nums` and an integer `k`, find if there exists a subarray in the list that sums up to exactly k.\n    Return True if such a subarray exists, False otherwise.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    k = 7\n    Output: True\n    Explanation: The subarray [2, 5] sums up to 7.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == k:\n            return True\n        if prefix_sum - k in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], k: int = 7):\n    return (nums, k)", "map_ix": [1, 0, 0, 0, 0, 1, 0, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Given a list of integers `arr` and an integer `target`, check if there exists a subarray in the list whose sum is greater than or equal to the target value.\n    Return True if such a subarray exists, False otherwise.\n\n    Example:\n    arr = [1, 2, 3, 4, 5]\n    target = 7\n    Output: True\n    Explanation: The subarray [3, 4] sums up to 7.\n    \"\"\"\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if prefix_sum[j] - prefix_sum[i] >= target:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return arr, target\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 330, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Given a list of integers `arr` and an integer `target`, check if there exists a subarray in the list whose sum is greater than or equal to the target value.\n    Return True if such a subarray exists, False otherwise.\n\n    Example:\n    arr = [1, 2, 3, 4, 5]\n    target = 7\n    Output: True\n    Explanation: The subarray [3, 4] sums up to 7.\n    \"\"\"\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if prefix_sum[j] - prefix_sum[i] >= target:\n                return True\n    return False", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return arr, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers `nums` and an integer `k`, find if there exists a subarray in the list that sums up to exactly k.\n    Return True if such a subarray exists, False otherwise.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    k = 12\n    Output: False\n    Explanation: There is no subarray that sums up to 12.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == k:\n            return True\n        if prefix_sum - k in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], k: int = 12):\n    return (nums, k)\n\nassert f(*g()) == False\n\n", "emb": null, "idx_generation": 330, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers `nums` and an integer `k`, find if there exists a subarray in the list that sums up to exactly k.\n    Return True if such a subarray exists, False otherwise.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    k = 12\n    Output: False\n    Explanation: There is no subarray that sums up to 12.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == k:\n            return True\n        if prefix_sum - k in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], k: int = 12):\n    return (nums, k)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, m: int, target: int) -> bool:\n    \"\"\"\n    Check if it is possible to obtain the target number by performing the following operations:\n    - Multiply n by 2\n    - Subtract m from n\n\n    Sample Input:\n    n = 10\n    m = 3\n    target = 17\n\n    Sample Output:\n    True\n    \"\"\"\n    while n < target:\n        if n * 2 <= target:\n            n *= 2\n        else:\n            n -= m\n    return n == target\n\ndef g(n: int = 10, m: int = 3, target: int = 17):\n    return n\n\nassert f(g(), m=3, target=17) == True\n", "emb": null, "idx_generation": 330, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, target: int) -> bool:\n    \"\"\"\n    Check if it is possible to obtain the target number by performing the following operations:\n    - Multiply n by 2\n    - Subtract m from n\n\n    Sample Input:\n    n = 10\n    m = 3\n    target = 17\n\n    Sample Output:\n    True\n    \"\"\"\n    while n < target:\n        if n * 2 <= target:\n            n *= 2\n        else:\n            n -= m\n    return n == target", "solution_func": "def g(n: int = 10, m: int = 3, target: int = 17):\n    return n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Find the number of pairs in the list whose sum is equal to the target value.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 5\n\n    Sample Output:\n    2\n    \"\"\"\n    count = 0\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            count += 1\n        seen.add(num)\n    return count\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 5):\n    return nums\n\nassert f(g()) == 2\n", "emb": null, "idx_generation": 330, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Find the number of pairs in the list whose sum is equal to the target value.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 5\n\n    Sample Output:\n    2\n    \"\"\"\n    count = 0\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            count += 1\n        seen.add(num)\n    return count", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 5):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"\n    Check if the target string can be formed by rearranging the characters of the input string.\n\n    Sample Input:\n    s = \"listen\"\n    target = \"silent\"\n\n    Sample Output:\n    True\n    \"\"\"\n    if len(s) != len(target):\n        return False\n    return sorted(s) == sorted(target)\n\ndef g(s: str = \"listen\", target: str = \"silent\"):\n    return s\n\nassert f(g(), target=\"silent\") == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 330, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"\n    Check if the target string can be formed by rearranging the characters of the input string.\n\n    Sample Input:\n    s = \"listen\"\n    target = \"silent\"\n\n    Sample Output:\n    True\n    \"\"\"\n    if len(s) != len(target):\n        return False\n    return sorted(s) == sorted(target)", "solution_func": "def g(s: str = \"listen\", target: str = \"silent\"):\n    return s", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list where each element is squared.\n    \"\"\"\n    return [num ** 2 for num in arr]\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr\n\nassert f(g()) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 330, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list where each element is squared.\n    \"\"\"\n    return [num ** 2 for num in arr]", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of any contiguous subarray.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n\ndef g(nums: List[int] = [1, -2, 3, 4, -1, 2, 1, -5, 4]):\n    return nums\n\nassert f(g()) == 10\n", "emb": null, "idx_generation": 331, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of any contiguous subarray.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum", "solution_func": "def g(nums: List[int] = [1, -2, 3, 4, -1, 2, 1, -5, 4]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, determine if it is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums: List[int] = [1, 2, 3, 2, 1]):\n    return nums\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 331, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, determine if it is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]", "solution_func": "def g(nums: List[int] = [1, 2, 3, 2, 1]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, remove all duplicates and return the modified list.\n    \"\"\"\n    return list(set(nums))\n\ndef g(nums: List[int] = [1, 2, 3, 2, 4, 5, 1, 3, 5]):\n    return nums\n\nassert f(g()) == [1, 2, 3, 4, 5]\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 331, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, remove all duplicates and return the modified list.\n    \"\"\"\n    return list(set(nums))", "solution_func": "def g(nums: List[int] = [1, 2, 3, 2, 4, 5, 1, 3, 5]):\n    return nums", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is a magic square\"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for col in range(n):\n        col_sum = 0\n        for row in range(n):\n            col_sum += matrix[row][col]\n        if col_sum != target_sum:\n            return False\n    \n    # Check diagonals\n    diagonal_sum = 0\n    anti_diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += matrix[i][i]\n        anti_diagonal_sum += matrix[i][n-i-1]\n    if diagonal_sum != target_sum or anti_diagonal_sum != target_sum:\n        return False\n    \n    return True\n\ndef g(matrix=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 331, "target_skills": null, "problem_func": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is a magic square\"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for col in range(n):\n        col_sum = 0\n        for row in range(n):\n            col_sum += matrix[row][col]\n        if col_sum != target_sum:\n            return False\n    \n    # Check diagonals\n    diagonal_sum = 0\n    anti_diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += matrix[i][i]\n        anti_diagonal_sum += matrix[i][n-i-1]\n    if diagonal_sum != target_sum or anti_diagonal_sum != target_sum:\n        return False\n    \n    return True", "solution_func": "def g(matrix=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\n\ndef f(n: int) -> List[int]:\n    \"\"\"Generate the Fibonacci sequence up to the given number\"\"\"\n    fib = [0, 1]\n    while fib[-1] < n:\n        fib.append(fib[-1] + fib[-2])\n    return fib\n\ndef g(n=100):\n    return n\n\nassert f(g()) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n", "emb": null, "idx_generation": 331, "target_skills": null, "problem_func": "from typing import*\n\ndef f(n: int) -> List[int]:\n    \"\"\"Generate the Fibonacci sequence up to the given number\"\"\"\n    fib = [0, 1]\n    while fib[-1] < n:\n        fib.append(fib[-1] + fib[-2])\n    return fib", "solution_func": "def g(n=100):\n    return n", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"Remove duplicates from the list and return the unique elements\"\"\"\n    return list(set(nums))\n\ndef g(nums=[1, 2, 2, 3, 4, 4, 5]):\n    return nums\n\nassert f(g()) == [1, 2, 3, 4, 5]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 331, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"Remove duplicates from the list and return the unique elements\"\"\"\n    return list(set(nums))", "solution_func": "def g(nums=[1, 2, 2, 3, 4, 4, 5]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a symmetric matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a symmetric matrix of the given size\n    \"\"\"\n    return [[1 if j <= i else 0 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 331, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a symmetric matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a symmetric matrix of the given size\n    \"\"\"\n    return [[1 if j <= i else 0 for j in range(size)] for i in range(size)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a magic square\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    \n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for col in range(cols):\n        if sum(matrix[i][col] for i in range(rows)) != target_sum:\n            return False\n    \n    # Check diagonals\n    if sum(matrix[i][i] for i in range(rows)) != target_sum:\n        return False\n    \n    if sum(matrix[i][rows-i-1] for i in range(rows)) != target_sum:\n        return False\n    \n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a magic square of the given size\n    \"\"\"\n    square = [[0] * size for _ in range(size)]\n    row = 0\n    col = size // 2\n    num = 1\n    \n    while num <= size ** 2:\n        square[row][col] = num\n        num += 1\n        new_row = (row - 1) % size\n        new_col = (col + 1) % size\n        if square[new_row][new_col] != 0:\n            row += 1\n        else:\n            row = new_row\n            col = new_col\n    \n    return square\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 331, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a magic square\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    \n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for col in range(cols):\n        if sum(matrix[i][col] for i in range(rows)) != target_sum:\n            return False\n    \n    # Check diagonals\n    if sum(matrix[i][i] for i in range(rows)) != target_sum:\n        return False\n    \n    if sum(matrix[i][rows-i-1] for i in range(rows)) != target_sum:\n        return False\n    \n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a magic square of the given size\n    \"\"\"\n    square = [[0] * size for _ in range(size)]\n    row = 0\n    col = size // 2\n    num = 1\n    \n    while num <= size ** 2:\n        square[row][col] = num\n        num += 1\n        new_row = (row - 1) % size\n        new_col = (col + 1) % size\n        if square[new_row][new_col] != 0:\n            row += 1\n        else:\n            row = new_row\n            col = new_col\n    \n    return square", "map_ix": [1, 1, 0, 1, 0, 0, 1, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a magic square\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    \n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for col in range(cols):\n        if sum(matrix[i][col] for i in range(rows)) != target_sum:\n            return False\n    \n    # Check diagonals\n    if sum(matrix[i][i] for i in range(rows)) != target_sum:\n        return False\n    \n    if sum(matrix[i][rows-i-1] for i in range(rows)) != target_sum:\n        return False\n    \n    return True\n\ndef g(size=4):\n    \"\"\"\n    Generate a magic square of the given size\n    \"\"\"\n    square = [[0] * size for _ in range(size)]\n    row = 0\n    col = size // 2\n    num = 1\n    \n    while num <= size ** 2:\n        square[row][col] = num\n        num += 1\n        new_row = (row - 1) % size\n        new_col = (col + 1) % size\n        if square[new_row][new_col] != 0:\n            row += 1\n        else:\n            row = new_row\n            col = new_col\n    \n    return square\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 331, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a magic square\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    \n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for col in range(cols):\n        if sum(matrix[i][col] for i in range(rows)) != target_sum:\n            return False\n    \n    # Check diagonals\n    if sum(matrix[i][i] for i in range(rows)) != target_sum:\n        return False\n    \n    if sum(matrix[i][rows-i-1] for i in range(rows)) != target_sum:\n        return False\n    \n    return True", "solution_func": "def g(size=4):\n    \"\"\"\n    Generate a magic square of the given size\n    \"\"\"\n    square = [[0] * size for _ in range(size)]\n    row = 0\n    col = size // 2\n    num = 1\n    \n    while num <= size ** 2:\n        square[row][col] = num\n        num += 1\n        new_row = (row - 1) % size\n        new_col = (col + 1) % size\n        if square[new_row][new_col] != 0:\n            row += 1\n        else:\n            row = new_row\n            col = new_col\n    \n    return square", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum possible sum of a contiguous subarray.\n\n    Example:\n    nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\n    Output:\n    6\n\n    Explanation: The contiguous subarray with the maximum sum is [4, -1, 2, 1], which gives a sum of 6.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    for num in nums:\n        curr_sum += num\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n\n    return max_sum\n\ndef g(nums: List[int] = [-2, 1, -3, 4, -1, 2, 1, -5, 4]):\n    return (nums,)\n\nassert f(*g()) == 6\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 331, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum possible sum of a contiguous subarray.\n\n    Example:\n    nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\n    Output:\n    6\n\n    Explanation: The contiguous subarray with the maximum sum is [4, -1, 2, 1], which gives a sum of 6.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    for num in nums:\n        curr_sum += num\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n\n    return max_sum", "solution_func": "def g(nums: List[int] = [-2, 1, -3, 4, -1, 2, 1, -5, 4]):\n    return (nums,)", "map_ix": [1, 0, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, target='racecar') -> bool:\n    \"\"\"\n    Check if the given string can be rearranged to form a palindrome.\n\n    Sample input:\n    string = \"racecar\"\n\n    Sample output:\n    True\n\n    Explanation: The string \"racecar\" can be rearranged to form a palindrome.\n    \"\"\"\n    counter = {}\n    for char in string:\n        if char in counter:\n            counter[char] += 1\n        else:\n            counter[char] = 1\n    \n    odd_count = 0\n    for count in counter.values():\n        if count % 2 != 0:\n            odd_count += 1\n    \n    return odd_count <= 1\n\ndef g() -> str:\n    return \"racecar\"\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 332, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, target='racecar') -> bool:\n    \"\"\"\n    Check if the given string can be rearranged to form a palindrome.\n\n    Sample input:\n    string = \"racecar\"\n\n    Sample output:\n    True\n\n    Explanation: The string \"racecar\" can be rearranged to form a palindrome.\n    \"\"\"\n    counter = {}\n    for char in string:\n        if char in counter:\n            counter[char] += 1\n        else:\n            counter[char] = 1\n    \n    odd_count = 0\n    for count in counter.values():\n        if count % 2 != 0:\n            odd_count += 1\n    \n    return odd_count <= 1", "solution_func": "def g() -> str:\n    return \"racecar\"", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=7) -> bool:\n    \"\"\"\n    Check if the given matrix contains the target value.\n\n    Sample input:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample output:\n    True\n\n    Explanation: The matrix contains the value 7.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    \n    return False\n\ndef g() -> List[List[int]]:\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 332, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=7) -> bool:\n    \"\"\"\n    Check if the given matrix contains the target value.\n\n    Sample input:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample output:\n    True\n\n    Explanation: The matrix contains the value 7.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    \n    return False", "solution_func": "def g() -> List[List[int]]:\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"\n    Check if the given list contains two numbers that add up to the target value.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample output:\n    True\n\n    Explanation: The numbers 2 and 3 add up to the target value of 5.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    \n    return False\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 332, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"\n    Check if the given list contains two numbers that add up to the target value.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample output:\n    True\n\n    Explanation: The numbers 2 and 3 add up to the target value of 5.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    \n    return False", "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a symmetric matrix of the given size\n    \"\"\"\n    symmetric_matrix = [[0 for _ in range(size)] for _ in range(size)]\n    for i in range(size):\n        for j in range(size):\n            symmetric_matrix[i][j] = i + j\n    return symmetric_matrix\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 332, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a symmetric matrix of the given size\n    \"\"\"\n    symmetric_matrix = [[0 for _ in range(size)] for _ in range(size)]\n    for i in range(size):\n        for j in range(size):\n            symmetric_matrix[i][j] = i + j\n    return symmetric_matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Given a string, determine if it is a pangram.\n\n    Sample Input:\n    string = \"The quick brown fox jumps over the lazy dog.\"\n\n    Sample Output:\n    True\n    \"\"\"\n    alphabet = set('abcdefghijklmnopqrstuvwxyz')\n    return set(string.lower()) >= alphabet\n\ndef g(string: str):\n    return string\n\nassert f(g(\"The quick brown fox jumps over the lazy dog.\"))\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 332, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Given a string, determine if it is a pangram.\n\n    Sample Input:\n    string = \"The quick brown fox jumps over the lazy dog.\"\n\n    Sample Output:\n    True\n    \"\"\"\n    alphabet = set('abcdefghijklmnopqrstuvwxyz')\n    return set(string.lower()) >= alphabet", "solution_func": "def g(string: str):\n    return string", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target='python', reverse=True) -> bool:\n    \"\"\"Check if a given string contains the target string\"\"\"\n    return (target in s) == reverse\n\ndef g(target='python', reverse=True):\n    return target\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 332, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='python', reverse=True) -> bool:\n    \"\"\"Check if a given string contains the target string\"\"\"\n    return (target in s) == reverse", "solution_func": "def g(target='python', reverse=True):\n    return target", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a diagonal matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a diagonal matrix of the given size\n    \"\"\"\n    return [[1 if j == i else 0 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 332, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a diagonal matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a diagonal matrix of the given size\n    \"\"\"\n    return [[1 if j == i else 0 for j in range(size)] for i in range(size)]", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is an identity matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if i == j:\n                if matrix[i][j] != 1:\n                    return False\n            else:\n                if matrix[i][j] != 0:\n                    return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate an identity matrix of the given size\n    \"\"\"\n    return [[1 if j == i else 0 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 332, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is an identity matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if i == j:\n                if matrix[i][j] != 1:\n                    return False\n            else:\n                if matrix[i][j] != 0:\n                    return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate an identity matrix of the given size\n    \"\"\"\n    return [[1 if j == i else 0 for j in range(size)] for i in range(size)]", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size\n    \"\"\"\n    return [[1 if j <= i else 0 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 332, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size\n    \"\"\"\n    return [[1 if j <= i else 0 for j in range(size)] for i in range(size)]", "map_ix": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains only even numbers.\n    \"\"\"\n\n    return all(num % 2 == 0 for num in nums)\n\ndef g():\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\nassert f(g()) == True\n\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 332, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains only even numbers.\n    \"\"\"\n\n    return all(num % 2 == 0 for num in nums)", "solution_func": "def g():\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value, \n    considering only positive numbers in the subarray.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is.\n    \"\"\"\n    return nums\n\nassert f(g([3, 4, -7, 2, 1, 3, 1]), 4)\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 333, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value, \n    considering only positive numbers in the subarray.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False", "solution_func": "def g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is.\n    \"\"\"\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers and an integer n, check if there exists a subsequence of length n \n    whose sum is divisible by n.\n    \"\"\"\n    def find_subsequence(start, curr_sum, curr_length):\n        if curr_length == n and curr_sum % n == 0:\n            return True\n        if curr_length > n or start == len(nums):\n            return False\n        if find_subsequence(start + 1, curr_sum + nums[start], curr_length + 1):\n            return True\n        if find_subsequence(start + 1, curr_sum, curr_length):\n            return True\n        return False\n\n    return find_subsequence(0, 0, 0)\n\ndef g(n: int, nums: List[int]):\n    \"\"\"\n    This solution returns the input arguments as is.\n    \"\"\"\n    return n, nums\n\nassert f(*g(3, [1, 2, 3, 4, 5, 6, 7, 8, 9])) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 333, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers and an integer n, check if there exists a subsequence of length n \n    whose sum is divisible by n.\n    \"\"\"\n    def find_subsequence(start, curr_sum, curr_length):\n        if curr_length == n and curr_sum % n == 0:\n            return True\n        if curr_length > n or start == len(nums):\n            return False\n        if find_subsequence(start + 1, curr_sum + nums[start], curr_length + 1):\n            return True\n        if find_subsequence(start + 1, curr_sum, curr_length):\n            return True\n        return False\n\n    return find_subsequence(0, 0, 0)", "solution_func": "def g(n: int, nums: List[int]):\n    \"\"\"\n    This solution returns the input arguments as is.\n    \"\"\"\n    return n, nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers and an integer n, check if there exists a subsequence of length n \n    whose product is divisible by n.\n    \"\"\"\n    def find_subsequence(start, curr_product, curr_length):\n        if curr_length == n and curr_product % n == 0:\n            return True\n        if curr_length > n or start == len(nums):\n            return False\n        if find_subsequence(start + 1, curr_product * nums[start], curr_length + 1):\n            return True\n        if find_subsequence(start + 1, curr_product, curr_length):\n            return True\n        return False\n\n    return find_subsequence(0, 1, 0)\n\ndef g(n: int, nums: List[int]):\n    \"\"\"\n    This solution returns the input arguments as is.\n    \"\"\"\n    return n, nums\n\nassert f(*g(3, [1, 2, 3, 4, 5, 6, 7, 8, 9])) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 333, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers and an integer n, check if there exists a subsequence of length n \n    whose product is divisible by n.\n    \"\"\"\n    def find_subsequence(start, curr_product, curr_length):\n        if curr_length == n and curr_product % n == 0:\n            return True\n        if curr_length > n or start == len(nums):\n            return False\n        if find_subsequence(start + 1, curr_product * nums[start], curr_length + 1):\n            return True\n        if find_subsequence(start + 1, curr_product, curr_length):\n            return True\n        return False\n\n    return find_subsequence(0, 1, 0)", "solution_func": "def g(n: int, nums: List[int]):\n    \"\"\"\n    This solution returns the input arguments as is.\n    \"\"\"\n    return n, nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(seq: List[int], n=5514, length=4310) -> bool:\n    \"\"\"Find a sequence of 1's and 2's of a given length that that adds up to n\"\"\"\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)\ndef g(n = 5514, length = 4310):\n    return [2] * (n - length) + [1] * (2 * length - n)\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 333, "target_skills": null, "problem_func": "from typing import*\ndef f(seq: List[int], n=5514, length=4310) -> bool:\n    \"\"\"Find a sequence of 1's and 2's of a given length that that adds up to n\"\"\"\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)", "solution_func": "def g(n = 5514, length = 4310):\n    return [2] * (n - length) + [1] * (2 * length - n)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(seq: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a subsequence of the given sequence that adds up to the target sum.\"\"\"\n    n = len(seq)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if seq[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - seq[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target_sum]\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 333, "target_skills": null, "problem_func": "from typing import*\ndef f(seq: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a subsequence of the given sequence that adds up to the target sum.\"\"\"\n    n = len(seq)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if seq[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - seq[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target_sum]", "solution_func": "def g(target_sum=10):\n    return [1, 2, 3, 4, 5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(seq: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray of size k with consecutive elements in the given sequence.\"\"\"\n    n = len(seq)\n    visited = set()\n    for i in range(n - k + 1):\n        if tuple(seq[i:i+k]) in visited:\n            return True\n        visited.add(tuple(seq[i:i+k]))\n    return False\ndef g(k=3):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n", "emb": null, "idx_generation": 333, "target_skills": null, "problem_func": "from typing import*\ndef f(seq: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray of size k with consecutive elements in the given sequence.\"\"\"\n    n = len(seq)\n    visited = set()\n    for i in range(n - k + 1):\n        if tuple(seq[i:i+k]) in visited:\n            return True\n        visited.add(tuple(seq[i:i+k]))\n    return False", "solution_func": "def g(k=3):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the list contains any duplicate numbers.\"\"\"\n    return len(numbers) != len(set(numbers))\n\ndef g(numbers: List[int] = [1, 2, 3, 4, 5]):\n    return numbers\n\nassert f(g()) == False\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 333, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the list contains any duplicate numbers.\"\"\"\n    return len(numbers) != len(set(numbers))", "solution_func": "def g(numbers: List[int] = [1, 2, 3, 4, 5]):\n    return numbers", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g(nums: List[int] = [1, 2, 3, 2, 1]):\n    return nums\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 333, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list is a palindrome.\"\"\"\n    return nums == nums[::-1]", "solution_func": "def g(nums: List[int] = [1, 2, 3, 2, 1]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains any negative numbers.\"\"\"\n    return any(num < 0 for num in nums)\n\ndef g(nums: List[int] = [1, -2, 3, -4, 5]):\n    return nums\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 333, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains any negative numbers.\"\"\"\n    return any(num < 0 for num in nums)", "solution_func": "def g(nums: List[int] = [1, -2, 3, -4, 5]):\n    return nums", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to exactly k.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == k:\n            return True\n        if prefix_sum - k in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False\n\ndef g(nums: List[int], k: int):\n    \"\"\"\n    This solution returns the input list and target value as is.\n    \"\"\"\n    return (nums, k)\n\nnums = [2, 4, 6, 8, 10]\nk = 18\n\nassert f(*g(nums, k)) == True\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 333, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to exactly k.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == k:\n            return True\n        if prefix_sum - k in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False", "solution_func": "def g(nums: List[int], k: int):\n    \"\"\"\n    This solution returns the input list and target value as is.\n    \"\"\"\n    return (nums, k)\n\nnums = [2, 4, 6, 8, 10]\nk = 18", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a subsequence in the given list such that the sum of its elements is equal to the maximum element in the list.\n    \"\"\"\n    max_num = max(nums)\n    if max_num in nums:\n        return True\n    return False\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is.\n    \"\"\"\n    return nums\n\nassert f(g([1, 2, 3, 4, 5, 6])) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 334, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a subsequence in the given list such that the sum of its elements is equal to the maximum element in the list.\n    \"\"\"\n    max_num = max(nums)\n    if max_num in nums:\n        return True\n    return False", "solution_func": "def g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is.\n    \"\"\"\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n: int) -> bool:\n    \"\"\"\n    Check if the given list contains a subsequence of length n that is a palindrome.\n    \"\"\"\n    for i in range(len(nums) - n + 1):\n        subsequence = nums[i:i+n]\n        if subsequence == subsequence[::-1]:\n            return True\n    return False\n\ndef g(nums: List[int], n: int):\n    \"\"\"\n    This solution returns the input list and n as is.\n    \"\"\"\n    return nums, n\n\nassert f(g([1, 2, 3, 4, 5], 3)) == True\n\n", "emb": null, "idx_generation": 334, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n: int) -> bool:\n    \"\"\"\n    Check if the given list contains a subsequence of length n that is a palindrome.\n    \"\"\"\n    for i in range(len(nums) - n + 1):\n        subsequence = nums[i:i+n]\n        if subsequence == subsequence[::-1]:\n            return True\n    return False", "solution_func": "def g(nums: List[int], n: int):\n    \"\"\"\n    This solution returns the input list and n as is.\n    \"\"\"\n    return nums, n", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a subsequence in the given list such that the sum of its elements is divisible by 3.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            subsequence = nums[i:j+1]\n            if sum(subsequence) % 3 == 0:\n                return True\n    return False\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is.\n    \"\"\"\n    return nums\n\nassert f(g([1, 2, 3, 4, 5, 6])) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 334, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a subsequence in the given list such that the sum of its elements is divisible by 3.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            subsequence = nums[i:j+1]\n            if sum(subsequence) % 3 == 0:\n                return True\n    return False", "solution_func": "def g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is.\n    \"\"\"\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(prices: List[int], k: int = 2) -> bool:\n    \"\"\"\n    Given a list of prices of products and a budget k, determine if it is possible to buy exactly k products\n    without exceeding the budget. If it is possible, return True. Otherwise, return False.\n    \"\"\"\n    prices.sort()\n    count = 0\n    total = 0\n    for price in prices:\n        if total + price <= k:\n            count += 1\n            total += price\n    return count == k\n\ndef g(prices: List[int] = [10, 20, 30, 40, 50], k: int = 2):\n    return prices\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 334, "target_skills": null, "problem_func": "from typing import*\ndef f(prices: List[int], k: int = 2) -> bool:\n    \"\"\"\n    Given a list of prices of products and a budget k, determine if it is possible to buy exactly k products\n    without exceeding the budget. If it is possible, return True. Otherwise, return False.\n    \"\"\"\n    prices.sort()\n    count = 0\n    total = 0\n    for price in prices:\n        if total + price <= k:\n            count += 1\n            total += price\n    return count == k", "solution_func": "def g(prices: List[int] = [10, 20, 30, 40, 50], k: int = 2):\n    return prices", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find if there exists a subarray whose sum equals the target number.\n    If such a subarray exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(nums)):\n        total = nums[i]\n        if total == target:\n            return True\n        for j in range(i + 1, len(nums)):\n            total += nums[j]\n            if total == target:\n                return True\n    return False\n\ndef g(nums: List[int] = [4, 2, -3, 1, 6], target: int = 0):\n    return nums\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 334, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find if there exists a subarray whose sum equals the target number.\n    If such a subarray exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(nums)):\n        total = nums[i]\n        if total == target:\n            return True\n        for j in range(i + 1, len(nums)):\n            total += nums[j]\n            if total == target:\n                return True\n    return False", "solution_func": "def g(nums: List[int] = [4, 2, -3, 1, 6], target: int = 0):\n    return nums", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, determine if it is a palindrome. Return True if it is a palindrome, otherwise return False.\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s: str = \"racecar\"):\n    return s\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 334, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, determine if it is a palindrome. Return True if it is a palindrome, otherwise return False.\n    \"\"\"\n    return s == s[::-1]", "solution_func": "def g(s: str = \"racecar\"):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if a given number is a prime number.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(n=17):\n    \"\"\"\n    This solution checks if the given number is prime by iterating from 2 to the square root of the number and checking for divisibility.\n    \"\"\"\n    return n\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 334, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if a given number is a prime number.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "solution_func": "def g(n=17):\n    \"\"\"\n    This solution checks if the given number is prime by iterating from 2 to the square root of the number and checking for divisibility.\n    \"\"\"\n    return n", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a given string is a palindrome.\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s=\"racecar\"):\n    \"\"\"\n    This solution checks if the given string is equal to its reverse.\n    \"\"\"\n    return s\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 334, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a given string is a palindrome.\n    \"\"\"\n    return s == s[::-1]", "solution_func": "def g(s=\"racecar\"):\n    \"\"\"\n    This solution checks if the given string is equal to its reverse.\n    \"\"\"\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is sorted in non-decreasing order.\n    \"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    \"\"\"\n    This solution checks if each number in the list is less than or equal to the next number.\n    \"\"\"\n    return nums\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 334, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is sorted in non-decreasing order.\n    \"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))", "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    \"\"\"\n    This solution checks if each number in the list is less than or equal to the next number.\n    \"\"\"\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a number in the list that is greater than the target value.\n    \"\"\"\n    return any(num > target for num in nums)\n\ndef g(target=0):\n    return list(range(target, target+10))\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 334, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a number in the list that is greater than the target value.\n    \"\"\"\n    return any(num > target for num in nums)", "solution_func": "def g(target=0):\n    return list(range(target, target+10))", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target number, find and return two numbers from the list that multiply to the target.\n\n    It is guaranteed that there is exactly one solution.\n    \"\"\"\n    nums = {}\n    for i in range(len(arr)):\n        complement = target / arr[i]\n        if complement in nums:\n            return [nums[complement], i]\n        nums[arr[i]] = i\n    return []\ndef g():\n    arr = [2, 4, 7, 11, 15]\n    target = 22\n    return (arr, target)\nassert f(*g()) == [0, 1]\n", "emb": null, "idx_generation": 335, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target number, find and return two numbers from the list that multiply to the target.\n\n    It is guaranteed that there is exactly one solution.\n    \"\"\"\n    nums = {}\n    for i in range(len(arr)):\n        complement = target / arr[i]\n        if complement in nums:\n            return [nums[complement], i]\n        nums[arr[i]] = i\n    return []", "solution_func": "def g():\n    arr = [2, 4, 7, 11, 15]\n    target = 22\n    return (arr, target)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target number, find and return two numbers from the list that subtract to the target.\n\n    It is guaranteed that there is exactly one solution.\n    \"\"\"\n    nums = {}\n    for i in range(len(arr)):\n        complement = target + arr[i]\n        if complement in nums:\n            return [nums[complement], i]\n        nums[arr[i]] = i\n    return []\ndef g():\n    arr = [2, 4, 7, 11, 15]\n    target = 9\n    return (arr, target)\nassert f(*g()) == [0, 2]\n", "emb": null, "idx_generation": 335, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target number, find and return two numbers from the list that subtract to the target.\n\n    It is guaranteed that there is exactly one solution.\n    \"\"\"\n    nums = {}\n    for i in range(len(arr)):\n        complement = target + arr[i]\n        if complement in nums:\n            return [nums[complement], i]\n        nums[arr[i]] = i\n    return []", "solution_func": "def g():\n    arr = [2, 4, 7, 11, 15]\n    target = 9\n    return (arr, target)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target number, find and return two numbers from the list that divide the target.\n\n    It is guaranteed that there is exactly one solution.\n    \"\"\"\n    nums = {}\n    for i in range(len(arr)):\n        complement = target * arr[i]\n        if complement in nums:\n            return [nums[complement], i]\n        nums[arr[i]] = i\n    return []\ndef g():\n    arr = [2, 4, 7, 11, 15]\n    target = 8\n    return (arr, target)\nassert f(*g()) == [0, 1]\n", "emb": null, "idx_generation": 335, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target number, find and return two numbers from the list that divide the target.\n\n    It is guaranteed that there is exactly one solution.\n    \"\"\"\n    nums = {}\n    for i in range(len(arr)):\n        complement = target * arr[i]\n        if complement in nums:\n            return [nums[complement], i]\n        nums[arr[i]] = i\n    return []", "solution_func": "def g():\n    arr = [2, 4, 7, 11, 15]\n    target = 8\n    return (arr, target)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport re\n\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if the given string is a valid email address.\n    \"\"\"\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return bool(re.match(pattern, string))\n\ndef g():\n    \"\"\"\n    This solution checks if the given string matches the email pattern.\n    \"\"\"\n    return \"example@example.com\"\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 335, "target_skills": null, "problem_func": "from typing import*\nimport re\n\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if the given string is a valid email address.\n    \"\"\"\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return bool(re.match(pattern, string))", "solution_func": "def g():\n    \"\"\"\n    This solution checks if the given string matches the email pattern.\n    \"\"\"\n    return \"example@example.com\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(numbers: List[int]) -> int:\n    \"\"\"\n    Find the second smallest number in the given list of numbers.\n    \"\"\"\n    numbers = list(set(numbers))\n    numbers.sort()\n    return numbers[1]\n\ndef g():\n    \"\"\"\n    Generate a list of 5 random numbers.\n    \"\"\"\n    return random.sample(range(1, 10), 5)\n\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 335, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(numbers: List[int]) -> int:\n    \"\"\"\n    Find the second smallest number in the given list of numbers.\n    \"\"\"\n    numbers = list(set(numbers))\n    numbers.sort()\n    return numbers[1]", "solution_func": "def g():\n    \"\"\"\n    Generate a list of 5 random numbers.\n    \"\"\"\n    return random.sample(range(1, 10), 5)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a given string is a pangram.\n    \"\"\"\n    alphabet = set('abcdefghijklmnopqrstuvwxyz')\n    return alphabet.issubset(set(s.lower()))\n\ndef g():\n    \"\"\"\n    This solution checks if the given string contains all the letters of the alphabet.\n    \"\"\"\n    return \"The quick brown fox jumps over the lazy dog\"\n\nassert f(g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 335, "target_skills": null, "problem_func": "from typing import*\n\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a given string is a pangram.\n    \"\"\"\n    alphabet = set('abcdefghijklmnopqrstuvwxyz')\n    return alphabet.issubset(set(s.lower()))", "solution_func": "def g():\n    \"\"\"\n    This solution checks if the given string contains all the letters of the alphabet.\n    \"\"\"\n    return \"The quick brown fox jumps over the lazy dog\"", "map_ix": [1, 1, 0, 1, 0, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if the sum of each combination is divisible by the target_sum\n    for combo in combinations:\n        if sum(combo) % target_sum == 0:\n            return True\n\n    return False\n\ndef g(k=3, target_sum=5):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), k=3, target_sum=5) == True\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 335, "target_skills": null, "problem_func": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if the sum of each combination is divisible by the target_sum\n    for combo in combinations:\n        if sum(combo) % target_sum == 0:\n            return True\n\n    return False", "solution_func": "def g(k=3, target_sum=5):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if the maximum element of each combination is equal to the target_sum\n    for combo in combinations:\n        if max(combo) == target_sum:\n            return True\n\n    return False\n\ndef g(k=2, target_sum=8):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), k=2, target_sum=8) == True\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 335, "target_skills": null, "problem_func": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if the maximum element of each combination is equal to the target_sum\n    for combo in combinations:\n        if max(combo) == target_sum:\n            return True\n\n    return False", "solution_func": "def g(k=2, target_sum=8):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if the product of each combination is equal to the target_sum\n    for combo in combinations:\n        product = 1\n        for num in combo:\n            product *= num\n        if product == target_sum:\n            return True\n\n    return False\n\ndef g(k=3, target_sum=24):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), k=3, target_sum=24) == True\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 335, "target_skills": null, "problem_func": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if the product of each combination is equal to the target_sum\n    for combo in combinations:\n        product = 1\n        for num in combo:\n            product *= num\n        if product == target_sum:\n            return True\n\n    return False", "solution_func": "def g(k=3, target_sum=24):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom collections import Counter\n\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a string is an anagram of a palindrome.\n    An anagram is a word or phrase formed by rearranging the letters of a different word or phrase,\n    typically using all the original letters exactly once.\n    A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward.\n    \"\"\"\n    char_count = Counter(s)\n    odd_count = 0\n    for count in char_count.values():\n        if count % 2 != 0:\n            odd_count += 1\n    return odd_count <= 1\n\ndef g(s=\"civic\"):\n    return s\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 335, "target_skills": null, "problem_func": "from typing import*\nfrom collections import Counter\n\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a string is an anagram of a palindrome.\n    An anagram is a word or phrase formed by rearranging the letters of a different word or phrase,\n    typically using all the original letters exactly once.\n    A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward.\n    \"\"\"\n    char_count = Counter(s)\n    odd_count = 0\n    for count in char_count.values():\n        if count % 2 != 0:\n            odd_count += 1\n    return odd_count <= 1", "solution_func": "def g(s=\"civic\"):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\nimport numpy as np\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix.\"\"\"\n    n = len(matrix)\n\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n\n    return True\n\ndef g(n=3):\n    \"\"\"Generate a symmetric matrix of size n x n.\"\"\"\n    matrix = np.random.randint(0, 10, size=(n, n)).tolist()\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            matrix[j][i] = matrix[i][j]\n    \n    return matrix\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 336, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport numpy as np\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix.\"\"\"\n    n = len(matrix)\n\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n\n    return True", "solution_func": "def g(n=3):\n    \"\"\"Generate a symmetric matrix of size n x n.\"\"\"\n    matrix = np.random.randint(0, 10, size=(n, n)).tolist()\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            matrix[j][i] = matrix[i][j]\n    \n    return matrix", "map_ix": [1, 0, 1, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\nimport numpy as np\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a Toeplitz matrix.\"\"\"\n    n = len(matrix)\n    \n    for i in range(n-1):\n        for j in range(n-1):\n            if matrix[i][j] != matrix[i+1][j+1]:\n                return False\n    \n    return True\n\ndef g(n=3):\n    \"\"\"Generate a Toeplitz matrix of size n x n.\"\"\"\n    matrix = np.random.randint(0, 10, size=(n, n)).tolist()\n    \n    for i in range(n-1):\n        for j in range(n-1):\n            matrix[i+1][j+1] = matrix[i][j]\n    \n    return matrix\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 336, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport numpy as np\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a Toeplitz matrix.\"\"\"\n    n = len(matrix)\n    \n    for i in range(n-1):\n        for j in range(n-1):\n            if matrix[i][j] != matrix[i+1][j+1]:\n                return False\n    \n    return True", "solution_func": "def g(n=3):\n    \"\"\"Generate a Toeplitz matrix of size n x n.\"\"\"\n    matrix = np.random.randint(0, 10, size=(n, n)).tolist()\n    \n    for i in range(n-1):\n        for j in range(n-1):\n            matrix[i+1][j+1] = matrix[i][j]\n    \n    return matrix", "map_ix": [1, 0, 1, 0, 0, 1, 1, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport numpy as np\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is an identity matrix.\"\"\"\n    n = len(matrix)\n    \n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                if matrix[i][j] != 1:\n                    return False\n            else:\n                if matrix[i][j] != 0:\n                    return False\n    \n    return True\n\ndef g(n=3):\n    \"\"\"Generate an identity matrix of size n x n.\"\"\"\n    matrix = np.zeros((n, n), dtype=int)\n    \n    for i in range(n):\n        matrix[i][i] = 1\n    \n    return matrix.tolist()\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 336, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is an identity matrix.\"\"\"\n    n = len(matrix)\n    \n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                if matrix[i][j] != 1:\n                    return False\n            else:\n                if matrix[i][j] != 0:\n                    return False\n    \n    return True", "solution_func": "def g(n=3):\n    \"\"\"Generate an identity matrix of size n x n.\"\"\"\n    matrix = np.zeros((n, n), dtype=int)\n    \n    for i in range(n):\n        matrix[i][i] = 1\n    \n    return matrix.tolist()", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a given string is a pangram.\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    return all(char in s.lower() for char in alphabet)\n\ndef g(s=\"The quick brown fox jumps over the lazy dog\"):\n    \"\"\"\n    This solution checks if the given string contains all the letters of the alphabet.\n    \"\"\"\n    return s\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 336, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a given string is a pangram.\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    return all(char in s.lower() for char in alphabet)", "solution_func": "def g(s=\"The quick brown fox jumps over the lazy dog\"):\n    \"\"\"\n    This solution checks if the given string contains all the letters of the alphabet.\n    \"\"\"\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in non-decreasing order.\"\"\"\n\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n\ndef g():\n    return [1, 2, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 336, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in non-decreasing order.\"\"\"\n\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))", "solution_func": "def g():\n    return [1, 2, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a subarray that has a sum equal to a target value.\n\n    A subarray is a contiguous part of an array.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample output:\n    True\n\n    Explanation: The subarray [2, 3] has a sum of 5, which is equal to the target value.\n    \"\"\"\n    target = 5\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            subarray = nums[i:j]\n            if sum(subarray) == target:\n                return True\n    \n    return False\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g())", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 336, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a subarray that has a sum equal to a target value.\n\n    A subarray is a contiguous part of an array.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample output:\n    True\n\n    Explanation: The subarray [2, 3] has a sum of 5, which is equal to the target value.\n    \"\"\"\n    target = 5\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            subarray = nums[i:j]\n            if sum(subarray) == target:\n                return True\n    \n    return False", "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, check if there exists a pair of integers in the list whose sum is equal to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=7):\n    return (nums, target)\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 336, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, check if there exists a pair of integers in the list whose sum is equal to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=7):\n    return (nums, target)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"\n    Given two strings s1 and s2, check if s2 is a rotation of s1.\n\n    Sample Input:\n    s1 = \"abcd\"\n    s2 = \"cdab\"\n\n    Sample Output:\n    True\n    \"\"\"\n    if len(s1) != len(s2):\n        return False\n    return s2 in s1 + s1\n\ndef g(s1=\"abcd\", s2=\"cdab\"):\n    return (s1, s2)\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 336, "target_skills": null, "problem_func": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"\n    Given two strings s1 and s2, check if s2 is a rotation of s1.\n\n    Sample Input:\n    s1 = \"abcd\"\n    s2 = \"cdab\"\n\n    Sample Output:\n    True\n    \"\"\"\n    if len(s1) != len(s2):\n        return False\n    return s2 in s1 + s1", "solution_func": "def g(s1=\"abcd\", s2=\"cdab\"):\n    return (s1, s2)", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it is a permutation of the numbers from 1 to n, where n is the length of the list.\n\n    Sample Input:\n    arr = [1, 3, 2, 5, 4]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    counter = [0] * (n + 1)\n    for num in arr:\n        if num < 1 or num > n or counter[num] > 0:\n            return False\n        counter[num] += 1\n    return True\n\ndef g(arr=[1, 3, 2, 5, 4]):\n    return arr\n\nassert f(g()) == True\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 336, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it is a permutation of the numbers from 1 to n, where n is the length of the list.\n\n    Sample Input:\n    arr = [1, 3, 2, 5, 4]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    counter = [0] * (n + 1)\n    for num in arr:\n        if num < 1 or num > n or counter[num] > 0:\n            return False\n        counter[num] += 1\n    return True", "solution_func": "def g(arr=[1, 3, 2, 5, 4]):\n    return arr", "map_ix": [0, 1, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list where each element is squared.\n    \"\"\"\n    return [num ** 2 for num in arr]\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr\n\nassert f(g()) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 336, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list where each element is squared.\n    \"\"\"\n    return [num ** 2 for num in arr]", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are exactly k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if the sum of each combination is equal to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False\n\ndef g(k=3, target_sum=5):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), k=3, target_sum=5) == True\n", "emb": null, "idx_generation": 337, "target_skills": null, "problem_func": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are exactly k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if the sum of each combination is equal to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False", "solution_func": "def g(k=3, target_sum=5):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are any k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if there exists any combination whose sum is equal to the target_sum\n    return any(sum(combo) == target_sum for combo in combinations)\n\ndef g(k=3, target_sum=5):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), k=3, target_sum=5) == True\n", "emb": null, "idx_generation": 337, "target_skills": null, "problem_func": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are any k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if there exists any combination whose sum is equal to the target_sum\n    return any(sum(combo) == target_sum for combo in combinations)", "solution_func": "def g(k=3, target_sum=5):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> List[List[int]]:\n    \"\"\"\n    Find all combinations of k numbers from the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Filter the combinations whose sum is equal to the target_sum\n    valid_combinations = [combo for combo in combinations if sum(combo) == target_sum]\n\n    return valid_combinations\n\ndef g(k=3, target_sum=5):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), k=3, target_sum=5) == [(1, 2, 2), (1, 3, 1), (2, 1, 2), (2, 2, 1), (3, 1, 1)]\n", "emb": null, "idx_generation": 337, "target_skills": null, "problem_func": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> List[List[int]]:\n    \"\"\"\n    Find all combinations of k numbers from the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Filter the combinations whose sum is equal to the target_sum\n    valid_combinations = [combo for combo in combinations if sum(combo) == target_sum]\n\n    return valid_combinations", "solution_func": "def g(k=3, target_sum=5):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> int:\n    \"\"\"\n    Given a list of lists of integers, find the maximum sum of a subarray within each list and return the sum of the maximum subarray sums.\n\n    Example:\n    nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    The maximum subarray sums are [6, 15, 24].\n    The sum of the maximum subarray sums is 6 + 15 + 24 = 45.\n\n    Therefore, f(nums) returns 45.\n    \"\"\"\n    result = 0\n    for sublist in nums:\n        max_sum = float('-inf')\n        curr_sum = 0\n        for num in sublist:\n            curr_sum += num\n            max_sum = max(max_sum, curr_sum)\n            if curr_sum < 0:\n                curr_sum = 0\n        result += max_sum\n    return result\n\ndef g(nums: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums\n\nassert f(g()) == 45\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 337, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> int:\n    \"\"\"\n    Given a list of lists of integers, find the maximum sum of a subarray within each list and return the sum of the maximum subarray sums.\n\n    Example:\n    nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    The maximum subarray sums are [6, 15, 24].\n    The sum of the maximum subarray sums is 6 + 15 + 24 = 45.\n\n    Therefore, f(nums) returns 45.\n    \"\"\"\n    result = 0\n    for sublist in nums:\n        max_sum = float('-inf')\n        curr_sum = 0\n        for num in sublist:\n            curr_sum += num\n            max_sum = max(max_sum, curr_sum)\n            if curr_sum < 0:\n                curr_sum = 0\n        result += max_sum\n    return result", "solution_func": "def g(nums: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums", "map_ix": [1, 1, 0, 1, 0, 0, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the longest subarray with an equal number of even and odd elements.\n\n    Example:\n    nums = [2, 3, 4, 5, 6, 7, 8, 9]\n    The longest subarray with an equal number of even and odd elements is [4, 5, 6, 7, 8, 9].\n\n    Therefore, f(nums) returns 6.\n    \"\"\"\n    count = 0\n    max_length = 0\n    diff_counts = {0: -1}\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            count += 1\n        else:\n            count -= 1\n        if count in diff_counts:\n            max_length = max(max_length, i - diff_counts[count])\n        else:\n            diff_counts[count] = i\n    return max_length\n\ndef g(nums: List[int] = [2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g()) == 6\n", "emb": null, "idx_generation": 337, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the longest subarray with an equal number of even and odd elements.\n\n    Example:\n    nums = [2, 3, 4, 5, 6, 7, 8, 9]\n    The longest subarray with an equal number of even and odd elements is [4, 5, 6, 7, 8, 9].\n\n    Therefore, f(nums) returns 6.\n    \"\"\"\n    count = 0\n    max_length = 0\n    diff_counts = {0: -1}\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            count += 1\n        else:\n            count -= 1\n        if count in diff_counts:\n            max_length = max(max_length, i - diff_counts[count])\n        else:\n            diff_counts[count] = i\n    return max_length", "solution_func": "def g(nums: List[int] = [2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n: int = 2) -> str:\n    \"\"\"\n    Given a string and an integer n, rotate the string to the right by n positions.\n\n    Example:\n    s = \"python\"\n    n = 3\n    Rotating the string to the right by 3 positions, we get \"honpyt\".\n\n    Therefore, f(s, n) returns \"honpyt\".\n    \"\"\"\n    length = len(s)\n    n = n % length\n    return s[length - n:] + s[:length - n]\n\ndef g(s: str = \"python\", n: int = 3):\n    return (s, n)\n\nassert f(*g()) == \"honpyt\"\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 337, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int = 2) -> str:\n    \"\"\"\n    Given a string and an integer n, rotate the string to the right by n positions.\n\n    Example:\n    s = \"python\"\n    n = 3\n    Rotating the string to the right by 3 positions, we get \"honpyt\".\n\n    Therefore, f(s, n) returns \"honpyt\".\n    \"\"\"\n    length = len(s)\n    n = n % length\n    return s[length - n:] + s[:length - n]", "solution_func": "def g(s: str = \"python\", n: int = 3):\n    return (s, n)", "map_ix": [0, 0, 0, 1, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a subarray that has a product equal to a target value.\n\n    A subarray is a contiguous part of an array.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample output:\n    True\n\n    Explanation: The subarray [2, 3] has a product of 6, which is equal to the target value.\n    \"\"\"\n    target = 6\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            subarray = nums[i:j]\n            product = 1\n            for num in subarray:\n                product *= num\n            if product == target:\n                return True\n    \n    return False\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 337, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a subarray that has a product equal to a target value.\n\n    A subarray is a contiguous part of an array.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample output:\n    True\n\n    Explanation: The subarray [2, 3] has a product of 6, which is equal to the target value.\n    \"\"\"\n    target = 6\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            subarray = nums[i:j]\n            product = 1\n            for num in subarray:\n                product *= num\n            if product == target:\n                return True\n    \n    return False", "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the given list contains a subarray that has a sum equal to a target value.\n\n    A subarray is a contiguous part of an array.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    target = 10\n\n    Sample output:\n    True\n\n    Explanation: The subarray [1, 2, 3, 4] has a sum of 10, which is equal to the target value.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            subarray = nums[i:j]\n            if sum(subarray) == target:\n                return True\n    \n    return False\n\ndef g(target: int) -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g(10), 10)\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 337, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the given list contains a subarray that has a sum equal to a target value.\n\n    A subarray is a contiguous part of an array.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    target = 10\n\n    Sample output:\n    True\n\n    Explanation: The subarray [1, 2, 3, 4] has a sum of 10, which is equal to the target value.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            subarray = nums[i:j]\n            if sum(subarray) == target:\n                return True\n    \n    return False", "solution_func": "def g(target: int) -> List[int]:\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a subsequence that has a sum equal to a target value.\n\n    A subsequence is a sequence that can be derived from another sequence by deleting some or no elements\n    without changing the order of the remaining elements.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample output:\n    True\n\n    Explanation: The subsequence [3, 4] has a sum of 7, which is equal to the target value.\n    \"\"\"\n    target = 7\n    \n    for i in range(1, len(nums)+1):\n        for combination in combinations(nums, i):\n            if sum(combination) == target:\n                return True\n    \n    return False\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n", "emb": null, "idx_generation": 337, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a subsequence that has a sum equal to a target value.\n\n    A subsequence is a sequence that can be derived from another sequence by deleting some or no elements\n    without changing the order of the remaining elements.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample output:\n    True\n\n    Explanation: The subsequence [3, 4] has a sum of 7, which is equal to the target value.\n    \"\"\"\n    target = 7\n    \n    for i in range(1, len(nums)+1):\n        for combination in combinations(nums, i):\n            if sum(combination) == target:\n                return True\n    \n    return False", "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome list.\n    A palindrome list is a list that reads the same forwards and backwards.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums: List[int] = [1, 2, 3, 2, 1]):\n    return nums\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 337, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome list.\n    A palindrome list is a list that reads the same forwards and backwards.\n    \"\"\"\n    return nums == nums[::-1]", "solution_func": "def g(nums: List[int] = [1, 2, 3, 2, 1]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, check if there exists a pair of integers in the list whose product is equal to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 20\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=20):\n    return (nums, target)\n\nassert f(*g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 338, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, check if there exists a pair of integers in the list whose product is equal to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 20\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=20):\n    return (nums, target)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, check if there exists a pair of integers in the list whose difference is equal to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if abs(nums[i] - nums[j]) == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=3):\n    return (nums, target)\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 338, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, check if there exists a pair of integers in the list whose difference is equal to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if abs(nums[i] - nums[j]) == target:\n                return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=3):\n    return (nums, target)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, check if there exists a pair of integers in the list whose division result is equal to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 2\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[j] != 0 and nums[i] / nums[j] == target:\n                return True\n            elif nums[i] != 0 and nums[j] / nums[i] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=2):\n    return (nums, target)\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 338, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, check if there exists a pair of integers in the list whose division result is equal to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 2\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[j] != 0 and nums[i] / nums[j] == target:\n                return True\n            elif nums[i] != 0 and nums[j] / nums[i] == target:\n                return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=2):\n    return (nums, target)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums: List[int], target: int):\n    \"\"\"This solution returns the input list and target as is\"\"\"\n    return nums, target\n\nassert f(g([1, 2, 3, 4, 5], 9)) == True\n", "emb": null, "idx_generation": 338, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums: List[int], target: int):\n    \"\"\"This solution returns the input list and target as is\"\"\"\n    return nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, sub: str) -> bool:\n    \"\"\"Check if the given substring is present in the string\"\"\"\n    return sub in string\n\ndef g(string: str, sub: str):\n    \"\"\"This solution returns the input string and substring as is\"\"\"\n    return string, sub\n\nassert f(g(\"Hello, World!\", \"World\")) == True\n", "emb": null, "idx_generation": 338, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, sub: str) -> bool:\n    \"\"\"Check if the given substring is present in the string\"\"\"\n    return sub in string", "solution_func": "def g(string: str, sub: str):\n    \"\"\"This solution returns the input string and substring as is\"\"\"\n    return string, sub", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix: List[List[int]]):\n    \"\"\"This solution returns the input matrix as is\"\"\"\n    return matrix\n\nassert f(g([[1, 2, 3], [2, 4, 5], [3, 5, 6]])) == False\n", "emb": null, "idx_generation": 338, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g(matrix: List[List[int]]):\n    \"\"\"This solution returns the input matrix as is\"\"\"\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list that contains only the even numbers from the original list.\n    \"\"\"\n    return [num for num in nums if num % 2 == 0]\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6]):\n    return nums\n\nassert f(g()) == [2, 4, 6]\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 338, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list that contains only the even numbers from the original list.\n    \"\"\"\n    return [num for num in nums if num % 2 == 0]", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6]):\n    return nums", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix, return the sum of all the elements.\n    \"\"\"\n    return sum(sum(row) for row in matrix)\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 45\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 338, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix, return the sum of all the elements.\n    \"\"\"\n    return sum(sum(row) for row in matrix)", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [1, 1, 0, 1, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the maximum difference between any two numbers in the list.\n    \"\"\"\n    min_num = float('inf')\n    max_diff = 0\n    for num in nums:\n        min_num = min(min_num, num)\n        max_diff = max(max_diff, num - min_num)\n    return max_diff\n\ndef g(nums: List[int] = [1, 6, 2, 9, 4]):\n    return nums\n\nassert f(g()) == 8\n\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 338, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the maximum difference between any two numbers in the list.\n    \"\"\"\n    min_num = float('inf')\n    max_diff = 0\n    for num in nums:\n        min_num = min(min_num, num)\n        max_diff = max(max_diff, num - min_num)\n    return max_diff", "solution_func": "def g(nums: List[int] = [1, 6, 2, 9, 4]):\n    return nums", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport itertools\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if the sum of each combination is equal to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False\n\ndef g(k=4, target_sum=18):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), k=4, target_sum=18) == True\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 338, "target_skills": null, "problem_func": "from typing import*\nimport itertools\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if the sum of each combination is equal to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False", "solution_func": "def g(k=4, target_sum=18):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are exactly k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if the sum of each combination is equal to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False\n\ndef g(k=3, target_sum=15):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\nassert f(g(), k=3, target_sum=15) == True\n", "emb": null, "idx_generation": 339, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are exactly k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if the sum of each combination is equal to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False", "solution_func": "def g(k=3, target_sum=15):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to a target sum greater than or equal to target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if the sum of each combination is greater than or equal to the target_sum\n    for combo in combinations:\n        if sum(combo) >= target_sum:\n            return True\n\n    return False\n\ndef g(k=5, target_sum=30):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n\nassert f(g(), k=5, target_sum=30) == True\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 339, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to a target sum greater than or equal to target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if the sum of each combination is greater than or equal to the target_sum\n    for combo in combinations:\n        if sum(combo) >= target_sum:\n            return True\n\n    return False", "solution_func": "def g(k=5, target_sum=30):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to a target sum less than or equal to target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if the sum of each combination is less than or equal to the target_sum\n    for combo in combinations:\n        if sum(combo) <= target_sum:\n            return True\n\n    return False\n\ndef g(k=2, target_sum=8):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n\nassert f(g(), k=2, target_sum=8) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 339, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to a target sum less than or equal to target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if the sum of each combination is less than or equal to the target_sum\n    for combo in combinations:\n        if sum(combo) <= target_sum:\n            return True\n\n    return False", "solution_func": "def g(k=2, target_sum=8):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, k=2, char='a') -> bool:\n    \"\"\"Check if the character 'char' appears exactly k times in the string\"\"\"\n    return string.count(char) == k\ndef g(k = 2, char = 'a'):\n    return 'banana'\nassert f(g())\n", "emb": null, "idx_generation": 339, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, k=2, char='a') -> bool:\n    \"\"\"Check if the character 'char' appears exactly k times in the string\"\"\"\n    return string.count(char) == k", "solution_func": "def g(k = 2, char = 'a'):\n    return 'banana'", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(lst: List[int], target=10, count=2) -> bool:\n    \"\"\"Check if there are count numbers in the list that add up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(lst, count))\ndef g(target = 10, count = 2):\n    return [1, 2, 3, 4, 5]\nassert f(g()) == True\n", "emb": null, "idx_generation": 339, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(lst: List[int], target=10, count=2) -> bool:\n    \"\"\"Check if there are count numbers in the list that add up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(lst, count))", "solution_func": "def g(target = 10, count = 2):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], row=2, col=2, target=5) -> bool:\n    \"\"\"Check if the element at position (row, col) in the matrix is equal to the target\"\"\"\n    return matrix[row][col] == target\ndef g(row = 2, col = 2, target = 5):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n", "emb": null, "idx_generation": 339, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], row=2, col=2, target=5) -> bool:\n    \"\"\"Check if the element at position (row, col) in the matrix is equal to the target\"\"\"\n    return matrix[row][col] == target", "solution_func": "def g(row = 2, col = 2, target = 5):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"\n    Given a list of integers, find a combination of the numbers that adds up to the target.\n    Return True if such a combination exists, False otherwise.\n    \"\"\"\n    def helper(numbers, target, curr_sum, index):\n        if curr_sum == target:\n            return True\n        if index >= len(numbers):\n            return False\n        if curr_sum + numbers[index] <= target:\n            if helper(numbers, target, curr_sum + numbers[index], index + 1):\n                return True\n        return helper(numbers, target, curr_sum, index + 1)\n\n    return helper(numbers, target, 0, 0)\n\ndef g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n", "emb": null, "idx_generation": 339, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"\n    Given a list of integers, find a combination of the numbers that adds up to the target.\n    Return True if such a combination exists, False otherwise.\n    \"\"\"\n    def helper(numbers, target, curr_sum, index):\n        if curr_sum == target:\n            return True\n        if index >= len(numbers):\n            return False\n        if curr_sum + numbers[index] <= target:\n            if helper(numbers, target, curr_sum + numbers[index], index + 1):\n                return True\n        return helper(numbers, target, curr_sum, index + 1)\n\n    return helper(numbers, target, 0, 0)", "solution_func": "def g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, substring=\"python\") -> bool:\n    \"\"\"\n    Given a string and a substring, return True if the substring can be found in the string, False otherwise.\n    \"\"\"\n    return substring in string\n\ndef g(substring=\"python\"):\n    return \"I love programming in Python\"\n\nassert f(g())\n", "emb": null, "idx_generation": 339, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substring=\"python\") -> bool:\n    \"\"\"\n    Given a string and a substring, return True if the substring can be found in the string, False otherwise.\n    \"\"\"\n    return substring in string", "solution_func": "def g(substring=\"python\"):\n    return \"I love programming in Python\"", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers, find a pair of numbers that adds up to the target.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    num_set = set()\n    for num in numbers:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 339, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers, find a pair of numbers that adds up to the target.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    num_set = set()\n    for num in numbers:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list after sorting it.\n    \"\"\"\n    nums.sort()\n    return nums\n\nassert f(g([3, 4, -7, 2, 1, 3, 1]), 4)\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 339, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False", "solution_func": "def g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list after sorting it.\n    \"\"\"\n    nums.sort()\n    return nums", "map_ix": [1, 0, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum product of any two non-overlapping subarrays.\n\n    Example:\n    nums = [2, -1, 3, 1, -2, 4]\n    output: 24\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            product1 = 1\n            for num in nums[i:j+1]:\n                product1 *= num\n            for k in range(j+2, len(nums)):\n                product2 = 1\n                for num in nums[k:]:\n                    product2 *= num\n                max_product = max(max_product, product1 * product2)\n    return max_product\n\ndef g():\n    return [2, -1, 3, 1, -2, 4]\n\nassert f(g()) == 24\n", "emb": null, "idx_generation": 340, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum product of any two non-overlapping subarrays.\n\n    Example:\n    nums = [2, -1, 3, 1, -2, 4]\n    output: 24\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            product1 = 1\n            for num in nums[i:j+1]:\n                product1 *= num\n            for k in range(j+2, len(nums)):\n                product2 = 1\n                for num in nums[k:]:\n                    product2 *= num\n                max_product = max(max_product, product1 * product2)\n    return max_product", "solution_func": "def g():\n    return [2, -1, 3, 1, -2, 4]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers, determine if the target integer is present in any row or column.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    target = 6\n    output: True\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    for col in zip(*matrix):\n        if target in col:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix, 6\n\nassert f(*g()) == True\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 340, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers, determine if the target integer is present in any row or column.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    target = 6\n    output: True\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    for col in zip(*matrix):\n        if target in col:\n            return True\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix, 6", "map_ix": [1, 0, 1, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, substrings: List[str]) -> int:\n    \"\"\"\n    Find the length of the longest substring in s that contains all the given substrings in any order.\n\n    Example:\n    s = \"abcdeghijklmnopq\"\n    substrings = ['abc', 'def', 'ghi', 'jkl']\n    output: 14\n    \"\"\"\n    substring_set = set(substrings)\n    max_length = 0\n    current_length = 0\n    for i in range(len(s)):\n        if s[i:i+3] in substring_set:\n            current_length += 3\n            substring_set.remove(s[i:i+3])\n            if len(substring_set) == 0:\n                max_length = max(max_length, current_length)\n        else:\n            current_length = 0\n            substring_set = set(substrings)\n    return max_length\n\ndef g(substrings=['abc', 'def', 'ghi', 'jkl']):\n    return \"abcdefghijklmnopq\", substrings\n\nassert f(*g()) == 14\n", "emb": null, "idx_generation": 340, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substrings: List[str]) -> int:\n    \"\"\"\n    Find the length of the longest substring in s that contains all the given substrings in any order.\n\n    Example:\n    s = \"abcdeghijklmnopq\"\n    substrings = ['abc', 'def', 'ghi', 'jkl']\n    output: 14\n    \"\"\"\n    substring_set = set(substrings)\n    max_length = 0\n    current_length = 0\n    for i in range(len(s)):\n        if s[i:i+3] in substring_set:\n            current_length += 3\n            substring_set.remove(s[i:i+3])\n            if len(substring_set) == 0:\n                max_length = max(max_length, current_length)\n        else:\n            current_length = 0\n            substring_set = set(substrings)\n    return max_length", "solution_func": "def g(substrings=['abc', 'def', 'ghi', 'jkl']):\n    return \"abcdefghijklmnopq\", substrings", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Check if the list contains at least one duplicate element.\n    \"\"\"\n    return len(lst) != len(set(lst))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == False\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 340, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Check if the list contains at least one duplicate element.\n    \"\"\"\n    return len(lst) != len(set(lst))", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Check if the list is sorted in non-decreasing order.\n    \"\"\"\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n\ndef g():\n    return [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n\nassert f(g()) == False\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 340, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Check if the list is sorted in non-decreasing order.\n    \"\"\"\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))", "solution_func": "def g():\n    return [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Check if the list contains any prime number.\n    \"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    return any(num in primes for num in lst)\n\ndef g():\n    return [4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20]\n\nassert f(g()) == False\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 340, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Check if the list contains any prime number.\n    \"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    return any(num in primes for num in lst)", "solution_func": "def g():\n    return [4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, t: str, indices: List[int]) -> bool:\n    \"\"\"\n    Given two strings s and t, and a list of indices, determine if the characters at the given indices in s\n    can form the string t without changing their relative order.\n\n    Example:\n    s = \"programming\"\n    t = \"prg\"\n    indices = [0, 3, 7]\n    Output: True\n    \"\"\"\n    substring = ''.join(s[i] for i in indices)\n    return substring == t\n\ndef g(s: str = \"programming\", t: str = \"prg\", indices: List[int] = [0, 3, 7]):\n    return (s, t, indices)\n\nassert f(*g()) == True\n", "emb": null, "idx_generation": 340, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t: str, indices: List[int]) -> bool:\n    \"\"\"\n    Given two strings s and t, and a list of indices, determine if the characters at the given indices in s\n    can form the string t without changing their relative order.\n\n    Example:\n    s = \"programming\"\n    t = \"prg\"\n    indices = [0, 3, 7]\n    Output: True\n    \"\"\"\n    substring = ''.join(s[i] for i in indices)\n    return substring == t", "solution_func": "def g(s: str = \"programming\", t: str = \"prg\", indices: List[int] = [0, 3, 7]):\n    return (s, t, indices)", "map_ix": null}, {"fitness": -Infinity, "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"\n    Given a positive integer n and a list of integers, determine if there are exactly n integers in the list\n    that are perfect squares.\n\n    Example:\n    n = 2\n    nums = [4, 7, 9, 16, 18]\n    Output: True\n    \"\"\"\n    square_count = 0\n    for num in nums:\n        if sqrt(num).is_integer():\n            square_count += 1\n    \n    return square_count == n\n\ndef g(n: int = 2, nums: List[int] = [4, 7, 9, 16, 18]):\n    return (n, nums)\n\nassert f(*g()) == True\n", "emb": null, "idx_generation": 340, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"\n    Given a positive integer n and a list of integers, determine if there are exactly n integers in the list\n    that are perfect squares.\n\n    Example:\n    n = 2\n    nums = [4, 7, 9, 16, 18]\n    Output: True\n    \"\"\"\n    square_count = 0\n    for num in nums:\n        if sqrt(num).is_integer():\n            square_count += 1\n    \n    return square_count == n", "solution_func": "def g(n: int = 2, nums: List[int] = [4, 7, 9, 16, 18]):\n    return (n, nums)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string s, determine if it is a palindrome (reads the same forwards and backwards).\n\n    Example:\n    s = \"racecar\"\n    Output: True\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s: str = \"racecar\"):\n    return (s,)\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 340, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string s, determine if it is a palindrome (reads the same forwards and backwards).\n\n    Example:\n    s = \"racecar\"\n    Output: True\n    \"\"\"\n    return s == s[::-1]", "solution_func": "def g(s: str = \"racecar\"):\n    return (s,)", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return a list of the maximum element in each row.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Output: [3, 6, 9]\n\n    Explanation: The maximum elements in each row are [3, 6, 9].\n    \"\"\"\n    max_elements = []\n    for row in matrix:\n        max_element = max(row)\n        max_elements.append(max_element)\n    return max_elements\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [3, 6, 9]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 340, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return a list of the maximum element in each row.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Output: [3, 6, 9]\n\n    Explanation: The maximum elements in each row are [3, 6, 9].\n    \"\"\"\n    max_elements = []\n    for row in matrix:\n        max_element = max(row)\n        max_elements.append(max_element)\n    return max_elements", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find two numbers in the given list nums that sum up to the target value.\n    \"\"\"\n    result = []\n    nums_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in nums_set:\n            result.append([num, complement])\n            break\n    return result\n\ndef g(nums=[1, 2, 3, 4, 5], target=7):\n    return nums\n\nassert f(g()) == [[2, 5]]\n\n\n", "emb": null, "idx_generation": 341, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find two numbers in the given list nums that sum up to the target value.\n    \"\"\"\n    result = []\n    nums_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in nums_set:\n            result.append([num, complement])\n            break\n    return result", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=7):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Remove all duplicate numbers from the given list nums.\n    \"\"\"\n    return list(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 2, 5, 3, 6, 4, 7, 5, 8]\n\nassert f(g()) == [1, 2, 3, 4, 5, 6, 7, 8]\n\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 341, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Remove all duplicate numbers from the given list nums.\n    \"\"\"\n    return list(set(nums))", "solution_func": "def g():\n    return [1, 2, 3, 4, 2, 5, 3, 6, 4, 7, 5, 8]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist four numbers in the given list nums that sum up to the target value.\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n-3):\n        for j in range(i+1, n-2):\n            left = j + 1\n            right = n - 1\n            while left < right:\n                current_sum = nums[i] + nums[j] + nums[left] + nums[right]\n                if current_sum == target:\n                    return True\n                elif current_sum < target:\n                    left += 1\n                else:\n                    right -= 1\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=20):\n    return nums\n\nassert f(g()) == True\n\n\n", "emb": null, "idx_generation": 341, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist four numbers in the given list nums that sum up to the target value.\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n-3):\n        for j in range(i+1, n-2):\n            left = j + 1\n            right = n - 1\n            while left < right:\n                current_sum = nums[i] + nums[j] + nums[left] + nums[right]\n                if current_sum == target:\n                    return True\n                elif current_sum < target:\n                    left += 1\n                else:\n                    right -= 1\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=20):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array that add up to the target.\"\"\"\n    return any(target - num in arr for num in arr)\n\ndef g(arr=[1, 2, 3, 4, 5], target=8):\n    return arr, target\n\nassert f(*g()) == True\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 341, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array that add up to the target.\"\"\"\n    return any(target - num in arr for num in arr)", "solution_func": "def g(arr=[1, 2, 3, 4, 5], target=8):\n    return arr, target", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target_sum: int = 15) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that sums up to the target_sum.\"\"\"\n    def find_combination(start, curr_sum):\n        if curr_sum == target_sum:\n            return True\n        if curr_sum > target_sum or start == len(nums):\n            return False\n        for i in range(start, len(nums)):\n            if find_combination(i + 1, curr_sum + nums[i]):\n                return True\n        return False\n\n    return find_combination(0, 0)\n\ndef g(nums: List[int]):\n    \"\"\"This solution returns the input list as is\"\"\"\n    return nums\n\nassert f(g([2, 4, 6, 8, 10, 12, 14, 16, 18])) == False\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 341, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target_sum: int = 15) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that sums up to the target_sum.\"\"\"\n    def find_combination(start, curr_sum):\n        if curr_sum == target_sum:\n            return True\n        if curr_sum > target_sum or start == len(nums):\n            return False\n        for i in range(start, len(nums)):\n            if find_combination(i + 1, curr_sum + nums[i]):\n                return True\n        return False\n\n    return find_combination(0, 0)", "solution_func": "def g(nums: List[int]):\n    \"\"\"This solution returns the input list as is\"\"\"\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, a=-8783800228130606, b=-508993556991975) -> bool:\n    \"\"\"Check if a given number is the difference of two other numbers.\"\"\"\n    return a - x == b\n\ndef g(a=-8783800228130606, b=-508993556991975):\n    return a - b\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 341, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, a=-8783800228130606, b=-508993556991975) -> bool:\n    \"\"\"Check if a given number is the difference of two other numbers.\"\"\"\n    return a - x == b", "solution_func": "def g(a=-8783800228130606, b=-508993556991975):\n    return a - b", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=9, b=30, c=20) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])\ndef g(a = 9, b = 30, c = 20):\n    return -a + sum([b * i for i in range(c)])\nassert f(g())\n", "emb": [1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 341, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=9, b=30, c=20) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])", "solution_func": "def g(a = 9, b = 30, c = 20):\n    return -a + sum([b * i for i in range(c)])", "map_ix": [1, 0, 1, 1, 1, 0, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=5, b=10, c=15) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])\ndef g(a = 5, b = 10, c = 15):\n    return -a + sum([b * i for i in range(c)])\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 341, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=5, b=10, c=15) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])", "solution_func": "def g(a = 5, b = 10, c = 15):\n    return -a + sum([b * i for i in range(c)])", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=7, b=25, c=30) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])\ndef g(a = 7, b = 25, c = 30):\n    return -a + sum([b * i for i in range(c)])\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 341, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=7, b=25, c=30) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])", "solution_func": "def g(a = 7, b = 25, c = 30):\n    return -a + sum([b * i for i in range(c)])", "map_ix": [1, 1, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\ndef f(arr: List[int], n=2) -> bool:\n    \"\"\"Check if all numbers in the list are divisible by n\"\"\"\n    return all(num % n == 0 for num in arr)\ndef g(n = 2):\n    return [i for i in range(1, 11)] if n == 2 else [i for i in range(1, 6)]\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 341, "target_skills": null, "problem_func": "from typing import*\nimport math\ndef f(arr: List[int], n=2) -> bool:\n    \"\"\"Check if all numbers in the list are divisible by n\"\"\"\n    return all(num % n == 0 for num in arr)", "solution_func": "def g(n = 2):\n    return [i for i in range(1, 11)] if n == 2 else [i for i in range(1, 6)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(books: List[str], target: str) -> bool:\n    \"\"\"\n    Given a list of books and a target book, check if the target book exists in the list.\n\n    Example:\n    books = ['Harry Potter', 'Lord of the Rings', 'Game of Thrones']\n    target = 'Harry Potter'\n\n    Output:\n    True\n\n    Explanation: The target book 'Harry Potter' exists in the list.\n    \"\"\"\n    return target in books\n\ndef g(books=['Harry Potter', 'Lord of the Rings', 'Game of Thrones'], target='Harry Potter'):\n    return books, target\n\nassert f(*g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 342, "target_skills": null, "problem_func": "from typing import*\ndef f(books: List[str], target: str) -> bool:\n    \"\"\"\n    Given a list of books and a target book, check if the target book exists in the list.\n\n    Example:\n    books = ['Harry Potter', 'Lord of the Rings', 'Game of Thrones']\n    target = 'Harry Potter'\n\n    Output:\n    True\n\n    Explanation: The target book 'Harry Potter' exists in the list.\n    \"\"\"\n    return target in books", "solution_func": "def g(books=['Harry Potter', 'Lord of the Rings', 'Game of Thrones'], target='Harry Potter'):\n    return books, target", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import Any\n\ndef f(lst: List[Any], target: Any) -> bool:\n    \"\"\"\n    Given a list and a target value, check if the target value exists in the list.\n\n    Example:\n    lst = [1, 2, 3, 'a', 'b', 'c']\n    target = 'b'\n\n    Output:\n    True\n\n    Explanation: The target value 'b' exists in the list.\n    \"\"\"\n    return target in lst\n\ndef g(lst=[1, 2, 3, 'a', 'b', 'c'], target='b'):\n    return lst, target\n\nassert f(*g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 342, "target_skills": null, "problem_func": "from typing import*\nfrom typing import Any\n\ndef f(lst: List[Any], target: Any) -> bool:\n    \"\"\"\n    Given a list and a target value, check if the target value exists in the list.\n\n    Example:\n    lst = [1, 2, 3, 'a', 'b', 'c']\n    target = 'b'\n\n    Output:\n    True\n\n    Explanation: The target value 'b' exists in the list.\n    \"\"\"\n    return target in lst", "solution_func": "def g(lst=[1, 2, 3, 'a', 'b', 'c'], target='b'):\n    return lst, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str], target_length: int) -> bool:\n    \"\"\"\n    Given a list of words and a target length, return True if there exists a word in the list that has a length equal\n    to the target length, otherwise return False.\n\n    Example:\n    words = ['apple', 'banana', 'cat', 'dog']\n    target_length = 4\n\n    Output:\n    True\n\n    Explanation: The word 'apple' has a length of 4, so the output is True.\n    \"\"\"\n    return any(len(word) == target_length for word in words)\n\ndef g(words=['apple', 'banana', 'cat', 'dog'], target_length=4):\n    return words, target_length\n\nassert f(*g()) == True\n", "emb": null, "idx_generation": 342, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], target_length: int) -> bool:\n    \"\"\"\n    Given a list of words and a target length, return True if there exists a word in the list that has a length equal\n    to the target length, otherwise return False.\n\n    Example:\n    words = ['apple', 'banana', 'cat', 'dog']\n    target_length = 4\n\n    Output:\n    True\n\n    Explanation: The word 'apple' has a length of 4, so the output is True.\n    \"\"\"\n    return any(len(word) == target_length for word in words)", "solution_func": "def g(words=['apple', 'banana', 'cat', 'dog'], target_length=4):\n    return words, target_length", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list whose product is equal to the target value.\n\n    Sample Input:\n    [2, 4, 6, 8], 16\n\n    Sample Output:\n    True\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if target % num == 0 and target // num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g() -> List[int]:\n    return [2, 4, 6, 8]\n\nassert f(g(), 16) == True\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 342, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list whose product is equal to the target value.\n\n    Sample Input:\n    [2, 4, 6, 8], 16\n\n    Sample Output:\n    True\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if target % num == 0 and target // num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g() -> List[int]:\n    return [2, 4, 6, 8]", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the even numbers from the original list.\n\n    Sample Input:\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Sample Output:\n    [2, 4, 6, 8, 10]\n    \"\"\"\n    return [num for num in arr if num % 2 == 0]\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == [2, 4, 6, 8, 10]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 342, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the even numbers from the original list.\n\n    Sample Input:\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Sample Output:\n    [2, 4, 6, 8, 10]\n    \"\"\"\n    return [num for num in arr if num % 2 == 0]", "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int, m: int) -> int:\n    \"\"\"\n    Given two integers n and m, calculate the value of n raised to the power of m.\n\n    Sample Input:\n    n = 2, m = 3\n\n    Sample Output:\n    8\n    \"\"\"\n    return math.pow(n, m)\n\ndef g() -> Tuple[int, int]:\n    return (2, 3)\n\nassert f(*g()) == 8\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 342, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, m: int) -> int:\n    \"\"\"\n    Given two integers n and m, calculate the value of n raised to the power of m.\n\n    Sample Input:\n    n = 2, m = 3\n\n    Sample Output:\n    8\n    \"\"\"\n    return math.pow(n, m)", "solution_func": "def g() -> Tuple[int, int]:\n    return (2, 3)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given nested list whose sum is equal to 20.\n    \"\"\"\n\n    num_set = set()\n    for lst in nums:\n        for num in lst:\n            if 20 - num in num_set:\n                return True\n            num_set.add(num)\n    return False\n\ndef g(nums: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums\n\nassert f(g()) == False\n\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 342, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given nested list whose sum is equal to 20.\n    \"\"\"\n\n    num_set = set()\n    for lst in nums:\n        for num in lst:\n            if 20 - num in num_set:\n                return True\n            num_set.add(num)\n    return False", "solution_func": "def g(nums: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given nested list whose difference is equal to 3.\n    \"\"\"\n\n    num_set = set()\n    for lst in nums:\n        for num in lst:\n            if num - 3 in num_set:\n                return True\n            num_set.add(num)\n    return False\n\ndef g(nums: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums\n\nassert f(g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 342, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given nested list whose difference is equal to 3.\n    \"\"\"\n\n    num_set = set()\n    for lst in nums:\n        for num in lst:\n            if num - 3 in num_set:\n                return True\n            num_set.add(num)\n    return False", "solution_func": "def g(nums: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given nested list whose product is equal to 100.\n    \"\"\"\n\n    num_set = set()\n    for lst in nums:\n        for num in lst:\n            if 100 / num in num_set:\n                return True\n            num_set.add(num)\n    return False\n\ndef g(nums: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums\n\nassert f(g()) == False\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 342, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given nested list whose product is equal to 100.\n    \"\"\"\n\n    num_set = set()\n    for lst in nums:\n        for num in lst:\n            if 100 / num in num_set:\n                return True\n            num_set.add(num)\n    return False", "solution_func": "def g(nums: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the given list contains three numbers that add up to the target number.\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            curr_sum = nums[i] + nums[left] + nums[right]\n            if curr_sum == target:\n                return True\n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(nums=[2, 4, 6, 8], target=16):\n    return nums, target\n\nassert f(*g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 342, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the given list contains three numbers that add up to the target number.\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            curr_sum = nums[i] + nums[left] + nums[right]\n            if curr_sum == target:\n                return True\n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False", "solution_func": "def g(nums=[2, 4, 6, 8], target=16):\n    return nums, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target number.\"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 343, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target number.\"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is an identity matrix.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                if matrix[i][j] != 1:\n                    return False\n            else:\n                if matrix[i][j] != 0:\n                    return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 343, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is an identity matrix.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                if matrix[i][j] != 1:\n                    return False\n            else:\n                if matrix[i][j] != 0:\n                    return False\n    return True", "solution_func": "def g():\n    return [[1, 0, 0], [0, 1, 0], [0, 0, 1]]", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 343, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a palindrome.\"\"\"\n    return nums == nums[::-1]", "solution_func": "def g():\n    return [1, 2, 3, 2, 1]", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of numbers `nums` and a target number `target`, find the index of the pair of numbers in `nums`\n    that sum up to the target number.\n\n    If there are multiple pairs that sum up to the target number, return the index of the first pair found.\n\n    For example, if nums = [1, 2, 3, 4, 5] and target = 7, the pair (2, 5) sum up to the target number and their indices are (1, 4).\n    Therefore, the function should return 1.\n    \"\"\"\n    num_dict = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_dict:\n            return num_dict[complement]\n        num_dict[num] = i\n    return -1\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return (nums, target)\n\nassert f(*g()) == 1\n\n", "emb": null, "idx_generation": 343, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of numbers `nums` and a target number `target`, find the index of the pair of numbers in `nums`\n    that sum up to the target number.\n\n    If there are multiple pairs that sum up to the target number, return the index of the first pair found.\n\n    For example, if nums = [1, 2, 3, 4, 5] and target = 7, the pair (2, 5) sum up to the target number and their indices are (1, 4).\n    Therefore, the function should return 1.\n    \"\"\"\n    num_dict = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_dict:\n            return num_dict[complement]\n        num_dict[num] = i\n    return -1", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return (nums, target)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of numbers `nums` and a target number `target`, find all pairs of numbers in `nums`\n    that sum up to the target number.\n\n    Return a list of tuples, where each tuple contains a pair of numbers that sum up to the target number.\n\n    For example, if nums = [1, 2, 3, 4, 5] and target = 7, the pairs (2, 5) and (3, 4) sum up to the target number.\n    Therefore, the function should return [(2, 5), (3, 4)].\n    \"\"\"\n    pairs = []\n    num_dict = {}\n    for num in nums:\n        complement = target - num\n        if complement in num_dict:\n            pairs.append((complement, num))\n        num_dict[num] = True\n    return pairs\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return (nums, target)\n\nassert f(*g()) == [(2, 5), (3, 4)]\n\n", "emb": null, "idx_generation": 343, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of numbers `nums` and a target number `target`, find all pairs of numbers in `nums`\n    that sum up to the target number.\n\n    Return a list of tuples, where each tuple contains a pair of numbers that sum up to the target number.\n\n    For example, if nums = [1, 2, 3, 4, 5] and target = 7, the pairs (2, 5) and (3, 4) sum up to the target number.\n    Therefore, the function should return [(2, 5), (3, 4)].\n    \"\"\"\n    pairs = []\n    num_dict = {}\n    for num in nums:\n        complement = target - num\n        if complement in num_dict:\n            pairs.append((complement, num))\n        num_dict[num] = True\n    return pairs", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return (nums, target)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of numbers `nums` and a target number `target`, find the minimum length of a subarray\n    whose sum is greater than or equal to the target number.\n\n    If no such subarray exists, return 0.\n\n    For example, if nums = [1, 2, 3, 4, 5] and target = 9, the subarray [3, 4, 5] has a sum of 12 which is greater than the target number.\n    Therefore, the function should return 3, as the length of the subarray is 3.\n    \"\"\"\n    left = 0\n    min_length = float('inf')\n    subarray_sum = 0\n\n    for right in range(len(nums)):\n        subarray_sum += nums[right]\n        while subarray_sum >= target:\n            min_length = min(min_length, right - left + 1)\n            subarray_sum -= nums[left]\n            left += 1\n\n    if min_length == float('inf'):\n        return 0\n    return min_length\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (nums, target)\n\nassert f(*g()) == 3\n\n", "emb": null, "idx_generation": 343, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of numbers `nums` and a target number `target`, find the minimum length of a subarray\n    whose sum is greater than or equal to the target number.\n\n    If no such subarray exists, return 0.\n\n    For example, if nums = [1, 2, 3, 4, 5] and target = 9, the subarray [3, 4, 5] has a sum of 12 which is greater than the target number.\n    Therefore, the function should return 3, as the length of the subarray is 3.\n    \"\"\"\n    left = 0\n    min_length = float('inf')\n    subarray_sum = 0\n\n    for right in range(len(nums)):\n        subarray_sum += nums[right]\n        while subarray_sum >= target:\n            min_length = min(min_length, right - left + 1)\n            subarray_sum -= nums[left]\n            left += 1\n\n    if min_length == float('inf'):\n        return 0\n    return min_length", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (nums, target)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if all the numbers in a list are divisible by 3.\n    \"\"\"\n    return all([num % 3 == 0 for num in nums])\n\ndef g():\n    return [3, 6, 9, 12, 15]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 343, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if all the numbers in a list are divisible by 3.\n    \"\"\"\n    return all([num % 3 == 0 for num in nums])", "solution_func": "def g():\n    return [3, 6, 9, 12, 15]", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(names: List[str]) -> bool:\n    \"\"\"\n    Check if all the names in a list start with the same letter.\n    \"\"\"\n    return all([name[0] == names[0][0] for name in names])\n\ndef g():\n    return [\"Alice\", \"Amy\", \"Alex\", \"Andrew\"]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 343, "target_skills": null, "problem_func": "from typing import*\n\ndef f(names: List[str]) -> bool:\n    \"\"\"\n    Check if all the names in a list start with the same letter.\n    \"\"\"\n    return all([name[0] == names[0][0] for name in names])", "solution_func": "def g():\n    return [\"Alice\", \"Amy\", \"Alex\", \"Andrew\"]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\n\ndef f(strings: List[str]) -> List[str]:\n    \"\"\"\n    Given a list of strings, return a new list with only the strings that contain the letter 'a'.\n    \"\"\"\n    return [string for string in strings if 'a' in string.lower()]\n\ndef g(strings: List[str] = [\"apple\", \"banana\", \"cherry\", \"date\"]):\n    return strings\n\nassert f(g()) == [\"apple\", \"banana\"]\n\n", "emb": null, "idx_generation": 343, "target_skills": null, "problem_func": "from typing import*\n\ndef f(strings: List[str]) -> List[str]:\n    \"\"\"\n    Given a list of strings, return a new list with only the strings that contain the letter 'a'.\n    \"\"\"\n    return [string for string in strings if 'a' in string.lower()]", "solution_func": "def g(strings: List[str] = [\"apple\", \"banana\", \"cherry\", \"date\"]):\n    return strings", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, target: int = 10) -> bool:\n    \"\"\"Check if the sum of the first n natural numbers is equal to the target value.\"\"\"\n    return sum(range(1, n+1)) == target\n\ndef g(n: int = 5):\n    return n\n\nassert f(g())\n", "emb": null, "idx_generation": 343, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, target: int = 10) -> bool:\n    \"\"\"Check if the sum of the first n natural numbers is equal to the target value.\"\"\"\n    return sum(range(1, n+1)) == target", "solution_func": "def g(n: int = 5):\n    return n", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return a list of the sums of each column.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Output: [12, 15, 18]\n\n    Explanation: The sums of the columns are [1+4+7, 2+5+8, 3+6+9] = [12, 15, 18].\n    \"\"\"\n    column_sums = []\n    for col in range(len(matrix[0])):\n        col_sum = sum(row[col] for row in matrix)\n        column_sums.append(col_sum)\n    return column_sums\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [12, 15, 18]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 344, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return a list of the sums of each column.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Output: [12, 15, 18]\n\n    Explanation: The sums of the columns are [1+4+7, 2+5+8, 3+6+9] = [12, 15, 18].\n    \"\"\"\n    column_sums = []\n    for col in range(len(matrix[0])):\n        col_sum = sum(row[col] for row in matrix)\n        column_sums.append(col_sum)\n    return column_sums", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, return the sum of all elements.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Output: 45\n\n    Explanation: The sum of all elements in the matrix is 1+2+3+4+5+6+7+8+9 = 45.\n    \"\"\"\n    total_sum = sum(sum(row) for row in matrix)\n    return total_sum\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 45\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 344, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, return the sum of all elements.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Output: 45\n\n    Explanation: The sum of all elements in the matrix is 1+2+3+4+5+6+7+8+9 = 45.\n    \"\"\"\n    total_sum = sum(sum(row) for row in matrix)\n    return total_sum", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, return the maximum element.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Output: 9\n\n    Explanation: The maximum element in the matrix is 9.\n    \"\"\"\n    max_element = max(max(row) for row in matrix)\n    return max_element\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 9\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 344, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, return the maximum element.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Output: 9\n\n    Explanation: The maximum element in the matrix is 9.\n    \"\"\"\n    max_element = max(max(row) for row in matrix)\n    return max_element", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are exactly k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any combination sums up to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False\n\ndef g(k=3, target_sum=15):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), k=3, target_sum=15) == True\n\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 344, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are exactly k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any combination sums up to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False", "solution_func": "def g(k=3, target_sum=15):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are at least k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any combination sums up to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False\n\ndef g(k=2, target_sum=25):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), k=2, target_sum=25) == True\n\n", "emb": null, "idx_generation": 344, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are at least k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any combination sums up to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False", "solution_func": "def g(k=2, target_sum=25):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are more than k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any combination sums up to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False\n\ndef g(k=5, target_sum=40):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), k=5, target_sum=40) == True\n\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 344, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are more than k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any combination sums up to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False", "solution_func": "def g(k=5, target_sum=40):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if the sum of three integers is equal to their product\"\"\"\n    return x + y + z == x * y * z\ndef g(x=2, y=3, z=4):\n    return x, y, z\nassert f(*g()) == False\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 344, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if the sum of three integers is equal to their product\"\"\"\n    return x + y + z == x * y * z", "solution_func": "def g(x=2, y=3, z=4):\n    return x, y, z", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"Check if any two integers in the list sum up to the target number\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 7\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 344, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"Check if any two integers in the list sum up to the target number\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5], 7", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 344, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "solution_func": "def g():\n    return 17", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers, check if there are three numbers that add up to the target number.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n    output: True\n    \"\"\"\n    complements = set()\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            complement = target - nums[i] - nums[j]\n            if complement in complements:\n                return True\n            complements.add(nums[i])\n            complements.add(nums[j])\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 9\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 344, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers, check if there are three numbers that add up to the target number.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n    output: True\n    \"\"\"\n    complements = set()\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            complement = target - nums[i] - nums[j]\n            if complement in complements:\n                return True\n            complements.add(nums[i])\n            complements.add(nums[j])\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5], 9", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Given a list of integers, find the three numbers that add up to the target.\n    If such a triplet exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            complement = target - nums[i] - nums[j]\n            if complement in nums_set and complement != nums[i] and complement != nums[j]:\n                return True\n    return False\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 345, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Given a list of integers, find the three numbers that add up to the target.\n    If such a triplet exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            complement = target - nums[i] - nums[j]\n            if complement in nums_set and complement != nums[i] and complement != nums[j]:\n                return True\n    return False", "solution_func": "def g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Given a list of integers, find the maximum sum of a subset that is less than or equal to the target.\n    If such a subset exists, return True. Otherwise, return False.\n    \"\"\"\n    subset_sums = set()\n    subset_sums.add(0)\n    for num in nums:\n        new_sums = set()\n        for subset_sum in subset_sums:\n            new_sum = subset_sum + num\n            if new_sum <= target:\n                new_sums.add(new_sum)\n        subset_sums.update(new_sums)\n    return max(subset_sums) == target\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 345, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Given a list of integers, find the maximum sum of a subset that is less than or equal to the target.\n    If such a subset exists, return True. Otherwise, return False.\n    \"\"\"\n    subset_sums = set()\n    subset_sums.add(0)\n    for num in nums:\n        new_sums = set()\n        for subset_sum in subset_sums:\n            new_sum = subset_sum + num\n            if new_sum <= target:\n                new_sums.add(new_sum)\n        subset_sums.update(new_sums)\n    return max(subset_sums) == target", "solution_func": "def g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Given a list of integers, find the number of pairs that add up to the target.\n    Return the count of such pairs.\n    \"\"\"\n    nums_set = set(nums)\n    count = 0\n    for num in nums:\n        complement = target - num\n        if complement in nums_set and complement != num:\n            count += 1\n    return count\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums\n\nassert f(g()) == 2\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 345, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Given a list of integers, find the number of pairs that add up to the target.\n    Return the count of such pairs.\n    \"\"\"\n    nums_set = set(nums)\n    count = 0\n    for num in nums:\n        complement = target - num\n        if complement in nums_set and complement != num:\n            count += 1\n    return count", "solution_func": "def g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Given a list of integers, find the maximum and minimum numbers in the list.\n    If the difference between the maximum and minimum numbers is equal to the target, return True. Otherwise, return False.\n    \"\"\"\n    if len(nums) < 2:\n        return False\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    return abs(max_num - min_num) == target\n\ndef g(nums = [10, 20, 30, 40, 50, 60, 70]):\n    return nums\n\nassert f(g()) == False\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 345, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Given a list of integers, find the maximum and minimum numbers in the list.\n    If the difference between the maximum and minimum numbers is equal to the target, return True. Otherwise, return False.\n    \"\"\"\n    if len(nums) < 2:\n        return False\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    return abs(max_num - min_num) == target", "solution_func": "def g(nums = [10, 20, 30, 40, 50, 60, 70]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"\n    Given a string and a substring, check if the substring is a palindrome and appears in the string exactly twice.\n    If both conditions are met, return True. Otherwise, return False.\n    \"\"\"\n    if len(s) < 2 or len(substring) < 2:\n        return False\n    \n    substring_reverse = substring[::-1]\n    \n    return s.count(substring) == 2 and s.count(substring_reverse) == 0\n\ndef g(substring='abc'):\n    return 'aabccdabcddcba'\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 345, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"\n    Given a string and a substring, check if the substring is a palindrome and appears in the string exactly twice.\n    If both conditions are met, return True. Otherwise, return False.\n    \"\"\"\n    if len(s) < 2 or len(substring) < 2:\n        return False\n    \n    substring_reverse = substring[::-1]\n    \n    return s.count(substring) == 2 and s.count(substring_reverse) == 0", "solution_func": "def g(substring='abc'):\n    return 'aabccdabcddcba'", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, target: int) -> bool:\n    \"\"\"\n    Given a number n and a target, check if the number n is divisible by the target and the sum of its digits is equal to the target value.\n    If both conditions are met, return True. Otherwise, return False.\n    \"\"\"\n    if target == 0:\n        return False\n    \n    return n % target == 0 and sum([int(i) for i in str(n)]) == target\n\ndef g():\n    return 36, 9\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 345, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, target: int) -> bool:\n    \"\"\"\n    Given a number n and a target, check if the number n is divisible by the target and the sum of its digits is equal to the target value.\n    If both conditions are met, return True. Otherwise, return False.\n    \"\"\"\n    if target == 0:\n        return False\n    \n    return n % target == 0 and sum([int(i) for i in str(n)]) == target", "solution_func": "def g():\n    return 36, 9", "map_ix": [0, 0, 0, 1, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, find the sum of all the elements in the matrix.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Output:\n    45\n\n    Explanation: The sum of all elements in the matrix is 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45.\n    \"\"\"\n    return sum([sum(row) for row in matrix])\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 45\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 345, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, find the sum of all the elements in the matrix.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Output:\n    45\n\n    Explanation: The sum of all elements in the matrix is 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45.\n    \"\"\"\n    return sum([sum(row) for row in matrix])", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, find the maximum element in each row and return a list of those maximum values.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Output:\n    [3, 6, 9]\n\n    Explanation: The maximum elements in each row are 3, 6, and 9 respectively.\n    \"\"\"\n    return [max(row) for row in matrix]\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [3, 6, 9]\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 345, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, find the maximum element in each row and return a list of those maximum values.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Output:\n    [3, 6, 9]\n\n    Explanation: The maximum elements in each row are 3, 6, and 9 respectively.\n    \"\"\"\n    return [max(row) for row in matrix]", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, determine whether the matrix is symmetric or not.\n\n    A matrix is symmetric if it is equal to its transpose.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n\n    Output:\n    True\n\n    Explanation: The matrix is symmetric because it is equal to its transpose.\n\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Output:\n    False\n\n    Explanation: The matrix is not symmetric because it is not equal to its transpose.\n    \"\"\"\n    transpose = [[matrix[j][i] for j in range(len(matrix[0]))] for i in range(len(matrix))]\n    return matrix == transpose\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 345, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, determine whether the matrix is symmetric or not.\n\n    A matrix is symmetric if it is equal to its transpose.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n\n    Output:\n    True\n\n    Explanation: The matrix is symmetric because it is equal to its transpose.\n\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Output:\n    False\n\n    Explanation: The matrix is not symmetric because it is not equal to its transpose.\n    \"\"\"\n    transpose = [[matrix[j][i] for j in range(len(matrix[0]))] for i in range(len(matrix))]\n    return matrix == transpose", "solution_func": "def g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix", "map_ix": [1, 0, 1, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, find the sum of all the elements in the matrix.\n\n    Example:\n    matrix = [[1, 2],\n              [3, 4],\n              [5, 6]]\n\n    Output:\n    21\n\n    Explanation: The sum of all elements in the matrix is 1 + 2 + 3 + 4 + 5 + 6 = 21.\n    \"\"\"\n    return sum([sum(row) for row in matrix])\n\ndef g(matrix=[[1, 2], [3, 4], [5, 6]]):\n    return matrix\n\nassert f(g()) == 21\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 345, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, find the sum of all the elements in the matrix.\n\n    Example:\n    matrix = [[1, 2],\n              [3, 4],\n              [5, 6]]\n\n    Output:\n    21\n\n    Explanation: The sum of all elements in the matrix is 1 + 2 + 3 + 4 + 5 + 6 = 21.\n    \"\"\"\n    return sum([sum(row) for row in matrix])", "solution_func": "def g(matrix=[[1, 2], [3, 4], [5, 6]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"\n    Determine if n is a prime number raised to the power of m\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return n > 0 and is_prime(n) and (n ** m) % (m ** n) == 0\n\ndef g(m = 10):\n    return random.choice([2, 3, 5, 7, 11, 13, 17, 19, 23, 29])\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 346, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"\n    Determine if n is a prime number raised to the power of m\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return n > 0 and is_prime(n) and (n ** m) % (m ** n) == 0", "solution_func": "def g(m = 10):\n    return random.choice([2, 3, 5, 7, 11, 13, 17, 19, 23, 29])", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a subset of nums whose product is equal to n.\n    \"\"\"\n    def subsetProduct(nums, n, product):\n        if product == 0:\n            return True\n        if n == 0 and product != 0:\n            return False\n        if nums[n-1] > product:\n            return subsetProduct(nums, n-1, product)\n        return subsetProduct(nums, n-1, product) or subsetProduct(nums, n-1, product//nums[n-1])\n\n    return subsetProduct(nums, len(nums), n)\n\ndef g(nums = [1, 2, 3, 4, 5]):\n    return random.choice(nums)\n\nassert f(g(), nums=[1, 2, 3, 4, 5]) == True\n", "emb": null, "idx_generation": 346, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a subset of nums whose product is equal to n.\n    \"\"\"\n    def subsetProduct(nums, n, product):\n        if product == 0:\n            return True\n        if n == 0 and product != 0:\n            return False\n        if nums[n-1] > product:\n            return subsetProduct(nums, n-1, product)\n        return subsetProduct(nums, n-1, product) or subsetProduct(nums, n-1, product//nums[n-1])\n\n    return subsetProduct(nums, len(nums), n)", "solution_func": "def g(nums = [1, 2, 3, 4, 5]):\n    return random.choice(nums)", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(n: int, matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the sum of elements in each row and each column of the matrix is equal to n.\n    \"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n\n    return all(val == n for val in row_sums) and all(val == n for val in col_sums)\n\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return random.choice([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\nassert f(g(), matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == True\n", "emb": null, "idx_generation": 346, "target_skills": null, "problem_func": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(n: int, matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the sum of elements in each row and each column of the matrix is equal to n.\n    \"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n\n    return all(val == n for val in row_sums) and all(val == n for val in col_sums)", "solution_func": "def g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return random.choice([1, 2, 3, 4, 5, 6, 7, 8, 9])", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, return the sum of each column in the matrix.\n    \"\"\"\n    col_sums = []\n    \n    for i in range(len(matrix[0])):\n        col_sum = 0\n        for j in range(len(matrix)):\n            col_sum += matrix[j][i]\n        col_sums.append(col_sum)\n        \n    return col_sums\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [12, 15, 18]\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 346, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, return the sum of each column in the matrix.\n    \"\"\"\n    col_sums = []\n    \n    for i in range(len(matrix[0])):\n        col_sum = 0\n        for j in range(len(matrix)):\n            col_sum += matrix[j][i]\n        col_sums.append(col_sum)\n        \n    return col_sums", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, return the sum of the diagonal elements in the matrix.\n    \"\"\"\n    diagonal_sum = 0\n    \n    for i in range(len(matrix)):\n        diagonal_sum += matrix[i][i]\n        \n    return diagonal_sum\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 15\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 346, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, return the sum of the diagonal elements in the matrix.\n    \"\"\"\n    diagonal_sum = 0\n    \n    for i in range(len(matrix)):\n        diagonal_sum += matrix[i][i]\n        \n    return diagonal_sum", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, return the sum of all the elements in the matrix.\n    \"\"\"\n    total_sum = 0\n    \n    for row in matrix:\n        for num in row:\n            total_sum += num\n        \n    return total_sum\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 45\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 346, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, return the sum of all the elements in the matrix.\n    \"\"\"\n    total_sum = 0\n    \n    for row in matrix:\n        for num in row:\n            total_sum += num\n        \n    return total_sum", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [1, 1, 0, 1, 0, 1, 1, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport itertools\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if the sum of each combination is equal to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False\n\ndef g(k=3, target_sum=10):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), k=3, target_sum=10) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 346, "target_skills": null, "problem_func": "from typing import*\nimport itertools\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if the sum of each combination is equal to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False", "solution_func": "def g(k=3, target_sum=10):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport itertools\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if the sum of each combination is equal to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False\n\ndef g(k=2, target_sum=7):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), k=2, target_sum=7) == True\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 346, "target_skills": null, "problem_func": "from typing import*\nimport itertools\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if the sum of each combination is equal to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False", "solution_func": "def g(k=2, target_sum=7):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport itertools\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if the sum of each combination is equal to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False\n\ndef g(k=5, target_sum=50):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n\nassert f(g(), k=5, target_sum=50) == True\n", "emb": null, "idx_generation": 346, "target_skills": null, "problem_func": "from typing import*\nimport itertools\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if the sum of each combination is equal to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False", "solution_func": "def g(k=5, target_sum=50):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there is a pair of numbers whose sum is equal to the last number in the list.\n\n    Sample Input:\n    [1, 2, 3, 4, 7]\n\n    Sample Output:\n    True\n    \"\"\"\n    target = arr[-1]\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)-1):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 7]\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 346, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there is a pair of numbers whose sum is equal to the last number in the list.\n\n    Sample Input:\n    [1, 2, 3, 4, 7]\n\n    Sample Output:\n    True\n    \"\"\"\n    target = arr[-1]\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)-1):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 7]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of numbers `nums` and a target number `target`, find the index of the first occurrence of the target number.\n    If the target number is not in the list, return -1.\n    \"\"\"\n    for i, num in enumerate(nums):\n        if num == target:\n            return i\n    return -1\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 3):\n    return (nums, target)\n\nassert f(*g()) == 2\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 347, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of numbers `nums` and a target number `target`, find the index of the first occurrence of the target number.\n    If the target number is not in the list, return -1.\n    \"\"\"\n    for i, num in enumerate(nums):\n        if num == target:\n            return i\n    return -1", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 3):\n    return (nums, target)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers `nums` and a target number `target`, find if there exists a pair of numbers in `nums`\n    such that their difference is equal to the target number.\n\n    For example, if nums = [1, 2, 3, 4, 5] and target = 2, the pair (3, 1) has a difference of the target number.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        if num - target in num_set:\n            return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 2):\n    return (nums, target)\n\nassert f(*g()) == True\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 347, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers `nums` and a target number `target`, find if there exists a pair of numbers in `nums`\n    such that their difference is equal to the target number.\n\n    For example, if nums = [1, 2, 3, 4, 5] and target = 2, the pair (3, 1) has a difference of the target number.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        if num - target in num_set:\n            return True\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 2):\n    return (nums, target)", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of numbers `nums` and a target number `target`, find all the pairs of numbers in `nums`\n    such that their sum is equal to the target number.\n\n    For example, if nums = [1, 2, 3, 4, 5] and target = 5, the pairs (2, 3) and (4, 1) sum up to the target number.\n    \"\"\"\n    pairs = []\n    num_set = set(nums)\n    for num in nums:\n        if target - num in num_set:\n            pairs.append((num, target - num))\n    return pairs\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 5):\n    return (nums, target)\n\nassert f(*g()) == [(2, 3), (4, 1)]\n", "emb": null, "idx_generation": 347, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of numbers `nums` and a target number `target`, find all the pairs of numbers in `nums`\n    such that their sum is equal to the target number.\n\n    For example, if nums = [1, 2, 3, 4, 5] and target = 5, the pairs (2, 3) and (4, 1) sum up to the target number.\n    \"\"\"\n    pairs = []\n    num_set = set(nums)\n    for num in nums:\n        if target - num in num_set:\n            pairs.append((num, target - num))\n    return pairs", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 5):\n    return (nums, target)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find if there exists a subarray whose sum equals the target number.\n    If such a subarray exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(nums)):\n        total = nums[i]\n        if total == target:\n            return True\n        for j in range(i + 1, len(nums)):\n            total += nums[j]\n            if total == target:\n                return True\n    return False\n\ndef g(nums: List[int] = [4, 2, -3, 1, 6], target: int = 0):\n    return nums\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 347, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find if there exists a subarray whose sum equals the target number.\n    If such a subarray exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(nums)):\n        total = nums[i]\n        if total == target:\n            return True\n        for j in range(i + 1, len(nums)):\n            total += nums[j]\n            if total == target:\n                return True\n    return False", "solution_func": "def g(nums: List[int] = [4, 2, -3, 1, 6], target: int = 0):\n    return nums", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find if there exists a subarray whose sum equals the target number.\n    If such a subarray exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(nums)):\n        total = nums[i]\n        if total == target:\n            return True\n        for j in range(i + 1, len(nums)):\n            total += nums[j]\n            if total == target:\n                return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return nums\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 347, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find if there exists a subarray whose sum equals the target number.\n    If such a subarray exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(nums)):\n        total = nums[i]\n        if total == target:\n            return True\n        for j in range(i + 1, len(nums)):\n            total += nums[j]\n            if total == target:\n                return True\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find if there exists a subarray whose sum equals the target number.\n    If such a subarray exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(nums)):\n        total = nums[i]\n        if total == target:\n            return True\n        for j in range(i + 1, len(nums)):\n            total += nums[j]\n            if total == target:\n                return True\n    return False\n\ndef g(nums: List[int] = [-1, -2, -3, -4, -5], target: int = -8):\n    return nums\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 347, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find if there exists a subarray whose sum equals the target number.\n    If such a subarray exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(nums)):\n        total = nums[i]\n        if total == target:\n            return True\n        for j in range(i + 1, len(nums)):\n            total += nums[j]\n            if total == target:\n                return True\n    return False", "solution_func": "def g(nums: List[int] = [-1, -2, -3, -4, -5], target: int = -8):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with the squares of each element.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n\n    Output:\n    [1, 4, 9, 16, 25]\n    \"\"\"\n    return [num**2 for num in nums]\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == [1, 4, 9, 16, 25]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 347, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with the squares of each element.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n\n    Output:\n    [1, 4, 9, 16, 25]\n    \"\"\"\n    return [num**2 for num in nums]", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(num: int) -> bool:\n    \"\"\"\n    Given an integer, check if it is a palindrome.\n\n    Example:\n    num = 12321\n\n    Output:\n    True\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef g(num: int = 12321):\n    return num\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 347, "target_skills": null, "problem_func": "from typing import*\ndef f(num: int) -> bool:\n    \"\"\"\n    Given an integer, check if it is a palindrome.\n\n    Example:\n    num = 12321\n\n    Output:\n    True\n    \"\"\"\n    return str(num) == str(num)[::-1]", "solution_func": "def g(num: int = 12321):\n    return num", "map_ix": [1, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the sum of all even numbers.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6]\n\n    Output:\n    12\n    \"\"\"\n    return sum(num for num in nums if num % 2 == 0)\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6]):\n    return nums\n\nassert f(g()) == 12\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 347, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the sum of all even numbers.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6]\n\n    Output:\n    12\n    \"\"\"\n    return sum(num for num in nums if num % 2 == 0)", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is symmetric around its middle element.\"\"\"\n    n = len(nums)\n    mid = n // 2\n    if n % 2 == 0:\n        return nums[:mid] == nums[mid:][::-1]\n    else:\n        return nums[:mid] == nums[mid+1:][::-1]\n\ndef g():\n    return [1, 2, 3, 3, 2, 1]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 347, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is symmetric around its middle element.\"\"\"\n    n = len(nums)\n    mid = n // 2\n    if n % 2 == 0:\n        return nums[:mid] == nums[mid:][::-1]\n    else:\n        return nums[:mid] == nums[mid+1:][::-1]", "solution_func": "def g():\n    return [1, 2, 3, 3, 2, 1]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> List[int]:\n    \"\"\"\n    Find two numbers in the list that add up to the target value and return them in a list.\n\n    Sample input:\n    nums = [2, 4, 6, 8]\n\n    Sample output:\n    [2, 8]\n\n    Explanation: The numbers 2 and 8 add up to the target value of 10.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return [num, complement]\n    return []\n\ndef g() -> List[int]:\n    return [2, 4, 6, 8]\n\nassert f(g()) == [2, 8]\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 348, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> List[int]:\n    \"\"\"\n    Find two numbers in the list that add up to the target value and return them in a list.\n\n    Sample input:\n    nums = [2, 4, 6, 8]\n\n    Sample output:\n    [2, 8]\n\n    Explanation: The numbers 2 and 8 add up to the target value of 10.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return [num, complement]\n    return []", "solution_func": "def g() -> List[int]:\n    return [2, 4, 6, 8]", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if the given string is a pangram.\n\n    A pangram is a sentence that contains every letter of the alphabet at least once.\n\n    Sample input:\n    string = \"The quick brown fox jumps over the lazy dog\"\n\n    Sample output:\n    True\n\n    Explanation: The sentence contains all the letters of the alphabet at least once.\n    \"\"\"\n    alphabet = set(\"abcdefghijklmnopqrstuvwxyz\")\n    string = string.lower()\n    for char in string:\n        if char in alphabet:\n            alphabet.remove(char)\n        if len(alphabet) == 0:\n            return True\n    return False\n\ndef g() -> str:\n    return \"The quick brown fox jumps over the lazy dog\"\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 348, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if the given string is a pangram.\n\n    A pangram is a sentence that contains every letter of the alphabet at least once.\n\n    Sample input:\n    string = \"The quick brown fox jumps over the lazy dog\"\n\n    Sample output:\n    True\n\n    Explanation: The sentence contains all the letters of the alphabet at least once.\n    \"\"\"\n    alphabet = set(\"abcdefghijklmnopqrstuvwxyz\")\n    string = string.lower()\n    for char in string:\n        if char in alphabet:\n            alphabet.remove(char)\n        if len(alphabet) == 0:\n            return True\n    return False", "solution_func": "def g() -> str:\n    return \"The quick brown fox jumps over the lazy dog\"", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> int:\n    \"\"\"\n    Find the number of pairs in the list whose sum is equal to the target value.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    target = 5\n\n    Sample output:\n    2\n\n    Explanation: The pairs that add up to the target value are (1, 4) and (2, 3).\n    \"\"\"\n    count = 0\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            count += 1\n    return count // 2\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 5) == 2\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 348, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> int:\n    \"\"\"\n    Find the number of pairs in the list whose sum is equal to the target value.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    target = 5\n\n    Sample output:\n    2\n\n    Explanation: The pairs that add up to the target value are (1, 4) and (2, 3).\n    \"\"\"\n    count = 0\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            count += 1\n    return count // 2", "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> int:\n    \"\"\"\n    Given a list of lists of integers, find the minimum sum of a subarray within each list and return the sum of the minimum subarray sums.\n\n    Example:\n    nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    The minimum subarray sums are [1, 4, 7].\n    The sum of the minimum subarray sums is 1 + 4 + 7 = 12.\n\n    Therefore, f(nums) returns 12.\n    \"\"\"\n    result = 0\n    for sublist in nums:\n        min_sum = float('inf')\n        curr_sum = 0\n        for num in sublist:\n            curr_sum += num\n            min_sum = min(min_sum, curr_sum)\n            if curr_sum > 0:\n                curr_sum = 0\n        result += min_sum\n    return result\n\ndef g(nums: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums\n\nassert f(g()) == 12\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 348, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> int:\n    \"\"\"\n    Given a list of lists of integers, find the minimum sum of a subarray within each list and return the sum of the minimum subarray sums.\n\n    Example:\n    nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    The minimum subarray sums are [1, 4, 7].\n    The sum of the minimum subarray sums is 1 + 4 + 7 = 12.\n\n    Therefore, f(nums) returns 12.\n    \"\"\"\n    result = 0\n    for sublist in nums:\n        min_sum = float('inf')\n        curr_sum = 0\n        for num in sublist:\n            curr_sum += num\n            min_sum = min(min_sum, curr_sum)\n            if curr_sum > 0:\n                curr_sum = 0\n        result += min_sum\n    return result", "solution_func": "def g(nums: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> int:\n    \"\"\"\n    Given a list of lists of integers, find the maximum product of a subarray within each list and return the sum of the maximum subarray products.\n\n    Example:\n    nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    The maximum subarray products are [6, 120, 504].\n    The sum of the maximum subarray products is 6 + 120 + 504 = 630.\n\n    Therefore, f(nums) returns 630.\n    \"\"\"\n    result = 0\n    for sublist in nums:\n        max_product = float('-inf')\n        curr_product = 1\n        for num in sublist:\n            curr_product *= num\n            max_product = max(max_product, curr_product)\n            if curr_product < 1:\n                curr_product = 1\n        result += max_product\n    return result\n\ndef g(nums: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums\n\nassert f(g()) == 630\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 348, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> int:\n    \"\"\"\n    Given a list of lists of integers, find the maximum product of a subarray within each list and return the sum of the maximum subarray products.\n\n    Example:\n    nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    The maximum subarray products are [6, 120, 504].\n    The sum of the maximum subarray products is 6 + 120 + 504 = 630.\n\n    Therefore, f(nums) returns 630.\n    \"\"\"\n    result = 0\n    for sublist in nums:\n        max_product = float('-inf')\n        curr_product = 1\n        for num in sublist:\n            curr_product *= num\n            max_product = max(max_product, curr_product)\n            if curr_product < 1:\n                curr_product = 1\n        result += max_product\n    return result", "solution_func": "def g(nums: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums", "map_ix": [1, 1, 0, 1, 0, 0, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> int:\n    \"\"\"\n    Given a list of lists of integers, find the maximum sum of a subarray within each list and return the overall maximum subarray sum.\n\n    Example:\n    nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    The maximum subarray sums are [6, 15, 24].\n    The overall maximum subarray sum is 24.\n\n    Therefore, f(nums) returns 24.\n    \"\"\"\n    max_sum = float('-inf')\n    for sublist in nums:\n        curr_sum = 0\n        for num in sublist:\n            curr_sum += num\n            max_sum = max(max_sum, curr_sum)\n            if curr_sum < 0:\n                curr_sum = 0\n    return max_sum\n\ndef g(nums: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums\n\nassert f(g()) == 24\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 348, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> int:\n    \"\"\"\n    Given a list of lists of integers, find the maximum sum of a subarray within each list and return the overall maximum subarray sum.\n\n    Example:\n    nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    The maximum subarray sums are [6, 15, 24].\n    The overall maximum subarray sum is 24.\n\n    Therefore, f(nums) returns 24.\n    \"\"\"\n    max_sum = float('-inf')\n    for sublist in nums:\n        curr_sum = 0\n        for num in sublist:\n            curr_sum += num\n            max_sum = max(max_sum, curr_sum)\n            if curr_sum < 0:\n                curr_sum = 0\n    return max_sum", "solution_func": "def g(nums: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target sum\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target_sum - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target_sum=100):\n    return [1, 2, 4, 5, 10, 20, 25, target_sum - 25]\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 348, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target sum\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target_sum - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(target_sum=100):\n    return [1, 2, 4, 5, 10, 20, 25, target_sum - 25]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substring: str) -> bool:\n    \"\"\"Check if the given substring is present in the string in any order.\"\"\"\n    string_chars = list(string)\n    for char in substring:\n        if char in string_chars:\n            string_chars.remove(char)\n        else:\n            return False\n    return True\n\ndef g(string=\"abcdefghij\", substring=\"def\"):\n    return (string, substring)\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 348, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substring: str) -> bool:\n    \"\"\"Check if the given substring is present in the string in any order.\"\"\"\n    string_chars = list(string)\n    for char in substring:\n        if char in string_chars:\n            string_chars.remove(char)\n        else:\n            return False\n    return True", "solution_func": "def g(string=\"abcdefghij\", substring=\"def\"):\n    return (string, substring)", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that add up to the target sum\"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target_sum:\n                return True\n            elif current_sum < target_sum:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(target_sum=100):\n    return [1, 2, 4, 5, 10, 20, 25, target_sum - 25]\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 348, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that add up to the target sum\"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target_sum:\n                return True\n            elif current_sum < target_sum:\n                left += 1\n            else:\n                right -= 1\n    return False", "solution_func": "def g(target_sum=100):\n    return [1, 2, 4, 5, 10, 20, 25, target_sum - 25]", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\n\ndef f(lst: List[int], target: int, num_pairs: int) -> bool:\n    \"\"\"\n    Check if there are exactly num_pairs pairs of numbers in the list lst that add up to the target.\n\n    Sample input:\n    lst = [1, 2, 3, 4, 5]\n    target = 9\n    num_pairs = 2\n\n    Sample output:\n    True\n\n    Explanation: The pairs of numbers (4, 5) and (2, 3) add up to 9 and they are present in the list.\n    \"\"\"\n    assert len(lst) > 1, 'Hint: The list should have at least 2 numbers.'\n    pairs = [(i, j) for i in lst for j in lst if i != j and i + j == target]\n    return len(pairs) == num_pairs\n\ndef g(lst=[1, 2, 3, 4, 5], target=9, num_pairs=2):\n    return lst, target, num_pairs\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 348, "target_skills": null, "problem_func": "import random\nfrom typing import*\n\ndef f(lst: List[int], target: int, num_pairs: int) -> bool:\n    \"\"\"\n    Check if there are exactly num_pairs pairs of numbers in the list lst that add up to the target.\n\n    Sample input:\n    lst = [1, 2, 3, 4, 5]\n    target = 9\n    num_pairs = 2\n\n    Sample output:\n    True\n\n    Explanation: The pairs of numbers (4, 5) and (2, 3) add up to 9 and they are present in the list.\n    \"\"\"\n    assert len(lst) > 1, 'Hint: The list should have at least 2 numbers.'\n    pairs = [(i, j) for i in lst for j in lst if i != j and i + j == target]\n    return len(pairs) == num_pairs", "solution_func": "def g(lst=[1, 2, 3, 4, 5], target=9, num_pairs=2):\n    return lst, target, num_pairs", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i + 1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size with random elements\n    \"\"\"\n    import random\n    return [[random.randint(0, 9) if i >= j else 0 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 349, "target_skills": null, "problem_func": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i + 1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size with random elements\n    \"\"\"\n    import random\n    return [[random.randint(0, 9) if i >= j else 0 for j in range(size)] for i in range(size)]", "map_ix": [1, 0, 1, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i + 1, cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a symmetric matrix of the given size with random elements\n    \"\"\"\n    import random\n    return [[random.randint(0, 9) for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 349, "target_skills": null, "problem_func": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i + 1, cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a symmetric matrix of the given size with random elements\n    \"\"\"\n    import random\n    return [[random.randint(0, 9) for j in range(size)] for i in range(size)]", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    target_sum = sum(matrix[0])\n    for i in range(rows):\n        if sum(matrix[i]) != target_sum:\n            return False\n        if sum(matrix[j][i] for j in range(cols)) != target_sum:\n            return False\n    if sum(matrix[i][i] for i in range(rows)) != target_sum:\n        return False\n    if sum(matrix[i][cols - i - 1] for i in range(rows)) != target_sum:\n        return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a magic square matrix of the given size with distinct elements\n    \"\"\"\n    import random\n    nums = random.sample(range(1, size*size+1), size*size)\n    return [nums[i:i+size] for i in range(0, size*size, size)]\n\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 349, "target_skills": null, "problem_func": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    target_sum = sum(matrix[0])\n    for i in range(rows):\n        if sum(matrix[i]) != target_sum:\n            return False\n        if sum(matrix[j][i] for j in range(cols)) != target_sum:\n            return False\n    if sum(matrix[i][i] for i in range(rows)) != target_sum:\n        return False\n    if sum(matrix[i][cols - i - 1] for i in range(rows)) != target_sum:\n        return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a magic square matrix of the given size with distinct elements\n    \"\"\"\n    import random\n    nums = random.sample(range(1, size*size+1), size*size)\n    return [nums[i:i+size] for i in range(0, size*size, size)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of numbers, find the product of all the elements.\n    \"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n    return product\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == 120\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 349, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of numbers, find the product of all the elements.\n    \"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n    return product", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of numbers, return a new list with all the even numbers.\n    \"\"\"\n    return [num for num in nums if num % 2 == 0]\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g()) == [2, 4, 6, 8, 10]\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 349, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of numbers, return a new list with all the even numbers.\n    \"\"\"\n    return [num for num in nums if num % 2 == 0]", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of numbers, find the maximum difference between any two numbers in the list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            diff = abs(nums[i] - nums[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\ndef g(nums: List[int] = [1, 5, 2, 9, 8, 3]):\n    return nums\n\nassert f(g()) == 8\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 349, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of numbers, find the maximum difference between any two numbers in the list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            diff = abs(nums[i] - nums[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff", "solution_func": "def g(nums: List[int] = [1, 5, 2, 9, 8, 3]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list contains only prime numbers.\n\n    Sample Input:\n    arr = [2, 3, 5, 7, 11]\n\n    Sample Output:\n    True\n    \"\"\"\n    return all(is_prime(num) for num in arr)\n\ndef g():\n    return [2, 3, 5, 7, 11]\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 349, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list contains only prime numbers.\n\n    Sample Input:\n    arr = [2, 3, 5, 7, 11]\n\n    Sample Output:\n    True\n    \"\"\"\n    return all(is_prime(num) for num in arr)", "solution_func": "def g():\n    return [2, 3, 5, 7, 11]\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers `nums` and a target number `target`, find if there exists a pair of numbers in `nums`\n    such that their sum is equal to the target number.\n\n    For example, if nums = [1, 2, 3, 4, 5] and target = 9, the pair (4, 5) has a sum of the target number.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        if target - num in num_set:\n            return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (nums, target)\n\nassert f(*g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 349, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers `nums` and a target number `target`, find if there exists a pair of numbers in `nums`\n    such that their sum is equal to the target number.\n\n    For example, if nums = [1, 2, 3, 4, 5] and target = 9, the pair (4, 5) has a sum of the target number.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        if target - num in num_set:\n            return True\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (nums, target)", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list is in ascending order.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 349, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list is in ascending order.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of integers in the list that adds up to the target sum.\"\"\"\n    seen = set()\n    for num in lst:\n        if target_sum - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 349, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of integers in the list that adds up to the target sum.\"\"\"\n    seen = set()\n    for num in lst:\n        if target_sum - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a subsequence with consecutive elements that sums up to a target value.\n\n    A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    \n    Sample output:\n    True\n    \n    Explanation: The subsequence [2, 3, 4] sums up to the target value of 9.\n    \"\"\"\n    target = 9\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            subsequence = nums[i:j]\n            if len(subsequence) > 1 and all(subsequence[k] == subsequence[k-1] + 1 for k in range(1, len(subsequence))):\n                if sum(subsequence) == target:\n                    return True\n    \n    return False\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 350, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a subsequence with consecutive elements that sums up to a target value.\n\n    A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    \n    Sample output:\n    True\n    \n    Explanation: The subsequence [2, 3, 4] sums up to the target value of 9.\n    \"\"\"\n    target = 9\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            subsequence = nums[i:j]\n            if len(subsequence) > 1 and all(subsequence[k] == subsequence[k-1] + 1 for k in range(1, len(subsequence))):\n                if sum(subsequence) == target:\n                    return True\n    \n    return False", "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 4, 5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a subsequence that is a perfect square.\n\n    A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n    Sample input:\n    nums = [1, 4, 3, 8, 9]\n    \n    Sample output:\n    True\n    \n    Explanation: The subsequence [1, 4, 9] is a perfect square.\n    \"\"\"\n    squares = {1, 4, 9, 16, 25, 36, 49, 64, 81, 100}\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            subsequence = nums[i:j]\n            if any(num in squares for num in subsequence):\n                return True\n    \n    return False\n\ndef g() -> List[int]:\n    return [1, 4, 3, 8, 9]\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 350, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a subsequence that is a perfect square.\n\n    A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n    Sample input:\n    nums = [1, 4, 3, 8, 9]\n    \n    Sample output:\n    True\n    \n    Explanation: The subsequence [1, 4, 9] is a perfect square.\n    \"\"\"\n    squares = {1, 4, 9, 16, 25, 36, 49, 64, 81, 100}\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            subsequence = nums[i:j]\n            if any(num in squares for num in subsequence):\n                return True\n    \n    return False", "solution_func": "def g() -> List[int]:\n    return [1, 4, 3, 8, 9]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a subsequence where the product of its elements is a prime number.\n\n    A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    \n    Sample output:\n    True\n    \n    Explanation: The subsequence [2, 3, 5] has a product of 30, which is a prime number.\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            subsequence = nums[i:j]\n            product = 1\n            for num in subsequence:\n                product *= num\n            if is_prime(product):\n                return True\n    \n    return False\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 350, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a subsequence where the product of its elements is a prime number.\n\n    A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    \n    Sample output:\n    True\n    \n    Explanation: The subsequence [2, 3, 5] has a product of 30, which is a prime number.\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            subsequence = nums[i:j]\n            product = 1\n            for num in subsequence:\n                product *= num\n            if is_prime(product):\n                return True\n    \n    return False", "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if the given matrix is upper triangular.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [0, 4, 5], [0, 0, 6]]\n\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 350, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if the given matrix is upper triangular.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if matrix[i][j] != 0:\n                return False\n    return True", "solution_func": "def g():\n    return [[1, 2, 3], [0, 4, 5], [0, 0, 6]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if the given matrix is a permutation matrix.\"\"\"\n    n = len(matrix)\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    if sorted(row_sums) != [0] * (n - 1) + [1] and sorted(col_sums) != [0] * (n - 1) + [1]:\n        return False\n    return True\n\ndef g():\n    return [[0, 1, 0], [0, 0, 1], [1, 0, 0]]\n\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 350, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if the given matrix is a permutation matrix.\"\"\"\n    n = len(matrix)\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    if sorted(row_sums) != [0] * (n - 1) + [1] and sorted(col_sums) != [0] * (n - 1) + [1]:\n        return False\n    return True", "solution_func": "def g():\n    return [[0, 1, 0], [0, 0, 1], [1, 0, 0]]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if the given matrix is a symmetric matrix.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 350, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if the given matrix is a symmetric matrix.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Given a list of integers, find the two numbers that add up to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in nums_set and complement != num:\n            return True\n    return False\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 350, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Given a list of integers, find the two numbers that add up to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in nums_set and complement != num:\n            return True\n    return False", "solution_func": "def g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Given a list of integers, find the two numbers that add up to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in nums_set and complement != num:\n            return True\n    return False\n\ndef g(nums: List[int] = [1, 3, 6, 2, 9]):\n    return nums\n\nassert f(g()) == False\n\n", "emb": null, "idx_generation": 350, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Given a list of integers, find the two numbers that add up to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in nums_set and complement != num:\n            return True\n    return False", "solution_func": "def g(nums: List[int] = [1, 3, 6, 2, 9]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Given a list of integers, find the two numbers that add up to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in nums_set and complement != num:\n            return True\n    return False\n\ndef g(nums: List[int] = [5, 5, 5, 5, 5]):\n    return nums\n\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 350, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Given a list of integers, find the two numbers that add up to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in nums_set and complement != num:\n            return True\n    return False", "solution_func": "def g(nums: List[int] = [5, 5, 5, 5, 5]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix, return the product of all the elements.\n    \"\"\"\n    product = 1\n    for row in matrix:\n        for num in row:\n            product *= num\n    return product\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 362880\n\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 350, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix, return the product of all the elements.\n    \"\"\"\n    product = 1\n    for row in matrix:\n        for num in row:\n            product *= num\n    return product", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find if there exists a subarray whose product equals the target number.\n    If such a subarray exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(nums)):\n        total = nums[i]\n        if total == target:\n            return True\n        for j in range(i + 1, len(nums)):\n            total *= nums[j]\n            if total == target:\n                return True\n    return False\n\ndef g(nums: List[int] = [4, 2, -3, 1, 6], target: int = 0):\n    return nums\n\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 351, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find if there exists a subarray whose product equals the target number.\n    If such a subarray exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(nums)):\n        total = nums[i]\n        if total == target:\n            return True\n        for j in range(i + 1, len(nums)):\n            total *= nums[j]\n            if total == target:\n                return True\n    return False", "solution_func": "def g(nums: List[int] = [4, 2, -3, 1, 6], target: int = 0):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find if there exists a subarray whose average equals the target number.\n    If such a subarray exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(nums)):\n        total = nums[i]\n        if total == target:\n            return True\n        for j in range(i + 1, len(nums)):\n            total += nums[j]\n            if total / (j - i + 1) == target:\n                return True\n    return False\n\ndef g(nums: List[int] = [4, 2, -3, 1, 6], target: int = 0):\n    return nums\n\nassert f(g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 351, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find if there exists a subarray whose average equals the target number.\n    If such a subarray exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(nums)):\n        total = nums[i]\n        if total == target:\n            return True\n        for j in range(i + 1, len(nums)):\n            total += nums[j]\n            if total / (j - i + 1) == target:\n                return True\n    return False", "solution_func": "def g(nums: List[int] = [4, 2, -3, 1, 6], target: int = 0):\n    return nums", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find if there exists a subarray whose maximum element equals the target number.\n    If such a subarray exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(nums)):\n        maximum = nums[i]\n        if maximum == target:\n            return True\n        for j in range(i + 1, len(nums)):\n            maximum = max(maximum, nums[j])\n            if maximum == target:\n                return True\n    return False\n\ndef g(nums: List[int] = [4, 2, -3, 1, 6], target: int = 0):\n    return nums\n\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 351, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find if there exists a subarray whose maximum element equals the target number.\n    If such a subarray exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(nums)):\n        maximum = nums[i]\n        if maximum == target:\n            return True\n        for j in range(i + 1, len(nums)):\n            maximum = max(maximum, nums[j])\n            if maximum == target:\n                return True\n    return False", "solution_func": "def g(nums: List[int] = [4, 2, -3, 1, 6], target: int = 0):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(string: str, k: int) -> List[str]:\n    \"\"\"\n    Find all possible permutations of length k from the characters in the given string.\n    \"\"\"\n    perms = [''.join(p) for p in permutations(string, k)]\n    return perms\n\ndef g(string=\"abcde\", k=3):\n    return (string, k)\n\nassert f(*g()) == ['abc', 'abd', 'abe', 'acd', 'ace', 'ade', 'bcd', 'bce', 'bde', 'cde']\n\n\n", "emb": null, "idx_generation": 351, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(string: str, k: int) -> List[str]:\n    \"\"\"\n    Find all possible permutations of length k from the characters in the given string.\n    \"\"\"\n    perms = [''.join(p) for p in permutations(string, k)]\n    return perms", "solution_func": "def g(string=\"abcde\", k=3):\n    return (string, k)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int) -> int:\n    \"\"\"\n    Find the number of trailing zeros in n factorial.\n    \"\"\"\n    count = 0\n    while n >= 5:\n        n = math.floor(n / 5)\n        count += n\n    return count\n\ndef g(n=20):\n    return n\n\nassert f(g()) == 4\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 351, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int) -> int:\n    \"\"\"\n    Find the number of trailing zeros in n factorial.\n    \"\"\"\n    count = 0\n    while n >= 5:\n        n = math.floor(n / 5)\n        count += n\n    return count", "solution_func": "def g(n=20):\n    return n", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(lst: List[int], k: int) -> List[int]:\n    \"\"\"\n    Shuffle the elements in the given list k times.\n    \"\"\"\n    for _ in range(k):\n        random.shuffle(lst)\n    return lst\n\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=3):\n    return (lst, k)\n\nassert f(*g()) != [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 351, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(lst: List[int], k: int) -> List[int]:\n    \"\"\"\n    Shuffle the elements in the given list k times.\n    \"\"\"\n    for _ in range(k):\n        random.shuffle(lst)\n    return lst", "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=3):\n    return (lst, k)", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square\n    \"\"\"\n    n = len(matrix)\n    target_sum = n * (n**2 + 1) // 2\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != target_sum:\n            return False\n    # Check diagonals\n    main_diag_sum = sum(matrix[i][i] for i in range(n))\n    anti_diag_sum = sum(matrix[i][n-i-1] for i in range(n))\n    if main_diag_sum != target_sum or anti_diag_sum != target_sum:\n        return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a magic square of the given size\n    \"\"\"\n    magic_square = [[0 for _ in range(size)] for _ in range(size)]\n    i, j = 0, size // 2\n    for num in range(1, size**2 + 1):\n        magic_square[i][j] = num\n        i -= 1\n        j += 1\n        if num % size == 0:\n            i += 2\n            j -= 1\n        elif i < 0:\n            i = size - 1\n        elif j == size:\n            j = 0\n    return magic_square\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 351, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square\n    \"\"\"\n    n = len(matrix)\n    target_sum = n * (n**2 + 1) // 2\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != target_sum:\n            return False\n    # Check diagonals\n    main_diag_sum = sum(matrix[i][i] for i in range(n))\n    anti_diag_sum = sum(matrix[i][n-i-1] for i in range(n))\n    if main_diag_sum != target_sum or anti_diag_sum != target_sum:\n        return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a magic square of the given size\n    \"\"\"\n    magic_square = [[0 for _ in range(size)] for _ in range(size)]\n    i, j = 0, size // 2\n    for num in range(1, size**2 + 1):\n        magic_square[i][j] = num\n        i -= 1\n        j += 1\n        if num % size == 0:\n            i += 2\n            j -= 1\n        elif i < 0:\n            i = size - 1\n        elif j == size:\n            j = 0\n    return magic_square", "map_ix": [1, 0, 1, 1, 0, 0, 1, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square\n    \"\"\"\n    n = len(matrix)\n    target_sum = n * (n**2 + 1) // 2\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != target_sum:\n            return False\n    # Check diagonals\n    main_diag_sum = sum(matrix[i][i] for i in range(n))\n    anti_diag_sum = sum(matrix[i][n-i-1] for i in range(n))\n    if main_diag_sum != target_sum or anti_diag_sum != target_sum:\n        return False\n    return True\n\ndef g(size=4):\n    \"\"\"\n    Generate a magic square of the given size\n    \"\"\"\n    magic_square = [[0 for _ in range(size)] for _ in range(size)]\n    i, j = 0, size // 2\n    for num in range(1, size**2 + 1):\n        magic_square[i][j] = num\n        i -= 1\n        j += 1\n        if num % size == 0:\n            i += 2\n            j -= 1\n        elif i < 0:\n            i = size - 1\n        elif j == size:\n            j = 0\n    return magic_square\n\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 351, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square\n    \"\"\"\n    n = len(matrix)\n    target_sum = n * (n**2 + 1) // 2\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != target_sum:\n            return False\n    # Check diagonals\n    main_diag_sum = sum(matrix[i][i] for i in range(n))\n    anti_diag_sum = sum(matrix[i][n-i-1] for i in range(n))\n    if main_diag_sum != target_sum or anti_diag_sum != target_sum:\n        return False\n    return True", "solution_func": "def g(size=4):\n    \"\"\"\n    Generate a magic square of the given size\n    \"\"\"\n    magic_square = [[0 for _ in range(size)] for _ in range(size)]\n    i, j = 0, size // 2\n    for num in range(1, size**2 + 1):\n        magic_square[i][j] = num\n        i -= 1\n        j += 1\n        if num % size == 0:\n            i += 2\n            j -= 1\n        elif i < 0:\n            i = size - 1\n        elif j == size:\n            j = 0\n    return magic_square", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square\n    \"\"\"\n    n = len(matrix)\n    target_sum = n * (n**2 + 1) // 2\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != target_sum:\n            return False\n    # Check diagonals\n    main_diag_sum = sum(matrix[i][i] for i in range(n))\n    anti_diag_sum = sum(matrix[i][n-i-1] for i in range(n))\n    if main_diag_sum != target_sum or anti_diag_sum != target_sum:\n        return False\n    return True\n\ndef g(size=5):\n    \"\"\"\n    Generate a magic square of the given size\n    \"\"\"\n    magic_square = [[0 for _ in range(size)] for _ in range(size)]\n    i, j = 0, size // 2\n    for num in range(1, size**2 + 1):\n        magic_square[i][j] = num\n        i -= 1\n        j += 1\n        if num % size == 0:\n            i += 2\n            j -= 1\n        elif i < 0:\n            i = size - 1\n        elif j == size:\n            j = 0\n    return magic_square\n\nassert f(g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 351, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square\n    \"\"\"\n    n = len(matrix)\n    target_sum = n * (n**2 + 1) // 2\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != target_sum:\n            return False\n    # Check diagonals\n    main_diag_sum = sum(matrix[i][i] for i in range(n))\n    anti_diag_sum = sum(matrix[i][n-i-1] for i in range(n))\n    if main_diag_sum != target_sum or anti_diag_sum != target_sum:\n        return False\n    return True", "solution_func": "def g(size=5):\n    \"\"\"\n    Generate a magic square of the given size\n    \"\"\"\n    magic_square = [[0 for _ in range(size)] for _ in range(size)]\n    i, j = 0, size // 2\n    for num in range(1, size**2 + 1):\n        magic_square[i][j] = num\n        i -= 1\n        j += 1\n        if num % size == 0:\n            i += 2\n            j -= 1\n        elif i < 0:\n            i = size - 1\n        elif j == size:\n            j = 0\n    return magic_square", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are three numbers in the array that sum up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5], target=12):\n    return arr, target\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 351, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are three numbers in the array that sum up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False", "solution_func": "def g(arr=[1, 2, 3, 4, 5], target=12):\n    return arr, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(counts: List[int], target_prob=0.5) -> bool:\n    \"\"\"\n    Suppose a list of m 1's and n -1's are permuted at random.\n    What is the probability that all of the cumulative sums are positive?\n    The goal is to find counts = [m, n] that make the probability of the ballot problem close to target_prob.\n    \"\"\"\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06\ndef g(target_prob = 0.5):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 352, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(counts: List[int], target_prob=0.5) -> bool:\n    \"\"\"\n    Suppose a list of m 1's and n -1's are permuted at random.\n    What is the probability that all of the cumulative sums are positive?\n    The goal is to find counts = [m, n] that make the probability of the ballot problem close to target_prob.\n    \"\"\"\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06", "solution_func": "def g(target_prob = 0.5):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]", "map_ix": [0, 1, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(counts: List[int], target_prob=0.75) -> bool:\n    \"\"\"\n    Suppose a list of m 1's and n -1's are permuted at random.\n    What is the probability that all of the cumulative sums are positive?\n    The goal is to find counts = [m, n] that make the probability of the ballot problem close to target_prob.\n    \"\"\"\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06\ndef g(target_prob = 0.75):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 352, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(counts: List[int], target_prob=0.75) -> bool:\n    \"\"\"\n    Suppose a list of m 1's and n -1's are permuted at random.\n    What is the probability that all of the cumulative sums are positive?\n    The goal is to find counts = [m, n] that make the probability of the ballot problem close to target_prob.\n    \"\"\"\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06", "solution_func": "def g(target_prob = 0.75):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]", "map_ix": [0, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(counts: List[int], target_prob=0.25) -> bool:\n    \"\"\"\n    Suppose a list of m 1's and n -1's are permuted at random.\n    What is the probability that all of the cumulative sums are positive?\n    The goal is to find counts = [m, n] that make the probability of the ballot problem close to target_prob.\n    \"\"\"\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06\ndef g(target_prob = 0.25):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 352, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(counts: List[int], target_prob=0.25) -> bool:\n    \"\"\"\n    Suppose a list of m 1's and n -1's are permuted at random.\n    What is the probability that all of the cumulative sums are positive?\n    The goal is to find counts = [m, n] that make the probability of the ballot problem close to target_prob.\n    \"\"\"\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06", "solution_func": "def g(target_prob = 0.25):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]", "map_ix": [0, 1, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of numbers, return the sum of all the positive numbers.\n    \"\"\"\n    total = 0\n    for num in nums:\n        if num > 0:\n            total += num\n    return total\n\ndef g(nums: List[int] = [1, -2, 3, -4, 5]):\n    return nums\n\nassert f(g()) == 9\n\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 352, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of numbers, return the sum of all the positive numbers.\n    \"\"\"\n    total = 0\n    for num in nums:\n        if num > 0:\n            total += num\n    return total", "solution_func": "def g(nums: List[int] = [1, -2, 3, -4, 5]):\n    return nums", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, divisor: int = 2) -> bool:\n    \"\"\"\n    Check if the given number is divisible by the divisor without leaving a remainder.\n    \"\"\"\n    return n % divisor == 0\n\ndef g(n: int = 10, divisor: int = 2):\n    return n, divisor\n\nassert f(*g()) == True\n\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 352, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, divisor: int = 2) -> bool:\n    \"\"\"\n    Check if the given number is divisible by the divisor without leaving a remainder.\n    \"\"\"\n    return n % divisor == 0", "solution_func": "def g(n: int = 10, divisor: int = 2):\n    return n, divisor", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix, return a new matrix with the rows and columns swapped.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    new_matrix = [[0 for _ in range(rows)] for _ in range(cols)]\n\n    for i in range(rows):\n        for j in range(cols):\n            new_matrix[j][i] = matrix[i][j]\n\n    return new_matrix\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 352, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix, return a new matrix with the rows and columns swapped.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    new_matrix = [[0 for _ in range(rows)] for _ in range(cols)]\n\n    for i in range(rows):\n        for j in range(cols):\n            new_matrix[j][i] = matrix[i][j]\n\n    return new_matrix", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that add up to the target.\"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 15):\n    return (nums, target)\n\nassert f(*g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0], "idx_generation": 352, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that add up to the target.\"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 15):\n    return (nums, target)", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"Return the list of elements in reverse order.\"\"\"\n    return nums[::-1]\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return (nums,)\n\nassert f(*g()) == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 352, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"Return the list of elements in reverse order.\"\"\"\n    return nums[::-1]", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return (nums,)", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Rotate the given matrix 90 degrees clockwise.\n\n    Sample input:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Sample output:\n    [[7, 4, 1],\n     [8, 5, 2],\n     [9, 6, 3]]\n    \"\"\"\n    n = len(matrix)\n    for i in range(n // 2):\n        for j in range(i, n - i - 1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[n - j - 1][i]\n            matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1]\n            matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1]\n            matrix[j][n - i - 1] = temp\n    return matrix\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(*g()) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n\n", "emb": null, "idx_generation": 352, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Rotate the given matrix 90 degrees clockwise.\n\n    Sample input:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Sample output:\n    [[7, 4, 1],\n     [8, 5, 2],\n     [9, 6, 3]]\n    \"\"\"\n    n = len(matrix)\n    for i in range(n // 2):\n        for j in range(i, n - i - 1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[n - j - 1][i]\n            matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1]\n            matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1]\n            matrix[j][n - i - 1] = temp\n    return matrix", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the product of all the odd numbers in the list.\n    \"\"\"\n    odd_product = 1\n    for num in nums:\n        if num % 2 != 0:\n            odd_product *= num\n    return odd_product\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g()) == 945\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 352, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the product of all the odd numbers in the list.\n    \"\"\"\n    odd_product = 1\n    for num in nums:\n        if num % 2 != 0:\n            odd_product *= num\n    return odd_product", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list in reversed order.\n    \"\"\"\n    return nums[::-1]\n\nassert f(g([3, 4, -7, 2, 1, 3, 1]), 4)\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 353, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False", "solution_func": "def g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list in reversed order.\n    \"\"\"\n    return nums[::-1]", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list multiplied by 2.\n    \"\"\"\n    return [num * 2 for num in nums]\n\nassert f(g([3, 4, -7, 2, 1, 3, 1]), 4)\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 353, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False", "solution_func": "def g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list multiplied by 2.\n    \"\"\"\n    return [num * 2 for num in nums]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list with duplicates removed.\n    \"\"\"\n    return list(set(nums))\n\nassert f(g([3, 4, -7, 2, 1, 3, 1]), 4)\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 353, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False", "solution_func": "def g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list with duplicates removed.\n    \"\"\"\n    return list(set(nums))", "map_ix": [1, 0, 1, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"\n    Check if the target word is present in the list of words.\n    \"\"\"\n\n    return any(word == target for word in words)\n\ndef g():\n    return ['hello', 'world', 'python', 'programming', 'puzzles']\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 353, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"\n    Check if the target word is present in the list of words.\n    \"\"\"\n\n    return any(word == target for word in words)", "solution_func": "def g():\n    return ['hello', 'world', 'python', 'programming', 'puzzles']", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(dictionary: Dict[str, int], target='python') -> bool:\n    \"\"\"\n    Check if the target key is present in the dictionary.\n    \"\"\"\n\n    return target in dictionary.keys()\n\ndef g():\n    return {'python': 3, 'java': 8, 'c++': 14, 'javascript': 5}\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 353, "target_skills": null, "problem_func": "from typing import*\nfrom typing import Dict\n\ndef f(dictionary: Dict[str, int], target='python') -> bool:\n    \"\"\"\n    Check if the target key is present in the dictionary.\n    \"\"\"\n\n    return target in dictionary.keys()", "solution_func": "def g():\n    return {'python': 3, 'java': 8, 'c++': 14, 'javascript': 5}", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(numbers: tuple, target=50) -> bool:\n    \"\"\"\n    Check if the target number is present in the tuple.\n    \"\"\"\n\n    return target in numbers\n\ndef g():\n    return (10, 20, 30, 40, 50, 60, 70, 80, 90, 100)\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 353, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: tuple, target=50) -> bool:\n    \"\"\"\n    Check if the target number is present in the tuple.\n    \"\"\"\n\n    return target in numbers", "solution_func": "def g():\n    return (10, 20, 30, 40, 50, 60, 70, 80, 90, 100)", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of numbers, return the product of all the even numbers.\n    \"\"\"\n    product = 1\n    for num in nums:\n        if num % 2 == 0:\n            product *= num\n    return product\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == 8\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 353, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of numbers, return the product of all the even numbers.\n    \"\"\"\n    product = 1\n    for num in nums:\n        if num % 2 == 0:\n            product *= num\n    return product", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(lst1: List[int], lst2: List[int]) -> bool:\n    \"\"\"\n    Check if the two lists have at least one common element.\n    \"\"\"\n    for num1 in lst1:\n        if num1 in lst2:\n            return True\n    return False\n\ndef g(lst1: List[int] = [1, 2, 3, 4, 5], lst2: List[int] = [6, 7, 8, 9, 10]):\n    return lst1, lst2\n\nassert f(*g()) == False\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 353, "target_skills": null, "problem_func": "from typing import*\n\ndef f(lst1: List[int], lst2: List[int]) -> bool:\n    \"\"\"\n    Check if the two lists have at least one common element.\n    \"\"\"\n    for num1 in lst1:\n        if num1 in lst2:\n            return True\n    return False", "solution_func": "def g(lst1: List[int] = [1, 2, 3, 4, 5], lst2: List[int] = [6, 7, 8, 9, 10]):\n    return lst1, lst2", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find all pairs of numbers in the list that sum up to the target.\n    Return the pairs as a list of tuples.\n    \"\"\"\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                pairs.append((nums[i], nums[j]))\n    return pairs\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 6):\n    return nums, target\n\nassert f(*g()) == [(1, 5), (2, 4)]\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 353, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find all pairs of numbers in the list that sum up to the target.\n    Return the pairs as a list of tuples.\n    \"\"\"\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                pairs.append((nums[i], nums[j]))\n    return pairs", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 6):\n    return nums, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if there exists a pair of numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return arr, target\n\nassert f(*g()) == True\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 353, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if there exists a pair of numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return arr, target", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if there exists a pair of numbers in the list that multiply to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] == target:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 10):\n    return arr, target\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 354, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if there exists a pair of numbers in the list that multiply to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] == target:\n                return True\n    return False", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 10):\n    return arr, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if there exists a pair of numbers in the list that subtract to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] - arr[j] == target or arr[j] - arr[i] == target:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 1):\n    return arr, target\n\nassert f(*g()) == True\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 354, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if there exists a pair of numbers in the list that subtract to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] - arr[j] == target or arr[j] - arr[i] == target:\n                return True\n    return False", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 1):\n    return arr, target", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if there exists a pair of numbers in the list that divide evenly into the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if target % arr[i] == 0 and target % arr[j] == 0:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 10):\n    return arr, target\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 354, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if there exists a pair of numbers in the list that divide evenly into the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if target % arr[i] == 0 and target % arr[j] == 0:\n                return True\n    return False", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 10):\n    return arr, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums: List[int] = [2, 3, 5, 7, 5, 3, 2]):\n    return nums\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 354, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward.\n    \"\"\"\n    return nums == nums[::-1]", "solution_func": "def g(nums: List[int] = [2, 3, 5, 7, 5, 3, 2]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums: List[int] = [10, 20, 30, 40, 30, 20, 10]):\n    return nums\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 354, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward.\n    \"\"\"\n    return nums == nums[::-1]", "solution_func": "def g(nums: List[int] = [10, 20, 30, 40, 30, 20, 10]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums: List[int] = [4, 7, 8, 9, 8, 7, 4]):\n    return nums\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 354, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward.\n    \"\"\"\n    return nums == nums[::-1]", "solution_func": "def g(nums: List[int] = [4, 7, 8, 9, 8, 7, 4]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that sums up to the target value.\n    \"\"\"\n    def find_combination(start, curr_sum):\n        if curr_sum == target:\n            return True\n        if curr_sum > target or start == len(nums):\n            return False\n        if find_combination(start + 1, curr_sum + nums[start]):\n            return True\n        if find_combination(start + 1, curr_sum):\n            return True\n        return False\n\n    return find_combination(0, 0)\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is.\n    \"\"\"\n    return nums\n\nassert f(g([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]))\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 354, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that sums up to the target value.\n    \"\"\"\n    def find_combination(start, curr_sum):\n        if curr_sum == target:\n            return True\n        if curr_sum > target or start == len(nums):\n            return False\n        if find_combination(start + 1, curr_sum + nums[start]):\n            return True\n        if find_combination(start + 1, curr_sum):\n            return True\n        return False\n\n    return find_combination(0, 0)", "solution_func": "def g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is.\n    \"\"\"\n    return nums", "map_ix": [0, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, find the minimum element in the matrix.\n    \"\"\"\n    min_element = float('inf')\n    \n    for row in matrix:\n        for element in row:\n            if element < min_element:\n                min_element = element\n        \n    return min_element\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 1\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 354, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, find the minimum element in the matrix.\n    \"\"\"\n    min_element = float('inf')\n    \n    for row in matrix:\n        for element in row:\n            if element < min_element:\n                min_element = element\n        \n    return min_element", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that sums up to the target value.\n    \"\"\"\n    def find_combination(start, curr_sum):\n        if curr_sum == target:\n            return True\n        if curr_sum > target or start == len(nums):\n            return False\n        if find_combination(start + 1, curr_sum + nums[start]):\n            return True\n        if find_combination(start + 1, curr_sum):\n            return True\n        return False\n\n    return find_combination(0, 0)\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is.\n    \"\"\"\n    return nums\n\nassert f(g([1, 2, 3, 4, 5]), target=10)\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 354, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that sums up to the target value.\n    \"\"\"\n    def find_combination(start, curr_sum):\n        if curr_sum == target:\n            return True\n        if curr_sum > target or start == len(nums):\n            return False\n        if find_combination(start + 1, curr_sum + nums[start]):\n            return True\n        if find_combination(start + 1, curr_sum):\n            return True\n        return False\n\n    return find_combination(0, 0)", "solution_func": "def g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is.\n    \"\"\"\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given an n x n matrix, determine if it is a valid Sudoku solution.\n\n    A valid Sudoku solution must satisfy the following rules:\n    1. Each row must contain the digits 1-9 without repetition.\n    2. Each column must contain the digits 1-9 without repetition.\n    3. Each of the 9 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition.\n\n    Return True if the matrix is a valid Sudoku solution, otherwise return False.\n    \"\"\"\n    # Check rows\n    for row in matrix:\n        if len(set(row)) != len(row):\n            return False\n\n    # Check columns\n    for col in zip(*matrix):\n        if len(set(col)) != len(col):\n            return False\n\n    # Check sub-boxes\n    for i in range(0, 9, 3):\n        for j in range(0, 9, 3):\n            sub_box = [matrix[x][y] for x in range(i, i + 3) for y in range(j, j + 3)]\n            if len(set(sub_box)) != len(sub_box):\n                return False\n\n    return True\n\ndef g() -> List[List[int]]:\n    return [\n        [5, 3, 0, 0, 7, 0, 0, 0, 0],\n        [6, 0, 0, 1, 9, 5, 0, 0, 0],\n        [0, 9, 8, 0, 0, 0, 0, 6, 0],\n        [8, 0, 0, 0, 6, 0, 0, 0, 3],\n        [4, 0, 0, 8, 0, 3, 0, 0, 1],\n        [7, 0, 0, 0, 2, 0, 0, 0, 6],\n        [0, 6, 0, 0, 0, 0, 2, 8, 0],\n        [0, 0, 0, 4, 1, 9, 0, 0, 5],\n        [0, 0, 0, 0, 8, 0, 0, 7, 9]\n    ]\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 354, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given an n x n matrix, determine if it is a valid Sudoku solution.\n\n    A valid Sudoku solution must satisfy the following rules:\n    1. Each row must contain the digits 1-9 without repetition.\n    2. Each column must contain the digits 1-9 without repetition.\n    3. Each of the 9 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition.\n\n    Return True if the matrix is a valid Sudoku solution, otherwise return False.\n    \"\"\"\n    # Check rows\n    for row in matrix:\n        if len(set(row)) != len(row):\n            return False\n\n    # Check columns\n    for col in zip(*matrix):\n        if len(set(col)) != len(col):\n            return False\n\n    # Check sub-boxes\n    for i in range(0, 9, 3):\n        for j in range(0, 9, 3):\n            sub_box = [matrix[x][y] for x in range(i, i + 3) for y in range(j, j + 3)]\n            if len(set(sub_box)) != len(sub_box):\n                return False\n\n    return True", "solution_func": "def g() -> List[List[int]]:\n    return [\n        [5, 3, 0, 0, 7, 0, 0, 0, 0],\n        [6, 0, 0, 1, 9, 5, 0, 0, 0],\n        [0, 9, 8, 0, 0, 0, 0, 6, 0],\n        [8, 0, 0, 0, 6, 0, 0, 0, 3],\n        [4, 0, 0, 8, 0, 3, 0, 0, 1],\n        [7, 0, 0, 0, 2, 0, 0, 0, 6],\n        [0, 6, 0, 0, 0, 0, 2, 8, 0],\n        [0, 0, 0, 4, 1, 9, 0, 0, 5],\n        [0, 0, 0, 0, 8, 0, 0, 7, 9]\n    ]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target number, find and return a list of indices of all occurrences of the target number in the list.\n    \"\"\"\n    indices = []\n    for i in range(len(nums)):\n        if nums[i] == target:\n            indices.append(i)\n    return indices\n\ndef g():\n    nums = [1, 2, 3, 4, 5, 5, 6, 7, 5]\n    target = 5\n    return (nums, target)\n\nassert f(*g()) == [4, 5, 8]\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 355, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target number, find and return a list of indices of all occurrences of the target number in the list.\n    \"\"\"\n    indices = []\n    for i in range(len(nums)):\n        if nums[i] == target:\n            indices.append(i)\n    return indices", "solution_func": "def g():\n    nums = [1, 2, 3, 4, 5, 5, 6, 7, 5]\n    target = 5\n    return (nums, target)", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substring: str) -> bool:\n    \"\"\"\n    Given a string and a substring, check if the substring appears more than once consecutively in the string.\n    \"\"\"\n    return substring * 2 in s\n\ndef g():\n    s = \"abcabcabc\"\n    substring = \"abc\"\n    return (s, substring)\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0], "idx_generation": 355, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substring: str) -> bool:\n    \"\"\"\n    Given a string and a substring, check if the substring appears more than once consecutively in the string.\n    \"\"\"\n    return substring * 2 in s", "solution_func": "def g():\n    s = \"abcabcabc\"\n    substring = \"abc\"\n    return (s, substring)", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix of integers, return a new matrix where each element is replaced by the sum of its row and column indices.\n    \"\"\"\n    new_matrix = []\n    for i in range(len(matrix)):\n        row = []\n        for j in range(len(matrix[i])):\n            row.append(i + j)\n        new_matrix.append(row)\n    return new_matrix\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return (matrix,)\n\nassert f(*g()) == [[0, 1, 2], [1, 2, 3], [2, 3, 4]]\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 355, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix of integers, return a new matrix where each element is replaced by the sum of its row and column indices.\n    \"\"\"\n    new_matrix = []\n    for i in range(len(matrix)):\n        row = []\n        for j in range(len(matrix[i])):\n            row.append(i + j)\n        new_matrix.append(row)\n    return new_matrix", "solution_func": "def g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return (matrix,)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, determine if it is a palindrome.\n\n    Example:\n    s = \"racecar\"\n\n    Output:\n    True\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s: str = \"racecar\"):\n    return s\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 355, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, determine if it is a palindrome.\n\n    Example:\n    s = \"racecar\"\n\n    Output:\n    True\n    \"\"\"\n    return s == s[::-1]", "solution_func": "def g(s: str = \"racecar\"):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix, transpose the matrix.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Output:\n    [[1, 4, 7],\n     [2, 5, 8],\n     [3, 6, 9]]\n    \"\"\"\n    return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n\ndef g():\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]\n\nassert f(g()) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 355, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix, transpose the matrix.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Output:\n    [[1, 4, 7],\n     [2, 5, 8],\n     [3, 6, 9]]\n    \"\"\"\n    return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]", "solution_func": "def g():\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[int]) -> int:\n    \"\"\"\n    Find the maximum sum of any contiguous subarray in the given list.\n\n    Example:\n    lst = [1, -2, 3, -4, 5]\n\n    Output:\n    5 (sum of [3, -4, 5])\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    for num in lst:\n        curr_sum = max(num, curr_sum + num)\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n\ndef g():\n    return [1, -2, 3, -4, 5]\n\nassert f(g()) == 5\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 355, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int]) -> int:\n    \"\"\"\n    Find the maximum sum of any contiguous subarray in the given list.\n\n    Example:\n    lst = [1, -2, 3, -4, 5]\n\n    Output:\n    5 (sum of [3, -4, 5])\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    for num in lst:\n        curr_sum = max(num, curr_sum + num)\n        max_sum = max(max_sum, curr_sum)\n    return max_sum", "solution_func": "def g():\n    return [1, -2, 3, -4, 5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum product of a subarray within the list and return it.\n\n    Example:\n    nums = [2, -1, 3, -4, 0]\n    The maximum subarray product is 12.\n\n    Therefore, f(nums) returns 12.\n    \"\"\"\n    max_product = float('-inf')\n    curr_product = 1\n    for num in nums:\n        curr_product *= num\n        max_product = max(max_product, curr_product)\n        if curr_product < 1:\n            curr_product = 1\n    return max_product\n\ndef g(nums: List[int] = [2, -1, 3, -4, 0]):\n    return nums\n\nassert f(g()) == 12\n\n", "emb": null, "idx_generation": 355, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum product of a subarray within the list and return it.\n\n    Example:\n    nums = [2, -1, 3, -4, 0]\n    The maximum subarray product is 12.\n\n    Therefore, f(nums) returns 12.\n    \"\"\"\n    max_product = float('-inf')\n    curr_product = 1\n    for num in nums:\n        curr_product *= num\n        max_product = max(max_product, curr_product)\n        if curr_product < 1:\n            curr_product = 1\n    return max_product", "solution_func": "def g(nums: List[int] = [2, -1, 3, -4, 0]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix, return the sum of the diagonal elements.\n\n    Example:\n    matrix = [[1, 2, 3], \n              [4, 5, 6], \n              [7, 8, 9]]\n    The diagonal elements are [1, 5, 9].\n    The sum of the diagonal elements is 1 + 5 + 9 = 15.\n\n    Therefore, f(matrix) returns 15.\n    \"\"\"\n    n = len(matrix)\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += matrix[i][i]\n    return diagonal_sum\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 15\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 355, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix, return the sum of the diagonal elements.\n\n    Example:\n    matrix = [[1, 2, 3], \n              [4, 5, 6], \n              [7, 8, 9]]\n    The diagonal elements are [1, 5, 9].\n    The sum of the diagonal elements is 1 + 5 + 9 = 15.\n\n    Therefore, f(matrix) returns 15.\n    \"\"\"\n    n = len(matrix)\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += matrix[i][i]\n    return diagonal_sum", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return the list with all duplicate elements removed and the remaining elements sorted in ascending order.\n\n    Example:\n    nums = [2, 4, 1, 3, 2, 5, 1]\n    The list without duplicates and sorted in ascending order is [1, 2, 3, 4, 5].\n\n    Therefore, f(nums) returns [1, 2, 3, 4, 5].\n    \"\"\"\n    return sorted(list(set(nums)))\n\ndef g(nums: List[int] = [2, 4, 1, 3, 2, 5, 1]):\n    return nums\n\nassert f(g()) == [1, 2, 3, 4, 5]\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 355, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return the list with all duplicate elements removed and the remaining elements sorted in ascending order.\n\n    Example:\n    nums = [2, 4, 1, 3, 2, 5, 1]\n    The list without duplicates and sorted in ascending order is [1, 2, 3, 4, 5].\n\n    Therefore, f(nums) returns [1, 2, 3, 4, 5].\n    \"\"\"\n    return sorted(list(set(nums)))", "solution_func": "def g(nums: List[int] = [2, 4, 1, 3, 2, 5, 1]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, a=5, b=10) -> bool:\n    \"\"\"Check if the sum of n squared and b is equal to a squared\"\"\"\n    return n**2 + b == a**2\ndef g(a = 5, b = 10):\n    if a == 0:\n        return b**2\n    for n in [a**2 - b, a**2 + b]:\n        if n**2 + b == a**2:\n            return n\nassert f(g())\n", "emb": null, "idx_generation": 355, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=5, b=10) -> bool:\n    \"\"\"Check if the sum of n squared and b is equal to a squared\"\"\"\n    return n**2 + b == a**2", "solution_func": "def g(a = 5, b = 10):\n    if a == 0:\n        return b**2\n    for n in [a**2 - b, a**2 + b]:\n        if n**2 + b == a**2:\n            return n", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subsequence of the list whose product is equal to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][1] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j // nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(nums=[2, 4, 6, 8], target=48):\n    return nums, target\n\nassert f(*g()) == True\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 356, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subsequence of the list whose product is equal to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][1] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j // nums[i - 1]]\n\n    return dp[n][target]", "solution_func": "def g(nums=[2, 4, 6, 8], target=48):\n    return nums, target", "map_ix": [1, 1, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subsequence of the list whose sum is equal to the target value and the subsequence has at least 2 elements.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target] and sum(nums) >= target\n\ndef g(nums=[2, 4, 6, 8], target=10):\n    return nums, target\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 356, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subsequence of the list whose sum is equal to the target value and the subsequence has at least 2 elements.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target] and sum(nums) >= target", "solution_func": "def g(nums=[2, 4, 6, 8], target=10):\n    return nums, target", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"Find the minimum number of elements from the list whose sum is equal to the target value.\"\"\"\n    n = len(nums)\n    dp = [[float('inf')] * (target + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - nums[i - 1]] + 1)\n\n    return dp[n][target]\n\ndef g(nums=[2, 4, 6, 8], target=10):\n    return nums, target\n\nassert f(*g()) == 2\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 356, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"Find the minimum number of elements from the list whose sum is equal to the target value.\"\"\"\n    n = len(nums)\n    dp = [[float('inf')] * (target + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - nums[i - 1]] + 1)\n\n    return dp[n][target]", "solution_func": "def g(nums=[2, 4, 6, 8], target=10):\n    return nums, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n    A symmetric matrix is a square matrix that is equal to its transpose.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    \"\"\"\n    Generate a symmetric matrix.\n    \"\"\"\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 356, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n    A symmetric matrix is a square matrix that is equal to its transpose.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g():\n    \"\"\"\n    Generate a symmetric matrix.\n    \"\"\"\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find two numbers in the given list that add up to the target value.\n    Return the indices of the two numbers as a list.\n    \"\"\"\n    num_dict = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_dict:\n            return [num_dict[complement], i]\n        num_dict[num] = i\n    return []\n\ndef g(target: int = 9):\n    \"\"\"\n    Generate a list of numbers where two of the numbers add up to the target value.\n    \"\"\"\n    return [2, 4, 7, 11, 15]\n\nassert f(g(), 9) == [0, 2]\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 356, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find two numbers in the given list that add up to the target value.\n    Return the indices of the two numbers as a list.\n    \"\"\"\n    num_dict = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_dict:\n            return [num_dict[complement], i]\n        num_dict[num] = i\n    return []", "solution_func": "def g(target: int = 9):\n    \"\"\"\n    Generate a list of numbers where two of the numbers add up to the target value.\n    \"\"\"\n    return [2, 4, 7, 11, 15]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of numbers, find the sum of all the numbers in the matrix.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    output: 45\n    \"\"\"\n    return sum(sum(row) for row in matrix)\n\ndef g():\n    \"\"\"\n    Generate a matrix of numbers.\n    \"\"\"\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]\n\nassert f(g()) == 45\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 356, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of numbers, find the sum of all the numbers in the matrix.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    output: 45\n    \"\"\"\n    return sum(sum(row) for row in matrix)", "solution_func": "def g():\n    \"\"\"\n    Generate a matrix of numbers.\n    \"\"\"\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers `nums` and a target integer `target`, find if there exists a pair of numbers in the list that sums up to the target.\n    Return True if such a pair exists, False otherwise.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n    Output: True\n    Explanation: The pair of numbers [2, 5] sums up to 7.\n    \"\"\"\n    seen = set()\n\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return (nums, target)\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 356, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers `nums` and a target integer `target`, find if there exists a pair of numbers in the list that sums up to the target.\n    Return True if such a pair exists, False otherwise.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n    Output: True\n    Explanation: The pair of numbers [2, 5] sums up to 7.\n    \"\"\"\n    seen = set()\n\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return (nums, target)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n: int) -> bool:\n    \"\"\"\n    Given a list of integers `nums` and an integer `n`, find if there exists a subsequence in the list that sums up to exactly n.\n    Return True if such a subsequence exists, False otherwise.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    n = 7\n    Output: True\n    Explanation: The subsequence [2, 5] sums up to 7.\n    \"\"\"\n    dp = [False] * (n + 1)\n    dp[0] = True\n\n    for num in nums:\n        for i in range(n, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n\n    return dp[n]\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], n: int = 7):\n    return (nums, n)\n\nassert f(*g()) == True\n\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 356, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n: int) -> bool:\n    \"\"\"\n    Given a list of integers `nums` and an integer `n`, find if there exists a subsequence in the list that sums up to exactly n.\n    Return True if such a subsequence exists, False otherwise.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    n = 7\n    Output: True\n    Explanation: The subsequence [2, 5] sums up to 7.\n    \"\"\"\n    dp = [False] * (n + 1)\n    dp[0] = True\n\n    for num in nums:\n        for i in range(n, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n\n    return dp[n]", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], n: int = 7):\n    return (nums, n)", "map_ix": [1, 0, 1, 0, 0, 0, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers `nums` and an integer `k`, find if there exists a subarray in the list that sums up to a multiple of k.\n    Return True if such a subarray exists, False otherwise.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    k = 6\n    Output: True\n    Explanation: The subarray [1, 2, 3] sums up to 6, which is a multiple of 6.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum % k == 0 or prefix_sum - k in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], k: int = 6):\n    return (nums, k)\n\nassert f(*g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 356, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers `nums` and an integer `k`, find if there exists a subarray in the list that sums up to a multiple of k.\n    Return True if such a subarray exists, False otherwise.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    k = 6\n    Output: True\n    Explanation: The subarray [1, 2, 3] sums up to 6, which is a multiple of 6.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum % k == 0 or prefix_sum - k in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], k: int = 6):\n    return (nums, k)", "map_ix": [1, 1, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], n=4, s=20) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s and have at least one even number\"\"\"\n    return len(x) == n and sum(x) == s and any([a % 2 == 0 for a in x])\n\ndef g(n=4, s=20):\n    x = [2] * n\n    x[0] = s - (2 * (n - 1))\n    return x\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 356, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], n=4, s=20) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s and have at least one even number\"\"\"\n    return len(x) == n and sum(x) == s and any([a % 2 == 0 for a in x])", "solution_func": "def g(n=4, s=20):\n    x = [2] * n\n    x[0] = s - (2 * (n - 1))\n    return x", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(grid: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a perfect square.\n    A perfect square is a square grid where the number of rows is equal to the number of columns.\n\n    Sample Input:\n    grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n    return rows == cols\n\ndef g(grid: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return grid\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 357, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(grid: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a perfect square.\n    A perfect square is a square grid where the number of rows is equal to the number of columns.\n\n    Sample Input:\n    grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n    return rows == cols", "solution_func": "def g(grid: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return grid", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic rectangle.\n    A magic rectangle is a rectangular grid where the sum of each row and each column is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 357, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic rectangle.\n    A magic rectangle is a rectangular grid where the sum of each row and each column is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a diagonal matrix.\n    A diagonal matrix is a square grid where all the elements outside the main diagonal are zero.\n\n    Sample Input:\n    arr = [[1, 0, 0], [0, 5, 0], [0, 0, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if i != j and arr[i][j] != 0:\n                return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 0, 0], [0, 5, 0], [0, 0, 9]]):\n    return arr\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 357, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a diagonal matrix.\n    A diagonal matrix is a square grid where all the elements outside the main diagonal are zero.\n\n    Sample Input:\n    arr = [[1, 0, 0], [0, 5, 0], [0, 0, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if i != j and arr[i][j] != 0:\n                return False\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 0, 0], [0, 5, 0], [0, 0, 9]]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of numbers and a target value, find the indices of three numbers in the list that add up to the target value.\n    Return the indices as a list.\n    \"\"\"\n    for i in range(len(nums) - 2):\n        for j in range(i+1, len(nums) - 1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return [i, j, k]\n    return []\n\ndef g(target: int = 15):\n    \"\"\"\n    Generate a list of numbers where three of the numbers add up to the target value.\n    \"\"\"\n    return [2, 4, 7, 11, 15, 20, 25]\n\nassert f(g(), 15) == [0, 1, 2]\n", "emb": null, "idx_generation": 357, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of numbers and a target value, find the indices of three numbers in the list that add up to the target value.\n    Return the indices as a list.\n    \"\"\"\n    for i in range(len(nums) - 2):\n        for j in range(i+1, len(nums) - 1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return [i, j, k]\n    return []", "solution_func": "def g(target: int = 15):\n    \"\"\"\n    Generate a list of numbers where three of the numbers add up to the target value.\n    \"\"\"\n    return [2, 4, 7, 11, 15, 20, 25]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of numbers and a target value, find the indices of two numbers in the list that add up to the target value.\n    Return the indices as a list.\n    \"\"\"\n    nums_dict = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in nums_dict:\n            return [nums_dict[complement], i]\n        nums_dict[num] = i\n    return []\n\ndef g(target: int = 7):\n    \"\"\"\n    Generate a list of numbers where two of the numbers add up to the target value.\n    \"\"\"\n    return [2, 4, 7, 11, 15, 20, 25]\n\nassert f(g(), 7) == [0, 2]\n", "emb": null, "idx_generation": 357, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of numbers and a target value, find the indices of two numbers in the list that add up to the target value.\n    Return the indices as a list.\n    \"\"\"\n    nums_dict = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in nums_dict:\n            return [nums_dict[complement], i]\n        nums_dict[num] = i\n    return []", "solution_func": "def g(target: int = 7):\n    \"\"\"\n    Generate a list of numbers where two of the numbers add up to the target value.\n    \"\"\"\n    return [2, 4, 7, 11, 15, 20, 25]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target value, find if there exists a pair of numbers in the list that add up to the target value.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for i in range(len(nums)):\n        complement = target - nums[i]\n        if complement in nums_set and complement != nums[i]:\n            return True\n    return False\n\ndef g(target: int = 10):\n    \"\"\"\n    Generate a list of numbers where there exists a pair of numbers that add up to the target value.\n    \"\"\"\n    return [2, 4, 7, 11, 15, 20, 25]\n\nassert f(g(), 10) == True\n", "emb": null, "idx_generation": 357, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target value, find if there exists a pair of numbers in the list that add up to the target value.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for i in range(len(nums)):\n        complement = target - nums[i]\n        if complement in nums_set and complement != nums[i]:\n            return True\n    return False", "solution_func": "def g(target: int = 10):\n    \"\"\"\n    Generate a list of numbers where there exists a pair of numbers that add up to the target value.\n    \"\"\"\n    return [2, 4, 7, 11, 15, 20, 25]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the array is a rotation of a palindrome.\"\"\"\n    def is_palindrome(s):\n        return s == s[::-1]\n\n    for i in range(len(arr)):\n        rotated_arr = arr[i:] + arr[:i]\n        if is_palindrome(rotated_arr):\n            return True\n    return False\n\ndef g(arr=[4,6,8,10,12]):\n    return arr\n\nassert f(g()) == False\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 357, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the array is a rotation of a palindrome.\"\"\"\n    def is_palindrome(s):\n        return s == s[::-1]\n\n    for i in range(len(arr)):\n        rotated_arr = arr[i:] + arr[:i]\n        if is_palindrome(rotated_arr):\n            return True\n    return False", "solution_func": "def g(arr=[4,6,8,10,12]):\n    return arr", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"\n    Check if the sum of the digits of 3^n is equal to the given digit s.\n    \"\"\"\n    digits_sum = sum(int(digit) for digit in str(3 ** n))\n    return digits_sum == int(s)\n\ndef g(n = 3):\n    return (\"2\" if n == 0 else \"3\" if n == 1 else \"9\")\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 357, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"\n    Check if the sum of the digits of 3^n is equal to the given digit s.\n    \"\"\"\n    digits_sum = sum(int(digit) for digit in str(3 ** n))\n    return digits_sum == int(s)", "solution_func": "def g(n = 3):\n    return (\"2\" if n == 0 else \"3\" if n == 1 else \"9\")", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, perm='qwertyuiopasdfghjklzxcvbnm', target='thyjytex cequolichitextotho bymoxokepy jyvumywefoc') -> bool:\n    \"\"\"Find a string that, when a given permutation of characters is applied, has a given result.\"\"\"\n    return ''.join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c for c in s)) == target\ndef g(perm = 'qwertyuiopasdfghjklzxcvbnm', target = 'thyjytex cequolichitextotho bymoxokepy jyvumywefoc'):\n    return \"\".join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c) for c in target)\nassert f(g())\n", "emb": null, "idx_generation": 357, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, perm='qwertyuiopasdfghjklzxcvbnm', target='thyjytex cequolichitextotho bymoxokepy jyvumywefoc') -> bool:\n    \"\"\"Find a string that, when a given permutation of characters is applied, has a given result.\"\"\"\n    return ''.join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c for c in s)) == target", "solution_func": "def g(perm = 'qwertyuiopasdfghjklzxcvbnm', target = 'thyjytex cequolichitextotho bymoxokepy jyvumywefoc'):\n    return \"\".join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c) for c in target)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, check if there exists a pair of numbers in the list\n    such that their sum is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in arr:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(arr=[3, 7, 2, 9, 4], target=11):\n    return (arr, target)\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 357, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, check if there exists a pair of numbers in the list\n    such that their sum is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in arr:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(arr=[3, 7, 2, 9, 4], target=11):\n    return (arr, target)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if a given number is a prime number.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g() -> int:\n    return 17\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 358, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if a given number is a prime number.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True", "solution_func": "def g() -> int:\n    return 17", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a square matrix.\n    \"\"\"\n    rows = len(matrix)\n    if rows == 0:\n        return False\n    cols = len(matrix[0])\n    for row in matrix:\n        if len(row) != cols:\n            return False\n    return rows == cols\n\ndef g() -> List[List[int]]:\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 358, "target_skills": null, "problem_func": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a square matrix.\n    \"\"\"\n    rows = len(matrix)\n    if rows == 0:\n        return False\n    cols = len(matrix[0])\n    for row in matrix:\n        if len(row) != cols:\n            return False\n    return rows == cols", "solution_func": "def g() -> List[List[int]]:\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport re\n\ndef f(email: str) -> bool:\n    \"\"\"\n    Check if a given string is a valid email address.\n    \"\"\"\n    pattern = \"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}\"\n    return re.fullmatch(pattern, email) is not None\n\ndef g() -> str:\n    return \"example@example.com\"\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 358, "target_skills": null, "problem_func": "from typing import*\nimport re\n\ndef f(email: str) -> bool:\n    \"\"\"\n    Check if a given string is a valid email address.\n    \"\"\"\n    pattern = \"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}\"\n    return re.fullmatch(pattern, email) is not None", "solution_func": "def g() -> str:\n    return \"example@example.com\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, a=93252338) -> bool:\n    \"\"\"Check if the number is a power of a\"\"\"\n    return x != 0 and (x == 1 or x % a == 0 and f(x // a))\n\ndef g(a = 93252338):\n    return a ** 3\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 358, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, a=93252338) -> bool:\n    \"\"\"Check if the number is a power of a\"\"\"\n    return x != 0 and (x == 1 or x % a == 0 and f(x // a))", "solution_func": "def g(a = 93252338):\n    return a ** 3", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: List[int], n=5, s=15) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a >= 0 for a in x])\n\ndef g(n = 5, s = 15):\n    x = [0, 0, 0, 0, 0]\n    return x[:n]\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 358, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], n=5, s=15) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a >= 0 for a in x])", "solution_func": "def g(n = 5, s = 15):\n    x = [0, 0, 0, 0, 0]\n    return x[:n]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, a=93252338) -> bool:\n    \"\"\"Check if the number is a palindrome\"\"\"\n    return str(x) == str(x)[::-1]\n\ndef g(a = 93252338):\n    return 123454321\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 358, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, a=93252338) -> bool:\n    \"\"\"Check if the number is a palindrome\"\"\"\n    return str(x) == str(x)[::-1]", "solution_func": "def g(a = 93252338):\n    return 123454321", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list such that their sum is equal to the target.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums=[2, 4, 6, 8, 10]):\n    return nums\n\nassert f(g(), 12) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 358, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list such that their sum is equal to the target.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums=[2, 4, 6, 8, 10]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a Toeplitz matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    for i in range(rows - 1):\n        for j in range(cols - 1):\n            if matrix[i][j] != matrix[i+1][j+1]:\n                return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [4, 1, 2], [7, 4, 1]]):\n    return matrix\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 358, "target_skills": null, "problem_func": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a Toeplitz matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    for i in range(rows - 1):\n        for j in range(cols - 1):\n            if matrix[i][j] != matrix[i+1][j+1]:\n                return False\n    return True", "solution_func": "def g(matrix=[[1, 2, 3], [4, 1, 2], [7, 4, 1]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Find if there are three numbers in the given list that sum up to the target.\n    \"\"\"\n    combinations = list(itertools.combinations(nums, 3))\n    \n    for combo in combinations:\n        if sum(combo) == target:\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g(), 15) == True\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 358, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Find if there are three numbers in the given list that sum up to the target.\n    \"\"\"\n    combinations = list(itertools.combinations(nums, 3))\n    \n    for combo in combinations:\n        if sum(combo) == target:\n            return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums", "map_ix": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of any non-adjacent numbers.\n\n    Sample input:\n    nums = [2, 4, 6, 8, 10]\n\n    Sample output:\n    18\n\n    Explanation: The maximum sum can be achieved by selecting the numbers 2, 6, and 10.\n    \"\"\"\n\n    if len(nums) == 0:\n        return 0\n\n    n = len(nums)\n    dp = [0] * n\n\n    dp[0] = nums[0]\n\n    for i in range(1, n):\n        dp[i] = max(dp[i-1], dp[i-2] + nums[i])\n\n    return dp[-1]\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g()) == 18\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 358, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of any non-adjacent numbers.\n\n    Sample input:\n    nums = [2, 4, 6, 8, 10]\n\n    Sample output:\n    18\n\n    Explanation: The maximum sum can be achieved by selecting the numbers 2, 6, and 10.\n    \"\"\"\n\n    if len(nums) == 0:\n        return 0\n\n    n = len(nums)\n    dp = [0] * n\n\n    dp[0] = nums[0]\n\n    for i in range(1, n):\n        dp[i] = max(dp[i-1], dp[i-2] + nums[i])\n\n    return dp[-1]", "solution_func": "def g():\n    return [2, 4, 6, 8, 10]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target number, find two numbers in the list that add up to the target.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return [num, complement]\n    return []\n\ndef g():\n    nums = [2, 4, 6, 8, 10]\n    target = 12\n    return (nums, target)\n\nassert f(*g()) == [2, 10]\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0], "idx_generation": 359, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target number, find two numbers in the list that add up to the target.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return [num, complement]\n    return []", "solution_func": "def g():\n    nums = [2, 4, 6, 8, 10]\n    target = 12\n    return (nums, target)", "map_ix": [1, 0, 0, 1, 0, 0, 0, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, pattern: str) -> List[int]:\n    \"\"\"\n    Given a string and a pattern, find all the starting indices of the pattern in the string.\n    \"\"\"\n    indices = []\n    n = len(s)\n    m = len(pattern)\n    for i in range(n - m + 1):\n        if s[i:i+m] == pattern:\n            indices.append(i)\n    return indices\n\ndef g():\n    s = \"abracadabra\"\n    pattern = \"abra\"\n    return (s, pattern)\n\nassert f(*g()) == [0, 7]\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 359, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, pattern: str) -> List[int]:\n    \"\"\"\n    Given a string and a pattern, find all the starting indices of the pattern in the string.\n    \"\"\"\n    indices = []\n    n = len(s)\n    m = len(pattern)\n    for i in range(n - m + 1):\n        if s[i:i+m] == pattern:\n            indices.append(i)\n    return indices", "solution_func": "def g():\n    s = \"abracadabra\"\n    pattern = \"abra\"\n    return (s, pattern)", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of any subarray.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum = max(num, curr_sum + num)\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n\ndef g():\n    nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n    return (nums,)\n\nassert f(*g()) == 6\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 359, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of any subarray.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum = max(num, curr_sum + num)\n        max_sum = max(max_sum, curr_sum)\n    return max_sum", "solution_func": "def g():\n    nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n    return (nums,)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return a list containing the sum of each row in the matrix.\n    \"\"\"\n    row_sums = []\n    \n    for row in matrix:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n    \n    return row_sums\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [6, 15, 24]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 359, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return a list containing the sum of each row in the matrix.\n    \"\"\"\n    row_sums = []\n    \n    for row in matrix:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n    \n    return row_sums", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return a list containing the sum of each column in the matrix.\n    \"\"\"\n    column_sums = []\n    \n    for i in range(len(matrix[0])):\n        column_sum = sum(row[i] for row in matrix)\n        column_sums.append(column_sum)\n    \n    return column_sums\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [12, 15, 18]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 359, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return a list containing the sum of each column in the matrix.\n    \"\"\"\n    column_sums = []\n    \n    for i in range(len(matrix[0])):\n        column_sum = sum(row[i] for row in matrix)\n        column_sums.append(column_sum)\n    \n    return column_sums", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, return the maximum element in the matrix.\n    \"\"\"\n    max_element = float('-inf')\n    \n    for row in matrix:\n        for num in row:\n            if num > max_element:\n                max_element = num\n        \n    return max_element\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 9\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 359, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, return the maximum element in the matrix.\n    \"\"\"\n    max_element = float('-inf')\n    \n    for row in matrix:\n        for num in row:\n            if num > max_element:\n                max_element = num\n        \n    return max_element", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(n=3):\n    \"\"\"Generate a symmetric matrix of size n\"\"\"\n    return [[1 if j <= i else 0 for j in range(n)] for i in range(n)]\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 359, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g(n=3):\n    \"\"\"Generate a symmetric matrix of size n\"\"\"\n    return [[1 if j <= i else 0 for j in range(n)] for i in range(n)]", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nimport math\nfrom typing import*\ndef f(nums: List[int], target=100, count=3) -> bool:\n    \"\"\"Find if there are count numbers that multiply to the target\"\"\"\n    from itertools import combinations\n    return any(math.prod(c) == target for c in combinations(nums, count))\n\ndef g(target = 100, count = 3):\n    return [2, 5, 10, 20, 25, 40, 50, 80, 90, 100]\n\nassert f(g()) == True\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 359, "target_skills": null, "problem_func": "import itertools\nimport math\nfrom typing import*\ndef f(nums: List[int], target=100, count=3) -> bool:\n    \"\"\"Find if there are count numbers that multiply to the target\"\"\"\n    from itertools import combinations\n    return any(math.prod(c) == target for c in combinations(nums, count))", "solution_func": "def g(target = 100, count = 3):\n    return [2, 5, 10, 20, 25, 40, 50, 80, 90, 100]", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is palindromic\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 359, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is palindromic\"\"\"\n    return nums == nums[::-1]", "solution_func": "def g():\n    return [1, 2, 3, 2, 1]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an identity matrix\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                if matrix[i][j] != 1:\n                    return False\n            else:\n                if matrix[i][j] != 0:\n                    return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate an identity matrix of the given size\n    \"\"\"\n    identity_matrix = [[0 for _ in range(size)] for _ in range(size)]\n    for i in range(size):\n        identity_matrix[i][i] = 1\n    return identity_matrix\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 359, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an identity matrix\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                if matrix[i][j] != 1:\n                    return False\n            else:\n                if matrix[i][j] != 0:\n                    return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate an identity matrix of the given size\n    \"\"\"\n    identity_matrix = [[0 for _ in range(size)] for _ in range(size)]\n    for i in range(size):\n        identity_matrix[i][i] = 1\n    return identity_matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Find the sum of all elements in the matrix\n    \"\"\"\n    total_sum = 0\n    for row in matrix:\n        for num in row:\n            total_sum += num\n    return total_sum\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 45\n\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 360, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Find the sum of all elements in the matrix\n    \"\"\"\n    total_sum = 0\n    for row in matrix:\n        for num in row:\n            total_sum += num\n    return total_sum", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> List[int]:\n    \"\"\"\n    Return a new list with only the even numbers from the original list\n    \"\"\"\n    even_nums = [num for num in lst if num % 2 == 0]\n    return even_nums\n\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return lst\n\nassert f(g()) == [2, 4, 6, 8, 10]\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 360, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> List[int]:\n    \"\"\"\n    Return a new list with only the even numbers from the original list\n    \"\"\"\n    even_nums = [num for num in lst if num % 2 == 0]\n    return even_nums", "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return lst", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find all pairs of numbers in the list that add up to the target\n    \"\"\"\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                pairs.append([nums[i], nums[j]])\n    return pairs\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=10):\n    return (nums, target)\n\nassert f(*g()) == [[1, 9], [2, 8], [3, 7], [4, 6]]\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 360, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find all pairs of numbers in the list that add up to the target\n    \"\"\"\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                pairs.append([nums[i], nums[j]])\n    return pairs", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=10):\n    return (nums, target)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(moves: List[List[int]], initial_state=[5, 8, 3, 0]) -> bool:\n    \"\"\"\n    Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\n    removing one or more objects from a single non-empty heap. The player who takes the last object wins.\n    - initial_state is list of numbers of objects in each heap\n    - moves is a list of your moves: [heap, number of objects to take]\n    - you play first\n    \"\"\"\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [5, 8, 3, 0]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert not f(g())\n\nassert f(g()) == True", "emb": null, "idx_generation": 360, "target_skills": null, "problem_func": "from typing import*\ndef f(moves: List[List[int]], initial_state=[5, 8, 3, 0]) -> bool:\n    \"\"\"\n    Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\n    removing one or more objects from a single non-empty heap. The player who takes the last object wins.\n    - initial_state is list of numbers of objects in each heap\n    - moves is a list of your moves: [heap, number of objects to take]\n    - you play first\n    \"\"\"\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()", "solution_func": "def g(initial_state = [5, 8, 3, 0]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(moves: List[List[int]], initial_state=[5, 8, 3, 0]) -> bool:\n    \"\"\"\n    Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\n    removing one or more objects from a single non-empty heap. The player who takes the last object wins.\n    - initial_state is list of numbers of objects in each heap\n    - moves is a list of your moves: [heap, number of objects to take]\n    - you play first\n    \"\"\"\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [5, 8, 3, 0]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g()) == False\n", "emb": null, "idx_generation": 360, "target_skills": null, "problem_func": "from typing import*\ndef f(moves: List[List[int]], initial_state=[5, 8, 3, 0]) -> bool:\n    \"\"\"\n    Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\n    removing one or more objects from a single non-empty heap. The player who takes the last object wins.\n    - initial_state is list of numbers of objects in each heap\n    - moves is a list of your moves: [heap, number of objects to take]\n    - you play first\n    \"\"\"\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()", "solution_func": "def g(initial_state = [5, 8, 3, 0]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(moves: List[List[int]], initial_state=[5, 8, 3, 0]) -> bool:\n    \"\"\"\n    Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\n    removing one or more objects from a single non-empty heap. The player who takes the last object wins.\n    - initial_state is list of numbers of objects in each heap\n    - moves is a list of your moves: [heap, number of objects to take]\n    - you play first\n    \"\"\"\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [5, 8, 3, 0]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert not f(g())\n\nassert f(g()) == True", "emb": null, "idx_generation": 360, "target_skills": null, "problem_func": "from typing import*\ndef f(moves: List[List[int]], initial_state=[5, 8, 3, 0]) -> bool:\n    \"\"\"\n    Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\n    removing one or more objects from a single non-empty heap. The player who takes the last object wins.\n    - initial_state is list of numbers of objects in each heap\n    - moves is a list of your moves: [heap, number of objects to take]\n    - you play first\n    \"\"\"\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()", "solution_func": "def g(initial_state = [5, 8, 3, 0]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of numbers `nums` and an integer `k`, find if there exists a pair of numbers in `nums`\n    such that their product is divisible by `k`.\n\n    For example, if nums = [1, 2, 3, 4, 5] and k = 6, the pair (2, 3) has a product of 6, which is divisible by k.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if (nums[i] * nums[j]) % k == 0:\n                return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], k: int = 6):\n    return (nums, k)\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 360, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of numbers `nums` and an integer `k`, find if there exists a pair of numbers in `nums`\n    such that their product is divisible by `k`.\n\n    For example, if nums = [1, 2, 3, 4, 5] and k = 6, the pair (2, 3) has a product of 6, which is divisible by k.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if (nums[i] * nums[j]) % k == 0:\n                return True\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], k: int = 6):\n    return (nums, k)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], n: int) -> bool:\n    \"\"\"\n    Given a list of numbers `nums` and an integer `n`, find if there exists a subsequence in `nums`\n    such that the sum of the subsequence is divisible by `n`.\n\n    For example, if nums = [1, 2, 3, 4, 5] and n = 6, the subsequence [1, 5] has a sum of 6, which is divisible by n.\n    \"\"\"\n    def subset_sum(nums, target_sum, memo={}):\n        if target_sum in memo:\n            return memo[target_sum]\n        if target_sum == 0:\n            return True\n        if target_sum < 0 or not nums:\n            return False\n        include = subset_sum(nums[1:], target_sum - nums[0], memo)\n        exclude = subset_sum(nums[1:], target_sum, memo)\n        memo[target_sum] = include or exclude\n        return memo[target_sum]\n\n    return subset_sum(nums, n)\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], n: int = 6):\n    return (nums, n)\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 360, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], n: int) -> bool:\n    \"\"\"\n    Given a list of numbers `nums` and an integer `n`, find if there exists a subsequence in `nums`\n    such that the sum of the subsequence is divisible by `n`.\n\n    For example, if nums = [1, 2, 3, 4, 5] and n = 6, the subsequence [1, 5] has a sum of 6, which is divisible by n.\n    \"\"\"\n    def subset_sum(nums, target_sum, memo={}):\n        if target_sum in memo:\n            return memo[target_sum]\n        if target_sum == 0:\n            return True\n        if target_sum < 0 or not nums:\n            return False\n        include = subset_sum(nums[1:], target_sum - nums[0], memo)\n        exclude = subset_sum(nums[1:], target_sum, memo)\n        memo[target_sum] = include or exclude\n        return memo[target_sum]\n\n    return subset_sum(nums, n)", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], n: int = 6):\n    return (nums, n)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers `nums` and a target number `target`, find if there exists a pair of numbers in `nums`\n    such that their difference is equal to the target number.\n\n    For example, if nums = [1, 2, 3, 4, 5] and target = 2, the pair (3, 1) has a difference of 2.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if num - target in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 2):\n    return (nums, target)\n\nassert f(*g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 360, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers `nums` and a target number `target`, find if there exists a pair of numbers in `nums`\n    such that their difference is equal to the target number.\n\n    For example, if nums = [1, 2, 3, 4, 5] and target = 2, the pair (3, 1) has a difference of 2.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if num - target in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 2):\n    return (nums, target)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if a given number is a palindrome.\n    \"\"\"\n    original = str(n)\n    reverse = original[::-1]\n    return original == reverse\n\ndef g():\n    \"\"\"\n    This solution checks if the given number is a palindrome.\n    \"\"\"\n    return 12321\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 360, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if a given number is a palindrome.\n    \"\"\"\n    original = str(n)\n    reverse = original[::-1]\n    return original == reverse", "solution_func": "def g():\n    \"\"\"\n    This solution checks if the given number is a palindrome.\n    \"\"\"\n    return 12321", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(lst: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the second largest number in the list.\n    \"\"\"\n    sorted_lst = sorted(lst)\n    return sorted_lst[-2]\n\ndef g(lst=[1, 5, 3, 9, 7]):\n    return lst\n\nassert f(g()) == 7\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 361, "target_skills": null, "problem_func": "from typing import*\n\ndef f(lst: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the second largest number in the list.\n    \"\"\"\n    sorted_lst = sorted(lst)\n    return sorted_lst[-2]", "solution_func": "def g(lst=[1, 5, 3, 9, 7]):\n    return lst", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"Check if s1 is an anagram of s2.\"\"\"\n    sorted_s1 = ''.join(sorted(s1))\n    sorted_s2 = ''.join(sorted(s2))\n    \n    return sorted_s1 == sorted_s2\n\ndef g(s1: str = \"listen\", s2: str = \"silent\"):\n    return (s1, s2)\n\nassert f(*g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 361, "target_skills": null, "problem_func": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"Check if s1 is an anagram of s2.\"\"\"\n    sorted_s1 = ''.join(sorted(s1))\n    sorted_s2 = ''.join(sorted(s2))\n    \n    return sorted_s1 == sorted_s2", "solution_func": "def g(s1: str = \"listen\", s2: str = \"silent\"):\n    return (s1, s2)", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the even numbers from the original list.\n    \"\"\"\n    return [num for num in lst if num % 2 == 0]\n\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8]):\n    return lst\n\nassert f(g()) == [2, 4, 6, 8]\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 361, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the even numbers from the original list.\n    \"\"\"\n    return [num for num in lst if num % 2 == 0]", "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8]):\n    return lst", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a zigzag pattern.\n    A zigzag pattern is a grid where the elements form a pattern that alternates between increasing and decreasing.\n\n    Sample Input:\n    arr = [[1, 2, 3], [6, 5, 4], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(n):\n        if i % 2 == 0:\n            for j in range(m-1):\n                if arr[i][j] >= arr[i][j+1]:\n                    return False\n        else:\n            for j in range(m-1):\n                if arr[i][j] <= arr[i][j+1]:\n                    return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [6, 5, 4], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 361, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a zigzag pattern.\n    A zigzag pattern is a grid where the elements form a pattern that alternates between increasing and decreasing.\n\n    Sample Input:\n    arr = [[1, 2, 3], [6, 5, 4], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(n):\n        if i % 2 == 0:\n            for j in range(m-1):\n                if arr[i][j] >= arr[i][j+1]:\n                    return False\n        else:\n            for j in range(m-1):\n                if arr[i][j] <= arr[i][j+1]:\n                    return False\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [6, 5, 4], [7, 8, 9]]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 1, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a checkerboard pattern.\n    A checkerboard pattern is a grid where the elements form a pattern of alternating black and white squares.\n\n    Sample Input:\n    arr = [[1, 2, 1], [2, 1, 2], [1, 2, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(n):\n        for j in range(m):\n            if (i+j) % 2 == 0:\n                if arr[i][j] != 1:\n                    return False\n            else:\n                if arr[i][j] != 2:\n                    return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 1], [2, 1, 2], [1, 2, 1]]):\n    return arr\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 361, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a checkerboard pattern.\n    A checkerboard pattern is a grid where the elements form a pattern of alternating black and white squares.\n\n    Sample Input:\n    arr = [[1, 2, 1], [2, 1, 2], [1, 2, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(n):\n        for j in range(m):\n            if (i+j) % 2 == 0:\n                if arr[i][j] != 1:\n                    return False\n            else:\n                if arr[i][j] != 2:\n                    return False\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 1], [2, 1, 2], [1, 2, 1]]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a diagonal pattern.\n    A diagonal pattern is a grid where the elements form a pattern that goes from top-left to bottom-right.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(n-1):\n        for j in range(m-1):\n            if arr[i][j] != arr[i+1][j+1]:\n                return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 361, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a diagonal pattern.\n    A diagonal pattern is a grid where the elements form a pattern that goes from top-left to bottom-right.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(n-1):\n        for j in range(m-1):\n            if arr[i][j] != arr[i+1][j+1]:\n                return False\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains only prime numbers.\"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return all(num in primes for num in nums)\ndef g():\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 361, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains only prime numbers.\"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return all(num in primes for num in nums)", "solution_func": "def g():\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is a square matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols\ndef g(size=4):\n    \"\"\"Generate a square matrix of the given size.\"\"\"\n    return [[1 for _ in range(size)] for _ in range(size)]\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 361, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is a square matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols", "solution_func": "def g(size=4):\n    \"\"\"Generate a square matrix of the given size.\"\"\"\n    return [[1 for _ in range(size)] for _ in range(size)]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains both positive and negative numbers.\"\"\"\n    return any(num < 0 for num in nums) and any(num > 0 for num in nums)\ndef g():\n    return [-1, -2, -3, 4, 5, 6]\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 361, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains both positive and negative numbers.\"\"\"\n    return any(num < 0 for num in nums) and any(num > 0 for num in nums)", "solution_func": "def g():\n    return [-1, -2, -3, 4, 5, 6]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(inds: List[int], vecs=[169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]) -> int:\n    \"\"\"\n    Parity learning: Given binary vectors in a subspace, find the sum of all elements in the secret set S\n    of indices such that: $\\\\sum_{i \\\\in S} x_i = 1 (mod 2)$\n    \"\"\"\n    secret_set = [i for i in range(len(inds)) if inds[i]]\n    return sum(secret_set)\n\ndef g(vecs = [169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [1 if i in [j for j in range(d) if pool[j][-1]] else 0 for i in range(d)]\nassert f(g()) == 10\n", "emb": null, "idx_generation": 361, "target_skills": null, "problem_func": "from typing import*\ndef f(inds: List[int], vecs=[169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]) -> int:\n    \"\"\"\n    Parity learning: Given binary vectors in a subspace, find the sum of all elements in the secret set S\n    of indices such that: $\\\\sum_{i \\\\in S} x_i = 1 (mod 2)$\n    \"\"\"\n    secret_set = [i for i in range(len(inds)) if inds[i]]\n    return sum(secret_set)", "solution_func": "def g(vecs = [169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"Find the maximum number of elements from the list whose sum is equal to the target value.\"\"\"\n    n = len(nums)\n    dp = [[-float('inf')] * (target + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - nums[i - 1]] + 1)\n\n    return dp[n][target]\n\ndef g(nums=[2, 4, 6, 8], target=10):\n    return nums, target\n\nassert f(*g()) == 3\n", "emb": null, "idx_generation": 362, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"Find the maximum number of elements from the list whose sum is equal to the target value.\"\"\"\n    n = len(nums)\n    dp = [[-float('inf')] * (target + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - nums[i - 1]] + 1)\n\n    return dp[n][target]", "solution_func": "def g(nums=[2, 4, 6, 8], target=10):\n    return nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if it is possible to partition the list into two subsets with equal sum.\"\"\"\n    total_sum = sum(nums)\n    if total_sum % 2 != 0:\n        return False\n    target_sum = total_sum // 2\n    n = len(nums)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target_sum]\n\ndef g(nums=[1, 5, 11, 5]):\n    return nums\n\nassert f(*g()) == True\n", "emb": null, "idx_generation": 362, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if it is possible to partition the list into two subsets with equal sum.\"\"\"\n    total_sum = sum(nums)\n    if total_sum % 2 != 0:\n        return False\n    target_sum = total_sum // 2\n    n = len(nums)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target_sum]", "solution_func": "def g(nums=[1, 5, 11, 5]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"Find the maximum number of elements from the list whose sum is less than or equal to the target value.\"\"\"\n    n = len(nums)\n    dp = [[0] * (target + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - nums[i - 1]] + 1)\n\n    return dp[n][target]\n\ndef g(nums=[2, 4, 6, 8], target=10):\n    return nums, target\n\nassert f(*g()) == 4\n", "emb": null, "idx_generation": 362, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"Find the maximum number of elements from the list whose sum is less than or equal to the target value.\"\"\"\n    n = len(nums)\n    dp = [[0] * (target + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - nums[i - 1]] + 1)\n\n    return dp[n][target]", "solution_func": "def g(nums=[2, 4, 6, 8], target=10):\n    return nums, target", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target number, find the count of all occurrences of the target number in the list.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num == target:\n            count += 1\n    return count\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 5, 6, 7, 5], target: int = 5) -> List[int]:\n    return (nums, target)\n\nassert f(*g()) == 3\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 362, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target number, find the count of all occurrences of the target number in the list.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num == target:\n            count += 1\n    return count", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 5, 6, 7, 5], target: int = 5) -> List[int]:\n    return (nums, target)", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that add up to the target. The pair should have a difference of at most 1.\n    \"\"\"\n    nums.sort()\n    left, right = 0, len(nums) - 1\n    while left < right:\n        if nums[right] - nums[left] == target or nums[right] - nums[left] == target + 1:\n            return True\n        elif nums[right] - nums[left] < target:\n            left += 1\n        else:\n            right -= 1\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 6):\n    return (nums, target)\n\nassert f(*g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 362, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that add up to the target. The pair should have a difference of at most 1.\n    \"\"\"\n    nums.sort()\n    left, right = 0, len(nums) - 1\n    while left < right:\n        if nums[right] - nums[left] == target or nums[right] - nums[left] == target + 1:\n            return True\n        elif nums[right] - nums[left] < target:\n            left += 1\n        else:\n            right -= 1\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 6):\n    return (nums, target)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target number, find and return a list of indices of the two numbers that add up to the target number.\n    \"\"\"\n    num_dict = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_dict:\n            return [num_dict[complement], i]\n        num_dict[num] = i\n    return []\n\ndef g(nums: List[int] = [2, 7, 11, 15], target: int = 9):\n    return (nums, target)\n\nassert f(*g()) == [0, 1]\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 362, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target number, find and return a list of indices of the two numbers that add up to the target number.\n    \"\"\"\n    num_dict = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_dict:\n            return [num_dict[complement], i]\n        num_dict[num] = i\n    return []", "solution_func": "def g(nums: List[int] = [2, 7, 11, 15], target: int = 9):\n    return (nums, target)", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(inds: List[int], vecs=[169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]) -> bool:\n    \"\"\"\n    Parity learning: Given binary vectors in a subspace, find the secret set S of indices such that:\n    $\\\\sum_{i \\\\in S} x_i = 1 (mod 2)$\n    \"\"\"\n    return sum((sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs))\n\ndef g(vecs = [169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]\nassert f(g()) == 17\n\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 362, "target_skills": null, "problem_func": "from typing import*\ndef f(inds: List[int], vecs=[169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]) -> bool:\n    \"\"\"\n    Parity learning: Given binary vectors in a subspace, find the secret set S of indices such that:\n    $\\\\sum_{i \\\\in S} x_i = 1 (mod 2)$\n    \"\"\"\n    return sum((sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs))", "solution_func": "def g(vecs = [169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(inds: List[int], vecs=[169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]) -> bool:\n    \"\"\"\n    Parity learning: Given binary vectors in a subspace, find the secret set S of indices such that:\n    $\\\\sum_{i \\\\in S} x_i = 1 (mod 2)$\n    \"\"\"\n    return all((sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs))\n\ndef g(vecs = [169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]\nassert f(g()) == True\n\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 362, "target_skills": null, "problem_func": "from typing import*\ndef f(inds: List[int], vecs=[169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]) -> bool:\n    \"\"\"\n    Parity learning: Given binary vectors in a subspace, find the secret set S of indices such that:\n    $\\\\sum_{i \\\\in S} x_i = 1 (mod 2)$\n    \"\"\"\n    return all((sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs))", "solution_func": "def g(vecs = [169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]", "map_ix": [0, 1, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(inds: List[int], vecs=[169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]) -> bool:\n    \"\"\"\n    Parity learning: Given binary vectors in a subspace, find the secret set S of indices such that:\n    $\\\\sum_{i \\\\in S} x_i = 1 (mod 2)$\n    \"\"\"\n    return len({sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs})\n\ndef g(vecs = [169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]\nassert f(g()) == 17\n\n", "emb": null, "idx_generation": 362, "target_skills": null, "problem_func": "from typing import*\ndef f(inds: List[int], vecs=[169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]) -> bool:\n    \"\"\"\n    Parity learning: Given binary vectors in a subspace, find the secret set S of indices such that:\n    $\\\\sum_{i \\\\in S} x_i = 1 (mod 2)$\n    \"\"\"\n    return len({sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs})", "solution_func": "def g(vecs = [169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is a symmetric matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(size=4):\n    \"\"\"Generate a symmetric matrix of the given size.\"\"\"\n    matrix = [[1 for _ in range(size)] for _ in range(size)]\n    return matrix\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 362, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is a symmetric matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g(size=4):\n    \"\"\"Generate a symmetric matrix of the given size.\"\"\"\n    matrix = [[1 for _ in range(size)] for _ in range(size)]\n    return matrix", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Find the number of triplets in the list whose sum is equal to the target value.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    target = 6\n\n    Sample output:\n    2\n\n    Explanation: The triplets that add up to the target value are (1, 2, 3) and (1, 5, 6).\n    \"\"\"\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    count += 1\n    return count\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 6) == 2\n", "emb": null, "idx_generation": 363, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Find the number of triplets in the list whose sum is equal to the target value.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    target = 6\n\n    Sample output:\n    2\n\n    Explanation: The triplets that add up to the target value are (1, 2, 3) and (1, 5, 6).\n    \"\"\"\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    count += 1\n    return count", "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the list contains a subarray whose sum is equal to the target value.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample output:\n    True\n\n    Explanation: The subarray [2, 3, 4] adds up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target or prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 9) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 363, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the list contains a subarray whose sum is equal to the target value.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample output:\n    True\n\n    Explanation: The subarray [2, 3, 4] adds up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target or prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False", "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 4, 5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find all pairs in the list whose sum is equal to the target value.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    target = 6\n\n    Sample output:\n    [(1, 5), (2, 4)]\n\n    Explanation: The pairs that add up to the target value are (1, 5) and (2, 4).\n    \"\"\"\n    pairs = []\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            pairs.append((num, complement))\n    return pairs\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 6) == [(1, 5), (2, 4)]\n", "emb": null, "idx_generation": 363, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find all pairs in the list whose sum is equal to the target value.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    target = 6\n\n    Sample output:\n    [(1, 5), (2, 4)]\n\n    Explanation: The pairs that add up to the target value are (1, 5) and (2, 4).\n    \"\"\"\n    pairs = []\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            pairs.append((num, complement))\n    return pairs", "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Calculate the sum of all even numbers in the given list of integers.\n\n    Sample Input:\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Sample Output:\n    30\n    \"\"\"\n    return sum(num for num in nums if num % 2 == 0)\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 30\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 363, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Calculate the sum of all even numbers in the given list of integers.\n\n    Sample Input:\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Sample Output:\n    30\n    \"\"\"\n    return sum(num for num in nums if num % 2 == 0)", "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n\n    Sample Input:\n    \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return string == string[::-1]\n\ndef g() -> str:\n    return \"racecar\"\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 363, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n\n    Sample Input:\n    \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return string == string[::-1]", "solution_func": "def g() -> str:\n    return \"racecar\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find two numbers in the given list that add up to the target value.\n    Return their indices as a list.\n\n    Sample Input:\n    nums = [2, 7, 11, 15], target = 9\n\n    Sample Output:\n    [0, 1]\n    \"\"\"\n    num_map = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_map:\n            return [num_map[complement], i]\n        num_map[num] = i\n    return []\n\ndef g() -> Tuple[List[int], int]:\n    return ([2, 7, 11, 15], 9)\n\nassert f(*g()) == [0, 1]\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 363, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find two numbers in the given list that add up to the target value.\n    Return their indices as a list.\n\n    Sample Input:\n    nums = [2, 7, 11, 15], target = 9\n\n    Sample Output:\n    [0, 1]\n    \"\"\"\n    num_map = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_map:\n            return [num_map[complement], i]\n        num_map[num] = i\n    return []", "solution_func": "def g() -> Tuple[List[int], int]:\n    return ([2, 7, 11, 15], 9)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], target: str) -> int:\n    \"\"\"\n    Find the minimum number of words from the list whose concatenation is equal to the target string.\n    \"\"\"\n    n = len(words)\n    m = len(target)\n    dp = [float('inf')] * (m + 1)\n    dp[0] = 0\n\n    for i in range(1, m + 1):\n        for j in range(n):\n            if i >= len(words[j]) and target[i - len(words[j]):i] == words[j]:\n                dp[i] = min(dp[i], dp[i - len(words[j])] + 1)\n\n    return dp[m]\n\ndef g(words=[\"leet\", \"code\", \"is\", \"fun\"], target=\"leetcodeisfun\"):\n    return words, target\n\nassert f(*g()) == 3\n", "emb": null, "idx_generation": 363, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], target: str) -> int:\n    \"\"\"\n    Find the minimum number of words from the list whose concatenation is equal to the target string.\n    \"\"\"\n    n = len(words)\n    m = len(target)\n    dp = [float('inf')] * (m + 1)\n    dp[0] = 0\n\n    for i in range(1, m + 1):\n        for j in range(n):\n            if i >= len(words[j]) and target[i - len(words[j]):i] == words[j]:\n                dp[i] = min(dp[i], dp[i - len(words[j])] + 1)\n\n    return dp[m]", "solution_func": "def g(words=[\"leet\", \"code\", \"is\", \"fun\"], target=\"leetcodeisfun\"):\n    return words, target", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are any three numbers that add up to the target.\n    If such a triplet exists, return True. Otherwise, return False.\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums, 12\n\nassert f(*g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 363, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are any three numbers that add up to the target.\n    If such a triplet exists, return True. Otherwise, return False.\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums, 12", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], target: str) -> int:\n    \"\"\"\n    Find the maximum number of words from the list whose concatenation is equal to the target string.\n    \"\"\"\n    n = len(words)\n    m = len(target)\n    dp = [-1] * (m + 1)\n    dp[0] = 0\n\n    for i in range(1, m + 1):\n        for j in range(n):\n            if i >= len(words[j]) and target[i - len(words[j]):i] == words[j]:\n                dp[i] = max(dp[i], dp[i - len(words[j])] + 1)\n\n    return dp[m]\n\ndef g(words=[\"apple\", \"pie\", \"is\", \"delicious\"], target=\"applepieisdelicious\"):\n    return words, target\n\nassert f(*g()) == 4\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 363, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], target: str) -> int:\n    \"\"\"\n    Find the maximum number of words from the list whose concatenation is equal to the target string.\n    \"\"\"\n    n = len(words)\n    m = len(target)\n    dp = [-1] * (m + 1)\n    dp[0] = 0\n\n    for i in range(1, m + 1):\n        for j in range(n):\n            if i >= len(words[j]) and target[i - len(words[j]):i] == words[j]:\n                dp[i] = max(dp[i], dp[i - len(words[j])] + 1)\n\n    return dp[m]", "solution_func": "def g(words=[\"apple\", \"pie\", \"is\", \"delicious\"], target=\"applepieisdelicious\"):\n    return words, target", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    curr_sum = 0\n    mod_dict = {0: -1}\n    for i, num in enumerate(nums):\n        curr_sum = (curr_sum + num) % k\n        if curr_sum in mod_dict:\n            if i - mod_dict[curr_sum] > 1:\n                return True\n        else:\n            mod_dict[curr_sum] = i\n    return False\n\ndef g(nums=[2, 4, 6, 8, 10], k=5):\n    return (nums, k)\n\nassert f(*g()) == False\n", "emb": null, "idx_generation": 363, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    curr_sum = 0\n    mod_dict = {0: -1}\n    for i, num in enumerate(nums):\n        curr_sum = (curr_sum + num) % k\n        if curr_sum in mod_dict:\n            if i - mod_dict[curr_sum] > 1:\n                return True\n        else:\n            mod_dict[curr_sum] = i\n    return False", "solution_func": "def g(nums=[2, 4, 6, 8, 10], k=5):\n    return (nums, k)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the given list that sum up to the target value.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(arr=[5, 7, 2, 4, 1], target=9):\n    return (arr, target)\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 364, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the given list that sum up to the target value.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(arr=[5, 7, 2, 4, 1], target=9):\n    return (arr, target)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> List[int]:\n    \"\"\"\n    Rotate the given list by k steps to the right.\n    \"\"\"\n    k = k % len(nums)\n    nums[:] = nums[-k:] + nums[:-k]\n    return nums\n\ndef g(nums=[1, 2, 3, 4, 5], k=2):\n    return (nums, k)\n\nassert f(*g()) == [4, 5, 1, 2, 3]\n\n", "emb": null, "idx_generation": 364, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> List[int]:\n    \"\"\"\n    Rotate the given list by k steps to the right.\n    \"\"\"\n    k = k % len(nums)\n    nums[:] = nums[-k:] + nums[:-k]\n    return nums", "solution_func": "def g(nums=[1, 2, 3, 4, 5], k=2):\n    return (nums, k)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the missing number in the given list of consecutive numbers.\n    \"\"\"\n    n = len(nums) + 1\n    total_sum = (n * (n + 1)) // 2\n    return total_sum - sum(nums)\n\ndef g(nums=[1, 2, 3, 4, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g()) == 5\n\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 364, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the missing number in the given list of consecutive numbers.\n    \"\"\"\n    n = len(nums) + 1\n    total_sum = (n * (n + 1)) // 2\n    return total_sum - sum(nums)", "solution_func": "def g(nums=[1, 2, 3, 4, 6, 7, 8, 9, 10]):\n    return nums", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to a prime number.\"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if is_prime(nums[i] + nums[j]):\n                return True\n    return False\n\ndef g(nums=[2, 3, 5, 7]):\n    return nums\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 364, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to a prime number.\"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if is_prime(nums[i] + nums[j]):\n                return True\n    return False", "solution_func": "def g(nums=[2, 3, 5, 7]):\n    return nums", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that have a difference of a perfect square.\"\"\"\n    def is_perfect_square(n):\n        return n**0.5 == int(n**0.5)\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if is_perfect_square(abs(nums[i] - nums[j])):\n                return True\n    return False\n\ndef g(nums=[4, 9, 16, 25]):\n    return nums\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 364, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that have a difference of a perfect square.\"\"\"\n    def is_perfect_square(n):\n        return n**0.5 == int(n**0.5)\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if is_perfect_square(abs(nums[i] - nums[j])):\n                return True\n    return False", "solution_func": "def g(nums=[4, 9, 16, 25]):\n    return nums", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that have the same sum of digits.\"\"\"\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if sum_of_digits(nums[i]) == sum_of_digits(nums[j]):\n                return True\n    return False\n\ndef g(nums=[123, 456, 789]):\n    return nums\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 364, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that have the same sum of digits.\"\"\"\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if sum_of_digits(nums[i]) == sum_of_digits(nums[j]):\n                return True\n    return False", "solution_func": "def g(nums=[123, 456, 789]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target_sum: int) -> bool:\n    \"\"\"\n    Check if a given matrix is a magic square with a specific target sum\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for col in range(cols):\n        if sum(matrix[i][col] for i in range(rows)) != target_sum:\n            return False\n    \n    # Check diagonals\n    if sum(matrix[i][i] for i in range(rows)) != target_sum:\n        return False\n    \n    if sum(matrix[i][rows-i-1] for i in range(rows)) != target_sum:\n        return False\n    \n    return True\n\ndef g(size=3, target_sum=15):\n    \"\"\"\n    Generate a magic square of the given size with a specific target sum\n    \"\"\"\n    square = [[0] * size for _ in range(size)]\n    row = 0\n    col = size // 2\n    num = 1\n    \n    while num <= size ** 2:\n        square[row][col] = num\n        num += 1\n        new_row = (row - 1) % size\n        new_col = (col + 1) % size\n        if square[new_row][new_col] != 0:\n            row += 1\n        else:\n            row = new_row\n            col = new_col\n    \n    return square\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 364, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target_sum: int) -> bool:\n    \"\"\"\n    Check if a given matrix is a magic square with a specific target sum\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for col in range(cols):\n        if sum(matrix[i][col] for i in range(rows)) != target_sum:\n            return False\n    \n    # Check diagonals\n    if sum(matrix[i][i] for i in range(rows)) != target_sum:\n        return False\n    \n    if sum(matrix[i][rows-i-1] for i in range(rows)) != target_sum:\n        return False\n    \n    return True", "solution_func": "def g(size=3, target_sum=15):\n    \"\"\"\n    Generate a magic square of the given size with a specific target sum\n    \"\"\"\n    square = [[0] * size for _ in range(size)]\n    row = 0\n    col = size // 2\n    num = 1\n    \n    while num <= size ** 2:\n        square[row][col] = num\n        num += 1\n        new_row = (row - 1) % size\n        new_col = (col + 1) % size\n        if square[new_row][new_col] != 0:\n            row += 1\n        else:\n            row = new_row\n            col = new_col\n    \n    return square", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a magic square\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    \n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for col in range(cols):\n        if sum(matrix[i][col] for i in range(rows)) != target_sum:\n            return False\n    \n    # Check diagonals\n    if sum(matrix[i][i] for i in range(rows)) != target_sum:\n        return False\n    \n    if sum(matrix[i][rows-i-1] for i in range(rows)) != target_sum:\n        return False\n    \n    return True\n\ndef g(size=4):\n    \"\"\"\n    Generate a magic square of the given size\n    \"\"\"\n    square = [[0] * size for _ in range(size)]\n    row = 0\n    col = size // 2\n    num = 1\n    \n    while num <= size ** 2:\n        square[row][col] = num\n        num += 1\n        new_row = (row - 1) % size\n        new_col = (col + 1) % size\n        if square[new_row][new_col] != 0:\n            row += 1\n        else:\n            row = new_row\n            col = new_col\n    \n    return square\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 364, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a magic square\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    \n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for col in range(cols):\n        if sum(matrix[i][col] for i in range(rows)) != target_sum:\n            return False\n    \n    # Check diagonals\n    if sum(matrix[i][i] for i in range(rows)) != target_sum:\n        return False\n    \n    if sum(matrix[i][rows-i-1] for i in range(rows)) != target_sum:\n        return False\n    \n    return True", "solution_func": "def g(size=4):\n    \"\"\"\n    Generate a magic square of the given size\n    \"\"\"\n    square = [[0] * size for _ in range(size)]\n    row = 0\n    col = size // 2\n    num = 1\n    \n    while num <= size ** 2:\n        square[row][col] = num\n        num += 1\n        new_row = (row - 1) % size\n        new_col = (col + 1) % size\n        if square[new_row][new_col] != 0:\n            row += 1\n        else:\n            row = new_row\n            col = new_col\n    \n    return square", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a magic square\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    \n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for col in range(cols):\n        if sum(matrix[i][col] for i in range(rows)) != target_sum:\n            return False\n    \n    # Check diagonals\n    if sum(matrix[i][i] for i in range(rows)) != target_sum:\n        return False\n    \n    if sum(matrix[i][rows-i-1] for i in range(rows)) != target_sum:\n        return False\n    \n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a magic square of the given size\n    \"\"\"\n    square = [[0] * size for _ in range(size)]\n    row = 0\n    col = size // 2\n    num = 1\n    \n    while num <= size ** 2:\n        square[row][col] = num\n        num += 1\n        new_row = (row - 1) % size\n        new_col = (col + 1) % size\n        if square[new_row][new_col] != 0:\n            row += 1\n        else:\n            row = new_row\n            col = new_col\n    \n    return square\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 364, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a magic square\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    \n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for col in range(cols):\n        if sum(matrix[i][col] for i in range(rows)) != target_sum:\n            return False\n    \n    # Check diagonals\n    if sum(matrix[i][i] for i in range(rows)) != target_sum:\n        return False\n    \n    if sum(matrix[i][rows-i-1] for i in range(rows)) != target_sum:\n        return False\n    \n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a magic square of the given size\n    \"\"\"\n    square = [[0] * size for _ in range(size)]\n    row = 0\n    col = size // 2\n    num = 1\n    \n    while num <= size ** 2:\n        square[row][col] = num\n        num += 1\n        new_row = (row - 1) % size\n        new_col = (col + 1) % size\n        if square[new_row][new_col] != 0:\n            row += 1\n        else:\n            row = new_row\n            col = new_col\n    \n    return square", "map_ix": [0, 0, 0, 1, 0, 0, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that sums up to the target.\n    \"\"\"\n    complements = set()\n    for num in nums:\n        if num in complements:\n            return True\n        complements.add(target - num)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 15):\n    return (nums, target)\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 364, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that sums up to the target.\n    \"\"\"\n    complements = set()\n    for num in nums:\n        if num in complements:\n            return True\n        complements.add(target - num)\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 15):\n    return (nums, target)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list after removing all duplicate elements.\n    \"\"\"\n    nums = list(set(nums))\n    return nums\n\nassert f(g([3, 4, -7, 2, 1, 3, 1]), 4)\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 365, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False", "solution_func": "def g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list after removing all duplicate elements.\n    \"\"\"\n    nums = list(set(nums))\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list after randomly shuffling it.\n    \"\"\"\n    import random\n    random.shuffle(nums)\n    return nums\n\nassert f(g([3, 4, -7, 2, 1, 3, 1]), 4)\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 365, "target_skills": null, "problem_func": "import random\nfrom typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False", "solution_func": "def g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list after randomly shuffling it.\n    \"\"\"\n    import random\n    random.shuffle(nums)\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list after reversing it.\n    \"\"\"\n    nums.reverse()\n    return nums\n\nassert f(g([3, 4, -7, 2, 1, 3, 1]), 4)\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 365, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False", "solution_func": "def g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list after reversing it.\n    \"\"\"\n    nums.reverse()\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> int:\n    \"\"\"\n    Find the maximum sum of any hourglass shape in the given 2D array.\n\n    An hourglass shape is defined as follows:\n    a b c\n      d\n    e f g\n\n    Sample input:\n    arr = [[1, 1, 1, 0, 0, 0],\n           [0, 1, 0, 0, 0, 0],\n           [1, 1, 1, 0, 0, 0],\n           [0, 0, 2, 4, 4, 0],\n           [0, 0, 0, 2, 0, 0],\n           [0, 0, 1, 2, 4, 0]]\n\n    Sample output:\n    19\n\n    Explanation: The hourglass shapes with maximum sums are:\n    2 4 4\n      2\n    1 2 4\n    and\n    1 1 1\n      1\n    1 2 4\n    Their sums are 19.\n\n    \"\"\"\n    max_sum = float('-inf')\n    for i in range(len(arr) - 2):\n        for j in range(len(arr[0]) - 2):\n            hourglass_sum = (\n                arr[i][j] + arr[i][j+1] + arr[i][j+2] +\n                arr[i+1][j+1] +\n                arr[i+2][j] + arr[i+2][j+1] + arr[i+2][j+2]\n            )\n            max_sum = max(max_sum, hourglass_sum)\n    return max_sum\n\ndef g() -> List[List[int]]:\n    return [[1, 1, 1, 0, 0, 0],\n            [0, 1, 0, 0, 0, 0],\n            [1, 1, 1, 0, 0, 0],\n            [0, 0, 2, 4, 4, 0],\n            [0, 0, 0, 2, 0, 0],\n            [0, 0, 1, 2, 4, 0]]\n\nassert f(g()) == 19\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 365, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> int:\n    \"\"\"\n    Find the maximum sum of any hourglass shape in the given 2D array.\n\n    An hourglass shape is defined as follows:\n    a b c\n      d\n    e f g\n\n    Sample input:\n    arr = [[1, 1, 1, 0, 0, 0],\n           [0, 1, 0, 0, 0, 0],\n           [1, 1, 1, 0, 0, 0],\n           [0, 0, 2, 4, 4, 0],\n           [0, 0, 0, 2, 0, 0],\n           [0, 0, 1, 2, 4, 0]]\n\n    Sample output:\n    19\n\n    Explanation: The hourglass shapes with maximum sums are:\n    2 4 4\n      2\n    1 2 4\n    and\n    1 1 1\n      1\n    1 2 4\n    Their sums are 19.\n\n    \"\"\"\n    max_sum = float('-inf')\n    for i in range(len(arr) - 2):\n        for j in range(len(arr[0]) - 2):\n            hourglass_sum = (\n                arr[i][j] + arr[i][j+1] + arr[i][j+2] +\n                arr[i+1][j+1] +\n                arr[i+2][j] + arr[i+2][j+1] + arr[i+2][j+2]\n            )\n            max_sum = max(max_sum, hourglass_sum)\n    return max_sum", "solution_func": "def g() -> List[List[int]]:\n    return [[1, 1, 1, 0, 0, 0],\n            [0, 1, 0, 0, 0, 0],\n            [1, 1, 1, 0, 0, 0],\n            [0, 0, 2, 4, 4, 0],\n            [0, 0, 0, 2, 0, 0],\n            [0, 0, 1, 2, 4, 0]]", "map_ix": [1, 0, 1, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Rearrange the elements of the given list such that all the even numbers appear\n    before the odd numbers, and the even numbers are sorted in descending order\n    while the odd numbers are sorted in ascending order.\n\n    Sample input:\n    arr = [7, 2, 5, 9, 10, 3, 6, 4, 1]\n\n    Sample output:\n    [10, 6, 4, 2, 1, 3, 5, 7, 9]\n\n    \"\"\"\n    evens = [num for num in arr if num % 2 == 0]\n    odds = [num for num in arr if num % 2 != 0]\n    return sorted(evens, reverse=True) + sorted(odds)\n\ndef g() -> List[int]:\n    return [7, 2, 5, 9, 10, 3, 6, 4, 1]\n\nassert f(g()) == [10, 6, 4, 2, 1, 3, 5, 7, 9]\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 365, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Rearrange the elements of the given list such that all the even numbers appear\n    before the odd numbers, and the even numbers are sorted in descending order\n    while the odd numbers are sorted in ascending order.\n\n    Sample input:\n    arr = [7, 2, 5, 9, 10, 3, 6, 4, 1]\n\n    Sample output:\n    [10, 6, 4, 2, 1, 3, 5, 7, 9]\n\n    \"\"\"\n    evens = [num for num in arr if num % 2 == 0]\n    odds = [num for num in arr if num % 2 != 0]\n    return sorted(evens, reverse=True) + sorted(odds)", "solution_func": "def g() -> List[int]:\n    return [7, 2, 5, 9, 10, 3, 6, 4, 1]", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Rotate the given matrix 90 degrees clockwise.\n\n    Sample input:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Sample output:\n    [[7, 4, 1],\n     [8, 5, 2],\n     [9, 6, 3]]\n\n    \"\"\"\n    n = len(matrix)\n    rotated = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            rotated[j][n-i-1] = matrix[i][j]\n    return rotated\n\ndef g() -> List[List[int]]:\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]\n\nassert f(g()) == [[7, 4, 1],\n                 [8, 5, 2],\n                 [9, 6, 3]]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 365, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Rotate the given matrix 90 degrees clockwise.\n\n    Sample input:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Sample output:\n    [[7, 4, 1],\n     [8, 5, 2],\n     [9, 6, 3]]\n\n    \"\"\"\n    n = len(matrix)\n    rotated = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            rotated[j][n-i-1] = matrix[i][j]\n    return rotated", "solution_func": "def g() -> List[List[int]]:\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, find the maximum value in the matrix.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    output: 9\n    \"\"\"\n    max_val = float('-inf')\n    for row in matrix:\n        for num in row:\n            if num > max_val:\n                max_val = num\n    return max_val\n\ndef g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\nassert f(g()) == 9\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 365, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, find the maximum value in the matrix.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    output: 9\n    \"\"\"\n    max_val = float('-inf')\n    for row in matrix:\n        for num in row:\n            if num > max_val:\n                max_val = num\n    return max_val", "solution_func": "def g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], n=6) -> bool:\n    \"\"\"Check if there exists a subsequence of length n in the list that is strictly decreasing\"\"\"\n    for i in range(len(nums)-n+1):\n        subsequence = nums[i:i+n]\n        if all(subsequence[j] > subsequence[j+1] for j in range(n-1)):\n            return True\n    return False\n\ndef g(n = 6):\n    return [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 365, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], n=6) -> bool:\n    \"\"\"Check if there exists a subsequence of length n in the list that is strictly decreasing\"\"\"\n    for i in range(len(nums)-n+1):\n        subsequence = nums[i:i+n]\n        if all(subsequence[j] > subsequence[j+1] for j in range(n-1)):\n            return True\n    return False", "solution_func": "def g(n = 6):\n    return [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"Find the maximum number of elements from the list whose sum is equal to the target value.\"\"\"\n    n = len(nums)\n    dp = [[float('-inf')] * (target + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - nums[i - 1]] + 1)\n\n    return dp[n][target]\n\ndef g(nums=[2, 4, 6, 8], target=10):\n    return nums, target\n\nassert f(*g()) == 4\n\n", "emb": null, "idx_generation": 365, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"Find the maximum number of elements from the list whose sum is equal to the target value.\"\"\"\n    n = len(nums)\n    dp = [[float('-inf')] * (target + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - nums[i - 1]] + 1)\n\n    return dp[n][target]", "solution_func": "def g(nums=[2, 4, 6, 8], target=10):\n    return nums, target", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    Given a matrix of integers and a target number, find the indices (row and column) of all occurrences of the target number in the matrix.\n    \"\"\"\n    indices = []\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target:\n                indices.append((i, j))\n    return indices\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 5\n    return (matrix, target)\n\nassert f(*g()) == [(1, 1)]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 365, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    Given a matrix of integers and a target number, find the indices (row and column) of all occurrences of the target number in the matrix.\n    \"\"\"\n    indices = []\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target:\n                indices.append((i, j))\n    return indices", "solution_func": "def g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 5\n    return (matrix, target)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there is a subsequence in the given list whose sum is equal to the target number.\n    \"\"\"\n    def subsetSum(numbers, target):\n        if target == 0:\n            return True\n        if not numbers or target < 0:\n            return False\n        return subsetSum(numbers[1:], target) or subsetSum(numbers[1:], target - numbers[0])\n\n    return subsetSum(nums, target)\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 366, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there is a subsequence in the given list whose sum is equal to the target number.\n    \"\"\"\n    def subsetSum(numbers, target):\n        if target == 0:\n            return True\n        if not numbers or target < 0:\n            return False\n        return subsetSum(numbers[1:], target) or subsetSum(numbers[1:], target - numbers[0])\n\n    return subsetSum(nums, target)", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport numpy as np\nfrom typing import List\n\ndef f(matrix: List[List[int]], target_sum: int) -> bool:\n    \"\"\"\n    Check if there exists a submatrix in the given matrix that has a sum equal to the target_sum.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    prefix_sum = np.zeros((rows + 1, cols + 1))\n    for i in range(1, rows + 1):\n        for j in range(1, cols + 1):\n            prefix_sum[i][j] = prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1] + matrix[i - 1][j - 1]\n\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i + 1, rows + 1):\n                for l in range(j + 1, cols + 1):\n                    submatrix_sum = prefix_sum[k][l] - prefix_sum[i][l] - prefix_sum[k][j] + prefix_sum[i][j]\n                    if submatrix_sum == target_sum:\n                        return True\n    \n    return False\n\ndef g(matrix: List[List[int]]):\n    \"\"\"\n    This solution returns the input matrix as is.\n    \"\"\"\n    return matrix\n\nassert f(g([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), 12) == True\n\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 366, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\nfrom typing import List\n\ndef f(matrix: List[List[int]], target_sum: int) -> bool:\n    \"\"\"\n    Check if there exists a submatrix in the given matrix that has a sum equal to the target_sum.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    prefix_sum = np.zeros((rows + 1, cols + 1))\n    for i in range(1, rows + 1):\n        for j in range(1, cols + 1):\n            prefix_sum[i][j] = prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1] + matrix[i - 1][j - 1]\n\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i + 1, rows + 1):\n                for l in range(j + 1, cols + 1):\n                    submatrix_sum = prefix_sum[k][l] - prefix_sum[i][l] - prefix_sum[k][j] + prefix_sum[i][j]\n                    if submatrix_sum == target_sum:\n                        return True\n    \n    return False", "solution_func": "def g(matrix: List[List[int]]):\n    \"\"\"\n    This solution returns the input matrix as is.\n    \"\"\"\n    return matrix", "map_ix": [1, 0, 1, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there is a subarray in the given list whose sum is equal to 0.\n    \"\"\"\n    prefix_sum = 0\n    seen = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == 0 or prefix_sum in seen:\n            return True\n        seen.add(prefix_sum)\n    return False\n\ndef g(nums=[4, 2, -3, 1, 6]):\n    return nums\n\nassert f(g()) == True\n\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 366, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there is a subarray in the given list whose sum is equal to 0.\n    \"\"\"\n    prefix_sum = 0\n    seen = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == 0 or prefix_sum in seen:\n            return True\n        seen.add(prefix_sum)\n    return False", "solution_func": "def g(nums=[4, 2, -3, 1, 6]):\n    return nums", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum product of any two numbers in the list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    20\n\n    Explanation: The maximum product is 4 * 5 = 20.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == 20\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 366, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum product of any two numbers in the list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    20\n\n    Explanation: The maximum product is 4 * 5 = 20.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n    return max_product", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subarray with a sum equal to zero.\n\n    Sample Input:\n    nums = [4, 2, -3, 1, 6]\n\n    Sample Output:\n    True\n\n    Explanation: The subarray [2, -3, 1] has a sum of zero.\n    \"\"\"\n    prefix_sum = 0\n    sum_set = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == 0 or prefix_sum in sum_set:\n            return True\n        sum_set.add(prefix_sum)\n    return False\n\ndef g(nums: List[int] = [4, 2, -3, 1, 6]):\n    return nums\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 366, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subarray with a sum equal to zero.\n\n    Sample Input:\n    nums = [4, 2, -3, 1, 6]\n\n    Sample Output:\n    True\n\n    Explanation: The subarray [2, -3, 1] has a sum of zero.\n    \"\"\"\n    prefix_sum = 0\n    sum_set = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == 0 or prefix_sum in sum_set:\n            return True\n        sum_set.add(prefix_sum)\n    return False", "solution_func": "def g(nums: List[int] = [4, 2, -3, 1, 6]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with only the unique elements from the original list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 4, 5, 5]\n\n    Sample Output:\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    return list(set(nums))\n\ndef g(nums: List[int] = [1, 2, 3, 4, 4, 5, 5]):\n    return nums\n\nassert f(g()) == [1, 2, 3, 4, 5]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 366, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with only the unique elements from the original list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 4, 5, 5]\n\n    Sample Output:\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    return list(set(nums))", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 4, 5, 5]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the sum of all elements in the grid is divisible by 5.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    total_sum = sum(sum(row) for row in arr)\n    return total_sum % 5 == 0\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 366, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the sum of all elements in the grid is divisible by 5.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    total_sum = sum(sum(row) for row in arr)\n    return total_sum % 5 == 0", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [0, 0, 0, 1, 0, 0, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a 2D grid of integers, return a list containing the sums of each row.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    [6, 15, 24]\n    \"\"\"\n    row_sums = [sum(row) for row in arr]\n    return row_sums\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == [6, 15, 24]\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 366, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a 2D grid of integers, return a list containing the sums of each row.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    [6, 15, 24]\n    \"\"\"\n    row_sums = [sum(row) for row in arr]\n    return row_sums", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> int:\n    \"\"\"\n    Given a 2D grid of integers, return the maximum value in the grid.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    9\n    \"\"\"\n    max_val = max(max(row) for row in arr)\n    return max_val\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == 9\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 366, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[List[int]]) -> int:\n    \"\"\"\n    Given a 2D grid of integers, return the maximum value in the grid.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    9\n    \"\"\"\n    max_val = max(max(row) for row in arr)\n    return max_val", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size\n    \"\"\"\n    return [[0 if j > i else 1 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 366, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size\n    \"\"\"\n    return [[0 if j > i else 1 for j in range(size)] for i in range(size)]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D matrix of integers, check if the matrix is a magic square.\n    A magic square is a square matrix where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    target_sum = sum(matrix[0])\n    \n    # Check row sums\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check column sums\n    for col in range(len(matrix[0])):\n        col_sum = sum(matrix[i][col] for i in range(len(matrix)))\n        if col_sum != target_sum:\n            return False\n    \n    # Check diagonal sums\n    diagonal_sum = sum(matrix[i][i] for i in range(len(matrix)))\n    if diagonal_sum != target_sum:\n        return False\n    \n    reverse_diagonal_sum = sum(matrix[i][len(matrix) - i - 1] for i in range(len(matrix)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    \n    return True\n\ndef g(matrix: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix\n\nassert f(g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 367, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D matrix of integers, check if the matrix is a magic square.\n    A magic square is a square matrix where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    target_sum = sum(matrix[0])\n    \n    # Check row sums\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check column sums\n    for col in range(len(matrix[0])):\n        col_sum = sum(matrix[i][col] for i in range(len(matrix)))\n        if col_sum != target_sum:\n            return False\n    \n    # Check diagonal sums\n    diagonal_sum = sum(matrix[i][i] for i in range(len(matrix)))\n    if diagonal_sum != target_sum:\n        return False\n    \n    reverse_diagonal_sum = sum(matrix[i][len(matrix) - i - 1] for i in range(len(matrix)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    \n    return True", "solution_func": "def g(matrix: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix", "map_ix": [1, 1, 0, 1, 0, 0, 1, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    \"\"\"\n    Check if the given list of words is a palindrome list.\n    A palindrome list is a list where each word is a palindrome.\n\n    Sample Input:\n    words = [\"level\", \"radar\", \"deed\", \"python\"]\n\n    Sample Output:\n    False\n    \"\"\"\n    def is_palindrome(word: str) -> bool:\n        return word == word[::-1]\n    \n    return all(is_palindrome(word) for word in words)\n\ndef g(words: List[str] = [\"level\", \"radar\", \"deed\", \"python\"]):\n    return words\n\nassert f(g()) == False\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 367, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    \"\"\"\n    Check if the given list of words is a palindrome list.\n    A palindrome list is a list where each word is a palindrome.\n\n    Sample Input:\n    words = [\"level\", \"radar\", \"deed\", \"python\"]\n\n    Sample Output:\n    False\n    \"\"\"\n    def is_palindrome(word: str) -> bool:\n        return word == word[::-1]\n    \n    return all(is_palindrome(word) for word in words)", "solution_func": "def g(words: List[str] = [\"level\", \"radar\", \"deed\", \"python\"]):\n    return words", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D matrix of integers, check if the matrix is a magic square.\n    A magic square is a square matrix where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    matrix = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    target_sum = sum(matrix[0])\n    \n    # Check row sums\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check column sums\n    for col in range(len(matrix[0])):\n        col_sum = sum(matrix[i][col] for i in range(len(matrix)))\n        if col_sum != target_sum:\n            return False\n    \n    # Check diagonal sums\n    diagonal_sum = sum(matrix[i][i] for i in range(len(matrix)))\n    if diagonal_sum != target_sum:\n        return False\n    \n    reverse_diagonal_sum = sum(matrix[i][len(matrix) - i - 1] for i in range(len(matrix)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    \n    return True\n\ndef g(matrix: List[List[int]] = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]):\n    return matrix\n\nassert f(g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 367, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D matrix of integers, check if the matrix is a magic square.\n    A magic square is a square matrix where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    matrix = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    target_sum = sum(matrix[0])\n    \n    # Check row sums\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check column sums\n    for col in range(len(matrix[0])):\n        col_sum = sum(matrix[i][col] for i in range(len(matrix)))\n        if col_sum != target_sum:\n            return False\n    \n    # Check diagonal sums\n    diagonal_sum = sum(matrix[i][i] for i in range(len(matrix)))\n    if diagonal_sum != target_sum:\n        return False\n    \n    reverse_diagonal_sum = sum(matrix[i][len(matrix) - i - 1] for i in range(len(matrix)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    \n    return True", "solution_func": "def g(matrix: List[List[int]] = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]):\n    return matrix", "map_ix": [1, 1, 0, 1, 0, 0, 1, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target value, find two integers in the list such that their sum is equal to the target value.\n    Return the indices of the two integers in a list.\n    \"\"\"\n    num_dict = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_dict:\n            return [num_dict[complement], i]\n        num_dict[num] = i\n    return []\n\ndef g(nums = [1, 6, 4, 2, 3]):\n    return nums\n\nassert f(g()) == [1, 2]\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 367, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target value, find two integers in the list such that their sum is equal to the target value.\n    Return the indices of the two integers in a list.\n    \"\"\"\n    num_dict = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_dict:\n            return [num_dict[complement], i]\n        num_dict[num] = i\n    return []", "solution_func": "def g(nums = [1, 6, 4, 2, 3]):\n    return nums", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> int:\n    \"\"\"\n    Given a list of integers and a target value, find the number of unique pairs of integers in the list that sum up to the target value.\n    \"\"\"\n    count = 0\n    num_dict = {}\n    for num in nums:\n        complement = target - num\n        if complement in num_dict and num_dict[complement] != num:\n            count += 1\n        num_dict[num] = complement\n    return count\n\ndef g(nums = [1, 6, 4, 2, 3]):\n    return nums\n\nassert f(g()) == 2\n", "emb": null, "idx_generation": 367, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> int:\n    \"\"\"\n    Given a list of integers and a target value, find the number of unique pairs of integers in the list that sum up to the target value.\n    \"\"\"\n    count = 0\n    num_dict = {}\n    for num in nums:\n        complement = target - num\n        if complement in num_dict and num_dict[complement] != num:\n            count += 1\n        num_dict[num] = complement\n    return count", "solution_func": "def g(nums = [1, 6, 4, 2, 3]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> List[List[int]]:\n    \"\"\"\n    Given a list of integers and a target value, find all unique triplets in the list that sum up to the target value.\n    Return the triplets as a list of lists.\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    triplets = []\n    for i in range(n-2):\n        if i > 0 and nums[i] == nums[i-1]:\n            continue\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target:\n                triplets.append([nums[i], nums[left], nums[right]])\n                while left < right and nums[left] == nums[left+1]:\n                    left += 1\n                while left < right and nums[right] == nums[right-1]:\n                    right -= 1\n                left += 1\n                right -= 1\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return triplets\n\ndef g(nums = [-1, 0, 1, 2, -1, -4]):\n    return nums\n\nassert f(g()) == [[-1, 0, 1], [-1, -1, 2]]\n", "emb": null, "idx_generation": 367, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> List[List[int]]:\n    \"\"\"\n    Given a list of integers and a target value, find all unique triplets in the list that sum up to the target value.\n    Return the triplets as a list of lists.\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    triplets = []\n    for i in range(n-2):\n        if i > 0 and nums[i] == nums[i-1]:\n            continue\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target:\n                triplets.append([nums[i], nums[left], nums[right]])\n                while left < right and nums[left] == nums[left+1]:\n                    left += 1\n                while left < right and nums[right] == nums[right-1]:\n                    right -= 1\n                left += 1\n                right -= 1\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return triplets", "solution_func": "def g(nums = [-1, 0, 1, 2, -1, -4]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum product of any three numbers in the list.\n\n    Sample input:\n    arr = [1, 2, 3, 4, 5]\n\n    Sample output:\n    60\n\n    Explanation: The maximum product of three numbers is obtained by multiplying 4, 5, and 3, which gives 60.\n\n    \"\"\"\n    arr.sort()\n    n = len(arr)\n    return max(arr[n-1] * arr[n-2] * arr[n-3], arr[0] * arr[1] * arr[n-1])\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == 60\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 367, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum product of any three numbers in the list.\n\n    Sample input:\n    arr = [1, 2, 3, 4, 5]\n\n    Sample output:\n    60\n\n    Explanation: The maximum product of three numbers is obtained by multiplying 4, 5, and 3, which gives 60.\n\n    \"\"\"\n    arr.sort()\n    n = len(arr)\n    return max(arr[n-1] * arr[n-2] * arr[n-3], arr[0] * arr[1] * arr[n-1])", "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the sum of all the even numbers in the list.\n\n    Sample input:\n    arr = [1, 2, 3, 4, 5]\n\n    Sample output:\n    6\n\n    Explanation: The sum of even numbers in the list is 2 + 4 = 6.\n\n    \"\"\"\n    return sum(num for num in arr if num % 2 == 0)\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == 6\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 367, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the sum of all the even numbers in the list.\n\n    Sample input:\n    arr = [1, 2, 3, 4, 5]\n\n    Sample output:\n    6\n\n    Explanation: The sum of even numbers in the list is 2 + 4 = 6.\n\n    \"\"\"\n    return sum(num for num in arr if num % 2 == 0)", "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 4, 5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[str]) -> bool:\n    \"\"\"\n    Given a list of strings, check if all the strings have the same length.\n\n    Sample input:\n    arr = ['apple', 'banana', 'cherry']\n\n    Sample output:\n    True\n\n    Explanation: All the strings in the list have the same length, which is 5.\n\n    \"\"\"\n    return all(len(s) == len(arr[0]) for s in arr)\n\ndef g() -> List[str]:\n    return ['apple', 'banana', 'cherry']\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 367, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[str]) -> bool:\n    \"\"\"\n    Given a list of strings, check if all the strings have the same length.\n\n    Sample input:\n    arr = ['apple', 'banana', 'cherry']\n\n    Sample output:\n    True\n\n    Explanation: All the strings in the list have the same length, which is 5.\n\n    \"\"\"\n    return all(len(s) == len(arr[0]) for s in arr)", "solution_func": "def g() -> List[str]:\n    return ['apple', 'banana', 'cherry']", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, a=-10, b=5) -> bool:\n    \"\"\"Check if a given number is divisible by the sum of two other numbers.\"\"\"\n    return x % (a + b) == 0\n\ndef g(a=-10, b=5):\n    return a * b\n\nassert f(g())\n\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 367, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, a=-10, b=5) -> bool:\n    \"\"\"Check if a given number is divisible by the sum of two other numbers.\"\"\"\n    return x % (a + b) == 0", "solution_func": "def g(a=-10, b=5):\n    return a * b", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there is a subset of numbers that can be multiplied into two equal-product subarrays.\n\n    Sample Input:\n    `nums = [2, 4, 6, 8]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    total_product = 1\n    for num in nums:\n        total_product *= num\n    if total_product == 0:\n        return True\n    if total_product % 2 != 0:\n        return False\n    target_product = total_product // 2\n    n = len(nums)\n    dp = [[False] * (target_product + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_product + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    return dp[n][target_product]\n\ndef g():\n    return [2, 4, 6, 8]\n\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 368, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there is a subset of numbers that can be multiplied into two equal-product subarrays.\n\n    Sample Input:\n    `nums = [2, 4, 6, 8]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    total_product = 1\n    for num in nums:\n        total_product *= num\n    if total_product == 0:\n        return True\n    if total_product % 2 != 0:\n        return False\n    target_product = total_product // 2\n    n = len(nums)\n    dp = [[False] * (target_product + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_product + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    return dp[n][target_product]", "solution_func": "def g():\n    return [2, 4, 6, 8]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given nested list whose product is equal to 100.\n    \"\"\"\n\n    num_set = set()\n    for lst in nums:\n        for num in lst:\n            if 100 / num in num_set:\n                return True\n            num_set.add(num)\n    return False\n\ndef g(nums: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums\n\nassert f(g()) == False\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 368, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given nested list whose product is equal to 100.\n    \"\"\"\n\n    num_set = set()\n    for lst in nums:\n        for num in lst:\n            if 100 / num in num_set:\n                return True\n            num_set.add(num)\n    return False", "solution_func": "def g(nums: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, a=5, b=-3) -> bool:\n    \"\"\"Solve a multiplication problem\"\"\"\n    return a * x == b\ndef g(a = 5, b = -3):\n    return b / a\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 368, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, a=5, b=-3) -> bool:\n    \"\"\"Solve a multiplication problem\"\"\"\n    return a * x == b", "solution_func": "def g(a = 5, b = -3):\n    return b / a", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers contains any duplicates.\n\n    Sample Input:\n    [1, 2, 3, 4, 5, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5, 5]\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 368, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers contains any duplicates.\n\n    Sample Input:\n    [1, 2, 3, 4, 5, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return len(nums) != len(set(nums))", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(x: int, y: int) -> bool:\n    \"\"\"\n    Check if the given numbers x and y satisfy the equation x^2 + y^2 = 25.\n\n    Sample Input:\n    x = 3\n    y = 4\n\n    Sample Output:\n    True\n    \"\"\"\n    return x**2 + y**2 == 25\n\ndef g():\n    return (3, 4)\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 368, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(x: int, y: int) -> bool:\n    \"\"\"\n    Check if the given numbers x and y satisfy the equation x^2 + y^2 = 25.\n\n    Sample Input:\n    x = 3\n    y = 4\n\n    Sample Output:\n    True\n    \"\"\"\n    return x**2 + y**2 == 25", "solution_func": "def g():\n    return (3, 4)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers contains any prime numbers.\n\n    Sample Input:\n    [1, 4, 6, 8, 10, 13]\n\n    Sample Output:\n    True\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return any(is_prime(num) for num in nums)\n\ndef g():\n    return [1, 4, 6, 8, 10, 13]\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 368, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers contains any prime numbers.\n\n    Sample Input:\n    [1, 4, 6, 8, 10, 13]\n\n    Sample Output:\n    True\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return any(is_prime(num) for num in nums)", "solution_func": "def g():\n    return [1, 4, 6, 8, 10, 13]", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\n\ndef f(nums: List[int], target: int = 10) -> int:\n    \"\"\"\n    Given a list of integers, find the two numbers that add up to the target.\n    If such a pair exists, return the product of the two numbers. Otherwise, return -1.\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in nums_set and complement != num:\n            return num * complement\n    return -1\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums\n\nassert f(g()) == 40\n", "emb": null, "idx_generation": 368, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int], target: int = 10) -> int:\n    \"\"\"\n    Given a list of integers, find the two numbers that add up to the target.\n    If such a pair exists, return the product of the two numbers. Otherwise, return -1.\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in nums_set and complement != num:\n            return num * complement\n    return -1", "solution_func": "def g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\n\ndef f(nums: List[int], target: int = 10) -> List[int]:\n    \"\"\"\n    Given a list of integers, find all the pairs of numbers that add up to the target.\n    Return a list of tuples, where each tuple represents a pair of numbers.\n    \"\"\"\n    pairs = []\n    nums_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in nums_set and complement != num:\n            pairs.append((num, complement))\n    return pairs\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums\n\nassert f(g()) == [(2, 8), (5, 5), (3, 7)]\n", "emb": null, "idx_generation": 368, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int], target: int = 10) -> List[int]:\n    \"\"\"\n    Given a list of integers, find all the pairs of numbers that add up to the target.\n    Return a list of tuples, where each tuple represents a pair of numbers.\n    \"\"\"\n    pairs = []\n    nums_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in nums_set and complement != num:\n            pairs.append((num, complement))\n    return pairs", "solution_func": "def g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\n\ndef f(nums: List[int], target: int = 10) -> int:\n    \"\"\"\n    Given a list of integers, find the minimum number of pairs that need to be summed to get the target.\n    Return the count of minimum pairs.\n    \"\"\"\n    count = 0\n    nums_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in nums_set and complement != num:\n            count += 1\n    return count\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums\n\nassert f(g()) == 3\n", "emb": null, "idx_generation": 368, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int], target: int = 10) -> int:\n    \"\"\"\n    Given a list of integers, find the minimum number of pairs that need to be summed to get the target.\n    Return the count of minimum pairs.\n    \"\"\"\n    count = 0\n    nums_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in nums_set and complement != num:\n            count += 1\n    return count", "solution_func": "def g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\n\ndef f(nums: List[int], target: int = 10) -> int:\n    \"\"\"\n    Given a list of integers, find the two numbers that add up to the target.\n    If such a pair exists, return their product. Otherwise, return -1.\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in nums_set and complement != num:\n            return num * complement\n    return -1\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums\n\nassert f(g()) == 15\n\n", "emb": null, "idx_generation": 368, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int], target: int = 10) -> int:\n    \"\"\"\n    Given a list of integers, find the two numbers that add up to the target.\n    If such a pair exists, return their product. Otherwise, return -1.\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in nums_set and complement != num:\n            return num * complement\n    return -1", "solution_func": "def g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target='aeiou') -> int:\n    \"\"\"\n    Given a string s and a target string, count the number of occurrences of the target string in s.\n    \"\"\"\n    return s.count(target)\n\ndef g(s = 'hello', target = 'l'):\n    return s\n\nassert f(g()) == 2\n", "emb": null, "idx_generation": 369, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='aeiou') -> int:\n    \"\"\"\n    Given a string s and a target string, count the number of occurrences of the target string in s.\n    \"\"\"\n    return s.count(target)", "solution_func": "def g(s = 'hello', target = 'l'):\n    return s", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target value, find two integers in the list such that their sum is equal to the target value.\n    Return the indices of the two integers in a list.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return [i, j]\n    return []\n\ndef g(nums = [1, 6, 4, 2, 3]):\n    return nums\n\nassert f(g()) == [1, 2]\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 369, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target value, find two integers in the list such that their sum is equal to the target value.\n    Return the indices of the two integers in a list.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return [i, j]\n    return []", "solution_func": "def g(nums = [1, 6, 4, 2, 3]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target='aeiou') -> bool:\n    \"\"\"\n    Given a string s and a target string, check if the target string is present in s.\n    \"\"\"\n    return target in s\n\ndef g(s = 'hello', target = 'o'):\n    return s\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 369, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target='aeiou') -> bool:\n    \"\"\"\n    Given a string s and a target string, check if the target string is present in s.\n    \"\"\"\n    return target in s", "solution_func": "def g(s = 'hello', target = 'o'):\n    return s", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if all the numbers in the list are prime numbers.\n\n    Sample input:\n    nums = [2, 3, 5, 7, 11]\n\n    Sample output:\n    True\n\n    Explanation: All the numbers in the list are prime numbers.\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return all(is_prime(num) for num in nums)\n\ndef g(nums: List[int] = [2, 3, 5, 7, 11]):\n    return nums\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 369, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if all the numbers in the list are prime numbers.\n\n    Sample input:\n    nums = [2, 3, 5, 7, 11]\n\n    Sample output:\n    True\n\n    Explanation: All the numbers in the list are prime numbers.\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return all(is_prime(num) for num in nums)", "solution_func": "def g(nums: List[int] = [2, 3, 5, 7, 11]):\n    return nums", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the list contains any duplicate number.\n\n    Sample input:\n    nums = [1, 2, 3, 2, 4]\n\n    Sample output:\n    True\n\n    Explanation: The number 2 appears twice in the list.\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g(nums: List[int] = [1, 2, 3, 2, 4]):\n    return nums\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 369, "target_skills": null, "problem_func": "from typing import*\nimport random\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the list contains any duplicate number.\n\n    Sample input:\n    nums = [1, 2, 3, 2, 4]\n\n    Sample output:\n    True\n\n    Explanation: The number 2 appears twice in the list.\n    \"\"\"\n    return len(nums) != len(set(nums))", "solution_func": "def g(nums: List[int] = [1, 2, 3, 2, 4]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list whose sum is equal to the target.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample output:\n    True\n\n    Explanation: The subarray [2, 3, 4] has a sum of 9.\n    \"\"\"\n    for i in range(len(nums)):\n        subarray_sum = nums[i]\n        if subarray_sum == target:\n            return True\n        for j in range(i + 1, len(nums)):\n            subarray_sum += nums[j]\n            if subarray_sum == target:\n                return True\n            elif subarray_sum > target:\n                break\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return nums, target\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 369, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list whose sum is equal to the target.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample output:\n    True\n\n    Explanation: The subarray [2, 3, 4] has a sum of 9.\n    \"\"\"\n    for i in range(len(nums)):\n        subarray_sum = nums[i]\n        if subarray_sum == target:\n            return True\n        for j in range(i + 1, len(nums)):\n            subarray_sum += nums[j]\n            if subarray_sum == target:\n                return True\n            elif subarray_sum > target:\n                break\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return nums, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    nums = [1, 2, 3, 2, 1]\n    return nums\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 369, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]", "solution_func": "def g():\n    nums = [1, 2, 3, 2, 1]\n    return nums", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers contains any duplicate elements.\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    nums = [1, 2, 3, 4, 5, 6]\n    return nums\n\nassert f(g()) == False\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 369, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers contains any duplicate elements.\n    \"\"\"\n    return len(nums) != len(set(nums))", "solution_func": "def g():\n    nums = [1, 2, 3, 4, 5, 6]\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is sorted in non-decreasing order.\n    \"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\n\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 369, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is sorted in non-decreasing order.\n    \"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))", "solution_func": "def g():\n    nums = [1, 2, 3, 4, 5]\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains at least one element that is equal to the sum of all other elements.\n    \"\"\"\n    return any([elem == sum(arr) - elem for elem in arr])\n\ndef g():\n    return [1, 2, 3, 4, 10]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 369, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains at least one element that is equal to the sum of all other elements.\n    \"\"\"\n    return any([elem == sum(arr) - elem for elem in arr])", "solution_func": "def g():\n    return [1, 2, 3, 4, 10]", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are any two numbers that add up to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums.sort()\n    left = 0\n    right = len(nums) - 1\n    while left < right:\n        current_sum = nums[left] + nums[right]\n        if current_sum == target:\n            return True\n        elif current_sum < target:\n            left += 1\n        else:\n            right -= 1\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums, 9\n\nassert f(*g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 370, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are any two numbers that add up to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums.sort()\n    left = 0\n    right = len(nums) - 1\n    while left < right:\n        current_sum = nums[left] + nums[right]\n        if current_sum == target:\n            return True\n        elif current_sum < target:\n            left += 1\n        else:\n            right -= 1\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums, 9", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], prefix: str) -> bool:\n    \"\"\"\n    Given a list of words, check if there is a word that starts with the given prefix.\n    If such a word exists, return True. Otherwise, return False.\n    \"\"\"\n    for word in words:\n        if word.startswith(prefix):\n            return True\n    return False\n\ndef g(words=['apple', 'banana', 'cherry', 'date'], prefix='b'):\n    return words, prefix\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 370, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], prefix: str) -> bool:\n    \"\"\"\n    Given a list of words, check if there is a word that starts with the given prefix.\n    If such a word exists, return True. Otherwise, return False.\n    \"\"\"\n    for word in words:\n        if word.startswith(prefix):\n            return True\n    return False", "solution_func": "def g(words=['apple', 'banana', 'cherry', 'date'], prefix='b'):\n    return words, prefix", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if there are exactly k unique numbers.\n    If there are exactly k unique numbers, return True. Otherwise, return False.\n    \"\"\"\n    unique_nums = set(nums)\n    return len(unique_nums) == k\n\ndef g(nums=[1, 2, 3, 4, 5], k=3):\n    return nums, k\n\nassert f(*g()) == True\n", "emb": null, "idx_generation": 370, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if there are exactly k unique numbers.\n    If there are exactly k unique numbers, return True. Otherwise, return False.\n    \"\"\"\n    unique_nums = set(nums)\n    return len(unique_nums) == k", "solution_func": "def g(nums=[1, 2, 3, 4, 5], k=3):\n    return nums, k", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Find the maximum difference between two elements in the given list\n    \"\"\"\n    if len(arr) < 2:\n        return 0\n    min_val = arr[0]\n    max_diff = arr[1] - arr[0]\n    for i in range(1, len(arr)):\n        max_diff = max(max_diff, arr[i] - min_val)\n        min_val = min(min_val, arr[i])\n    return max_diff\n\ndef g(arr: List[int] = [1, 7, 5, 3, 4, 6]):\n    return arr\n\nassert f(g()) == 6\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 370, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Find the maximum difference between two elements in the given list\n    \"\"\"\n    if len(arr) < 2:\n        return 0\n    min_val = arr[0]\n    max_diff = arr[1] - arr[0]\n    for i in range(1, len(arr)):\n        max_diff = max(max_diff, arr[i] - min_val)\n        min_val = min(min_val, arr[i])\n    return max_diff", "solution_func": "def g(arr: List[int] = [1, 7, 5, 3, 4, 6]):\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> str:\n    \"\"\"\n    Reverse the order of words in the given string.\n    \"\"\"\n    return ' '.join(s.split()[::-1])\n\ndef g(s: str = \"Hello World\"):\n    return s\n\nassert f(g()) == \"World Hello\"\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 370, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> str:\n    \"\"\"\n    Reverse the order of words in the given string.\n    \"\"\"\n    return ' '.join(s.split()[::-1])", "solution_func": "def g(s: str = \"Hello World\"):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Remove duplicate elements from the given list and return the result in ascending order.\n    \"\"\"\n    return sorted(list(set(arr)))\n\ndef g(arr: List[int] = [1, 2, 1, 3, 2, 4, 5]):\n    return arr\n\nassert f(g()) == [1, 2, 3, 4, 5]\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 370, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Remove duplicate elements from the given list and return the result in ascending order.\n    \"\"\"\n    return sorted(list(set(arr)))", "solution_func": "def g(arr: List[int] = [1, 2, 1, 3, 2, 4, 5]):\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the given list contains two numbers that multiply to the target number.\n    \"\"\"\n    n = len(nums)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[2, 4, 6, 8], target=48):\n    return nums, target\n\nassert f(*g()) == True\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 370, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the given list contains two numbers that multiply to the target number.\n    \"\"\"\n    n = len(nums)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if nums[i] * nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums=[2, 4, 6, 8], target=48):\n    return nums, target", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, k: int) -> bool:\n    \"\"\"\n    Check if there are exactly k consecutive occurrences of the same character in the string.\n    \"\"\"\n    count = 1\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            count += 1\n            if count == k:\n                return True\n        else:\n            count = 1\n    return False\n\ndef g(s=\"aaabbbbcc\", k=4):\n    return (s, k)\n\nassert f(*g()) == False\n", "emb": null, "idx_generation": 370, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, k: int) -> bool:\n    \"\"\"\n    Check if there are exactly k consecutive occurrences of the same character in the string.\n    \"\"\"\n    count = 1\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            count += 1\n            if count == k:\n                return True\n        else:\n            count = 1\n    return False", "solution_func": "def g(s=\"aaabbbbcc\", k=4):\n    return (s, k)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a repeated number.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 2]):\n    return nums\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 370, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a repeated number.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 2]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there exists two numbers in the list that add up to the target.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(n=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, n]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 370, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there exists two numbers in the list that add up to the target.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(n=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, n]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list is sorted in non-decreasing order.\n\n    Sample input:\n    [1, 2, 3, 4, 5]\n\n    Sample output:\n    True\n    \"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 371, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list is sorted in non-decreasing order.\n\n    Sample input:\n    [1, 2, 3, 4, 5]\n\n    Sample output:\n    True\n    \"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there are any duplicate elements in the list.\n\n    Sample input:\n    [1, 2, 3, 2, 4]\n\n    Sample output:\n    True\n    \"\"\"\n    return len(set(lst)) != len(lst)\n\ndef g():\n    return [1, 2, 3, 2, 4]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 371, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there are any duplicate elements in the list.\n\n    Sample input:\n    [1, 2, 3, 2, 4]\n\n    Sample output:\n    True\n    \"\"\"\n    return len(set(lst)) != len(lst)", "solution_func": "def g():\n    return [1, 2, 3, 2, 4]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, find the maximum element in the matrix.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    The maximum element in the matrix is 9.\n\n    Return the maximum element in the matrix.\n    \"\"\"\n    max_element = float('-inf')\n    for row in matrix:\n        for num in row:\n            max_element = max(max_element, num)\n    return max_element\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 9\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 371, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, find the maximum element in the matrix.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    The maximum element in the matrix is 9.\n\n    Return the maximum element in the matrix.\n    \"\"\"\n    max_element = float('-inf')\n    for row in matrix:\n        for num in row:\n            max_element = max(max_element, num)\n    return max_element", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Determine if it is possible to find a pair of numbers in a matrix that XORs to a target number. The pair of numbers\n    must be distinct and the order of the numbers in the pair does not matter.\n\n    Sample input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample output:\n    True\n\n    The pair of numbers (2, 6) XORs to 4, which is the target number.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for x in range(i, rows):\n                for y in range(j, cols):\n                    if matrix[i][j] ^ matrix[x][y] == target and (i != x or j != y):\n                        return True\n    return False\n\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, target ^ 2, 9]]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 371, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Determine if it is possible to find a pair of numbers in a matrix that XORs to a target number. The pair of numbers\n    must be distinct and the order of the numbers in the pair does not matter.\n\n    Sample input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample output:\n    True\n\n    The pair of numbers (2, 6) XORs to 4, which is the target number.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for x in range(i, rows):\n                for y in range(j, cols):\n                    if matrix[i][j] ^ matrix[x][y] == target and (i != x or j != y):\n                        return True\n    return False", "solution_func": "def g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, target ^ 2, 9]]", "map_ix": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Determine if it is possible to find a pair of numbers in a matrix that XORs to a target number. The pair of numbers\n    must be distinct and the order of the numbers in the pair does not matter.\n\n    Sample input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample output:\n    True\n\n    The pair of numbers (2, 6) XORs to 4, which is the target number.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for x in range(i+1, rows):\n                for y in range(j+1, cols):\n                    if matrix[i][j] ^ matrix[x][y] == target and (i != x or j != y):\n                        return True\n    return False\n\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, target ^ 2, 9]]\n\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 371, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Determine if it is possible to find a pair of numbers in a matrix that XORs to a target number. The pair of numbers\n    must be distinct and the order of the numbers in the pair does not matter.\n\n    Sample input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample output:\n    True\n\n    The pair of numbers (2, 6) XORs to 4, which is the target number.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for x in range(i+1, rows):\n                for y in range(j+1, cols):\n                    if matrix[i][j] ^ matrix[x][y] == target and (i != x or j != y):\n                        return True\n    return False", "solution_func": "def g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, target ^ 2, 9]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Determine if it is possible to find a pair of numbers in a matrix that XORs to a target number. The pair of numbers\n    must be distinct and the order of the numbers in the pair does not matter.\n\n    Sample input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample output:\n    True\n\n    The pair of numbers (2, 6) XORs to 4, which is the target number.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for x in range(i+1, rows):\n                for y in range(j+1, cols):\n                    if matrix[i][j] ^ matrix[x][y] == target and (i != x or j != y):\n                        return True\n    return False\n\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, target ^ 2, 9]]\n\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 371, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Determine if it is possible to find a pair of numbers in a matrix that XORs to a target number. The pair of numbers\n    must be distinct and the order of the numbers in the pair does not matter.\n\n    Sample input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample output:\n    True\n\n    The pair of numbers (2, 6) XORs to 4, which is the target number.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for x in range(i+1, rows):\n                for y in range(j+1, cols):\n                    if matrix[i][j] ^ matrix[x][y] == target and (i != x or j != y):\n                        return True\n    return False", "solution_func": "def g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, target ^ 2, 9]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the sum of the list is even and if all the numbers are positive.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return sum(arr) % 2 == 0 and all(num > 0 for num in arr)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 371, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the sum of the list is even and if all the numbers are positive.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return sum(arr) % 2 == 0 and all(num > 0 for num in arr)", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if the list is sorted in non-decreasing order, otherwise return False.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return arr == sorted(arr)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 371, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if the list is sorted in non-decreasing order, otherwise return False.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return arr == sorted(arr)", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a pair of numbers in the list whose sum is equal to a target number.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=7):\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 371, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a pair of numbers in the list whose sum is equal to a target number.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(target=7):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose sum is equal to the maximum value in the list.\n    \"\"\"\n    max_val = max(nums)\n    num_set = set()\n    for num in nums:\n        if max_val - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 3, 5, 7, 9]):\n    return nums\n\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 371, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose sum is equal to the maximum value in the list.\n    \"\"\"\n    max_val = max(nums)\n    num_set = set()\n    for num in nums:\n        if max_val - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums: List[int] = [1, 3, 5, 7, 9]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=1) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return s == s[::-1]\n\ndef g(s: str = \"racecar\"):\n    return s\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 372, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=1) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return s == s[::-1]", "solution_func": "def g(s: str = \"racecar\"):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"Calculate the sum of all even numbers in the list\"\"\"\n    return sum(num for num in arr if num % 2 == 0)\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr\n\nassert f(g()) == 30\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 372, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"Calculate the sum of all even numbers in the list\"\"\"\n    return sum(num for num in arr if num % 2 == 0)", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a pangram\"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    return set(alphabet) <= set(s.lower())\n\ndef g(s: str = \"The quick brown fox jumps over the lazy dog\"):\n    return s\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 372, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a pangram\"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    return set(alphabet) <= set(s.lower())", "solution_func": "def g(s: str = \"The quick brown fox jumps over the lazy dog\"):\n    return s", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of numbers `nums`, determine if there exists a subsequence in `nums`\n    such that the product of the subsequence is greater than 100.\n\n    For example, if nums = [1, 2, 3, 4, 5], the subsequence [4, 5] has a product of 20, which is less than 100.\n    \"\"\"\n    def subset_product(nums, target_product, memo={}):\n        if target_product in memo:\n            return memo[target_product]\n        if target_product == 1:\n            return True\n        if target_product < 1 or not nums:\n            return False\n        include = subset_product(nums[1:], target_product // nums[0], memo)\n        exclude = subset_product(nums[1:], target_product, memo)\n        memo[target_product] = include or exclude\n        return memo[target_product]\n\n    return subset_product(nums, 100)\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(*g()) == False\n", "emb": null, "idx_generation": 372, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of numbers `nums`, determine if there exists a subsequence in `nums`\n    such that the product of the subsequence is greater than 100.\n\n    For example, if nums = [1, 2, 3, 4, 5], the subsequence [4, 5] has a product of 20, which is less than 100.\n    \"\"\"\n    def subset_product(nums, target_product, memo={}):\n        if target_product in memo:\n            return memo[target_product]\n        if target_product == 1:\n            return True\n        if target_product < 1 or not nums:\n            return False\n        include = subset_product(nums[1:], target_product // nums[0], memo)\n        exclude = subset_product(nums[1:], target_product, memo)\n        memo[target_product] = include or exclude\n        return memo[target_product]\n\n    return subset_product(nums, 100)", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(strings: List[str]) -> bool:\n    \"\"\"\n    Check if all strings in the list have the same length.\n    \"\"\"\n    return len(set(map(len, strings))) == 1\n\ndef g():\n    return ['apple', 'banana', 'pear', 'grape']\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 372, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(strings: List[str]) -> bool:\n    \"\"\"\n    Check if all strings in the list have the same length.\n    \"\"\"\n    return len(set(map(len, strings))) == 1", "solution_func": "def g():\n    return ['apple', 'banana', 'pear', 'grape']", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a symmetric matrix of the given size.\n    \"\"\"\n    return [[1 if i == j else 0 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 372, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a symmetric matrix of the given size.\n    \"\"\"\n    return [[1 if i == j else 0 for j in range(size)] for i in range(size)]", "map_ix": [1, 0, 0, 0, 0, 0, 1, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(nums: List[int], target: int) -> Tuple[int, int]:\n    \"\"\"\n    Find two numbers in the list that add up to the target value.\n    Return the indices of the two numbers.\n    \"\"\"\n    seen = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in seen:\n            return (seen[complement], i)\n        seen[num] = i\n    return ()\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), target=10) == (0, 8)\n", "emb": null, "idx_generation": 372, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List, Tuple\n\ndef f(nums: List[int], target: int) -> Tuple[int, int]:\n    \"\"\"\n    Find two numbers in the list that add up to the target value.\n    Return the indices of the two numbers.\n    \"\"\"\n    seen = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in seen:\n            return (seen[complement], i)\n        seen[num] = i\n    return ()", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substring: str) -> int:\n    \"\"\"\n    Count the number of occurrences of a substring in a given string.\n    \"\"\"\n    count = 0\n    index = -1\n    while True:\n        index = string.find(substring, index + 1)\n        if index == -1:\n            return count\n        count += 1\n\ndef g(substring='abc'):\n    return 'abcabcabcabc'\n\nassert f(g(), substring='abc') == 4\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 372, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substring: str) -> int:\n    \"\"\"\n    Count the number of occurrences of a substring in a given string.\n    \"\"\"\n    count = 0\n    index = -1\n    while True:\n        index = string.find(substring, index + 1)\n        if index == -1:\n            return count\n        count += 1", "solution_func": "def g(substring='abc'):\n    return 'abcabcabcabc'", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int) -> int:\n    \"\"\"\n    Find the nth Fibonacci number.\n    \"\"\"\n    if n <= 0:\n        return None\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a, b = 0, 1\n    for _ in range(n - 2):\n        a, b = b, a + b\n    return a\n\ndef g(n=10):\n    return n\n\nassert f(g()) == 34\n", "emb": null, "idx_generation": 372, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int) -> int:\n    \"\"\"\n    Find the nth Fibonacci number.\n    \"\"\"\n    if n <= 0:\n        return None\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a, b = 0, 1\n    for _ in range(n - 2):\n        a, b = b, a + b\n    return a", "solution_func": "def g(n=10):\n    return n", "map_ix": null}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a subsequence that has a product equal to a target value.\n\n    A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    \n    Sample output:\n    True\n    \n    Explanation: The subsequence [2, 3] has a product of 6 which is the target value.\n    \"\"\"\n    target = 6\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if math.prod(nums[i:j]) == target:\n                return True\n    \n    return False\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 372, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a subsequence that has a product equal to a target value.\n\n    A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    \n    Sample output:\n    True\n    \n    Explanation: The subsequence [2, 3] has a product of 6 which is the target value.\n    \"\"\"\n    target = 6\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if math.prod(nums[i:j]) == target:\n                return True\n    \n    return False", "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 4, 5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list contains a subsequence that is a perfect cube.\n\n    A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n    Sample input:\n    arr = [1, 8, 2, 27, 4]\n    \n    Sample output:\n    True\n    \n    Explanation: The subsequence [1, 8, 27] is a perfect cube.\n    \"\"\"\n    cubes = {1, 8, 27, 64, 125, 216, 343, 512, 729, 1000}\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            subsequence = arr[i:j]\n            if any(num in cubes for num in subsequence):\n                return True\n    \n    return False\n\ndef g() -> List[int]:\n    return [1, 8, 2, 27, 4]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 373, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list contains a subsequence that is a perfect cube.\n\n    A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n    Sample input:\n    arr = [1, 8, 2, 27, 4]\n    \n    Sample output:\n    True\n    \n    Explanation: The subsequence [1, 8, 27] is a perfect cube.\n    \"\"\"\n    cubes = {1, 8, 27, 64, 125, 216, 343, 512, 729, 1000}\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            subsequence = arr[i:j]\n            if any(num in cubes for num in subsequence):\n                return True\n    \n    return False", "solution_func": "def g() -> List[int]:\n    return [1, 8, 2, 27, 4]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a subsequence that is a prime number.\n\n    A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n    Sample input:\n    nums = [2, 5, 3, 8, 9]\n    \n    Sample output:\n    True\n    \n    Explanation: The subsequence [2, 5] is a prime number.\n    \"\"\"\n    primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29}\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            subsequence = nums[i:j]\n            if any(num in primes for num in subsequence):\n                return True\n    \n    return False\n\ndef g() -> List[int]:\n    return [2, 5, 3, 8, 9]\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 373, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a subsequence that is a prime number.\n\n    A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n    Sample input:\n    nums = [2, 5, 3, 8, 9]\n    \n    Sample output:\n    True\n    \n    Explanation: The subsequence [2, 5] is a prime number.\n    \"\"\"\n    primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29}\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            subsequence = nums[i:j]\n            if any(num in primes for num in subsequence):\n                return True\n    \n    return False", "solution_func": "def g() -> List[int]:\n    return [2, 5, 3, 8, 9]", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list contains a subsequence that is a Fibonacci sequence.\n\n    A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n    Sample input:\n    arr = [1, 2, 3, 5, 8]\n    \n    Sample output:\n    True\n    \n    Explanation: The subsequence [1, 2, 3, 5, 8] is a Fibonacci sequence.\n    \"\"\"\n    def is_fibonacci(subsequence):\n        if len(subsequence) < 2:\n            return False\n        a, b = subsequence[0], subsequence[1]\n        for i in range(2, len(subsequence)):\n            c = a + b\n            if subsequence[i] != c:\n                return False\n            a, b = b, c\n        return True\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            subsequence = arr[i:j]\n            if is_fibonacci(subsequence):\n                return True\n    \n    return False\n\ndef g() -> List[int]:\n    return [1, 2, 3, 5, 8]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 373, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list contains a subsequence that is a Fibonacci sequence.\n\n    A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n    Sample input:\n    arr = [1, 2, 3, 5, 8]\n    \n    Sample output:\n    True\n    \n    Explanation: The subsequence [1, 2, 3, 5, 8] is a Fibonacci sequence.\n    \"\"\"\n    def is_fibonacci(subsequence):\n        if len(subsequence) < 2:\n            return False\n        a, b = subsequence[0], subsequence[1]\n        for i in range(2, len(subsequence)):\n            c = a + b\n            if subsequence[i] != c:\n                return False\n            a, b = b, c\n        return True\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            subsequence = arr[i:j]\n            if is_fibonacci(subsequence):\n                return True\n    \n    return False", "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 5, 8]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if the list is sorted in non-increasing order, otherwise return False.\n\n    Sample Input:\n    arr = [5, 4, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return arr == sorted(arr, reverse=True)\n\ndef g():\n    return [5, 4, 3, 2, 1]\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 373, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if the list is sorted in non-increasing order, otherwise return False.\n\n    Sample Input:\n    arr = [5, 4, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return arr == sorted(arr, reverse=True)", "solution_func": "def g():\n    return [5, 4, 3, 2, 1]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if there exists a subsequence of the list that sums up to 0, otherwise return False.\n\n    Sample Input:\n    lst = [1, -2, 3, 4, -5]\n\n    Sample Output:\n    True\n    \"\"\"\n    for r in range(1, len(lst) + 1):\n        for subset in itertools.combinations(lst, r):\n            if sum(subset) == 0:\n                return True\n    return False\n\ndef g():\n    return [1, -2, 3, 4, -5]\n\nassert f(g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 373, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if there exists a subsequence of the list that sums up to 0, otherwise return False.\n\n    Sample Input:\n    lst = [1, -2, 3, 4, -5]\n\n    Sample Output:\n    True\n    \"\"\"\n    for r in range(1, len(lst) + 1):\n        for subset in itertools.combinations(lst, r):\n            if sum(subset) == 0:\n                return True\n    return False", "solution_func": "def g():\n    return [1, -2, 3, 4, -5]", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if the list contains any prime numbers, otherwise return False.\n\n    Sample Input:\n    nums = [4, 6, 8, 9, 10]\n\n    Sample Output:\n    False\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return any(is_prime(num) for num in nums)\n\ndef g():\n    return [4, 6, 8, 9, 10]\n\nassert f(g()) == False\n\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 373, "target_skills": null, "problem_func": "import math\nfrom typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if the list contains any prime numbers, otherwise return False.\n\n    Sample Input:\n    nums = [4, 6, 8, 9, 10]\n\n    Sample Output:\n    False\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return any(is_prime(num) for num in nums)", "solution_func": "def g():\n    return [4, 6, 8, 9, 10]", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains any duplicate numbers.\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == False\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 373, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains any duplicate numbers.\n    \"\"\"\n    return len(nums) != len(set(nums))", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the maximum difference between any two numbers in the given list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            diff = abs(nums[i] - nums[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\ndef g():\n    return [1, 10, 5, 15, 3, 20]\n\nassert f(g()) == 19\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 373, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the maximum difference between any two numbers in the given list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            diff = abs(nums[i] - nums[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff", "solution_func": "def g():\n    return [1, 10, 5, 15, 3, 20]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 373, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]", "map_ix": [1, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], k: int = 2) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the given array, such that the sum of its elements is divisible by k.\"\"\"\n    for i in range(len(arr) - k + 1):\n        subarr = arr[i:i+k]\n        if sum(subarr) % k == 0:\n            return True\n    return False\n\ndef g(k: int = 2):\n    return [k] * k\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 373, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], k: int = 2) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the given array, such that the sum of its elements is divisible by k.\"\"\"\n    for i in range(len(arr) - k + 1):\n        subarr = arr[i:i+k]\n        if sum(subarr) % k == 0:\n            return True\n    return False", "solution_func": "def g(k: int = 2):\n    return [k] * k", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find all pairs of numbers in the array that sum up to the target.\n    Return a list of tuples containing the pairs.\n    \"\"\"\n    pairs = []\n    seen = set()\n    for num in arr:\n        complement = target - num\n        if complement in seen:\n            pairs.append((num, complement))\n        seen.add(num)\n    return pairs\n\ndef g(arr=[1, 2, 3, 4, 5], target=6):\n    return arr, target\n\nassert f(*g()) == [(1, 5), (2, 4)]\n\n", "emb": null, "idx_generation": 374, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find all pairs of numbers in the array that sum up to the target.\n    Return a list of tuples containing the pairs.\n    \"\"\"\n    pairs = []\n    seen = set()\n    for num in arr:\n        complement = target - num\n        if complement in seen:\n            pairs.append((num, complement))\n        seen.add(num)\n    return pairs", "solution_func": "def g(arr=[1, 2, 3, 4, 5], target=6):\n    return arr, target", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Remove all duplicate elements from the given list and return a new list with unique elements.\n    The order of elements should be preserved.\n    \"\"\"\n    return list(set(arr))\n\ndef g():\n    return [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n\nassert f(g()) == [1, 2, 3, 4]\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 374, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Remove all duplicate elements from the given list and return a new list with unique elements.\n    The order of elements should be preserved.\n    \"\"\"\n    return list(set(arr))", "solution_func": "def g():\n    return [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Rearrange the elements of the given list such that all even numbers appear before odd numbers.\n    Return the modified list.\n    \"\"\"\n    return [x for x in arr if x % 2 == 0] + [x for x in arr if x % 2 != 0]\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == [2, 4, 6, 8, 10, 1, 3, 5, 7, 9]\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 374, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Rearrange the elements of the given list such that all even numbers appear before odd numbers.\n    Return the modified list.\n    \"\"\"\n    return [x for x in arr if x % 2 == 0] + [x for x in arr if x % 2 != 0]", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(dictionary: Dict[str, int], target: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    Find all pairs of values in the dictionary whose sum equals the target value.\n    Return a list of tuples containing the pairs.\n    \"\"\"\n    values = list(dictionary.values())\n    pairs = []\n    for i in range(len(values)):\n        for j in range(i+1, len(values)):\n            if values[i] + values[j] == target:\n                pairs.append((values[i], values[j]))\n    return pairs\n\ndef g(dictionary={\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}, target=7):\n    return (dictionary, target)\n\nassert f(*g()) == [('a', 'b'), ('c', 'd')]\n", "emb": null, "idx_generation": 374, "target_skills": null, "problem_func": "from typing import*\nfrom typing import Dict\n\ndef f(dictionary: Dict[str, int], target: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    Find all pairs of values in the dictionary whose sum equals the target value.\n    Return a list of tuples containing the pairs.\n    \"\"\"\n    values = list(dictionary.values())\n    pairs = []\n    for i in range(len(values)):\n        for j in range(i+1, len(values)):\n            if values[i] + values[j] == target:\n                pairs.append((values[i], values[j]))\n    return pairs", "solution_func": "def g(dictionary={\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}, target=7):\n    return (dictionary, target)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(dictionary: Dict[str, int], target: int) -> Tuple[str, str]:\n    \"\"\"\n    Find the pair of values in the dictionary whose sum is closest to the target value.\n    Return a tuple containing the pair.\n    \"\"\"\n    values = list(dictionary.values())\n    closest_sum = float('inf')\n    closest_pair = None\n    for i in range(len(values)):\n        for j in range(i+1, len(values)):\n            current_sum = values[i] + values[j]\n            if abs(current_sum - target) < abs(closest_sum - target):\n                closest_sum = current_sum\n                closest_pair = (values[i], values[j])\n    return closest_pair\n\ndef g(dictionary={\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}, target=7):\n    return (dictionary, target)\n\nassert f(*g()) == (2, 5)\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 374, "target_skills": null, "problem_func": "from typing import*\nfrom typing import Dict\n\ndef f(dictionary: Dict[str, int], target: int) -> Tuple[str, str]:\n    \"\"\"\n    Find the pair of values in the dictionary whose sum is closest to the target value.\n    Return a tuple containing the pair.\n    \"\"\"\n    values = list(dictionary.values())\n    closest_sum = float('inf')\n    closest_pair = None\n    for i in range(len(values)):\n        for j in range(i+1, len(values)):\n            current_sum = values[i] + values[j]\n            if abs(current_sum - target) < abs(closest_sum - target):\n                closest_sum = current_sum\n                closest_pair = (values[i], values[j])\n    return closest_pair", "solution_func": "def g(dictionary={\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}, target=7):\n    return (dictionary, target)", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(dictionary: Dict[str, int], target: int) -> List[str]:\n    \"\"\"\n    Find all keys in the dictionary whose values are less than the target value.\n    Return a list of the keys.\n    \"\"\"\n    keys = [key for key, value in dictionary.items() if value < target]\n    return keys\n\ndef g(dictionary={\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}, target=4):\n    return (dictionary, target)\n\nassert f(*g()) == ['a', 'b', 'c']\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 374, "target_skills": null, "problem_func": "from typing import*\nfrom typing import Dict\n\ndef f(dictionary: Dict[str, int], target: int) -> List[str]:\n    \"\"\"\n    Find all keys in the dictionary whose values are less than the target value.\n    Return a list of the keys.\n    \"\"\"\n    keys = [key for key, value in dictionary.items() if value < target]\n    return keys", "solution_func": "def g(dictionary={\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}, target=4):\n    return (dictionary, target)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> int:\n    \"\"\"\n    Find the maximum sum of any diagonal in the given 2D array.\n\n    Sample input:\n    arr = [[1, 2, 3],\n           [4, 5, 6],\n           [7, 8, 9]]\n\n    Sample output:\n    25\n\n    Explanation: The diagonals with maximum sums are:\n    1 5 9 (sum = 15)\n    3 5 7 (sum = 15)\n    2 5 8 (sum = 15)\n    1 4 7 (sum = 12)\n    3 6 9 (sum = 18)\n    2 4 6 (sum = 12)\n    Their maximum sum is 25.\n\n    \"\"\"\n    max_sum = float('-inf')\n    for i in range(len(arr) - 2):\n        for j in range(len(arr[0]) - 2):\n            diagonal_sum1 = (\n                arr[i][j] + arr[i+1][j+1] + arr[i+2][j+2]\n            )\n            diagonal_sum2 = (\n                arr[i][j+2] + arr[i+1][j+1] + arr[i+2][j]\n            )\n            max_sum = max(max_sum, diagonal_sum1, diagonal_sum2)\n    return max_sum\n\ndef g() -> List[List[int]]:\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]\n\nassert f(g()) == 25\n", "emb": null, "idx_generation": 374, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> int:\n    \"\"\"\n    Find the maximum sum of any diagonal in the given 2D array.\n\n    Sample input:\n    arr = [[1, 2, 3],\n           [4, 5, 6],\n           [7, 8, 9]]\n\n    Sample output:\n    25\n\n    Explanation: The diagonals with maximum sums are:\n    1 5 9 (sum = 15)\n    3 5 7 (sum = 15)\n    2 5 8 (sum = 15)\n    1 4 7 (sum = 12)\n    3 6 9 (sum = 18)\n    2 4 6 (sum = 12)\n    Their maximum sum is 25.\n\n    \"\"\"\n    max_sum = float('-inf')\n    for i in range(len(arr) - 2):\n        for j in range(len(arr[0]) - 2):\n            diagonal_sum1 = (\n                arr[i][j] + arr[i+1][j+1] + arr[i+2][j+2]\n            )\n            diagonal_sum2 = (\n                arr[i][j+2] + arr[i+1][j+1] + arr[i+2][j]\n            )\n            max_sum = max(max_sum, diagonal_sum1, diagonal_sum2)\n    return max_sum", "solution_func": "def g() -> List[List[int]]:\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> int:\n    \"\"\"\n    Find the maximum sum of any column in the given 2D array.\n\n    Sample input:\n    arr = [[1, 2, 3],\n           [4, 5, 6],\n           [7, 8, 9]]\n\n    Sample output:\n    18\n\n    Explanation: The columns with maximum sums are:\n    1 4 7 (sum = 12)\n    2 5 8 (sum = 15)\n    3 6 9 (sum = 18)\n    Their maximum sum is 18.\n\n    \"\"\"\n    max_sum = float('-inf')\n    for j in range(len(arr[0])):\n        column_sum = sum([arr[i][j] for i in range(len(arr))])\n        max_sum = max(max_sum, column_sum)\n    return max_sum\n\ndef g() -> List[List[int]]:\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]\n\nassert f(g()) == 18\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 374, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> int:\n    \"\"\"\n    Find the maximum sum of any column in the given 2D array.\n\n    Sample input:\n    arr = [[1, 2, 3],\n           [4, 5, 6],\n           [7, 8, 9]]\n\n    Sample output:\n    18\n\n    Explanation: The columns with maximum sums are:\n    1 4 7 (sum = 12)\n    2 5 8 (sum = 15)\n    3 6 9 (sum = 18)\n    Their maximum sum is 18.\n\n    \"\"\"\n    max_sum = float('-inf')\n    for j in range(len(arr[0])):\n        column_sum = sum([arr[i][j] for i in range(len(arr))])\n        max_sum = max(max_sum, column_sum)\n    return max_sum", "solution_func": "def g() -> List[List[int]]:\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> int:\n    \"\"\"\n    Find the maximum sum of any row in the given 2D array.\n\n    Sample input:\n    arr = [[1, 2, 3],\n           [4, 5, 6],\n           [7, 8, 9]]\n\n    Sample output:\n    24\n\n    Explanation: The rows with maximum sums are:\n    1 2 3 (sum = 6)\n    4 5 6 (sum = 15)\n    7 8 9 (sum = 24)\n    Their maximum sum is 24.\n\n    \"\"\"\n    max_sum = float('-inf')\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        max_sum = max(max_sum, row_sum)\n    return max_sum\n\ndef g() -> List[List[int]]:\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]\n\nassert f(g()) == 24\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 374, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> int:\n    \"\"\"\n    Find the maximum sum of any row in the given 2D array.\n\n    Sample input:\n    arr = [[1, 2, 3],\n           [4, 5, 6],\n           [7, 8, 9]]\n\n    Sample output:\n    24\n\n    Explanation: The rows with maximum sums are:\n    1 2 3 (sum = 6)\n    4 5 6 (sum = 15)\n    7 8 9 (sum = 24)\n    Their maximum sum is 24.\n\n    \"\"\"\n    max_sum = float('-inf')\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        max_sum = max(max_sum, row_sum)\n    return max_sum", "solution_func": "def g() -> List[List[int]]:\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of integers in the list whose sum is equal to the target\"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(arr: List[int], target: int):\n    return (arr, target)\n\nassert f(*g([2, 7, 11, 15], 9)) == True\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 374, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of integers in the list whose sum is equal to the target\"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(arr: List[int], target: int):\n    return (arr, target)", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(nums: List[int], target: int = 20) -> bool:\n    \"\"\"\n    Given a list of integers, find the three numbers that add up to the target.\n    If such a triplet exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            complement = target - nums[i] - nums[j]\n            if complement in nums_set and complement != nums[i] and complement != nums[j]:\n                return True\n    return False\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8, 10]):\n    return nums\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 375, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int], target: int = 20) -> bool:\n    \"\"\"\n    Given a list of integers, find the three numbers that add up to the target.\n    If such a triplet exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            complement = target - nums[i] - nums[j]\n            if complement in nums_set and complement != nums[i] and complement != nums[j]:\n                return True\n    return False", "solution_func": "def g(nums: List[int] = [2, 5, 3, 4, 8, 10]):\n    return nums", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subsequence of length 3\n    where the sum of the first two elements is equal to the third element.\n    If such a subsequence exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(nums) - 2):\n        for j in range(i + 1, len(nums) - 1):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] == nums[k]:\n                    return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6]):\n    return nums\n\nassert f(g()) == False\n\n", "emb": null, "idx_generation": 375, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subsequence of length 3\n    where the sum of the first two elements is equal to the third element.\n    If such a subsequence exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(nums) - 2):\n        for j in range(i + 1, len(nums) - 1):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] == nums[k]:\n                    return True\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a square matrix, check if it is a symmetric matrix.\n    A matrix is symmetric if it is equal to its transpose.\n    If the matrix is symmetric, return True. Otherwise, return False.\n    \"\"\"\n    transpose = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix))]\n    return matrix == transpose\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g()) == False\n\n", "emb": null, "idx_generation": 375, "target_skills": null, "problem_func": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a square matrix, check if it is a symmetric matrix.\n    A matrix is symmetric if it is equal to its transpose.\n    If the matrix is symmetric, return True. Otherwise, return False.\n    \"\"\"\n    transpose = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix))]\n    return matrix == transpose", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return the sum of each column in the matrix.\n    \"\"\"\n    column_sums = []\n    \n    for j in range(len(matrix[0])):\n        column_sum = sum(matrix[i][j] for i in range(len(matrix)))\n        column_sums.append(column_sum)\n        \n    return column_sums\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [12, 15, 18]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 375, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return the sum of each column in the matrix.\n    \"\"\"\n    column_sums = []\n    \n    for j in range(len(matrix[0])):\n        column_sum = sum(matrix[i][j] for i in range(len(matrix)))\n        column_sums.append(column_sum)\n        \n    return column_sums", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, return the sum of all the elements in the matrix.\n    \"\"\"\n    total_sum = 0\n    \n    for row in matrix:\n        for element in row:\n            total_sum += element\n        \n    return total_sum\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 45\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 375, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, return the sum of all the elements in the matrix.\n    \"\"\"\n    total_sum = 0\n    \n    for row in matrix:\n        for element in row:\n            total_sum += element\n        \n    return total_sum", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return the sum of each diagonal in the matrix.\n    \"\"\"\n    n = len(matrix)\n    diagonal_sums = []\n    \n    # Calculate sum of the main diagonal\n    main_diagonal_sum = sum(matrix[i][i] for i in range(n))\n    diagonal_sums.append(main_diagonal_sum)\n    \n    # Calculate sum of the secondary diagonal\n    secondary_diagonal_sum = sum(matrix[i][n - i - 1] for i in range(n))\n    diagonal_sums.append(secondary_diagonal_sum)\n        \n    return diagonal_sums\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [15, 15]\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 375, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return the sum of each diagonal in the matrix.\n    \"\"\"\n    n = len(matrix)\n    diagonal_sums = []\n    \n    # Calculate sum of the main diagonal\n    main_diagonal_sum = sum(matrix[i][i] for i in range(n))\n    diagonal_sums.append(main_diagonal_sum)\n    \n    # Calculate sum of the secondary diagonal\n    secondary_diagonal_sum = sum(matrix[i][n - i - 1] for i in range(n))\n    diagonal_sums.append(secondary_diagonal_sum)\n        \n    return diagonal_sums", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if the list contains any perfect squares, otherwise return False.\n\n    Sample Input:\n    nums = [4, 6, 8, 9, 10]\n\n    Sample Output:\n    True\n    \"\"\"\n    def is_perfect_square(n):\n        if n < 0:\n            return False\n        sqrt = int(math.sqrt(n))\n        return sqrt * sqrt == n\n\n    return any(is_perfect_square(num) for num in nums)\n\ndef g():\n    return [4, 6, 8, 9, 10]\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 375, "target_skills": null, "problem_func": "import math\nfrom typing import*\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if the list contains any perfect squares, otherwise return False.\n\n    Sample Input:\n    nums = [4, 6, 8, 9, 10]\n\n    Sample Output:\n    True\n    \"\"\"\n    def is_perfect_square(n):\n        if n < 0:\n            return False\n        sqrt = int(math.sqrt(n))\n        return sqrt * sqrt == n\n\n    return any(is_perfect_square(num) for num in nums)", "solution_func": "def g():\n    return [4, 6, 8, 9, 10]", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if the list contains any numbers that are divisible by the sum of their digits, otherwise return False.\n\n    Sample Input:\n    nums = [12, 15, 21, 24, 30]\n\n    Sample Output:\n    True\n    \"\"\"\n    def is_divisible_by_digit_sum(n):\n        digit_sum = sum(int(digit) for digit in str(n))\n        return n % digit_sum == 0\n\n    return any(is_divisible_by_digit_sum(num) for num in nums)\n\ndef g():\n    return [12, 15, 21, 24, 30]\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 375, "target_skills": null, "problem_func": "import math\nfrom typing import*\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if the list contains any numbers that are divisible by the sum of their digits, otherwise return False.\n\n    Sample Input:\n    nums = [12, 15, 21, 24, 30]\n\n    Sample Output:\n    True\n    \"\"\"\n    def is_divisible_by_digit_sum(n):\n        digit_sum = sum(int(digit) for digit in str(n))\n        return n % digit_sum == 0\n\n    return any(is_divisible_by_digit_sum(num) for num in nums)", "solution_func": "def g():\n    return [12, 15, 21, 24, 30]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import math\nfrom typing import*\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if the list contains any numbers where the sum of its digits is a prime number, otherwise return False.\n\n    Sample Input:\n    nums = [12, 15, 21, 24, 30]\n\n    Sample Output:\n    False\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits_is_prime(n):\n        digit_sum = sum(int(digit) for digit in str(n))\n        return is_prime(digit_sum)\n\n    return any(sum_of_digits_is_prime(num) for num in nums)\n\ndef g():\n    return [12, 15, 21, 24, 30]\n\nassert f(g()) == False\n", "emb": null, "idx_generation": 375, "target_skills": null, "problem_func": "import math\nfrom typing import*\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if the list contains any numbers where the sum of its digits is a prime number, otherwise return False.\n\n    Sample Input:\n    nums = [12, 15, 21, 24, 30]\n\n    Sample Output:\n    False\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits_is_prime(n):\n        digit_sum = sum(int(digit) for digit in str(n))\n        return is_prime(digit_sum)\n\n    return any(sum_of_digits_is_prime(num) for num in nums)", "solution_func": "def g():\n    return [12, 15, 21, 24, 30]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list after sorting it in ascending order.\n    \"\"\"\n    nums.sort()\n    return nums\n\nassert f(g([3, 4, -7, 2, 1, 3, 1]), 4)\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 375, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False", "solution_func": "def g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list after sorting it in ascending order.\n    \"\"\"\n    nums.sort()\n    return nums", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a pair of elements such that their sum is equal to 10.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == 10:\n                return True\n    return False\n\ndef g():\n    \"\"\"Generate a list of integers.\"\"\"\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 376, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a pair of elements such that their sum is equal to 10.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == 10:\n                return True\n    return False", "solution_func": "def g():\n    \"\"\"Generate a list of integers.\"\"\"\n    return [1, 2, 3, 4, 5, 6]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target, check if there exists a combination of numbers from the list\n    that adds up to the target value. If such a combination exists, return True. Otherwise, return False.\n    \"\"\"\n    def backtrack(curr_sum: int, index: int) -> bool:\n        if curr_sum == target:\n            return True\n        if curr_sum > target or index >= len(numbers):\n            return False\n\n        for i in range(index, len(numbers)):\n            if backtrack(curr_sum + numbers[i], i + 1):\n                return True\n\n        return False\n\n    return backtrack(0, 0)\n\ndef g(target=10):\n    \"\"\"Generate a list of numbers.\"\"\"\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 10) == True\n\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 376, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target, check if there exists a combination of numbers from the list\n    that adds up to the target value. If such a combination exists, return True. Otherwise, return False.\n    \"\"\"\n    def backtrack(curr_sum: int, index: int) -> bool:\n        if curr_sum == target:\n            return True\n        if curr_sum > target or index >= len(numbers):\n            return False\n\n        for i in range(index, len(numbers)):\n            if backtrack(curr_sum + numbers[i], i + 1):\n                return True\n\n        return False\n\n    return backtrack(0, 0)", "solution_func": "def g(target=10):\n    \"\"\"Generate a list of numbers.\"\"\"\n    return [1, 2, 3, 4, 5]", "map_ix": [0, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, check if it is a symmetric matrix.\n    If the matrix is symmetric, return True. Otherwise, return False.\n    \"\"\"\n    n = len(matrix)\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n\n    return True\n\ndef g():\n    \"\"\"Generate a symmetric matrix.\"\"\"\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 376, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, check if it is a symmetric matrix.\n    If the matrix is symmetric, return True. Otherwise, return False.\n    \"\"\"\n    n = len(matrix)\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n\n    return True", "solution_func": "def g():\n    \"\"\"Generate a symmetric matrix.\"\"\"\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target number, find the index of the first occurrence of the target number in the list.\n    If the target is not found, return -1.\n    \"\"\"\n    for i, num in enumerate(nums):\n        if num == target:\n            return i\n    return -1\n\ndef g():\n    nums = [1, 2, 3, 4, 5, 6, 7]\n    target = 4\n    return (nums, target)\n\nassert f(*g()) == 3\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 376, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target number, find the index of the first occurrence of the target number in the list.\n    If the target is not found, return -1.\n    \"\"\"\n    for i, num in enumerate(nums):\n        if num == target:\n            return i\n    return -1", "solution_func": "def g():\n    nums = [1, 2, 3, 4, 5, 6, 7]\n    target = 4\n    return (nums, target)", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list that contains only the unique elements in the original list.\n    \"\"\"\n    return list(set(nums))\n\ndef g():\n    nums = [1, 2, 2, 3, 4, 4, 5, 6, 6]\n    return (nums,)\n\nassert f(*g()) == [1, 2, 3, 4, 5, 6]\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 376, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list that contains only the unique elements in the original list.\n    \"\"\"\n    return list(set(nums))", "solution_func": "def g():\n    nums = [1, 2, 2, 3, 4, 4, 5, 6, 6]\n    return (nums,)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list that contains the squared values of the original list.\n    \"\"\"\n    return [num**2 for num in nums]\n\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    return (nums,)\n\nassert f(*g()) == [1, 4, 9, 16, 25]\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 376, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list that contains the squared values of the original list.\n    \"\"\"\n    return [num**2 for num in nums]", "solution_func": "def g():\n    nums = [1, 2, 3, 4, 5]\n    return (nums,)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 376, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [0, 0, 0, 1, 0, 0, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n\n", "emb": [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 376, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [1, 1, 1, 1, 0, 1, 1, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 376, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [1, 0, 1, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport itertools\nfrom typing import List, Tuple\n\ndef f(nums: List[int], target: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    Given a list of integers, find all pairs of numbers that add up to the target.\n    Return a list of tuples, where each tuple contains the indices of the pair.\n    \"\"\"\n    indices = []\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                indices.append((i, j))\n    return indices\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return nums, target\n\nassert f(*g()) == [(1, 4), (2, 3)]\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 376, "target_skills": null, "problem_func": "from typing import*\nimport itertools\nfrom typing import List, Tuple\n\ndef f(nums: List[int], target: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    Given a list of integers, find all pairs of numbers that add up to the target.\n    Return a list of tuples, where each tuple contains the indices of the pair.\n    \"\"\"\n    indices = []\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                indices.append((i, j))\n    return indices", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return nums, target", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"Find the maximum difference between any two numbers in the given list.\"\"\"\n    max_diff = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            diff = abs(nums[i] - nums[j])\n            max_diff = max(max_diff, diff)\n    return max_diff\n\ndef g():\n    return [1, 5, 3, 9, 2]\n\nassert f(g()) == 8\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 377, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"Find the maximum difference between any two numbers in the given list.\"\"\"\n    max_diff = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            diff = abs(nums[i] - nums[j])\n            max_diff = max(max_diff, diff)\n    return max_diff", "solution_func": "def g():\n    return [1, 5, 3, 9, 2]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 377, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return nums == nums[::-1]", "solution_func": "def g():\n    return [1, 2, 3, 2, 1]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums1: List[int], nums2: List[int]) -> float:\n    \"\"\"Find the median of two sorted lists of integers.\"\"\"\n    nums = nums1 + nums2\n    nums.sort()\n    n = len(nums)\n    if n % 2 == 0:\n        return (nums[n//2 - 1] + nums[n//2]) / 2\n    else:\n        return nums[n//2]\n\ndef g():\n    nums1 = [1, 3, 5]\n    nums2 = [2, 4, 6]\n    return (nums1, nums2)\n\nassert f(*g()) == 3.5\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 377, "target_skills": null, "problem_func": "from typing import*\ndef f(nums1: List[int], nums2: List[int]) -> float:\n    \"\"\"Find the median of two sorted lists of integers.\"\"\"\n    nums = nums1 + nums2\n    nums.sort()\n    n = len(nums)\n    if n % 2 == 0:\n        return (nums[n//2 - 1] + nums[n//2]) / 2\n    else:\n        return nums[n//2]", "solution_func": "def g():\n    nums1 = [1, 3, 5]\n    nums2 = [2, 4, 6]\n    return (nums1, nums2)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose sum is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 6):\n    return nums, target\n\nassert f(*g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 377, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose sum is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 6):\n    return nums, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there exists a pair of distinct numbers in the given list whose difference is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if num - target in num_set or num + target in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 2):\n    return nums, target\n\nassert f(*g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 377, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there exists a pair of distinct numbers in the given list whose difference is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if num - target in num_set or num + target in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 2):\n    return nums, target", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose sum of squares is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num**2 in num_set or target + num**2 in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 30):\n    return nums, target\n\nassert f(*g()) == True\n", "emb": null, "idx_generation": 377, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose sum of squares is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num**2 in num_set or target + num**2 in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 30):\n    return nums, target", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a pair of elements such that their product is equal to 24.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] == 24:\n                return True\n    return False\n\ndef g():\n    \"\"\"Generate a list of integers.\"\"\"\n    return [2, 3, 4, 6, 8]\n\nassert f(g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 377, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a pair of elements such that their product is equal to 24.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] == 24:\n                return True\n    return False", "solution_func": "def g():\n    \"\"\"Generate a list of integers.\"\"\"\n    return [2, 3, 4, 6, 8]", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a triplet of elements such that their sum is equal to 15.\n    If such a triplet exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == 15:\n                    return True\n    return False\n\ndef g():\n    \"\"\"Generate a list of integers.\"\"\"\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g()) == False\n\n", "emb": null, "idx_generation": 377, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a triplet of elements such that their sum is equal to 15.\n    If such a triplet exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == 15:\n                    return True\n    return False", "solution_func": "def g():\n    \"\"\"Generate a list of integers.\"\"\"\n    return [1, 2, 3, 4, 5, 6]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a pair of elements such that their difference is equal to 5.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if abs(arr[i] - arr[j]) == 5:\n                return True\n    return False\n\ndef g():\n    \"\"\"Generate a list of integers.\"\"\"\n    return [10, 2, 5, 13, 16]\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 377, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a pair of elements such that their difference is equal to 5.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if abs(arr[i] - arr[j]) == 5:\n                return True\n    return False", "solution_func": "def g():\n    \"\"\"Generate a list of integers.\"\"\"\n    return [10, 2, 5, 13, 16]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a symmetric square.\n    A symmetric square is a grid where the elements are equal along the main diagonal.\n\n    Sample Input:\n    arr = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(n):\n            if arr[i][j] != arr[j][i]:\n                return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return arr\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 377, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a symmetric square.\n    A symmetric square is a grid where the elements are equal along the main diagonal.\n\n    Sample Input:\n    arr = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(n):\n            if arr[i][j] != arr[j][i]:\n                return False\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(num: int, digits=[2, 4, 6, 8]) -> bool:\n    \"\"\"Check if the given number contains only even digits\"\"\"\n    return all(int(d) % 2 == 0 for d in str(num))\n\ndef g():\n    return 2468\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 378, "target_skills": null, "problem_func": "from typing import*\ndef f(num: int, digits=[2, 4, 6, 8]) -> bool:\n    \"\"\"Check if the given number contains only even digits\"\"\"\n    return all(int(d) % 2 == 0 for d in str(num))", "solution_func": "def g():\n    return 2468", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(num: int, divisor: int) -> bool:\n    \"\"\"Check if the given number is divisible by the given divisor\"\"\"\n    return num % divisor == 0\n\ndef g(num=100, divisor=5):\n    return num\n\nassert f(g(), g(20, 4)) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 378, "target_skills": null, "problem_func": "from typing import*\ndef f(num: int, divisor: int) -> bool:\n    \"\"\"Check if the given number is divisible by the given divisor\"\"\"\n    return num % divisor == 0", "solution_func": "def g(num=100, divisor=5):\n    return num", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(num: int, target: int) -> bool:\n    \"\"\"Check if the given number is equal to the target number\"\"\"\n    return num == target\n\ndef g(num=7, target=7):\n    return num\n\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 378, "target_skills": null, "problem_func": "from typing import*\ndef f(num: int, target: int) -> bool:\n    \"\"\"Check if the given number is equal to the target number\"\"\"\n    return num == target", "solution_func": "def g(num=7, target=7):\n    return num", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Find the minimum sum of any hourglass shape in the given 2D matrix.\n\n    An hourglass shape is defined as follows:\n    a b c\n      d\n    e f g\n\n    Sample input:\n    matrix = [[1, 1, 1, 0, 0, 0],\n              [0, 1, 0, 0, 0, 0],\n              [1, 1, 1, 0, 0, 0],\n              [0, 0, 2, 4, 4, 0],\n              [0, 0, 0, 2, 0, 0],\n              [0, 0, 1, 2, 4, 0]]\n\n    Sample output:\n    0\n\n    Explanation: The hourglass shapes with minimum sums are:\n    0 0 0\n      0\n    0 0 0\n    and\n    0 0 0\n      0\n    0 0 0\n    Their sums are 0.\n\n    \"\"\"\n    min_sum = float('inf')\n    for i in range(len(matrix) - 2):\n        for j in range(len(matrix[0]) - 2):\n            hourglass_sum = (\n                matrix[i][j] + matrix[i][j+1] + matrix[i][j+2] +\n                matrix[i+1][j+1] +\n                matrix[i+2][j] + matrix[i+2][j+1] + matrix[i+2][j+2]\n            )\n            min_sum = min(min_sum, hourglass_sum)\n    return min_sum\n\ndef g():\n    return [[1, 1, 1, 0, 0, 0],\n            [0, 1, 0, 0, 0, 0],\n            [1, 1, 1, 0, 0, 0],\n            [0, 0, 2, 4, 4, 0],\n            [0, 0, 0, 2, 0, 0],\n            [0, 0, 1, 2, 4, 0]]\n\nassert f(g()) == 0\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 378, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Find the minimum sum of any hourglass shape in the given 2D matrix.\n\n    An hourglass shape is defined as follows:\n    a b c\n      d\n    e f g\n\n    Sample input:\n    matrix = [[1, 1, 1, 0, 0, 0],\n              [0, 1, 0, 0, 0, 0],\n              [1, 1, 1, 0, 0, 0],\n              [0, 0, 2, 4, 4, 0],\n              [0, 0, 0, 2, 0, 0],\n              [0, 0, 1, 2, 4, 0]]\n\n    Sample output:\n    0\n\n    Explanation: The hourglass shapes with minimum sums are:\n    0 0 0\n      0\n    0 0 0\n    and\n    0 0 0\n      0\n    0 0 0\n    Their sums are 0.\n\n    \"\"\"\n    min_sum = float('inf')\n    for i in range(len(matrix) - 2):\n        for j in range(len(matrix[0]) - 2):\n            hourglass_sum = (\n                matrix[i][j] + matrix[i][j+1] + matrix[i][j+2] +\n                matrix[i+1][j+1] +\n                matrix[i+2][j] + matrix[i+2][j+1] + matrix[i+2][j+2]\n            )\n            min_sum = min(min_sum, hourglass_sum)\n    return min_sum", "solution_func": "def g():\n    return [[1, 1, 1, 0, 0, 0],\n            [0, 1, 0, 0, 0, 0],\n            [1, 1, 1, 0, 0, 0],\n            [0, 0, 2, 4, 4, 0],\n            [0, 0, 0, 2, 0, 0],\n            [0, 0, 1, 2, 4, 0]]", "map_ix": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Find the maximum sum of any hourglass shape in the given 2D matrix, considering only non-negative numbers.\n\n    An hourglass shape is defined as follows:\n    a b c\n      d\n    e f g\n\n    Sample input:\n    matrix = [[1, 1, 1, 0, 0, 0],\n              [0, 1, 0, 0, 0, 0],\n              [1, 1, 1, 0, 0, 0],\n              [0, 0, 2, 4, 4, 0],\n              [0, 0, 0, 2, 0, 0],\n              [0, 0, 1, 2, 4, 0]]\n\n    Sample output:\n    12\n\n    Explanation: The hourglass shape with the maximum sum of non-negative numbers is:\n    2 4 4\n      2\n    1 2 4\n    The sum of non-negative numbers in this hourglass shape is 12.\n\n    \"\"\"\n    max_sum = float('-inf')\n    for i in range(len(matrix) - 2):\n        for j in range(len(matrix[0]) - 2):\n            hourglass_sum = (\n                max(0, matrix[i][j]) + max(0, matrix[i][j+1]) + max(0, matrix[i][j+2]) +\n                max(0, matrix[i+1][j+1]) +\n                max(0, matrix[i+2][j]) + max(0, matrix[i+2][j+1]) + max(0, matrix[i+2][j+2])\n            )\n            max_sum = max(max_sum, hourglass_sum)\n    return max_sum\n\ndef g():\n    return [[1, 1, 1, 0, 0, 0],\n            [0, 1, 0, 0, 0, 0],\n            [1, 1, 1, 0, 0, 0],\n            [0, 0, 2, 4, 4, 0],\n            [0, 0, 0, 2, 0, 0],\n            [0, 0, 1, 2, 4, 0]]\n\nassert f(g()) == 12\n\n", "emb": null, "idx_generation": 378, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Find the maximum sum of any hourglass shape in the given 2D matrix, considering only non-negative numbers.\n\n    An hourglass shape is defined as follows:\n    a b c\n      d\n    e f g\n\n    Sample input:\n    matrix = [[1, 1, 1, 0, 0, 0],\n              [0, 1, 0, 0, 0, 0],\n              [1, 1, 1, 0, 0, 0],\n              [0, 0, 2, 4, 4, 0],\n              [0, 0, 0, 2, 0, 0],\n              [0, 0, 1, 2, 4, 0]]\n\n    Sample output:\n    12\n\n    Explanation: The hourglass shape with the maximum sum of non-negative numbers is:\n    2 4 4\n      2\n    1 2 4\n    The sum of non-negative numbers in this hourglass shape is 12.\n\n    \"\"\"\n    max_sum = float('-inf')\n    for i in range(len(matrix) - 2):\n        for j in range(len(matrix[0]) - 2):\n            hourglass_sum = (\n                max(0, matrix[i][j]) + max(0, matrix[i][j+1]) + max(0, matrix[i][j+2]) +\n                max(0, matrix[i+1][j+1]) +\n                max(0, matrix[i+2][j]) + max(0, matrix[i+2][j+1]) + max(0, matrix[i+2][j+2])\n            )\n            max_sum = max(max_sum, hourglass_sum)\n    return max_sum", "solution_func": "def g():\n    return [[1, 1, 1, 0, 0, 0],\n            [0, 1, 0, 0, 0, 0],\n            [1, 1, 1, 0, 0, 0],\n            [0, 0, 2, 4, 4, 0],\n            [0, 0, 0, 2, 0, 0],\n            [0, 0, 1, 2, 4, 0]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Find the maximum sum of any hourglass shape in the given 2D matrix, considering only even numbers.\n\n    An hourglass shape is defined as follows:\n    a b c\n      d\n    e f g\n\n    Sample input:\n    matrix = [[1, 1, 1, 0, 0, 0],\n              [0, 1, 0, 0, 0, 0],\n              [1, 1, 1, 0, 0, 0],\n              [0, 0, 2, 4, 4, 0],\n              [0, 0, 0, 2, 0, 0],\n              [0, 0, 1, 2, 4, 0]]\n\n    Sample output:\n    10\n\n    Explanation: The hourglass shape with the maximum sum of even numbers is:\n    2 4 4\n      2\n    1 2 4\n    The sum of even numbers in this hourglass shape is 10.\n\n    \"\"\"\n    max_sum = float('-inf')\n    for i in range(len(matrix) - 2):\n        for j in range(len(matrix[0]) - 2):\n            hourglass_sum = (\n                sum(num for num in [matrix[i][j], matrix[i][j+1], matrix[i][j+2], matrix[i+1][j+1], matrix[i+2][j], matrix[i+2][j+1], matrix[i+2][j+2]] if num % 2 == 0)\n            )\n            max_sum = max(max_sum, hourglass_sum)\n    return max_sum\n\ndef g():\n    return [[1, 1, 1, 0, 0, 0],\n            [0, 1, 0, 0, 0, 0],\n            [1, 1, 1, 0, 0, 0],\n            [0, 0, 2, 4, 4, 0],\n            [0, 0, 0, 2, 0, 0],\n            [0, 0, 1, 2, 4, 0]]\n\nassert f(g()) == 10\n\n", "emb": null, "idx_generation": 378, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Find the maximum sum of any hourglass shape in the given 2D matrix, considering only even numbers.\n\n    An hourglass shape is defined as follows:\n    a b c\n      d\n    e f g\n\n    Sample input:\n    matrix = [[1, 1, 1, 0, 0, 0],\n              [0, 1, 0, 0, 0, 0],\n              [1, 1, 1, 0, 0, 0],\n              [0, 0, 2, 4, 4, 0],\n              [0, 0, 0, 2, 0, 0],\n              [0, 0, 1, 2, 4, 0]]\n\n    Sample output:\n    10\n\n    Explanation: The hourglass shape with the maximum sum of even numbers is:\n    2 4 4\n      2\n    1 2 4\n    The sum of even numbers in this hourglass shape is 10.\n\n    \"\"\"\n    max_sum = float('-inf')\n    for i in range(len(matrix) - 2):\n        for j in range(len(matrix[0]) - 2):\n            hourglass_sum = (\n                sum(num for num in [matrix[i][j], matrix[i][j+1], matrix[i][j+2], matrix[i+1][j+1], matrix[i+2][j], matrix[i+2][j+1], matrix[i+2][j+2]] if num % 2 == 0)\n            )\n            max_sum = max(max_sum, hourglass_sum)\n    return max_sum", "solution_func": "def g():\n    return [[1, 1, 1, 0, 0, 0],\n            [0, 1, 0, 0, 0, 0],\n            [1, 1, 1, 0, 0, 0],\n            [0, 0, 2, 4, 4, 0],\n            [0, 0, 0, 2, 0, 0],\n            [0, 0, 1, 2, 4, 0]]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a subsequence that sums up to a target value.\n\n    A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    \n    Sample output:\n    True\n    \n    Explanation: The subsequence [2, 3, 5] sums up to the target value of 10.\n    \"\"\"\n    target = 10\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    \n    return False\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 378, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a subsequence that sums up to a target value.\n\n    A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    \n    Sample output:\n    True\n    \n    Explanation: The subsequence [2, 3, 5] sums up to the target value of 10.\n    \"\"\"\n    target = 10\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    \n    return False", "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 4, 5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a subsequence that sums up to a target value.\n\n    A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    \n    Sample output:\n    True\n    \n    Explanation: The subsequence [2, 3, 5] sums up to the target value of 10.\n    \"\"\"\n    target = 10\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    \n    return False\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 378, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a subsequence that sums up to a target value.\n\n    A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    \n    Sample output:\n    True\n    \n    Explanation: The subsequence [2, 3, 5] sums up to the target value of 10.\n    \"\"\"\n    target = 10\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    \n    return False", "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 4, 5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a subsequence that sums up to a target value.\n\n    A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    \n    Sample output:\n    True\n    \n    Explanation: The subsequence [2, 3, 5] sums up to the target value of 10.\n    \"\"\"\n    target = 10\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    \n    return False\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g())", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 378, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a subsequence that sums up to a target value.\n\n    A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    \n    Sample output:\n    True\n    \n    Explanation: The subsequence [2, 3, 5] sums up to the target value of 10.\n    \"\"\"\n    target = 10\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    \n    return False", "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 4, 5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subset of numbers in the given list that add up to the target value.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n    \n    Sample output:\n    True\n    \n    Explanation: The subset [2, 3, 4] adds up to the target value of 9.\n    \"\"\"\n    dp = [[False] * (target + 1) for _ in range(len(nums) + 1)]\n    \n    for i in range(len(nums) + 1):\n        dp[i][0] = True\n    \n    for i in range(1, len(nums) + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    \n    return dp[-1][-1]\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 9)\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 378, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subset of numbers in the given list that add up to the target value.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n    \n    Sample output:\n    True\n    \n    Explanation: The subset [2, 3, 4] adds up to the target value of 9.\n    \"\"\"\n    dp = [[False] * (target + 1) for _ in range(len(nums) + 1)]\n    \n    for i in range(len(nums) + 1):\n        dp[i][0] = True\n    \n    for i in range(1, len(nums) + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    \n    return dp[-1][-1]", "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"\n    Determine if it is possible to find a pair of numbers in a list that sums up to a target number. The pair of numbers\n    must be distinct and the order of the numbers in the pair does not matter.\n\n    Sample input:\n    [5, 10, 15, 20]\n\n    Sample output:\n    True\n\n    The pair of numbers (10, 15) sums up to 25, which is the target number.\n    \"\"\"\n    return any(num1 + num2 == target for i, num1 in enumerate(numbers) for num2 in numbers[i+1:])\n\ndef g(target=0):\n    return [5, 10, 15, target - 10]\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 379, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"\n    Determine if it is possible to find a pair of numbers in a list that sums up to a target number. The pair of numbers\n    must be distinct and the order of the numbers in the pair does not matter.\n\n    Sample input:\n    [5, 10, 15, 20]\n\n    Sample output:\n    True\n\n    The pair of numbers (10, 15) sums up to 25, which is the target number.\n    \"\"\"\n    return any(num1 + num2 == target for i, num1 in enumerate(numbers) for num2 in numbers[i+1:])", "solution_func": "def g(target=0):\n    return [5, 10, 15, target - 10]", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, check if there exists a pair of integers in the list whose product is equal to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 6\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=6):\n    return (nums, target)\n\nassert f(*g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 379, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, check if there exists a pair of integers in the list whose product is equal to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 6\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=6):\n    return (nums, target)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(coords: List[List[int]], side=2, num_points=4) -> bool:\n    \"\"\"Find num_points points in a side x side grid such that no four points are collinear.\"\"\"\n    def collinear(x1, y1, x2, y2, x3, y3):\n        return (y3 - y2) * (x2 - x1) == (y2 - y1) * (x3 - x2)\n\n    for i1 in range(len(coords)):\n        (x1, y1) = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            (x2, y2) = coords[i2]\n            for i3 in range(i2):\n                (x3, y3) = coords[i3]\n                for i4 in range(i3):\n                    (x4, y4) = coords[i4]\n                    assert not collinear(x1, y1, x2, y2, x3, y3) and \\\n                           not collinear(x1, y1, x2, y2, x4, y4) and \\\n                           not collinear(x1, y1, x3, y3, x4, y4) and \\\n                           not collinear(x2, y2, x3, y3, x4, y4)\n\n    return len({(a, b) for (a, b) in coords}) == len(coords) >= num_points\n\n\ndef g(side=2, num_points=4):\n    from itertools import combinations\n    assert side <= 5 or side == 10, \"Don't know how to solve other sides\"\n\n    def test(coords):\n        for i1 in range(len(coords)):\n            (x1, y1) = coords[i1]\n            for i2 in range(i1):\n                (x2, y2) = coords[i2]\n                for i3 in range(i2):\n                    (x3, y3) = coords[i3]\n                    for i4 in range(i3):\n                        (x4, y4) = coords[i4]\n                        if collinear(x1, y1, x2, y2, x3, y3) or \\\n                            collinear(x1, y1, x2, y2, x4, y4) or \\\n                            collinear(x1, y1, x3, y3, x4, y4) or \\\n                            collinear(x2, y2, x3, y3, x4, y4):\n                            return False\n        return True\n\n    if side <= 5:\n        grid = [[i, j] for i in range(side) for j in range(side)]\n        return next(list(coords) for coords in combinations(grid, num_points) if test(coords))\n\n    if side == 10:\n        def mirror(coords):  # rotate to all four corners\n            return [[a, b] for x, y in coords for a in [x, side - 1 - x] for b in [y, side - 1 - y]]\n\n        grid = [[i, j] for i in range(side // 2) for j in range(side // 2)]\n        return next(list(mirror(coords)) for coords in combinations(grid, side // 2) if\n                    test(coords) and test(mirror(coords)))\n\nassert f(g())", "emb": null, "idx_generation": 379, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(coords: List[List[int]], side=2, num_points=4) -> bool:\n    \"\"\"Find num_points points in a side x side grid such that no four points are collinear.\"\"\"\n    def collinear(x1, y1, x2, y2, x3, y3):\n        return (y3 - y2) * (x2 - x1) == (y2 - y1) * (x3 - x2)\n\n    for i1 in range(len(coords)):\n        (x1, y1) = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            (x2, y2) = coords[i2]\n            for i3 in range(i2):\n                (x3, y3) = coords[i3]\n                for i4 in range(i3):\n                    (x4, y4) = coords[i4]\n                    assert not collinear(x1, y1, x2, y2, x3, y3) and \\\n                           not collinear(x1, y1, x2, y2, x4, y4) and \\\n                           not collinear(x1, y1, x3, y3, x4, y4) and \\\n                           not collinear(x2, y2, x3, y3, x4, y4)\n\n    return len({(a, b) for (a, b) in coords}) == len(coords) >= num_points", "solution_func": "def g(side=2, num_points=4):\n    from itertools import combinations", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums: List[int] = [1, 2, 3, 2, 1]):\n    \"\"\"\n    This solution returns the input list in reverse order.\n    \"\"\"\n    return nums[::-1]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 379, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]", "solution_func": "def g(nums: List[int] = [1, 2, 3, 2, 1]):\n    \"\"\"\n    This solution returns the input list in reverse order.\n    \"\"\"\n    return nums[::-1]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a prime number.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(n: int = 17):\n    \"\"\"\n    This solution returns the input number.\n    \"\"\"\n    return n\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 379, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a prime number.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "solution_func": "def g(n: int = 17):\n    \"\"\"\n    This solution returns the input number.\n    \"\"\"\n    return n", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s: str = \"racecar\"):\n    \"\"\"\n    This solution returns the input string in reverse order.\n    \"\"\"\n    return s[::-1]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 379, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n    \"\"\"\n    return s == s[::-1]", "solution_func": "def g(s: str = \"racecar\"):\n    \"\"\"\n    This solution returns the input string in reverse order.\n    \"\"\"\n    return s[::-1]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"\n    Given n, check if the given string s contains exactly n vowels.\n\n    Sample input:\n    \"hello\"\n\n    Sample output:\n    True\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count == n\n\ndef g(n = 5):\n    return \"aeiou\" * (n // 5)\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 379, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"\n    Given n, check if the given string s contains exactly n vowels.\n\n    Sample input:\n    \"hello\"\n\n    Sample output:\n    True\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count == n", "solution_func": "def g(n = 5):\n    return \"aeiou\" * (n // 5)", "map_ix": [0, 1, 0, 1, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(li: List[int], k=3) -> bool:\n    \"\"\"\n    Given a list of integers li and an integer k, check if there exists a pair of integers in li whose sum is equal to k.\n\n    Sample input:\n    [1, 2, 3, 4, 5]\n\n    Sample output:\n    True\n    \"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == k:\n                return True\n    return False\n\ndef g(k = 3):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 379, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int], k=3) -> bool:\n    \"\"\"\n    Given a list of integers li and an integer k, check if there exists a pair of integers in li whose sum is equal to k.\n\n    Sample input:\n    [1, 2, 3, 4, 5]\n\n    Sample output:\n    True\n    \"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == k:\n                return True\n    return False", "solution_func": "def g(k = 3):\n    return [1, 2, 3, 4, 5]", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=9) -> bool:\n    \"\"\"\n    Given a matrix of integers, determine if the target integer is present in the matrix.\n\n    Sample input:\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample output:\n    True\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 379, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=9) -> bool:\n    \"\"\"\n    Given a matrix of integers, determine if the target integer is present in the matrix.\n\n    Sample input:\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample output:\n    True\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers `nums` and an integer `target`, find if there exists a pair of numbers in the list that sum up to the target.\n    Return True if such a pair exists, False otherwise.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n    Output: True\n    Explanation: The pair (3, 4) sums up to 7.\n    \"\"\"\n    nums_set = set(nums)\n\n    for num in nums:\n        complement = target - num\n        if complement in nums_set:\n            return True\n\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return (nums, target)\n\nassert f(*g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 379, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers `nums` and an integer `target`, find if there exists a pair of numbers in the list that sum up to the target.\n    Return True if such a pair exists, False otherwise.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n    Output: True\n    Explanation: The pair (3, 4) sums up to 7.\n    \"\"\"\n    nums_set = set(nums)\n\n    for num in nums:\n        complement = target - num\n        if complement in nums_set:\n            return True\n\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return (nums, target)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there is a subset of numbers in the given list whose sum is equal to the target number.\n    \"\"\"\n    def subsetSum(numbers, target):\n        if target == 0:\n            return True\n        if not numbers or target < 0:\n            return False\n        return subsetSum(numbers[1:], target) or subsetSum(numbers[1:], target - numbers[0])\n\n    return subsetSum(nums, target)\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 380, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there is a subset of numbers in the given list whose sum is equal to the target number.\n    \"\"\"\n    def subsetSum(numbers, target):\n        if target == 0:\n            return True\n        if not numbers or target < 0:\n            return False\n        return subsetSum(numbers[1:], target) or subsetSum(numbers[1:], target - numbers[0])\n\n    return subsetSum(nums, target)", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there is a pair of numbers in the given list whose sum is equal to the target number.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 380, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there is a pair of numbers in the given list whose sum is equal to the target number.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there is a contiguous subarray in the given list whose sum is equal to the target number.\n    \"\"\"\n    prefix_sum = 0\n    sum_set = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target or prefix_sum - target in sum_set:\n            return True\n        sum_set.add(prefix_sum)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g()) == True\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 380, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there is a contiguous subarray in the given list whose sum is equal to the target number.\n    \"\"\"\n    prefix_sum = 0\n    sum_set = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target or prefix_sum - target in sum_set:\n            return True\n        sum_set.add(prefix_sum)\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target", "map_ix": [1, 1, 0, 1, 0, 0, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any combination sums up to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False\n\ndef g(k=3, target_sum=15):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\nassert f(g(), k=3, target_sum=15) == True\n\n", "emb": null, "idx_generation": 380, "target_skills": null, "problem_func": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any combination sums up to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False", "solution_func": "def g(k=3, target_sum=15):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any combination sums up to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False\n\ndef g(k=2, target_sum=7):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n\nassert f(g(), k=2, target_sum=7) == False\n\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 380, "target_skills": null, "problem_func": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any combination sums up to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False", "solution_func": "def g(k=2, target_sum=7):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any combination sums up to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False\n\ndef g(k=5, target_sum=25):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [4, 8, 12, 16, 20, 24, 28, 32, 36, 40]\n\nassert f(g(), k=5, target_sum=25) == True\n\n", "emb": null, "idx_generation": 380, "target_skills": null, "problem_func": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any combination sums up to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False", "solution_func": "def g(k=5, target_sum=25):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [4, 8, 12, 16, 20, 24, 28, 32, 36, 40]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the list that adds up to the target number.\n\n    Sample Input:\n    [1, 2, 3, 4, 5], 9\n\n    Sample Output:\n    True\n\n    Explanation:\n    There exists a pair of numbers (4, 5) that adds up to 9.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (nums, target)\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 380, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the list that adds up to the target number.\n\n    Sample Input:\n    [1, 2, 3, 4, 5], 9\n\n    Sample Output:\n    True\n\n    Explanation:\n    There exists a pair of numbers (4, 5) that adds up to 9.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (nums, target)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n: int) -> str:\n    \"\"\"\n    Remove the nth character from the string.\n\n    Sample Input:\n    \"programming\", 4\n\n    Sample Output:\n    \"programing\"\n\n    Explanation:\n    The 4th character 'g' is removed from the string \"programming\".\n    \"\"\"\n    return s[:n] + s[n+1:]\n\ndef g(s: str = \"programming\", n: int = 4):\n    return (s, n)\n\nassert f(*g()) == \"programing\"\n", "emb": null, "idx_generation": 380, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int) -> str:\n    \"\"\"\n    Remove the nth character from the string.\n\n    Sample Input:\n    \"programming\", 4\n\n    Sample Output:\n    \"programing\"\n\n    Explanation:\n    The 4th character 'g' is removed from the string \"programming\".\n    \"\"\"\n    return s[:n] + s[n+1:]", "solution_func": "def g(s: str = \"programming\", n: int = 4):\n    return (s, n)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Sort the given list of integers in ascending order.\n\n    Sample Input:\n    [5, 3, 1, 4, 2]\n\n    Sample Output:\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    if len(nums) <= 1:\n        return nums\n    pivot = nums[len(nums) // 2]\n    left = [x for x in nums if x < pivot]\n    middle = [x for x in nums if x == pivot]\n    right = [x for x in nums if x > pivot]\n    return f(left) + middle + f(right)\n\ndef g(nums: List[int] = [5, 3, 1, 4, 2]):\n    return nums\n\nassert f(g()) == [1, 2, 3, 4, 5]\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 380, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Sort the given list of integers in ascending order.\n\n    Sample Input:\n    [5, 3, 1, 4, 2]\n\n    Sample Output:\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    if len(nums) <= 1:\n        return nums\n    pivot = nums[len(nums) // 2]\n    left = [x for x in nums if x < pivot]\n    middle = [x for x in nums if x == pivot]\n    right = [x for x in nums if x > pivot]\n    return f(left) + middle + f(right)", "solution_func": "def g(nums: List[int] = [5, 3, 1, 4, 2]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Check if the given list contains at least k prime numbers.\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [num for num in nums if is_prime(num)]\n    return len(primes) >= k\n\ndef g(k: int = 4):\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n\nassert f(g(), k=4) == True\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 380, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Check if the given list contains at least k prime numbers.\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [num for num in nums if is_prime(num)]\n    return len(primes) >= k", "solution_func": "def g(k: int = 4):\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subsequence in the list where the elements are in non-decreasing order.\n    \"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\n\ndef g(nums: List[int] = [1, 3, 2, 4, 5]):\n    \"\"\"\n    This solution returns the input list as is.\n    \"\"\"\n    return nums\n\nassert f(g()) == False\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 381, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subsequence in the list where the elements are in non-decreasing order.\n    \"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))", "solution_func": "def g(nums: List[int] = [1, 3, 2, 4, 5]):\n    \"\"\"\n    This solution returns the input list as is.\n    \"\"\"\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[List[int]]:\n    \"\"\"\n    Given a list of integers and a target value, find all pairs of numbers that sum up to the target.\n    \"\"\"\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                pairs.append([nums[i], nums[j]])\n    return pairs\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 6):\n    \"\"\"\n    This solution returns the input list and target value as is.\n    \"\"\"\n    return nums, target\n\nassert f(*g()) == [[1, 5], [2, 4]]\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 381, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[List[int]]:\n    \"\"\"\n    Given a list of integers and a target value, find all pairs of numbers that sum up to the target.\n    \"\"\"\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                pairs.append([nums[i], nums[j]])\n    return pairs", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 6):\n    \"\"\"\n    This solution returns the input list and target value as is.\n    \"\"\"\n    return nums, target", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, check if it is a palindrome.\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s: str = \"racecar\"):\n    \"\"\"\n    This solution returns the input string as is.\n    \"\"\"\n    return s\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 381, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, check if it is a palindrome.\n    \"\"\"\n    return s == s[::-1]", "solution_func": "def g(s: str = \"racecar\"):\n    \"\"\"\n    This solution returns the input string as is.\n    \"\"\"\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int], target=50) -> bool:\n    \"\"\"\n    Find if there exists a subset of numbers in the list that multiply to the target value.\n    \"\"\"\n    n = len(x)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][1] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < x[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j // x[i - 1]]\n    return dp[n][target]\n\ndef g(target=50):\n    return [2, 5, 10]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 381, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], target=50) -> bool:\n    \"\"\"\n    Find if there exists a subset of numbers in the list that multiply to the target value.\n    \"\"\"\n    n = len(x)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][1] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < x[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j // x[i - 1]]\n    return dp[n][target]", "solution_func": "def g(target=50):\n    return [2, 5, 10]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(li: List[int], target=24) -> bool:\n    \"\"\"\n    Find a list of integers that contains exactly three distinct values, such that the product of the values is equal to the target.\n    \"\"\"\n    return len(set(li)) == 3 and li[0] * li[1] * li[2] == target\n\ndef g(target=24):\n    return [2, 3, 4]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 381, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int], target=24) -> bool:\n    \"\"\"\n    Find a list of integers that contains exactly three distinct values, such that the product of the values is equal to the target.\n    \"\"\"\n    return len(set(li)) == 3 and li[0] * li[1] * li[2] == target", "solution_func": "def g(target=24):\n    return [2, 3, 4]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome and the sum of its elements is a perfect square.\n    A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward.\n    \"\"\"\n    return nums == nums[::-1] and sum(nums) ** 0.5 % 1 == 0\n\ndef g(nums: List[int] = [1, 2, 3, 2, 1]):\n    return nums\n\nassert f(g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 381, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome and the sum of its elements is a perfect square.\n    A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward.\n    \"\"\"\n    return nums == nums[::-1] and sum(nums) ** 0.5 % 1 == 0", "solution_func": "def g(nums: List[int] = [1, 2, 3, 2, 1]):\n    return nums", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return s == s[::-1]\ndef g(s: str):\n    return s\nassert f(g('racecar')) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 381, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return s == s[::-1]", "solution_func": "def g(s: str):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is sorted in non-decreasing order\"\"\"\n    return arr == sorted(arr)\ndef g():\n    arr = [1, 2, 3, 4, 5]\n    return arr\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 381, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is sorted in non-decreasing order\"\"\"\n    return arr == sorted(arr)", "solution_func": "def g():\n    arr = [1, 2, 3, 4, 5]\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a prime number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\ndef g():\n    n = 17\n    return n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 381, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a prime number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True", "solution_func": "def g():\n    n = 17\n    return n", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=100, n=5) -> bool:\n    \"\"\"\n    Find n distinct integers whose sum is equal to the target.\n    \"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target\ndef g(target=100, n=5):\n    return list(range(1, n+1))\n\nassert f(g())\n", "emb": null, "idx_generation": 381, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100, n=5) -> bool:\n    \"\"\"\n    Find n distinct integers whose sum is equal to the target.\n    \"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target", "solution_func": "def g(target=100, n=5):\n    return list(range(1, n+1))", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Find the difference between the maximum and minimum elements in a list of integers.\n    \"\"\"\n    return max(nums) - min(nums)\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g()) == 9\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 382, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Find the difference between the maximum and minimum elements in a list of integers.\n    \"\"\"\n    return max(nums) - min(nums)", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(names: List[str], ages: List[int]) -> List[str]:\n    \"\"\"\n    Given a list of names and a list of ages, return the names of people who are above 18 years old.\n    \"\"\"\n    return [name for name, age in zip(names, ages) if age > 18]\n\ndef g(names=[\"Alice\", \"Bob\", \"Charlie\", \"David\"], ages=[20, 15, 25, 30]):\n    return names, ages\n\nassert f(*g()) == [\"Alice\", \"Charlie\", \"David\"]\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 382, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(names: List[str], ages: List[int]) -> List[str]:\n    \"\"\"\n    Given a list of names and a list of ages, return the names of people who are above 18 years old.\n    \"\"\"\n    return [name for name, age in zip(names, ages) if age > 18]", "solution_func": "def g(names=[\"Alice\", \"Bob\", \"Charlie\", \"David\"], ages=[20, 15, 25, 30]):\n    return names, ages", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix of integers, transpose the matrix.\n\n    Sample input:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Sample output:\n    [[1, 4, 7],\n     [2, 5, 8],\n     [3, 6, 9]]\n    \"\"\"\n    return [list(row) for row in zip(*matrix)]\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 382, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix of integers, transpose the matrix.\n\n    Sample input:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Sample output:\n    [[1, 4, 7],\n     [2, 5, 8],\n     [3, 6, 9]]\n    \"\"\"\n    return [list(row) for row in zip(*matrix)]", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a given string is a palindrome.\n\n    Sample input:\n    \"racecar\"\n\n    Sample output:\n    True\n\n    Explanation:\n    The string \"racecar\" is a palindrome because it reads the same forwards and backwards.\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s: str = \"racecar\"):\n    return s\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 382, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a given string is a palindrome.\n\n    Sample input:\n    \"racecar\"\n\n    Sample output:\n    True\n\n    Explanation:\n    The string \"racecar\" is a palindrome because it reads the same forwards and backwards.\n    \"\"\"\n    return s == s[::-1]", "solution_func": "def g(s: str = \"racecar\"):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if a given number n is a perfect square.\n\n    Sample input:\n    16\n\n    Sample output:\n    True\n\n    Explanation:\n    The number 16 is a perfect square because it can be expressed as the square of an integer (4).\n    \"\"\"\n    return n == int(n**0.5)**2\n\ndef g(n: int = 16):\n    return n\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 382, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if a given number n is a perfect square.\n\n    Sample input:\n    16\n\n    Sample output:\n    True\n\n    Explanation:\n    The number 16 is a perfect square because it can be expressed as the square of an integer (4).\n    \"\"\"\n    return n == int(n**0.5)**2", "solution_func": "def g(n: int = 16):\n    return n", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Check if a given list of integers is sorted in non-decreasing order.\n\n    Sample input:\n    [1, 2, 3, 4, 5]\n\n    Sample output:\n    True\n\n    Explanation:\n    The list [1, 2, 3, 4, 5] is sorted in non-decreasing order.\n    \"\"\"\n    return lst == sorted(lst)\n\ndef g(lst: List[int] = [1, 2, 3, 4, 5]):\n    return lst\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 382, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Check if a given list of integers is sorted in non-decreasing order.\n\n    Sample input:\n    [1, 2, 3, 4, 5]\n\n    Sample output:\n    True\n\n    Explanation:\n    The list [1, 2, 3, 4, 5] is sorted in non-decreasing order.\n    \"\"\"\n    return lst == sorted(lst)", "solution_func": "def g(lst: List[int] = [1, 2, 3, 4, 5]):\n    return lst", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if the given string is a palindrome and if the sum of its digits is equal to n\"\"\"\n    return s == s[::-1] and sum(int(digit) for digit in s) == n\n\ndef g(n: int = 10):\n    \"\"\"\n    This solution returns the string \"12321\" and the number 10 as the sum of its digits\n    \"\"\"\n    return \"12321\"\n\nassert f(g(), n=10) == True\n\n", "emb": null, "idx_generation": 382, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if the given string is a palindrome and if the sum of its digits is equal to n\"\"\"\n    return s == s[::-1] and sum(int(digit) for digit in s) == n", "solution_func": "def g(n: int = 10):\n    \"\"\"\n    This solution returns the string \"12321\" and the number 10 as the sum of its digits\n    \"\"\"\n    return \"12321\"", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains only even numbers and if the sum of its elements is a prime number\"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return all(num % 2 == 0 for num in nums) and is_prime(sum(nums))\n\ndef g(nums: List[int] = [2, 4, 6, 8, 10]):\n    \"\"\"\n    This solution returns the input list [2, 4, 6, 8, 10]\n    \"\"\"\n    return nums\n\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 382, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains only even numbers and if the sum of its elements is a prime number\"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return all(num % 2 == 0 for num in nums) and is_prime(sum(nums))", "solution_func": "def g(nums: List[int] = [2, 4, 6, 8, 10]):\n    \"\"\"\n    This solution returns the input list [2, 4, 6, 8, 10]\n    \"\"\"\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string contains all vowels (a, e, i, o, u)\"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return vowels.issubset(set(s.lower()))\n\ndef g():\n    \"\"\"\n    This solution returns the string \"aeiou\"\n    \"\"\"\n    return \"aeiou\"\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 382, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string contains all vowels (a, e, i, o, u)\"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return vowels.issubset(set(s.lower()))", "solution_func": "def g():\n    \"\"\"\n    This solution returns the string \"aeiou\"\n    \"\"\"\n    return \"aeiou\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(li: List[int], target=10) -> bool:\n    \"\"\"\n    Find a list of integers that contains exactly three distinct values, such that the product of the values is equal to the target.\n    \"\"\"\n    return len(set(li)) == 3 and li[0] * li[1] * li[2] == target\n\ndef g(target=10):\n    return [1, 2, 5]\n\nassert f(g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 382, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int], target=10) -> bool:\n    \"\"\"\n    Find a list of integers that contains exactly three distinct values, such that the product of the values is equal to the target.\n    \"\"\"\n    return len(set(li)) == 3 and li[0] * li[1] * li[2] == target", "solution_func": "def g(target=10):\n    return [1, 2, 5]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size\n    \"\"\"\n    return [[0 if j > i else 1 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 383, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size\n    \"\"\"\n    return [[0 if j > i else 1 for j in range(size)] for i in range(size)]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a symmetric matrix of the given size\n    \"\"\"\n    return [[1 if i == j else 0 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 383, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a symmetric matrix of the given size\n    \"\"\"\n    return [[1 if i == j else 0 for j in range(size)] for i in range(size)]", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    n = rows\n    magic_sum = n * (n**2 + 1) // 2\n    # Check rows\n    for i in range(n):\n        if sum(matrix[i]) != magic_sum:\n            return False\n    # Check columns\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != magic_sum:\n            return False\n    # Check diagonals\n    diag_sum1 = sum(matrix[i][i] for i in range(n))\n    if diag_sum1 != magic_sum:\n        return False\n    diag_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    if diag_sum2 != magic_sum:\n        return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a magic square of the given size\n    \"\"\"\n    matrix = [[0 for _ in range(size)] for _ in range(size)]\n    row = size - 1\n    col = size // 2\n    for num in range(1, size**2 + 1):\n        matrix[row][col] = num\n        row = (row + 1) % size\n        col = (col + 1) % size\n        if matrix[row][col] != 0:\n            row = (row - 1) % size\n            col = (col - 1) % size\n            row = (row - 1) % size\n    return matrix\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 383, "target_skills": null, "problem_func": "import math\nfrom typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    n = rows\n    magic_sum = n * (n**2 + 1) // 2\n    # Check rows\n    for i in range(n):\n        if sum(matrix[i]) != magic_sum:\n            return False\n    # Check columns\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != magic_sum:\n            return False\n    # Check diagonals\n    diag_sum1 = sum(matrix[i][i] for i in range(n))\n    if diag_sum1 != magic_sum:\n        return False\n    diag_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    if diag_sum2 != magic_sum:\n        return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a magic square of the given size\n    \"\"\"\n    matrix = [[0 for _ in range(size)] for _ in range(size)]\n    row = size - 1\n    col = size // 2\n    for num in range(1, size**2 + 1):\n        matrix[row][col] = num\n        row = (row + 1) % size\n        col = (col + 1) % size\n        if matrix[row][col] != 0:\n            row = (row - 1) % size\n            col = (col - 1) % size\n            row = (row - 1) % size\n    return matrix", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    \"\"\"Find a path with a prime number of nodes from nodes 0 to 1 in the given digraph on vertices 0, 1,..., n.\"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return p[0] == 0 and p[-1] == 1 and is_prime(len(p)) and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\n\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    prime_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in prime_paths and j not in prime_paths:\n                prime_paths[j] = prime_paths[i] + [j]\n    return prime_paths.get(n)\n\nassert f(g())\n", "emb": [0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 383, "target_skills": null, "problem_func": "from typing import*\ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    \"\"\"Find a path with a prime number of nodes from nodes 0 to 1 in the given digraph on vertices 0, 1,..., n.\"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return p[0] == 0 and p[-1] == 1 and is_prime(len(p)) and all([[a, b] in edges for (a, b) in zip(p, p[1:])])", "solution_func": "def g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    prime_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in prime_paths and j not in prime_paths:\n                prime_paths[j] = prime_paths[i] + [j]\n    return prime_paths.get(n)", "map_ix": [0, 0, 1, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    \"\"\"Find the longest path from nodes 0 to 1 in the given digraph on vertices 0, 1,..., n.\"\"\"\n    return p[0] == 0 and p[-1] == 1 and len(p) == max(len(x) for x in p) and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\n\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)\n\nassert f(g())\n", "emb": null, "idx_generation": 383, "target_skills": null, "problem_func": "from typing import*\ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    \"\"\"Find the longest path from nodes 0 to 1 in the given digraph on vertices 0, 1,..., n.\"\"\"\n    return p[0] == 0 and p[-1] == 1 and len(p) == max(len(x) for x in p) and all([[a, b] in edges for (a, b) in zip(p, p[1:])])", "solution_func": "def g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    \"\"\"Find a path with a sum of nodes divisible by 3 from nodes 0 to 1 in the given digraph on vertices 0, 1,..., n.\"\"\"\n    return p[0] == 0 and p[-1] == 1 and sum(p) % 3 == 0 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\n\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)\n\nassert f(g())\n", "emb": null, "idx_generation": 383, "target_skills": null, "problem_func": "from typing import*\ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    \"\"\"Find a path with a sum of nodes divisible by 3 from nodes 0 to 1 in the given digraph on vertices 0, 1,..., n.\"\"\"\n    return p[0] == 0 and p[-1] == 1 and sum(p) % 3 == 0 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])", "solution_func": "def g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a number in the list that is less than the target value.\n    \"\"\"\n    return any(num < target for num in nums)\n\ndef g(target=0):\n    return list(range(target, target+10))\n\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 383, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a number in the list that is less than the target value.\n    \"\"\"\n    return any(num < target for num in nums)", "solution_func": "def g(target=0):\n    return list(range(target, target+10))", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int], n=3) -> bool:\n    \"\"\"Check if the list contains exactly n distinct even numbers\"\"\"\n    even_count = 0\n    for num in x:\n        if num % 2 == 0:\n            even_count += 1\n    return even_count == n\ndef g(n = 3):\n    return [2, 4, 6, 8, 10, 12, 14][:n]\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 383, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], n=3) -> bool:\n    \"\"\"Check if the list contains exactly n distinct even numbers\"\"\"\n    even_count = 0\n    for num in x:\n        if num % 2 == 0:\n            even_count += 1\n    return even_count == n", "solution_func": "def g(n = 3):\n    return [2, 4, 6, 8, 10, 12, 14][:n]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(inds: List[int], vecs=[169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]) -> bool:\n    \"\"\"\n    Parity learning: Given binary vectors in a subspace, find the secret set S of indices such that:\n    $\\\\sum_{i \\\\in S} x_i = 0 (mod 2)$\n    \"\"\"\n    return all((sum((v >> i & 1 for i in inds)) % 2 == 0 for v in vecs))\ndef g(vecs = [169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]\nassert f(g())\n", "emb": null, "idx_generation": 383, "target_skills": null, "problem_func": "from typing import*\ndef f(inds: List[int], vecs=[169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]) -> bool:\n    \"\"\"\n    Parity learning: Given binary vectors in a subspace, find the secret set S of indices such that:\n    $\\\\sum_{i \\\\in S} x_i = 0 (mod 2)$\n    \"\"\"\n    return all((sum((v >> i & 1 for i in inds)) % 2 == 0 for v in vecs))", "solution_func": "def g(vecs = [169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, return the sum of the diagonal elements of the matrix.\n    \"\"\"\n    diagonal_sum = 0\n    \n    for i in range(len(matrix)):\n        diagonal_sum += matrix[i][i]\n        \n    return diagonal_sum\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 15\n\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 383, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, return the sum of the diagonal elements of the matrix.\n    \"\"\"\n    diagonal_sum = 0\n    \n    for i in range(len(matrix)):\n        diagonal_sum += matrix[i][i]\n        \n    return diagonal_sum", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=5, b=10, c=15) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])\ndef g(a=5, b=10, c=15):\n    return -a + sum([b * i for i in range(c)])\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 384, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=5, b=10, c=15) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])", "solution_func": "def g(a=5, b=10, c=15):\n    return -a + sum([b * i for i in range(c)])", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=100, b=500, c=1000) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])\ndef g(a=100, b=500, c=1000):\n    return -a + sum([b * i for i in range(c)])\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 384, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=100, b=500, c=1000) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])", "solution_func": "def g(a=100, b=500, c=1000):\n    return -a + sum([b * i for i in range(c)])", "map_ix": [0, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=2, b=4, c=6) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])\ndef g(a=2, b=4, c=6):\n    return -a + sum([b * i for i in range(c)])\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 384, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=2, b=4, c=6) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])", "solution_func": "def g(a=2, b=4, c=6):\n    return -a + sum([b * i for i in range(c)])", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"Calculate the sum of the diagonals in a given matrix.\"\"\"\n    n = len(matrix)\n    diagonal_sum = sum(matrix[i][i] for i in range(n))\n    anti_diagonal_sum = sum(matrix[i][n-1-i] for i in range(n))\n    return diagonal_sum + anti_diagonal_sum\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == 30\n\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 384, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"Calculate the sum of the diagonals in a given matrix.\"\"\"\n    n = len(matrix)\n    diagonal_sum = sum(matrix[i][i] for i in range(n))\n    anti_diagonal_sum = sum(matrix[i][n-1-i] for i in range(n))\n    return diagonal_sum + anti_diagonal_sum", "solution_func": "def g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": [1, 0, 1, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"Return the sum of each row in a given matrix.\"\"\"\n    row_sums = []\n    for row in matrix:\n        row_sums.append(sum(row))\n    return row_sums\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == [6, 15, 24]\n\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 384, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"Return the sum of each row in a given matrix.\"\"\"\n    row_sums = []\n    for row in matrix:\n        row_sums.append(sum(row))\n    return row_sums", "solution_func": "def g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"Return the maximum element in each column of a given matrix.\"\"\"\n    column_max = []\n    for i in range(len(matrix[0])):\n        max_val = max(row[i] for row in matrix)\n        column_max.append(max_val)\n    return column_max\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == [7, 8, 9]\n\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 384, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"Return the maximum element in each column of a given matrix.\"\"\"\n    column_max = []\n    for i in range(len(matrix[0])):\n        max_val = max(row[i] for row in matrix)\n        column_max.append(max_val)\n    return column_max", "solution_func": "def g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": [1, 0, 1, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(s: str) -> int:\n    \"\"\"\n    Count the number of vowels in a given string.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    return count\n\ndef g():\n    \"\"\"\n    This solution counts the number of vowels in the string \"Hello, World!\"\n    \"\"\"\n    return \"Hello, World!\"\n\nassert f(g()) == 3\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 384, "target_skills": null, "problem_func": "from typing import*\n\ndef f(s: str) -> int:\n    \"\"\"\n    Count the number of vowels in a given string.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    return count", "solution_func": "def g():\n    \"\"\"\n    This solution counts the number of vowels in the string \"Hello, World!\"\n    \"\"\"\n    return \"Hello, World!\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(arr: List[int], k: int) -> int:\n    \"\"\"\n    Given a list of integers and a target number k, find the two numbers in the list that sum up to k and return their product.\n\n    Sample Input:\n    arr = [2, 4, 6, 8, 10]\n    k = 14\n\n    Sample Output:\n    48\n\n    Explanation:\n    The numbers 6 and 8 sum up to 14.\n    Their product is 6 * 8 = 48.\n    \"\"\"\n    num_set = set()\n    for num in arr:\n        if k - num in num_set:\n            return num * (k - num)\n        num_set.add(num)\n    return -1\n\ndef g(arr: List[int] = [2, 4, 6, 8, 10], k: int = 14):\n    return arr, k\n\nassert f(*g()) == 48\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 384, "target_skills": null, "problem_func": "from typing import*\n\ndef f(arr: List[int], k: int) -> int:\n    \"\"\"\n    Given a list of integers and a target number k, find the two numbers in the list that sum up to k and return their product.\n\n    Sample Input:\n    arr = [2, 4, 6, 8, 10]\n    k = 14\n\n    Sample Output:\n    48\n\n    Explanation:\n    The numbers 6 and 8 sum up to 14.\n    Their product is 6 * 8 = 48.\n    \"\"\"\n    num_set = set()\n    for num in arr:\n        if k - num in num_set:\n            return num * (k - num)\n        num_set.add(num)\n    return -1", "solution_func": "def g(arr: List[int] = [2, 4, 6, 8, 10], k: int = 14):\n    return arr, k", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(n: int) -> int:\n    \"\"\"\n    Find the sum of all the multiples of 3 or 5 below a given number n.\n\n    Sample Input:\n    n = 10\n\n    Sample Output:\n    23\n\n    Explanation:\n    The multiples of 3 or 5 below 10 are: 3, 5, 6, and 9.\n    Their sum is 3 + 5 + 6 + 9 = 23.\n    \"\"\"\n    total_sum = 0\n    for i in range(n):\n        if i % 3 == 0 or i % 5 == 0:\n            total_sum += i\n    return total_sum\n\ndef g(n: int = 10):\n    return n\n\nassert f(g()) == 23\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 384, "target_skills": null, "problem_func": "from typing import*\n\ndef f(n: int) -> int:\n    \"\"\"\n    Find the sum of all the multiples of 3 or 5 below a given number n.\n\n    Sample Input:\n    n = 10\n\n    Sample Output:\n    23\n\n    Explanation:\n    The multiples of 3 or 5 below 10 are: 3, 5, 6, and 9.\n    Their sum is 3 + 5 + 6 + 9 = 23.\n    \"\"\"\n    total_sum = 0\n    for i in range(n):\n        if i % 3 == 0 or i % 5 == 0:\n            total_sum += i\n    return total_sum", "solution_func": "def g(n: int = 10):\n    return n", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers `nums` and a target number `target`, find the two numbers that add up to the target.\n    Return the product of the two numbers.\n\n    For example, if nums = [2, 4, 6, 8] and target = 10, the pair (2, 8) adds up to the target and the product is 16.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return num * complement\n    return -1\n\ndef g(nums: List[int] = [2, 4, 6, 8], target: int = 10):\n    return (nums, target)\n\nassert f(*g()) == 16\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 384, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers `nums` and a target number `target`, find the two numbers that add up to the target.\n    Return the product of the two numbers.\n\n    For example, if nums = [2, 4, 6, 8] and target = 10, the pair (2, 8) adds up to the target and the product is 16.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return num * complement\n    return -1", "solution_func": "def g(nums: List[int] = [2, 4, 6, 8], target: int = 10):\n    return (nums, target)", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given array is a palindrome.\n    \"\"\"\n    n = len(arr)\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            return False\n    return True\n\ndef g():\n    \"\"\"\n    Generate a palindrome array.\n    \"\"\"\n    return [1, 2, 3, 2, 1]\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 385, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given array is a palindrome.\n    \"\"\"\n    n = len(arr)\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            return False\n    return True", "solution_func": "def g():\n    \"\"\"\n    Generate a palindrome array.\n    \"\"\"\n    return [1, 2, 3, 2, 1]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> int:\n    \"\"\"\n    Find the index of the target number in the given array.\n    Return -1 if the target number is not found.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g(), 3) == 2\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 385, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> int:\n    \"\"\"\n    Find the index of the target number in the given array.\n    Return -1 if the target number is not found.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5]):\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import random\nimport math\nfrom typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> float:\n    \"\"\"\n    Calculate the standard deviation of the given array.\n    \"\"\"\n    n = len(arr)\n    mean = sum(arr) / n\n    variance = sum((x - mean) ** 2 for x in arr) / n\n    std_dev = math.sqrt(variance)\n    return std_dev\n\ndef g():\n    \"\"\"\n    Generate an array of random integers.\n    \"\"\"\n    import random\n    rand = random.Random(0)\n    return [rand.randint(1, 10) for _ in range(10)]\n\nassert math.isclose(f(g()), 2.8722813232690143)\n\nassert f(g()) == True", "emb": null, "idx_generation": 385, "target_skills": null, "problem_func": "import random\nimport math\nfrom typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> float:\n    \"\"\"\n    Calculate the standard deviation of the given array.\n    \"\"\"\n    n = len(arr)\n    mean = sum(arr) / n\n    variance = sum((x - mean) ** 2 for x in arr) / n\n    std_dev = math.sqrt(variance)\n    return std_dev", "solution_func": "def g():\n    \"\"\"\n    Generate an array of random integers.\n    \"\"\"\n    import random\n    rand = random.Random(0)\n    return [rand.randint(1, 10) for _ in range(10)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> Tuple[int, int]:\n    \"\"\"\n    Given a matrix of integers and a target number, find the indices (row and column) of the first occurrence of the target number in the matrix.\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target:\n                return (i, j)\n    return (-1, -1)\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 5\n    return (matrix, target)\n\nassert f(*g()) == (1, 1)\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 385, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> Tuple[int, int]:\n    \"\"\"\n    Given a matrix of integers and a target number, find the indices (row and column) of the first occurrence of the target number in the matrix.\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target:\n                return (i, j)\n    return (-1, -1)", "solution_func": "def g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 5\n    return (matrix, target)", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> Tuple[int, int]:\n    \"\"\"\n    Given a matrix of integers and a target number, find the indices (row and column) of all occurrences of the target number in the matrix.\n    \"\"\"\n    indices = []\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target:\n                indices.append((i, j))\n    return indices\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 5\n    return (matrix, target)\n\nassert f(*g()) == [(1, 1)]\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 385, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> Tuple[int, int]:\n    \"\"\"\n    Given a matrix of integers and a target number, find the indices (row and column) of all occurrences of the target number in the matrix.\n    \"\"\"\n    indices = []\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target:\n                indices.append((i, j))\n    return indices", "solution_func": "def g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 5\n    return (matrix, target)", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> List[List[int]]:\n    \"\"\"\n    Given a matrix of integers and a target number, replace all occurrences of the target number in the matrix with the value -1.\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target:\n                matrix[i][j] = -1\n    return matrix\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 5\n    return (matrix, target)\n\nassert f(*g()) == [[1, 2, 3], [4, -1, 6], [7, 8, 9]]\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 385, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> List[List[int]]:\n    \"\"\"\n    Given a matrix of integers and a target number, replace all occurrences of the target number in the matrix with the value -1.\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target:\n                matrix[i][j] = -1\n    return matrix", "solution_func": "def g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 5\n    return (matrix, target)", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Given a list of integers, find the two numbers that add up to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in nums_set and complement != num:\n            return True\n    return False\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums\n\nassert f(g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 385, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Given a list of integers, find the two numbers that add up to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in nums_set and complement != num:\n            return True\n    return False", "solution_func": "def g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(nums: List[int], target: int = 10) -> List[int]:\n    \"\"\"\n    Given a list of integers, find the two numbers that add up to the target.\n    If such a pair exists, return the pair as a list. Otherwise, return an empty list.\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in nums_set and complement != num:\n            return [num, complement]\n    return []\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums\n\nassert f(g()) == [2, 8]\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 385, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int], target: int = 10) -> List[int]:\n    \"\"\"\n    Given a list of integers, find the two numbers that add up to the target.\n    If such a pair exists, return the pair as a list. Otherwise, return an empty list.\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in nums_set and complement != num:\n            return [num, complement]\n    return []", "solution_func": "def g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(nums: List[int], target: int = 10) -> int:\n    \"\"\"\n    Given a list of integers, find the number of pairs that add up to the target.\n    Return the count of such pairs.\n    \"\"\"\n    nums_set = set(nums)\n    count = 0\n    for num in nums:\n        complement = target - num\n        if complement in nums_set and complement != num:\n            count += 1\n    return count\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums\n\nassert f(g()) == 2\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 385, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int], target: int = 10) -> int:\n    \"\"\"\n    Given a list of integers, find the number of pairs that add up to the target.\n    Return the count of such pairs.\n    \"\"\"\n    nums_set = set(nums)\n    count = 0\n    for num in nums:\n        complement = target - num\n        if complement in nums_set and complement != num:\n            count += 1\n    return count", "solution_func": "def g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums", "map_ix": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a subsequence of numbers in the list that sum up to zero.\n    \"\"\"\n    prefix_sum = set()\n    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n        if curr_sum in prefix_sum or curr_sum == 0:\n            return True\n        prefix_sum.add(curr_sum)\n    return False\n\ndef g():\n    return [1, -2, 3, 4, -5, 6, 7, -8, 9, 10]\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 385, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a subsequence of numbers in the list that sum up to zero.\n    \"\"\"\n    prefix_sum = set()\n    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n        if curr_sum in prefix_sum or curr_sum == 0:\n            return True\n        prefix_sum.add(curr_sum)\n    return False", "solution_func": "def g():\n    return [1, -2, 3, 4, -5, 6, 7, -8, 9, 10]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an identity matrix.\n    An identity matrix is a square matrix in which all the elements of the principal diagonal are ones and all other elements are zeros.\n\n    Sample Input:\n    matrix = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    return all(matrix[i][j] == 1 if i == j else matrix[i][j] == 0 for i in range(n) for j in range(n))\n\ndef g(matrix: List[List[int]] = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]):\n    return matrix\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 386, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an identity matrix.\n    An identity matrix is a square matrix in which all the elements of the principal diagonal are ones and all other elements are zeros.\n\n    Sample Input:\n    matrix = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    return all(matrix[i][j] == 1 if i == j else matrix[i][j] == 0 for i in range(n) for j in range(n))", "solution_func": "def g(matrix: List[List[int]] = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]):\n    return matrix", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of integers is a palindrome.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums: List[int] = [1, 2, 3, 4, 3, 2, 1]):\n    return nums\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 386, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of integers is a palindrome.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return nums == nums[::-1]", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 3, 2, 1]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of integers is a perfect square list.\n    A perfect square list is a list in which all the elements are perfect squares.\n\n    Sample Input:\n    nums = [1, 4, 9, 16]\n\n    Sample Output:\n    True\n    \"\"\"\n    return all(num**0.5 % 1 == 0 for num in nums)\n\ndef g(nums: List[int] = [1, 4, 9, 16]):\n    return nums\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 386, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of integers is a perfect square list.\n    A perfect square list is a list in which all the elements are perfect squares.\n\n    Sample Input:\n    nums = [1, 4, 9, 16]\n\n    Sample Output:\n    True\n    \"\"\"\n    return all(num**0.5 % 1 == 0 for num in nums)", "solution_func": "def g(nums: List[int] = [1, 4, 9, 16]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that sums up to the target value.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums: List[int] = [2, 4, 6, 8, 10], target: int = 14):\n    return nums, target\n\nassert f(*g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 386, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that sums up to the target value.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums: List[int] = [2, 4, 6, 8, 10], target: int = 14):\n    return nums, target", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the given list is a valid mountain array.\n\n    A mountain array is defined as an array that:\n    - Has length >= 3\n    - Has an index i such that 0 < i < len(nums) - 1\n    - nums[0] < nums[1] < ... < nums[i - 1] < nums[i]\n    - nums[i] > nums[i + 1] > ... > nums[len(nums) - 1]\n\n    Sample Input:\n    nums = [0, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    if len(nums) < 3:\n        return False\n\n    i = 0\n    while i < len(nums) - 1 and nums[i] < nums[i + 1]:\n        i += 1\n\n    if i == 0 or i == len(nums) - 1:\n        return False\n\n    while i < len(nums) - 1 and nums[i] > nums[i + 1]:\n        i += 1\n\n    return i == len(nums) - 1\n\ndef g(nums: List[int] = [0, 3, 2, 1]):\n    return nums\n\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 386, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the given list is a valid mountain array.\n\n    A mountain array is defined as an array that:\n    - Has length >= 3\n    - Has an index i such that 0 < i < len(nums) - 1\n    - nums[0] < nums[1] < ... < nums[i - 1] < nums[i]\n    - nums[i] > nums[i + 1] > ... > nums[len(nums) - 1]\n\n    Sample Input:\n    nums = [0, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    if len(nums) < 3:\n        return False\n\n    i = 0\n    while i < len(nums) - 1 and nums[i] < nums[i + 1]:\n        i += 1\n\n    if i == 0 or i == len(nums) - 1:\n        return False\n\n    while i < len(nums) - 1 and nums[i] > nums[i + 1]:\n        i += 1\n\n    return i == len(nums) - 1", "solution_func": "def g(nums: List[int] = [0, 3, 2, 1]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    prefix_sum = 0\n    sum_set = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target or prefix_sum - target in sum_set:\n            return True\n        sum_set.add(prefix_sum)\n\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return nums, target\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 386, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    prefix_sum = 0\n    sum_set = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target or prefix_sum - target in sum_set:\n            return True\n        sum_set.add(prefix_sum)\n\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return nums, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a subsequence that multiplies up to a target value.\n\n    A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    \n    Sample output:\n    True\n    \n    Explanation: The subsequence [2, 3] multiplies up to the target value of 6.\n    \"\"\"\n    target = 6\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if product(nums[i:j]) == target:\n                return True\n    \n    return False\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n", "emb": null, "idx_generation": 386, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a subsequence that multiplies up to a target value.\n\n    A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    \n    Sample output:\n    True\n    \n    Explanation: The subsequence [2, 3] multiplies up to the target value of 6.\n    \"\"\"\n    target = 6\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if product(nums[i:j]) == target:\n                return True\n    \n    return False", "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a subsequence that averages up to a target value.\n\n    A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    \n    Sample output:\n    True\n    \n    Explanation: The subsequence [2, 3] averages up to the target value of 2.5.\n    \"\"\"\n    target = 2.5\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if average(nums[i:j]) == target:\n                return True\n    \n    return False\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n", "emb": null, "idx_generation": 386, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a subsequence that averages up to a target value.\n\n    A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    \n    Sample output:\n    True\n    \n    Explanation: The subsequence [2, 3] averages up to the target value of 2.5.\n    \"\"\"\n    target = 2.5\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if average(nums[i:j]) == target:\n                return True\n    \n    return False", "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a subsequence that has a maximum value equal to the target value.\n\n    A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    \n    Sample output:\n    True\n    \n    Explanation: The subsequence [4, 5] has a maximum value of 5, which is equal to the target value.\n    \"\"\"\n    target = 5\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if max(nums[i:j]) == target:\n                return True\n    \n    return False\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 386, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a subsequence that has a maximum value equal to the target value.\n\n    A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    \n    Sample output:\n    True\n    \n    Explanation: The subsequence [4, 5] has a maximum value of 5, which is equal to the target value.\n    \"\"\"\n    target = 5\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if max(nums[i:j]) == target:\n                return True\n    \n    return False", "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if the given list contains a number that is equal to the target value.\"\"\"\n    return any(num == target for num in nums)\n\ndef g(target=5):\n    nums = [1, 3, 5, 7, 9]\n    return nums\n\nassert f(g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 386, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if the given list contains a number that is equal to the target value.\"\"\"\n    return any(num == target for num in nums)", "solution_func": "def g(target=5):\n    nums = [1, 3, 5, 7, 9]\n    return nums", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\nimport numpy as np\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return a list containing the product of each row in the matrix.\n    \"\"\"\n    row_products = []\n    \n    for row in matrix:\n        row_product = np.prod(row)\n        row_products.append(row_product)\n    \n    return row_products\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [6, 120, 504]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 387, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\nimport numpy as np\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return a list containing the product of each row in the matrix.\n    \"\"\"\n    row_products = []\n    \n    for row in matrix:\n        row_product = np.prod(row)\n        row_products.append(row_product)\n    \n    return row_products", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the given list of integers is sorted in non-decreasing order.\"\"\"\n    return lst == sorted(lst)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 387, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the given list of integers is sorted in non-decreasing order.\"\"\"\n    return lst == sorted(lst)", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> int:\n    \"\"\"Return the sum of all even numbers in the given list.\"\"\"\n    return sum(num for num in lst if num % 2 == 0)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 30\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 387, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> int:\n    \"\"\"Return the sum of all even numbers in the given list.\"\"\"\n    return sum(num for num in lst if num % 2 == 0)", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Find the sum of all the elements in the given matrix\n    \"\"\"\n    return sum(sum(row) for row in matrix)\n\ndef g(size=3):\n    \"\"\"\n    Generate a matrix of the given size with random values between 1 and 10\n    \"\"\"\n    import random\n    return [[random.randint(1, 10) for _ in range(size)] for _ in range(size)]\n\nassert f(g()) == 75\n\n", "emb": null, "idx_generation": 387, "target_skills": null, "problem_func": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Find the sum of all the elements in the given matrix\n    \"\"\"\n    return sum(sum(row) for row in matrix)", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a matrix of the given size with random values between 1 and 10\n    \"\"\"\n    import random\n    return [[random.randint(1, 10) for _ in range(size)] for _ in range(size)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is symmetric\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a symmetric matrix of the given size\n    \"\"\"\n    return [[1 if i == j else 0 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 387, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is symmetric\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a symmetric matrix of the given size\n    \"\"\"\n    return [[1 if i == j else 0 for j in range(size)] for i in range(size)]", "map_ix": [1, 0, 1, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Find the maximum element in the given matrix\n    \"\"\"\n    max_val = float('-inf')\n    for row in matrix:\n        for val in row:\n            max_val = max(max_val, val)\n    return max_val\n\ndef g(size=3):\n    \"\"\"\n    Generate a matrix of the given size with random values between 1 and 100\n    \"\"\"\n    import random\n    return [[random.randint(1, 100) for _ in range(size)] for _ in range(size)]\n\nassert f(g()) == 97\n\n", "emb": null, "idx_generation": 387, "target_skills": null, "problem_func": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Find the maximum element in the given matrix\n    \"\"\"\n    max_val = float('-inf')\n    for row in matrix:\n        for val in row:\n            max_val = max(max_val, val)\n    return max_val", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a matrix of the given size with random values between 1 and 100\n    \"\"\"\n    import random\n    return [[random.randint(1, 100) for _ in range(size)] for _ in range(size)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list whose sum equals the target value.\n    \"\"\"\n    nums = set()\n\n    for num in arr:\n        if target - num in nums:\n            return True\n        nums.add(num)\n\n    return False\n\ndef g(arr: List[int]):\n    \"\"\"\n    This solution returns the input list after sorting it in ascending order.\n    \"\"\"\n    return sorted(arr)\n\nassert f(g([3, 4, -7, 2, 1, 3, 1]), 4)\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 387, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list whose sum equals the target value.\n    \"\"\"\n    nums = set()\n\n    for num in arr:\n        if target - num in nums:\n            return True\n        nums.add(num)\n\n    return False", "solution_func": "def g(arr: List[int]):\n    \"\"\"\n    This solution returns the input list after sorting it in ascending order.\n    \"\"\"\n    return sorted(arr)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'isabella', 'jackfruit']) -> bool:\n    \"\"\"Check if the given string starts with the same character as the alphabetically first string in the list.\"\"\"\n    return s[0] == min(strings)[0]\n\ndef g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'isabella', 'jackfruit']):\n    \"\"\"Return the list of strings sorted in descending order by length.\"\"\"\n    return sorted(strings, key=len, reverse=True)\n\nassert f(g())\n", "emb": null, "idx_generation": 387, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'isabella', 'jackfruit']) -> bool:\n    \"\"\"Check if the given string starts with the same character as the alphabetically first string in the list.\"\"\"\n    return s[0] == min(strings)[0]", "solution_func": "def g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'isabella', 'jackfruit']):\n    \"\"\"Return the list of strings sorted in descending order by length.\"\"\"\n    return sorted(strings, key=len, reverse=True)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an identity matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != (1 if i == j else 0):\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate an identity matrix of the given size.\n    \"\"\"\n    return [[1 if i == j else 0 for j in range(size)] for i in range(size)]\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 387, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an identity matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != (1 if i == j else 0):\n                return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate an identity matrix of the given size.\n    \"\"\"\n    return [[1 if i == j else 0 for j in range(size)] for i in range(size)]", "map_ix": [1, 1, 0, 1, 0, 1, 1, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 387, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [1, 1, 0, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix, return a list containing the sum of each column.\n    \"\"\"\n    col_sums = []\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for j in range(cols):\n        col_sum = 0\n        for i in range(rows):\n            col_sum += matrix[i][j]\n        col_sums.append(col_sum)\n    return col_sums\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == [12, 15, 18]\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 388, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix, return a list containing the sum of each column.\n    \"\"\"\n    col_sums = []\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for j in range(cols):\n        col_sum = 0\n        for i in range(rows):\n            col_sum += matrix[i][j]\n        col_sums.append(col_sum)\n    return col_sums", "solution_func": "def g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum product of a subarray.\n\n    Example:\n    nums = [-2, 3, -4, 5, -1]\n\n    Output:\n    120\n\n    Explanation: The subarray [3, -4, 5] has the maximum product of 120.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in nums:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n    \n    return max_product\n\ndef g():\n    return [-2, 3, -4, 5, -1]\n\nassert f(g()) == 120\n\n", "emb": null, "idx_generation": 388, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum product of a subarray.\n\n    Example:\n    nums = [-2, 3, -4, 5, -1]\n\n    Output:\n    120\n\n    Explanation: The subarray [3, -4, 5] has the maximum product of 120.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in nums:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n    \n    return max_product", "solution_func": "def g():\n    return [-2, 3, -4, 5, -1]", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a symmetric matrix of the given size with random elements.\n    \"\"\"\n    import random\n    return [[random.randint(1, 9) for _ in range(size)] for _ in range(size)]\n\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 388, "target_skills": null, "problem_func": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a symmetric matrix of the given size with random elements.\n    \"\"\"\n    import random\n    return [[random.randint(1, 9) for _ in range(size)] for _ in range(size)]", "map_ix": null}, {"fitness": 1.0, "program_str": "import numpy as np\nfrom typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a diagonal matrix.\"\"\"\n    n = len(matrix)\n\n    # Check if the non-diagonal elements are all zero\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n\n    return True\n\ndef g(n=3):\n    \"\"\"Generate a diagonal matrix of size n x n.\"\"\"\n    diagonal_matrix = np.zeros((n, n), dtype=int)\n    for i in range(n):\n        diagonal_matrix[i, i] = i+1\n\n    return diagonal_matrix.tolist()\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 388, "target_skills": null, "problem_func": "import numpy as np\nfrom typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a diagonal matrix.\"\"\"\n    n = len(matrix)\n\n    # Check if the non-diagonal elements are all zero\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n\n    return True", "solution_func": "def g(n=3):\n    \"\"\"Generate a diagonal matrix of size n x n.\"\"\"\n    diagonal_matrix = np.zeros((n, n), dtype=int)\n    for i in range(n):\n        diagonal_matrix[i, i] = i+1\n\n    return diagonal_matrix.tolist()", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Find the maximum difference between any two elements in the given array.\n    Return the maximum difference.\n    \"\"\"\n    min_val = arr[0]\n    max_diff = 0\n\n    for i in range(1, len(arr)):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        elif arr[i] - min_val > max_diff:\n            max_diff = arr[i] - min_val\n\n    return max_diff\n\ndef g(arr=[2, 5, 1, 7, 3, 9, 4]):\n    return arr\n\nassert f(g()) == 8\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 388, "target_skills": null, "problem_func": "from typing import*\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Find the maximum difference between any two elements in the given array.\n    Return the maximum difference.\n    \"\"\"\n    min_val = arr[0]\n    max_diff = 0\n\n    for i in range(1, len(arr)):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        elif arr[i] - min_val > max_diff:\n            max_diff = arr[i] - min_val\n\n    return max_diff", "solution_func": "def g(arr=[2, 5, 1, 7, 3, 9, 4]):\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given array is a palindrome.\n    Return True if the array is a palindrome, False otherwise.\n    \"\"\"\n    reversed_arr = arr[::-1]\n    return arr == reversed_arr\n\ndef g(arr=[1, 2, 3, 4, 3, 2, 1]):\n    return arr\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 388, "target_skills": null, "problem_func": "from typing import*\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given array is a palindrome.\n    Return True if the array is a palindrome, False otherwise.\n    \"\"\"\n    reversed_arr = arr[::-1]\n    return arr == reversed_arr", "solution_func": "def g(arr=[1, 2, 3, 4, 3, 2, 1]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Find if there are two numbers in the given list that sum up to the target number.\n\n    Sample Input:\n    nums = [2, 4, 6, 8, 10]\n    target = 16\n\n    Sample Output:\n    True\n\n    Explanation:\n    The pair of numbers (6, 10) sums up to the target number 16.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g(), target=16) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 388, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Find if there are two numbers in the given list that sum up to the target number.\n\n    Sample Input:\n    nums = [2, 4, 6, 8, 10]\n    target = 16\n\n    Sample Output:\n    True\n\n    Explanation:\n    The pair of numbers (6, 10) sums up to the target number 16.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g():\n    return [2, 4, 6, 8, 10]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list that contains exactly k distinct numbers.\n\n    Sample Input:\n    nums = [1, 2, 3, 1, 2, 3, 4]\n    k = 3\n\n    Sample Output:\n    True\n\n    Explanation:\n    The subarray [1, 2, 3] contains exactly 3 distinct numbers.\n    \"\"\"\n    if len(nums) < k:\n        return False\n    for i in range(len(nums) - k + 1):\n        if len(set(nums[i:i+k])) == k:\n            return True\n    return False\n\ndef g(k=3):\n    return [1, 2, 3, 1, 2, 3, 4]\n\nassert f(g(), k=3) == True\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 388, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list that contains exactly k distinct numbers.\n\n    Sample Input:\n    nums = [1, 2, 3, 1, 2, 3, 4]\n    k = 3\n\n    Sample Output:\n    True\n\n    Explanation:\n    The subarray [1, 2, 3] contains exactly 3 distinct numbers.\n    \"\"\"\n    if len(nums) < k:\n        return False\n    for i in range(len(nums) - k + 1):\n        if len(set(nums[i:i+k])) == k:\n            return True\n    return False", "solution_func": "def g(k=3):\n    return [1, 2, 3, 1, 2, 3, 4]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the maximum product of any two numbers in the given list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    20\n\n    Explanation:\n    The maximum product is achieved by multiplying 4 and 5.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == 20\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 388, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the maximum product of any two numbers in the given list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    20\n\n    Explanation:\n    The maximum product is achieved by multiplying 4 and 5.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n    return max_product", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target value, find two integers in the list such that their sum is equal to the target value.\n    Return the indices of the two integers in a list.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return [i, j]\n    return []\n\ndef g(nums: List[int] = [1, 6, 4, 2, 3], target: int = 7):\n    return (nums, target)\n\nassert f(*g()) == [0, 2]\n", "emb": null, "idx_generation": 388, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target value, find two integers in the list such that their sum is equal to the target value.\n    Return the indices of the two integers in a list.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return [i, j]\n    return []", "solution_func": "def g(nums: List[int] = [1, 6, 4, 2, 3], target: int = 7):\n    return (nums, target)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the given list contains a subarray that has a sum equal to the target value.\n\n    A subarray is a contiguous part of an array.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample output:\n    True\n\n    Explanation: The subarray [2, 3, 4] has a sum of 9, which is equal to the target value.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            subarray = nums[i:j]\n            subarray_sum = sum(subarray)\n            if subarray_sum == target:\n                return True\n    \n    return False\n\ndef g() -> Tuple[List[int], int]:\n    return [1, 2, 3, 4, 5], 9\n\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 389, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the given list contains a subarray that has a sum equal to the target value.\n\n    A subarray is a contiguous part of an array.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample output:\n    True\n\n    Explanation: The subarray [2, 3, 4] has a sum of 9, which is equal to the target value.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            subarray = nums[i:j]\n            subarray_sum = sum(subarray)\n            if subarray_sum == target:\n                return True\n    \n    return False", "solution_func": "def g() -> Tuple[List[int], int]:\n    return [1, 2, 3, 4, 5], 9", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    Find all pairs of numbers in the given list that add up to the target value.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    target = 6\n\n    Sample output:\n    [(1, 5), (2, 4)]\n\n    Explanation: The pairs (1, 5) and (2, 4) have a sum of 6, which is equal to the target value.\n    \"\"\"\n    num_set = set(nums)\n    pairs = []\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            pairs.append((num, complement))\n    return pairs\n\ndef g() -> Tuple[List[int], int]:\n    return [1, 2, 3, 4, 5], 6\n\nassert f(*g()) == [(1, 5), (2, 4)]\n", "emb": null, "idx_generation": 389, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    Find all pairs of numbers in the given list that add up to the target value.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    target = 6\n\n    Sample output:\n    [(1, 5), (2, 4)]\n\n    Explanation: The pairs (1, 5) and (2, 4) have a sum of 6, which is equal to the target value.\n    \"\"\"\n    num_set = set(nums)\n    pairs = []\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            pairs.append((num, complement))\n    return pairs", "solution_func": "def g() -> Tuple[List[int], int]:\n    return [1, 2, 3, 4, 5], 6", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the maximum product of any two numbers in the given list.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample output:\n    20\n\n    Explanation: The maximum product is obtained by multiplying 4 and 5, which gives 20.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == 20\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 389, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the maximum product of any two numbers in the given list.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample output:\n    20\n\n    Explanation: The maximum product is obtained by multiplying 4 and 5, which gives 20.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n    return max_product", "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Given a list of numbers, check if there exists a pair of numbers whose sum is equal to the target.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    seen = set()\n    for num in numbers:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target: int = 10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 389, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Given a list of numbers, check if there exists a pair of numbers whose sum is equal to the target.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    seen = set()\n    for num in numbers:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(target: int = 10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substring: str = 'abc') -> bool:\n    \"\"\"\n    Given a string and a substring, check if the substring appears in the string.\n    Return True if the substring exists, False otherwise.\n    \"\"\"\n    return substring in string\n\ndef g(substring: str = 'abc'):\n    string = 'abcdefg'\n    return string\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 389, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substring: str = 'abc') -> bool:\n    \"\"\"\n    Given a string and a substring, check if the substring appears in the string.\n    Return True if the substring exists, False otherwise.\n    \"\"\"\n    return substring in string", "solution_func": "def g(substring: str = 'abc'):\n    string = 'abcdefg'\n    return string", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], k: int = 3) -> bool:\n    \"\"\"\n    Given a list of numbers, find the k largest elements in the list and return them in descending order.\n    \"\"\"\n    numbers.sort(reverse=True)\n    return numbers[:k]\n\ndef g(k: int = 3):\n    numbers = [8, 1, 5, 2, 9, 3, 7]\n    return numbers\n\nassert f(g()) == [9, 8, 7]\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 389, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], k: int = 3) -> bool:\n    \"\"\"\n    Given a list of numbers, find the k largest elements in the list and return them in descending order.\n    \"\"\"\n    numbers.sort(reverse=True)\n    return numbers[:k]", "solution_func": "def g(k: int = 3):\n    numbers = [8, 1, 5, 2, 9, 3, 7]\n    return numbers", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Determine if it is possible to find a pair of numbers in a matrix that XORs to a target number. The pair of numbers\n    must be distinct and the order of the numbers in the pair does not matter.\n\n    Sample input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample output:\n    True\n\n    The pair of numbers (2, 6) XORs to 4, which is the target number.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for x in range(i, rows):\n                for y in range(j, cols):\n                    if matrix[i][j] ^ matrix[x][y] == target and (i != x or j != y):\n                        return True\n    return False\n\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, target ^ 2, 9]]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 389, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Determine if it is possible to find a pair of numbers in a matrix that XORs to a target number. The pair of numbers\n    must be distinct and the order of the numbers in the pair does not matter.\n\n    Sample input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample output:\n    True\n\n    The pair of numbers (2, 6) XORs to 4, which is the target number.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for x in range(i, rows):\n                for y in range(j, cols):\n                    if matrix[i][j] ^ matrix[x][y] == target and (i != x or j != y):\n                        return True\n    return False", "solution_func": "def g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, target ^ 2, 9]]", "map_ix": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Determine if it is possible to find a pair of numbers in a matrix that XORs to a target number. The pair of numbers\n    must be distinct and the order of the numbers in the pair does not matter.\n\n    Sample input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample output:\n    True\n\n    The pair of numbers (2, 6) XORs to 4, which is the target number.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for x in range(i, rows):\n                for y in range(j, cols):\n                    if matrix[i][j] ^ matrix[x][y] == target and (i != x or j != y):\n                        return True\n    return False\n\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, target, 10]]\n\nassert f(g()) == False\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 389, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Determine if it is possible to find a pair of numbers in a matrix that XORs to a target number. The pair of numbers\n    must be distinct and the order of the numbers in the pair does not matter.\n\n    Sample input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample output:\n    True\n\n    The pair of numbers (2, 6) XORs to 4, which is the target number.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for x in range(i, rows):\n                for y in range(j, cols):\n                    if matrix[i][j] ^ matrix[x][y] == target and (i != x or j != y):\n                        return True\n    return False", "solution_func": "def g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, target, 10]]", "map_ix": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Determine if it is possible to find a pair of numbers in a matrix that XORs to a target number. The pair of numbers\n    must be distinct and the order of the numbers in the pair does not matter.\n\n    Sample input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample output:\n    True\n\n    The pair of numbers (2, 6) XORs to 4, which is the target number.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for x in range(i, rows):\n                for y in range(j, cols):\n                    if matrix[i][j] ^ matrix[x][y] == target and (i != x or j != y):\n                        return True\n    return False\n\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, target ^ 2, 8]]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 389, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Determine if it is possible to find a pair of numbers in a matrix that XORs to a target number. The pair of numbers\n    must be distinct and the order of the numbers in the pair does not matter.\n\n    Sample input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample output:\n    True\n\n    The pair of numbers (2, 6) XORs to 4, which is the target number.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for x in range(i, rows):\n                for y in range(j, cols):\n                    if matrix[i][j] ^ matrix[x][y] == target and (i != x or j != y):\n                        return True\n    return False", "solution_func": "def g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, target ^ 2, 8]]", "map_ix": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an upper triangular matrix\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=4):\n    \"\"\"\n    Generate an upper triangular matrix of the given size\n    \"\"\"\n    upper_triangular_matrix = [[0 for _ in range(size)] for _ in range(size)]\n    for i in range(size):\n        for j in range(i, size):\n            upper_triangular_matrix[i][j] = i + j\n    return upper_triangular_matrix\n\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 389, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an upper triangular matrix\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != 0:\n                return False\n    return True", "solution_func": "def g(size=4):\n    \"\"\"\n    Generate an upper triangular matrix of the given size\n    \"\"\"\n    upper_triangular_matrix = [[0 for _ in range(size)] for _ in range(size)]\n    for i in range(size):\n        for j in range(i, size):\n            upper_triangular_matrix[i][j] = i + j\n    return upper_triangular_matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the minimum product of any two numbers in the given list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    2\n\n    Explanation:\n    The minimum product is achieved by multiplying 1 and 2.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            product = nums[i] * nums[j]\n            if product < min_product:\n                min_product = product\n    return min_product\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == 2\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 390, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the minimum product of any two numbers in the given list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    2\n\n    Explanation:\n    The minimum product is achieved by multiplying 1 and 2.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            product = nums[i] * nums[j]\n            if product < min_product:\n                min_product = product\n    return min_product", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the sum of all the numbers in the given list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    15\n\n    Explanation:\n    The sum of all the numbers is 1 + 2 + 3 + 4 + 5 = 15.\n    \"\"\"\n    return sum(nums)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == 15\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 390, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the sum of all the numbers in the given list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    15\n\n    Explanation:\n    The sum of all the numbers is 1 + 2 + 3 + 4 + 5 = 15.\n    \"\"\"\n    return sum(nums)", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the difference between the maximum and minimum numbers in the given list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    4\n\n    Explanation:\n    The maximum number is 5 and the minimum number is 1. The difference is 5 - 1 = 4.\n    \"\"\"\n    return max(nums) - min(nums)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == 4\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 390, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the difference between the maximum and minimum numbers in the given list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    4\n\n    Explanation:\n    The maximum number is 5 and the minimum number is 1. The difference is 5 - 1 = 4.\n    \"\"\"\n    return max(nums) - min(nums)", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a wave pattern.\n    A wave pattern is a grid where the elements form a pattern that starts with an increasing sequence, followed by a decreasing sequence, and then repeats.\n\n    Sample Input:\n    arr = [[1, 2, 3], [6, 5, 4], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(n):\n        if i % 2 == 0:\n            for j in range(m-1):\n                if arr[i][j] >= arr[i][j+1]:\n                    return False\n        else:\n            for j in range(m-1):\n                if arr[i][j] <= arr[i][j+1]:\n                    return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [6, 5, 4], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 390, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a wave pattern.\n    A wave pattern is a grid where the elements form a pattern that starts with an increasing sequence, followed by a decreasing sequence, and then repeats.\n\n    Sample Input:\n    arr = [[1, 2, 3], [6, 5, 4], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(n):\n        if i % 2 == 0:\n            for j in range(m-1):\n                if arr[i][j] >= arr[i][j+1]:\n                    return False\n        else:\n            for j in range(m-1):\n                if arr[i][j] <= arr[i][j+1]:\n                    return False\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [6, 5, 4], [7, 8, 9]]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a staircase pattern.\n    A staircase pattern is a grid where the elements form a pattern that starts with an increasing sequence in each row, and the next row starts with a greater value than the previous row.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(1, n):\n        if arr[i][0] <= arr[i-1][0]:\n            return False\n        for j in range(m-1):\n            if arr[i][j] <= arr[i-1][j] or arr[i][j+1] <= arr[i][j]:\n                return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 390, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a staircase pattern.\n    A staircase pattern is a grid where the elements form a pattern that starts with an increasing sequence in each row, and the next row starts with a greater value than the previous row.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(1, n):\n        if arr[i][0] <= arr[i-1][0]:\n            return False\n        for j in range(m-1):\n            if arr[i][j] <= arr[i-1][j] or arr[i][j+1] <= arr[i][j]:\n                return False\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [1, 0, 1, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a diagonal pattern.\n    A diagonal pattern is a grid where the elements form a pattern that starts with an increasing sequence along the main diagonal, and the next diagonal starts with a greater value than the previous diagonal.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(1, n):\n        if arr[i][i] <= arr[i-1][i-1]:\n            return False\n        for j in range(i, m-1):\n            if arr[j+1][j+1] <= arr[j][j]:\n                return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 390, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a diagonal pattern.\n    A diagonal pattern is a grid where the elements form a pattern that starts with an increasing sequence along the main diagonal, and the next diagonal starts with a greater value than the previous diagonal.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(1, n):\n        if arr[i][i] <= arr[i-1][i-1]:\n            return False\n        for j in range(i, m-1):\n            if arr[j+1][j+1] <= arr[j][j]:\n                return False\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substrings=['python', 'programming', 'puzzles']) -> bool:\n    \"\"\"\n    Find a string that contains all the substrings reversed and forward\n    \"\"\"\n    return all((sub in s and sub[::-1] in s for sub in substrings))\n\ndef g(substrings = ['python', 'programming', 'puzzles']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])\n\nassert f(g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 390, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substrings=['python', 'programming', 'puzzles']) -> bool:\n    \"\"\"\n    Find a string that contains all the substrings reversed and forward\n    \"\"\"\n    return all((sub in s and sub[::-1] in s for sub in substrings))", "solution_func": "def g(substrings = ['python', 'programming', 'puzzles']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'orange']) -> bool:\n    \"\"\"\n    Find a string that contains all the substrings reversed and forward\n    \"\"\"\n    return all((sub in s and sub[::-1] in s for sub in substrings))\n\ndef g(substrings = ['apple', 'banana', 'orange']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 390, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'orange']) -> bool:\n    \"\"\"\n    Find a string that contains all the substrings reversed and forward\n    \"\"\"\n    return all((sub in s and sub[::-1] in s for sub in substrings))", "solution_func": "def g(substrings = ['apple', 'banana', 'orange']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substrings=['cat', 'dog', 'bird']) -> bool:\n    \"\"\"\n    Find a string that contains all the substrings reversed and forward\n    \"\"\"\n    return all((sub in s and sub[::-1] in s for sub in substrings))\n\ndef g(substrings = ['cat', 'dog', 'bird']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 390, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substrings=['cat', 'dog', 'bird']) -> bool:\n    \"\"\"\n    Find a string that contains all the substrings reversed and forward\n    \"\"\"\n    return all((sub in s and sub[::-1] in s for sub in substrings))", "solution_func": "def g(substrings = ['cat', 'dog', 'bird']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=7, b=20, c=25) -> bool:\n    \"\"\"Check if a given number n is divisible by the sum of the first c odd integers multiplied by b and added to a.\"\"\"\n    return n % (sum([b * (2*i-1) for i in range(1, c+1)]) + a) == 0\ndef g(a=7, b=20, c=25):\n    return a + sum([b * (2*i-1) for i in range(1, c+1)])\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 390, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=7, b=20, c=25) -> bool:\n    \"\"\"Check if a given number n is divisible by the sum of the first c odd integers multiplied by b and added to a.\"\"\"\n    return n % (sum([b * (2*i-1) for i in range(1, c+1)]) + a) == 0", "solution_func": "def g(a=7, b=20, c=25):\n    return a + sum([b * (2*i-1) for i in range(1, c+1)])", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given nested list whose product is equal to 24.\n    \"\"\"\n\n    num_set = set()\n    for lst in nums:\n        for num in lst:\n            if 24 % num == 0 and 24 // num in num_set:\n                return True\n            num_set.add(num)\n    return False\n\ndef g(nums: List[List[int]] = [[1, 2, 3], [4, 6, 8], [9, 10, 12]]):\n    return nums\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 391, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given nested list whose product is equal to 24.\n    \"\"\"\n\n    num_set = set()\n    for lst in nums:\n        for num in lst:\n            if 24 % num == 0 and 24 // num in num_set:\n                return True\n            num_set.add(num)\n    return False", "solution_func": "def g(nums: List[List[int]] = [[1, 2, 3], [4, 6, 8], [9, 10, 12]]):\n    return nums", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given nested list whose difference is equal to 5.\n    \"\"\"\n\n    num_set = set()\n    for lst in nums:\n        for num in lst:\n            if num - 5 in num_set or num + 5 in num_set:\n                return True\n            num_set.add(num)\n    return False\n\ndef g(nums: List[List[int]] = [[1, 7, 3], [4, 2, 9], [6, 10, 8]]):\n    return nums\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 391, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given nested list whose difference is equal to 5.\n    \"\"\"\n\n    num_set = set()\n    for lst in nums:\n        for num in lst:\n            if num - 5 in num_set or num + 5 in num_set:\n                return True\n            num_set.add(num)\n    return False", "solution_func": "def g(nums: List[List[int]] = [[1, 7, 3], [4, 2, 9], [6, 10, 8]]):\n    return nums", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given nested list whose product is a perfect square.\n    \"\"\"\n\n    num_set = set()\n    for lst in nums:\n        for num in lst:\n            if num > 0 and (num ** 0.5) % 1 == 0 and (num ** 0.5) in num_set:\n                return True\n            num_set.add(num ** 0.5)\n    return False\n\ndef g(nums: List[List[int]] = [[1, 4, 3], [9, 2, 8], [6, 10, 16]]):\n    return nums\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 391, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given nested list whose product is a perfect square.\n    \"\"\"\n\n    num_set = set()\n    for lst in nums:\n        for num in lst:\n            if num > 0 and (num ** 0.5) % 1 == 0 and (num ** 0.5) in num_set:\n                return True\n            num_set.add(num ** 0.5)\n    return False", "solution_func": "def g(nums: List[List[int]] = [[1, 4, 3], [9, 2, 8], [6, 10, 16]]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str]) -> bool:\n    \"\"\"Check if all words in the list have the same length.\"\"\"\n    length = len(words[0])\n    return all(len(word) == length for word in words)\n\ndef g():\n    \"\"\"Generate a list of words with the same length.\"\"\"\n    length = 5\n    return ['apple', 'banana', 'cherry']\n\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 391, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str]) -> bool:\n    \"\"\"Check if all words in the list have the same length.\"\"\"\n    length = len(words[0])\n    return all(len(word) == length for word in words)", "solution_func": "def g():\n    \"\"\"Generate a list of words with the same length.\"\"\"\n    length = 5\n    return ['apple', 'banana', 'cherry']", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if the matrix is a symmetric matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    \"\"\"Generate a symmetric matrix.\"\"\"\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 391, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if the matrix is a symmetric matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g():\n    \"\"\"Generate a symmetric matrix.\"\"\"\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]", "map_ix": [1, 0, 1, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]]) -> bool:\n    \"\"\"Check if all points lie on the same line.\"\"\"\n    x1, y1 = points[0]\n    x2, y2 = points[1]\n    slope = (y2 - y1) / (x2 - x1)\n    return all((y - y1) == slope * (x - x1) for x, y in points)\n\ndef g():\n    \"\"\"Generate a list of points on the same line.\"\"\"\n    return [(1, 1), (2, 2), (3, 3)]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 391, "target_skills": null, "problem_func": "from typing import*\ndef f(points: List[Tuple[int, int]]) -> bool:\n    \"\"\"Check if all points lie on the same line.\"\"\"\n    x1, y1 = points[0]\n    x2, y2 = points[1]\n    slope = (y2 - y1) / (x2 - x1)\n    return all((y - y1) == slope * (x - x1) for x, y in points)", "solution_func": "def g():\n    \"\"\"Generate a list of points on the same line.\"\"\"\n    return [(1, 1), (2, 2), (3, 3)]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, check if there exists a pair of numbers in the list whose sum is equal to the target number.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n\n    Output:\n    True\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=7):\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), target=7) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 391, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, check if there exists a pair of numbers in the list whose sum is equal to the target number.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n\n    Output:\n    True\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=7):\n    return [1, 2, 3, 4, 5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix (list of lists), check if it is a square matrix.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Output:\n    True\n    \"\"\"\n    rows = len(matrix)\n    for row in matrix:\n        if len(row) != rows:\n            return False\n    return True\n\ndef g():\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 391, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix (list of lists), check if it is a square matrix.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Output:\n    True\n    \"\"\"\n    rows = len(matrix)\n    for row in matrix:\n        if len(row) != rows:\n            return False\n    return True", "solution_func": "def g():\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list is sorted in non-decreasing order.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n\n    Output:\n    True\n    \"\"\"\n    for i in range(len(nums)-1):\n        if nums[i] > nums[i+1]:\n            return False\n    return True\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 391, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list is sorted in non-decreasing order.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n\n    Output:\n    True\n    \"\"\"\n    for i in range(len(nums)-1):\n        if nums[i] > nums[i+1]:\n            return False\n    return True", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list whose sum is equal to 0.\n    Return True if such a subarray exists, False otherwise.\n\n    Sample Input:\n    arr = [1, 2, -3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if prefix_sum[j] - prefix_sum[i] == 0:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, -3, 4, 5]):\n    return arr\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 391, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list whose sum is equal to 0.\n    Return True if such a subarray exists, False otherwise.\n\n    Sample Input:\n    arr = [1, 2, -3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if prefix_sum[j] - prefix_sum[i] == 0:\n                return True\n    return False", "solution_func": "def g(arr: List[int] = [1, 2, -3, 4, 5]):\n    return arr", "map_ix": [1, 1, 0, 1, 0, 0, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\n\ndef f(words: List[str]) -> bool:\n    \"\"\"\n    Check if all words in the list start with a vowel.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return all(word[0] in vowels for word in words)\n\ndef g():\n    return ['apple', 'banana', 'orange', 'kiwi']\n\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 392, "target_skills": null, "problem_func": "from typing import*\n\ndef f(words: List[str]) -> bool:\n    \"\"\"\n    Check if all words in the list start with a vowel.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return all(word[0] in vowels for word in words)", "solution_func": "def g():\n    return ['apple', 'banana', 'orange', 'kiwi']", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if the sum of the even numbers in the list is equal to the sum of the odd numbers in the list.\n    \"\"\"\n    even_sum = sum(num for num in numbers if num % 2 == 0)\n    odd_sum = sum(num for num in numbers if num % 2 != 0)\n    return even_sum == odd_sum\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == False\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 392, "target_skills": null, "problem_func": "from typing import*\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if the sum of the even numbers in the list is equal to the sum of the odd numbers in the list.\n    \"\"\"\n    even_sum = sum(num for num in numbers if num % 2 == 0)\n    odd_sum = sum(num for num in numbers if num % 2 != 0)\n    return even_sum == odd_sum", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist two numbers in the list whose sum is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in numbers:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 15\n\nassert f(*g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 392, "target_skills": null, "problem_func": "from typing import*\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist two numbers in the list whose sum is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in numbers:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 15", "map_ix": [1, 1, 0, 0, 1, 1, 1, 1, 1, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the minimum possible sum of a contiguous subarray.\n\n    Example:\n    nums = [1, -2, 3, -4, 5, -6]\n\n    Output:\n    -8\n\n    Explanation: The contiguous subarray with the minimum sum is [3, -4, 5, -6], which gives a sum of -8.\n    \"\"\"\n    min_sum = float('inf')\n    curr_sum = 0\n\n    for num in nums:\n        curr_sum += num\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n        if curr_sum > 0:\n            curr_sum = 0\n\n    return min_sum\n\ndef g(nums: List[int] = [1, -2, 3, -4, 5, -6]):\n    return (nums,)\n\nassert f(*g()) == -8\n", "emb": null, "idx_generation": 392, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the minimum possible sum of a contiguous subarray.\n\n    Example:\n    nums = [1, -2, 3, -4, 5, -6]\n\n    Output:\n    -8\n\n    Explanation: The contiguous subarray with the minimum sum is [3, -4, 5, -6], which gives a sum of -8.\n    \"\"\"\n    min_sum = float('inf')\n    curr_sum = 0\n\n    for num in nums:\n        curr_sum += num\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n        if curr_sum > 0:\n            curr_sum = 0\n\n    return min_sum", "solution_func": "def g(nums: List[int] = [1, -2, 3, -4, 5, -6]):\n    return (nums,)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, find the longest increasing subarray.\n\n    Example:\n    nums = [1, 2, 3, 2, 4, 5, 6, 1, 2, 3, 4, 5]\n\n    Output:\n    [2, 4, 5, 6]\n\n    Explanation: The longest increasing subarray is [2, 4, 5, 6].\n    \"\"\"\n    longest_subarray = []\n    curr_subarray = []\n\n    for i in range(len(nums)):\n        if i == 0 or nums[i] > nums[i-1]:\n            curr_subarray.append(nums[i])\n        else:\n            if len(curr_subarray) > len(longest_subarray):\n                longest_subarray = curr_subarray\n            curr_subarray = [nums[i]]\n\n    if len(curr_subarray) > len(longest_subarray):\n        longest_subarray = curr_subarray\n\n    return longest_subarray\n\ndef g(nums: List[int] = [1, 2, 3, 2, 4, 5, 6, 1, 2, 3, 4, 5]):\n    return (nums,)\n\nassert f(*g()) == [2, 4, 5, 6]\n", "emb": null, "idx_generation": 392, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, find the longest increasing subarray.\n\n    Example:\n    nums = [1, 2, 3, 2, 4, 5, 6, 1, 2, 3, 4, 5]\n\n    Output:\n    [2, 4, 5, 6]\n\n    Explanation: The longest increasing subarray is [2, 4, 5, 6].\n    \"\"\"\n    longest_subarray = []\n    curr_subarray = []\n\n    for i in range(len(nums)):\n        if i == 0 or nums[i] > nums[i-1]:\n            curr_subarray.append(nums[i])\n        else:\n            if len(curr_subarray) > len(longest_subarray):\n                longest_subarray = curr_subarray\n            curr_subarray = [nums[i]]\n\n    if len(curr_subarray) > len(longest_subarray):\n        longest_subarray = curr_subarray\n\n    return longest_subarray", "solution_func": "def g(nums: List[int] = [1, 2, 3, 2, 4, 5, 6, 1, 2, 3, 4, 5]):\n    return (nums,)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum difference between two elements such that the larger element appears after the smaller element.\n\n    Example:\n    nums = [7, 1, 5, 3, 6, 4]\n\n    Output:\n    5\n\n    Explanation: The maximum difference is 5 (6-1) between the elements 1 and 6.\n    \"\"\"\n    max_diff = 0\n    min_element = float('inf')\n\n    for num in nums:\n        min_element = min(min_element, num)\n        max_diff = max(max_diff, num - min_element)\n\n    return max_diff\n\ndef g(nums: List[int] = [7, 1, 5, 3, 6, 4]):\n    return (nums,)\n\nassert f(*g()) == 5\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 392, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum difference between two elements such that the larger element appears after the smaller element.\n\n    Example:\n    nums = [7, 1, 5, 3, 6, 4]\n\n    Output:\n    5\n\n    Explanation: The maximum difference is 5 (6-1) between the elements 1 and 6.\n    \"\"\"\n    max_diff = 0\n    min_element = float('inf')\n\n    for num in nums:\n        min_element = min(min_element, num)\n        max_diff = max(max_diff, num - min_element)\n\n    return max_diff", "solution_func": "def g(nums: List[int] = [7, 1, 5, 3, 6, 4]):\n    return (nums,)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the sum of all the even numbers in the given list of integers.\n\n    Sample Input:\n    [1, 2, 3, 4, 5, 6]\n\n    Sample Output:\n    12\n    \"\"\"\n    return sum(x for x in nums if x % 2 == 0)\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6]):\n    return nums\n\nassert f(g()) == 12\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 392, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the sum of all the even numbers in the given list of integers.\n\n    Sample Input:\n    [1, 2, 3, 4, 5, 6]\n\n    Sample Output:\n    12\n    \"\"\"\n    return sum(x for x in nums if x % 2 == 0)", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with all the duplicate elements removed.\n\n    Sample Input:\n    [1, 2, 2, 3, 4, 4, 5]\n\n    Sample Output:\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    return list(set(nums))\n\ndef g(nums: List[int] = [1, 2, 2, 3, 4, 4, 5]):\n    return nums\n\nassert f(g()) == [1, 2, 3, 4, 5]\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 392, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with all the duplicate elements removed.\n\n    Sample Input:\n    [1, 2, 2, 3, 4, 4, 5]\n\n    Sample Output:\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    return list(set(nums))", "solution_func": "def g(nums: List[int] = [1, 2, 2, 3, 4, 4, 5]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with all the prime numbers removed.\n\n    Sample Input:\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Sample Output:\n    [1, 4, 6, 8, 9, 10]\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [x for x in nums if not is_prime(x)]\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g()) == [1, 4, 6, 8, 9, 10]\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 392, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with all the prime numbers removed.\n\n    Sample Input:\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Sample Output:\n    [1, 4, 6, 8, 9, 10]\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [x for x in nums if not is_prime(x)]", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return the sum of each column in the matrix.\n    \"\"\"\n    col_sums = []\n    num_cols = len(matrix[0])\n    \n    for i in range(num_cols):\n        col_sum = sum(row[i] for row in matrix)\n        col_sums.append(col_sum)\n        \n    return col_sums\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [12, 15, 18]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 392, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return the sum of each column in the matrix.\n    \"\"\"\n    col_sums = []\n    num_cols = len(matrix[0])\n    \n    for i in range(num_cols):\n        col_sum = sum(row[i] for row in matrix)\n        col_sums.append(col_sum)\n        \n    return col_sums", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subsequence of the list whose sum is greater than the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return any(dp[n][j] for j in range(target + 1) if j > target)\n\ndef g(nums=[2, 4, 6, 8], target=10):\n    return nums, target\n\nassert f(*g()) == False\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 393, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subsequence of the list whose sum is greater than the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return any(dp[n][j] for j in range(target + 1) if j > target)", "solution_func": "def g(nums=[2, 4, 6, 8], target=10):\n    return nums, target", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subsequence of the list whose sum is less than the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return any(dp[n][j] for j in range(target + 1) if j < target)\n\ndef g(nums=[2, 4, 6, 8], target=10):\n    return nums, target\n\nassert f(*g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 393, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subsequence of the list whose sum is less than the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return any(dp[n][j] for j in range(target + 1) if j < target)", "solution_func": "def g(nums=[2, 4, 6, 8], target=10):\n    return nums, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subsequence of the list whose sum is equal to the target value, but divisible by 3.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return any(dp[n][j] for j in range(target + 1) if j % 3 == 0)\n\ndef g(nums=[2, 4, 6, 8], target=10):\n    return nums, target\n\nassert f(*g()) == False\n", "emb": null, "idx_generation": 393, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subsequence of the list whose sum is equal to the target value, but divisible by 3.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return any(dp[n][j] for j in range(target + 1) if j % 3 == 0)", "solution_func": "def g(nums=[2, 4, 6, 8], target=10):\n    return nums, target", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subset of numbers in the given list that add up to the target value.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n    \n    Sample output:\n    True\n    \n    Explanation: The subset [2, 3, 4] adds up to the target value of 9.\n    \"\"\"\n    dp = [[False] * (target + 1) for _ in range(len(nums) + 1)]\n    \n    for i in range(len(nums) + 1):\n        dp[i][0] = True\n    \n    for i in range(1, len(nums) + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    \n    return dp[-1][-1]\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 9)\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 393, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subset of numbers in the given list that add up to the target value.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n    \n    Sample output:\n    True\n    \n    Explanation: The subset [2, 3, 4] adds up to the target value of 9.\n    \"\"\"\n    dp = [[False] * (target + 1) for _ in range(len(nums) + 1)]\n    \n    for i in range(len(nums) + 1):\n        dp[i][0] = True\n    \n    for i in range(1, len(nums) + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    \n    return dp[-1][-1]", "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int = 3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the given array, such that the sum of its elements is zero.\"\"\"\n    for i in range(len(arr) - k + 1):\n        subarr = arr[i:i+k]\n        if sum(subarr) == 0:\n            return True\n    return False\n\ndef g(k: int = 3):\n    return [0] * k\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 393, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int = 3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the given array, such that the sum of its elements is zero.\"\"\"\n    for i in range(len(arr) - k + 1):\n        subarr = arr[i:i+k]\n        if sum(subarr) == 0:\n            return True\n    return False", "solution_func": "def g(k: int = 3):\n    return [0] * k", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> int:\n    \"\"\"\n    Find the maximum sum of any column in the given 2D array.\n\n    Sample input:\n    arr = [[1, 2, 3],\n           [4, 5, 6],\n           [7, 8, 9]]\n\n    Sample output:\n    18\n\n    Explanation: The columns with maximum sums are:\n    1 4 7 (sum = 12)\n    2 5 8 (sum = 15)\n    3 6 9 (sum = 18)\n    Their maximum sum is 18.\n\n    \"\"\"\n    max_sum = float('-inf')\n    for j in range(len(arr[0])):\n        column_sum = sum([arr[i][j] for i in range(len(arr))])\n        max_sum = max(max_sum, column_sum)\n    return max_sum\n\ndef g() -> List[List[int]]:\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]\n\nassert f(g()) == 18\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 393, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> int:\n    \"\"\"\n    Find the maximum sum of any column in the given 2D array.\n\n    Sample input:\n    arr = [[1, 2, 3],\n           [4, 5, 6],\n           [7, 8, 9]]\n\n    Sample output:\n    18\n\n    Explanation: The columns with maximum sums are:\n    1 4 7 (sum = 12)\n    2 5 8 (sum = 15)\n    3 6 9 (sum = 18)\n    Their maximum sum is 18.\n\n    \"\"\"\n    max_sum = float('-inf')\n    for j in range(len(arr[0])):\n        column_sum = sum([arr[i][j] for i in range(len(arr))])\n        max_sum = max(max_sum, column_sum)\n    return max_sum", "solution_func": "def g() -> List[List[int]]:\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target value, check if there exists a subarray in the list\n    that adds up to the target value. If such a subarray exists, return True. Otherwise, return False.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        curr_sum = arr[i]\n        if curr_sum == target:\n            return True\n        \n        for j in range(i+1, n):\n            curr_sum += arr[j]\n            if curr_sum == target:\n                return True\n            elif curr_sum > target:\n                break\n\n    return False\n\ndef g(target=10):\n    \"\"\"Generate a list of numbers.\"\"\"\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 10) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 393, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target value, check if there exists a subarray in the list\n    that adds up to the target value. If such a subarray exists, return True. Otherwise, return False.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        curr_sum = arr[i]\n        if curr_sum == target:\n            return True\n        \n        for j in range(i+1, n):\n            curr_sum += arr[j]\n            if curr_sum == target:\n                return True\n            elif curr_sum > target:\n                break\n\n    return False", "solution_func": "def g(target=10):\n    \"\"\"Generate a list of numbers.\"\"\"\n    return [1, 2, 3, 4, 5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target value, check if there exists a pair of numbers in the list\n    that adds up to the target value. If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == target:\n                return True\n\n    return False\n\ndef g(target=10):\n    \"\"\"Generate a list of numbers.\"\"\"\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 10) == True\n\n", "emb": null, "idx_generation": 393, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target value, check if there exists a pair of numbers in the list\n    that adds up to the target value. If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == target:\n                return True\n\n    return False", "solution_func": "def g(target=10):\n    \"\"\"Generate a list of numbers.\"\"\"\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target value, check if there exists a triplet of numbers in the list\n    that adds up to the target value. If such a triplet exists, return True. Otherwise, return False.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n\n    return False\n\ndef g(target=10):\n    \"\"\"Generate a list of numbers.\"\"\"\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 10) == True\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 393, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target value, check if there exists a triplet of numbers in the list\n    that adds up to the target value. If such a triplet exists, return True. Otherwise, return False.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n\n    return False", "solution_func": "def g(target=10):\n    \"\"\"Generate a list of numbers.\"\"\"\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 393, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return arr == arr[::-1]", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that sums up to the target value.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list after sorting it in ascending order.\n    \"\"\"\n    nums.sort()\n    return nums\n\nassert f(g([1, 2, 3, 4, 5]), 9)\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 394, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that sums up to the target value.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list after sorting it in ascending order.\n    \"\"\"\n    nums.sort()\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Shuffle the given list of integers randomly.\n    \"\"\"\n    random.shuffle(nums)\n    return nums\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list after sorting it in ascending order.\n    \"\"\"\n    nums.sort()\n    return nums\n\nassert f(g([1, 2, 3, 4, 5])) != [1, 2, 3, 4, 5]\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 394, "target_skills": null, "problem_func": "from typing import*\nimport random\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Shuffle the given list of integers randomly.\n    \"\"\"\n    random.shuffle(nums)\n    return nums", "solution_func": "def g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list after sorting it in ascending order.\n    \"\"\"\n    nums.sort()\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Find the number of times the target value appears in the list.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num == target:\n            count += 1\n    return count\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list after sorting it in ascending order.\n    \"\"\"\n    nums.sort()\n    return nums\n\nassert f(g([1, 2, 3, 4, 5, 5, 5, 6, 7]), 5) == 3\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 394, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Find the number of times the target value appears in the list.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num == target:\n            count += 1\n    return count", "solution_func": "def g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list after sorting it in ascending order.\n    \"\"\"\n    nums.sort()\n    return nums", "map_ix": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Given a list of numbers, check if there exists a pair of numbers whose sum is equal to 10.\n\n    Sample Input:\n    [2, 7, 6, 4, 3]\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for num in numbers:\n        complement = 10 - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(numbers=[2, 7, 6, 4, 3]):\n    return numbers\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 394, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Given a list of numbers, check if there exists a pair of numbers whose sum is equal to 10.\n\n    Sample Input:\n    [2, 7, 6, 4, 3]\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for num in numbers:\n        complement = 10 - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(numbers=[2, 7, 6, 4, 3]):\n    return numbers", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Given a string, check if it is a palindrome.\n\n    Sample Input:\n    \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return string == string[::-1]\n\ndef g(string=\"racecar\"):\n    return string\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 394, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Given a string, check if it is a palindrome.\n\n    Sample Input:\n    \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return string == string[::-1]", "solution_func": "def g(string=\"racecar\"):\n    return string", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix of integers, rotate it 90 degrees clockwise.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    [[7, 4, 1],\n     [8, 5, 2],\n     [9, 6, 3]]\n    \"\"\"\n    n = len(matrix)\n    rotated_matrix = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            rotated_matrix[i][j] = matrix[n - j - 1][i]\n    return rotated_matrix\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n", "emb": [1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 394, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix of integers, rotate it 90 degrees clockwise.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    [[7, 4, 1],\n     [8, 5, 2],\n     [9, 6, 3]]\n    \"\"\"\n    n = len(matrix)\n    rotated_matrix = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            rotated_matrix[i][j] = matrix[n - j - 1][i]\n    return rotated_matrix", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [1, 1, 1, 0, 0, 1, 1, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiply to give an odd product.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] % 2 != 0:\n                return True\n    return False\n\ndef g(nums=[2, 4, 6, 8]):\n    return nums\n\nassert f(g()) == False\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 394, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiply to give an odd product.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] % 2 != 0:\n                return True\n    return False", "solution_func": "def g(nums=[2, 4, 6, 8]):\n    return nums", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if all numbers in the list are prime numbers.\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    for num in nums:\n        if not is_prime(num):\n            return False\n    return True\n\ndef g(nums=[2, 3, 5, 7]):\n    return nums\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 394, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if all numbers in the list are prime numbers.\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    for num in nums:\n        if not is_prime(num):\n            return False\n    return True", "solution_func": "def g(nums=[2, 3, 5, 7]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"Return a list containing only the unique numbers from the given list.\"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n\ndef g(nums=[1, 2, 2, 3, 3, 4, 5, 5]):\n    return nums\n\nassert f(g()) == [1, 2, 3, 4, 5]\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 394, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"Return a list containing only the unique numbers from the given list.\"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums", "solution_func": "def g(nums=[1, 2, 2, 3, 3, 4, 5, 5]):\n    return nums", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains any duplicate elements.\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5, 1, 2, 3, 4]\n\nassert f(g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 394, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains any duplicate elements.\n    \"\"\"\n    return len(nums) != len(set(nums))", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 1, 2, 3, 4]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number,\n    check if there exists a pair of numbers in the list that adds up to the target.\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in nums_set:\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=8):\n    return nums, target\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 395, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number,\n    check if there exists a pair of numbers in the list that adds up to the target.\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in nums_set:\n            return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=8):\n    return nums, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str], pattern: str) -> bool:\n    \"\"\"\n    Given a list of words and a pattern string,\n    check if each word in the list follows the same pattern as the pattern string.\n    \"\"\"\n    pattern_dict = {}\n    for word in words:\n        if len(word) != len(pattern):\n            return False\n        for i in range(len(word)):\n            if pattern[i] not in pattern_dict:\n                pattern_dict[pattern[i]] = word[i]\n            else:\n                if pattern_dict[pattern[i]] != word[i]:\n                    return False\n    return True\n\ndef g(words=[\"abc\", \"def\", \"xyz\"], pattern=\"abb\"):\n    return words, pattern\n\nassert f(*g()) == True\n\n", "emb": null, "idx_generation": 395, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], pattern: str) -> bool:\n    \"\"\"\n    Given a list of words and a pattern string,\n    check if each word in the list follows the same pattern as the pattern string.\n    \"\"\"\n    pattern_dict = {}\n    for word in words:\n        if len(word) != len(pattern):\n            return False\n        for i in range(len(word)):\n            if pattern[i] not in pattern_dict:\n                pattern_dict[pattern[i]] = word[i]\n            else:\n                if pattern_dict[pattern[i]] != word[i]:\n                    return False\n    return True", "solution_func": "def g(words=[\"abc\", \"def\", \"xyz\"], pattern=\"abb\"):\n    return words, pattern", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target number,\n    check if the target number exists in the matrix.\n    \"\"\"\n    if not matrix:\n        return False\n\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    left = 0\n    right = rows * cols - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        row = mid // cols\n        col = mid % cols\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=5):\n    return matrix, target\n\nassert f(*g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 395, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target number,\n    check if the target number exists in the matrix.\n    \"\"\"\n    if not matrix:\n        return False\n\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    left = 0\n    right = rows * cols - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        row = mid // cols\n        col = mid % cols\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=5):\n    return matrix, target", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find all the indices where the target value occurs in the given list.\n    Return a list of indices.\n    \"\"\"\n    indices = []\n    for i in range(len(arr)):\n        if arr[i] == target:\n            indices.append(i)\n    return indices\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 5):\n    return arr, target\n\nassert f(*g()) == [4]\n\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 395, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find all the indices where the target value occurs in the given list.\n    Return a list of indices.\n    \"\"\"\n    indices = []\n    for i in range(len(arr)):\n        if arr[i] == target:\n            indices.append(i)\n    return indices", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 5):\n    return arr, target", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[str], target: str) -> bool:\n    \"\"\"\n    Check if the target string is a subsequence of the given list of strings.\n    Return True if it is, else False.\n    \"\"\"\n    for s in lst:\n        if target in s:\n            return True\n    return False\n\ndef g(lst: List[str] = ['apple', 'banana', 'cherry'], target: str = 'ban'):\n    return lst, target\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 395, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(lst: List[str], target: str) -> bool:\n    \"\"\"\n    Check if the target string is a subsequence of the given list of strings.\n    Return True if it is, else False.\n    \"\"\"\n    for s in lst:\n        if target in s:\n            return True\n    return False", "solution_func": "def g(lst: List[str] = ['apple', 'banana', 'cherry'], target: str = 'ban'):\n    return lst, target", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Rearrange the elements of the given list in a way such that all the even elements come before the odd elements.\n    Return the rearranged list.\n    \"\"\"\n    return [x for x in arr if x % 2 == 0] + [x for x in arr if x % 2 != 0]\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr\n\nassert f(*g()) == [2, 4, 6, 8, 10, 1, 3, 5, 7, 9]\n\n", "emb": null, "idx_generation": 395, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Rearrange the elements of the given list in a way such that all the even elements come before the odd elements.\n    Return the rearranged list.\n    \"\"\"\n    return [x for x in arr if x % 2 == 0] + [x for x in arr if x % 2 != 0]", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a pair of integers in the given list such that their absolute difference is divisible by 7.\n\n    Example:\n    arr = [3, 10, 5, 8, 12, 19]\n\n    The pair (10, 19) satisfies the condition since |10 - 19| = 9 which is divisible by 7.\n\n    Therefore, the output will be True.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) % 7 == 0:\n                return True\n    return False\n\ndef g():\n    \"\"\"\n    This solution returns a list of consecutive odd numbers starting from 1 up to a given limit.\n\n    The default limit is 25.\n\n    Example:\n    g() => [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]\n    \"\"\"\n    return list(range(1, 26, 2))\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 395, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a pair of integers in the given list such that their absolute difference is divisible by 7.\n\n    Example:\n    arr = [3, 10, 5, 8, 12, 19]\n\n    The pair (10, 19) satisfies the condition since |10 - 19| = 9 which is divisible by 7.\n\n    Therefore, the output will be True.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) % 7 == 0:\n                return True\n    return False", "solution_func": "def g():\n    \"\"\"\n    This solution returns a list of consecutive odd numbers starting from 1 up to a given limit.\n\n    The default limit is 25.\n\n    Example:\n    g() => [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]\n    \"\"\"\n    return list(range(1, 26, 2))", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers 'nums' and an integer 'k', check if it is possible to select 'k' elements from 'nums' such that their sum is divisible by k.\n\n    Example:\n    nums = [2, 5, 10, 12, 15, 20]\n    k = 3\n\n    The triple (2, 10, 20) satisfies the condition since 2 + 10 + 20 = 32 which is divisible by 3.\n\n    Therefore, the output will be True.\n    \"\"\"\n    def subset_sum(arr, n, sum):\n        if sum == 0:\n            return True\n        if n == 0 and sum != 0:\n            return False\n        if arr[n-1] > sum:\n            return subset_sum(arr, n-1, sum)\n        return subset_sum(arr, n-1, sum) or subset_sum(arr, n-1, sum-arr[n-1])\n\n    if sum(nums) % k != 0:\n        return False\n    return subset_sum(nums, len(nums), sum(nums) // k)\n\ndef g(nums):\n    \"\"\"\n    This solution returns the input list with all negative numbers removed.\n\n    Example:\n    g([-3, 5, -10, 8, -12, 15])\n    The output will be [5, 8, 15]\n    \"\"\"\n    return [num for num in nums if num >= 0]\n\nassert f(g([-3, 5, -10, 8, -12, 15]), 3)\n", "emb": null, "idx_generation": 395, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers 'nums' and an integer 'k', check if it is possible to select 'k' elements from 'nums' such that their sum is divisible by k.\n\n    Example:\n    nums = [2, 5, 10, 12, 15, 20]\n    k = 3\n\n    The triple (2, 10, 20) satisfies the condition since 2 + 10 + 20 = 32 which is divisible by 3.\n\n    Therefore, the output will be True.\n    \"\"\"\n    def subset_sum(arr, n, sum):\n        if sum == 0:\n            return True\n        if n == 0 and sum != 0:\n            return False\n        if arr[n-1] > sum:\n            return subset_sum(arr, n-1, sum)\n        return subset_sum(arr, n-1, sum) or subset_sum(arr, n-1, sum-arr[n-1])\n\n    if sum(nums) % k != 0:\n        return False\n    return subset_sum(nums, len(nums), sum(nums) // k)", "solution_func": "def g(nums):\n    \"\"\"\n    This solution returns the input list with all negative numbers removed.\n\n    Example:\n    g([-3, 5, -10, 8, -12, 15])\n    The output will be [5, 8, 15]\n    \"\"\"\n    return [num for num in nums if num >= 0]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers 'nums', check if there exists a subsequence of 'nums' such that the sum of its elements is divisible by 10.\n\n    Example:\n    nums = [2, 4, 6, 8, 10]\n\n    The subsequence (2, 6, 8) satisfies the condition since 2 + 6 + 8 = 16 which is divisible by 10.\n\n    Therefore, the output will be True.\n    \"\"\"\n    def subset_sum(arr, n, sum):\n        if sum == 0:\n            return True\n        if n == 0 and sum != 0:\n            return False\n        if arr[n-1] > sum:\n            return subset_sum(arr, n-1, sum)\n        return subset_sum(arr, n-1, sum) or subset_sum(arr, n-1, sum-arr[n-1])\n\n    return subset_sum(nums, len(nums), sum(nums) // 10)\n\ndef g(nums):\n    \"\"\"\n    This solution returns the input list with all even numbers removed.\n\n    Example:\n    g([1, 2, 3, 4, 5, 6])\n    The output will be [1, 3, 5]\n    \"\"\"\n    return [num for num in nums if num % 2 != 0]\n\nassert f(g([1, 2, 3, 4, 5, 6]))\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 395, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers 'nums', check if there exists a subsequence of 'nums' such that the sum of its elements is divisible by 10.\n\n    Example:\n    nums = [2, 4, 6, 8, 10]\n\n    The subsequence (2, 6, 8) satisfies the condition since 2 + 6 + 8 = 16 which is divisible by 10.\n\n    Therefore, the output will be True.\n    \"\"\"\n    def subset_sum(arr, n, sum):\n        if sum == 0:\n            return True\n        if n == 0 and sum != 0:\n            return False\n        if arr[n-1] > sum:\n            return subset_sum(arr, n-1, sum)\n        return subset_sum(arr, n-1, sum) or subset_sum(arr, n-1, sum-arr[n-1])\n\n    return subset_sum(nums, len(nums), sum(nums) // 10)", "solution_func": "def g(nums):\n    \"\"\"\n    This solution returns the input list with all even numbers removed.\n\n    Example:\n    g([1, 2, 3, 4, 5, 6])\n    The output will be [1, 3, 5]\n    \"\"\"\n    return [num for num in nums if num % 2 != 0]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subsequence of the list whose sum is greater than the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return any(dp[n][j] for j in range(target + 1) if j > target)\n\ndef g(nums=[2, 4, 6, 8], target=10):\n    return nums, target\n\nassert f(*g()) == False\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 395, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subsequence of the list whose sum is greater than the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return any(dp[n][j] for j in range(target + 1) if j > target)", "solution_func": "def g(nums=[2, 4, 6, 8], target=10):\n    return nums, target", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target number, return the index of the first occurrence of the target number in the list.\n    If the target number is not found, return -1.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    target = 3\n\n    Sample output:\n    2\n\n    Explanation: The target number 3 is found at index 2 in the list.\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return i\n    return -1\n\ndef g(nums=[1, 2, 3, 4, 5], target=3):\n    return nums, target\n\nassert f(*g()) == 2\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 396, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target number, return the index of the first occurrence of the target number in the list.\n    If the target number is not found, return -1.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    target = 3\n\n    Sample output:\n    2\n\n    Explanation: The target number 3 is found at index 2 in the list.\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return i\n    return -1", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=3):\n    return nums, target", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(word: str, char: str) -> bool:\n    \"\"\"\n    Given a word and a character, return True if the character exists in the word,\n    otherwise return False.\n\n    Sample input:\n    word = \"hello\"\n    char = \"o\"\n\n    Sample output:\n    True\n\n    Explanation: The character 'o' exists in the word \"hello\".\n    \"\"\"\n    return char in word\n\ndef g(word=\"hello\", char=\"o\"):\n    return word, char\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 396, "target_skills": null, "problem_func": "from typing import*\ndef f(word: str, char: str) -> bool:\n    \"\"\"\n    Given a word and a character, return True if the character exists in the word,\n    otherwise return False.\n\n    Sample input:\n    word = \"hello\"\n    char = \"o\"\n\n    Sample output:\n    True\n\n    Explanation: The character 'o' exists in the word \"hello\".\n    \"\"\"\n    return char in word", "solution_func": "def g(word=\"hello\", char=\"o\"):\n    return word, char", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with all the duplicate elements removed.\n\n    Sample input:\n    nums = [1, 2, 2, 3, 4, 4, 5]\n\n    Sample output:\n    [1, 2, 3, 4, 5]\n\n    Explanation: The resulting list contains only unique elements from the original list.\n    \"\"\"\n    return list(set(nums))\n\ndef g(nums=[1, 2, 2, 3, 4, 4, 5]):\n    return nums\n\nassert f(*g()) == [1, 2, 3, 4, 5]\n", "emb": null, "idx_generation": 396, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with all the duplicate elements removed.\n\n    Sample input:\n    nums = [1, 2, 2, 3, 4, 4, 5]\n\n    Sample output:\n    [1, 2, 3, 4, 5]\n\n    Explanation: The resulting list contains only unique elements from the original list.\n    \"\"\"\n    return list(set(nums))", "solution_func": "def g(nums=[1, 2, 2, 3, 4, 4, 5]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a pair of integers in the given list such that their absolute difference is divisible by 3.\n\n    Example:\n    arr = [2, 5, 7, 12, 14, 17]\n\n    The pair (5, 17) satisfies the condition since |5 - 17| = 12 which is divisible by 3.\n\n    Therefore, the output will be True.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) % 3 == 0:\n                return True\n    return False\n\ndef g():\n    \"\"\"\n    This solution returns a list of consecutive even numbers starting from 2 up to a given limit.\n\n    The default limit is 20.\n\n    Example:\n    g() => [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n    \"\"\"\n    return list(range(2, 21, 2))\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 396, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a pair of integers in the given list such that their absolute difference is divisible by 3.\n\n    Example:\n    arr = [2, 5, 7, 12, 14, 17]\n\n    The pair (5, 17) satisfies the condition since |5 - 17| = 12 which is divisible by 3.\n\n    Therefore, the output will be True.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) % 3 == 0:\n                return True\n    return False", "solution_func": "def g():\n    \"\"\"\n    This solution returns a list of consecutive even numbers starting from 2 up to a given limit.\n\n    The default limit is 20.\n\n    Example:\n    g() => [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n    \"\"\"\n    return list(range(2, 21, 2))", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a pair of integers in the given list such that their absolute difference is divisible by 5.\n\n    Example:\n    arr = [3, 10, 5, 8, 12, 19]\n\n    The pair (10, 5) satisfies the condition since |10 - 5| = 5 which is divisible by 5.\n\n    Therefore, the output will be True.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) % 5 == 0:\n                return True\n    return False\n\ndef g():\n    \"\"\"\n    This solution returns a list of consecutive numbers starting from 1 up to a given limit.\n\n    The default limit is 15.\n\n    Example:\n    g() => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    \"\"\"\n    return list(range(1, 16))\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 396, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a pair of integers in the given list such that their absolute difference is divisible by 5.\n\n    Example:\n    arr = [3, 10, 5, 8, 12, 19]\n\n    The pair (10, 5) satisfies the condition since |10 - 5| = 5 which is divisible by 5.\n\n    Therefore, the output will be True.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) % 5 == 0:\n                return True\n    return False", "solution_func": "def g():\n    \"\"\"\n    This solution returns a list of consecutive numbers starting from 1 up to a given limit.\n\n    The default limit is 15.\n\n    Example:\n    g() => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    \"\"\"\n    return list(range(1, 16))", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a pair of integers in the given list such that their absolute difference is divisible by 4.\n\n    Example:\n    arr = [6, 10, 3, 8, 12, 19]\n\n    The pair (6, 10) satisfies the condition since |6 - 10| = 4 which is divisible by 4.\n\n    Therefore, the output will be True.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) % 4 == 0:\n                return True\n    return False\n\ndef g():\n    \"\"\"\n    This solution returns a list of consecutive odd numbers starting from 1 up to a given limit.\n\n    The default limit is 10.\n\n    Example:\n    g() => [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n    \"\"\"\n    return list(range(1, 21, 2))\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 396, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a pair of integers in the given list such that their absolute difference is divisible by 4.\n\n    Example:\n    arr = [6, 10, 3, 8, 12, 19]\n\n    The pair (6, 10) satisfies the condition since |6 - 10| = 4 which is divisible by 4.\n\n    Therefore, the output will be True.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) % 4 == 0:\n                return True\n    return False", "solution_func": "def g():\n    \"\"\"\n    This solution returns a list of consecutive odd numbers starting from 1 up to a given limit.\n\n    The default limit is 10.\n\n    Example:\n    g() => [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n    \"\"\"\n    return list(range(1, 21, 2))", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the difference between the maximum and minimum numbers.\n    \"\"\"\n    return max(nums) - min(nums)\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g()) == 9\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 396, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the difference between the maximum and minimum numbers.\n    \"\"\"\n    return max(nums) - min(nums)", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"\n    Check if the given string is an anagram of the target string.\n    \"\"\"\n    return sorted(s) == sorted(target)\n\ndef g(target: str = \"listen\"):\n    return \"silent\"\n\nassert f(g(), \"listen\") == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 396, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"\n    Check if the given string is an anagram of the target string.\n    \"\"\"\n    return sorted(s) == sorted(target)", "solution_func": "def g(target: str = \"listen\"):\n    return \"silent\"", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the even numbers.\n    \"\"\"\n    return [num for num in nums if num % 2 == 0]\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g()) == [2, 4, 6, 8, 10]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 396, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the even numbers.\n    \"\"\"\n    return [num for num in nums if num % 2 == 0]", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substrings=['p', 'a', 'l', 'i', 'n', 'd', 'r', 'o', 'm', 'e']) -> bool:\n    \"\"\"\n    Check if a string is a palindrome and contains all the given substrings\n    \"\"\"\n    return s == s[::-1] and all(sub in s for sub in substrings)\n\ndef g(substrings = ['p', 'a', 'l', 'i', 'n', 'd', 'r', 'o', 'm', 'e']):\n    return \"\".join(substrings + substrings[::-1])\n    \nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 396, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substrings=['p', 'a', 'l', 'i', 'n', 'd', 'r', 'o', 'm', 'e']) -> bool:\n    \"\"\"\n    Check if a string is a palindrome and contains all the given substrings\n    \"\"\"\n    return s == s[::-1] and all(sub in s for sub in substrings)", "solution_func": "def g(substrings = ['p', 'a', 'l', 'i', 'n', 'd', 'r', 'o', 'm', 'e']):\n    return \"\".join(substrings + substrings[::-1])", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target_sum: int) -> bool:\n    \"\"\"\n    Find if there are any two numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of two numbers from the list\n    combinations = list(itertools.combinations(nums, 2))\n\n    # Check if any combination sums up to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False\n\ndef g(target_sum=10):\n    \"\"\"Generate a list of numbers.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), target_sum=10) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 397, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target_sum: int) -> bool:\n    \"\"\"\n    Find if there are any two numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of two numbers from the list\n    combinations = list(itertools.combinations(nums, 2))\n\n    # Check if any combination sums up to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False", "solution_func": "def g(target_sum=10):\n    \"\"\"Generate a list of numbers.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Find if there exists a subsequence of length k in the given list that is in strictly increasing order.\n    \"\"\"\n\n    # Generate all possible subsequences of length k from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any subsequence is in strictly increasing order\n    for combo in combinations:\n        if sorted(combo) == list(combo):\n            return True\n\n    return False\n\ndef g(k=3):\n    \"\"\"Generate a list of numbers.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), k=3) == True\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 397, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Find if there exists a subsequence of length k in the given list that is in strictly increasing order.\n    \"\"\"\n\n    # Generate all possible subsequences of length k from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any subsequence is in strictly increasing order\n    for combo in combinations:\n        if sorted(combo) == list(combo):\n            return True\n\n    return False", "solution_func": "def g(k=3):\n    \"\"\"Generate a list of numbers.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], k: int) -> int:\n    \"\"\"\n    Find the sum of all possible combinations of k numbers from the given list.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Calculate the sum of all combinations\n    total_sum = sum([sum(combo) for combo in combinations])\n\n    return total_sum\n\ndef g(k=2):\n    \"\"\"Generate a list of numbers.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), k=2) == 220\n\n", "emb": null, "idx_generation": 397, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], k: int) -> int:\n    \"\"\"\n    Find the sum of all possible combinations of k numbers from the given list.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Calculate the sum of all combinations\n    total_sum = sum([sum(combo) for combo in combinations])\n\n    return total_sum", "solution_func": "def g(k=2):\n    \"\"\"Generate a list of numbers.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import Tuple\n\ndef f(t1: Tuple[int, int], t2: Tuple[int, int]) -> bool:\n    \"\"\"\n    Given two tuples of integers, check if there is a pair of integers (one from each tuple)\n    such that their product is divisible by 10.\n\n    Sample Input:\n    t1 = (1, 2)\n    t2 = (3, 4)\n\n    Sample Output:\n    False\n    \"\"\"\n    for num1 in t1:\n        for num2 in t2:\n            if (num1 * num2) % 10 == 0:\n                return True\n\n    return False\n\ndef g(t1: Tuple[int, int] = (1, 2), t2: Tuple[int, int] = (3, 4)):\n    return t1, t2\n\nassert f(*g()) == False\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 397, "target_skills": null, "problem_func": "from typing import*\nfrom typing import Tuple\n\ndef f(t1: Tuple[int, int], t2: Tuple[int, int]) -> bool:\n    \"\"\"\n    Given two tuples of integers, check if there is a pair of integers (one from each tuple)\n    such that their product is divisible by 10.\n\n    Sample Input:\n    t1 = (1, 2)\n    t2 = (3, 4)\n\n    Sample Output:\n    False\n    \"\"\"\n    for num1 in t1:\n        for num2 in t2:\n            if (num1 * num2) % 10 == 0:\n                return True\n\n    return False", "solution_func": "def g(t1: Tuple[int, int] = (1, 2), t2: Tuple[int, int] = (3, 4)):\n    return t1, t2", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[str]) -> bool:\n    \"\"\"\n    Given a list of strings, check if there is a string that starts and ends with the same letter.\n\n    Sample Input:\n    arr = ['hello', 'world', 'python', 'wow']\n\n    Sample Output:\n    True\n    \"\"\"\n    for string in arr:\n        if string[0] == string[-1]:\n            return True\n\n    return False\n\ndef g(arr: List[str] = ['hello', 'world', 'python', 'wow']):\n    return arr\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 397, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[str]) -> bool:\n    \"\"\"\n    Given a list of strings, check if there is a string that starts and ends with the same letter.\n\n    Sample Input:\n    arr = ['hello', 'world', 'python', 'wow']\n\n    Sample Output:\n    True\n    \"\"\"\n    for string in arr:\n        if string[0] == string[-1]:\n            return True\n\n    return False", "solution_func": "def g(arr: List[str] = ['hello', 'world', 'python', 'wow']):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import Tuple\n\ndef f(t1: Tuple[str, int], t2: Tuple[str, int]) -> bool:\n    \"\"\"\n    Given two tuples, each containing a string and an integer, check if the sum of the integers\n    in each tuple is the same.\n\n    Sample Input:\n    t1 = ('apple', 5)\n    t2 = ('banana', 3)\n\n    Sample Output:\n    False\n    \"\"\"\n    sum1 = t1[1]\n    sum2 = t2[1]\n    return sum1 == sum2\n\ndef g(t1: Tuple[str, int] = ('apple', 5), t2: Tuple[str, int] = ('banana', 3)):\n    return t1, t2\n\nassert f(*g()) == False\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 397, "target_skills": null, "problem_func": "from typing import*\nfrom typing import Tuple\n\ndef f(t1: Tuple[str, int], t2: Tuple[str, int]) -> bool:\n    \"\"\"\n    Given two tuples, each containing a string and an integer, check if the sum of the integers\n    in each tuple is the same.\n\n    Sample Input:\n    t1 = ('apple', 5)\n    t2 = ('banana', 3)\n\n    Sample Output:\n    False\n    \"\"\"\n    sum1 = t1[1]\n    sum2 = t2[1]\n    return sum1 == sum2", "solution_func": "def g(t1: Tuple[str, int] = ('apple', 5), t2: Tuple[str, int] = ('banana', 3)):\n    return t1, t2", "map_ix": [1, 1, 0, 1, 0, 1, 1, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    \"\"\"\n    This solution returns the input list after sorting it.\n    \"\"\"\n    nums.sort()\n    return nums\n\nassert f(g(), 15) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 397, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    \"\"\"\n    This solution returns the input list after sorting it.\n    \"\"\"\n    nums.sort()\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False\n\ndef g(nums: List[int] = [-1, 1, -2, 2, -3, 3, -4, 4, -5, 5]):\n    \"\"\"\n    This solution returns the input list after sorting it.\n    \"\"\"\n    nums.sort()\n    return nums\n\nassert f(g(), 0) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 397, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False", "solution_func": "def g(nums: List[int] = [-1, 1, -2, 2, -3, 3, -4, 4, -5, 5]):\n    \"\"\"\n    This solution returns the input list after sorting it.\n    \"\"\"\n    nums.sort()\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False\n\ndef g(nums: List[int] = [2, 4, 6, 8, 10]):\n    \"\"\"\n    This solution returns the input list after sorting it.\n    \"\"\"\n    nums.sort()\n    return nums\n\nassert f(g(), 12) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 397, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False", "solution_func": "def g(nums: List[int] = [2, 4, 6, 8, 10]):\n    \"\"\"\n    This solution returns the input list after sorting it.\n    \"\"\"\n    nums.sort()\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport numpy as np\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is symmetric.\n    \"\"\"\n    return np.allclose(matrix, np.transpose(matrix))\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g()) == False\n\n", "emb": null, "idx_generation": 397, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is symmetric.\n    \"\"\"\n    return np.allclose(matrix, np.transpose(matrix))", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers `nums` and an integer `target`, find if there exists a pair of numbers in the list that add up to the target.\n    Return True if such a pair exists, False otherwise.\n\n    Example:\n    nums = [2, 4, 6, 8, 10]\n    target = 14\n    Output: True\n    Explanation: The pair (4, 10) adds up to 14.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [2, 4, 6, 8, 10], target: int = 14):\n    return (nums, target)\n\nassert f(*g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 398, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers `nums` and an integer `target`, find if there exists a pair of numbers in the list that add up to the target.\n    Return True if such a pair exists, False otherwise.\n\n    Example:\n    nums = [2, 4, 6, 8, 10]\n    target = 14\n    Output: True\n    Explanation: The pair (4, 10) adds up to 14.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums: List[int] = [2, 4, 6, 8, 10], target: int = 14):\n    return (nums, target)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of integers is sorted in non-decreasing order.\n    Return True if the list is sorted, False otherwise.\n    \"\"\"\n    return all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))\n\ndef g():\n    \"\"\"\n    Generate a list of integers in non-decreasing order.\n    \"\"\"\n    return [1, 3, 5, 7, 9]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 398, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of integers is sorted in non-decreasing order.\n    Return True if the list is sorted, False otherwise.\n    \"\"\"\n    return all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))", "solution_func": "def g():\n    \"\"\"\n    Generate a list of integers in non-decreasing order.\n    \"\"\"\n    return [1, 3, 5, 7, 9]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers `nums` and an integer `target`, find the number of occurrences of the target in the list.\n    Return the count of occurrences.\n\n    Example:\n    nums = [1, 2, 3, 4, 2, 2, 5]\n    target = 2\n    Output: 3\n    Explanation: The number 2 occurs 3 times in the list.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num == target:\n            count += 1\n    return count\n\ndef g(nums: List[int] = [1, 2, 3, 4, 2, 2, 5], target: int = 2):\n    return (nums, target)\n\nassert f(*g()) == 3\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 398, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers `nums` and an integer `target`, find the number of occurrences of the target in the list.\n    Return the count of occurrences.\n\n    Example:\n    nums = [1, 2, 3, 4, 2, 2, 5]\n    target = 2\n    Output: 3\n    Explanation: The number 2 occurs 3 times in the list.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num == target:\n            count += 1\n    return count", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 2, 2, 5], target: int = 2):\n    return (nums, target)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int = 2) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a pair of numbers whose sum is divisible by k.\n\n    Example:\n    nums = [1, 2, 3, 4, 5], k = 3\n    Output: True\n    Explanation: The pair (2, 4) has a sum of 6 which is divisible by 3.\n    \"\"\"\n    pairs = set()\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if (nums[i] + nums[j]) % k == 0:\n                return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], k: int = 3):\n    return nums, k\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 398, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int = 2) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a pair of numbers whose sum is divisible by k.\n\n    Example:\n    nums = [1, 2, 3, 4, 5], k = 3\n    Output: True\n    Explanation: The pair (2, 4) has a sum of 6 which is divisible by 3.\n    \"\"\"\n    pairs = set()\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if (nums[i] + nums[j]) % k == 0:\n                return True\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], k: int = 3):\n    return nums, k", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str) -> str:\n    \"\"\"\n    Given a string, reverse the order of the words in the string.\n\n    Example:\n    string = \"Hello World\"\n    Output: \"World Hello\"\n    \"\"\"\n    words = string.split()\n    reversed_string = \" \".join(words[::-1])\n    return reversed_string\n\ndef g(string: str = \"Hello World\"):\n    return string\n\nassert f(g()) == \"World Hello\"\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 398, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str) -> str:\n    \"\"\"\n    Given a string, reverse the order of the words in the string.\n\n    Example:\n    string = \"Hello World\"\n    Output: \"World Hello\"\n    \"\"\"\n    words = string.split()\n    reversed_string = \" \".join(words[::-1])\n    return reversed_string", "solution_func": "def g(string: str = \"Hello World\"):\n    return string", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list where each element is the square of the original element.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    Output: [1, 4, 9, 16, 25]\n    \"\"\"\n    squared_nums = [num**2 for num in nums]\n    return squared_nums\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == [1, 4, 9, 16, 25]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 398, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list where each element is the square of the original element.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    Output: [1, 4, 9, 16, 25]\n    \"\"\"\n    squared_nums = [num**2 for num in nums]\n    return squared_nums", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains exactly three consecutive numbers in increasing order.\n    \"\"\"\n    for i in range(len(nums) - 2):\n        if nums[i] == nums[i+1] - 1 == nums[i+2] - 2:\n            return True\n    return False\n\ndef g():\n    return [4, 5, 6, 1, 2, 3, 7, 8, 9]\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 398, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains exactly three consecutive numbers in increasing order.\n    \"\"\"\n    for i in range(len(nums) - 2):\n        if nums[i] == nums[i+1] - 1 == nums[i+2] - 2:\n            return True\n    return False", "solution_func": "def g():\n    return [4, 5, 6, 1, 2, 3, 7, 8, 9]", "map_ix": [1, 1, 0, 0, 0, 0, 1, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a subsequence where the sum of the elements is equal to zero.\n    \"\"\"\n    prefix_sum = 0\n    sum_set = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum in sum_set or prefix_sum == 0:\n            return True\n        sum_set.add(prefix_sum)\n    return False\n\ndef g():\n    return [2, 3, -5, 1, -7, 4, 6]\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 398, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a subsequence where the sum of the elements is equal to zero.\n    \"\"\"\n    prefix_sum = 0\n    sum_set = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum in sum_set or prefix_sum == 0:\n            return True\n        sum_set.add(prefix_sum)\n    return False", "solution_func": "def g():\n    return [2, 3, -5, 1, -7, 4, 6]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 4, 3, 2, 1]\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 398, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]", "solution_func": "def g():\n    return [1, 2, 3, 4, 3, 2, 1]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is diagonal.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 398, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is diagonal.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True", "solution_func": "def g():\n    return [[1, 0, 0], [0, 2, 0], [0, 0, 3]]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a pair of numbers whose sum is equal to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        if target - num in nums_set:\n            return True\n    return False\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 399, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a pair of numbers whose sum is equal to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        if target - num in nums_set:\n            return True\n    return False", "solution_func": "def g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find if there exists a pair of numbers whose difference is equal to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        if num - target in nums_set:\n            return True\n    return False\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums, 3\n\nassert f(*g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 399, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find if there exists a pair of numbers whose difference is equal to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        if num - target in nums_set:\n            return True\n    return False", "solution_func": "def g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums, 3", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a pair of numbers whose product is less than the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] < target:\n                return True\n    return False\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 399, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a pair of numbers whose product is less than the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] < target:\n                return True\n    return False", "solution_func": "def g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are exactly 'count' numbers that form a valid arithmetic progression with a common difference of 'target'.\n\n    Sample Input:\n    nums = [1, 3, 5, 7, 9]\n    target = 2\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(nums[i] + target == nums[i+1] and nums[i+1] + target == nums[i+2] for i in range(len(nums)-2))\n\ndef g(nums: List[int] = [1, 3, 5, 7, 9], target: int = 2, count: int = 3):\n    return (nums, target, count)\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 399, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are exactly 'count' numbers that form a valid arithmetic progression with a common difference of 'target'.\n\n    Sample Input:\n    nums = [1, 3, 5, 7, 9]\n    target = 2\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(nums[i] + target == nums[i+1] and nums[i+1] + target == nums[i+2] for i in range(len(nums)-2))", "solution_func": "def g(nums: List[int] = [1, 3, 5, 7, 9], target: int = 2, count: int = 3):\n    return (nums, target, count)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are exactly 'count' numbers that form a valid arithmetic progression with a common difference of 'target'.\n\n    Sample Input:\n    nums = [1, 3, 5, 7, 9]\n    target = 2\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(nums[i] + target == nums[i+1] and nums[i+1] + target == nums[i+2] for i in range(len(nums)-2))\n\ndef g(nums: List[int] = [1, 4, 7, 10, 13], target: int = 3, count: int = 3):\n    return (nums, target, count)\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 399, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are exactly 'count' numbers that form a valid arithmetic progression with a common difference of 'target'.\n\n    Sample Input:\n    nums = [1, 3, 5, 7, 9]\n    target = 2\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(nums[i] + target == nums[i+1] and nums[i+1] + target == nums[i+2] for i in range(len(nums)-2))", "solution_func": "def g(nums: List[int] = [1, 4, 7, 10, 13], target: int = 3, count: int = 3):\n    return (nums, target, count)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are exactly 'count' numbers that form a valid arithmetic progression with a common difference of 'target'.\n\n    Sample Input:\n    nums = [1, 3, 5, 7, 9]\n    target = 2\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(nums[i] + target == nums[i+1] and nums[i+1] + target == nums[i+2] for i in range(len(nums)-2))\n\ndef g(nums: List[int] = [0, 2, 4, 6, 8], target: int = 2, count: int = 3):\n    return (nums, target, count)\n\nassert f(*g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 399, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are exactly 'count' numbers that form a valid arithmetic progression with a common difference of 'target'.\n\n    Sample Input:\n    nums = [1, 3, 5, 7, 9]\n    target = 2\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(nums[i] + target == nums[i+1] and nums[i+1] + target == nums[i+2] for i in range(len(nums)-2))", "solution_func": "def g(nums: List[int] = [0, 2, 4, 6, 8], target: int = 2, count: int = 3):\n    return (nums, target, count)", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size\n    \"\"\"\n    return [[0 if j > i else 1 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 399, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size\n    \"\"\"\n    return [[0 if j > i else 1 for j in range(size)] for i in range(size)]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a symmetric matrix of the given size\n    \"\"\"\n    return [[1 if j == i else 0 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 399, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a symmetric matrix of the given size\n    \"\"\"\n    return [[1 if j == i else 0 for j in range(size)] for i in range(size)]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Compute the sum of all the elements in a given matrix.\n    \"\"\"\n    return sum(sum(row) for row in matrix)\n\ndef g():\n    \"\"\"\n    Generate a matrix of size 3x3 with elements from 1 to 9.\n    \"\"\"\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == 45\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 399, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Compute the sum of all the elements in a given matrix.\n    \"\"\"\n    return sum(sum(row) for row in matrix)", "solution_func": "def g():\n    \"\"\"\n    Generate a matrix of size 3x3 with elements from 1 to 9.\n    \"\"\"\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(numbers: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of numbers and a target number, return a list of pairs of numbers from the list that add up to the target number.\n\n    Sample input:\n    numbers = [1, 2, 3, 4, 5]\n    target = 6\n\n    Sample output:\n    [(1, 5), (2, 4)]\n\n    Explanation: The pairs (1, 5) and (2, 4) add up to the target number 6.\n    \"\"\"\n    pairs = []\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                pairs.append((numbers[i], numbers[j]))\n    return pairs\n\ndef g(numbers=[1, 2, 3, 4, 5], target=6):\n    return numbers, target\n\nassert f(*g()) == [(1, 5), (2, 4)]\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 399, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of numbers and a target number, return a list of pairs of numbers from the list that add up to the target number.\n\n    Sample input:\n    numbers = [1, 2, 3, 4, 5]\n    target = 6\n\n    Sample output:\n    [(1, 5), (2, 4)]\n\n    Explanation: The pairs (1, 5) and (2, 4) add up to the target number 6.\n    \"\"\"\n    pairs = []\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                pairs.append((numbers[i], numbers[j]))\n    return pairs", "solution_func": "def g(numbers=[1, 2, 3, 4, 5], target=6):\n    return numbers, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}]