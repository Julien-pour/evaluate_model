[{"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray) -> bool:\n    \"\"\"\n    Given a 2D numpy array, check if all rows are in strictly increasing order.\n\n    Example:\n    arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    output: True\n    \"\"\"\n    return all(all(arr[i, j] < arr[i, j+1] for j in range(arr.shape[1]-1)) for i in range(arr.shape[0]))\n\ndef g() -> np.ndarray:\n    arr = np.random.randint(1, 10, size=(3, 3))\n    return arr\n\nassert f(g())\n", "emb": null, "idx_generation": 400, "target_skills": null, "problem_func": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(arr: np.ndarray) -> bool:\n    \"\"\"\n    Given a 2D numpy array, check if all rows are in strictly increasing order.\n\n    Example:\n    arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    output: True\n    \"\"\"\n    return all(all(arr[i, j] < arr[i, j+1] for j in range(arr.shape[1]-1)) for i in range(arr.shape[0]))", "solution_func": "def g() -> np.ndarray:\n    arr = np.random.randint(1, 10, size=(3, 3))\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it is a palindrome.\n\n    Example:\n    nums = [1, 2, 3, 2, 1]\n    output: True\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g() -> List[int]:\n    nums = [1, 2, 3, 2, 1]\n    return nums\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 400, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it is a palindrome.\n\n    Example:\n    nums = [1, 2, 3, 2, 1]\n    output: True\n    \"\"\"\n    return nums == nums[::-1]", "solution_func": "def g() -> List[int]:\n    nums = [1, 2, 3, 2, 1]\n    return nums", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it contains any duplicate elements.\n\n    Example:\n    nums = [1, 2, 3, 2, 4]\n    output: True\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g() -> List[int]:\n    nums = [1, 2, 3, 2, 4]\n    return nums\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 400, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it contains any duplicate elements.\n\n    Example:\n    nums = [1, 2, 3, 2, 4]\n    output: True\n    \"\"\"\n    return len(nums) != len(set(nums))", "solution_func": "def g() -> List[int]:\n    nums = [1, 2, 3, 2, 4]\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the sum of all the even numbers in the list.\n\n    Sample Input:\n    [1, 2, 3, 4, 5]\n\n    Sample Output:\n    6\n    \"\"\"\n    return sum([num for num in nums if num % 2 == 0])\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == 6\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 400, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the sum of all the even numbers in the list.\n\n    Sample Input:\n    [1, 2, 3, 4, 5]\n\n    Sample Output:\n    6\n    \"\"\"\n    return sum([num for num in nums if num % 2 == 0])", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str) -> str:\n    \"\"\"\n    Given a string, reverse the order of the words in the string.\n\n    Sample Input:\n    \"Hello World\"\n\n    Sample Output:\n    \"World Hello\"\n    \"\"\"\n    words = string.split()\n    return ' '.join(reversed(words))\n\ndef g():\n    return \"Hello World\"\n\nassert f(g()) == \"World Hello\"\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 400, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str) -> str:\n    \"\"\"\n    Given a string, reverse the order of the words in the string.\n\n    Sample Input:\n    \"Hello World\"\n\n    Sample Output:\n    \"World Hello\"\n    \"\"\"\n    words = string.split()\n    return ' '.join(reversed(words))", "solution_func": "def g():\n    return \"Hello World\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list that contains only the unique elements from the original list.\n\n    Sample Input:\n    [1, 1, 2, 2, 3, 4, 5, 5]\n\n    Sample Output:\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    return list(set(nums))\n\ndef g():\n    return [1, 1, 2, 2, 3, 4, 5, 5]\n\nassert f(g()) == [1, 2, 3, 4, 5]\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 400, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list that contains only the unique elements from the original list.\n\n    Sample Input:\n    [1, 1, 2, 2, 3, 4, 5, 5]\n\n    Sample Output:\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    return list(set(nums))", "solution_func": "def g():\n    return [1, 1, 2, 2, 3, 4, 5, 5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum element in the list.\n\n    Sample Input:\n    [1, 5, 2, 9, 3]\n\n    Sample Output:\n    9\n    \"\"\"\n    return max(nums)\n\ndef g(nums=[1, 5, 2, 9, 3]):\n    return nums\n\nassert f(g()) == 9\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 400, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum element in the list.\n\n    Sample Input:\n    [1, 5, 2, 9, 3]\n\n    Sample Output:\n    9\n    \"\"\"\n    return max(nums)", "solution_func": "def g(nums=[1, 5, 2, 9, 3]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the sum of all even numbers in the list.\n\n    Sample Input:\n    [1, 5, 2, 9, 3, 4]\n\n    Sample Output:\n    6\n\n    Explanation: The even numbers in the list are [2, 4] and their sum is 6.\n    \"\"\"\n    return sum(num for num in nums if num % 2 == 0)\n\ndef g(nums=[1, 5, 2, 9, 3, 4]):\n    return nums\n\nassert f(g()) == 6\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 400, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the sum of all even numbers in the list.\n\n    Sample Input:\n    [1, 5, 2, 9, 3, 4]\n\n    Sample Output:\n    6\n\n    Explanation: The even numbers in the list are [2, 4] and their sum is 6.\n    \"\"\"\n    return sum(num for num in nums if num % 2 == 0)", "solution_func": "def g(nums=[1, 5, 2, 9, 3, 4]):\n    return nums", "map_ix": [1, 1, 0, 1, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the unique elements.\n\n    Sample Input:\n    [1, 2, 3, 2, 4, 1]\n\n    Sample Output:\n    [1, 2, 3, 4]\n    \"\"\"\n    return list(set(nums))\n\ndef g(nums=[1, 2, 3, 2, 4, 1]):\n    return nums\n\nassert f(g()) == [1, 2, 3, 4]\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 400, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the unique elements.\n\n    Sample Input:\n    [1, 2, 3, 2, 4, 1]\n\n    Sample Output:\n    [1, 2, 3, 4]\n    \"\"\"\n    return list(set(nums))", "solution_func": "def g(nums=[1, 2, 3, 2, 4, 1]):\n    return nums", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the target integer exists in the given list of integers.\n\n    Sample Input:\n    [5, 3, 1, 4, 2], 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return target in nums\n\ndef g(nums: List[int] = [5, 3, 1, 4, 2], target: int = 3):\n    return (nums, target)\n\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 400, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the target integer exists in the given list of integers.\n\n    Sample Input:\n    [5, 3, 1, 4, 2], 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return target in nums", "solution_func": "def g(nums: List[int] = [5, 3, 1, 4, 2], target: int = 3):\n    return (nums, target)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subsequence of the list whose sum is greater than or equal to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(nums=[1, 3, 5, 7], target=8):\n    return nums, target\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 401, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subsequence of the list whose sum is greater than or equal to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]", "solution_func": "def g(nums=[1, 3, 5, 7], target=8):\n    return nums, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    n = len(s)\n    for i in range(n // 2):\n        if s[i] != s[n - i - 1]:\n            return False\n    return True\n\ndef g(s=\"madam\"):\n    return s\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 401, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    n = len(s)\n    for i in range(n // 2):\n        if s[i] != s[n - i - 1]:\n            return False\n    return True", "solution_func": "def g(s=\"madam\"):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int) -> int:\n    \"\"\"Find the nth Fibonacci number.\"\"\"\n    if n <= 0:\n        return None\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[i - 1] + fib[i - 2])\n    return fib[n - 1]\n\ndef g(n=6):\n    return n\n\nassert f(g()) == 5\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 401, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int) -> int:\n    \"\"\"Find the nth Fibonacci number.\"\"\"\n    if n <= 0:\n        return None\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[i - 1] + fib[i - 2])\n    return fib[n - 1]", "solution_func": "def g(n=6):\n    return n", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 401, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n\n", "emb": [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 401, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [1, 1, 1, 1, 0, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n\n", "emb": [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 401, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [1, 1, 1, 1, 0, 1, 1, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(string: str, substring: str) -> bool:\n    \"\"\"\n    Check if the given string contains a substring.\n    \"\"\"\n    return substring in string\n\ndef g(string: str = \"Hello, World!\", substring: str = \"World\"):\n    return (string, substring)\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 401, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(string: str, substring: str) -> bool:\n    \"\"\"\n    Check if the given string contains a substring.\n    \"\"\"\n    return substring in string", "solution_func": "def g(string: str = \"Hello, World!\", substring: str = \"World\"):\n    return (string, substring)", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the maximum number in the given list.\n    \"\"\"\n    return max(nums)\n\ndef g(nums: List[int] = [1, 4, 2, 0, 5, 3]):\n    return nums\n\nassert f(g()) == 5\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 401, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the maximum number in the given list.\n    \"\"\"\n    return max(nums)", "solution_func": "def g(nums: List[int] = [1, 4, 2, 0, 5, 3]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a symmetric matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a symmetric matrix of the given size\n    \"\"\"\n    return [[1 if j >= i else 0 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 401, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a symmetric matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a symmetric matrix of the given size\n    \"\"\"\n    return [[1 if j >= i else 0 for j in range(size)] for i in range(size)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of integers contains any prime numbers.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return any(is_prime(num) for num in nums)\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 401, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of integers contains any prime numbers.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return any(is_prime(num) for num in nums)", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a square matrix.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    rows = len(arr)\n    for row in arr:\n        if len(row) != rows:\n            return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0], "idx_generation": 402, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a square matrix.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    rows = len(arr)\n    for row in arr:\n        if len(row) != rows:\n            return False\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [1, 0, 0, 0, 0, 1, 1, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return the sum of each row in the matrix.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    [6, 15, 24]\n    \"\"\"\n    row_sums = []\n    for row in arr:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n    return row_sums\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == [6, 15, 24]\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 402, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return the sum of each row in the matrix.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    [6, 15, 24]\n    \"\"\"\n    row_sums = []\n    for row in arr:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n    return row_sums", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, return the maximum value in the matrix.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    9\n    \"\"\"\n    max_value = float('-inf')\n    for row in arr:\n        for num in row:\n            if num > max_value:\n                max_value = num\n    return max_value\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == 9\n\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 402, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, return the maximum value in the matrix.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    9\n    \"\"\"\n    max_value = float('-inf')\n    for row in arr:\n        for num in row:\n            if num > max_value:\n                max_value = num\n    return max_value", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the even numbers in the original list.\n    \"\"\"\n    return [num for num in nums if num % 2 == 0]\n\ndef g():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return (nums,)\n\nassert f(*g()) == [2, 4, 6, 8, 10]\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 402, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the even numbers in the original list.\n    \"\"\"\n    return [num for num in nums if num % 2 == 0]", "solution_func": "def g():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return (nums,)", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import *\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, check if it is a palindrome.\n\n    Sample input:\n    \"racecar\"\n\n    Sample output:\n    True\n    \"\"\"\n    return s == s[::-1]\n\ndef g():\n    s = \"racecar\"\n    return (s,)\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 402, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, check if it is a palindrome.\n\n    Sample input:\n    \"racecar\"\n\n    Sample output:\n    True\n    \"\"\"\n    return s == s[::-1]", "solution_func": "def g():\n    s = \"racecar\"\n    return (s,)", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the prime numbers in the original list.\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return [num for num in nums if is_prime(num)]\n\ndef g():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return (nums,)\n\nassert f(*g()) == [2, 3, 5, 7]\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 402, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the prime numbers in the original list.\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return [num for num in nums if is_prime(num)]", "solution_func": "def g():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return (nums,)", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list nums that add up to the target.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample output:\n    True\n\n    Explanation: The numbers 4 and 5 add up to 9 and they are present in the list.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g()) == True\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 402, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list nums that add up to the target.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample output:\n    True\n\n    Explanation: The numbers 4 and 5 add up to 9 and they are present in the list.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is symmetric.\n\n    Sample input:\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n\n    Sample output:\n    True\n\n    Explanation: The matrix is symmetric along the main diagonal.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 402, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is symmetric.\n\n    Sample input:\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n\n    Sample output:\n    True\n\n    Explanation: The matrix is symmetric along the main diagonal.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if a given list of numbers contains any duplicates.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5, 1]\n\n    Sample output:\n    True\n\n    Explanation: The number 1 appears twice in the list.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 1]):\n    return nums\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 402, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if a given list of numbers contains any duplicates.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5, 1]\n\n    Sample output:\n    True\n\n    Explanation: The number 1 appears twice in the list.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 1]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a list of lists, check if each list is a palindrome.\n    Return True if all lists are palindromes, else return False.\n    \"\"\"\n    for sublist in arr:\n        if sublist != sublist[::-1]:\n            return False\n    return True\n\ndef g():\n    \"\"\"\n    Generate a list of lists where each sublist is a palindrome.\n    \"\"\"\n    return [[1, 2, 1], [3, 4, 4, 3], [5, 6, 7, 7, 6, 5]]\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 402, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a list of lists, check if each list is a palindrome.\n    Return True if all lists are palindromes, else return False.\n    \"\"\"\n    for sublist in arr:\n        if sublist != sublist[::-1]:\n            return False\n    return True", "solution_func": "def g():\n    \"\"\"\n    Generate a list of lists where each sublist is a palindrome.\n    \"\"\"\n    return [[1, 2, 1], [3, 4, 4, 3], [5, 6, 7, 7, 6, 5]]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix, find the sum of all the elements in the matrix.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    output: 45\n    \"\"\"\n    return sum(sum(row) for row in matrix)\n\ndef g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\nassert f(g()) == 45\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 403, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix, find the sum of all the elements in the matrix.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    output: 45\n    \"\"\"\n    return sum(sum(row) for row in matrix)", "solution_func": "def g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is symmetric.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [2, 4, 5],\n        [3, 5, 6]\n    ]\n    output: True\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(i+1, len(matrix)):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [\n        [1, 2, 3],\n        [2, 4, 5],\n        [3, 5, 6]\n    ]\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 403, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is symmetric.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [2, 4, 5],\n        [3, 5, 6]\n    ]\n    output: True\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(i+1, len(matrix)):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g():\n    return [\n        [1, 2, 3],\n        [2, 4, 5],\n        [3, 5, 6]\n    ]", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix, return a list containing the sum of each row.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    output: [6, 15, 24]\n    \"\"\"\n    return [sum(row) for row in matrix]\n\ndef g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\nassert f(g()) == [6, 15, 24]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 403, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix, return a list containing the sum of each row.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    output: [6, 15, 24]\n    \"\"\"\n    return [sum(row) for row in matrix]", "solution_func": "def g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import *\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the sum of the maximum odd number and the minimum even number in the list.\n\n    Example:\n    arr = [1, 2, 3, 4, 5, 6]\n\n    Output:\n    7\n\n    Explanation: The maximum odd number is 5 and the minimum even number is 2. Their sum is 7.\n    \"\"\"\n    max_odd = float('-inf')\n    min_even = float('inf')\n    \n    for num in arr:\n        if num % 2 == 0:\n            min_even = min(min_even, num)\n        else:\n            max_odd = max(max_odd, num)\n    \n    return max_odd + min_even\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g()) == 7\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 403, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the sum of the maximum odd number and the minimum even number in the list.\n\n    Example:\n    arr = [1, 2, 3, 4, 5, 6]\n\n    Output:\n    7\n\n    Explanation: The maximum odd number is 5 and the minimum even number is 2. Their sum is 7.\n    \"\"\"\n    max_odd = float('-inf')\n    min_even = float('inf')\n    \n    for num in arr:\n        if num % 2 == 0:\n            min_even = min(min_even, num)\n        else:\n            max_odd = max(max_odd, num)\n    \n    return max_odd + min_even", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import *\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains consecutive numbers in increasing order.\n\n    Example:\n    arr = [1, 2, 3, 4, 6]\n\n    Output:\n    False\n\n    Explanation: The list does not contain consecutive numbers in increasing order.\n    \"\"\"\n    for i in range(len(arr) - 1):\n        if arr[i] + 1 != arr[i+1]:\n            return False\n    \n    return True\n\ndef g():\n    return [1, 2, 3, 4, 6]\n\nassert f(g()) == False\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 403, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains consecutive numbers in increasing order.\n\n    Example:\n    arr = [1, 2, 3, 4, 6]\n\n    Output:\n    False\n\n    Explanation: The list does not contain consecutive numbers in increasing order.\n    \"\"\"\n    for i in range(len(arr) - 1):\n        if arr[i] + 1 != arr[i+1]:\n            return False\n    \n    return True", "solution_func": "def g():\n    return [1, 2, 3, 4, 6]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import *\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, find the sum of the elements in the diagonal of the matrix.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Output:\n    15\n\n    Explanation: The diagonal elements are 1, 5, and 9. Their sum is 15.\n    \"\"\"\n    n = len(matrix)\n    diagonal_sum = 0\n    \n    for i in range(n):\n        diagonal_sum += matrix[i][i]\n    \n    return diagonal_sum\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == 15\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 403, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, find the sum of the elements in the diagonal of the matrix.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Output:\n    15\n\n    Explanation: The diagonal elements are 1, 5, and 9. Their sum is 15.\n    \"\"\"\n    n = len(matrix)\n    diagonal_sum = 0\n    \n    for i in range(n):\n        diagonal_sum += matrix[i][i]\n    \n    return diagonal_sum", "solution_func": "def g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11], target=2310) -> bool:\n    \"\"\"Check if the target number is divisible by all the numbers in the list.\"\"\"\n    return target % n == 0 and all((target % i == 0 for i in nums))\n\ndef g(nums=[2, 3, 5, 7, 11], target=2310):\n    ans = target\n    for i in nums:\n        while ans % i != 0:\n            ans += target\n    return ans\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 403, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11], target=2310) -> bool:\n    \"\"\"Check if the target number is divisible by all the numbers in the list.\"\"\"\n    return target % n == 0 and all((target % i == 0 for i in nums))", "solution_func": "def g(nums=[2, 3, 5, 7, 11], target=2310):\n    ans = target\n    for i in nums:\n        while ans % i != 0:\n            ans += target\n    return ans", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target number.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n", "emb": null, "idx_generation": 403, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target number.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, pattern='abba') -> bool:\n    \"\"\"Check if a given string follows a specific pattern.\"\"\"\n    words = s.split(' ')\n    if len(words) != len(pattern):\n        return False\n\n    word_map = {}\n    pattern_map = {}\n\n    for i in range(len(pattern)):\n        if pattern[i] not in pattern_map:\n            pattern_map[pattern[i]] = words[i]\n        else:\n            if pattern_map[pattern[i]] != words[i]:\n                return False\n\n        if words[i] not in word_map:\n            word_map[words[i]] = pattern[i]\n        else:\n            if word_map[words[i]] != pattern[i]:\n                return False\n\n    return True\n\ndef g(pattern='abba'):\n    return \"dog cat cat dog\"\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 403, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, pattern='abba') -> bool:\n    \"\"\"Check if a given string follows a specific pattern.\"\"\"\n    words = s.split(' ')\n    if len(words) != len(pattern):\n        return False\n\n    word_map = {}\n    pattern_map = {}\n\n    for i in range(len(pattern)):\n        if pattern[i] not in pattern_map:\n            pattern_map[pattern[i]] = words[i]\n        else:\n            if pattern_map[pattern[i]] != words[i]:\n                return False\n\n        if words[i] not in word_map:\n            word_map[words[i]] = pattern[i]\n        else:\n            if word_map[words[i]] != pattern[i]:\n                return False\n\n    return True", "solution_func": "def g(pattern='abba'):\n    return \"dog cat cat dog\"", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are exactly 'count' numbers that form a valid geometric progression with a common ratio of 'target'.\n\n    Sample Input:\n    nums = [1, 2, 4, 8, 16]\n    target = 2\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(nums[i] * target == nums[i+1] and nums[i+1] * target == nums[i+2] for i in range(len(nums)-2))\n\ndef g(nums: List[int] = [1, 2, 4, 8, 16], target: int = 2, count: int = 3):\n    return (nums, target, count)\n\nassert f(*g())\n", "emb": [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 403, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are exactly 'count' numbers that form a valid geometric progression with a common ratio of 'target'.\n\n    Sample Input:\n    nums = [1, 2, 4, 8, 16]\n    target = 2\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(nums[i] * target == nums[i+1] and nums[i+1] * target == nums[i+2] for i in range(len(nums)-2))", "solution_func": "def g(nums: List[int] = [1, 2, 4, 8, 16], target: int = 2, count: int = 3):\n    return (nums, target, count)", "map_ix": [0, 0, 1, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a pair of numbers in the list that sum up to the target value.\n    \"\"\"\n    num_set = set()\n    for num in arr:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(arr: List[int] = [1, 4, 7, 3, 9, 2, 5], target: int = 10):\n    return (arr, target)\n\nassert f(*g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 404, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a pair of numbers in the list that sum up to the target value.\n    \"\"\"\n    num_set = set()\n    for num in arr:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(arr: List[int] = [1, 4, 7, 3, 9, 2, 5], target: int = 10):\n    return (arr, target)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if the matrix is symmetric.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 404, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if the matrix is symmetric.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with all the duplicates removed.\n    The order of the elements in the new list should be the same as the original list.\n    \"\"\"\n    return list(set(nums))\n\ndef g(nums: List[int] = [1, 2, 3, 4, 3, 2, 5, 6, 1]):\n    return nums\n\nassert f(g()) == [1, 2, 3, 4, 5, 6]\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 404, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with all the duplicates removed.\n    The order of the elements in the new list should be the same as the original list.\n    \"\"\"\n    return list(set(nums))", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 3, 2, 5, 6, 1]):\n    return nums", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose difference is equal to 5.\n    \"\"\"\n\n    num_set = set()\n    for num in nums:\n        if num + 5 in num_set or num - 5 in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return [1, 6, 3, 8, 5]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 404, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose difference is equal to 5.\n    \"\"\"\n\n    num_set = set()\n    for num in nums:\n        if num + 5 in num_set or num - 5 in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g():\n    return [1, 6, 3, 8, 5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[str]) -> bool:\n    \"\"\"\n    Check if all strings in the given list have the same length.\n    \"\"\"\n\n    return all(len(s) == len(lst[0]) for s in lst)\n\ndef g():\n    return ['apple', 'banana', 'cherry', 'date']\n\nassert f(g()) == False\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 404, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[str]) -> bool:\n    \"\"\"\n    Check if all strings in the given list have the same length.\n    \"\"\"\n\n    return all(len(s) == len(lst[0]) for s in lst)", "solution_func": "def g():\n    return ['apple', 'banana', 'cherry', 'date']", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose product is equal to 20.\n    \"\"\"\n\n    num_set = set()\n    for num in nums:\n        if num != 0 and 20 % num == 0 and 20 // num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return [1, 4, 5, 2, 10]\n\nassert f(g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 404, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose product is equal to 20.\n    \"\"\"\n\n    num_set = set()\n    for num in nums:\n        if num != 0 and 20 % num == 0 and 20 // num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g():\n    return [1, 4, 5, 2, 10]", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the even numbers.\n\n    Example:\n    arr = [1, 2, 3, 4, 5]\n    output: [2, 4]\n    \"\"\"\n    return [num for num in arr if num % 2 == 0]\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g()) == [2, 4]\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 404, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the even numbers.\n\n    Example:\n    arr = [1, 2, 3, 4, 5]\n    output: [2, 4]\n    \"\"\"\n    return [num for num in arr if num % 2 == 0]", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5]):\n    return arr", "map_ix": [1, 1, 0, 1, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target value, return a list of all indices where the element is equal to the target.\n\n    Example:\n    arr = [1, 2, 3, 4, 5, 3, 2]\n    target = 2\n    output: [1, 6]\n    \"\"\"\n    target_indices = []\n    for i in range(len(arr)):\n        if arr[i] == target:\n            target_indices.append(i)\n    return target_indices\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5, 3, 2], target: int = 2):\n    return arr, target\n\nassert f(*g()) == [1, 6]\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 404, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target value, return a list of all indices where the element is equal to the target.\n\n    Example:\n    arr = [1, 2, 3, 4, 5, 3, 2]\n    target = 2\n    output: [1, 6]\n    \"\"\"\n    target_indices = []\n    for i in range(len(arr)):\n        if arr[i] == target:\n            target_indices.append(i)\n    return target_indices", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5, 3, 2], target: int = 2):\n    return arr, target", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the sum of all the elements.\n\n    Example:\n    arr = [1, 2, 3, 4, 5]\n    output: 15\n    \"\"\"\n    return sum(arr)\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g()) == 15\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 404, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the sum of all the elements.\n\n    Example:\n    arr = [1, 2, 3, 4, 5]\n    output: 15\n    \"\"\"\n    return sum(arr)", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5]):\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a pair of numbers whose sum is equal to 10.\n\n    Sample Input:\n    nums = [2, 4, 6, 8]\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        complement = 10 - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    nums = random.sample(range(1, 10), 4)\n    return (nums,)\n\nassert f(*g()) == True\n\n", "emb": null, "idx_generation": 404, "target_skills": null, "problem_func": "from typing import*\nimport random\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a pair of numbers whose sum is equal to 10.\n\n    Sample Input:\n    nums = [2, 4, 6, 8]\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        complement = 10 - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g():\n    nums = random.sample(range(1, 10), 4)\n    return (nums,)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str]) -> bool:\n    \"\"\"\n    Check if there exists a pair of words in the given list whose lengths sum up to an even number.\n    \"\"\"\n\n    word_set = set()\n    for word in words:\n        if len(word) % 2 == 0 and (len(word)//2) in word_set:\n            return True\n        word_set.add(len(word))\n    return False\n\ndef g(words: List[str] = [\"hello\", \"world\", \"python\", \"puzzle\"]):\n    return words\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 405, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str]) -> bool:\n    \"\"\"\n    Check if there exists a pair of words in the given list whose lengths sum up to an even number.\n    \"\"\"\n\n    word_set = set()\n    for word in words:\n        if len(word) % 2 == 0 and (len(word)//2) in word_set:\n            return True\n        word_set.add(len(word))\n    return False", "solution_func": "def g(words: List[str] = [\"hello\", \"world\", \"python\", \"puzzle\"]):\n    return words", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers, check if there exists a pair of numbers whose sum is equal to the target number.\n    \"\"\"\n\n    num_set = set()\n    for num in arr:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return arr, target\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 405, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers, check if there exists a pair of numbers whose sum is equal to the target number.\n    \"\"\"\n\n    num_set = set()\n    for num in arr:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return arr, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(words: List[str]) -> bool:\n    \"\"\"\n    Check if there exists a pair of words in the given list whose characters sum up to an odd number.\n    \"\"\"\n\n    word_set = set()\n    for word in words:\n        if sum(ord(char) for char in word) % 2 != 0 and (sum(ord(char) for char in word)//2) in word_set:\n            return True\n        word_set.add(sum(ord(char) for char in word))\n    return False\n\ndef g(words: List[str] = [\"hello\", \"world\", \"python\", \"puzzle\"]):\n    return words\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 405, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str]) -> bool:\n    \"\"\"\n    Check if there exists a pair of words in the given list whose characters sum up to an odd number.\n    \"\"\"\n\n    word_set = set()\n    for word in words:\n        if sum(ord(char) for char in word) % 2 != 0 and (sum(ord(char) for char in word)//2) in word_set:\n            return True\n        word_set.add(sum(ord(char) for char in word))\n    return False", "solution_func": "def g(words: List[str] = [\"hello\", \"world\", \"python\", \"puzzle\"]):\n    return words", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given an array of integers nums and a target integer, return the indices of the two numbers such that they add up to the target.\n\n    Example:\n    nums = [2, 7, 11, 15]\n    target = 9\n\n    Output: [0, 1]\n\n    Explanation: The sum of nums[0] = 2 and nums[1] = 7 is equal to the target 9, so the indices [0, 1] are returned.\n    \"\"\"\n    nums_dict = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in nums_dict:\n            return [nums_dict[complement], i]\n        nums_dict[num] = i\n    return []\n\ndef g(nums=[2, 7, 11, 15], target=9):\n    return nums, target\n\nassert f(*g()) == [0, 1]\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 405, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given an array of integers nums and a target integer, return the indices of the two numbers such that they add up to the target.\n\n    Example:\n    nums = [2, 7, 11, 15]\n    target = 9\n\n    Output: [0, 1]\n\n    Explanation: The sum of nums[0] = 2 and nums[1] = 7 is equal to the target 9, so the indices [0, 1] are returned.\n    \"\"\"\n    nums_dict = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in nums_dict:\n            return [nums_dict[complement], i]\n        nums_dict[num] = i\n    return []", "solution_func": "def g(nums=[2, 7, 11, 15], target=9):\n    return nums, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> List[int]:\n    \"\"\"\n    Given an array of integers nums and an integer k, return the k most frequent elements in the array.\n\n    Example:\n    nums = [1, 1, 1, 2, 2, 3]\n    k = 2\n\n    Output: [1, 2]\n\n    Explanation: The two most frequent elements are 1 and 2.\n    \"\"\"\n    freq_dict = {}\n    for num in nums:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n    sorted_nums = sorted(freq_dict, key=lambda x: freq_dict[x], reverse=True)\n    return sorted_nums[:k]\n\ndef g(nums=[1, 1, 1, 2, 2, 3], k=2):\n    return nums, k\n\nassert f(*g()) == [1, 2]\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 405, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> List[int]:\n    \"\"\"\n    Given an array of integers nums and an integer k, return the k most frequent elements in the array.\n\n    Example:\n    nums = [1, 1, 1, 2, 2, 3]\n    k = 2\n\n    Output: [1, 2]\n\n    Explanation: The two most frequent elements are 1 and 2.\n    \"\"\"\n    freq_dict = {}\n    for num in nums:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n    sorted_nums = sorted(freq_dict, key=lambda x: freq_dict[x], reverse=True)\n    return sorted_nums[:k]", "solution_func": "def g(nums=[1, 1, 1, 2, 2, 3], k=2):\n    return nums, k", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import Tuple\n\ndef f(coordinates: Tuple[int, int]) -> bool:\n    \"\"\"\n    Given the coordinates of two squares on a 2D plane, determine if they are adjacent.\n\n    Example:\n    coordinates = ((1, 2), (2, 3))\n\n    Output: True\n\n    Explanation: The squares with coordinates (1, 2) and (2, 3) share a common side and are considered adjacent.\n    \"\"\"\n    x1, y1 = coordinates[0]\n    x2, y2 = coordinates[1]\n    if (abs(x1 - x2) == 1 and y1 == y2) or (abs(y1 - y2) == 1 and x1 == x2):\n        return True\n    return False\n\ndef g(coordinates=((1, 2), (2, 3))):\n    return coordinates\n\nassert f(*g()) == True\n", "emb": null, "idx_generation": 405, "target_skills": null, "problem_func": "from typing import*\nfrom typing import Tuple\n\ndef f(coordinates: Tuple[int, int]) -> bool:\n    \"\"\"\n    Given the coordinates of two squares on a 2D plane, determine if they are adjacent.\n\n    Example:\n    coordinates = ((1, 2), (2, 3))\n\n    Output: True\n\n    Explanation: The squares with coordinates (1, 2) and (2, 3) share a common side and are considered adjacent.\n    \"\"\"\n    x1, y1 = coordinates[0]\n    x2, y2 = coordinates[1]\n    if (abs(x1 - x2) == 1 and y1 == y2) or (abs(y1 - y2) == 1 and x1 == x2):\n        return True\n    return False", "solution_func": "def g(coordinates=((1, 2), (2, 3))):\n    return coordinates", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains duplicate elements.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 2]\n\n    Sample Output:\n    True\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    \"\"\"\n    Generate a list of integers with duplicate elements.\n    \"\"\"\n    return [1, 2, 3, 4, 2]\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 405, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains duplicate elements.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 2]\n\n    Sample Output:\n    True\n    \"\"\"\n    return len(nums) != len(set(nums))", "solution_func": "def g():\n    \"\"\"\n    Generate a list of integers with duplicate elements.\n    \"\"\"\n    return [1, 2, 3, 4, 2]", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is sorted in non-decreasing order.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\n\ndef g():\n    \"\"\"\n    Generate a sorted list of integers in non-decreasing order.\n    \"\"\"\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 405, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is sorted in non-decreasing order.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))", "solution_func": "def g():\n    \"\"\"\n    Generate a sorted list of integers in non-decreasing order.\n    \"\"\"\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a pair of elements in the given list that adds up to a target sum.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    \"\"\"\n    Generate a list of integers and a target sum.\n    \"\"\"\n    return [1, 2, 3, 4, 5], 9\n\nassert f(*g()) == True\n", "emb": null, "idx_generation": 405, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a pair of elements in the given list that adds up to a target sum.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g():\n    \"\"\"\n    Generate a list of integers and a target sum.\n    \"\"\"\n    return [1, 2, 3, 4, 5], 9", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the maximum number in the list.\n    \"\"\"\n    return max(nums)\n\ndef g():\n    nums = [10, 5, 7, 3, 9, 2]\n    return nums\n\nassert f(g()) == 10\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 405, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the maximum number in the list.\n    \"\"\"\n    return max(nums)", "solution_func": "def g():\n    nums = [10, 5, 7, 3, 9, 2]\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(words: List[str], target: str) -> bool:\n    \"\"\"\n    Given a list of words and a target word, check if the target word is an anagram of any word in the list.\n    If an anagram is found, return True. Otherwise, return False.\n    \"\"\"\n    def count_letters(word):\n        counts = {}\n        for letter in word:\n            if letter in counts:\n                counts[letter] += 1\n            else:\n                counts[letter] = 1\n        return counts\n    \n    target_counts = count_letters(target)\n    for word in words:\n        if count_letters(word) == target_counts:\n            return True\n    return False\n\ndef g(words: List[str] = [\"listen\", \"silent\", \"enlist\", \"tinsel\"]):\n    return words\n\nassert f(g(), \"silent\") == True\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 406, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], target: str) -> bool:\n    \"\"\"\n    Given a list of words and a target word, check if the target word is an anagram of any word in the list.\n    If an anagram is found, return True. Otherwise, return False.\n    \"\"\"\n    def count_letters(word):\n        counts = {}\n        for letter in word:\n            if letter in counts:\n                counts[letter] += 1\n            else:\n                counts[letter] = 1\n        return counts\n    \n    target_counts = count_letters(target)\n    for word in words:\n        if count_letters(word) == target_counts:\n            return True\n    return False", "solution_func": "def g(words: List[str] = [\"listen\", \"silent\", \"enlist\", \"tinsel\"]):\n    return words", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target number, find the number of occurrences of the target number in the list.\n    Return the count of occurrences.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num == target:\n            count += 1\n    return count\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 1, 3, 1]):\n    return nums\n\nassert f(g(), 1) == 3\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 406, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target number, find the number of occurrences of the target number in the list.\n    Return the count of occurrences.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num == target:\n            count += 1\n    return count", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 1, 3, 1]):\n    return nums", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, target: int) -> bool:\n    \"\"\"\n    Given a number n, check if the sum of the digits of n is equal to the target number.\n    If the sum is equal to the target, return True. Otherwise, return False.\n    \"\"\"\n    digit_sum = sum([int(digit) for digit in str(n)])\n    return digit_sum == target\n\ndef g(n: int = 12345):\n    return n\n\nassert f(g(), 15) == True\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 406, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, target: int) -> bool:\n    \"\"\"\n    Given a number n, check if the sum of the digits of n is equal to the target number.\n    If the sum is equal to the target, return True. Otherwise, return False.\n    \"\"\"\n    digit_sum = sum([int(digit) for digit in str(n)])\n    return digit_sum == target", "solution_func": "def g(n: int = 12345):\n    return n", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, pattern='abcd') -> bool:\n    \"\"\"Check if a given string follows a specific pattern.\"\"\"\n    words = s.split(' ')\n    if len(words) != len(pattern):\n        return False\n\n    word_map = {}\n    pattern_map = {}\n\n    for i in range(len(pattern)):\n        if pattern[i] not in pattern_map:\n            pattern_map[pattern[i]] = words[i]\n        else:\n            if pattern_map[pattern[i]] != words[i]:\n                return False\n\n        if words[i] not in word_map:\n            word_map[words[i]] = pattern[i]\n        else:\n            if word_map[words[i]] != pattern[i]:\n                return False\n\n    return True\n\ndef g(pattern='abcd'):\n    return \"apple banana cherry date\"\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 406, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, pattern='abcd') -> bool:\n    \"\"\"Check if a given string follows a specific pattern.\"\"\"\n    words = s.split(' ')\n    if len(words) != len(pattern):\n        return False\n\n    word_map = {}\n    pattern_map = {}\n\n    for i in range(len(pattern)):\n        if pattern[i] not in pattern_map:\n            pattern_map[pattern[i]] = words[i]\n        else:\n            if pattern_map[pattern[i]] != words[i]:\n                return False\n\n        if words[i] not in word_map:\n            word_map[words[i]] = pattern[i]\n        else:\n            if word_map[words[i]] != pattern[i]:\n                return False\n\n    return True", "solution_func": "def g(pattern='abcd'):\n    return \"apple banana cherry date\"", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, pattern='aabbaa') -> bool:\n    \"\"\"Check if a given string follows a specific pattern.\"\"\"\n    words = s.split(' ')\n    if len(words) != len(pattern):\n        return False\n\n    word_map = {}\n    pattern_map = {}\n\n    for i in range(len(pattern)):\n        if pattern[i] not in pattern_map:\n            pattern_map[pattern[i]] = words[i]\n        else:\n            if pattern_map[pattern[i]] != words[i]:\n                return False\n\n        if words[i] not in word_map:\n            word_map[words[i]] = pattern[i]\n        else:\n            if word_map[words[i]] != pattern[i]:\n                return False\n\n    return True\n\ndef g(pattern='aabbaa'):\n    return \"dog cat cat dog dog cat\"\n\nassert f(g())\n", "emb": null, "idx_generation": 406, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, pattern='aabbaa') -> bool:\n    \"\"\"Check if a given string follows a specific pattern.\"\"\"\n    words = s.split(' ')\n    if len(words) != len(pattern):\n        return False\n\n    word_map = {}\n    pattern_map = {}\n\n    for i in range(len(pattern)):\n        if pattern[i] not in pattern_map:\n            pattern_map[pattern[i]] = words[i]\n        else:\n            if pattern_map[pattern[i]] != words[i]:\n                return False\n\n        if words[i] not in word_map:\n            word_map[words[i]] = pattern[i]\n        else:\n            if word_map[words[i]] != pattern[i]:\n                return False\n\n    return True", "solution_func": "def g(pattern='aabbaa'):\n    return \"dog cat cat dog dog cat\"", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, pattern='xyzzyx') -> bool:\n    \"\"\"Check if a given string follows a specific pattern.\"\"\"\n    words = s.split(' ')\n    if len(words) != len(pattern):\n        return False\n\n    word_map = {}\n    pattern_map = {}\n\n    for i in range(len(pattern)):\n        if pattern[i] not in pattern_map:\n            pattern_map[pattern[i]] = words[i]\n        else:\n            if pattern_map[pattern[i]] != words[i]:\n                return False\n\n        if words[i] not in word_map:\n            word_map[words[i]] = pattern[i]\n        else:\n            if word_map[words[i]] != pattern[i]:\n                return False\n\n    return True\n\ndef g(pattern='xyzzyx'):\n    return \"apple banana cherry cherry banana apple\"\n\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 406, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, pattern='xyzzyx') -> bool:\n    \"\"\"Check if a given string follows a specific pattern.\"\"\"\n    words = s.split(' ')\n    if len(words) != len(pattern):\n        return False\n\n    word_map = {}\n    pattern_map = {}\n\n    for i in range(len(pattern)):\n        if pattern[i] not in pattern_map:\n            pattern_map[pattern[i]] = words[i]\n        else:\n            if pattern_map[pattern[i]] != words[i]:\n                return False\n\n        if words[i] not in word_map:\n            word_map[words[i]] = pattern[i]\n        else:\n            if word_map[words[i]] != pattern[i]:\n                return False\n\n    return True", "solution_func": "def g(pattern='xyzzyx'):\n    return \"apple banana cherry cherry banana apple\"", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[str], target = 'python', n = 5) -> bool:\n    \"\"\"Check if a given target string is present in the list n times consecutively\"\"\"\n    return ''.join(lst).count(target * n) > 0\n\ndef g(n = 5):\n    return ['python'] * n\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 406, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[str], target = 'python', n = 5) -> bool:\n    \"\"\"Check if a given target string is present in the list n times consecutively\"\"\"\n    return ''.join(lst).count(target * n) > 0", "solution_func": "def g(n = 5):\n    return ['python'] * n", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target = 10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 406, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target = 10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target = 5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is greater than the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] > target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 406, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target = 5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is greater than the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] > target:\n                return True\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a grid where the sum of each row, each column, and both diagonals are the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    target_sum = sum(arr[0])\n    for i in range(n):\n        if sum(arr[i]) != target_sum:\n            return False\n        if sum(arr[j][i] for j in range(n)) != target_sum:\n            return False\n    if sum(arr[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(arr[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n\n", "emb": [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 406, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a grid where the sum of each row, each column, and both diagonals are the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    target_sum = sum(arr[0])\n    for i in range(n):\n        if sum(arr[i]) != target_sum:\n            return False\n        if sum(arr[j][i] for j in range(n)) != target_sum:\n            return False\n    if sum(arr[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(arr[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [1, 1, 1, 1, 0, 1, 1, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    Given a list of integers and a target number, find all pairs of numbers in the list that add up to the target number.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 6\n\n    Sample Output:\n    [(1, 5), (2, 4)]\n    \"\"\"\n    pairs = []\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            pairs.append((num, complement))\n        num_set.add(num)\n    return pairs\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 6):\n    return nums, target\n\nassert f(*g()) == [(1, 5), (2, 4)]\n", "emb": null, "idx_generation": 407, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    Given a list of integers and a target number, find all pairs of numbers in the list that add up to the target number.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 6\n\n    Sample Output:\n    [(1, 5), (2, 4)]\n    \"\"\"\n    pairs = []\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            pairs.append((num, complement))\n        num_set.add(num)\n    return pairs", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 6):\n    return nums, target", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return a list containing the sum of each row in the matrix.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    [6, 15, 24]\n    \"\"\"\n    row_sums = []\n    for row in matrix:\n        row_sums.append(sum(row))\n    return row_sums\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g()) == [6, 15, 24]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 407, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return a list containing the sum of each row in the matrix.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    [6, 15, 24]\n    \"\"\"\n    row_sums = []\n    for row in matrix:\n        row_sums.append(sum(row))\n    return row_sums", "solution_func": "def g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with the square root of each number rounded down to the nearest integer.\n\n    Sample Input:\n    nums = [4, 9, 16, 25]\n\n    Sample Output:\n    [2, 3, 4, 5]\n    \"\"\"\n    return [math.floor(math.sqrt(num)) for num in nums]\n\ndef g():\n    nums = [4, 9, 16, 25]\n    return nums\n\nassert f(g()) == [2, 3, 4, 5]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 407, "target_skills": null, "problem_func": "import math\nfrom typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with the square root of each number rounded down to the nearest integer.\n\n    Sample Input:\n    nums = [4, 9, 16, 25]\n\n    Sample Output:\n    [2, 3, 4, 5]\n    \"\"\"\n    return [math.floor(math.sqrt(num)) for num in nums]", "solution_func": "def g():\n    nums = [4, 9, 16, 25]\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[345, 876, 134, 567, 912, 678, 234, 789, 123, 456]) -> bool:\n    \"\"\"Find the sum of all multiples of n in a list of numbers.\"\"\"\n    return sum(num for num in nums if num % n == 0) > 0\ndef g(nums=[345, 876, 134, 567, 912, 678, 234, 789, 123, 456]):\n    return max(nums)\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 407, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[345, 876, 134, 567, 912, 678, 234, 789, 123, 456]) -> bool:\n    \"\"\"Find the sum of all multiples of n in a list of numbers.\"\"\"\n    return sum(num for num in nums if num % n == 0) > 0", "solution_func": "def g(nums=[345, 876, 134, 567, 912, 678, 234, 789, 123, 456]):\n    return max(nums)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'jackfruit', 'kiwi']) -> bool:\n    \"\"\"Check if a given string is a substring of any word in a list.\"\"\"\n    return any(s in word for word in words)\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'jackfruit', 'kiwi']):\n    return sorted(words)[0]\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 407, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'jackfruit', 'kiwi']) -> bool:\n    \"\"\"Check if a given string is a substring of any word in a list.\"\"\"\n    return any(s in word for word in words)", "solution_func": "def g(words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'jackfruit', 'kiwi']):\n    return sorted(words)[0]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in a list that sum up to a target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums=[12, 45, 67, 89, 34, 56, 78, 90, 23, 54]):\n    return sorted(nums)[1]\nassert f(g()) == True\n", "emb": null, "idx_generation": 407, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in a list that sum up to a target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g(nums=[12, 45, 67, 89, 34, 56, 78, 90, 23, 54]):\n    return sorted(nums)[1]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the even numbers from the original list.\n    \"\"\"\n    return [num for num in nums if num % 2 == 0]\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == [2, 4, 6, 8, 10]\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 407, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the even numbers from the original list.\n    \"\"\"\n    return [num for num in nums if num % 2 == 0]", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 1, 0, 1, 0, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find and return the sum of all the numbers in the list.\n    \"\"\"\n    return sum(nums)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == 15\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 407, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find and return the sum of all the numbers in the list.\n    \"\"\"\n    return sum(nums)", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with each element being the square of the corresponding element in the original list.\n    \"\"\"\n    return [num ** 2 for num in nums]\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == [1, 4, 9, 16, 25]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 407, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with each element being the square of the corresponding element in the original list.\n    \"\"\"\n    return [num ** 2 for num in nums]", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, target: int) -> bool:\n    \"\"\"\n    Given a number n and a target, check if the number n is divisible by the target and the product of its digits is equal to the target value.\n    If both conditions are met, return True. Otherwise, return False.\n    \"\"\"\n    if target == 0:\n        return False\n    \n    digits_product = 1\n    for i in str(n):\n        digits_product *= int(i)\n    \n    return n % target == 0 and digits_product == target\n\ndef g():\n    return 48, 8\n\nassert f(*g()) == True\n", "emb": null, "idx_generation": 407, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, target: int) -> bool:\n    \"\"\"\n    Given a number n and a target, check if the number n is divisible by the target and the product of its digits is equal to the target value.\n    If both conditions are met, return True. Otherwise, return False.\n    \"\"\"\n    if target == 0:\n        return False\n    \n    digits_product = 1\n    for i in str(n):\n        digits_product *= int(i)\n    \n    return n % target == 0 and digits_product == target", "solution_func": "def g():\n    return 48, 8", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int = 10, k: int = 2) -> bool:\n    \"\"\"Check if there are k numbers in the list that sum up to the target value\"\"\"\n    def helper(nums, target, k, curr_sum, curr_index):\n        if k == 0:\n            return curr_sum == target\n        if curr_index == len(nums):\n            return False\n        return helper(nums, target, k, curr_sum + nums[curr_index], curr_index + 1) or helper(nums, target, k - 1, nums[curr_index], curr_index + 1)\n    \n    return helper(nums, target, k, 0, 0)\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 10, k: int = 2):\n    return nums\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 408, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int = 10, k: int = 2) -> bool:\n    \"\"\"Check if there are k numbers in the list that sum up to the target value\"\"\"\n    def helper(nums, target, k, curr_sum, curr_index):\n        if k == 0:\n            return curr_sum == target\n        if curr_index == len(nums):\n            return False\n        return helper(nums, target, k, curr_sum + nums[curr_index], curr_index + 1) or helper(nums, target, k - 1, nums[curr_index], curr_index + 1)\n    \n    return helper(nums, target, k, 0, 0)", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 10, k: int = 2):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], k: int = 3) -> bool:\n    \"\"\"\n    Check if there are k consecutive numbers in the list.\n    \"\"\"\n    nums.sort()\n    for i in range(len(nums) - k + 1):\n        if nums[i+k-1] - nums[i] == k - 1:\n            return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k: int = 3):\n    return nums\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 408, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k: int = 3) -> bool:\n    \"\"\"\n    Check if there are k consecutive numbers in the list.\n    \"\"\"\n    nums.sort()\n    for i in range(len(nums) - k + 1):\n        if nums[i+k-1] - nums[i] == k - 1:\n            return True\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k: int = 3):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], k: int = 2) -> int:\n    \"\"\"\n    Find the product of the k smallest numbers in the list.\n    \"\"\"\n    nums.sort()\n    product = 1\n    for i in range(k):\n        product *= nums[i]\n    return product\n\ndef g(nums: List[int] = [5, 2, 4, 3, 1], k: int = 2):\n    return nums\n\nassert f(g()) == 2\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 408, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k: int = 2) -> int:\n    \"\"\"\n    Find the product of the k smallest numbers in the list.\n    \"\"\"\n    nums.sort()\n    product = 1\n    for i in range(k):\n        product *= nums[i]\n    return product", "solution_func": "def g(nums: List[int] = [5, 2, 4, 3, 1], k: int = 2):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Calculate the sum of all even numbers in the given list of integers.\n\n    Sample Input:\n    [1, 2, 3, 4, 5, 6]\n\n    Sample Output:\n    12\n    \"\"\"\n    return sum([x for x in nums if x % 2 == 0])\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6]):\n    return nums\n\nassert f(g()) == 12\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 408, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Calculate the sum of all even numbers in the given list of integers.\n\n    Sample Input:\n    [1, 2, 3, 4, 5, 6]\n\n    Sample Output:\n    12\n    \"\"\"\n    return sum([x for x in nums if x % 2 == 0])", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6]):\n    return nums", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Calculate the product of all odd numbers in the given list of integers.\n\n    Sample Input:\n    [1, 2, 3, 4, 5]\n\n    Sample Output:\n    15\n    \"\"\"\n    product = 1\n    for num in nums:\n        if num % 2 != 0:\n            product *= num\n    return product\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == 15\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 408, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Calculate the product of all odd numbers in the given list of integers.\n\n    Sample Input:\n    [1, 2, 3, 4, 5]\n\n    Sample Output:\n    15\n    \"\"\"\n    product = 1\n    for num in nums:\n        if num % 2 != 0:\n            product *= num\n    return product", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list that sum up to the target number.\n\n    Sample Input:\n    [1, 2, 3, 4, 5], 8\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 8):\n    return nums, target\n\nassert f(*g()) == True\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 408, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list that sum up to the target number.\n\n    Sample Input:\n    [1, 2, 3, 4, 5], 8\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 8):\n    return nums, target", "map_ix": [1, 1, 0, 1, 0, 0, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the given list that sum up to the target value.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums: List[int], target: int):\n    return (nums, target)\n\nassert f(*g([1, 2, 3, 4, 5], 9)) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 408, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the given list that sum up to the target value.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums: List[int], target: int):\n    return (nums, target)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the maximum product of any three numbers in the given list.\n    \"\"\"\n    nums.sort()\n    return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])\n\ndef g(nums: List[int]):\n    return nums\n\nassert f(g([1, 2, 3, 4, 5])) == 60\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 408, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the maximum product of any three numbers in the given list.\n    \"\"\"\n    nums.sort()\n    return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])", "solution_func": "def g(nums: List[int]):\n    return nums", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find all pairs of numbers in the given list that sum up to the target value.\n    \"\"\"\n    pairs = []\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            pairs.append([num, complement])\n        seen.add(num)\n    return pairs\n\ndef g(nums: List[int], target: int):\n    return (nums, target)\n\nassert f(*g([1, 2, 3, 4, 5], 6)) == [[1, 5], [2, 4]]\n", "emb": null, "idx_generation": 408, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find all pairs of numbers in the given list that sum up to the target value.\n    \"\"\"\n    pairs = []\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            pairs.append([num, complement])\n        seen.add(num)\n    return pairs", "solution_func": "def g(nums: List[int], target: int):\n    return (nums, target)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers, find two distinct numbers that sum up to the target number.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums = [1, 2, 3, 4, 5, 6, 7]):\n    return nums\n\nassert f(g()) == False\n\n", "emb": null, "idx_generation": 408, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers, find two distinct numbers that sum up to the target number.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5, 6, 7]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the maximum difference between any two elements in the given list of integers.\n\n    Sample Input:\n    [1, 5, 3, 9, 2]\n\n    Sample Output:\n    8\n    \"\"\"\n    if len(nums) <= 1:\n        return 0\n    min_num = nums[0]\n    max_diff = 0\n    for num in nums[1:]:\n        max_diff = max(max_diff, num - min_num)\n        min_num = min(min_num, num)\n    return max_diff\n\ndef g(nums: List[int] = [1, 5, 3, 9, 2]):\n    return nums\n\nassert f(g()) == 8\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 409, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the maximum difference between any two elements in the given list of integers.\n\n    Sample Input:\n    [1, 5, 3, 9, 2]\n\n    Sample Output:\n    8\n    \"\"\"\n    if len(nums) <= 1:\n        return 0\n    min_num = nums[0]\n    max_diff = 0\n    for num in nums[1:]:\n        max_diff = max(max_diff, num - min_num)\n        min_num = min(min_num, num)\n    return max_diff", "solution_func": "def g(nums: List[int] = [1, 5, 3, 9, 2]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n\n    Sample Input:\n    \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s: str = \"racecar\"):\n    return s\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 409, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n\n    Sample Input:\n    \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == s[::-1]", "solution_func": "def g(s: str = \"racecar\"):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there are three integers in the given list that add up to the target number.\n\n    Sample Input:\n    [1, 2, 3, 4, 5, 6, 7, 8, 9], 15\n\n    Sample Output:\n    True\n    \"\"\"\n    nums.sort()\n    for i in range(len(nums) - 2):\n        left = i + 1\n        right = len(nums) - 1\n        while left < right:\n            total = nums[i] + nums[left] + nums[right]\n            if total == target:\n                return True\n            elif total < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g(), 15) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 409, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there are three integers in the given list that add up to the target number.\n\n    Sample Input:\n    [1, 2, 3, 4, 5, 6, 7, 8, 9], 15\n\n    Sample Output:\n    True\n    \"\"\"\n    nums.sort()\n    for i in range(len(nums) - 2):\n        left = i + 1\n        right = len(nums) - 1\n        while left < right:\n            total = nums[i] + nums[left] + nums[right]\n            if total == target:\n                return True\n            elif total < target:\n                left += 1\n            else:\n                right -= 1\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum product of any two numbers in the list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    20\n\n    Explanation: The maximum product is 5 * 4 = 20.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            product = nums[i] * nums[j]\n            max_product = max(max_product, product)\n    return max_product\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == 20\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 409, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum product of any two numbers in the list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    20\n\n    Explanation: The maximum product is 5 * 4 = 20.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            product = nums[i] * nums[j]\n            max_product = max(max_product, product)\n    return max_product", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list is a palindrome.\n\n    Sample Input:\n    nums = [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n\n    Explanation: The list is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums: List[int] = [1, 2, 3, 2, 1]):\n    return nums\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 409, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list is a palindrome.\n\n    Sample Input:\n    nums = [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n\n    Explanation: The list is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]", "solution_func": "def g(nums: List[int] = [1, 2, 3, 2, 1]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the sum of all the odd numbers in the list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    9\n\n    Explanation: The sum of all the odd numbers is 1 + 3 + 5 = 9.\n    \"\"\"\n    return sum(num for num in nums if num % 2 != 0)\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == 9\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 409, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the sum of all the odd numbers in the list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    9\n\n    Explanation: The sum of all the odd numbers is 1 + 3 + 5 = 9.\n    \"\"\"\n    return sum(num for num in nums if num % 2 != 0)", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a symmetric matrix of the given size\n    \"\"\"\n    symmetric_matrix = [[0 for _ in range(size)] for _ in range(size)]\n    for i in range(size):\n        for j in range(i, size):\n            symmetric_matrix[i][j] = symmetric_matrix[j][i] = i+j\n    return symmetric_matrix\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 409, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a symmetric matrix of the given size\n    \"\"\"\n    symmetric_matrix = [[0 for _ in range(size)] for _ in range(size)]\n    for i in range(size):\n        for j in range(i, size):\n            symmetric_matrix[i][j] = symmetric_matrix[j][i] = i+j\n    return symmetric_matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if the given target number is present in the matrix.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 5\n    return (matrix, target)\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 409, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if the given target number is present in the matrix.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 5\n    return (matrix, target)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    Find the indices (row and column) of all occurrences of the target number in the matrix.\n    \"\"\"\n    indices = []\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target:\n                indices.append((i, j))\n    return indices\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 5\n    return (matrix, target)\n\nassert f(*g()) == [(1, 1)]\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 409, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    Find the indices (row and column) of all occurrences of the target number in the matrix.\n    \"\"\"\n    indices = []\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target:\n                indices.append((i, j))\n    return indices", "solution_func": "def g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 5\n    return (matrix, target)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, m: int, k: int) -> bool:\n    \"\"\"\n    Given three positive integers n, m, and k, find if it is possible to construct a matrix of size n x m, \n    where each cell contains a positive integer, such that the sum of all numbers in the matrix is divisible by k.\n    \"\"\"\n    return (n * m * (n + 1) * (m + 1)) % (2 * k) == 0\n\ndef g(n = 3, m = 4, k = 5):\n    return n, m, k\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 409, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, m: int, k: int) -> bool:\n    \"\"\"\n    Given three positive integers n, m, and k, find if it is possible to construct a matrix of size n x m, \n    where each cell contains a positive integer, such that the sum of all numbers in the matrix is divisible by k.\n    \"\"\"\n    return (n * m * (n + 1) * (m + 1)) % (2 * k) == 0", "solution_func": "def g(n = 3, m = 4, k = 5):\n    return n, m, k", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of elements in the list whose sum is equal to the target value.\n    Return True if such a pair exists, False otherwise.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return arr, target\n\nassert f(*g()) == True\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 410, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of elements in the list whose sum is equal to the target value.\n    Return True if such a pair exists, False otherwise.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == target:\n                return True\n    return False", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return arr, target", "map_ix": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    A palindrome is a list that reads the same forwards and backwards.\n\n    Sample Input:\n    arr = [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            return False\n    return True\n\ndef g(arr: List[int] = [1, 2, 3, 2, 1]):\n    return arr\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 410, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    A palindrome is a list that reads the same forwards and backwards.\n\n    Sample Input:\n    arr = [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            return False\n    return True", "solution_func": "def g(arr: List[int] = [1, 2, 3, 2, 1]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Find the maximum element in the given list.\n\n    Sample Input:\n    arr = [3, 9, 2, 5, 1]\n\n    Sample Output:\n    9\n    \"\"\"\n    max_element = float('-inf')\n    for num in arr:\n        if num > max_element:\n            max_element = num\n    return max_element\n\ndef g(arr: List[int] = [3, 9, 2, 5, 1]):\n    return arr\n\nassert f(g()) == 9\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 410, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Find the maximum element in the given list.\n\n    Sample Input:\n    arr = [3, 9, 2, 5, 1]\n\n    Sample Output:\n    9\n    \"\"\"\n    max_element = float('-inf')\n    for num in arr:\n        if num > max_element:\n            max_element = num\n    return max_element", "solution_func": "def g(arr: List[int] = [3, 9, 2, 5, 1]):\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if all the elements are even, otherwise return False.\n\n    Sample Input:\n    arr = [2, 4, 6, 8]\n\n    Sample Output:\n    True\n    \"\"\"\n    return all(num % 2 == 0 for num in arr)\n\ndef g():\n    return [2, 4, 6, 8]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 410, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if all the elements are even, otherwise return False.\n\n    Sample Input:\n    arr = [2, 4, 6, 8]\n\n    Sample Output:\n    True\n    \"\"\"\n    return all(num % 2 == 0 for num in arr)", "solution_func": "def g():\n    return [2, 4, 6, 8]", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if the list contains any duplicate elements, otherwise return False.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return len(set(arr)) != len(arr)\n\ndef g():\n    return [1, 2, 3, 4, 5, 5]\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 410, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if the list contains any duplicate elements, otherwise return False.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return len(set(arr)) != len(arr)", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 5]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size\n    \"\"\"\n    return [[0 if j > i else 1 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 410, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size\n    \"\"\"\n    return [[0 if j > i else 1 for j in range(size)] for i in range(size)]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> List[int]:\n    \"\"\"\n    Given an array of integers nums and an integer k, return the k least frequent elements in the array.\n\n    Example:\n    nums = [1, 1, 1, 2, 2, 3]\n    k = 2\n\n    Output: [2, 3]\n\n    Explanation: The two least frequent elements are 2 and 3.\n    \"\"\"\n    freq_dict = {}\n    for num in nums:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n    sorted_nums = sorted(freq_dict, key=lambda x: freq_dict[x])\n    return sorted_nums[:k]\n\ndef g(nums=[1, 1, 1, 2, 2, 3], k=2):\n    return nums, k\n\nassert f(*g()) == [2, 3]\n", "emb": null, "idx_generation": 410, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> List[int]:\n    \"\"\"\n    Given an array of integers nums and an integer k, return the k least frequent elements in the array.\n\n    Example:\n    nums = [1, 1, 1, 2, 2, 3]\n    k = 2\n\n    Output: [2, 3]\n\n    Explanation: The two least frequent elements are 2 and 3.\n    \"\"\"\n    freq_dict = {}\n    for num in nums:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n    sorted_nums = sorted(freq_dict, key=lambda x: freq_dict[x])\n    return sorted_nums[:k]", "solution_func": "def g(nums=[1, 1, 1, 2, 2, 3], k=2):\n    return nums, k", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> List[int]:\n    \"\"\"\n    Given an array of integers nums and an integer k, return the k most frequent elements and their frequencies in the array.\n\n    Example:\n    nums = [1, 1, 1, 2, 2, 3]\n    k = 2\n\n    Output: [(1, 3), (2, 2)]\n\n    Explanation: The two most frequent elements are 1 and 2, with frequencies 3 and 2 respectively.\n    \"\"\"\n    freq_dict = {}\n    for num in nums:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n    sorted_nums = sorted(freq_dict, key=lambda x: freq_dict[x], reverse=True)\n    return [(num, freq_dict[num]) for num in sorted_nums[:k]]\n\ndef g(nums=[1, 1, 1, 2, 2, 3], k=2):\n    return nums, k\n\nassert f(*g()) == [(1, 3), (2, 2)]\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 410, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> List[int]:\n    \"\"\"\n    Given an array of integers nums and an integer k, return the k most frequent elements and their frequencies in the array.\n\n    Example:\n    nums = [1, 1, 1, 2, 2, 3]\n    k = 2\n\n    Output: [(1, 3), (2, 2)]\n\n    Explanation: The two most frequent elements are 1 and 2, with frequencies 3 and 2 respectively.\n    \"\"\"\n    freq_dict = {}\n    for num in nums:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n    sorted_nums = sorted(freq_dict, key=lambda x: freq_dict[x], reverse=True)\n    return [(num, freq_dict[num]) for num in sorted_nums[:k]]", "solution_func": "def g(nums=[1, 1, 1, 2, 2, 3], k=2):\n    return nums, k", "map_ix": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> List[int]:\n    \"\"\"\n    Given an array of integers nums and an integer k, return the k least frequent elements and their frequencies in the array.\n\n    Example:\n    nums = [1, 1, 1, 2, 2, 3]\n    k = 2\n\n    Output: [(2, 2), (3, 1)]\n\n    Explanation: The two least frequent elements are 2 and 3, with frequencies 2 and 1 respectively.\n    \"\"\"\n    freq_dict = {}\n    for num in nums:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n    sorted_nums = sorted(freq_dict, key=lambda x: freq_dict[x])\n    return [(num, freq_dict[num]) for num in sorted_nums[:k]]\n\ndef g(nums=[1, 1, 1, 2, 2, 3], k=2):\n    return nums, k\n\nassert f(*g()) == [(2, 2), (3, 1)]\n", "emb": null, "idx_generation": 410, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> List[int]:\n    \"\"\"\n    Given an array of integers nums and an integer k, return the k least frequent elements and their frequencies in the array.\n\n    Example:\n    nums = [1, 1, 1, 2, 2, 3]\n    k = 2\n\n    Output: [(2, 2), (3, 1)]\n\n    Explanation: The two least frequent elements are 2 and 3, with frequencies 2 and 1 respectively.\n    \"\"\"\n    freq_dict = {}\n    for num in nums:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n    sorted_nums = sorted(freq_dict, key=lambda x: freq_dict[x])\n    return [(num, freq_dict[num]) for num in sorted_nums[:k]]", "solution_func": "def g(nums=[1, 1, 1, 2, 2, 3], k=2):\n    return nums, k", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], k: int, target: int) -> bool:\n    \"\"\"\n    Given a list of integers and an integer k, find if there exists two distinct indices i and j in the list such that nums[i] + nums[j] = target and abs(i - j) <= k.\n\n    Sample Input:\n    nums = [2, 3, 1, 5, 4]\n    k = 2\n    target = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    num_dict = {}\n    for i, num in enumerate(nums):\n        if target - num in num_dict and abs(i - num_dict[target - num]) <= k:\n            return True\n        num_dict[num] = i\n    return False\n\ndef g():\n    return [2, 3, 1, 5, 4], 2, 7\n\nassert f(*g()) == True\n", "emb": null, "idx_generation": 410, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k: int, target: int) -> bool:\n    \"\"\"\n    Given a list of integers and an integer k, find if there exists two distinct indices i and j in the list such that nums[i] + nums[j] = target and abs(i - j) <= k.\n\n    Sample Input:\n    nums = [2, 3, 1, 5, 4]\n    k = 2\n    target = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    num_dict = {}\n    for i, num in enumerate(nums):\n        if target - num in num_dict and abs(i - num_dict[target - num]) <= k:\n            return True\n        num_dict[num] = i\n    return False", "solution_func": "def g():\n    return [2, 3, 1, 5, 4], 2, 7", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int, k: int = 2) -> List[int]:\n    \"\"\"\n    Find k numbers in the given list nums that add up to the target value.\n    \"\"\"\n    result = []\n    def backtrack(remain, start, path):\n        if remain == 0 and len(path) == k:\n            result.append(path)\n            return\n        for i in range(start, len(nums)):\n            if nums[i] > remain:\n                break\n            backtrack(remain - nums[i], i + 1, path + [nums[i]])\n\n    backtrack(target, 0, [])\n    return result\n\ndef g(nums=[2, 4, 6, 8], target=10, k=2):\n    return nums\n\nassert f(g(), target=10) == [[2, 8]]\n", "emb": null, "idx_generation": 411, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int, k: int = 2) -> List[int]:\n    \"\"\"\n    Find k numbers in the given list nums that add up to the target value.\n    \"\"\"\n    result = []\n    def backtrack(remain, start, path):\n        if remain == 0 and len(path) == k:\n            result.append(path)\n            return\n        for i in range(start, len(nums)):\n            if nums[i] > remain:\n                break\n            backtrack(remain - nums[i], i + 1, path + [nums[i]])\n\n    backtrack(target, 0, [])\n    return result", "solution_func": "def g(nums=[2, 4, 6, 8], target=10, k=2):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if there exists a pair of numbers in the list that add up to the target.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    nums = [1, 2, 3, 4, 5, 6]\n    target = 9\n    return (nums, target)\n\nassert f(*g())\n\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 411, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if there exists a pair of numbers in the list that add up to the target.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g():\n    nums = [1, 2, 3, 4, 5, 6]\n    target = 9\n    return (nums, target)", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: int, a=123456789, b=987654321) -> bool:\n    \"\"\"Check if a number is divisible by another number\"\"\"\n    return x % a == 0 and x % b == 0\n\ndef g(a=123456789, b=987654321):\n    return a * b\n\nassert f(g())\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 411, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, a=123456789, b=987654321) -> bool:\n    \"\"\"Check if a number is divisible by another number\"\"\"\n    return x % a == 0 and x % b == 0", "solution_func": "def g(a=123456789, b=987654321):\n    return a * b", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Given a positive integer n, check if it is a perfect number.\n    A perfect number is a positive integer that is equal to the sum of its proper divisors (excluding the number itself).\n\n    Example:\n    n = 28\n    The proper divisors of 28 are 1, 2, 4, 7, and 14.\n    The sum of the proper divisors is 1 + 2 + 4 + 7 + 14 = 28, which is equal to n.\n\n    Therefore, f(n) returns True.\n    \"\"\"\n    divisors = [x for x in range(1, n) if n % x == 0]\n    return sum(divisors) == n\n\ndef g(n: int = 28):\n    return n\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 411, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Given a positive integer n, check if it is a perfect number.\n    A perfect number is a positive integer that is equal to the sum of its proper divisors (excluding the number itself).\n\n    Example:\n    n = 28\n    The proper divisors of 28 are 1, 2, 4, 7, and 14.\n    The sum of the proper divisors is 1 + 2 + 4 + 7 + 14 = 28, which is equal to n.\n\n    Therefore, f(n) returns True.\n    \"\"\"\n    divisors = [x for x in range(1, n) if n % x == 0]\n    return sum(divisors) == n", "solution_func": "def g(n: int = 28):\n    return n", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string s, check if it is a palindrome.\n    A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward.\n\n    Example:\n    s = \"level\"\n    The string reads the same forward and backward.\n\n    Therefore, f(s) returns True.\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s: str = \"level\"):\n    return s\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 411, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string s, check if it is a palindrome.\n    A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward.\n\n    Example:\n    s = \"level\"\n    The string reads the same forward and backward.\n\n    Therefore, f(s) returns True.\n    \"\"\"\n    return s == s[::-1]", "solution_func": "def g(s: str = \"level\"):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Given a positive integer n, check if it is a prime number.\n    A prime number is a positive integer greater than 1 that has no divisors other than 1 and itself.\n\n    Example:\n    n = 7\n    The only divisors of 7 are 1 and 7.\n\n    Therefore, f(n) returns True.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(n: int = 7):\n    return n\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 411, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Given a positive integer n, check if it is a prime number.\n    A prime number is a positive integer greater than 1 that has no divisors other than 1 and itself.\n\n    Example:\n    n = 7\n    The only divisors of 7 are 1 and 7.\n\n    Therefore, f(n) returns True.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "solution_func": "def g(n: int = 7):\n    return n", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if there exists a subarray (contiguous elements) whose product is equal to the target.\n\n    Sample Input:\n    nums = [2, 3, 4, 5]\n    target = 120\n\n    Sample Output:\n    True\n\n    Explanation:\n    The subarray [3, 4, 5] has a product of 120.\n    \"\"\"\n    n = len(nums)\n    prefix_product = 1\n    prefix_products = {1}\n    for i in range(n):\n        prefix_product *= nums[i]\n        if prefix_product == target:\n            return True\n        prefix_products.add(prefix_product)\n    return False\n\ndef g(nums: List[int] = [2, 3, 4, 5], target: int = 120):\n    return (nums, target)\n\nassert f(*g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 411, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if there exists a subarray (contiguous elements) whose product is equal to the target.\n\n    Sample Input:\n    nums = [2, 3, 4, 5]\n    target = 120\n\n    Sample Output:\n    True\n\n    Explanation:\n    The subarray [3, 4, 5] has a product of 120.\n    \"\"\"\n    n = len(nums)\n    prefix_product = 1\n    prefix_products = {1}\n    for i in range(n):\n        prefix_product *= nums[i]\n        if prefix_product == target:\n            return True\n        prefix_products.add(prefix_product)\n    return False", "solution_func": "def g(nums: List[int] = [2, 3, 4, 5], target: int = 120):\n    return (nums, target)", "map_ix": [1, 1, 0, 0, 1, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if there exists a pair of distinct elements in the list that sum up to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n\n    Sample Output:\n    True\n\n    Explanation:\n    The pair (3, 4) sums up to 7.\n    \"\"\"\n    n = len(nums)\n    num_set = set()\n    for i in range(n):\n        if target - nums[i] in num_set:\n            return True\n        num_set.add(nums[i])\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return (nums, target)\n\nassert f(*g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 411, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if there exists a pair of distinct elements in the list that sum up to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n\n    Sample Output:\n    True\n\n    Explanation:\n    The pair (3, 4) sums up to 7.\n    \"\"\"\n    n = len(nums)\n    num_set = set()\n    for i in range(n):\n        if target - nums[i] in num_set:\n            return True\n        num_set.add(nums[i])\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return (nums, target)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if there exists a subsequence (not necessarily contiguous) whose sum is equal to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n\n    Explanation:\n    The subsequence (2, 3, 4) has a sum of 9.\n    \"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n    for i in range(1, n + 1):\n        dp[i][0] = True\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j - nums[i - 1]] or dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (nums, target)\n\nassert f(*g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 411, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if there exists a subsequence (not necessarily contiguous) whose sum is equal to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n\n    Explanation:\n    The subsequence (2, 3, 4) has a sum of 9.\n    \"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n    for i in range(1, n + 1):\n        dp[i][0] = True\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j - nums[i - 1]] or dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (nums, target)", "map_ix": [1, 1, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the sum of all the numbers in the list is divisible by 10.\n    \"\"\"\n    return sum(nums) % 10 == 0\n\ndef g():\n    return [10, 20, 30, 40, 50]\n\nassert f(g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0], "idx_generation": 411, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the sum of all the numbers in the list is divisible by 10.\n    \"\"\"\n    return sum(nums) % 10 == 0", "solution_func": "def g():\n    return [10, 20, 30, 40, 50]", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a diagonal pattern.\n    A diagonal pattern is a grid where the elements form a pattern that starts with a decreasing sequence along the main diagonal, and the next diagonal starts with a smaller value than the previous diagonal.\n\n    Sample Input:\n    arr = [[9, 8, 7], [6, 5, 4], [3, 2, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(1, n):\n        if arr[i][i] >= arr[i-1][i-1]:\n            return False\n        for j in range(i, m-1):\n            if arr[j+1][j+1] >= arr[j][j]:\n                return False\n    return True\n\ndef g(arr: List[List[int]] = [[9, 8, 7], [6, 5, 4], [3, 2, 1]]):\n    return arr\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 412, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a diagonal pattern.\n    A diagonal pattern is a grid where the elements form a pattern that starts with a decreasing sequence along the main diagonal, and the next diagonal starts with a smaller value than the previous diagonal.\n\n    Sample Input:\n    arr = [[9, 8, 7], [6, 5, 4], [3, 2, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(1, n):\n        if arr[i][i] >= arr[i-1][i-1]:\n            return False\n        for j in range(i, m-1):\n            if arr[j+1][j+1] >= arr[j][j]:\n                return False\n    return True", "solution_func": "def g(arr: List[List[int]] = [[9, 8, 7], [6, 5, 4], [3, 2, 1]]):\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a stair-like pattern.\n    A stair-like pattern is a grid where each row and column is an increasing sequence of consecutive integers.\n\n    Sample Input:\n    arr = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n\n    Sample Output:\n    True\n    \"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n\n    for i in range(rows):\n        if arr[i] != list(range(i+1, i+cols+1)):\n            return False\n\n    for j in range(cols):\n        col = [arr[i][j] for i in range(rows)]\n        if col != list(range(j+1, j+rows+1)):\n            return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]):\n    return arr\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 412, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a stair-like pattern.\n    A stair-like pattern is a grid where each row and column is an increasing sequence of consecutive integers.\n\n    Sample Input:\n    arr = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n\n    Sample Output:\n    True\n    \"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n\n    for i in range(rows):\n        if arr[i] != list(range(i+1, i+cols+1)):\n            return False\n\n    for j in range(cols):\n        col = [arr[i][j] for i in range(rows)]\n        if col != list(range(j+1, j+rows+1)):\n            return False\n\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a spiral pattern.\n    A spiral pattern is a grid where the elements form a clockwise inward spiral, starting from the top-left corner.\n\n    Sample Input:\n    arr = [[1, 2, 3], [8, 9, 4], [7, 6, 5]]\n\n    Sample Output:\n    True\n    \"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n    n = rows * cols\n\n    top = 0\n    bottom = rows - 1\n    left = 0\n    right = cols - 1\n\n    direction = 0\n    count = 0\n\n    while count < n:\n        if direction == 0:\n            for i in range(left, right+1):\n                if arr[top][i] != count + 1:\n                    return False\n                count += 1\n            top += 1\n            direction = 1\n        elif direction == 1:\n            for i in range(top, bottom+1):\n                if arr[i][right] != count + 1:\n                    return False\n                count += 1\n            right -= 1\n            direction = 2\n        elif direction == 2:\n            for i in range(right, left-1, -1):\n                if arr[bottom][i] != count + 1:\n                    return False\n                count += 1\n            bottom -= 1\n            direction = 3\n        elif direction == 3:\n            for i in range(bottom, top-1, -1):\n                if arr[i][left] != count + 1:\n                    return False\n                count += 1\n            left += 1\n            direction = 0\n\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [8, 9, 4], [7, 6, 5]]):\n    return arr\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 412, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a spiral pattern.\n    A spiral pattern is a grid where the elements form a clockwise inward spiral, starting from the top-left corner.\n\n    Sample Input:\n    arr = [[1, 2, 3], [8, 9, 4], [7, 6, 5]]\n\n    Sample Output:\n    True\n    \"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n    n = rows * cols\n\n    top = 0\n    bottom = rows - 1\n    left = 0\n    right = cols - 1\n\n    direction = 0\n    count = 0\n\n    while count < n:\n        if direction == 0:\n            for i in range(left, right+1):\n                if arr[top][i] != count + 1:\n                    return False\n                count += 1\n            top += 1\n            direction = 1\n        elif direction == 1:\n            for i in range(top, bottom+1):\n                if arr[i][right] != count + 1:\n                    return False\n                count += 1\n            right -= 1\n            direction = 2\n        elif direction == 2:\n            for i in range(right, left-1, -1):\n                if arr[bottom][i] != count + 1:\n                    return False\n                count += 1\n            bottom -= 1\n            direction = 3\n        elif direction == 3:\n            for i in range(bottom, top-1, -1):\n                if arr[i][left] != count + 1:\n                    return False\n                count += 1\n            left += 1\n            direction = 0\n\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [8, 9, 4], [7, 6, 5]]):\n    return arr", "map_ix": [1, 0, 0, 0, 0, 1, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> int:\n    \"\"\"\n    Find the sum of all even numbers in the given list.\n    \"\"\"\n    return sum(num for num in lst if num % 2 == 0)\n\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return lst\n\nassert f(g()) == 30\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 412, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> int:\n    \"\"\"\n    Find the sum of all even numbers in the given list.\n    \"\"\"\n    return sum(num for num in lst if num % 2 == 0)", "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return lst", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find two numbers in the given list that add up to the target number. Return their indices in a list.\n\n    Sample input:\n    nums = [2, 7, 11, 15]\n    target = 9\n\n    Sample output:\n    [0, 1]\n\n    The numbers at indices 0 and 1 ([2, 7]) add up to the target number 9.\n    \"\"\"\n    num_dict = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_dict:\n            return [num_dict[complement], i]\n        num_dict[num] = i\n    return []\n\ndef g(nums=[2, 7, 11, 15], target=9):\n    return (nums, target)\n\nassert f(*g()) == [0, 1]\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 412, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find two numbers in the given list that add up to the target number. Return their indices in a list.\n\n    Sample input:\n    nums = [2, 7, 11, 15]\n    target = 9\n\n    Sample output:\n    [0, 1]\n\n    The numbers at indices 0 and 1 ([2, 7]) add up to the target number 9.\n    \"\"\"\n    num_dict = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_dict:\n            return [num_dict[complement], i]\n        num_dict[num] = i\n    return []", "solution_func": "def g(nums=[2, 7, 11, 15], target=9):\n    return (nums, target)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is symmetric.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\n    Sample Output:\n    False\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g()) == False\n\n", "emb": null, "idx_generation": 412, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is symmetric.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\n    Sample Output:\n    False\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> int:\n    \"\"\"\n    Find the maximum value in the given list.\n    \"\"\"\n    return max(lst)\n\ndef g(lst=[1, 2, 3, 4, 5]):\n    return lst\n\nassert f(g()) == 5\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 412, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> int:\n    \"\"\"\n    Find the maximum value in the given list.\n    \"\"\"\n    return max(lst)", "solution_func": "def g(lst=[1, 2, 3, 4, 5]):\n    return lst", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> int:\n    \"\"\"\n    Find the sum of all the even numbers in the given list.\n    \"\"\"\n    return sum(num for num in lst if num % 2 == 0)\n\ndef g(lst=[1, 2, 3, 4, 5]):\n    return lst\n\nassert f(g()) == 6\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 412, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> int:\n    \"\"\"\n    Find the sum of all the even numbers in the given list.\n    \"\"\"\n    return sum(num for num in lst if num % 2 == 0)", "solution_func": "def g(lst=[1, 2, 3, 4, 5]):\n    return lst", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> List[int]:\n    \"\"\"\n    Remove all duplicates from the given list and return a new list with unique elements.\n    \"\"\"\n    return list(set(lst))\n\ndef g(lst=[1, 2, 2, 3, 3, 4, 5]):\n    return lst\n\nassert f(g()) == [1, 2, 3, 4, 5]\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 412, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> List[int]:\n    \"\"\"\n    Remove all duplicates from the given list and return a new list with unique elements.\n    \"\"\"\n    return list(set(lst))", "solution_func": "def g(lst=[1, 2, 2, 3, 3, 4, 5]):\n    return lst", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"Return the sum of all even numbers in the list.\"\"\"\n    return sum([num for num in nums if num % 2 == 0])\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 30\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 412, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"Return the sum of all even numbers in the list.\"\"\"\n    return sum([num for num in nums if num % 2 == 0])", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the minimum possible sum of a contiguous subarray.\n\n    Example:\n    nums = [1, -2, 3, -4, 5, -6]\n\n    Output:\n    -9\n\n    Explanation: The contiguous subarray with the minimum sum is [1, -2, 3, -4, 5, -6], which gives a sum of -9.\n    \"\"\"\n    min_sum = float('inf')\n    curr_sum = 0\n\n    for num in nums:\n        curr_sum += num\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n        if curr_sum > 0:\n            curr_sum = 0\n\n    return min_sum\n\ndef g(nums: List[int] = [1, -2, 3, -4, 5, -6]):\n    return (nums,)\n\nassert f(*g()) == -9\n\n", "emb": null, "idx_generation": 413, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the minimum possible sum of a contiguous subarray.\n\n    Example:\n    nums = [1, -2, 3, -4, 5, -6]\n\n    Output:\n    -9\n\n    Explanation: The contiguous subarray with the minimum sum is [1, -2, 3, -4, 5, -6], which gives a sum of -9.\n    \"\"\"\n    min_sum = float('inf')\n    curr_sum = 0\n\n    for num in nums:\n        curr_sum += num\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n        if curr_sum > 0:\n            curr_sum = 0\n\n    return min_sum", "solution_func": "def g(nums: List[int] = [1, -2, 3, -4, 5, -6]):\n    return (nums,)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the length of the longest increasing subarray.\n\n    Example:\n    nums = [1, 2, 3, 2, 5, 6, 7, 8, 9]\n\n    Output:\n    6\n\n    Explanation: The longest increasing subarray is [2, 5, 6, 7, 8, 9], which has a length of 6.\n    \"\"\"\n    max_length = 0\n    curr_length = 0\n\n    for i in range(len(nums) - 1):\n        if nums[i] < nums[i + 1]:\n            curr_length += 1\n            if curr_length > max_length:\n                max_length = curr_length\n        else:\n            curr_length = 0\n\n    return max_length + 1\n\ndef g(nums: List[int] = [1, 2, 3, 2, 5, 6, 7, 8, 9]):\n    return (nums,)\n\nassert f(*g()) == 6\n\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 413, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the length of the longest increasing subarray.\n\n    Example:\n    nums = [1, 2, 3, 2, 5, 6, 7, 8, 9]\n\n    Output:\n    6\n\n    Explanation: The longest increasing subarray is [2, 5, 6, 7, 8, 9], which has a length of 6.\n    \"\"\"\n    max_length = 0\n    curr_length = 0\n\n    for i in range(len(nums) - 1):\n        if nums[i] < nums[i + 1]:\n            curr_length += 1\n            if curr_length > max_length:\n                max_length = curr_length\n        else:\n            curr_length = 0\n\n    return max_length + 1", "solution_func": "def g(nums: List[int] = [1, 2, 3, 2, 5, 6, 7, 8, 9]):\n    return (nums,)", "map_ix": [1, 0, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if there exists a pair of numbers in the list such that their sum is equal to the target.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n\n    Output:\n    True\n\n    Explanation: There exists a pair of numbers in the list, 3 and 4, whose sum is equal to the target 7.\n    \"\"\"\n    num_set = set()\n\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return (nums, target)\n\nassert f(*g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 413, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if there exists a pair of numbers in the list such that their sum is equal to the target.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n\n    Output:\n    True\n\n    Explanation: There exists a pair of numbers in the list, 3 and 4, whose sum is equal to the target 7.\n    \"\"\"\n    num_set = set()\n\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return (nums, target)", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are exactly 'count' numbers that form a valid arithmetic progression with a common difference of 'target'.\n\n    Sample Input:\n    nums = [1, 3, 5, 7, 9]\n    target = 2\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(nums[i] + target == nums[i+1] and nums[i+1] + target == nums[i+2] for i in range(len(nums)-2))\n\ndef g(nums: List[int] = [1, 3, 5, 7, 9], target: int = 2, count: int = 3):\n    return (nums, target, count)\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 413, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are exactly 'count' numbers that form a valid arithmetic progression with a common difference of 'target'.\n\n    Sample Input:\n    nums = [1, 3, 5, 7, 9]\n    target = 2\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(nums[i] + target == nums[i+1] and nums[i+1] + target == nums[i+2] for i in range(len(nums)-2))", "solution_func": "def g(nums: List[int] = [1, 3, 5, 7, 9], target: int = 2, count: int = 3):\n    return (nums, target, count)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are exactly 'count' numbers that form a valid arithmetic progression with a common difference of 'target'.\n\n    Sample Input:\n    nums = [1, 3, 5, 7, 9]\n    target = 2\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(nums[i] + target == nums[i+1] and nums[i+1] + target == nums[i+2] for i in range(len(nums)-2))\n\ndef g(nums: List[int] = [1, 3, 5, 7, 9], target: int = 2, count: int = 3):\n    return (nums, target, count)\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 413, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are exactly 'count' numbers that form a valid arithmetic progression with a common difference of 'target'.\n\n    Sample Input:\n    nums = [1, 3, 5, 7, 9]\n    target = 2\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(nums[i] + target == nums[i+1] and nums[i+1] + target == nums[i+2] for i in range(len(nums)-2))", "solution_func": "def g(nums: List[int] = [1, 3, 5, 7, 9], target: int = 2, count: int = 3):\n    return (nums, target, count)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are exactly 'count' numbers that form a valid arithmetic progression with a common difference of 'target'.\n\n    Sample Input:\n    nums = [1, 3, 5, 7, 9]\n    target = 2\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(nums[i] + target == nums[i+1] and nums[i+1] + target == nums[i+2] for i in range(len(nums)-2))\n\ndef g(nums: List[int] = [1, 3, 5, 7, 9], target: int = 2, count: int = 3):\n    return (nums, target, count)\n\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 413, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are exactly 'count' numbers that form a valid arithmetic progression with a common difference of 'target'.\n\n    Sample Input:\n    nums = [1, 3, 5, 7, 9]\n    target = 2\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(nums[i] + target == nums[i+1] and nums[i+1] + target == nums[i+2] for i in range(len(nums)-2))", "solution_func": "def g(nums: List[int] = [1, 3, 5, 7, 9], target: int = 2, count: int = 3):\n    return (nums, target, count)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: List[int], n=4, s=10) -> bool:\n    \"\"\"Check if there exists a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a >= 0 for a in x])\n\ndef g(n = 4, s = 10):\n    \"\"\"\n    Generate a list of n non-negative integers that sum up to s\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if s == 0:\n        return [0] * n\n    return [s // n] * n\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 413, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], n=4, s=10) -> bool:\n    \"\"\"Check if there exists a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a >= 0 for a in x])", "solution_func": "def g(n = 4, s = 10):\n    \"\"\"\n    Generate a list of n non-negative integers that sum up to s\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if s == 0:\n        return [0] * n\n    return [s // n] * n", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int], n=3, s=15) -> bool:\n    \"\"\"Check if there exists a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a >= 0 for a in x])\n\ndef g(n = 3, s = 15):\n    \"\"\"\n    Generate a list of n non-negative integers that sum up to s\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if s == 0:\n        return [0] * n\n    res = [0] * n\n    for i in range(n - 1):\n        x = min(s, 9)\n        res[i] = x\n        s -= x\n    res[-1] = s\n    return res\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 413, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], n=3, s=15) -> bool:\n    \"\"\"Check if there exists a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a >= 0 for a in x])", "solution_func": "def g(n = 3, s = 15):\n    \"\"\"\n    Generate a list of n non-negative integers that sum up to s\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if s == 0:\n        return [0] * n\n    res = [0] * n\n    for i in range(n - 1):\n        x = min(s, 9)\n        res[i] = x\n        s -= x\n    res[-1] = s\n    return res", "map_ix": [1, 1, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int], n=5, s=20) -> bool:\n    \"\"\"Check if there exists a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a >= 0 for a in x])\n\ndef g(n = 5, s = 20):\n    \"\"\"\n    Generate a list of n non-negative integers that sum up to s\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if s == 0:\n        return [0] * n\n    res = [1] * n\n    remaining_sum = s - n\n    i = 0\n    while remaining_sum > 0:\n        res[i] += 1\n        remaining_sum -= 1\n        i = (i + 1) % n\n    return res\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 413, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], n=5, s=20) -> bool:\n    \"\"\"Check if there exists a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a >= 0 for a in x])", "solution_func": "def g(n = 5, s = 20):\n    \"\"\"\n    Generate a list of n non-negative integers that sum up to s\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if s == 0:\n        return [0] * n\n    res = [1] * n\n    remaining_sum = s - n\n    i = 0\n    while remaining_sum > 0:\n        res[i] += 1\n        remaining_sum -= 1\n        i = (i + 1) % n\n    return res", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if there exists a subarray (contiguous elements) whose sum is equal to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n\n    Explanation:\n    The subarray [2, 3, 4] has a sum of 9.\n    \"\"\"\n    n = len(nums)\n    prefix_sum = 0\n    prefix_sums = {0}\n    for i in range(n):\n        prefix_sum += nums[i]\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (nums, target)\n\nassert f(*g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 413, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if there exists a subarray (contiguous elements) whose sum is equal to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n\n    Explanation:\n    The subarray [2, 3, 4] has a sum of 9.\n    \"\"\"\n    n = len(nums)\n    prefix_sum = 0\n    prefix_sums = {0}\n    for i in range(n):\n        prefix_sum += nums[i]\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (nums, target)", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Find the largest element in a given list of integers.\n    \"\"\"\n    return max(arr)\n\ndef g(arr: List[int] = [1, 5, 3, 8, 2]):\n    return arr\n\nassert f(g()) == 8\n\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 414, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Find the largest element in a given list of integers.\n    \"\"\"\n    return max(arr)", "solution_func": "def g(arr: List[int] = [1, 5, 3, 8, 2]):\n    return arr", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[str]) -> List[str]:\n    \"\"\"\n    Remove all duplicate elements from a given list of strings and return the updated list.\n    \"\"\"\n    return list(set(arr))\n\ndef g(arr: List[str] = [\"apple\", \"banana\", \"orange\", \"apple\", \"grape\", \"banana\"]):\n    return arr\n\nassert f(g()) == [\"banana\", \"apple\", \"orange\", \"grape\"]\n\n", "emb": null, "idx_generation": 414, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[str]) -> List[str]:\n    \"\"\"\n    Remove all duplicate elements from a given list of strings and return the updated list.\n    \"\"\"\n    return list(set(arr))", "solution_func": "def g(arr: List[str] = [\"apple\", \"banana\", \"orange\", \"apple\", \"grape\", \"banana\"]):\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> float:\n    \"\"\"\n    Calculate the average value of a given list of integers.\n    \"\"\"\n    return sum(arr) / len(arr)\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g()) == 3.0\n\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 414, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> float:\n    \"\"\"\n    Calculate the average value of a given list of integers.\n    \"\"\"\n    return sum(arr) / len(arr)", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5]):\n    return arr", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5], target=10) -> bool:\n    \"\"\"\n    Find a combination of n elements from the list that adds up to the target value\n    \"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(lst, n))\n\ndef g(lst=[1, 2, 3, 4, 5], target=10):\n    from itertools import combinations\n    for n in range(1, len(lst) + 1):\n        for comb in combinations(lst, n):\n            if sum(comb) == target:\n                return list(comb)\n    return []\n\nassert f(g())\n\n", "emb": null, "idx_generation": 414, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5], target=10) -> bool:\n    \"\"\"\n    Find a combination of n elements from the list that adds up to the target value\n    \"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(lst, n))", "solution_func": "def g(lst=[1, 2, 3, 4, 5], target=10):\n    from itertools import combinations\n    for n in range(1, len(lst) + 1):\n        for comb in combinations(lst, n):\n            if sum(comb) == target:\n                return list(comb)\n    return []", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(n: int, lst=['A', 'B', 'C', 'D', 'E'], target='ABC') -> bool:\n    \"\"\"\n    Find a combination of n elements from the list that forms the target string\n    \"\"\"\n    from itertools import combinations\n    return any(''.join(comb) == target for comb in combinations(lst, n))\n\ndef g(lst=['A', 'B', 'C', 'D', 'E'], target='ABC'):\n    from itertools import combinations\n    for n in range(1, len(lst) + 1):\n        for comb in combinations(lst, n):\n            if ''.join(comb) == target:\n                return comb\n    return []\n\nassert f(g())\n\n", "emb": null, "idx_generation": 414, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, lst=['A', 'B', 'C', 'D', 'E'], target='ABC') -> bool:\n    \"\"\"\n    Find a combination of n elements from the list that forms the target string\n    \"\"\"\n    from itertools import combinations\n    return any(''.join(comb) == target for comb in combinations(lst, n))", "solution_func": "def g(lst=['A', 'B', 'C', 'D', 'E'], target='ABC'):\n    from itertools import combinations\n    for n in range(1, len(lst) + 1):\n        for comb in combinations(lst, n):\n            if ''.join(comb) == target:\n                return comb\n    return []", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nimport math\nfrom typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5], target=10) -> bool:\n    \"\"\"\n    Find a combination of n elements from the list that has a product equal to the target value\n    \"\"\"\n    from itertools import combinations\n    return any(prod(comb) == target for comb in combinations(lst, n))\n\ndef g(lst=[1, 2, 3, 4, 5], target=10):\n    from itertools import combinations\n    from math import prod\n    for n in range(1, len(lst) + 1):\n        for comb in combinations(lst, n):\n            if prod(comb) == target:\n                return list(comb)\n    return []\n\nassert f(g())\n", "emb": null, "idx_generation": 414, "target_skills": null, "problem_func": "import itertools\nimport math\nfrom typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5], target=10) -> bool:\n    \"\"\"\n    Find a combination of n elements from the list that has a product equal to the target value\n    \"\"\"\n    from itertools import combinations\n    return any(prod(comb) == target for comb in combinations(lst, n))", "solution_func": "def g(lst=[1, 2, 3, 4, 5], target=10):\n    from itertools import combinations\n    from math import prod\n    for n in range(1, len(lst) + 1):\n        for comb in combinations(lst, n):\n            if prod(comb) == target:\n                return list(comb)\n    return []", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"Check if the given list of lists contains a diagonal matrix.\"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n    return all(len(row) == cols for row in arr) and all(arr[i][j] == 0 for i in range(rows) for j in range(cols) if i != j)\n\ndef g():\n    return [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 414, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"Check if the given list of lists contains a diagonal matrix.\"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n    return all(len(row) == cols for row in arr) and all(arr[i][j] == 0 for i in range(rows) for j in range(cols) if i != j)", "solution_func": "def g():\n    return [[1, 0, 0], [0, 2, 0], [0, 0, 3]]", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"Check if the given list of lists is a symmetric matrix.\"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n    return all(len(row) == cols for row in arr) and all(arr[i][j] == arr[j][i] for i in range(rows) for j in range(cols))\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g()) == False\n", "emb": null, "idx_generation": 414, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"Check if the given list of lists is a symmetric matrix.\"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n    return all(len(row) == cols for row in arr) and all(arr[i][j] == arr[j][i] for i in range(rows) for j in range(cols))", "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, k: int = 2) -> List[int]:\n    \"\"\"\n    Find k numbers in the given list nums that multiply to the target value.\n    \"\"\"\n    result = []\n    def backtrack(remain, start, path):\n        if remain == 1 and len(path) == k:\n            result.append(path)\n            return\n        for i in range(start, len(nums)):\n            if nums[i] > remain:\n                break\n            if remain % nums[i] == 0:\n                backtrack(remain // nums[i], i + 1, path + [nums[i]])\n\n    backtrack(target, 0, [])\n    return result\n\ndef g(nums=[1, 2, 3, 4, 5], target=10, k=2):\n    return nums\n\nassert f(g(), target=10) == [[2, 5]]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 414, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, k: int = 2) -> List[int]:\n    \"\"\"\n    Find k numbers in the given list nums that multiply to the target value.\n    \"\"\"\n    result = []\n    def backtrack(remain, start, path):\n        if remain == 1 and len(path) == k:\n            result.append(path)\n            return\n        for i in range(start, len(nums)):\n            if nums[i] > remain:\n                break\n            if remain % nums[i] == 0:\n                backtrack(remain // nums[i], i + 1, path + [nums[i]])\n\n    backtrack(target, 0, [])\n    return result", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=10, k=2):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> List[int]:\n    \"\"\"\n    Given an array of integers nums and an integer k, return the k least frequent elements and their frequencies in the array.\n\n    Example:\n    nums = [1, 1, 1, 2, 2, 3]\n    k = 2\n\n    Output: [(3, 1), (2, 2)]\n\n    Explanation: The two least frequent elements are 3 and 2, with frequencies 1 and 2 respectively.\n    \"\"\"\n    freq_dict = {}\n    for num in nums:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n    sorted_nums = sorted(freq_dict, key=lambda x: freq_dict[x])\n    return [(num, freq_dict[num]) for num in sorted_nums[:k]]\n\ndef g(nums=[1, 1, 1, 2, 2, 3], k=2):\n    return nums, k\n\nassert f(*g()) == [(3, 1), (2, 2)]\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 414, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> List[int]:\n    \"\"\"\n    Given an array of integers nums and an integer k, return the k least frequent elements and their frequencies in the array.\n\n    Example:\n    nums = [1, 1, 1, 2, 2, 3]\n    k = 2\n\n    Output: [(3, 1), (2, 2)]\n\n    Explanation: The two least frequent elements are 3 and 2, with frequencies 1 and 2 respectively.\n    \"\"\"\n    freq_dict = {}\n    for num in nums:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n    sorted_nums = sorted(freq_dict, key=lambda x: freq_dict[x])\n    return [(num, freq_dict[num]) for num in sorted_nums[:k]]", "solution_func": "def g(nums=[1, 1, 1, 2, 2, 3], k=2):\n    return nums, k", "map_ix": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a 2D matrix of integers, find the sum of all the elements in the matrix.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    45\n    \"\"\"\n    return sum(sum(row) for row in matrix)\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 45\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 415, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a 2D matrix of integers, find the sum of all the elements in the matrix.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    45\n    \"\"\"\n    return sum(sum(row) for row in matrix)", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a 2D matrix of integers, return the maximum element in each row as a list.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    [3, 6, 9]\n    \"\"\"\n    return [max(row) for row in matrix]\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [3, 6, 9]\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 415, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a 2D matrix of integers, return the maximum element in each row as a list.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    [3, 6, 9]\n    \"\"\"\n    return [max(row) for row in matrix]", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a 2D matrix of integers, return the transpose of the matrix.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n    \"\"\"\n    return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 415, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a 2D matrix of integers, return the transpose of the matrix.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n    \"\"\"\n    return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, a=14, b=50, c=47) -> bool:\n    \"\"\"Check if n is divisible by a and the sum of the first c integers is equal to b * n.\"\"\"\n    return n % a == 0 and sum([i for i in range(c+1)]) == b * n\n\ndef g(a = 14, b = 50, c = 47):\n    return b * sum([i for i in range(c+1)])\n\nassert f(g())\n", "emb": null, "idx_generation": 415, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=14, b=50, c=47) -> bool:\n    \"\"\"Check if n is divisible by a and the sum of the first c integers is equal to b * n.\"\"\"\n    return n % a == 0 and sum([i for i in range(c+1)]) == b * n", "solution_func": "def g(a = 14, b = 50, c = 47):\n    return b * sum([i for i in range(c+1)])", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the target value exists in the given list and it is the only odd number.\n    Return True if the target is the only odd number, otherwise return False.\n    \"\"\"\n    odd_count = 0\n    for num in arr:\n        if num == target:\n            odd_count += 1\n            if num % 2 != 1:\n                return False\n    return odd_count == 1\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 5):\n    return arr, target\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 415, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the target value exists in the given list and it is the only odd number.\n    Return True if the target is the only odd number, otherwise return False.\n    \"\"\"\n    odd_count = 0\n    for num in arr:\n        if num == target:\n            odd_count += 1\n            if num % 2 != 1:\n                return False\n    return odd_count == 1", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 5):\n    return arr, target", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str) -> str:\n    \"\"\"\n    Reverse the given string and remove any duplicate characters.\n    Return the modified string.\n    \"\"\"\n    reverse_string = string[::-1]\n    return ''.join(ch for i, ch in enumerate(reverse_string) if ch not in reverse_string[:i])\n\ndef g(string: str = \"hello world\"):\n    return string\n\nassert f(g()) == \"dlrow olhe\"\n", "emb": null, "idx_generation": 415, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str) -> str:\n    \"\"\"\n    Reverse the given string and remove any duplicate characters.\n    Return the modified string.\n    \"\"\"\n    reverse_string = string[::-1]\n    return ''.join(ch for i, ch in enumerate(reverse_string) if ch not in reverse_string[:i])", "solution_func": "def g(string: str = \"hello world\"):\n    return string", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains at least one palindrome number.\n    \"\"\"\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    return any(is_palindrome(num) for num in nums)\n\ndef g():\n    return [123, 456, 789, 121, 232, 343, 454, 565, 676, 787, 898, 999]\n\nassert f(g()) == True\n\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 415, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains at least one palindrome number.\n    \"\"\"\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    return any(is_palindrome(num) for num in nums)", "solution_func": "def g():\n    return [123, 456, 789, 121, 232, 343, 454, 565, 676, 787, 898, 999]", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a number that is a perfect square.\n    \"\"\"\n    def is_perfect_square(n):\n        return int(n ** 0.5) ** 2 == n\n\n    return any(is_perfect_square(num) for num in nums)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 415, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a number that is a perfect square.\n    \"\"\"\n    def is_perfect_square(n):\n        return int(n ** 0.5) ** 2 == n\n\n    return any(is_perfect_square(num) for num in nums)", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains at least one number that is a power of 2.\n    \"\"\"\n    def is_power_of_2(n):\n        return n & (n - 1) == 0 and n != 0\n\n    return any(is_power_of_2(num) for num in nums)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 415, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains at least one number that is a power of 2.\n    \"\"\"\n    def is_power_of_2(n):\n        return n & (n - 1) == 0 and n != 0\n\n    return any(is_power_of_2(num) for num in nums)", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that multiply to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any combination multiplies to the target_sum\n    for combo in combinations:\n        if multiply(combo) == target_sum:\n            return True\n\n    return False\n\ndef g(k=3, target_sum=24):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [2, 3, 4, 5, 6, 8, 12]\n\nassert f(g(), k=3, target_sum=24) == True\n", "emb": null, "idx_generation": 415, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that multiply to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any combination multiplies to the target_sum\n    for combo in combinations:\n        if multiply(combo) == target_sum:\n            return True\n\n    return False", "solution_func": "def g(k=3, target_sum=24):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [2, 3, 4, 5, 6, 8, 12]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"Check if the given list of lists contains a diagonal matrix.\"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n    return all(len(row) == cols for row in arr) and all(arr[i][j] == 0 for i in range(rows) for j in range(cols) if i != j)\n\ndef g():\n    return [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\nassert f(g()) == True\n\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 416, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"Check if the given list of lists contains a diagonal matrix.\"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n    return all(len(row) == cols for row in arr) and all(arr[i][j] == 0 for i in range(rows) for j in range(cols) if i != j)", "solution_func": "def g():\n    return [[1, 0, 0], [0, 2, 0], [0, 0, 3]]", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"Check if the given list of lists contains a square matrix.\"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n    return rows == cols\n\ndef g():\n    return [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\nassert f(g()) == True\n\n", "emb": [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 416, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"Check if the given list of lists contains a square matrix.\"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n    return rows == cols", "solution_func": "def g():\n    return [[1, 0, 0], [0, 2, 0], [0, 0, 3]]", "map_ix": [1, 1, 1, 1, 0, 1, 1, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"Check if the given list of lists contains a symmetric matrix.\"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n    return all(len(row) == cols for row in arr) and all(arr[i][j] == arr[j][i] for i in range(rows) for j in range(cols))\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 416, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"Check if the given list of lists contains a symmetric matrix.\"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n    return all(len(row) == cols for row in arr) and all(arr[i][j] == arr[j][i] for i in range(rows) for j in range(cols))", "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]", "map_ix": [1, 0, 1, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    \"\"\"\n    n = len(matrix)\n    magic_sum = n * (n ** 2 + 1) // 2\n\n    # Check rows\n    if any(sum(row) != magic_sum for row in matrix):\n        return False\n\n    # Check columns\n    if any(sum(column) != magic_sum for column in zip(*matrix)):\n        return False\n\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != magic_sum or sum(matrix[i][n - i - 1] for i in range(n)) != magic_sum:\n        return False\n\n    return True\n\ndef g(n=3):\n    \"\"\"\n    Generate a magic square of the given size.\n    \"\"\"\n    if n % 2 == 1:\n        # For odd-sized squares\n        magic_square = [[0] * n for _ in range(n)]\n        row, col = 0, n // 2\n        for num in range(1, n ** 2 + 1):\n            magic_square[row][col] = num\n            row -= 1\n            col = (col + 1) % n\n            if magic_square[row][col] != 0:\n                row = (row + 2) % n\n                col = (col - 1) % n\n    else:\n        # For doubly-even-sized squares\n        magic_square = [[(n * i + j + 1 + n // 2) % (n ** 2) for j in range(n)] for i in range(n)]\n\n    return magic_square\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 416, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    \"\"\"\n    n = len(matrix)\n    magic_sum = n * (n ** 2 + 1) // 2\n\n    # Check rows\n    if any(sum(row) != magic_sum for row in matrix):\n        return False\n\n    # Check columns\n    if any(sum(column) != magic_sum for column in zip(*matrix)):\n        return False\n\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != magic_sum or sum(matrix[i][n - i - 1] for i in range(n)) != magic_sum:\n        return False\n\n    return True", "solution_func": "def g(n=3):\n    \"\"\"\n    Generate a magic square of the given size.\n    \"\"\"\n    if n % 2 == 1:\n        # For odd-sized squares\n        magic_square = [[0] * n for _ in range(n)]\n        row, col = 0, n // 2\n        for num in range(1, n ** 2 + 1):\n            magic_square[row][col] = num\n            row -= 1\n            col = (col + 1) % n\n            if magic_square[row][col] != 0:\n                row = (row + 2) % n\n                col = (col - 1) % n\n    else:\n        # For doubly-even-sized squares\n        magic_square = [[(n * i + j + 1 + n // 2) % (n ** 2) for j in range(n)] for i in range(n)]\n\n    return magic_square", "map_ix": [1, 1, 0, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a Toeplitz matrix.\n    \"\"\"\n    rows, cols = len(matrix), len(matrix[0])\n\n    # Check upper diagonal\n    for i in range(rows - 1):\n        for j in range(cols - 1):\n            if matrix[i][j] != matrix[i+1][j+1]:\n                return False\n\n    return True\n\ndef g(rows=4, cols=4):\n    \"\"\"\n    Generate a Toeplitz matrix of the given dimensions.\n    \"\"\"\n    matrix = [[0] * cols for _ in range(rows)]\n\n    # Set values in upper diagonal\n    for i in range(rows):\n        for j in range(cols):\n            if i > 0 and j > 0:\n                matrix[i][j] = matrix[i-1][j-1] + 1\n\n    return matrix\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 416, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a Toeplitz matrix.\n    \"\"\"\n    rows, cols = len(matrix), len(matrix[0])\n\n    # Check upper diagonal\n    for i in range(rows - 1):\n        for j in range(cols - 1):\n            if matrix[i][j] != matrix[i+1][j+1]:\n                return False\n\n    return True", "solution_func": "def g(rows=4, cols=4):\n    \"\"\"\n    Generate a Toeplitz matrix of the given dimensions.\n    \"\"\"\n    matrix = [[0] * cols for _ in range(rows)]\n\n    # Set values in upper diagonal\n    for i in range(rows):\n        for j in range(cols):\n            if i > 0 and j > 0:\n                matrix[i][j] = matrix[i-1][j-1] + 1\n\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    \"\"\"\n    n = len(matrix)\n\n    # Check rows\n    if any(sum(row) != n for row in matrix):\n        return False\n\n    # Check columns\n    if any(sum(column) != n for column in zip(*matrix)):\n        return False\n\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != n or sum(matrix[i][n - i - 1] for i in range(n)) != n:\n        return False\n\n    return True\n\ndef g(n=3):\n    \"\"\"\n    Generate a magic square of the given size.\n    \"\"\"\n    magic_square = [[0] * n for _ in range(n)]\n    row, col = 0, n // 2\n    for num in range(1, n ** 2 + 1):\n        magic_square[row][col] = num\n        row -= 1\n        col = (col + 1) % n\n        if row < 0 and col < n and magic_square[n - 1][col] != 0:\n            row = n - 1\n\n    return magic_square\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 416, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    \"\"\"\n    n = len(matrix)\n\n    # Check rows\n    if any(sum(row) != n for row in matrix):\n        return False\n\n    # Check columns\n    if any(sum(column) != n for column in zip(*matrix)):\n        return False\n\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != n or sum(matrix[i][n - i - 1] for i in range(n)) != n:\n        return False\n\n    return True", "solution_func": "def g(n=3):\n    \"\"\"\n    Generate a magic square of the given size.\n    \"\"\"\n    magic_square = [[0] * n for _ in range(n)]\n    row, col = 0, n // 2\n    for num in range(1, n ** 2 + 1):\n        magic_square[row][col] = num\n        row -= 1\n        col = (col + 1) % n\n        if row < 0 and col < n and magic_square[n - 1][col] != 0:\n            row = n - 1\n\n    return magic_square", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there is a subsequence of 'count' numbers that form a valid arithmetic progression with a common difference of 'target'.\n\n    Sample Input:\n    nums = [1, 3, 5, 7, 9]\n    target = 2\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(nums)-count+1):\n        subsequence = nums[i:i+count]\n        if all(subsequence[j] + target == subsequence[j+1] for j in range(count-1)):\n            return True\n    return False\n\ndef g(nums: List[int] = [1, 3, 5, 7, 9], target: int = 2, count: int = 3):\n    return (nums, target, count)\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 416, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there is a subsequence of 'count' numbers that form a valid arithmetic progression with a common difference of 'target'.\n\n    Sample Input:\n    nums = [1, 3, 5, 7, 9]\n    target = 2\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(nums)-count+1):\n        subsequence = nums[i:i+count]\n        if all(subsequence[j] + target == subsequence[j+1] for j in range(count-1)):\n            return True\n    return False", "solution_func": "def g(nums: List[int] = [1, 3, 5, 7, 9], target: int = 2, count: int = 3):\n    return (nums, target, count)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a subarray of 'count' numbers that form a valid arithmetic progression with a common difference of 'target'.\n\n    Sample Input:\n    nums = [1, 3, 5, 7, 9]\n    target = 2\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(nums)-count+1):\n        subarray = nums[i:i+count]\n        if all(subarray[j] + target == subarray[j+1] for j in range(count-1)):\n            return True\n    return False\n\ndef g(nums: List[int] = [1, 3, 5, 7, 9], target: int = 2, count: int = 3):\n    return (nums, target, count)\n\nassert f(*g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 416, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a subarray of 'count' numbers that form a valid arithmetic progression with a common difference of 'target'.\n\n    Sample Input:\n    nums = [1, 3, 5, 7, 9]\n    target = 2\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(nums)-count+1):\n        subarray = nums[i:i+count]\n        if all(subarray[j] + target == subarray[j+1] for j in range(count-1)):\n            return True\n    return False", "solution_func": "def g(nums: List[int] = [1, 3, 5, 7, 9], target: int = 2, count: int = 3):\n    return (nums, target, count)", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a subarray of 'count' numbers that form a valid geometric progression with a common ratio of 'target'.\n\n    Sample Input:\n    nums = [1, 2, 4, 8, 16]\n    target = 2\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(nums)-count+1):\n        subarray = nums[i:i+count]\n        if all(subarray[j] * target == subarray[j+1] for j in range(count-1)):\n            return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 4, 8, 16], target: int = 2, count: int = 3):\n    return (nums, target, count)\n\nassert f(*g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 416, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a subarray of 'count' numbers that form a valid geometric progression with a common ratio of 'target'.\n\n    Sample Input:\n    nums = [1, 2, 4, 8, 16]\n    target = 2\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(nums)-count+1):\n        subarray = nums[i:i+count]\n        if all(subarray[j] * target == subarray[j+1] for j in range(count-1)):\n            return True\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 4, 8, 16], target: int = 2, count: int = 3):\n    return (nums, target, count)", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are exactly 'count' numbers that form a valid arithmetic progression with a common difference of 'target'.\n\n    Sample Input:\n    nums = [1, 3, 5, 7, 9]\n    target = 2\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(nums[i] + target == nums[i+1] and nums[i+1] + target == nums[i+2] for i in range(len(nums)-2))\n\ndef g(nums: List[int] = [1, 3, 5, 7, 9], target: int = 2, count: int = 3):\n    return (nums, target, count)\n\nassert f(*g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 416, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are exactly 'count' numbers that form a valid arithmetic progression with a common difference of 'target'.\n\n    Sample Input:\n    nums = [1, 3, 5, 7, 9]\n    target = 2\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(nums[i] + target == nums[i+1] and nums[i+1] + target == nums[i+2] for i in range(len(nums)-2))", "solution_func": "def g(nums: List[int] = [1, 3, 5, 7, 9], target: int = 2, count: int = 3):\n    return (nums, target, count)", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\n\ndef f(nums: List[int], n: int) -> int:\n    \"\"\"\n    Find the maximum product of n consecutive numbers in the given list.\n    \"\"\"\n    max_product = 0\n    for i in range(len(nums) - n + 1):\n        product = 1\n        for j in range(i, i + n):\n            product *= nums[j]\n        max_product = max(max_product, product)\n    return max_product\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), 3) == 504\n\n\n", "emb": null, "idx_generation": 417, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int], n: int) -> int:\n    \"\"\"\n    Find the maximum product of n consecutive numbers in the given list.\n    \"\"\"\n    max_product = 0\n    for i in range(len(nums) - n + 1):\n        product = 1\n        for j in range(i, i + n):\n            product *= nums[j]\n        max_product = max(max_product, product)\n    return max_product", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Rearrange the numbers in the given list such that all even numbers appear first, followed by all odd numbers.\n    \"\"\"\n    evens = []\n    odds = []\n    for num in nums:\n        if num % 2 == 0:\n            evens.append(num)\n        else:\n            odds.append(num)\n    return evens + odds\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == [2, 4, 6, 8, 10, 1, 3, 5, 7, 9]\n\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 417, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Rearrange the numbers in the given list such that all even numbers appear first, followed by all odd numbers.\n    \"\"\"\n    evens = []\n    odds = []\n    for num in nums:\n        if num % 2 == 0:\n            evens.append(num)\n        else:\n            odds.append(num)\n    return evens + odds", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Count the number of distinct elements in the given list.\n    \"\"\"\n    distinct_nums = set(nums)\n    return len(distinct_nums)\n\ndef g():\n    return [1, 2, 3, 4, 5, 5, 4, 3, 2, 1]\n\nassert f(g()) == 5\n\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 417, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Count the number of distinct elements in the given list.\n    \"\"\"\n    distinct_nums = set(nums)\n    return len(distinct_nums)", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 5, 4, 3, 2, 1]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a number that is a prime number.\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return any(is_prime(num) for num in nums)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 417, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a number that is a prime number.\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return any(is_prime(num) for num in nums)", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a number that is a perfect cube.\n    \"\"\"\n    def is_perfect_cube(n):\n        return int(n ** (1 / 3)) ** 3 == n\n\n    return any(is_perfect_cube(num) for num in nums)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 417, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a number that is a perfect cube.\n    \"\"\"\n    def is_perfect_cube(n):\n        return int(n ** (1 / 3)) ** 3 == n\n\n    return any(is_perfect_cube(num) for num in nums)", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a number that is a Fibonacci number.\n    \"\"\"\n    def is_perfect_square(n):\n        return int(n ** 0.5) ** 2 == n\n\n    def is_fibonacci(n):\n        return is_perfect_square(5 * n ** 2 + 4) or is_perfect_square(5 * n ** 2 - 4)\n\n    return any(is_fibonacci(num) for num in nums)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 417, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a number that is a Fibonacci number.\n    \"\"\"\n    def is_perfect_square(n):\n        return int(n ** 0.5) ** 2 == n\n\n    def is_fibonacci(n):\n        return is_perfect_square(5 * n ** 2 + 4) or is_perfect_square(5 * n ** 2 - 4)\n\n    return any(is_fibonacci(num) for num in nums)", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with the even numbers in ascending order followed by the odd numbers in descending order.\n    \"\"\"\n    even_nums = sorted([num for num in nums if num % 2 == 0])\n    odd_nums = sorted([num for num in nums if num % 2 != 0], reverse=True)\n    return even_nums + odd_nums\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g()) == [2, 4, 6, 8, 10, 9, 7, 5, 3, 1]\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 417, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with the even numbers in ascending order followed by the odd numbers in descending order.\n    \"\"\"\n    even_nums = sorted([num for num in nums if num % 2 == 0])\n    odd_nums = sorted([num for num in nums if num % 2 != 0], reverse=True)\n    return even_nums + odd_nums", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix (2D list of integers), transpose the matrix.\n    The transpose of a matrix is obtained by turning its rows into columns and vice versa.\n    \"\"\"\n    return [list(row) for row in zip(*matrix)]\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 417, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix (2D list of integers), transpose the matrix.\n    The transpose of a matrix is obtained by turning its rows into columns and vice versa.\n    \"\"\"\n    return [list(row) for row in zip(*matrix)]", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target value, find two numbers in the list that add up to the target.\n    Return the indices of the two numbers in a list.\n    \"\"\"\n    num_map = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_map:\n            return [num_map[complement], i]\n        num_map[num] = i\n    return []\n\ndef g(nums=[2, 4, 6, 8, 10], target=16):\n    return (nums, target)\n\nassert f(*g()) == [1, 3]\n", "emb": null, "idx_generation": 417, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target value, find two numbers in the list that add up to the target.\n    Return the indices of the two numbers in a list.\n    \"\"\"\n    num_map = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_map:\n            return [num_map[complement], i]\n        num_map[num] = i\n    return []", "solution_func": "def g(nums=[2, 4, 6, 8, 10], target=16):\n    return (nums, target)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], n: int) -> bool:\n    \"\"\"\n    Check if there are n consecutive numbers in the given list.\n    \"\"\"\n    for i in range(len(nums) - n + 1):\n        if all(nums[i+j] == nums[i+j+1] - 1 for j in range(n-1)):\n            return True\n    return False\n\ndef g(n=3):\n    return [4, 5, 6, 1, 2, 3, 7, 8, 9]\n\nassert f(g(), n=3) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 417, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], n: int) -> bool:\n    \"\"\"\n    Check if there are n consecutive numbers in the given list.\n    \"\"\"\n    for i in range(len(nums) - n + 1):\n        if all(nums[i+j] == nums[i+j+1] - 1 for j in range(n-1)):\n            return True\n    return False", "solution_func": "def g(n=3):\n    return [4, 5, 6, 1, 2, 3, 7, 8, 9]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"Find two numbers in the list that add up to the given target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return [nums[i], nums[j]]\n    return []\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g(), target=10) == [1, 9]\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 418, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"Find two numbers in the list that add up to the given target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return [nums[i], nums[j]]\n    return []", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if the given target exists in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=5):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g(), target=5) == True\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 418, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if the given target exists in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g(target=5):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(students: List[Dict[str, Union[str, int]]], group: str) -> List[str]:\n    \"\"\"Return a list of student names belonging to the given group.\"\"\"\n    group_students = []\n    for student in students:\n        if student['group'] == group:\n            group_students.append(student['name'])\n    return group_students\n\ndef g(group='Math'):\n    return [\n        {'name': 'Alice', 'age': 15, 'group': 'Math'},\n        {'name': 'Bob', 'age': 16, 'group': 'Science'},\n        {'name': 'Charlie', 'age': 15, 'group': 'Math'},\n        {'name': 'David', 'age': 16, 'group': 'English'},\n        {'name': 'Eve', 'age': 15, 'group': 'Math'}\n    ]\n\nassert f(g(), group='Math') == ['Alice', 'Charlie', 'Eve']\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 418, "target_skills": null, "problem_func": "from typing import*\ndef f(students: List[Dict[str, Union[str, int]]], group: str) -> List[str]:\n    \"\"\"Return a list of student names belonging to the given group.\"\"\"\n    group_students = []\n    for student in students:\n        if student['group'] == group:\n            group_students.append(student['name'])\n    return group_students", "solution_func": "def g(group='Math'):\n    return [\n        {'name': 'Alice', 'age': 15, 'group': 'Math'},\n        {'name': 'Bob', 'age': 16, 'group': 'Science'},\n        {'name': 'Charlie', 'age': 15, 'group': 'Math'},\n        {'name': 'David', 'age': 16, 'group': 'English'},\n        {'name': 'Eve', 'age': 15, 'group': 'Math'}\n    ]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains any duplicate elements.\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == False\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 418, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains any duplicate elements.\n    \"\"\"\n    return len(nums) != len(set(nums))", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"madam\"\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 418, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]", "solution_func": "def g():\n    return \"madam\"", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(grid: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a sudoku solution.\n    A sudoku solution must satisfy all of the following rules:\n    1. Each of the digits 1-9 must occur exactly once in each row.\n    2. Each of the digits 1-9 must occur exactly once in each column.\n    3. Each of the the digits 1-9 must occur exactly once in each of the 9 3x3 sub-grids.\n\n    Sample Input:\n    grid = [[5, 3, 0, 0, 7, 0, 0, 0, 0],\n            [6, 0, 0, 1, 9, 5, 0, 0, 0],\n            [0, 9, 8, 0, 0, 0, 0, 6, 0],\n            [8, 0, 0, 0, 6, 0, 0, 0, 3],\n            [4, 0, 0, 8, 0, 3, 0, 0, 1],\n            [7, 0, 0, 0, 2, 0, 0, 0, 6],\n            [0, 6, 0, 0, 0, 0, 2, 8, 0],\n            [0, 0, 0, 4, 1, 9, 0, 0, 5],\n            [0, 0, 0, 0, 8, 0, 0, 7, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    def has_duplicate(arr: List[int]) -> bool:\n        seen = set()\n        for num in arr:\n            if num != 0 and num in seen:\n                return True\n            seen.add(num)\n        return False\n\n    for row in grid:\n        if has_duplicate(row):\n            return False\n\n    for col in zip(*grid):\n        if has_duplicate(col):\n            return False\n\n    for i in range(3):\n        for j in range(3):\n            subgrid = [grid[x][y] for x in range(i*3, (i+1)*3) for y in range(j*3, (j+1)*3)]\n            if has_duplicate(subgrid):\n                return False\n\n    return True\n\ndef g(grid: List[List[int]] = [[5, 3, 0, 0, 7, 0, 0, 0, 0],\n                               [6, 0, 0, 1, 9, 5, 0, 0, 0],\n                               [0, 9, 8, 0, 0, 0, 0, 6, 0],\n                               [8, 0, 0, 0, 6, 0, 0, 0, 3],\n                               [4, 0, 0, 8, 0, 3, 0, 0, 1],\n                               [7, 0, 0, 0, 2, 0, 0, 0, 6],\n                               [0, 6, 0, 0, 0, 0, 2, 8, 0],\n                               [0, 0, 0, 4, 1, 9, 0, 0, 5],\n                               [0, 0, 0, 0, 8, 0, 0, 7, 9]]):\n    return grid\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 418, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(grid: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a sudoku solution.\n    A sudoku solution must satisfy all of the following rules:\n    1. Each of the digits 1-9 must occur exactly once in each row.\n    2. Each of the digits 1-9 must occur exactly once in each column.\n    3. Each of the the digits 1-9 must occur exactly once in each of the 9 3x3 sub-grids.\n\n    Sample Input:\n    grid = [[5, 3, 0, 0, 7, 0, 0, 0, 0],\n            [6, 0, 0, 1, 9, 5, 0, 0, 0],\n            [0, 9, 8, 0, 0, 0, 0, 6, 0],\n            [8, 0, 0, 0, 6, 0, 0, 0, 3],\n            [4, 0, 0, 8, 0, 3, 0, 0, 1],\n            [7, 0, 0, 0, 2, 0, 0, 0, 6],\n            [0, 6, 0, 0, 0, 0, 2, 8, 0],\n            [0, 0, 0, 4, 1, 9, 0, 0, 5],\n            [0, 0, 0, 0, 8, 0, 0, 7, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    def has_duplicate(arr: List[int]) -> bool:\n        seen = set()\n        for num in arr:\n            if num != 0 and num in seen:\n                return True\n            seen.add(num)\n        return False\n\n    for row in grid:\n        if has_duplicate(row):\n            return False\n\n    for col in zip(*grid):\n        if has_duplicate(col):\n            return False\n\n    for i in range(3):\n        for j in range(3):\n            subgrid = [grid[x][y] for x in range(i*3, (i+1)*3) for y in range(j*3, (j+1)*3)]\n            if has_duplicate(subgrid):\n                return False\n\n    return True", "solution_func": "def g(grid: List[List[int]] = [[5, 3, 0, 0, 7, 0, 0, 0, 0],\n                               [6, 0, 0, 1, 9, 5, 0, 0, 0],\n                               [0, 9, 8, 0, 0, 0, 0, 6, 0],\n                               [8, 0, 0, 0, 6, 0, 0, 0, 3],\n                               [4, 0, 0, 8, 0, 3, 0, 0, 1],\n                               [7, 0, 0, 0, 2, 0, 0, 0, 6],\n                               [0, 6, 0, 0, 0, 0, 2, 8, 0],\n                               [0, 0, 0, 4, 1, 9, 0, 0, 5],\n                               [0, 0, 0, 0, 8, 0, 0, 7, 9]]):\n    return grid", "map_ix": [1, 1, 0, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if each row and column has the same sum.\n\n    Sample Input:\n    arr = [[2, 4, 6], [8, 10, 12], [14, 16, 18]]\n\n    Sample Output:\n    True\n    \"\"\"\n    row_sum = [sum(row) for row in arr]\n    column_sum = [sum(column) for column in zip(*arr)]\n    return len(set(row_sum + column_sum)) == 1\n\ndef g(arr: List[List[int]]):\n    return arr\n\nassert f(g([[2, 4, 6], [8, 10, 12], [14, 16, 18]])) == True\n", "emb": null, "idx_generation": 418, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if each row and column has the same sum.\n\n    Sample Input:\n    arr = [[2, 4, 6], [8, 10, 12], [14, 16, 18]]\n\n    Sample Output:\n    True\n    \"\"\"\n    row_sum = [sum(row) for row in arr]\n    column_sum = [sum(column) for column in zip(*arr)]\n    return len(set(row_sum + column_sum)) == 1", "solution_func": "def g(arr: List[List[int]]):\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if there exists a row and a column that have the same sum.\n\n    Sample Input:\n    arr = [[2, 4, 6], [8, 10, 12], [14, 16, 18]]\n\n    Sample Output:\n    True\n    \"\"\"\n    row_sum = [sum(row) for row in arr]\n    column_sum = [sum(column) for column in zip(*arr)]\n    return any(sum_value in column_sum for sum_value in row_sum)\n\ndef g(arr: List[List[int]]):\n    return arr\n\nassert f(g([[2, 4, 6], [8, 10, 12], [14, 16, 18]])) == True\n", "emb": [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 418, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if there exists a row and a column that have the same sum.\n\n    Sample Input:\n    arr = [[2, 4, 6], [8, 10, 12], [14, 16, 18]]\n\n    Sample Output:\n    True\n    \"\"\"\n    row_sum = [sum(row) for row in arr]\n    column_sum = [sum(column) for column in zip(*arr)]\n    return any(sum_value in column_sum for sum_value in row_sum)", "solution_func": "def g(arr: List[List[int]]):\n    return arr", "map_ix": [1, 1, 1, 1, 0, 1, 1, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if there exists a row and a column that have the same sum,\n    but the sum is not equal to zero.\n\n    Sample Input:\n    arr = [[2, 4, 6], [8, 10, 12], [14, 16, 18]]\n\n    Sample Output:\n    True\n    \"\"\"\n    row_sum = [sum(row) for row in arr]\n    column_sum = [sum(column) for column in zip(*arr)]\n    return any(sum_value in column_sum and sum_value != 0 for sum_value in row_sum)\n\ndef g(arr: List[List[int]]):\n    return arr\n\nassert f(g([[2, 4, 6], [8, 10, 12], [14, 16, 18]])) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 418, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if there exists a row and a column that have the same sum,\n    but the sum is not equal to zero.\n\n    Sample Input:\n    arr = [[2, 4, 6], [8, 10, 12], [14, 16, 18]]\n\n    Sample Output:\n    True\n    \"\"\"\n    row_sum = [sum(row) for row in arr]\n    column_sum = [sum(column) for column in zip(*arr)]\n    return any(sum_value in column_sum and sum_value != 0 for sum_value in row_sum)", "solution_func": "def g(arr: List[List[int]]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are any 'count' numbers that form a valid geometric progression with a common ratio of 'target'.\n\n    Sample Input:\n    nums = [1, 3, 9, 27, 81]\n    target = 3\n    count = 4\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(nums[i] * target == nums[i+1] and nums[i+1] * target == nums[i+2] and nums[i+2] * target == nums[i+3] for i in range(len(nums)-count+1))\n\ndef g(nums: List[int] = [1, 3, 9, 27, 81], target: int = 3, count: int = 4):\n    return (nums, target, count)\n\nassert f(*g())\n", "emb": [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0], "idx_generation": 418, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are any 'count' numbers that form a valid geometric progression with a common ratio of 'target'.\n\n    Sample Input:\n    nums = [1, 3, 9, 27, 81]\n    target = 3\n    count = 4\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(nums[i] * target == nums[i+1] and nums[i+1] * target == nums[i+2] and nums[i+2] * target == nums[i+3] for i in range(len(nums)-count+1))", "solution_func": "def g(nums: List[int] = [1, 3, 9, 27, 81], target: int = 3, count: int = 4):\n    return (nums, target, count)", "map_ix": [0, 0, 1, 0, 0, 0, 1, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> int:\n    \"\"\"\n    Given a list of integers nums and an integer k, return the sum of the k largest elements in the list.\n\n    Example:\n    nums = [1, 5, 3, 2, 4]\n    k = 3\n\n    Output: 11\n\n    Explanation: The three largest elements in the list are 5, 4, and 3. Their sum is 5 + 4 + 3 = 12.\n    \"\"\"\n    return sum(sorted(nums)[-k:])\n\ndef g(nums=[1, 5, 3, 2, 4], k=3):\n    return nums, k\n\nassert f(*g()) == 11\n", "emb": null, "idx_generation": 419, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> int:\n    \"\"\"\n    Given a list of integers nums and an integer k, return the sum of the k largest elements in the list.\n\n    Example:\n    nums = [1, 5, 3, 2, 4]\n    k = 3\n\n    Output: 11\n\n    Explanation: The three largest elements in the list are 5, 4, and 3. Their sum is 5 + 4 + 3 = 12.\n    \"\"\"\n    return sum(sorted(nums)[-k:])", "solution_func": "def g(nums=[1, 5, 3, 2, 4], k=3):\n    return nums, k", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers nums and a target number, return True if there exists a pair of numbers in the list whose sum is equal to the target, False otherwise.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 8\n\n    Output: True\n\n    Explanation: There exists a pair of numbers in the list whose sum is 8 (3 + 5).\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=8):\n    return nums, target\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 419, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers nums and a target number, return True if there exists a pair of numbers in the list whose sum is equal to the target, False otherwise.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 8\n\n    Output: True\n\n    Explanation: There exists a pair of numbers in the list whose sum is 8 (3 + 5).\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=8):\n    return nums, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers nums, find the maximum difference between two successive elements in its sorted form.\n\n    Example:\n    nums = [6, 2, 9, 1, 7]\n\n    Output: 5\n\n    Explanation: The sorted form of the list is [1, 2, 6, 7, 9]. The maximum difference between two successive elements is between 2 and 6, which is 5.\n    \"\"\"\n    nums.sort()\n    max_diff = 0\n    for i in range(1, len(nums)):\n        diff = nums[i] - nums[i-1]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n\ndef g(nums=[6, 2, 9, 1, 7]):\n    return nums\n\nassert f(*g()) == 5\n", "emb": null, "idx_generation": 419, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers nums, find the maximum difference between two successive elements in its sorted form.\n\n    Example:\n    nums = [6, 2, 9, 1, 7]\n\n    Output: 5\n\n    Explanation: The sorted form of the list is [1, 2, 6, 7, 9]. The maximum difference between two successive elements is between 2 and 6, which is 5.\n    \"\"\"\n    nums.sort()\n    max_diff = 0\n    for i in range(1, len(nums)):\n        diff = nums[i] - nums[i-1]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff", "solution_func": "def g(nums=[6, 2, 9, 1, 7]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if it is a magic square.\n    A magic square is a square matrix in which the sum of each row, each column, and both diagonals is the same.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for col in zip(*matrix):\n        if sum(col) != target_sum:\n            return False\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(matrix[i][n-1-i] for i in range(n)) != target_sum:\n        return False\n    return True\ndef g(matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 419, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if it is a magic square.\n    A magic square is a square matrix in which the sum of each row, each column, and both diagonals is the same.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for col in zip(*matrix):\n        if sum(col) != target_sum:\n            return False\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(matrix[i][n-1-i] for i in range(n)) != target_sum:\n        return False\n    return True", "solution_func": "def g(matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix", "map_ix": [1, 0, 1, 1, 0, 1, 1, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, find two distinct integers in the list such that their sum is equal to the target value.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\ndef g(nums = [1, 6, 4, 2, 3]):\n    return nums\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 419, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, find two distinct integers in the list such that their sum is equal to the target value.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums = [1, 6, 4, 2, 3]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it contains a subarray with a sum equal to zero.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum in prefix_sums or prefix_sum == 0:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\ndef g(nums = [4, -2, 3, 1, 6]):\n    return nums\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 419, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it contains a subarray with a sum equal to zero.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum in prefix_sums or prefix_sum == 0:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False", "solution_func": "def g(nums = [4, -2, 3, 1, 6]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Find the sum of all elements in the matrix\n    \"\"\"\n    sum = 0\n    for row in matrix:\n        for num in row:\n            sum += num\n    return sum\n\ndef g(size=3):\n    \"\"\"\n    Generate a matrix of the given size with random elements\n    \"\"\"\n    import random\n    return [[random.randint(1, 10) for _ in range(size)] for _ in range(size)]\n\nassert f(g()) == 45\n", "emb": null, "idx_generation": 419, "target_skills": null, "problem_func": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Find the sum of all elements in the matrix\n    \"\"\"\n    sum = 0\n    for row in matrix:\n        for num in row:\n            sum += num\n    return sum", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a matrix of the given size with random elements\n    \"\"\"\n    import random\n    return [[random.randint(1, 10) for _ in range(size)] for _ in range(size)]", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transpose the given matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    transposed = [[0 for _ in range(rows)] for _ in range(cols)]\n    for i in range(rows):\n        for j in range(cols):\n            transposed[j][i] = matrix[i][j]\n    return transposed\n\ndef g(size=3):\n    \"\"\"\n    Generate a matrix of the given size with random elements\n    \"\"\"\n    import random\n    return [[random.randint(1, 10) for _ in range(size)] for _ in range(size)]\n\nassert f(g()) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n", "emb": null, "idx_generation": 419, "target_skills": null, "problem_func": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transpose the given matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    transposed = [[0 for _ in range(rows)] for _ in range(cols)]\n    for i in range(rows):\n        for j in range(cols):\n            transposed[j][i] = matrix[i][j]\n    return transposed", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a matrix of the given size with random elements\n    \"\"\"\n    import random\n    return [[random.randint(1, 10) for _ in range(size)] for _ in range(size)]", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Find the sum of each row in the matrix and return a list of the sums\n    \"\"\"\n    sums = []\n    for row in matrix:\n        row_sum = sum(row)\n        sums.append(row_sum)\n    return sums\n\ndef g(size=3):\n    \"\"\"\n    Generate a matrix of the given size with random elements\n    \"\"\"\n    import random\n    return [[random.randint(1, 10) for _ in range(size)] for _ in range(size)]\n\nassert f(g()) == [6, 15, 24]\n", "emb": null, "idx_generation": 419, "target_skills": null, "problem_func": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Find the sum of each row in the matrix and return a list of the sums\n    \"\"\"\n    sums = []\n    for row in matrix:\n        row_sum = sum(row)\n        sums.append(row_sum)\n    return sums", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a matrix of the given size with random elements\n    \"\"\"\n    import random\n    return [[random.randint(1, 10) for _ in range(size)] for _ in range(size)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import *\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if each row and each column contains unique values.\n    \"\"\"\n    row_set = set()\n    column_set = set()\n    \n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] in row_set:\n                return False\n            row_set.add(matrix[i][j])\n            \n            if matrix[j][i] in column_set:\n                return False\n            column_set.add(matrix[j][i])\n    \n    return True\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 419, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if each row and each column contains unique values.\n    \"\"\"\n    row_set = set()\n    column_set = set()\n    \n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] in row_set:\n                return False\n            row_set.add(matrix[i][j])\n            \n            if matrix[j][i] in column_set:\n                return False\n            column_set.add(matrix[j][i])\n    \n    return True", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(seq: List[int], n=12, length=6) -> bool:\n    \"\"\"\n    Given a sequence of integers, check if there exists a subsequence of a given length that adds up to a target number.\n    If such a subsequence exists, return True. Otherwise, return False.\n    \"\"\"\n    if len(seq) < length:\n        return False\n    \n    for i in range(len(seq)-length+1):\n        if sum(seq[i:i+length]) == n:\n            return True\n    \n    return False\n\ndef g(n = 12, length = 6):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 420, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(seq: List[int], n=12, length=6) -> bool:\n    \"\"\"\n    Given a sequence of integers, check if there exists a subsequence of a given length that adds up to a target number.\n    If such a subsequence exists, return True. Otherwise, return False.\n    \"\"\"\n    if len(seq) < length:\n        return False\n    \n    for i in range(len(seq)-length+1):\n        if sum(seq[i:i+length]) == n:\n            return True\n    \n    return False", "solution_func": "def g(n = 12, length = 6):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 20) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a triplet of numbers whose product is equal to the target.\n    If such a triplet exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] * nums[j] * nums[k] == target:\n                    return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == False\n\n", "emb": null, "idx_generation": 420, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 20) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a triplet of numbers whose product is equal to the target.\n    If such a triplet exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] * nums[j] * nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there is a pair of numbers whose product is equal to the last number in the list.\n\n    Sample Input:\n    [1, 2, 3, 4, 7]\n\n    Sample Output:\n    False\n    \"\"\"\n    target = arr[-1]\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)-1):\n            if arr[i] * arr[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 7]\n\nassert f(g()) == False\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 420, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there is a pair of numbers whose product is equal to the last number in the list.\n\n    Sample Input:\n    [1, 2, 3, 4, 7]\n\n    Sample Output:\n    False\n    \"\"\"\n    target = arr[-1]\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)-1):\n            if arr[i] * arr[j] == target:\n                return True\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 7]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to an odd number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if (nums[i] + nums[j]) % 2 == 1:\n                return True\n    return False\n\ndef g(nums=[1, 3, 5, 7]):\n    return nums\n\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 420, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to an odd number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if (nums[i] + nums[j]) % 2 == 1:\n                return True\n    return False", "solution_func": "def g(nums=[1, 3, 5, 7]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that have a difference of more than 10.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if abs(nums[i] - nums[j]) > 10:\n                return True\n    return False\n\ndef g(nums=[2, 12, 22, 32]):\n    return nums\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 420, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that have a difference of more than 10.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if abs(nums[i] - nums[j]) > 10:\n                return True\n    return False", "solution_func": "def g(nums=[2, 12, 22, 32]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that have a product greater than 100.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] > 100:\n                return True\n    return False\n\ndef g(nums=[5, 10, 15, 20]):\n    return nums\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 420, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that have a product greater than 100.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] > 100:\n                return True\n    return False", "solution_func": "def g(nums=[5, 10, 15, 20]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if all the rows and columns have unique elements.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n    \n    # Check for duplicate elements in each row\n    for row in arr:\n        if len(set(row)) != cols:\n            return False\n    \n    # Check for duplicate elements in each column\n    for j in range(cols):\n        column = [arr[i][j] for i in range(rows)]\n        if len(set(column)) != rows:\n            return False\n    \n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 420, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if all the rows and columns have unique elements.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n    \n    # Check for duplicate elements in each row\n    for row in arr:\n        if len(set(row)) != cols:\n            return False\n    \n    # Check for duplicate elements in each column\n    for j in range(cols):\n        column = [arr[i][j] for i in range(rows)]\n        if len(set(column)) != rows:\n            return False\n    \n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if every element in the grid is divisible by its row index.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n    \n    for i in range(rows):\n        for j in range(cols):\n            if arr[i][j] % i != 0:\n                return False\n    \n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 420, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if every element in the grid is divisible by its row index.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n    \n    for i in range(rows):\n        for j in range(cols):\n            if arr[i][j] % i != 0:\n                return False\n    \n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the sum of each row is equal to the sum of each column.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n    \n    row_sums = [sum(row) for row in arr]\n    col_sums = [sum([arr[i][j] for i in range(rows)]) for j in range(cols)]\n    \n    return row_sums == col_sums\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 420, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the sum of each row is equal to the sum of each column.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n    \n    row_sums = [sum(row) for row in arr]\n    col_sums = [sum([arr[i][j] for i in range(rows)]) for j in range(cols)]\n    \n    return row_sums == col_sums", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, target_sum: int = 100) -> bool:\n    \"\"\"\n    Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n    * if n is even, divide n by 2,\n    * if n is odd, multiply n by 3 and add 1\n    Check if it is possible to reach a target sum starting from n, within a certain number of steps.\n    Return True if possible, False otherwise.\n    \"\"\"\n    def reach_target_sum(n, target_sum, steps):\n        if target_sum == 0:\n            return True\n        if steps == 0 or n == 0:\n            return False\n        if n % 2 == 0:\n            return reach_target_sum(n // 2, target_sum - n, steps - 1)\n        else:\n            return reach_target_sum((n * 3) + 1, target_sum - n, steps - 1)\n\n    return reach_target_sum(n, target_sum, 10)\n\ndef g(n=10, target_sum=100):\n    return (n, target_sum)\n\nassert f(g()) == False\n\n", "emb": null, "idx_generation": 420, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, target_sum: int = 100) -> bool:\n    \"\"\"\n    Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n    * if n is even, divide n by 2,\n    * if n is odd, multiply n by 3 and add 1\n    Check if it is possible to reach a target sum starting from n, within a certain number of steps.\n    Return True if possible, False otherwise.\n    \"\"\"\n    def reach_target_sum(n, target_sum, steps):\n        if target_sum == 0:\n            return True\n        if steps == 0 or n == 0:\n            return False\n        if n % 2 == 0:\n            return reach_target_sum(n // 2, target_sum - n, steps - 1)\n        else:\n            return reach_target_sum((n * 3) + 1, target_sum - n, steps - 1)\n\n    return reach_target_sum(n, target_sum, 10)", "solution_func": "def g(n=10, target_sum=100):\n    return (n, target_sum)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target, check if there exists a combination of exactly 3 numbers from the list\n    that adds up to the target value. If such a combination exists, return True. Otherwise, return False.\n    \"\"\"\n    def backtrack(curr_sum: int, index: int, count: int) -> bool:\n        if curr_sum == target and count == 3:\n            return True\n        if curr_sum > target or index >= len(numbers) or count > 3:\n            return False\n\n        for i in range(index, len(numbers)):\n            if backtrack(curr_sum + numbers[i], i + 1, count + 1):\n                return True\n\n        return False\n\n    return backtrack(0, 0, 0)\n\ndef g(target=10):\n    \"\"\"Generate a list of numbers.\"\"\"\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 10) == True\n\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 421, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target, check if there exists a combination of exactly 3 numbers from the list\n    that adds up to the target value. If such a combination exists, return True. Otherwise, return False.\n    \"\"\"\n    def backtrack(curr_sum: int, index: int, count: int) -> bool:\n        if curr_sum == target and count == 3:\n            return True\n        if curr_sum > target or index >= len(numbers) or count > 3:\n            return False\n\n        for i in range(index, len(numbers)):\n            if backtrack(curr_sum + numbers[i], i + 1, count + 1):\n                return True\n\n        return False\n\n    return backtrack(0, 0, 0)", "solution_func": "def g(target=10):\n    \"\"\"Generate a list of numbers.\"\"\"\n    return [1, 2, 3, 4, 5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(strings: List[str]) -> bool:\n    \"\"\"\n    Given a list of strings, check if there exists a string that is a palindrome.\n    \"\"\"\n    return any(string == string[::-1] for string in strings)\n\ndef g():\n    \"\"\"Generate a list of strings.\"\"\"\n    return [\"abc\", \"def\", \"racecar\"]\n\nassert f(g()) == True\n\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 421, "target_skills": null, "problem_func": "from typing import*\ndef f(strings: List[str]) -> bool:\n    \"\"\"\n    Given a list of strings, check if there exists a string that is a palindrome.\n    \"\"\"\n    return any(string == string[::-1] for string in strings)", "solution_func": "def g():\n    \"\"\"Generate a list of strings.\"\"\"\n    return [\"abc\", \"def\", \"racecar\"]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(numbers: List[int], target: int) -> List[List[int]]:\n    \"\"\"\n    Given a list of numbers and a target, find all the combinations of numbers from the list\n    that add up to the target value and return them as a list of lists.\n    \"\"\"\n    def backtrack(curr_sum: int, index: int, path: List[int], result: List[List[int]]) -> None:\n        if curr_sum == target:\n            result.append(path[:])\n        if curr_sum > target or index >= len(numbers):\n            return\n\n        for i in range(index, len(numbers)):\n            path.append(numbers[i])\n            backtrack(curr_sum + numbers[i], i, path, result)\n            path.pop()\n\n    result = []\n    backtrack(0, 0, [], result)\n    return result\n\ndef g(target=10):\n    \"\"\"Generate a list of numbers.\"\"\"\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 10) == [[1, 2, 3, 4], [1, 4, 5], [2, 3, 5]]\n\n\n", "emb": null, "idx_generation": 421, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target: int) -> List[List[int]]:\n    \"\"\"\n    Given a list of numbers and a target, find all the combinations of numbers from the list\n    that add up to the target value and return them as a list of lists.\n    \"\"\"\n    def backtrack(curr_sum: int, index: int, path: List[int], result: List[List[int]]) -> None:\n        if curr_sum == target:\n            result.append(path[:])\n        if curr_sum > target or index >= len(numbers):\n            return\n\n        for i in range(index, len(numbers)):\n            path.append(numbers[i])\n            backtrack(curr_sum + numbers[i], i, path, result)\n            path.pop()\n\n    result = []\n    backtrack(0, 0, [], result)\n    return result", "solution_func": "def g(target=10):\n    \"\"\"Generate a list of numbers.\"\"\"\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find two numbers in the list such that their sum is equal to the target number.\n    Return True if such a pair exists, otherwise return False.\n\n    Sample Input:\n    nums = [2, 5, 7, 9, 12]\n    target = 17\n\n    Sample Output:\n    True\n    \"\"\"\n    complements = set()\n    for num in nums:\n        if num in complements:\n            return True\n        complements.add(target - num)\n    return False\n\ndef g(nums: List[int] = [2, 5, 7, 9, 12], target: int = 17):\n    return nums, target\n\nassert f(*g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0], "idx_generation": 421, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find two numbers in the list such that their sum is equal to the target number.\n    Return True if such a pair exists, otherwise return False.\n\n    Sample Input:\n    nums = [2, 5, 7, 9, 12]\n    target = 17\n\n    Sample Output:\n    True\n    \"\"\"\n    complements = set()\n    for num in nums:\n        if num in complements:\n            return True\n        complements.add(target - num)\n    return False", "solution_func": "def g(nums: List[int] = [2, 5, 7, 9, 12], target: int = 17):\n    return nums, target", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if it is a magic square.\n    A magic square is a square matrix in which the sum of every row, every column, and both diagonals is the same.\n\n    Sample Input:\n    matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != target_sum:\n            return False\n\n    # Check diagonal 1\n    diagonal_1_sum = sum(matrix[i][i] for i in range(n))\n    if diagonal_1_sum != target_sum:\n        return False\n\n    # Check diagonal 2\n    diagonal_2_sum = sum(matrix[i][n - i - 1] for i in range(n))\n    if diagonal_2_sum != target_sum:\n        return False\n\n    return True\n\ndef g(matrix: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 421, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if it is a magic square.\n    A magic square is a square matrix in which the sum of every row, every column, and both diagonals is the same.\n\n    Sample Input:\n    matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != target_sum:\n            return False\n\n    # Check diagonal 1\n    diagonal_1_sum = sum(matrix[i][i] for i in range(n))\n    if diagonal_1_sum != target_sum:\n        return False\n\n    # Check diagonal 2\n    diagonal_2_sum = sum(matrix[i][n - i - 1] for i in range(n))\n    if diagonal_2_sum != target_sum:\n        return False\n\n    return True", "solution_func": "def g(matrix: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(string: str, target_count=3) -> bool:\n    \"\"\"\n    Given a string, check if it contains exactly n occurrences of a specific character.\n    Return True if the string contains exactly n occurrences of the character, otherwise return False.\n\n    Sample Input:\n    string = 'abracadabra'\n    target_count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    target_char = string[0]\n    count = 0\n    for char in string:\n        if char == target_char:\n            count += 1\n    return count == target_count\n\ndef g(string: str = 'abracadabra', target_count: int = 3):\n    return string, target_count\n\nassert f(*g())\n", "emb": null, "idx_generation": 421, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, target_count=3) -> bool:\n    \"\"\"\n    Given a string, check if it contains exactly n occurrences of a specific character.\n    Return True if the string contains exactly n occurrences of the character, otherwise return False.\n\n    Sample Input:\n    string = 'abracadabra'\n    target_count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    target_char = string[0]\n    count = 0\n    for char in string:\n        if char == target_char:\n            count += 1\n    return count == target_count", "solution_func": "def g(string: str = 'abracadabra', target_count: int = 3):\n    return string, target_count", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if there exists a subarray (contiguous elements) whose sum is equal to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n\n    Sample Output:\n    True\n\n    Explanation:\n    The subarray [3, 4] has a sum of 7.\n    \"\"\"\n    n = len(nums)\n    prefix_sum = 0\n    prefix_sums = {0}\n    for i in range(n):\n        prefix_sum += nums[i]\n        if prefix_sum == target:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return (nums, target)\n\nassert f(*g()) == True\n", "emb": null, "idx_generation": 421, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if there exists a subarray (contiguous elements) whose sum is equal to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n\n    Sample Output:\n    True\n\n    Explanation:\n    The subarray [3, 4] has a sum of 7.\n    \"\"\"\n    n = len(nums)\n    prefix_sum = 0\n    prefix_sums = {0}\n    for i in range(n):\n        prefix_sum += nums[i]\n        if prefix_sum == target:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return (nums, target)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number k, determine if there exists a subsequence (not necessarily contiguous elements) whose sum is divisible by k.\n\n    Sample Input:\n    nums = [4, 8, 7, 2, 3, 1, 6, 5]\n    k = 13\n\n    Sample Output:\n    True\n\n    Explanation:\n    The subsequence [4, 8, 7, 2, 3, 1, 6] has a sum of 31 which is divisible by 13.\n    \"\"\"\n    n = len(nums)\n    sums = [0]\n    for i in range(n):\n        for j in range(len(sums)):\n            new_sum = sums[j] + nums[i]\n            if new_sum % k == 0:\n                return True\n            sums.append(new_sum)\n    return False\n\ndef g(nums: List[int] = [4, 8, 7, 2, 3, 1, 6, 5], k: int = 13):\n    return (nums, k)\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 421, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number k, determine if there exists a subsequence (not necessarily contiguous elements) whose sum is divisible by k.\n\n    Sample Input:\n    nums = [4, 8, 7, 2, 3, 1, 6, 5]\n    k = 13\n\n    Sample Output:\n    True\n\n    Explanation:\n    The subsequence [4, 8, 7, 2, 3, 1, 6] has a sum of 31 which is divisible by 13.\n    \"\"\"\n    n = len(nums)\n    sums = [0]\n    for i in range(n):\n        for j in range(len(sums)):\n            new_sum = sums[j] + nums[i]\n            if new_sum % k == 0:\n                return True\n            sums.append(new_sum)\n    return False", "solution_func": "def g(nums: List[int] = [4, 8, 7, 2, 3, 1, 6, 5], k: int = 13):\n    return (nums, k)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if there exists a subsequence (not necessarily contiguous elements) whose product is equal to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 60\n\n    Sample Output:\n    True\n\n    Explanation:\n    The subsequence [2, 3, 5] has a product of 60.\n    \"\"\"\n    n = len(nums)\n    products = [1]\n    for i in range(n):\n        for j in range(len(products)):\n            new_product = products[j] * nums[i]\n            if new_product == target:\n                return True\n            products.append(new_product)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 60):\n    return (nums, target)\n\nassert f(*g()) == True\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 421, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if there exists a subsequence (not necessarily contiguous elements) whose product is equal to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 60\n\n    Sample Output:\n    True\n\n    Explanation:\n    The subsequence [2, 3, 5] has a product of 60.\n    \"\"\"\n    n = len(nums)\n    products = [1]\n    for i in range(n):\n        for j in range(len(products)):\n            new_product = products[j] * nums[i]\n            if new_product == target:\n                return True\n            products.append(new_product)\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 60):\n    return (nums, target)", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, check if it is a palindrome.\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s: str):\n    \"\"\"\n    This solution returns the input string as is.\n    \"\"\"\n    return s\n\nassert f(g(\"racecar\"))\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 421, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, check if it is a palindrome.\n    \"\"\"\n    return s == s[::-1]", "solution_func": "def g(s: str):\n    \"\"\"\n    This solution returns the input string as is.\n    \"\"\"\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n", "emb": [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 422, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [1, 1, 1, 1, 0, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 422, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n", "emb": [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 422, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [1, 1, 1, 1, 0, 1, 1, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a diagonal matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a diagonal matrix of the given size.\n    \"\"\"\n    return [[1 if i == j else 0 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 422, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a diagonal matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a diagonal matrix of the given size.\n    \"\"\"\n    return [[1 if i == j else 0 for j in range(size)] for i in range(size)]", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Calculate the sum of all elements in the given matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    total = 0\n    for i in range(rows):\n        for j in range(cols):\n            total += matrix[i][j]\n    return total\n\ndef g(size=3):\n    \"\"\"\n    Generate a matrix of the given size with all elements set to 1.\n    \"\"\"\n    return [[1 for _ in range(size)] for _ in range(size)]\n\nassert f(g()) == 9\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 422, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Calculate the sum of all elements in the given matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    total = 0\n    for i in range(rows):\n        for j in range(cols):\n            total += matrix[i][j]\n    return total", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a matrix of the given size with all elements set to 1.\n    \"\"\"\n    return [[1 for _ in range(size)] for _ in range(size)]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    target_sum = rows * (rows**2 + 1) // 2\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum_1 = sum(matrix[i][i] for i in range(rows))\n    diagonal_sum_2 = sum(matrix[i][rows-i-1] for i in range(rows))\n    if any(sum != target_sum for sum in row_sums + col_sums + [diagonal_sum_1, diagonal_sum_2]):\n        return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a magic square of the given size.\n    \"\"\"\n    matrix = [[0 for _ in range(size)] for _ in range(size)]\n    i = size // 2\n    j = size - 1\n    num = 1\n    while num <= size**2:\n        if i == -1 and j == size:\n            j = size - 2\n            i = 0\n        else:\n            if j == size:\n                j = 0\n            if i < 0:\n                i = size - 1\n        if matrix[i][j]:\n            j -= 2\n            i += 1\n            continue\n        else:\n            matrix[i][j] = num\n            num += 1\n        j += 1\n        i -= 1\n    return matrix\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 422, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    target_sum = rows * (rows**2 + 1) // 2\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum_1 = sum(matrix[i][i] for i in range(rows))\n    diagonal_sum_2 = sum(matrix[i][rows-i-1] for i in range(rows))\n    if any(sum != target_sum for sum in row_sums + col_sums + [diagonal_sum_1, diagonal_sum_2]):\n        return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a magic square of the given size.\n    \"\"\"\n    matrix = [[0 for _ in range(size)] for _ in range(size)]\n    i = size // 2\n    j = size - 1\n    num = 1\n    while num <= size**2:\n        if i == -1 and j == size:\n            j = size - 2\n            i = 0\n        else:\n            if j == size:\n                j = 0\n            if i < 0:\n                i = size - 1\n        if matrix[i][j]:\n            j -= 2\n            i += 1\n            continue\n        else:\n            matrix[i][j] = num\n            num += 1\n        j += 1\n        i -= 1\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if there exists a pair of numbers in the list that multiply to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] == target:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 12):\n    return arr, target\n\nassert f(*g()) == True\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 422, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if there exists a pair of numbers in the list that multiply to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] == target:\n                return True\n    return False", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 12):\n    return arr, target", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"Given a list of integers and a value k, determine if there exists a subarray of the list with a sum greater than or equal to k.\"\"\"\n    for i in range(len(arr)):\n        curr_sum = 0\n        for j in range(i, len(arr)):\n            curr_sum += arr[j]\n            if curr_sum >= k:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], k: int = 9):\n    return arr, k\n\nassert f(*g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 422, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"Given a list of integers and a value k, determine if there exists a subarray of the list with a sum greater than or equal to k.\"\"\"\n    for i in range(len(arr)):\n        curr_sum = 0\n        for j in range(i, len(arr)):\n            curr_sum += arr[j]\n            if curr_sum >= k:\n                return True\n    return False", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5], k: int = 9):\n    return arr, k", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], n: int) -> bool:\n    \"\"\"Given a list of integers and a value n, determine if there exists a subsequence of the list with n elements in increasing order.\"\"\"\n    if n > len(arr):\n        return False\n    for i in range(len(arr) - n + 1):\n        subseq = arr[i:i+n]\n        if sorted(subseq) == subseq:\n            return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], n: int = 3):\n    return arr, n\n\nassert f(*g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 422, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], n: int) -> bool:\n    \"\"\"Given a list of integers and a value n, determine if there exists a subsequence of the list with n elements in increasing order.\"\"\"\n    if n > len(arr):\n        return False\n    for i in range(len(arr) - n + 1):\n        subseq = arr[i:i+n]\n        if sorted(subseq) == subseq:\n            return True\n    return False", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5], n: int = 3):\n    return arr, n", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size\n    \"\"\"\n    return [[0 if j > i else 1 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 422, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size\n    \"\"\"\n    return [[0 if j > i else 1 for j in range(size)] for i in range(size)]", "map_ix": [1, 0, 1, 0, 0, 0, 1, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(words: List[str], letter: str) -> int:\n    \"\"\"\n    Given a list of words and a letter, find and return the number of words in the list that start with the given letter.\n\n    Example:\n    words = [\"apple\", \"banana\", \"cherry\", \"orange\"]\n    letter = \"a\"\n    output: 1\n    \"\"\"\n    count = 0\n    for word in words:\n        if word[0] == letter:\n            count += 1\n    return count\n\ndef g():\n    words = [\"apple\", \"banana\", \"cherry\", \"orange\"]\n    letter = \"a\"\n    return (words, letter)\n\nassert f(*g()) == 1\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 423, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], letter: str) -> int:\n    \"\"\"\n    Given a list of words and a letter, find and return the number of words in the list that start with the given letter.\n\n    Example:\n    words = [\"apple\", \"banana\", \"cherry\", \"orange\"]\n    letter = \"a\"\n    output: 1\n    \"\"\"\n    count = 0\n    for word in words:\n        if word[0] == letter:\n            count += 1\n    return count", "solution_func": "def g():\n    words = [\"apple\", \"banana\", \"cherry\", \"orange\"]\n    letter = \"a\"\n    return (words, letter)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, find and return a new list containing only the even numbers from the original list in the same order.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    output: [2, 4, 6, 8, 10]\n    \"\"\"\n    even_nums = []\n    for num in nums:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g()) == [2, 4, 6, 8, 10]\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 423, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, find and return a new list containing only the even numbers from the original list in the same order.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    output: [2, 4, 6, 8, 10]\n    \"\"\"\n    even_nums = []\n    for num in nums:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(grades: List[float]) -> str:\n    \"\"\"\n    Given a list of grades, calculate and return the average grade as a letter grade.\n\n    The grading scale:\n    - A: 90-100\n    - B: 80-89\n    - C: 70-79\n    - D: 60-69\n    - F: 0-59\n\n    Example:\n    grades = [85, 92, 78, 90, 65]\n    output: \"B\"\n    \"\"\"\n    average = sum(grades) / len(grades)\n    if average >= 90:\n        return \"A\"\n    elif average >= 80:\n        return \"B\"\n    elif average >= 70:\n        return \"C\"\n    elif average >= 60:\n        return \"D\"\n    else:\n        return \"F\"\n\ndef g():\n    grades = [85, 92, 78, 90, 65]\n    return grades\n\nassert f(g()) == \"B\"\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 423, "target_skills": null, "problem_func": "from typing import*\ndef f(grades: List[float]) -> str:\n    \"\"\"\n    Given a list of grades, calculate and return the average grade as a letter grade.\n\n    The grading scale:\n    - A: 90-100\n    - B: 80-89\n    - C: 70-79\n    - D: 60-69\n    - F: 0-59\n\n    Example:\n    grades = [85, 92, 78, 90, 65]\n    output: \"B\"\n    \"\"\"\n    average = sum(grades) / len(grades)\n    if average >= 90:\n        return \"A\"\n    elif average >= 80:\n        return \"B\"\n    elif average >= 70:\n        return \"C\"\n    elif average >= 60:\n        return \"D\"\n    else:\n        return \"F\"", "solution_func": "def g():\n    grades = [85, 92, 78, 90, 65]\n    return grades", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D matrix of integers, check if the matrix is a symmetric matrix.\n    A symmetric matrix is a square matrix where the elements of the matrix are symmetric with respect to the main diagonal.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    \n    # Check if matrix is a square matrix\n    if len(matrix[0]) != n:\n        return False\n    \n    # Check if matrix is symmetric\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    \n    return True\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 423, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D matrix of integers, check if the matrix is a symmetric matrix.\n    A symmetric matrix is a square matrix where the elements of the matrix are symmetric with respect to the main diagonal.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    \n    # Check if matrix is a square matrix\n    if len(matrix[0]) != n:\n        return False\n    \n    # Check if matrix is symmetric\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    \n    return True", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D matrix of integers, check if the matrix is a Toeplitz matrix.\n    A Toeplitz matrix is a matrix where each descending diagonal from left to right is constant.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [4, 1, 2], [7, 4, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    \n    # Check if matrix is a square matrix\n    if len(matrix[0]) != n:\n        return False\n    \n    # Check if matrix is a Toeplitz matrix\n    for i in range(1, n):\n        for j in range(1, n):\n            if matrix[i][j] != matrix[i-1][j-1]:\n                return False\n    \n    return True\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 1, 2], [7, 4, 1]]):\n    return matrix\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 423, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D matrix of integers, check if the matrix is a Toeplitz matrix.\n    A Toeplitz matrix is a matrix where each descending diagonal from left to right is constant.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [4, 1, 2], [7, 4, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    \n    # Check if matrix is a square matrix\n    if len(matrix[0]) != n:\n        return False\n    \n    # Check if matrix is a Toeplitz matrix\n    for i in range(1, n):\n        for j in range(1, n):\n            if matrix[i][j] != matrix[i-1][j-1]:\n                return False\n    \n    return True", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 1, 2], [7, 4, 1]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D matrix of integers, check if the matrix is a sparse matrix.\n    A sparse matrix is a matrix where the majority of its elements are zero.\n\n    Sample Input:\n    matrix = [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\n    Sample Output:\n    True\n    \"\"\"\n    zero_count = 0\n    total_elements = 0\n    \n    for row in matrix:\n        zero_count += row.count(0)\n        total_elements += len(row)\n    \n    # Check if matrix is a sparse matrix\n    if zero_count / total_elements > 0.5:\n        return True\n    \n    return False\n\ndef g(matrix: List[List[int]] = [[1, 0, 0], [0, 2, 0], [0, 0, 3]]):\n    return matrix\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 423, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D matrix of integers, check if the matrix is a sparse matrix.\n    A sparse matrix is a matrix where the majority of its elements are zero.\n\n    Sample Input:\n    matrix = [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\n    Sample Output:\n    True\n    \"\"\"\n    zero_count = 0\n    total_elements = 0\n    \n    for row in matrix:\n        zero_count += row.count(0)\n        total_elements += len(row)\n    \n    # Check if matrix is a sparse matrix\n    if zero_count / total_elements > 0.5:\n        return True\n    \n    return False", "solution_func": "def g(matrix: List[List[int]] = [[1, 0, 0], [0, 2, 0], [0, 0, 3]]):\n    return matrix", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of a subarray.\n\n    Sample Input:\n    arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\n    Sample Output:\n    6\n    \"\"\"\n    if not arr:\n        return 0\n\n    max_sum = arr[0]\n    cur_sum = arr[0]\n\n    for i in range(1, len(arr)):\n        cur_sum = max(arr[i], cur_sum + arr[i])\n        max_sum = max(max_sum, cur_sum)\n\n    return max_sum\n\ndef g(arr: List[int] = [-2, 1, -3, 4, -1, 2, 1, -5, 4]):\n    return arr\n\nassert f(g()) == 6\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 423, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of a subarray.\n\n    Sample Input:\n    arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\n    Sample Output:\n    6\n    \"\"\"\n    if not arr:\n        return 0\n\n    max_sum = arr[0]\n    cur_sum = arr[0]\n\n    for i in range(1, len(arr)):\n        cur_sum = max(arr[i], cur_sum + arr[i])\n        max_sum = max(max_sum, cur_sum)\n\n    return max_sum", "solution_func": "def g(arr: List[int] = [-2, 1, -3, 4, -1, 2, 1, -5, 4]):\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(word: str, pattern: str) -> bool:\n    \"\"\"\n    Given a word and a pattern, check if the word matches the pattern.\n    The pattern consists of lowercase letters and the word consists of lowercase letters separated by a space.\n\n    Sample Input:\n    word = \"cat dog cat\"\n    pattern = \"aba\"\n\n    Sample Output:\n    True\n    \"\"\"\n    word_list = word.split()\n    pattern_list = list(pattern)\n\n    if len(word_list) != len(pattern_list):\n        return False\n\n    word_to_pattern = {}\n    pattern_to_word = {}\n\n    for i in range(len(word_list)):\n        word_char = word_list[i]\n        pattern_char = pattern_list[i]\n\n        if word_char in word_to_pattern:\n            if word_to_pattern[word_char] != pattern_char:\n                return False\n        else:\n            word_to_pattern[word_char] = pattern_char\n\n        if pattern_char in pattern_to_word:\n            if pattern_to_word[pattern_char] != word_char:\n                return False\n        else:\n            pattern_to_word[pattern_char] = word_char\n\n    return True\n\ndef g(word: str = \"cat dog cat\", pattern: str = \"aba\"):\n    return word, pattern\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 423, "target_skills": null, "problem_func": "from typing import*\ndef f(word: str, pattern: str) -> bool:\n    \"\"\"\n    Given a word and a pattern, check if the word matches the pattern.\n    The pattern consists of lowercase letters and the word consists of lowercase letters separated by a space.\n\n    Sample Input:\n    word = \"cat dog cat\"\n    pattern = \"aba\"\n\n    Sample Output:\n    True\n    \"\"\"\n    word_list = word.split()\n    pattern_list = list(pattern)\n\n    if len(word_list) != len(pattern_list):\n        return False\n\n    word_to_pattern = {}\n    pattern_to_word = {}\n\n    for i in range(len(word_list)):\n        word_char = word_list[i]\n        pattern_char = pattern_list[i]\n\n        if word_char in word_to_pattern:\n            if word_to_pattern[word_char] != pattern_char:\n                return False\n        else:\n            word_to_pattern[word_char] = pattern_char\n\n        if pattern_char in pattern_to_word:\n            if pattern_to_word[pattern_char] != word_char:\n                return False\n        else:\n            pattern_to_word[pattern_char] = word_char\n\n    return True", "solution_func": "def g(word: str = \"cat dog cat\", pattern: str = \"aba\"):\n    return word, pattern", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, sort the list in ascending order using the bubble sort algorithm.\n\n    Sample Input:\n    arr = [5, 3, 8, 2, 1, 9, 4]\n\n    Sample Output:\n    [1, 2, 3, 4, 5, 8, 9]\n    \"\"\"\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\n    return arr\n\ndef g(arr: List[int] = [5, 3, 8, 2, 1, 9, 4]):\n    return arr\n\nassert f(g()) == [1, 2, 3, 4, 5, 8, 9]\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 423, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, sort the list in ascending order using the bubble sort algorithm.\n\n    Sample Input:\n    arr = [5, 3, 8, 2, 1, 9, 4]\n\n    Sample Output:\n    [1, 2, 3, 4, 5, 8, 9]\n    \"\"\"\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\n    return arr", "solution_func": "def g(arr: List[int] = [5, 3, 8, 2, 1, 9, 4]):\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find two numbers in the list such that their product is equal to the target number.\n    Return True if such a pair exists, otherwise return False.\n\n    Sample Input:\n    nums = [2, 5, 7, 9, 12]\n    target = 63\n\n    Sample Output:\n    True\n    \"\"\"\n    complements = set()\n    for num in nums:\n        if num in complements:\n            return True\n        if num != 0 and target % num == 0:\n            complements.add(target // num)\n    return False\n\ndef g(nums: List[int] = [2, 5, 7, 9, 12], target: int = 63):\n    return nums, target\n\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 423, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find two numbers in the list such that their product is equal to the target number.\n    Return True if such a pair exists, otherwise return False.\n\n    Sample Input:\n    nums = [2, 5, 7, 9, 12]\n    target = 63\n\n    Sample Output:\n    True\n    \"\"\"\n    complements = set()\n    for num in nums:\n        if num in complements:\n            return True\n        if num != 0 and target % num == 0:\n            complements.add(target // num)\n    return False", "solution_func": "def g(nums: List[int] = [2, 5, 7, 9, 12], target: int = 63):\n    return nums, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find if there exists a pair of numbers in the list that adds up to the target.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=15):\n    return nums, target\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 424, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find if there exists a pair of numbers in the list that adds up to the target.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=15):\n    return nums, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers and a number k, find if there exists two distinct indices i and j in the list such that nums[i] and nums[j] are divisible by k.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if num % k == 0 and (k - num % k) % k in num_set:\n            return True\n        num_set.add(num % k)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=3):\n    return nums, k\n\nassert f(*g()) == True\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 424, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers and a number k, find if there exists two distinct indices i and j in the list such that nums[i] and nums[j] are divisible by k.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if num % k == 0 and (k - num % k) % k in num_set:\n            return True\n        num_set.add(num % k)\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=3):\n    return nums, k", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers and a number k, find if there exists a subarray with sum divisible by k.\n    \"\"\"\n    prefix_sum = 0\n    mod_set = set()\n    mod_set.add(0)\n    for num in nums:\n        prefix_sum += num\n        prefix_sum %= k\n        if prefix_sum in mod_set:\n            return True\n        mod_set.add(prefix_sum)\n    return False\n\ndef g(nums=[4, 2, -3, 1, 6], k=5):\n    return nums, k\n\nassert f(*g()) == True\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0], "idx_generation": 424, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers and a number k, find if there exists a subarray with sum divisible by k.\n    \"\"\"\n    prefix_sum = 0\n    mod_set = set()\n    mod_set.add(0)\n    for num in nums:\n        prefix_sum += num\n        prefix_sum %= k\n        if prefix_sum in mod_set:\n            return True\n        mod_set.add(prefix_sum)\n    return False", "solution_func": "def g(nums=[4, 2, -3, 1, 6], k=5):\n    return nums, k", "map_ix": [1, 1, 0, 1, 0, 0, 0, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there is a subarray in the given list whose sum is equal to the target.\n\n    Sample Input:\n    [1, 2, 3, 4, 5], 9\n\n    Sample Output:\n    True\n    \"\"\"\n    prefix_sum = 0\n    num_set = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target or prefix_sum - target in num_set:\n            return True\n        num_set.add(prefix_sum)\n    return False\n\ndef g() -> Tuple[List[int], int]:\n    return ([1, 2, 3, 4, 5], 9)\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 424, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there is a subarray in the given list whose sum is equal to the target.\n\n    Sample Input:\n    [1, 2, 3, 4, 5], 9\n\n    Sample Output:\n    True\n    \"\"\"\n    prefix_sum = 0\n    num_set = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target or prefix_sum - target in num_set:\n            return True\n        num_set.add(prefix_sum)\n    return False", "solution_func": "def g() -> Tuple[List[int], int]:\n    return ([1, 2, 3, 4, 5], 9)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers sorted in non-decreasing order, check if the target value is present in the matrix.\n\n    Sample Input:\n    matrix = [\n        [1, 3, 5, 7],\n        [10, 11, 16, 20],\n        [23, 30, 34, 50]\n    ]\n    target = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    rows, cols = len(matrix), len(matrix[0])\n    left, right = 0, rows * cols - 1\n    while left <= right:\n        mid = (left + right) // 2\n        num = matrix[mid // cols][mid % cols]\n        if num == target:\n            return True\n        elif num < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\n\ndef g(matrix: List[List[int]] = [[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50]], target: int = 3):\n    return (matrix, target)\n\nassert f(*g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 424, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers sorted in non-decreasing order, check if the target value is present in the matrix.\n\n    Sample Input:\n    matrix = [\n        [1, 3, 5, 7],\n        [10, 11, 16, 20],\n        [23, 30, 34, 50]\n    ]\n    target = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    rows, cols = len(matrix), len(matrix[0])\n    left, right = 0, rows * cols - 1\n    while left <= right:\n        mid = (left + right) // 2\n        num = matrix[mid // cols][mid % cols]\n        if num == target:\n            return True\n        elif num < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False", "solution_func": "def g(matrix: List[List[int]] = [[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50]], target: int = 3):\n    return (matrix, target)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are two distinct indices i and j in the list such that the absolute difference between nums[i] and nums[j] is at most target.\n\n    Sample Input:\n    nums = [1, 5, 7, 10, 15]\n    target = 4\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if any(num - i <= target and num - i >= 0 for i in num_set):\n            return True\n        if any(i - num <= target and i - num >= 0 for i in num_set):\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 5, 7, 10, 15], target: int = 4):\n    return (nums, target)\n\nassert f(*g()) == True\n\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0], "idx_generation": 424, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are two distinct indices i and j in the list such that the absolute difference between nums[i] and nums[j] is at most target.\n\n    Sample Input:\n    nums = [1, 5, 7, 10, 15]\n    target = 4\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if any(num - i <= target and num - i >= 0 for i in num_set):\n            return True\n        if any(i - num <= target and i - num >= 0 for i in num_set):\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums: List[int] = [1, 5, 7, 10, 15], target: int = 4):\n    return (nums, target)", "map_ix": [1, 0, 1, 0, 0, 1, 0, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target integer, find two numbers in the list that add up to the target.\n    Return the indices of the two numbers in a list.\n    \"\"\"\n    complements = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in complements:\n            return [complements[complement], i]\n        complements[num] = i\n    return []\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g()) == [3, 4]\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 424, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target integer, find two numbers in the list that add up to the target.\n    Return the indices of the two numbers in a list.\n    \"\"\"\n    complements = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in complements:\n            return [complements[complement], i]\n        complements[num] = i\n    return []", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target integer, find two numbers in the list that add up to the target.\n    Return the indices of the two numbers in a list.\n    \"\"\"\n    complements = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in complements:\n            return [complements[complement], i]\n        complements[num] = i\n    return []\n\ndef g(nums=[2, 4, 6, 8, 10], target=10):\n    return nums, target\n\nassert f(*g()) == [0, 1]\n", "emb": null, "idx_generation": 424, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target integer, find two numbers in the list that add up to the target.\n    Return the indices of the two numbers in a list.\n    \"\"\"\n    complements = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in complements:\n            return [complements[complement], i]\n        complements[num] = i\n    return []", "solution_func": "def g(nums=[2, 4, 6, 8, 10], target=10):\n    return nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target integer, find two numbers in the list that add up to the target.\n    Return the indices of the two numbers in a list.\n    \"\"\"\n    complements = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in complements:\n            return [complements[complement], i]\n        complements[num] = i\n    return []\n\ndef g(nums=[-1, -2, -3, -4, -5], target=-5):\n    return nums, target\n\nassert f(*g()) == [0, 4]\n", "emb": null, "idx_generation": 424, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target integer, find two numbers in the list that add up to the target.\n    Return the indices of the two numbers in a list.\n    \"\"\"\n    complements = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in complements:\n            return [complements[complement], i]\n        complements[num] = i\n    return []", "solution_func": "def g(nums=[-1, -2, -3, -4, -5], target=-5):\n    return nums, target", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it is a palindrome.\n    \"\"\"\n    return arr == arr[::-1]\n\ndef g(arr: List[int] = [1, 2, 3, 2, 1]):\n    \"\"\"\n    This solution returns the input list as is.\n    \"\"\"\n    return arr\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 424, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it is a palindrome.\n    \"\"\"\n    return arr == arr[::-1]", "solution_func": "def g(arr: List[int] = [1, 2, 3, 2, 1]):\n    \"\"\"\n    This solution returns the input list as is.\n    \"\"\"\n    return arr", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import *\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, check if there exists a pair of numbers in the list\n    such that their difference is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in arr:\n        if num - target in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(arr=[3, 7, 2, 9, 4], target=5):\n    return (arr, target)\n\nassert f(*g()) == True\n\n", "emb": null, "idx_generation": 425, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, check if there exists a pair of numbers in the list\n    such that their difference is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in arr:\n        if num - target in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(arr=[3, 7, 2, 9, 4], target=5):\n    return (arr, target)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import *\ndef f(n: int, t=100, upper=1000) -> bool:\n    \"\"\"\n    Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n    * if n is even, divide n by 2,\n    * if n is odd, multiply n by 3 and add 1\n    Find `0 < n < upper` so that it takes at least `t` steps to reach 1.\n    \"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= upper\n\ndef g(t=100, upper=1000):\n    bound = t + 10\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 1) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return max(prev)\n\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 425, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\ndef f(n: int, t=100, upper=1000) -> bool:\n    \"\"\"\n    Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n    * if n is even, divide n by 2,\n    * if n is odd, multiply n by 3 and add 1\n    Find `0 < n < upper` so that it takes at least `t` steps to reach 1.\n    \"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= upper", "solution_func": "def g(t=100, upper=1000):\n    bound = t + 10\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 1) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return max(prev)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Calculate the sum of all even numbers in the given list of integers.\n\n    Sample Input:\n    [1, 2, 3, 4, 5]\n\n    Sample Output:\n    6\n    \"\"\"\n    total = 0\n    for num in nums:\n        if num % 2 == 0:\n            total += num\n    return total\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == 6\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 425, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Calculate the sum of all even numbers in the given list of integers.\n\n    Sample Input:\n    [1, 2, 3, 4, 5]\n\n    Sample Output:\n    6\n    \"\"\"\n    total = 0\n    for num in nums:\n        if num % 2 == 0:\n            total += num\n    return total", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of numbers, return the sum of all the odd numbers.\n    \"\"\"\n    total = 0\n    for num in nums:\n        if num % 2 != 0:\n            total += num\n    return total\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == 9\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 425, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of numbers, return the sum of all the odd numbers.\n    \"\"\"\n    total = 0\n    for num in nums:\n        if num % 2 != 0:\n            total += num\n    return total", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums", "map_ix": [1, 1, 0, 1, 0, 1, 0, 0, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Determine whether a given 9x9 Sudoku board is solvable.\n    The Sudoku board could be partially filled, where empty cells are filled with the character '.'.\n    A valid Sudoku board (partially filled) is not necessarily solvable.\n    \"\"\"\n    # Check rows\n    for row in matrix:\n        if not check_unique(row):\n            return False\n\n    # Check columns\n    for col in zip(*matrix):\n        if not check_unique(col):\n            return False\n\n    # Check sub-grids\n    for i in range(0, 9, 3):\n        for j in range(0, 9, 3):\n            sub_grid = [matrix[x][y] for x in range(i, i + 3) for y in range(j, j + 3)]\n            if not check_unique(sub_grid):\n                return False\n\n    return True\n\ndef check_unique(nums: List[int]) -> bool:\n    num_set = set()\n    for num in nums:\n        if num != '.' and num in num_set:\n            return False\n        num_set.add(num)\n    return True\n\ndef g(matrix: List[List[int]] = [\n    [5, 3, '.', '.', 7, '.', '.', '.', '.'],\n    [6, '.', '.', 1, 9, 5, '.', '.', '.'],\n    ['.', 9, 8, '.', '.', '.', '.', 6, '.'],\n    [8, '.', '.', '.', 6, '.', '.', '.', 3],\n    [4, '.', '.', 8, '.', 3, '.', '.', 1],\n    [7, '.', '.', '.', 2, '.', '.', '.', 6],\n    ['.', 6, '.', '.', '.', '.', 2, 8, '.'],\n    ['.', '.', '.', 4, 1, 9, '.', '.', 5],\n    ['.', '.', '.', '.', 8, '.', '.', 7, 9]\n]):\n    return (matrix,)\n\nassert f(*g()) == False\n", "emb": null, "idx_generation": 425, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Determine whether a given 9x9 Sudoku board is solvable.\n    The Sudoku board could be partially filled, where empty cells are filled with the character '.'.\n    A valid Sudoku board (partially filled) is not necessarily solvable.\n    \"\"\"\n    # Check rows\n    for row in matrix:\n        if not check_unique(row):\n            return False\n\n    # Check columns\n    for col in zip(*matrix):\n        if not check_unique(col):\n            return False\n\n    # Check sub-grids\n    for i in range(0, 9, 3):\n        for j in range(0, 9, 3):\n            sub_grid = [matrix[x][y] for x in range(i, i + 3) for y in range(j, j + 3)]\n            if not check_unique(sub_grid):\n                return False\n\n    return True\n\ndef check_unique(nums: List[int]) -> bool:\n    num_set = set()\n    for num in nums:\n        if num != '.' and num in num_set:\n            return False\n        num_set.add(num)\n    return True", "solution_func": "def g(matrix: List[List[int]] = [\n    [5, 3, '.', '.', 7, '.', '.', '.', '.'],\n    [6, '.', '.', 1, 9, 5, '.', '.', '.'],\n    ['.', 9, 8, '.', '.', '.', '.', 6, '.'],\n    [8, '.', '.', '.', 6, '.', '.', '.', 3],\n    [4, '.', '.', 8, '.', 3, '.', '.', 1],\n    [7, '.', '.', '.', 2, '.', '.', '.', 6],\n    ['.', 6, '.', '.', '.', '.', 2, 8, '.'],\n    ['.', '.', '.', 4, 1, 9, '.', '.', 5],\n    ['.', '.', '.', '.', 8, '.', '.', 7, 9]\n]):\n    return (matrix,)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if the given matrix is an identity matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            if (i == j and matrix[i][j] != 1) or (i != j and matrix[i][j] != 0):\n                return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 425, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if the given matrix is an identity matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            if (i == j and matrix[i][j] != 1) or (i != j and matrix[i][j] != 0):\n                return False\n    return True", "solution_func": "def g():\n    return [[1, 0, 0], [0, 1, 0], [0, 0, 1]]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the list that add up to the target value.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 15\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 425, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the list that add up to the target value.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 15", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a string is a palindrome.\n    \"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 425, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a string is a palindrome.\n    \"\"\"\n    return s == s[::-1]", "solution_func": "def g():\n    return \"racecar\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the maximum value in a list of numbers.\n    \"\"\"\n    max_val = float('-inf')\n    for num in nums:\n        if num > max_val:\n            max_val = num\n    return max_val\n\ndef g():\n    return [2, 9, 5, 1, 7, 3, 6, 8, 4]\n\nassert f(g()) == 9\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 425, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the maximum value in a list of numbers.\n    \"\"\"\n    max_val = float('-inf')\n    for num in nums:\n        if num > max_val:\n            max_val = num\n    return max_val", "solution_func": "def g():\n    return [2, 9, 5, 1, 7, 3, 6, 8, 4]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=100, b=500, c=1000) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])\ndef g(a=100, b=500, c=1000):\n    return -a + sum([b * i for i in range(c)])\nassert f(g())\n\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 425, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=100, b=500, c=1000) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])", "solution_func": "def g(a=100, b=500, c=1000):\n    return -a + sum([b * i for i in range(c)])", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[List[int]]:\n    \"\"\"\n    Given a list of integers and a target number, find all unique combinations in the list where the sum of the combination is equal to the target.\n\n    Sample Input:\n    nums = [2, 3, 6, 7]\n    target = 7\n\n    Sample Output:\n    [\n        [2, 2, 3],\n        [7]\n    ]\n    \"\"\"\n    def backtrack(start, curr_sum, combination):\n        if curr_sum == target:\n            results.append(combination)\n            return\n        if curr_sum > target or start == len(nums):\n            return\n        for i in range(start, len(nums)):\n            if i > start and nums[i] == nums[i-1]:\n                continue\n            backtrack(i + 1, curr_sum + nums[i], combination + [nums[i]])\n\n    nums.sort()\n    results = []\n    backtrack(0, 0, [])\n    return results\n\ndef g(nums: List[int] = [2, 3, 6, 7], target: int = 7):\n    return (nums, target)\n\nassert f(*g()) == [[2, 2, 3], [7]]\n", "emb": null, "idx_generation": 426, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[List[int]]:\n    \"\"\"\n    Given a list of integers and a target number, find all unique combinations in the list where the sum of the combination is equal to the target.\n\n    Sample Input:\n    nums = [2, 3, 6, 7]\n    target = 7\n\n    Sample Output:\n    [\n        [2, 2, 3],\n        [7]\n    ]\n    \"\"\"\n    def backtrack(start, curr_sum, combination):\n        if curr_sum == target:\n            results.append(combination)\n            return\n        if curr_sum > target or start == len(nums):\n            return\n        for i in range(start, len(nums)):\n            if i > start and nums[i] == nums[i-1]:\n                continue\n            backtrack(i + 1, curr_sum + nums[i], combination + [nums[i]])\n\n    nums.sort()\n    results = []\n    backtrack(0, 0, [])\n    return results", "solution_func": "def g(nums: List[int] = [2, 3, 6, 7], target: int = 7):\n    return (nums, target)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target number, find the minimum number of coins needed to make up the target.\n    You have an infinite number of each coin denomination in the list.\n\n    Sample Input:\n    nums = [1, 2, 5]\n    target = 11\n\n    Sample Output:\n    3\n\n    Explanation:\n    The minimum number of coins needed to make up 11 is 3 (1 + 5 + 5 = 11).\n    \"\"\"\n    dp = [float('inf')] * (target + 1)\n    dp[0] = 0\n    for i in range(1, target + 1):\n        for num in nums:\n            if num <= i:\n                dp[i] = min(dp[i], dp[i - num] + 1)\n    return dp[target]\n\ndef g(nums: List[int] = [1, 2, 5], target: int = 11):\n    return (nums, target)\n\nassert f(*g()) == 3\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 426, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target number, find the minimum number of coins needed to make up the target.\n    You have an infinite number of each coin denomination in the list.\n\n    Sample Input:\n    nums = [1, 2, 5]\n    target = 11\n\n    Sample Output:\n    3\n\n    Explanation:\n    The minimum number of coins needed to make up 11 is 3 (1 + 5 + 5 = 11).\n    \"\"\"\n    dp = [float('inf')] * (target + 1)\n    dp[0] = 0\n    for i in range(1, target + 1):\n        for num in nums:\n            if num <= i:\n                dp[i] = min(dp[i], dp[i - num] + 1)\n    return dp[target]", "solution_func": "def g(nums: List[int] = [1, 2, 5], target: int = 11):\n    return (nums, target)", "map_ix": [1, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if it is possible to split the list into two subarrays such that the sum of elements in both subarrays is equal to the target.\n\n    Sample Input:\n    nums = [1, 5, 11, 5]\n    target = 11\n\n    Sample Output:\n    True\n\n    Explanation:\n    The list can be split into two subarrays: [1, 5, 5] and [11]. The sum of elements in both subarrays is equal to the target (11).\n    \"\"\"\n    total_sum = sum(nums)\n    if total_sum % 2 != 0:\n        return False\n    \n    target_sum = total_sum // 2\n    dp = [False] * (target_sum + 1)\n    dp[0] = True\n\n    for num in nums:\n        for i in range(target_sum, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n\n    return dp[target_sum]\n\ndef g(nums: List[int] = [1, 5, 11, 5], target: int = 11):\n    return (nums, target)\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 426, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if it is possible to split the list into two subarrays such that the sum of elements in both subarrays is equal to the target.\n\n    Sample Input:\n    nums = [1, 5, 11, 5]\n    target = 11\n\n    Sample Output:\n    True\n\n    Explanation:\n    The list can be split into two subarrays: [1, 5, 5] and [11]. The sum of elements in both subarrays is equal to the target (11).\n    \"\"\"\n    total_sum = sum(nums)\n    if total_sum % 2 != 0:\n        return False\n    \n    target_sum = total_sum // 2\n    dp = [False] * (target_sum + 1)\n    dp[0] = True\n\n    for num in nums:\n        for i in range(target_sum, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n\n    return dp[target_sum]", "solution_func": "def g(nums: List[int] = [1, 5, 11, 5], target: int = 11):\n    return (nums, target)", "map_ix": [0, 0, 1, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Find if there are two numbers in the list that add up to the target.\n    \"\"\"\n    return any(target - num in nums for num in nums)\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 15):\n    return (nums, target)\n\nassert f(*g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 426, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Find if there are two numbers in the list that add up to the target.\n    \"\"\"\n    return any(target - num in nums for num in nums)", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 15):\n    return (nums, target)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Find the index of the first occurrence of the target number in the list.\n    \"\"\"\n    for i, num in enumerate(nums):\n        if num == target:\n            return i\n    return -1\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 5):\n    return (nums, target)\n\nassert f(*g()) == 4\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 426, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Find the index of the first occurrence of the target number in the list.\n    \"\"\"\n    for i, num in enumerate(nums):\n        if num == target:\n            return i\n    return -1", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 5):\n    return (nums, target)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Find the number of occurrences of the target number in the list.\n    \"\"\"\n    return nums.count(target)\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 3):\n    return (nums, target)\n\nassert f(*g()) == 1\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 426, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Find the number of occurrences of the target number in the list.\n    \"\"\"\n    return nums.count(target)", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 3):\n    return (nums, target)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any combination sums up to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False\n\ndef g(k=3, target_sum=15):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), k=3, target_sum=15) == True\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 426, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any combination sums up to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False", "solution_func": "def g(k=3, target_sum=15):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any combination sums up to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False\n\ndef g(k=5, target_sum=25):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\nassert f(g(), k=5, target_sum=25) == True\n", "emb": null, "idx_generation": 426, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any combination sums up to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False", "solution_func": "def g(k=5, target_sum=25):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any combination sums up to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False\n\ndef g(k=2, target_sum=8):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]\n\nassert f(g(), k=2, target_sum=8) == True\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 426, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any combination sums up to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False", "solution_func": "def g(k=2, target_sum=8):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subarray with a sum of zero.\n\n    Example:\n    arr = [4, -3, 2, -6, 1]\n    output: True\n\n    Explanation:\n    The subarray [-3, 2, -6, 1] has a sum of zero.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sum_set = set()\n\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum == 0 or prefix_sum in prefix_sum_set:\n            return True\n        prefix_sum_set.add(prefix_sum)\n    \n    return False\n\ndef g():\n    return [4, -3, 2, -6, 1]\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 426, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subarray with a sum of zero.\n\n    Example:\n    arr = [4, -3, 2, -6, 1]\n    output: True\n\n    Explanation:\n    The subarray [-3, 2, -6, 1] has a sum of zero.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sum_set = set()\n\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum == 0 or prefix_sum in prefix_sum_set:\n            return True\n        prefix_sum_set.add(prefix_sum)\n    \n    return False", "solution_func": "def g():\n    return [4, -3, 2, -6, 1]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    nums = [1, 2, 3, 2, 1]\n    return nums\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 427, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]", "solution_func": "def g():\n    nums = [1, 2, 3, 2, 1]\n    return nums", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n    return matrix\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 427, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g():\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n    return matrix", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n    \"\"\"\n    return string == string[::-1]\n\ndef g():\n    string = \"level\"\n    return string\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 427, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n    \"\"\"\n    return string == string[::-1]", "solution_func": "def g():\n    string = \"level\"\n    return string", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[str]]) -> bool:\n    \"\"\"\n    Given a 2D grid of strings, check if all the elements in each column are the same.\n\n    Sample Input:\n    arr = [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    \n    # Check if arr is a square grid\n    if len(arr[0]) != n:\n        return False\n    \n    # Check if all elements in each column are the same\n    for j in range(n):\n        column_elements = [arr[i][j] for i in range(n)]\n        if len(set(column_elements)) != 1:\n            return False\n    \n    return True\n\ndef g(arr: List[List[str]] = [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]):\n    return arr\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 427, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[str]]) -> bool:\n    \"\"\"\n    Given a 2D grid of strings, check if all the elements in each column are the same.\n\n    Sample Input:\n    arr = [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    \n    # Check if arr is a square grid\n    if len(arr[0]) != n:\n        return False\n    \n    # Check if all elements in each column are the same\n    for j in range(n):\n        column_elements = [arr[i][j] for i in range(n)]\n        if len(set(column_elements)) != 1:\n            return False\n    \n    return True", "solution_func": "def g(arr: List[List[str]] = [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]):\n    return arr", "map_ix": [1, 0, 1, 0, 0, 1, 1, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the sum of each row is divisible by 3.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    for row in arr:\n        if sum(row) % 3 != 0:\n            return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 427, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the sum of each row is divisible by 3.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    for row in arr:\n        if sum(row) % 3 != 0:\n            return False\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the sum of each column is odd.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    num_cols = len(arr[0])\n    col_sums = [0] * num_cols\n\n    for row in arr:\n        for j in range(num_cols):\n            col_sums[j] += row[j]\n\n    for col_sum in col_sums:\n        if col_sum % 2 == 0:\n            return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 427, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the sum of each column is odd.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    num_cols = len(arr[0])\n    col_sums = [0] * num_cols\n\n    for row in arr:\n        for j in range(num_cols):\n            col_sums[j] += row[j]\n\n    for col_sum in col_sums:\n        if col_sum % 2 == 0:\n            return False\n\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, target: int) -> bool:\n    \"\"\"\n    Check if the number of occurrences of a character in the string is equal to the target value.\n    \"\"\"\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for count in char_count.values():\n        if count == target:\n            return True\n    return False\n\ndef g(string=\"hello\"):\n    return string\n\nassert f(g(), 2)\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 427, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, target: int) -> bool:\n    \"\"\"\n    Check if the number of occurrences of a character in the string is equal to the target value.\n    \"\"\"\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for count in char_count.values():\n        if count == target:\n            return True\n    return False", "solution_func": "def g(string=\"hello\"):\n    return string", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list where the absolute difference is equal to the target value.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if abs(nums[i] - nums[j]) == target:\n                return True\n    return False\n\ndef g(nums=[1, 5, 9, 2, 7, 3], target=4):\n    return nums, target\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 427, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list where the absolute difference is equal to the target value.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if abs(nums[i] - nums[j]) == target:\n                return True\n    return False", "solution_func": "def g(nums=[1, 5, 9, 2, 7, 3], target=4):\n    return nums, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if the string is a valid email address.\n    \"\"\"\n    if '@' not in string:\n        return False\n    if '.' not in string[string.index('@'):]:\n        return False\n    return True\n\ndef g():\n    return \"test@example.com\"\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 427, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if the string is a valid email address.\n    \"\"\"\n    if '@' not in string:\n        return False\n    if '.' not in string[string.index('@'):]:\n        return False\n    return True", "solution_func": "def g():\n    return \"test@example.com\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if a list is a sorted in non-decreasing order.\"\"\"\n    return arr == sorted(arr)\n\ndef g(start: int, length: int):\n    \"\"\"Generate a list of numbers in non-decreasing order.\"\"\"\n    return list(range(start, start+length))\n\nassert f(g(1, 5)) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 427, "target_skills": null, "problem_func": "from typing import*\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if a list is a sorted in non-decreasing order.\"\"\"\n    return arr == sorted(arr)", "solution_func": "def g(start: int, length: int):\n    \"\"\"Generate a list of numbers in non-decreasing order.\"\"\"\n    return list(range(start, start+length))", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=100, k=3) -> bool:\n    \"\"\"Check if there are k distinct numbers in the list that sum up to the target value\"\"\"\n    def k_sum(nums, target, k):\n        if k == 0 and target == 0:\n            return True\n        if k <= 0 or target <= 0 or not nums:\n            return False\n        return k_sum(nums[1:], target - nums[0], k - 1) or k_sum(nums[1:], target, k)\n    return k_sum(nums, target, k)\n\ndef g(target=100, k=3):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g()) == True\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 428, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100, k=3) -> bool:\n    \"\"\"Check if there are k distinct numbers in the list that sum up to the target value\"\"\"\n    def k_sum(nums, target, k):\n        if k == 0 and target == 0:\n            return True\n        if k <= 0 or target <= 0 or not nums:\n            return False\n        return k_sum(nums[1:], target - nums[0], k - 1) or k_sum(nums[1:], target, k)\n    return k_sum(nums, target, k)", "solution_func": "def g(target=100, k=3):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]", "map_ix": [0, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subsequence of length k in the list that is strictly increasing\"\"\"\n    for i in range(len(nums)-k+1):\n        subsequence = nums[i:i+k]\n        if all(subsequence[j] < subsequence[j+1] for j in range(k-1)):\n            return True\n    return False\n\ndef g(k=5):\n    return [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 428, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subsequence of length k in the list that is strictly increasing\"\"\"\n    for i in range(len(nums)-k+1):\n        subsequence = nums[i:i+k]\n        if all(subsequence[j] < subsequence[j+1] for j in range(k-1)):\n            return True\n    return False", "solution_func": "def g(k=5):\n    return [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"Given a list of numbers, find the maximum sum of any two adjacent numbers in the list.\"\"\"\n    max_sum = float('-inf')\n    for i in range(len(nums)-1):\n        adj_sum = nums[i] + nums[i+1]\n        if adj_sum > max_sum:\n            max_sum = adj_sum\n    return max_sum\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == 9\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 428, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"Given a list of numbers, find the maximum sum of any two adjacent numbers in the list.\"\"\"\n    max_sum = float('-inf')\n    for i in range(len(nums)-1):\n        adj_sum = nums[i] + nums[i+1]\n        if adj_sum > max_sum:\n            max_sum = adj_sum\n    return max_sum", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, calculate the sum of all the elements in the matrix.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    output: 45\n    \"\"\"\n    total_sum = sum([sum(row) for row in matrix])\n    return total_sum\n\ndef g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\nassert f(g()) == 45\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 428, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, calculate the sum of all the elements in the matrix.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    output: 45\n    \"\"\"\n    total_sum = sum([sum(row) for row in matrix])\n    return total_sum", "solution_func": "def g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, word='silon') -> bool:\n    \"\"\"Check if word is a palindrome\"\"\"\n    return s == word[::-1]\n\ndef g(word = 'silon'):\n    return word\nassert f(g())\n", "emb": null, "idx_generation": 428, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, word='silon') -> bool:\n    \"\"\"Check if word is a palindrome\"\"\"\n    return s == word[::-1]", "solution_func": "def g(word = 'silon'):\n    return word", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, word='silon') -> bool:\n    \"\"\"Check if word is a palindrome\"\"\"\n    return s == word[::-1]\n\ndef g(word = 'silon'):\n    return word\nassert f(g())\n", "emb": null, "idx_generation": 428, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, word='silon') -> bool:\n    \"\"\"Check if word is a palindrome\"\"\"\n    return s == word[::-1]", "solution_func": "def g(word = 'silon'):\n    return word", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if it is a square matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    return rows == cols\n\ndef g(matrix: List[List[int]]):\n    \"\"\"\n    This solution returns the input matrix as is.\n    \"\"\"\n    return matrix\n\nassert f(g([[1, 2, 3], [4, 5, 6], [7, 8, 9]])) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 428, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if it is a square matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    return rows == cols", "solution_func": "def g(matrix: List[List[int]]):\n    \"\"\"\n    This solution returns the input matrix as is.\n    \"\"\"\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target_value: int) -> bool:\n    \"\"\"\n    Check if a given value exists in the matrix.\n    \"\"\"\n    for row in matrix:\n        if target_value in row:\n            return True\n    \n    return False\n\ndef g(matrix: List[List[int]]):\n    \"\"\"\n    This solution returns the input matrix as is.\n    \"\"\"\n    return matrix\n\nassert f(g([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), 5) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 428, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target_value: int) -> bool:\n    \"\"\"\n    Check if a given value exists in the matrix.\n    \"\"\"\n    for row in matrix:\n        if target_value in row:\n            return True\n    \n    return False", "solution_func": "def g(matrix: List[List[int]]):\n    \"\"\"\n    This solution returns the input matrix as is.\n    \"\"\"\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an identity matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    for i in range(rows):\n        for j in range(cols):\n            if (i == j and matrix[i][j] != 1) or (i != j and matrix[i][j] != 0):\n                return False\n    \n    return True\n\ndef g(matrix: List[List[int]]):\n    \"\"\"\n    This solution returns the input matrix as is.\n    \"\"\"\n    return matrix\n\nassert f(g([[1, 0, 0], [0, 1, 0], [0, 0, 1]])) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 428, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an identity matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    for i in range(rows):\n        for j in range(cols):\n            if (i == j and matrix[i][j] != 1) or (i != j and matrix[i][j] != 0):\n                return False\n    \n    return True", "solution_func": "def g(matrix: List[List[int]]):\n    \"\"\"\n    This solution returns the input matrix as is.\n    \"\"\"\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Determine if the given array is a palindrome.\n\n    Sample Input:\n    arr = [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g()) == True\n\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 428, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Determine if the given array is a palindrome.\n\n    Sample Input:\n    arr = [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return arr == arr[::-1]", "solution_func": "def g():\n    return [1, 2, 3, 2, 1]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if a list contains any duplicate elements.\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == False\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 429, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if a list contains any duplicate elements.\n    \"\"\"\n    return len(nums) != len(set(nums))", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the maximum product of any two numbers in the list.\n    \"\"\"\n    nums.sort()\n    return max(nums[-1] * nums[-2], nums[0] * nums[1])\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == 20\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 429, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the maximum product of any two numbers in the list.\n    \"\"\"\n    nums.sort()\n    return max(nums[-1] * nums[-2], nums[0] * nums[1])", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Remove all duplicate elements from a list and return the modified list.\n    \"\"\"\n    return list(set(nums))\n\ndef g():\n    return [1, 2, 2, 3, 4, 4, 5]\n\nassert f(g()) == [1, 2, 3, 4, 5]\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 429, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Remove all duplicate elements from a list and return the modified list.\n    \"\"\"\n    return list(set(nums))", "solution_func": "def g():\n    return [1, 2, 2, 3, 4, 4, 5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the target number is present in the list\"\"\"\n    return target in nums\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 3):\n    return (nums, target)\n\nassert f(*g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 429, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the target number is present in the list\"\"\"\n    return target in nums", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 3):\n    return (nums, target)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given an array nums, write a function to find the missing number in the range from 0 to n.\n    The array contains all the numbers from 0 to n except for one.\n    \"\"\"\n    n = len(nums)\n    total_sum = n * (n + 1) // 2\n    actual_sum = sum(nums)\n    return total_sum - actual_sum\n\ndef g(nums: List[int] = [0, 1, 2, 4, 5, 6, 7, 8, 9]):\n    return (nums,)\n\nassert f(*g()) == 3\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 429, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given an array nums, write a function to find the missing number in the range from 0 to n.\n    The array contains all the numbers from 0 to n except for one.\n    \"\"\"\n    n = len(nums)\n    total_sum = n * (n + 1) // 2\n    actual_sum = sum(nums)\n    return total_sum - actual_sum", "solution_func": "def g(nums: List[int] = [0, 1, 2, 4, 5, 6, 7, 8, 9]):\n    return (nums,)", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, check if it is a valid Sudoku board.\n    A valid Sudoku board contains only digits 1-9 and each column, each row, and each of the nine 3x3 sub-boxes\n    contains all of the digits from 1 to 9.\n    \"\"\"\n    rows = [set() for _ in range(9)]\n    cols = [set() for _ in range(9)]\n    boxes = [set() for _ in range(9)]\n    \n    for i in range(9):\n        for j in range(9):\n            num = matrix[i][j]\n            if num != 0:\n                if num in rows[i] or num in cols[j] or num in boxes[i // 3 * 3 + j // 3]:\n                    return False\n                rows[i].add(num)\n                cols[j].add(num)\n                boxes[i // 3 * 3 + j // 3].add(num)\n                \n    return True\n\ndef g(matrix: List[List[int]] = [\n    [5, 3, 0, 0, 7, 0, 0, 0, 0],\n    [6, 0, 0, 1, 9, 5, 0, 0, 0],\n    [0, 9, 8, 0, 0, 0, 0, 6, 0],\n    [8, 0, 0, 0, 6, 0, 0, 0, 3],\n    [4, 0, 0, 8, 0, 3, 0, 0, 1],\n    [7, 0, 0, 0, 2, 0, 0, 0, 6],\n    [0, 6, 0, 0, 0, 0, 2, 8, 0],\n    [0, 0, 0, 4, 1, 9, 0, 0, 5],\n    [0, 0, 0, 0, 8, 0, 0, 7, 9]\n]):\n    return (matrix,)\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 429, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, check if it is a valid Sudoku board.\n    A valid Sudoku board contains only digits 1-9 and each column, each row, and each of the nine 3x3 sub-boxes\n    contains all of the digits from 1 to 9.\n    \"\"\"\n    rows = [set() for _ in range(9)]\n    cols = [set() for _ in range(9)]\n    boxes = [set() for _ in range(9)]\n    \n    for i in range(9):\n        for j in range(9):\n            num = matrix[i][j]\n            if num != 0:\n                if num in rows[i] or num in cols[j] or num in boxes[i // 3 * 3 + j // 3]:\n                    return False\n                rows[i].add(num)\n                cols[j].add(num)\n                boxes[i // 3 * 3 + j // 3].add(num)\n                \n    return True", "solution_func": "def g(matrix: List[List[int]] = [\n    [5, 3, 0, 0, 7, 0, 0, 0, 0],\n    [6, 0, 0, 1, 9, 5, 0, 0, 0],\n    [0, 9, 8, 0, 0, 0, 0, 6, 0],\n    [8, 0, 0, 0, 6, 0, 0, 0, 3],\n    [4, 0, 0, 8, 0, 3, 0, 0, 1],\n    [7, 0, 0, 0, 2, 0, 0, 0, 6],\n    [0, 6, 0, 0, 0, 0, 2, 8, 0],\n    [0, 0, 0, 4, 1, 9, 0, 0, 5],\n    [0, 0, 0, 0, 8, 0, 0, 7, 9]\n]):\n    return (matrix,)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a square matrix.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    rows = len(arr)\n    for row in arr:\n        if len(row) != rows:\n            return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 429, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a square matrix.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    rows = len(arr)\n    for row in arr:\n        if len(row) != rows:\n            return False\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is symmetric.\n\n    Sample Input:\n    arr = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\n    Sample Output:\n    False\n    \"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if arr[i][j] != arr[j][i]:\n                return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return arr\n\nassert f(g()) == False\n\n", "emb": null, "idx_generation": 429, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is symmetric.\n\n    Sample Input:\n    arr = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\n    Sample Output:\n    False\n    \"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if arr[i][j] != arr[j][i]:\n                return False\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic rectangle.\n    A magic rectangle is a rectangular grid where the sum of each row and each column is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    row_sums = []\n    col_sums = []\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        row_sums.append(row_sum)\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        col_sums.append(col_sum)\n    return len(set(row_sums)) == 1 and len(set(col_sums)) == 1\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 429, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic rectangle.\n    A magic rectangle is a rectangular grid where the sum of each row and each column is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    row_sums = []\n    col_sums = []\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        row_sums.append(row_sum)\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        col_sums.append(col_sum)\n    return len(set(row_sums)) == 1 and len(set(col_sums)) == 1", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, a=100, b=500, c=1000) -> bool:\n    \"\"\"Check if n is a prime number and n + a is divisible by b.\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return is_prime(n) and (n + a) % b == 0\n\ndef g(a=100, b=500, c=1000):\n    return a + (b * c)\n\nassert f(g())\n", "emb": null, "idx_generation": 429, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=100, b=500, c=1000) -> bool:\n    \"\"\"Check if n is a prime number and n + a is divisible by b.\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return is_prime(n) and (n + a) % b == 0", "solution_func": "def g(a=100, b=500, c=1000):\n    return a + (b * c)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(seq: List[int], n=10, length=5) -> bool:\n    \"\"\"Find a sequence of 3's and 5's of a given length that adds up to n\"\"\"\n    return all((i in [3, 5] for i in seq)) and sum(seq) == n and (len(seq) == length)\ndef g(n=10, length=5):\n    return [3] * (n - length) + [5] * (2 * length - n)\nassert f(g())\n", "emb": null, "idx_generation": 430, "target_skills": null, "problem_func": "from typing import*\ndef f(seq: List[int], n=10, length=5) -> bool:\n    \"\"\"Find a sequence of 3's and 5's of a given length that adds up to n\"\"\"\n    return all((i in [3, 5] for i in seq)) and sum(seq) == n and (len(seq) == length)", "solution_func": "def g(n=10, length=5):\n    return [3] * (n - length) + [5] * (2 * length - n)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Find if there exists a triplet in the given list whose sum is equal to the target value.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            for k in range(j + 1, len(lst)):\n                if lst[i] + lst[j] + lst[k] == target:\n                    return True\n    return False\ndef g(lst=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return lst\nassert f(g()) == True\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 430, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Find if there exists a triplet in the given list whose sum is equal to the target value.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            for k in range(j + 1, len(lst)):\n                if lst[i] + lst[j] + lst[k] == target:\n                    return True\n    return False", "solution_func": "def g(lst=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return lst", "map_ix": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\ndef f(matrix: List[List[int]], num_rows=3, num_cols=3) -> bool:\n    \"\"\"Check if a given matrix is lower triangular\"\"\"\n    for i in range(num_rows):\n        for j in range(i+1, num_cols):\n            if matrix[i][j] != 0:\n                return False\n    return True\ndef g(matrix=[[1, 0, 0], [2, 3, 0], [4, 5, 6]], num_rows=3, num_cols=3):\n    return matrix\nassert f(g()) == True\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 430, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\ndef f(matrix: List[List[int]], num_rows=3, num_cols=3) -> bool:\n    \"\"\"Check if a given matrix is lower triangular\"\"\"\n    for i in range(num_rows):\n        for j in range(i+1, num_cols):\n            if matrix[i][j] != 0:\n                return False\n    return True", "solution_func": "def g(matrix=[[1, 0, 0], [2, 3, 0], [4, 5, 6]], num_rows=3, num_cols=3):\n    return matrix", "map_ix": [1, 0, 1, 0, 0, 0, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if a list of numbers is a palindrome.\n    \"\"\"\n    return numbers == numbers[::-1]\n\ndef g():\n    \"\"\"\n    Generate a list of numbers.\n    \"\"\"\n    return [1, 2, 3, 4, 3, 2, 1]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 430, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if a list of numbers is a palindrome.\n    \"\"\"\n    return numbers == numbers[::-1]", "solution_func": "def g():\n    \"\"\"\n    Generate a list of numbers.\n    \"\"\"\n    return [1, 2, 3, 4, 3, 2, 1]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of numbers, return a new list with the square root of each element.\n\n    Example:\n    nums = [1, 4, 9, 16, 25]\n\n    Output:\n    [1.0, 2.0, 3.0, 4.0, 5.0]\n    \"\"\"\n    return [math.sqrt(num) for num in nums]\n\ndef g():\n    return [1, 4, 9, 16, 25]\n\nassert f(g()) == [1.0, 2.0, 3.0, 4.0, 5.0]\n\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 430, "target_skills": null, "problem_func": "from typing import*\nimport math\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of numbers, return a new list with the square root of each element.\n\n    Example:\n    nums = [1, 4, 9, 16, 25]\n\n    Output:\n    [1.0, 2.0, 3.0, 4.0, 5.0]\n    \"\"\"\n    return [math.sqrt(num) for num in nums]", "solution_func": "def g():\n    return [1, 4, 9, 16, 25]", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target, check if there exists a pair of numbers from the list\n    that adds up to the target value. If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    \"\"\"\n    Generate a list of numbers.\n    \"\"\"\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 10) == True\n\n", "emb": null, "idx_generation": 430, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target, check if there exists a pair of numbers from the list\n    that adds up to the target value. If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    \"\"\"\n    Generate a list of numbers.\n    \"\"\"\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import *\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an upper triangular matrix.\n    \"\"\"\n    n = len(matrix)\n    \n    for i in range(1, n):\n        for j in range(i):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [0, 4, 5], [0, 0, 6]]):\n    return matrix\n\nassert f(g()) == True\n\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 430, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an upper triangular matrix.\n    \"\"\"\n    n = len(matrix)\n    \n    for i in range(1, n):\n        for j in range(i):\n            if matrix[i][j] != 0:\n                return False\n    return True", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [0, 4, 5], [0, 0, 6]]):\n    return matrix", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a perfect square sequence.\n    A perfect square sequence is a list of numbers in which each number is a perfect square.\n    \"\"\"\n    for num in nums:\n        if int(num ** 0.5) ** 2 != num:\n            return False\n    return True\n\ndef g(nums: List[int] = [1, 4, 9, 16, 25]):\n    return nums\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 430, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a perfect square sequence.\n    A perfect square sequence is a list of numbers in which each number is a perfect square.\n    \"\"\"\n    for num in nums:\n        if int(num ** 0.5) ** 2 != num:\n            return False\n    return True", "solution_func": "def g(nums: List[int] = [1, 4, 9, 16, 25]):\n    return nums", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the sum of all prime numbers in the given list.\n    \"\"\"\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return sum(num for num in nums if is_prime(num))\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g()) == 17\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 430, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the sum of all prime numbers in the given list.\n    \"\"\"\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return sum(num for num in nums if is_prime(num))", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that sum up to the target value.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n    output: True\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 7) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 430, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that sum up to the target value.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n    output: True\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a palindrome.\n    Return True if the list is a palindrome, False otherwise.\n    \"\"\"\n    return numbers == numbers[::-1]\n\ndef g(numbers=[1, 2, 3, 4, 5]):\n    return (numbers,)\n\nassert f(*g()) == False\n\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 431, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a palindrome.\n    Return True if the list is a palindrome, False otherwise.\n    \"\"\"\n    return numbers == numbers[::-1]", "solution_func": "def g(numbers=[1, 2, 3, 4, 5]):\n    return (numbers,)", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a prime number.\n    Return True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g()) == True\n\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 431, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a prime number.\n    Return True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "solution_func": "def g():\n    return 17", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(words: List[str]) -> bool:\n    \"\"\"\n    Check if the given list of words is an anagram.\n    Return True if the list is an anagram, False otherwise.\n    \"\"\"\n    return sorted(words) == sorted(set(words))\n\ndef g(words=[\"listen\", \"silent\", \"enlist\"]):\n    return (words,)\n\nassert f(*g()) == True\n\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 431, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str]) -> bool:\n    \"\"\"\n    Check if the given list of words is an anagram.\n    Return True if the list is an anagram, False otherwise.\n    \"\"\"\n    return sorted(words) == sorted(set(words))", "solution_func": "def g(words=[\"listen\", \"silent\", \"enlist\"]):\n    return (words,)", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, determine if there exist three numbers in the list whose sum is equal to the target value.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            curr_sum = nums[i] + nums[left] + nums[right]\n            if curr_sum == target:\n                return True\n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 9\n\nassert f(*g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 431, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, determine if there exist three numbers in the list whose sum is equal to the target value.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            curr_sum = nums[i] + nums[left] + nums[right]\n            if curr_sum == target:\n                return True\n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5], 9", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], k: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and an integer k, find the k most frequent elements in the list.\n\n    Sample Input:\n    arr = [1, 1, 1, 2, 2, 3]\n    k = 2\n\n    Sample Output:\n    [1, 2]\n    \"\"\"\n    count = {}\n    for num in arr:\n        count[num] = count.get(num, 0) + 1\n    sorted_nums = sorted(count.keys(), key=lambda x: count[x], reverse=True)\n    return sorted_nums[:k]\n\ndef g():\n    return [1, 1, 1, 2, 2, 3], 2\n\nassert f(*g()) == [1, 2]\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 431, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], k: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and an integer k, find the k most frequent elements in the list.\n\n    Sample Input:\n    arr = [1, 1, 1, 2, 2, 3]\n    k = 2\n\n    Sample Output:\n    [1, 2]\n    \"\"\"\n    count = {}\n    for num in arr:\n        count[num] = count.get(num, 0) + 1\n    sorted_nums = sorted(count.keys(), key=lambda x: count[x], reverse=True)\n    return sorted_nums[:k]", "solution_func": "def g():\n    return [1, 1, 1, 2, 2, 3], 2", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum subarray sum.\n\n    A subarray is a contiguous part of the array.\n\n    Sample Input:\n    nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\n    Sample Output:\n    6\n    Explanation: The contiguous subarray [4, -1, 2, 1] has the largest sum = 6.\n    \"\"\"\n    n = len(nums)\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += nums[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum\n\ndef g():\n    return [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\nassert f(g()) == 6\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 431, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum subarray sum.\n\n    A subarray is a contiguous part of the array.\n\n    Sample Input:\n    nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\n    Sample Output:\n    6\n    Explanation: The contiguous subarray [4, -1, 2, 1] has the largest sum = 6.\n    \"\"\"\n    n = len(nums)\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += nums[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum", "solution_func": "def g():\n    return [-2, 1, -3, 4, -1, 2, 1, -5, 4]", "map_ix": [1, 1, 0, 1, 0, 0, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it is a palindrome list.\n    A palindrome list is a list that reads the same forwards and backwards.\n\n    Example:\n    nums = [1, 2, 3, 2, 1]\n    output: True\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 431, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it is a palindrome list.\n    A palindrome list is a list that reads the same forwards and backwards.\n\n    Example:\n    nums = [1, 2, 3, 2, 1]\n    output: True\n    \"\"\"\n    return nums == nums[::-1]", "solution_func": "def g():\n    return [1, 2, 3, 2, 1]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the sum of all even numbers in the list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6]\n    output: 12 (2 + 4 + 6)\n    \"\"\"\n    return sum(num for num in nums if num % 2 == 0)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g()) == 12\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 431, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the sum of all even numbers in the list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6]\n    output: 12 (2 + 4 + 6)\n    \"\"\"\n    return sum(num for num in nums if num % 2 == 0)", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with only the positive numbers.\n\n    Example:\n    nums = [-1, 2, -3, 4, -5]\n    output: [2, 4]\n    \"\"\"\n    return [num for num in nums if num > 0]\n\ndef g():\n    return [-1, 2, -3, 4, -5]\n\nassert f(g()) == [2, 4]\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 431, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with only the positive numbers.\n\n    Example:\n    nums = [-1, 2, -3, 4, -5]\n    output: [2, 4]\n    \"\"\"\n    return [num for num in nums if num > 0]", "solution_func": "def g():\n    return [-1, 2, -3, 4, -5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Calculate the product of all even numbers in the given list of integers.\n\n    Sample Input:\n    [2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Sample Output:\n    3840\n    \"\"\"\n    return 1 if len(nums) == 0 else (nums[0] * f(nums[1:])) if nums[0] % 2 == 0 else f(nums[1:])\n\ndef g():\n    return [2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 3840\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 431, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Calculate the product of all even numbers in the given list of integers.\n\n    Sample Input:\n    [2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Sample Output:\n    3840\n    \"\"\"\n    return 1 if len(nums) == 0 else (nums[0] * f(nums[1:])) if nums[0] % 2 == 0 else f(nums[1:])", "solution_func": "def g():\n    return [2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Find all pairs of numbers in the list that add up to the target\n    \"\"\"\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                pairs.append([nums[i], nums[j]])\n    return pairs\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=12):\n    return (nums, target)\n\nassert f(*g()) == [[2, 10], [3, 9], [4, 8], [5, 7]]\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 432, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Find all pairs of numbers in the list that add up to the target\n    \"\"\"\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                pairs.append([nums[i], nums[j]])\n    return pairs", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=12):\n    return (nums, target)", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: str, n=3, s=10) -> bool:\n    \"\"\"Check if there exists a substring of length n that sums up to s\"\"\"\n    for i in range(len(x)-n+1):\n        if sum(int(digit) for digit in x[i:i+n]) == s:\n            return True\n    return False\n\ndef g(n = 3, s = 10):\n    x = \"123456789\"\n    return (x, n, s)\n\nassert f(*g()) == True\n", "emb": null, "idx_generation": 432, "target_skills": null, "problem_func": "from typing import*\ndef f(x: str, n=3, s=10) -> bool:\n    \"\"\"Check if there exists a substring of length n that sums up to s\"\"\"\n    for i in range(len(x)-n+1):\n        if sum(int(digit) for digit in x[i:i+n]) == s:\n            return True\n    return False", "solution_func": "def g(n = 3, s = 10):\n    x = \"123456789\"\n    return (x, n, s)", "map_ix": null}, {"fitness": -Infinity, "program_str": "import math\nfrom typing import*\ndef f(x: float, a=2, b=5) -> bool:\n    \"\"\"Check if the result of a mathematical equation is equal to x\"\"\"\n    equation = a**2 + b**2 + 2*a*b\n    return equation == x\n\ndef g(a = 2, b = 3):\n    return a**2 + 2*a*b + b**2\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 432, "target_skills": null, "problem_func": "import math\nfrom typing import*\ndef f(x: float, a=2, b=5) -> bool:\n    \"\"\"Check if the result of a mathematical equation is equal to x\"\"\"\n    equation = a**2 + b**2 + 2*a*b\n    return equation == x", "solution_func": "def g(a = 2, b = 3):\n    return a**2 + 2*a*b + b**2", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import *\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Find the index of the first occurrence of the target number in the list,\n    or return -1 if it does not exist.\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return i\n    return -1\n\ndef g(target: int):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(5)) == 4\n\n", "emb": null, "idx_generation": 432, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Find the index of the first occurrence of the target number in the list,\n    or return -1 if it does not exist.\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return i\n    return -1", "solution_func": "def g(target: int):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import *\n\ndef f(nums: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n    Given a list of numbers, find all unique combinations of k numbers.\n    Each combination should be a list with distinct elements in ascending order.\n    \"\"\"\n    def backtrack(start, cur):\n        if len(cur) == k:\n            combinations.append(cur[:])\n            return\n        for i in range(start, len(nums)):\n            cur.append(nums[i])\n            backtrack(i + 1, cur)\n            cur.pop()\n    \n    combinations = []\n    nums.sort()\n    backtrack(0, [])\n    return combinations\n\ndef g(k: int):\n    return [1, 2, 3, 4]\n\nassert f(g(2)) == [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n\n", "emb": null, "idx_generation": 432, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\n\ndef f(nums: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n    Given a list of numbers, find all unique combinations of k numbers.\n    Each combination should be a list with distinct elements in ascending order.\n    \"\"\"\n    def backtrack(start, cur):\n        if len(cur) == k:\n            combinations.append(cur[:])\n            return\n        for i in range(start, len(nums)):\n            cur.append(nums[i])\n            backtrack(i + 1, cur)\n            cur.pop()\n    \n    combinations = []\n    nums.sort()\n    backtrack(0, [])\n    return combinations", "solution_func": "def g(k: int):\n    return [1, 2, 3, 4]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import *\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the maximum product of any three numbers in the given list.\n    \"\"\"\n    nums.sort()\n    return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])\n\ndef g():\n    return [1, -2, 3, -4, 5]\n\nassert f(g()) == 40\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 432, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the maximum product of any three numbers in the given list.\n    \"\"\"\n    nums.sort()\n    return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])", "solution_func": "def g():\n    return [1, -2, 3, -4, 5]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import *\n\ndef f(strings: List[str]) -> List[str]:\n    \"\"\"\n    Given a list of strings, return a new list containing only the strings that contain a specific character.\n\n    Sample Input:\n    [\"apple\", \"banana\", \"cherry\", \"date\"], 'a'\n\n    Sample Output:\n    [\"apple\", \"banana\"]\n    \"\"\"\n    return [s for s in strings if 'a' in s]\n\ndef g(strings: List[str] = [\"apple\", \"banana\", \"cherry\", \"date\"]):\n    return strings\n\nassert f(g()) == [\"apple\", \"banana\"]\n\n", "emb": null, "idx_generation": 432, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\n\ndef f(strings: List[str]) -> List[str]:\n    \"\"\"\n    Given a list of strings, return a new list containing only the strings that contain a specific character.\n\n    Sample Input:\n    [\"apple\", \"banana\", \"cherry\", \"date\"], 'a'\n\n    Sample Output:\n    [\"apple\", \"banana\"]\n    \"\"\"\n    return [s for s in strings if 'a' in s]", "solution_func": "def g(strings: List[str] = [\"apple\", \"banana\", \"cherry\", \"date\"]):\n    return strings", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\nfrom typing import *\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Determine if the list of numbers follows an exponential pattern, where each number is the result of raising a constant base to a specific power.\n\n    Sample Input:\n    [1, 2, 4, 8, 16]\n\n    Sample Output:\n    True\n    \"\"\"\n    if len(numbers) < 2:\n        return False\n    \n    base = numbers[1] / numbers[0]\n    for i in range(2, len(numbers)):\n        if numbers[i] != numbers[i-1] * base:\n            return False\n    \n    return True\n\ndef g(numbers: List[int] = [1, 2, 4, 8, 16]):\n    return numbers\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 432, "target_skills": null, "problem_func": "from typing import*\nimport math\nfrom typing import *\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Determine if the list of numbers follows an exponential pattern, where each number is the result of raising a constant base to a specific power.\n\n    Sample Input:\n    [1, 2, 4, 8, 16]\n\n    Sample Output:\n    True\n    \"\"\"\n    if len(numbers) < 2:\n        return False\n    \n    base = numbers[1] / numbers[0]\n    for i in range(2, len(numbers)):\n        if numbers[i] != numbers[i-1] * base:\n            return False\n    \n    return True", "solution_func": "def g(numbers: List[int] = [1, 2, 4, 8, 16]):\n    return numbers", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import *\n\ndef f(strings: List[str]) -> List[str]:\n    \"\"\"\n    Given a list of strings, return a new list containing only the strings that have an even length.\n\n    Sample Input:\n    [\"apple\", \"banana\", \"cherry\", \"date\"]\n\n    Sample Output:\n    [\"apple\", \"date\"]\n    \"\"\"\n    return [s for s in strings if len(s) % 2 == 0]\n\ndef g(strings: List[str] = [\"apple\", \"banana\", \"cherry\", \"date\"]):\n    return strings\n\nassert f(g()) == [\"apple\", \"date\"]\n", "emb": null, "idx_generation": 432, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\n\ndef f(strings: List[str]) -> List[str]:\n    \"\"\"\n    Given a list of strings, return a new list containing only the strings that have an even length.\n\n    Sample Input:\n    [\"apple\", \"banana\", \"cherry\", \"date\"]\n\n    Sample Output:\n    [\"apple\", \"date\"]\n    \"\"\"\n    return [s for s in strings if len(s) % 2 == 0]", "solution_func": "def g(strings: List[str] = [\"apple\", \"banana\", \"cherry\", \"date\"]):\n    return strings", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains only even numbers.\n    \"\"\"\n    return all(num % 2 == 0 for num in nums)\n\ndef g():\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\nassert f(g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 432, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains only even numbers.\n    \"\"\"\n    return all(num % 2 == 0 for num in nums)", "solution_func": "def g():\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]", "map_ix": [1, 1, 0, 1, 1, 1, 1, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a prime sequence.\"\"\"\n    if len(nums) < 2:\n        return False\n    for num in nums:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n    return True\n\ndef g(n: int):\n    \"\"\"Generate a sequence of n prime numbers.\"\"\"\n    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes\n\nassert f(g(5)) == True\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 433, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a prime sequence.\"\"\"\n    if len(nums) < 2:\n        return False\n    for num in nums:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n    return True", "solution_func": "def g(n: int):\n    \"\"\"Generate a sequence of n prime numbers.\"\"\"\n    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a Fibonacci sequence.\"\"\"\n    if len(nums) < 3:\n        return False\n    for i in range(2, len(nums)):\n        if nums[i] != nums[i-1] + nums[i-2]:\n            return False\n    return True\n\ndef g(n: int):\n    \"\"\"Generate a Fibonacci sequence of length n.\"\"\"\n    sequence = [0, 1]\n    while len(sequence) < n:\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence\n\nassert f(g(8)) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 433, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a Fibonacci sequence.\"\"\"\n    if len(nums) < 3:\n        return False\n    for i in range(2, len(nums)):\n        if nums[i] != nums[i-1] + nums[i-2]:\n            return False\n    return True", "solution_func": "def g(n: int):\n    \"\"\"Generate a Fibonacci sequence of length n.\"\"\"\n    sequence = [0, 1]\n    while len(sequence) < n:\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a perfect square sequence.\"\"\"\n    if len(nums) < 2:\n        return False\n    for num in nums:\n        if int(num**0.5)**2 != num:\n            return False\n    return True\n\ndef g(n: int):\n    \"\"\"Generate a sequence of n perfect square numbers.\"\"\"\n    squares = []\n    num = 1\n    while len(squares) < n:\n        squares.append(num**2)\n        num += 1\n    return squares\n\nassert f(g(4)) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 433, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a perfect square sequence.\"\"\"\n    if len(nums) < 2:\n        return False\n    for num in nums:\n        if int(num**0.5)**2 != num:\n            return False\n    return True", "solution_func": "def g(n: int):\n    \"\"\"Generate a sequence of n perfect square numbers.\"\"\"\n    squares = []\n    num = 1\n    while len(squares) < n:\n        squares.append(num**2)\n        num += 1\n    return squares", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that sums up to the target value.\n\n    Sample input:\n    [1, 2, 3, 4, 5], 7\n\n    Sample output:\n    True\n    \"\"\"\n    complements = set()\n    for num in nums:\n        if num in complements:\n            return True\n        complements.add(target - num)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return nums, target\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 433, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that sums up to the target value.\n\n    Sample input:\n    [1, 2, 3, 4, 5], 7\n\n    Sample output:\n    True\n    \"\"\"\n    complements = set()\n    for num in nums:\n        if num in complements:\n            return True\n        complements.add(target - num)\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return nums, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a valid Sudoku solution.\n\n    Sample input:\n    [\n        [5, 3, 4, 6, 7, 8, 9, 1, 2],\n        [6, 7, 2, 1, 9, 5, 3, 4, 8],\n        [1, 9, 8, 3, 4, 2, 5, 6, 7],\n        [8, 5, 9, 7, 6, 1, 4, 2, 3],\n        [4, 2, 6, 8, 5, 3, 7, 9, 1],\n        [7, 1, 3, 9, 2, 4, 8, 5, 6],\n        [9, 6, 1, 5, 3, 7, 2, 8, 4],\n        [2, 8, 7, 4, 1, 9, 6, 3, 5],\n        [3, 4, 5, 2, 8, 6, 1, 7, 9]\n    ]\n\n    Sample output:\n    True\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        row_set = set()\n        col_set = set()\n        for j in range(n):\n            if matrix[i][j] in row_set or matrix[j][i] in col_set:\n                return False\n            row_set.add(matrix[i][j])\n            col_set.add(matrix[j][i])\n\n    subgrid_size = int(n ** 0.5)\n    for i in range(0, n, subgrid_size):\n        for j in range(0, n, subgrid_size):\n            subgrid_set = set()\n            for k in range(subgrid_size):\n                for l in range(subgrid_size):\n                    num = matrix[i + k][j + l]\n                    if num in subgrid_set:\n                        return False\n                    subgrid_set.add(num)\n    return True\n\ndef g(matrix: List[List[int]] = [\n    [5, 3, 4, 6, 7, 8, 9, 1, 2],\n    [6, 7, 2, 1, 9, 5, 3, 4, 8],\n    [1, 9, 8, 3, 4, 2, 5, 6, 7],\n    [8, 5, 9, 7, 6, 1, 4, 2, 3],\n    [4, 2, 6, 8, 5, 3, 7, 9, 1],\n    [7, 1, 3, 9, 2, 4, 8, 5, 6],\n    [9, 6, 1, 5, 3, 7, 2, 8, 4],\n    [2, 8, 7, 4, 1, 9, 6, 3, 5],\n    [3, 4, 5, 2, 8, 6, 1, 7, 9]\n]):\n    return matrix\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 433, "target_skills": null, "problem_func": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a valid Sudoku solution.\n\n    Sample input:\n    [\n        [5, 3, 4, 6, 7, 8, 9, 1, 2],\n        [6, 7, 2, 1, 9, 5, 3, 4, 8],\n        [1, 9, 8, 3, 4, 2, 5, 6, 7],\n        [8, 5, 9, 7, 6, 1, 4, 2, 3],\n        [4, 2, 6, 8, 5, 3, 7, 9, 1],\n        [7, 1, 3, 9, 2, 4, 8, 5, 6],\n        [9, 6, 1, 5, 3, 7, 2, 8, 4],\n        [2, 8, 7, 4, 1, 9, 6, 3, 5],\n        [3, 4, 5, 2, 8, 6, 1, 7, 9]\n    ]\n\n    Sample output:\n    True\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        row_set = set()\n        col_set = set()\n        for j in range(n):\n            if matrix[i][j] in row_set or matrix[j][i] in col_set:\n                return False\n            row_set.add(matrix[i][j])\n            col_set.add(matrix[j][i])\n\n    subgrid_size = int(n ** 0.5)\n    for i in range(0, n, subgrid_size):\n        for j in range(0, n, subgrid_size):\n            subgrid_set = set()\n            for k in range(subgrid_size):\n                for l in range(subgrid_size):\n                    num = matrix[i + k][j + l]\n                    if num in subgrid_set:\n                        return False\n                    subgrid_set.add(num)\n    return True", "solution_func": "def g(matrix: List[List[int]] = [\n    [5, 3, 4, 6, 7, 8, 9, 1, 2],\n    [6, 7, 2, 1, 9, 5, 3, 4, 8],\n    [1, 9, 8, 3, 4, 2, 5, 6, 7],\n    [8, 5, 9, 7, 6, 1, 4, 2, 3],\n    [4, 2, 6, 8, 5, 3, 7, 9, 1],\n    [7, 1, 3, 9, 2, 4, 8, 5, 6],\n    [9, 6, 1, 5, 3, 7, 2, 8, 4],\n    [2, 8, 7, 4, 1, 9, 6, 3, 5],\n    [3, 4, 5, 2, 8, 6, 1, 7, 9]\n]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the number that appears only once in the given list.\n\n    Sample input:\n    [1, 2, 3, 4, 5, 1, 2, 3, 4]\n\n    Sample output:\n    5\n    \"\"\"\n    unique_num = 0\n    for num in nums:\n        unique_num ^= num\n    return unique_num\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 1, 2, 3, 4]):\n    return nums\n\nassert f(g()) == 5\n", "emb": [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 433, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the number that appears only once in the given list.\n\n    Sample input:\n    [1, 2, 3, 4, 5, 1, 2, 3, 4]\n\n    Sample output:\n    5\n    \"\"\"\n    unique_num = 0\n    for num in nums:\n        unique_num ^= num\n    return unique_num", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 1, 2, 3, 4]):\n    return nums", "map_ix": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum: int) -> bool:\n    \"\"\"\n    Check if there is a combination of numbers that adds up to the target sum.\n    \"\"\"\n    def combination_sum(numbers, target_sum):\n        if target_sum == 0:\n            return True\n        if not numbers or target_sum < 0:\n            return False\n        return combination_sum(numbers[1:], target_sum - numbers[0]) or combination_sum(numbers[1:], target_sum)\n    return combination_sum(numbers, target_sum)\n\ndef g(target_sum: int = 10):\n    return [2, 4, 6, 8]\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 433, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum: int) -> bool:\n    \"\"\"\n    Check if there is a combination of numbers that adds up to the target sum.\n    \"\"\"\n    def combination_sum(numbers, target_sum):\n        if target_sum == 0:\n            return True\n        if not numbers or target_sum < 0:\n            return False\n        return combination_sum(numbers[1:], target_sum - numbers[0]) or combination_sum(numbers[1:], target_sum)\n    return combination_sum(numbers, target_sum)", "solution_func": "def g(target_sum: int = 10):\n    return [2, 4, 6, 8]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if there is a pair of numbers in the list that adds up to 10.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == 10:\n                return True\n    return False\n\ndef g():\n    return [2, 4, 6, 8]\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 433, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if there is a pair of numbers in the list that adds up to 10.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == 10:\n                return True\n    return False", "solution_func": "def g():\n    return [2, 4, 6, 8]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if there is a subarray in the list that has a sum of 10.\n    \"\"\"\n    for i in range(len(numbers)):\n        current_sum = numbers[i]\n        if current_sum == 10:\n            return True\n        for j in range(i+1, len(numbers)):\n            current_sum += numbers[j]\n            if current_sum == 10:\n                return True\n    return False\n\ndef g():\n    return [2, 4, 6, 8]\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 433, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if there is a subarray in the list that has a sum of 10.\n    \"\"\"\n    for i in range(len(numbers)):\n        current_sum = numbers[i]\n        if current_sum == 10:\n            return True\n        for j in range(i+1, len(numbers)):\n            current_sum += numbers[j]\n            if current_sum == 10:\n                return True\n    return False", "solution_func": "def g():\n    return [2, 4, 6, 8]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the minimum subarray sum.\n\n    A subarray is a contiguous part of the array.\n\n    Sample Input:\n    nums = [1, -2, 3, -4, 5, -6, 7, -8, 9]\n\n    Sample Output:\n    -20\n    Explanation: The contiguous subarray [-4, 5, -6, 7, -8] has the smallest sum = -20.\n    \"\"\"\n    n = len(nums)\n    min_sum = float('inf')\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += nums[i]\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n        if curr_sum > 0:\n            curr_sum = 0\n    return min_sum\n\ndef g():\n    return [1, -2, 3, -4, 5, -6, 7, -8, 9]\n\nassert f(g()) == -20\n\n", "emb": null, "idx_generation": 433, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the minimum subarray sum.\n\n    A subarray is a contiguous part of the array.\n\n    Sample Input:\n    nums = [1, -2, 3, -4, 5, -6, 7, -8, 9]\n\n    Sample Output:\n    -20\n    Explanation: The contiguous subarray [-4, 5, -6, 7, -8] has the smallest sum = -20.\n    \"\"\"\n    n = len(nums)\n    min_sum = float('inf')\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += nums[i]\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n        if curr_sum > 0:\n            curr_sum = 0\n    return min_sum", "solution_func": "def g():\n    return [1, -2, 3, -4, 5, -6, 7, -8, 9]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are two distinct indices i and j in the list such that the absolute difference between nums[i] and nums[j] is greater than target.\n\n    Sample Input:\n    nums = [1, 5, 7, 10, 15]\n    target = 4\n\n    Sample Output:\n    False\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if any(num - i > target and num - i >= 0 for i in num_set):\n            return True\n        if any(i - num > target and i - num >= 0 for i in num_set):\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 5, 7, 10, 15], target: int = 4):\n    return (nums, target)\n\nassert f(*g()) == False\n", "emb": null, "idx_generation": 434, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are two distinct indices i and j in the list such that the absolute difference between nums[i] and nums[j] is greater than target.\n\n    Sample Input:\n    nums = [1, 5, 7, 10, 15]\n    target = 4\n\n    Sample Output:\n    False\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if any(num - i > target and num - i >= 0 for i in num_set):\n            return True\n        if any(i - num > target and i - num >= 0 for i in num_set):\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums: List[int] = [1, 5, 7, 10, 15], target: int = 4):\n    return (nums, target)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are two distinct indices i and j in the list such that the absolute difference between nums[i] and nums[j] is exactly equal to target.\n\n    Sample Input:\n    nums = [1, 5, 7, 10, 15]\n    target = 4\n\n    Sample Output:\n    False\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if any(num - i == target and num - i >= 0 for i in num_set):\n            return True\n        if any(i - num == target and i - num >= 0 for i in num_set):\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 5, 7, 10, 15], target: int = 4):\n    return (nums, target)\n\nassert f(*g()) == False\n", "emb": null, "idx_generation": 434, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are two distinct indices i and j in the list such that the absolute difference between nums[i] and nums[j] is exactly equal to target.\n\n    Sample Input:\n    nums = [1, 5, 7, 10, 15]\n    target = 4\n\n    Sample Output:\n    False\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if any(num - i == target and num - i >= 0 for i in num_set):\n            return True\n        if any(i - num == target and i - num >= 0 for i in num_set):\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums: List[int] = [1, 5, 7, 10, 15], target: int = 4):\n    return (nums, target)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are two distinct indices i and j in the list such that the absolute difference between nums[i] and nums[j] is less than target.\n\n    Sample Input:\n    nums = [1, 5, 7, 10, 15]\n    target = 4\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if any(num - i < target and num - i >= 0 for i in num_set):\n            return True\n        if any(i - num < target and i - num >= 0 for i in num_set):\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 5, 7, 10, 15], target: int = 4):\n    return (nums, target)\n\nassert f(*g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 434, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are two distinct indices i and j in the list such that the absolute difference between nums[i] and nums[j] is less than target.\n\n    Sample Input:\n    nums = [1, 5, 7, 10, 15]\n    target = 4\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if any(num - i < target and num - i >= 0 for i in num_set):\n            return True\n        if any(i - num < target and i - num >= 0 for i in num_set):\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums: List[int] = [1, 5, 7, 10, 15], target: int = 4):\n    return (nums, target)", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the sum of all the even numbers.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    output: 6 (2 + 4)\n    \"\"\"\n    return sum(num for num in nums if num % 2 == 0)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == 6\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 434, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the sum of all the even numbers.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    output: 6 (2 + 4)\n    \"\"\"\n    return sum(num for num in nums if num % 2 == 0)", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the prime numbers.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6, 7]\n    output: [2, 3, 5, 7]\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return [num for num in nums if is_prime(num)]\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7]\n\nassert f(g()) == [2, 3, 5, 7]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 434, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the prime numbers.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6, 7]\n    output: [2, 3, 5, 7]\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return [num for num in nums if is_prime(num)]", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the product of all the negative numbers.\n\n    Example:\n    nums = [-1, 2, -3, 4, -5]\n    output: -15 (-1 * -3 * -5)\n    \"\"\"\n    product = 1\n    for num in nums:\n        if num < 0:\n            product *= num\n    return product\n\ndef g():\n    return [-1, 2, -3, 4, -5]\n\nassert f(g()) == -15\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 434, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the product of all the negative numbers.\n\n    Example:\n    nums = [-1, 2, -3, 4, -5]\n    output: -15 (-1 * -3 * -5)\n    \"\"\"\n    product = 1\n    for num in nums:\n        if num < 0:\n            product *= num\n    return product", "solution_func": "def g():\n    return [-1, 2, -3, 4, -5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the sum of all elements in each row is equal to the sum of all elements in each column.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    row_sums = [sum(row) for row in arr]\n    col_sums = [sum(col) for col in zip(*arr)]\n    return row_sums == col_sums\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 434, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the sum of all elements in each row is equal to the sum of all elements in each column.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    row_sums = [sum(row) for row in arr]\n    col_sums = [sum(col) for col in zip(*arr)]\n    return row_sums == col_sums", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target value, check if the target value is present in any row or column of the matrix.\n\n    Sample Input:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    target = 5\n\n    Sample Output:\n    True\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    for col in zip(*matrix):\n        if target in col:\n            return True\n    return False\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target: int = 5):\n    return matrix, target\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 434, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target value, check if the target value is present in any row or column of the matrix.\n\n    Sample Input:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    target = 5\n\n    Sample Output:\n    True\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    for col in zip(*matrix):\n        if target in col:\n            return True\n    return False", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target: int = 5):\n    return matrix, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of numbers, return a new list containing only the even numbers from the original list.\n\n    Sample Input:\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Sample Output:\n    [2, 4, 6, 8, 10]\n    \"\"\"\n    return [num for num in numbers if num % 2 == 0]\n\ndef g(numbers: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return numbers\n\nassert f(g()) == [2, 4, 6, 8, 10]\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 434, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of numbers, return a new list containing only the even numbers from the original list.\n\n    Sample Input:\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Sample Output:\n    [2, 4, 6, 8, 10]\n    \"\"\"\n    return [num for num in numbers if num % 2 == 0]", "solution_func": "def g(numbers: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return numbers", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Determine if it is possible to find a pair of numbers in a matrix that XORs to a target number. The pair of numbers\n    must be distinct and the order of the numbers in the pair does not matter.\n\n    Sample input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample output:\n    True\n\n    The pair of numbers (2, 6) XORs to 4, which is the target number.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for x in range(i, rows):\n                for y in range(j, cols):\n                    if matrix[i][j] ^ matrix[x][y] == target and (i != x or j != y):\n                        return True\n    return False\n\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, target ^ 2, 9]]\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 434, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Determine if it is possible to find a pair of numbers in a matrix that XORs to a target number. The pair of numbers\n    must be distinct and the order of the numbers in the pair does not matter.\n\n    Sample input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample output:\n    True\n\n    The pair of numbers (2, 6) XORs to 4, which is the target number.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for x in range(i, rows):\n                for y in range(j, cols):\n                    if matrix[i][j] ^ matrix[x][y] == target and (i != x or j != y):\n                        return True\n    return False", "solution_func": "def g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, target ^ 2, 9]]", "map_ix": [1, 0, 0, 0, 1, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subarray with a sum of zero.\n\n    Example:\n    nums = [4, -2, 3, 1, 2, -5, -4, 7]\n\n    Output:\n    True\n\n    Explanation: The subarray [4, -2, 3, 1, 2, -5] has a sum of zero.\n    \"\"\"\n    prefix_sum = set()\n    curr_sum = 0\n\n    for num in nums:\n        curr_sum += num\n        if curr_sum == 0 or curr_sum in prefix_sum:\n            return True\n        prefix_sum.add(curr_sum)\n\n    return False\n\ndef g(nums: List[int] = [4, -2, 3, 1, 2, -5, -4, 7]):\n    return (nums,)\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 435, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subarray with a sum of zero.\n\n    Example:\n    nums = [4, -2, 3, 1, 2, -5, -4, 7]\n\n    Output:\n    True\n\n    Explanation: The subarray [4, -2, 3, 1, 2, -5] has a sum of zero.\n    \"\"\"\n    prefix_sum = set()\n    curr_sum = 0\n\n    for num in nums:\n        curr_sum += num\n        if curr_sum == 0 or curr_sum in prefix_sum:\n            return True\n        prefix_sum.add(curr_sum)\n\n    return False", "solution_func": "def g(nums: List[int] = [4, -2, 3, 1, 2, -5, -4, 7]):\n    return (nums,)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the smallest positive integer that is missing from the list.\n\n    Example:\n    nums = [1, 3, 5, 2, 6, 8, 9]\n\n    Output:\n    4\n\n    Explanation: The smallest positive integer missing from the list is 4.\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]:\n            nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n\n    for i in range(n):\n        if nums[i] != i + 1:\n            return i + 1\n\n    return n + 1\n\ndef g(nums: List[int] = [1, 3, 5, 2, 6, 8, 9]):\n    return (nums,)\n\nassert f(*g()) == 4\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 435, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the smallest positive integer that is missing from the list.\n\n    Example:\n    nums = [1, 3, 5, 2, 6, 8, 9]\n\n    Output:\n    4\n\n    Explanation: The smallest positive integer missing from the list is 4.\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]:\n            nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n\n    for i in range(n):\n        if nums[i] != i + 1:\n            return i + 1\n\n    return n + 1", "solution_func": "def g(nums: List[int] = [1, 3, 5, 2, 6, 8, 9]):\n    return (nums,)", "map_ix": [1, 1, 0, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list where each element is the product of all other elements in the original list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6]\n\n    Output:\n    [720, 360, 240, 180, 144, 120]\n\n    Explanation: The first element in the output is the product of all other elements except 1, the second element is the product of all other elements except 2, and so on.\n    \"\"\"\n    n = len(nums)\n    left = [0] * n\n    right = [0] * n\n    result = [0] * n\n\n    left[0] = 1\n    right[n - 1] = 1\n\n    for i in range(1, n):\n        left[i] = nums[i - 1] * left[i - 1]\n\n    for i in range(n - 2, -1, -1):\n        right[i] = nums[i + 1] * right[i + 1]\n\n    for i in range(n):\n        result[i] = left[i] * right[i]\n\n    return result\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6]):\n    return (nums,)\n\nassert f(*g()) == [720, 360, 240, 180, 144, 120]\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 435, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list where each element is the product of all other elements in the original list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6]\n\n    Output:\n    [720, 360, 240, 180, 144, 120]\n\n    Explanation: The first element in the output is the product of all other elements except 1, the second element is the product of all other elements except 2, and so on.\n    \"\"\"\n    n = len(nums)\n    left = [0] * n\n    right = [0] * n\n    result = [0] * n\n\n    left[0] = 1\n    right[n - 1] = 1\n\n    for i in range(1, n):\n        left[i] = nums[i - 1] * left[i - 1]\n\n    for i in range(n - 2, -1, -1):\n        right[i] = nums[i + 1] * right[i + 1]\n\n    for i in range(n):\n        result[i] = left[i] * right[i]\n\n    return result", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6]):\n    return (nums,)", "map_ix": [1, 1, 0, 1, 0, 0, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the maximum sum of any two consecutive numbers in the given list.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample output:\n    9\n\n    Explanation: The maximum sum is obtained by adding 4 and 5, which gives 9.\n    \"\"\"\n    max_sum = float('-inf')\n    for i in range(len(nums)-1):\n        sum = nums[i] + nums[i+1]\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == 9\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 435, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the maximum sum of any two consecutive numbers in the given list.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample output:\n    9\n\n    Explanation: The maximum sum is obtained by adding 4 and 5, which gives 9.\n    \"\"\"\n    max_sum = float('-inf')\n    for i in range(len(nums)-1):\n        sum = nums[i] + nums[i+1]\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum", "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 4, 5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target number, check if the target number exists in the matrix.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    target = 5\n    output: True\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ], 5\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 435, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target number, check if the target number exists in the matrix.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    target = 5\n    output: True\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ], 5", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=3, b=10, c=15) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c even integers)\"\"\"\n    return n + a == sum([b * (2*i) for i in range(1, c+1)])\ndef g(a=3, b=10, c=15):\n    return -a + sum([b * (2*i) for i in range(1, c+1)])\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 435, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=3, b=10, c=15) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c even integers)\"\"\"\n    return n + a == sum([b * (2*i) for i in range(1, c+1)])", "solution_func": "def g(a=3, b=10, c=15):\n    return -a + sum([b * (2*i) for i in range(1, c+1)])", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any combination sums up to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False\n\ndef g(k=3, target_sum=20):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]\n\nassert f(g(), k=3, target_sum=20) == True\n", "emb": null, "idx_generation": 435, "target_skills": null, "problem_func": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any combination sums up to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False", "solution_func": "def g(k=3, target_sum=20):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any combination sums up to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False\n\ndef g(k=2, target_sum=15):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n\nassert f(g(), k=2, target_sum=15) == True\n", "emb": null, "idx_generation": 435, "target_skills": null, "problem_func": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any combination sums up to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False", "solution_func": "def g(k=2, target_sum=15):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any combination sums up to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False\n\ndef g(k=5, target_sum=30):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\nassert f(g(), k=5, target_sum=30) == False\n", "emb": null, "idx_generation": 435, "target_skills": null, "problem_func": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any combination sums up to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False", "solution_func": "def g(k=5, target_sum=30):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the list whose sum is equal to the target number.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return nums\n\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 435, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the list whose sum is equal to the target number.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import *\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s=\"racecar\"):\n    return s\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 436, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n    \"\"\"\n    return s == s[::-1]", "solution_func": "def g(s=\"racecar\"):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the sum of all even numbers in the list.\n    \"\"\"\n    return sum(num for num in nums if num % 2 == 0)\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g()) == 30\n", "emb": [1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 436, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the sum of all even numbers in the list.\n    \"\"\"\n    return sum(num for num in nums if num % 2 == 0)", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums", "map_ix": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import *\ndef f(words: List[str]) -> List[str]:\n    \"\"\"\n    Given a list of words, return a new list containing only the words that start with a vowel.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return [word for word in words if word[0].lower() in vowels]\n\ndef g(words=[\"apple\", \"banana\", \"cat\", \"dog\", \"elephant\"]):\n    return words\n\nassert f(g()) == [\"apple\", \"elephant\"]\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 436, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\ndef f(words: List[str]) -> List[str]:\n    \"\"\"\n    Given a list of words, return a new list containing only the words that start with a vowel.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return [word for word in words if word[0].lower() in vowels]", "solution_func": "def g(words=[\"apple\", \"banana\", \"cat\", \"dog\", \"elephant\"]):\n    return words", "map_ix": [1, 1, 0, 1, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Calculate the product of all odd numbers in the given list of integers.\n\n    Sample Input:\n    [1, 2, 3, 4, 5, 6]\n\n    Sample Output:\n    15\n    \"\"\"\n    return 1 if len(nums) == 0 else (nums[0] if nums[0] % 2 != 0 else 1) * f(nums[1:])\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6]):\n    return nums\n\nassert f(g()) == 15\n\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 436, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Calculate the product of all odd numbers in the given list of integers.\n\n    Sample Input:\n    [1, 2, 3, 4, 5, 6]\n\n    Sample Output:\n    15\n    \"\"\"\n    return 1 if len(nums) == 0 else (nums[0] if nums[0] % 2 != 0 else 1) * f(nums[1:])", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6]):\n    return nums", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the given list that add up to the target number.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 8\n\n    Sample Output:\n    True\n    \"\"\"\n    s = set()\n    for num in nums:\n        if target - num in s:\n            return True\n        s.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 8):\n    return nums, target\n\nassert f(*g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0], "idx_generation": 436, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the given list that add up to the target number.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 8\n\n    Sample Output:\n    True\n    \"\"\"\n    s = set()\n    for num in nums:\n        if target - num in s:\n            return True\n        s.add(num)\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 8):\n    return nums, target", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Remove all duplicates from the given list of integers.\n\n    Sample Input:\n    [1, 2, 2, 3, 4, 4, 5]\n\n    Sample Output:\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    return list(set(nums))\n\ndef g(nums: List[int] = [1, 2, 2, 3, 4, 4, 5]):\n    return nums\n\nassert f(g()) == [1, 2, 3, 4, 5]\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 436, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Remove all duplicates from the given list of integers.\n\n    Sample Input:\n    [1, 2, 2, 3, 4, 4, 5]\n\n    Sample Output:\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    return list(set(nums))", "solution_func": "def g(nums: List[int] = [1, 2, 2, 3, 4, 4, 5]):\n    return nums", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Count the number of unique combinations of numbers in the given list that add up to the target value.\n\n    Sample input:\n    nums = [2, 3, 6, 7]\n    target = 7\n    \n    Sample output:\n    2\n    \n    Explanation: The unique combinations are [2, 2, 3] and [7].\n    \"\"\"\n    dp = [0] * (target + 1)\n    dp[0] = 1\n    \n    for i in range(1, target + 1):\n        for num in nums:\n            if i >= num:\n                dp[i] += dp[i - num]\n    \n    return dp[target]\n\ndef g() -> Tuple[List[int], int]:\n    return ([2, 3, 6, 7], 7)\n\nassert f(*g()) == 2\n", "emb": null, "idx_generation": 436, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Count the number of unique combinations of numbers in the given list that add up to the target value.\n\n    Sample input:\n    nums = [2, 3, 6, 7]\n    target = 7\n    \n    Sample output:\n    2\n    \n    Explanation: The unique combinations are [2, 2, 3] and [7].\n    \"\"\"\n    dp = [0] * (target + 1)\n    dp[0] = 1\n    \n    for i in range(1, target + 1):\n        for num in nums:\n            if i >= num:\n                dp[i] += dp[i - num]\n    \n    return dp[target]", "solution_func": "def g() -> Tuple[List[int], int]:\n    return ([2, 3, 6, 7], 7)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n    Find all the subsets of the given list that have a sum equal to the target value.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    target = 5\n    \n    Sample output:\n    [[1, 4], [2, 3], [5]]\n    \"\"\"\n    def backtrack(start, path, target):\n        if target == 0:\n            result.append(path)\n            return\n        if target < 0:\n            return\n        for i in range(start, len(nums)):\n            if i > start and nums[i] == nums[i - 1]:\n                continue\n            backtrack(i + 1, path + [nums[i]], target - nums[i])\n    \n    nums.sort()\n    result = []\n    backtrack(0, [], k)\n    return result\n\ndef g() -> Tuple[List[int], int]:\n    return ([1, 2, 3, 4, 5], 5)\n\nassert f(*g()) == [[1, 4], [2, 3], [5]]\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 436, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n    Find all the subsets of the given list that have a sum equal to the target value.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    target = 5\n    \n    Sample output:\n    [[1, 4], [2, 3], [5]]\n    \"\"\"\n    def backtrack(start, path, target):\n        if target == 0:\n            result.append(path)\n            return\n        if target < 0:\n            return\n        for i in range(start, len(nums)):\n            if i > start and nums[i] == nums[i - 1]:\n                continue\n            backtrack(i + 1, path + [nums[i]], target - nums[i])\n    \n    nums.sort()\n    result = []\n    backtrack(0, [], k)\n    return result", "solution_func": "def g() -> Tuple[List[int], int]:\n    return ([1, 2, 3, 4, 5], 5)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the minimum number of jumps required to reach the end of the given list.\n\n    Sample input:\n    nums = [2, 3, 1, 1, 4]\n    \n    Sample output:\n    2\n    \n    Explanation: The minimum jumps are [2, 3].\n    \"\"\"\n    if len(nums) <= 1:\n        return 0\n    if nums[0] == 0:\n        return float('inf')\n    \n    max_reach = nums[0]\n    steps = nums[0]\n    jumps = 1\n    \n    for i in range(1, len(nums)):\n        if i == len(nums) - 1:\n            return jumps\n        max_reach = max(max_reach, i + nums[i])\n        steps -= 1\n        \n        if steps == 0:\n            jumps += 1\n            if i >= max_reach:\n                return -1\n            steps = max_reach - i\n    \n    return -1\n\ndef g() -> List[int]:\n    return [2, 3, 1, 1, 4]\n\nassert f(g()) == 2\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 436, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the minimum number of jumps required to reach the end of the given list.\n\n    Sample input:\n    nums = [2, 3, 1, 1, 4]\n    \n    Sample output:\n    2\n    \n    Explanation: The minimum jumps are [2, 3].\n    \"\"\"\n    if len(nums) <= 1:\n        return 0\n    if nums[0] == 0:\n        return float('inf')\n    \n    max_reach = nums[0]\n    steps = nums[0]\n    jumps = 1\n    \n    for i in range(1, len(nums)):\n        if i == len(nums) - 1:\n            return jumps\n        max_reach = max(max_reach, i + nums[i])\n        steps -= 1\n        \n        if steps == 0:\n            jumps += 1\n            if i >= max_reach:\n                return -1\n            steps = max_reach - i\n    \n    return -1", "solution_func": "def g() -> List[int]:\n    return [2, 3, 1, 1, 4]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "import math\nfrom typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the product of all the numbers in the list is divisible by 100.\n    \"\"\"\n    return math.prod(nums) % 100 == 0\n\ndef g():\n    return [1, 2, 3, 4, 5, 10]\n\nassert f(g()) == False\n", "emb": null, "idx_generation": 436, "target_skills": null, "problem_func": "import math\nfrom typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the product of all the numbers in the list is divisible by 100.\n    \"\"\"\n    return math.prod(nums) % 100 == 0", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if the product of any two numbers in the list is equal to the target\"\"\"\n    return any(nums[i] * nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 8) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 437, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if the product of any two numbers in the list is equal to the target\"\"\"\n    return any(nums[i] * nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if the list contains two consecutive elements whose sum is equal to the target\"\"\"\n    return any(nums[i] + nums[i+1] == target for i in range(len(nums)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 7) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 437, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if the list contains two consecutive elements whose sum is equal to the target\"\"\"\n    return any(nums[i] + nums[i+1] == target for i in range(len(nums)-1))", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 0, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if the sum of squares of any two numbers in the list is equal to the target\"\"\"\n    return any(nums[i]**2 + nums[j]**2 == target for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 41) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 437, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if the sum of squares of any two numbers in the list is equal to the target\"\"\"\n    return any(nums[i]**2 + nums[j]**2 == target for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, calculate the sum of all the elements in the matrix.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    output: 45\n    \"\"\"\n    result = 0\n    \n    for row in matrix:\n        result += sum(row)\n        \n    return result\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 45\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 437, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, calculate the sum of all the elements in the matrix.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    output: 45\n    \"\"\"\n    result = 0\n    \n    for row in matrix:\n        result += sum(row)\n        \n    return result", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return a list containing the sum of each row.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    output: [6, 15, 24]\n    \"\"\"\n    result = []\n    \n    for row in matrix:\n        result.append(sum(row))\n        \n    return result\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [6, 15, 24]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 437, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return a list containing the sum of each row.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    output: [6, 15, 24]\n    \"\"\"\n    result = []\n    \n    for row in matrix:\n        result.append(sum(row))\n        \n    return result", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix of integers, rotate the matrix by 90 degrees clockwise and return the rotated matrix.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    output: [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    \"\"\"\n    result = []\n    \n    for col in range(len(matrix[0])):\n        rotated_row = []\n        for row in matrix[::-1]:\n            rotated_row.append(row[col])\n        result.append(rotated_row)\n        \n    return result\n\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 437, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix of integers, rotate the matrix by 90 degrees clockwise and return the rotated matrix.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    output: [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    \"\"\"\n    result = []\n    \n    for col in range(len(matrix[0])):\n        rotated_row = []\n        for row in matrix[::-1]:\n            rotated_row.append(row[col])\n        result.append(rotated_row)\n        \n    return result", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if there are three distinct numbers in the list that sum up to 10.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == 10:\n                    return True\n    return False\n\ndef g(numbers: List[int] = [1, 2, 3, 4, 5]):\n    return numbers\n\nassert f(g()) == True\n\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 437, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if there are three distinct numbers in the list that sum up to 10.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == 10:\n                    return True\n    return False", "solution_func": "def g(numbers: List[int] = [1, 2, 3, 4, 5]):\n    return numbers", "map_ix": [0, 1, 0, 1, 0, 0, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, substring='abc', count=3, length=12) -> bool:\n    \"\"\"Check if the substring appears exactly 'count' number of times in the given string.\"\"\"\n    return string.count(substring) == count\n\ndef g(substring = 'abc', count = 3):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + c\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 437, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, substring='abc', count=3, length=12) -> bool:\n    \"\"\"Check if the substring appears exactly 'count' number of times in the given string.\"\"\"\n    return string.count(substring) == count", "solution_func": "def g(substring = 'abc', count = 3):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + c", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import Set\n\ndef f(s1: Set[int], s2: Set[int]) -> bool:\n    \"\"\"\n    Given two sets of integers, check if there is a pair of integers (one from each set)\n    such that their product is even.\n\n    Sample Input:\n    s1 = {1, 2, 3, 4, 5}\n    s2 = {6, 7, 8, 9, 10}\n\n    Sample Output:\n    True\n    \"\"\"\n    for num1 in s1:\n        for num2 in s2:\n            if (num1 * num2) % 2 == 0:\n                return True\n\n    return False\n\ndef g(s1: Set[int] = {1, 2, 3, 4, 5}, s2: Set[int] = {6, 7, 8, 9, 10}):\n    return s1, s2\n\nassert f(*g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 437, "target_skills": null, "problem_func": "from typing import*\nfrom typing import Set\n\ndef f(s1: Set[int], s2: Set[int]) -> bool:\n    \"\"\"\n    Given two sets of integers, check if there is a pair of integers (one from each set)\n    such that their product is even.\n\n    Sample Input:\n    s1 = {1, 2, 3, 4, 5}\n    s2 = {6, 7, 8, 9, 10}\n\n    Sample Output:\n    True\n    \"\"\"\n    for num1 in s1:\n        for num2 in s2:\n            if (num1 * num2) % 2 == 0:\n                return True\n\n    return False", "solution_func": "def g(s1: Set[int] = {1, 2, 3, 4, 5}, s2: Set[int] = {6, 7, 8, 9, 10}):\n    return s1, s2", "map_ix": [1, 1, 0, 1, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(li: List[int], n=10) -> bool:\n    \"\"\"\n    Given a list of integers li and an integer n, check if there exists a contiguous sublist of li\n    that sums up to n.\n\n    Sample input:\n    li = [1, 2, 3, 4, 5]\n    n = 7\n\n    Sample output:\n    True\n    \"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)+1):\n            if sum(li[i:j]) == n:\n                return True\n    return False\n\ndef g(n = 10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 437, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int], n=10) -> bool:\n    \"\"\"\n    Given a list of integers li and an integer n, check if there exists a contiguous sublist of li\n    that sums up to n.\n\n    Sample input:\n    li = [1, 2, 3, 4, 5]\n    n = 7\n\n    Sample output:\n    True\n    \"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)+1):\n            if sum(li[i:j]) == n:\n                return True\n    return False", "solution_func": "def g(n = 10):\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there are any duplicate elements in the list.\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g()) == False\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 438, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there are any duplicate elements in the list.\n    \"\"\"\n    return len(nums) != len(set(nums))", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix, return a list containing the sum of each row in the matrix.\n    \"\"\"\n    return [sum(row) for row in matrix]\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [6, 15, 24]\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 438, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix, return a list containing the sum of each row in the matrix.\n    \"\"\"\n    return [sum(row) for row in matrix]", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix, return the sum of all the elements in the matrix.\n    \"\"\"\n    return sum([sum(row) for row in matrix])\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 45\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 438, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix, return the sum of all the elements in the matrix.\n    \"\"\"\n    return sum([sum(row) for row in matrix])", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, calculate the sum of all elements in the matrix.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    45\n    \"\"\"\n    total_sum = 0\n    for row in matrix:\n        for num in row:\n            total_sum += num\n    return total_sum\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 45\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 438, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, calculate the sum of all elements in the matrix.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    45\n    \"\"\"\n    total_sum = 0\n    for row in matrix:\n        for num in row:\n            total_sum += num\n    return total_sum", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix of integers, rotate it 90 degrees counter-clockwise.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    [[3, 6, 9],\n     [2, 5, 8],\n     [1, 4, 7]]\n    \"\"\"\n    n = len(matrix)\n    rotated_matrix = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            rotated_matrix[i][j] = matrix[j][n - i - 1]\n    return rotated_matrix\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [[3, 6, 9], [2, 5, 8], [1, 4, 7]]\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 438, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix of integers, rotate it 90 degrees counter-clockwise.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    [[3, 6, 9],\n     [2, 5, 8],\n     [1, 4, 7]]\n    \"\"\"\n    n = len(matrix)\n    rotated_matrix = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            rotated_matrix[i][j] = matrix[j][n - i - 1]\n    return rotated_matrix", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [1, 0, 1, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return the last column of the matrix.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    [3, 6, 9]\n    \"\"\"\n    last_column = []\n    for row in matrix:\n        last_column.append(row[-1])\n    return last_column\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [3, 6, 9]\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 438, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return the last column of the matrix.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    [3, 6, 9]\n    \"\"\"\n    last_column = []\n    for row in matrix:\n        last_column.append(row[-1])\n    return last_column", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": -Infinity, "program_str": "import math\nfrom typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"\n    Find a list of integers such that the sum of all the elements is equal to the product of all the elements.\n    \"\"\"\n    return sum(li) == math.prod(li)\n\ndef g():\n    return [2, 3, 4, 6]\n\nassert f(g())\n", "emb": null, "idx_generation": 438, "target_skills": null, "problem_func": "import math\nfrom typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"\n    Find a list of integers such that the sum of all the elements is equal to the product of all the elements.\n    \"\"\"\n    return sum(li) == math.prod(li)", "solution_func": "def g():\n    return [2, 3, 4, 6]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    \"\"\"\n    return li == li[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 438, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    \"\"\"\n    return li == li[::-1]", "solution_func": "def g():\n    return [1, 2, 3, 2, 1]", "map_ix": [1, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is sorted in ascending order.\n    \"\"\"\n    return li == sorted(li)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 438, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is sorted in ascending order.\n    \"\"\"\n    return li == sorted(li)", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size\n    \"\"\"\n    return [[1 if j > i else 0 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 438, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size\n    \"\"\"\n    return [[1 if j > i else 0 for j in range(size)] for i in range(size)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subsequence of length k in the list that is strictly decreasing\"\"\"\n    for i in range(len(nums)-k+1):\n        subsequence = nums[i:i+k]\n        if all(subsequence[j] > subsequence[j+1] for j in range(k-1)):\n            return True\n    return False\n\ndef g(k=3):\n    return [10, 8, 6, 4, 2, 9, 7, 5, 3, 1]\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 439, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subsequence of length k in the list that is strictly decreasing\"\"\"\n    for i in range(len(nums)-k+1):\n        subsequence = nums[i:i+k]\n        if all(subsequence[j] > subsequence[j+1] for j in range(k-1)):\n            return True\n    return False", "solution_func": "def g(k=3):\n    return [10, 8, 6, 4, 2, 9, 7, 5, 3, 1]", "map_ix": [1, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], k=4) -> bool:\n    \"\"\"Check if there exists a subsequence of length k in the list that is strictly increasing and the sum of its elements is even\"\"\"\n    for i in range(len(nums)-k+1):\n        subsequence = nums[i:i+k]\n        if all(subsequence[j] < subsequence[j+1] for j in range(k-1)) and sum(subsequence) % 2 == 0:\n            return True\n    return False\n\ndef g(k=4):\n    return [2, 4, 6, 8, 10, 3, 5, 7, 9, 11]\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 439, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k=4) -> bool:\n    \"\"\"Check if there exists a subsequence of length k in the list that is strictly increasing and the sum of its elements is even\"\"\"\n    for i in range(len(nums)-k+1):\n        subsequence = nums[i:i+k]\n        if all(subsequence[j] < subsequence[j+1] for j in range(k-1)) and sum(subsequence) % 2 == 0:\n            return True\n    return False", "solution_func": "def g(k=4):\n    return [2, 4, 6, 8, 10, 3, 5, 7, 9, 11]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], k=2) -> bool:\n    \"\"\"Check if there exists a subsequence of length k in the list that is non-decreasing (can have equal elements)\"\"\"\n    for i in range(len(nums)-k+1):\n        subsequence = nums[i:i+k]\n        if all(subsequence[j] <= subsequence[j+1] for j in range(k-1)):\n            return True\n    return False\n\ndef g(k=2):\n    return [1, 3, 2, 4, 6, 5, 7, 9, 8, 10]\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 439, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k=2) -> bool:\n    \"\"\"Check if there exists a subsequence of length k in the list that is non-decreasing (can have equal elements)\"\"\"\n    for i in range(len(nums)-k+1):\n        subsequence = nums[i:i+k]\n        if all(subsequence[j] <= subsequence[j+1] for j in range(k-1)):\n            return True\n    return False", "solution_func": "def g(k=2):\n    return [1, 3, 2, 4, 6, 5, 7, 9, 8, 10]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    A magic square is an n x n matrix of distinct positive integers where the sum of each row, each column, and both diagonals is the same value.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        if sum(matrix[i][j] for i in range(n)) != target_sum:\n            return False\n\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(matrix[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n\n    return True\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\nassert f(g([[2, 7, 6], [9, 5, 1], [4, 3, 8]])) == True\n", "emb": [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 439, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    A magic square is an n x n matrix of distinct positive integers where the sum of each row, each column, and both diagonals is the same value.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        if sum(matrix[i][j] for i in range(n)) != target_sum:\n            return False\n\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(matrix[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n\n    return True", "solution_func": "def g(matrix: List[List[int]]):\n    return matrix", "map_ix": [1, 1, 1, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n    \"\"\"\n    return string == string[::-1]\n\ndef g(string: str):\n    return string\n\nassert f(g(\"racecar\")) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 439, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n    \"\"\"\n    return string == string[::-1]", "solution_func": "def g(string: str):\n    return string", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers contains any duplicates.\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g(nums: List[int]):\n    return nums\n\nassert f(g([1, 2, 3, 4, 5, 5])) == True\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 439, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers contains any duplicates.\n    \"\"\"\n    return len(nums) != len(set(nums))", "solution_func": "def g(nums: List[int]):\n    return nums", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, count=3) -> bool:\n    \"\"\"Find if there are exactly count numbers that add up to the target\"\"\"\n    from itertools import combinations\n    return sum(sum(c) == target for c in combinations(nums, count)) == count\ndef g(target = 100, count = 3):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nassert f(g()) == True\n", "emb": null, "idx_generation": 439, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, count=3) -> bool:\n    \"\"\"Find if there are exactly count numbers that add up to the target\"\"\"\n    from itertools import combinations\n    return sum(sum(c) == target for c in combinations(nums, count)) == count", "solution_func": "def g(target = 100, count = 3):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\nimport random\nfrom typing import List\n\ndef f(nums: List[int], target=100, count=3) -> bool:\n    \"\"\"Find if there are at least count numbers that add up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(nums, count))\n    \ndef g(target = 100, count = 3):\n    nums = [random.randint(1, 50) for _ in range(10)]\n    return nums\n\nassert f(g()) == True\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 439, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\nimport random\nfrom typing import List\n\ndef f(nums: List[int], target=100, count=3) -> bool:\n    \"\"\"Find if there are at least count numbers that add up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(nums, count))", "solution_func": "def g(target = 100, count = 3):\n    nums = [random.randint(1, 50) for _ in range(10)]\n    return nums", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, count=3) -> bool:\n    \"\"\"Find if there are less than count numbers that add up to the target\"\"\"\n    from itertools import combinations\n    return sum(sum(c) == target for c in combinations(nums, count)) < count\n\ndef g(target = 100, count = 3):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g()) == True\n", "emb": null, "idx_generation": 439, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, count=3) -> bool:\n    \"\"\"Find if there are less than count numbers that add up to the target\"\"\"\n    from itertools import combinations\n    return sum(sum(c) == target for c in combinations(nums, count)) < count", "solution_func": "def g(target = 100, count = 3):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, find two integers in the list such that their sum is equal to the target value.\n    \"\"\"\n    nums.sort()\n    left = 0\n    right = len(nums) - 1\n    while left < right:\n        current_sum = nums[left] + nums[right]\n        if current_sum == target:\n            return True\n        elif current_sum < target:\n            left += 1\n        else:\n            right -= 1\n    return False\n\ndef g(nums = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == False\n", "emb": null, "idx_generation": 439, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, find two integers in the list such that their sum is equal to the target value.\n    \"\"\"\n    nums.sort()\n    left = 0\n    right = len(nums) - 1\n    while left < right:\n        current_sum = nums[left] + nums[right]\n        if current_sum == target:\n            return True\n        elif current_sum < target:\n            left += 1\n        else:\n            right -= 1\n    return False", "solution_func": "def g(nums = [1, 2, 3, 4, 5]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a square list.\n    A square list is a list where each element is a perfect square.\n    \"\"\"\n    return all(num**0.5 == int(num**0.5) for num in nums)\n\ndef g(nums: List[int] = [1, 4, 9, 16, 25]):\n    return nums\n\nassert f(g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 440, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a square list.\n    A square list is a list where each element is a perfect square.\n    \"\"\"\n    return all(num**0.5 == int(num**0.5) for num in nums)", "solution_func": "def g(nums: List[int] = [1, 4, 9, 16, 25]):\n    return nums", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import *\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix.\n    \"\"\"\n    n = len(matrix)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(matrix: List[List[int]] = [[1, 0, 0], [2, 3, 0], [4, 5, 6]]):\n    return matrix\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 440, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix.\n    \"\"\"\n    n = len(matrix)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != 0:\n                return False\n    return True", "solution_func": "def g(matrix: List[List[int]] = [[1, 0, 0], [2, 3, 0], [4, 5, 6]]):\n    return matrix", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a cyclic list.\n    A cyclic list is a list where each element is followed by its greater neighbor.\n    \"\"\"\n    n = len(nums)\n    for i in range(n-1):\n        if nums[i] >= nums[i+1]:\n            return False\n    if nums[-1] >= nums[0]:\n        return False\n    return True\n\ndef g(nums: List[int] = [1, 4, 3, 6, 5, 8, 7, 10, 9]):\n    return nums\n\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 440, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a cyclic list.\n    A cyclic list is a list where each element is followed by its greater neighbor.\n    \"\"\"\n    n = len(nums)\n    for i in range(n-1):\n        if nums[i] >= nums[i+1]:\n            return False\n    if nums[-1] >= nums[0]:\n        return False\n    return True", "solution_func": "def g(nums: List[int] = [1, 4, 3, 6, 5, 8, 7, 10, 9]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target, find if there are count numbers that sum up to the target, but the numbers can be repeated.\n\n    Sample Input:\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    target = 15\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    from itertools import combinations_with_replacement\n\n    for combo in combinations_with_replacement(numbers, count):\n        if sum(combo) == target:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 15, 3\n\nassert f(*g()) == True\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 440, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target, find if there are count numbers that sum up to the target, but the numbers can be repeated.\n\n    Sample Input:\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    target = 15\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    from itertools import combinations_with_replacement\n\n    for combo in combinations_with_replacement(numbers, count):\n        if sum(combo) == target:\n            return True\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 15, 3", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, find the maximum sum of any submatrix.\n\n    Sample input:\n    matrix = [\n        [2, -1, 3],\n        [4, 2, -6],\n        [1, -1, 2]\n    ]\n\n    Sample output:\n    9\n\n    Explanation: The maximum sum can be achieved by selecting the submatrix [[2, -1], [4, 2]].\n    \"\"\"\n\n    if len(matrix) == 0:\n        return 0\n\n    rows = len(matrix)\n    cols = len(matrix[0])\n    max_sum = float('-inf')\n\n    for left in range(cols):\n        temp = [0] * rows\n\n        for right in range(left, cols):\n            for i in range(rows):\n                temp[i] += matrix[i][right]\n\n            max_sum = max(max_sum, max_sum_subarray(temp))\n\n    return max_sum\n\ndef max_sum_subarray(nums: List[int]) -> int:\n    n = len(nums)\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(n):\n        current_sum = max(nums[i], current_sum + nums[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n\ndef g():\n    return [\n        [2, -1, 3],\n        [4, 2, -6],\n        [1, -1, 2]\n    ]\n\nassert f(g()) == 9\n", "emb": null, "idx_generation": 440, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, find the maximum sum of any submatrix.\n\n    Sample input:\n    matrix = [\n        [2, -1, 3],\n        [4, 2, -6],\n        [1, -1, 2]\n    ]\n\n    Sample output:\n    9\n\n    Explanation: The maximum sum can be achieved by selecting the submatrix [[2, -1], [4, 2]].\n    \"\"\"\n\n    if len(matrix) == 0:\n        return 0\n\n    rows = len(matrix)\n    cols = len(matrix[0])\n    max_sum = float('-inf')\n\n    for left in range(cols):\n        temp = [0] * rows\n\n        for right in range(left, cols):\n            for i in range(rows):\n                temp[i] += matrix[i][right]\n\n            max_sum = max(max_sum, max_sum_subarray(temp))\n\n    return max_sum\n\ndef max_sum_subarray(nums: List[int]) -> int:\n    n = len(nums)\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(n):\n        current_sum = max(nums[i], current_sum + nums[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum", "solution_func": "def g():\n    return [\n        [2, -1, 3],\n        [4, 2, -6],\n        [1, -1, 2]\n    ]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Given a string, determine if it is a palindrome when only alphanumeric characters are considered.\n\n    Sample input:\n    string = \"A man, a plan, a canal: Panama\"\n\n    Sample output:\n    True\n    \"\"\"\n\n    alphanumeric = ''\n    for char in string:\n        if char.isalnum():\n            alphanumeric += char.lower()\n\n    return alphanumeric == alphanumeric[::-1]\n\ndef g():\n    return \"A man, a plan, a canal: Panama\"\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 440, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Given a string, determine if it is a palindrome when only alphanumeric characters are considered.\n\n    Sample input:\n    string = \"A man, a plan, a canal: Panama\"\n\n    Sample output:\n    True\n    \"\"\"\n\n    alphanumeric = ''\n    for char in string:\n        if char.isalnum():\n            alphanumeric += char.lower()\n\n    return alphanumeric == alphanumeric[::-1]", "solution_func": "def g():\n    return \"A man, a plan, a canal: Panama\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list whose sum is equal to the target.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 440, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list whose sum is equal to the target.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a symmetric matrix of the given size.\n    \"\"\"\n    symmetric_matrix = [[0 for _ in range(size)] for _ in range(size)]\n    for i in range(size):\n        for j in range(i, size):\n            symmetric_matrix[i][j] = symmetric_matrix[j][i] = i + j\n    return symmetric_matrix\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 440, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a symmetric matrix of the given size.\n    \"\"\"\n    symmetric_matrix = [[0 for _ in range(size)] for _ in range(size)]\n    for i in range(size):\n        for j in range(i, size):\n            symmetric_matrix[i][j] = symmetric_matrix[j][i] = i + j\n    return symmetric_matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic rectangle.\n    A magic rectangle is a rectangular grid where the sum of each row and each column is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    row_sums = [sum(row) for row in arr]\n    if len(set(row_sums)) > 1:\n        return False\n    col_sums = [sum(arr[i][j] for i in range(len(arr))) for j in range(len(arr[0]))]\n    if len(set(col_sums)) > 1:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 440, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic rectangle.\n    A magic rectangle is a rectangular grid where the sum of each row and each column is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    row_sums = [sum(row) for row in arr]\n    if len(set(row_sums)) > 1:\n        return False\n    col_sums = [sum(arr[i][j] for i in range(len(arr))) for j in range(len(arr[0]))]\n    if len(set(col_sums)) > 1:\n        return False\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[str]) -> bool:\n    \"\"\"\n    Given a list of strings, check if all strings have the same length.\n\n    Sample Input:\n    arr = ['abc', 'def', 'ghi']\n\n    Sample Output:\n    True\n    \"\"\"\n    if len(arr) == 0:\n        return True\n    length = len(arr[0])\n    for string in arr[1:]:\n        if len(string) != length:\n            return False\n    return True\n\ndef g(arr: List[str] = ['abc', 'def', 'ghi']):\n    return arr\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 440, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[str]) -> bool:\n    \"\"\"\n    Given a list of strings, check if all strings have the same length.\n\n    Sample Input:\n    arr = ['abc', 'def', 'ghi']\n\n    Sample Output:\n    True\n    \"\"\"\n    if len(arr) == 0:\n        return True\n    length = len(arr[0])\n    for string in arr[1:]:\n        if len(string) != length:\n            return False\n    return True", "solution_func": "def g(arr: List[str] = ['abc', 'def', 'ghi']):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that forms a subsequence with a sum equal to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        num = nums[i - 1]\n        for j in range(target + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j >= num:\n                dp[i][j] = dp[i][j] or dp[i - 1][j - num]\n\n    return dp[n][target]\n\ndef g(nums: List[int], target: int):\n    return nums, target\n\nassert f(*g([2, 4, 6, 8], 10)) == True\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 441, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that forms a subsequence with a sum equal to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        num = nums[i - 1]\n        for j in range(target + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j >= num:\n                dp[i][j] = dp[i][j] or dp[i - 1][j - num]\n\n    return dp[n][target]", "solution_func": "def g(nums: List[int], target: int):\n    return nums, target", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int) -> List[int]:\n    \"\"\"Return a list of the first n Fibonacci numbers.\"\"\"\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        fibonacci = [0, 1]\n        for i in range(2, n):\n            fibonacci.append(fibonacci[i-1] + fibonacci[i-2])\n        return fibonacci\n\ndef g(n: int = 5):\n    return n\n\nassert f(g()) == [0, 1, 1, 2, 3]\n\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 441, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int) -> List[int]:\n    \"\"\"Return a list of the first n Fibonacci numbers.\"\"\"\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        fibonacci = [0, 1]\n        for i in range(2, n):\n            fibonacci.append(fibonacci[i-1] + fibonacci[i-2])\n        return fibonacci", "solution_func": "def g(n: int = 5):\n    return n", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2) -> bool:\n    \"\"\"\n    Given a list of non-increasing integers and given an integer k, determine if there are exactly n positive integers in the list\n    that are strictly larger than the kth.\n    \"\"\"\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return sum(s > scores[k] and s > 0 for s in scores) == n\ndef g(scores = [20, 19, 17, 13, 12, 11, 10, 6], k = 2):\n    threshold = max(scores[k], 1)\n    return sum(s > threshold for s in scores)\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 441, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2) -> bool:\n    \"\"\"\n    Given a list of non-increasing integers and given an integer k, determine if there are exactly n positive integers in the list\n    that are strictly larger than the kth.\n    \"\"\"\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return sum(s > scores[k] and s > 0 for s in scores) == n", "solution_func": "def g(scores = [20, 19, 17, 13, 12, 11, 10, 6], k = 2):\n    threshold = max(scores[k], 1)\n    return sum(s > threshold for s in scores)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(li: List[int], n=18) -> bool:\n    \"\"\"\n    Given n, find n integers such that li[i] * li[i+1] + 1 == li[i+2], for i = 0, 1, ..., n-1\n    where indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\n    that are multiples of 3 (as proven in the IMO problem).\n\n    Sample input:\n    6\n\n    Sample output:\n    [_, _, _, _, _, _]\n\n    (Sample output hidden because showing sample output would give away too much information.)\n    \"\"\"\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n = 18):\n    return [-1, -1, 2] * (n // 3)\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 441, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int], n=18) -> bool:\n    \"\"\"\n    Given n, find n integers such that li[i] * li[i+1] + 1 == li[i+2], for i = 0, 1, ..., n-1\n    where indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\n    that are multiples of 3 (as proven in the IMO problem).\n\n    Sample input:\n    6\n\n    Sample output:\n    [_, _, _, _, _, _]\n\n    (Sample output hidden because showing sample output would give away too much information.)\n    \"\"\"\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))", "solution_func": "def g(n = 18):\n    return [-1, -1, 2] * (n // 3)", "map_ix": [0, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n\n    A magic square is a square matrix where the sum of each row, each column, and both diagonals are equal.\n\n    Sample input:\n    matrix = [\n        [2, 7, 6],\n        [9, 5, 1],\n        [4, 3, 8]\n    ]\n    \n    Sample output:\n    True\n    \n    Explanation: The sum of each row, column, and diagonal is 15.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Checking rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Checking columns\n    for j in range(n):\n        column_sum = 0\n        for i in range(n):\n            column_sum += matrix[i][j]\n        if column_sum != target_sum:\n            return False\n    \n    # Checking diagonal\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += matrix[i][i]\n    if diagonal_sum != target_sum:\n        return False\n    \n    # Checking anti-diagonal\n    anti_diagonal_sum = 0\n    for i in range(n):\n        anti_diagonal_sum += matrix[i][n-i-1]\n    if anti_diagonal_sum != target_sum:\n        return False\n    \n    return True\n\ndef g() -> List[List[int]]:\n    return [\n        [2, 7, 6],\n        [9, 5, 1],\n        [4, 3, 8]\n    ]\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 441, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n\n    A magic square is a square matrix where the sum of each row, each column, and both diagonals are equal.\n\n    Sample input:\n    matrix = [\n        [2, 7, 6],\n        [9, 5, 1],\n        [4, 3, 8]\n    ]\n    \n    Sample output:\n    True\n    \n    Explanation: The sum of each row, column, and diagonal is 15.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Checking rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Checking columns\n    for j in range(n):\n        column_sum = 0\n        for i in range(n):\n            column_sum += matrix[i][j]\n        if column_sum != target_sum:\n            return False\n    \n    # Checking diagonal\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += matrix[i][i]\n    if diagonal_sum != target_sum:\n        return False\n    \n    # Checking anti-diagonal\n    anti_diagonal_sum = 0\n    for i in range(n):\n        anti_diagonal_sum += matrix[i][n-i-1]\n    if anti_diagonal_sum != target_sum:\n        return False\n    \n    return True", "solution_func": "def g() -> List[List[int]]:\n    return [\n        [2, 7, 6],\n        [9, 5, 1],\n        [4, 3, 8]\n    ]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    \"\"\"\n    Check if the given list of words forms a valid word square.\n\n    A word square is a square grid of letters, where the words read across and down in the grid are the same.\n\n    Sample input:\n    words = [\n        \"ball\",\n        \"area\",\n        \"lead\",\n        \"lady\"\n    ]\n    \n    Sample output:\n    True\n    \n    Explanation: The words \"ball\", \"area\", \"lead\", and \"lady\" form a valid word square.\n    \"\"\"\n\n    n = len(words)\n    \n    for i in range(n):\n        for j in range(len(words[i])):\n            if words[i][j] != words[j][i]:\n                return False\n    \n    return True\n\ndef g() -> List[str]:\n    return [\n        \"ball\",\n        \"area\",\n        \"lead\",\n        \"lady\"\n    ]\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0], "idx_generation": 441, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    \"\"\"\n    Check if the given list of words forms a valid word square.\n\n    A word square is a square grid of letters, where the words read across and down in the grid are the same.\n\n    Sample input:\n    words = [\n        \"ball\",\n        \"area\",\n        \"lead\",\n        \"lady\"\n    ]\n    \n    Sample output:\n    True\n    \n    Explanation: The words \"ball\", \"area\", \"lead\", and \"lady\" form a valid word square.\n    \"\"\"\n\n    n = len(words)\n    \n    for i in range(n):\n        for j in range(len(words[i])):\n            if words[i][j] != words[j][i]:\n                return False\n    \n    return True", "solution_func": "def g() -> List[str]:\n    return [\n        \"ball\",\n        \"area\",\n        \"lead\",\n        \"lady\"\n    ]", "map_ix": [0, 0, 0, 0, 0, 1, 1, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a Jolly Jumper sequence.\n\n    A Jolly Jumper sequence is a sequence of n integers, where the absolute values of the differences between successive elements take on all possible values 1 through n-1.\n\n    Sample input:\n    nums = [1, 4, 2, 3]\n    \n    Sample output:\n    True\n    \n    Explanation: The absolute differences are [3, 2, 1] which are the possible values 1 through n-1.\n    \"\"\"\n\n    n = len(nums)\n    differences = set()\n    \n    for i in range(1, n):\n        differences.add(abs(nums[i] - nums[i-1]))\n    \n    return len(differences) == n-1 and all(diff in differences for diff in range(1, n))\n\ndef g() -> List[int]:\n    return [1, 4, 2, 3]\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 441, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a Jolly Jumper sequence.\n\n    A Jolly Jumper sequence is a sequence of n integers, where the absolute values of the differences between successive elements take on all possible values 1 through n-1.\n\n    Sample input:\n    nums = [1, 4, 2, 3]\n    \n    Sample output:\n    True\n    \n    Explanation: The absolute differences are [3, 2, 1] which are the possible values 1 through n-1.\n    \"\"\"\n\n    n = len(nums)\n    differences = set()\n    \n    for i in range(1, n):\n        differences.add(abs(nums[i] - nums[i-1]))\n    \n    return len(differences) == n-1 and all(diff in differences for diff in range(1, n))", "solution_func": "def g() -> List[int]:\n    return [1, 4, 2, 3]", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=14, b=50, c=47) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the squares of the first c integers)\"\"\"\n    return n + a == sum([b * i**2 for i in range(c)])\ndef g(a = 14, b = 50, c = 47):\n    return -a + sum([b * i**2 for i in range(c)])\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 441, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=14, b=50, c=47) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the squares of the first c integers)\"\"\"\n    return n + a == sum([b * i**2 for i in range(c)])", "solution_func": "def g(a = 14, b = 50, c = 47):\n    return -a + sum([b * i**2 for i in range(c)])", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import math\nfrom typing import*\ndef f(n: int, a=14, b=50, c=47) -> bool:\n    \"\"\"Find n such that n + a == b * (the product of the first c integers)\"\"\"\n    return n + a == b * math.prod(range(c))\ndef g(a = 14, b = 50, c = 47):\n    return -a + b * math.prod(range(c))\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 441, "target_skills": null, "problem_func": "import math\nfrom typing import*\ndef f(n: int, a=14, b=50, c=47) -> bool:\n    \"\"\"Find n such that n + a == b * (the product of the first c integers)\"\"\"\n    return n + a == b * math.prod(range(c))", "solution_func": "def g(a = 14, b = 50, c = 47):\n    return -a + b * math.prod(range(c))", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=14, b=50, c=47) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c odd integers)\"\"\"\n    return n + a == b * sum([i for i in range(1, 2*c, 2)])\ndef g(a = 14, b = 50, c = 47):\n    return -a + b * sum([i for i in range(1, 2*c, 2)])\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 441, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=14, b=50, c=47) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c odd integers)\"\"\"\n    return n + a == b * sum([i for i in range(1, 2*c, 2)])", "solution_func": "def g(a = 14, b = 50, c = 47):\n    return -a + b * sum([i for i in range(1, 2*c, 2)])", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import *\nimport numpy as np\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that sum up to the target number.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g():\n    nums = [2, 5, 7, 9, 11]\n    target = 16\n    return nums, target\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 442, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\nimport numpy as np\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that sum up to the target number.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False", "solution_func": "def g():\n    nums = [2, 5, 7, 9, 11]\n    target = 16\n    return nums, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import *\n\ndef f(strings: List[str]) -> List[List[str]]:\n    \"\"\"\n    Group the given list of strings based on their lengths.\n    \"\"\"\n    groups = {}\n    for string in strings:\n        length = len(string)\n        if length not in groups:\n            groups[length] = []\n        groups[length].append(string)\n    return list(groups.values())\n\ndef g():\n    strings = ['apple', 'banana', 'car', 'dog', 'elephant', 'cat']\n    return strings\n\nassert f(g()) == [['car', 'dog', 'cat'], ['apple'], ['banana'], ['elephant']]\n", "emb": null, "idx_generation": 442, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\n\ndef f(strings: List[str]) -> List[List[str]]:\n    \"\"\"\n    Group the given list of strings based on their lengths.\n    \"\"\"\n    groups = {}\n    for string in strings:\n        length = len(string)\n        if length not in groups:\n            groups[length] = []\n        groups[length].append(string)\n    return list(groups.values())", "solution_func": "def g():\n    strings = ['apple', 'banana', 'car', 'dog', 'elephant', 'cat']\n    return strings", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import *\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transpose the given matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    transposed = [[0 for _ in range(rows)] for _ in range(cols)]\n    for i in range(rows):\n        for j in range(cols):\n            transposed[j][i] = matrix[i][j]\n    return transposed\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g()) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 442, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transpose the given matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    transposed = [[0 for _ in range(rows)] for _ in range(cols)]\n    for i in range(rows):\n        for j in range(cols):\n            transposed[j][i] = matrix[i][j]\n    return transposed", "solution_func": "def g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": [1, 0, 1, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a sorted list of integers in ascending order and a target integer, determine if there exist two distinct\n    indices i and j in the list such that arr[i] + arr[j] == target.\n\n    Example:\n    arr = [1, 3, 5, 7, 9]\n    target = 10\n\n    The sum of arr[0] and arr[4] is equal to the target.\n    Therefore, f(arr, target) returns True.\n    \"\"\"\n    i, j = 0, len(arr) - 1\n    while i < j:\n        if arr[i] + arr[j] == target:\n            return True\n        elif arr[i] + arr[j] < target:\n            i += 1\n        else:\n            j -= 1\n    return False\n\ndef g(arr: List[int] = [1, 3, 5, 7, 9], target: int = 10):\n    return arr, target\n\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 442, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a sorted list of integers in ascending order and a target integer, determine if there exist two distinct\n    indices i and j in the list such that arr[i] + arr[j] == target.\n\n    Example:\n    arr = [1, 3, 5, 7, 9]\n    target = 10\n\n    The sum of arr[0] and arr[4] is equal to the target.\n    Therefore, f(arr, target) returns True.\n    \"\"\"\n    i, j = 0, len(arr) - 1\n    while i < j:\n        if arr[i] + arr[j] == target:\n            return True\n        elif arr[i] + arr[j] < target:\n            i += 1\n        else:\n            j -= 1\n    return False", "solution_func": "def g(arr: List[int] = [1, 3, 5, 7, 9], target: int = 10):\n    return arr, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"\n    Given an integer n and a list of integers, return True if there exists a subset of the list that sums up to n,\n    otherwise return False.\n\n    Example:\n    n = 9\n    nums = [2, 4, 5, 7, 9]\n\n    The subset [2, 7] sums up to 9.\n    Therefore, f(n, nums) returns True.\n    \"\"\"\n    dp = [False] * (n + 1)\n    dp[0] = True\n\n    for num in nums:\n        for i in range(n, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n\n    return dp[n]\n\ndef g(n: int = 9, nums: List[int] = [2, 4, 5, 7, 9]):\n    return n, nums\n\nassert f(*g())\n", "emb": [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0], "idx_generation": 442, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"\n    Given an integer n and a list of integers, return True if there exists a subset of the list that sums up to n,\n    otherwise return False.\n\n    Example:\n    n = 9\n    nums = [2, 4, 5, 7, 9]\n\n    The subset [2, 7] sums up to 9.\n    Therefore, f(n, nums) returns True.\n    \"\"\"\n    dp = [False] * (n + 1)\n    dp[0] = True\n\n    for num in nums:\n        for i in range(n, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n\n    return dp[n]", "solution_func": "def g(n: int = 9, nums: List[int] = [2, 4, 5, 7, 9]):\n    return n, nums", "map_ix": [1, 1, 1, 1, 0, 1, 0, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of any contiguous subarray.\n\n    Example:\n    nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n    \n    The contiguous subarray with the maximum sum is [4, -1, 2, 1], which sums up to 6.\n    Therefore, f(nums) returns 6.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    for num in nums:\n        curr_sum = max(num, curr_sum + num)\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum\n\ndef g(nums: List[int] = [-2, 1, -3, 4, -1, 2, 1, -5, 4]):\n    return nums\n\nassert f(g()) == 6\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 442, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of any contiguous subarray.\n\n    Example:\n    nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n    \n    The contiguous subarray with the maximum sum is [4, -1, 2, 1], which sums up to 6.\n    Therefore, f(nums) returns 6.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    for num in nums:\n        curr_sum = max(num, curr_sum + num)\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum", "solution_func": "def g(nums: List[int] = [-2, 1, -3, 4, -1, 2, 1, -5, 4]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> int:\n    \"\"\"\n    Calculate the sum of all the numbers in the given nested list.\n    \"\"\"\n    total_sum = 0\n    for lst in nums:\n        for num in lst:\n            total_sum += num\n    return total_sum\n\ndef g(nums: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums\n\nassert f(g()) == 45\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 442, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> int:\n    \"\"\"\n    Calculate the sum of all the numbers in the given nested list.\n    \"\"\"\n    total_sum = 0\n    for lst in nums:\n        for num in lst:\n            total_sum += num\n    return total_sum", "solution_func": "def g(nums: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given number n is present in the list of integers.\n    \"\"\"\n    return n in nums\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(3, g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 442, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given number n is present in the list of integers.\n    \"\"\"\n    return n in nums", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums: List[int]) -> List[int]:\n    \"\"\"\n    Return a list of numbers greater than n from the given list of integers.\n    \"\"\"\n    return [num for num in nums if num > n]\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(2, g()) == [3, 4, 5]\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 442, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums: List[int]) -> List[int]:\n    \"\"\"\n    Return a list of numbers greater than n from the given list of integers.\n    \"\"\"\n    return [num for num in nums if num > n]", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a pair of numbers that sums up to 100.\n    \"\"\"\n    return any((nums[i] + nums[j] == 100 for i in range(len(nums)) for j in range(i+1, len(nums))))\n\ndef g():\n    return [30, 20, 50]\n\nassert f(g())\n\n", "emb": null, "idx_generation": 442, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a pair of numbers that sums up to 100.\n    \"\"\"\n    return any((nums[i] + nums[j] == 100 for i in range(len(nums)) for j in range(i+1, len(nums))))", "solution_func": "def g():\n    return [30, 20, 50]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the given list contains two numbers that add up to the target number.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(target: int):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(15), 15) == True\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0], "idx_generation": 443, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the given list contains two numbers that add up to the target number.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False", "solution_func": "def g(target: int):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 1, 0, 0, 1, 1, 0, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with all the duplicate elements removed.\n    \"\"\"\n    return list(set(nums))\n\ndef g():\n    return [1, 2, 2, 3, 4, 4, 5, 6, 7, 7, 8, 9, 10]\n\nassert f(g()) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 443, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with all the duplicate elements removed.\n    \"\"\"\n    return list(set(nums))", "solution_func": "def g():\n    return [1, 2, 2, 3, 4, 4, 5, 6, 7, 7, 8, 9, 10]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find and return the maximum difference between any two numbers in the list.\n    \"\"\"\n    min_num = min(nums)\n    max_num = max(nums)\n    return max_num - min_num\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 9\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 443, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find and return the maximum difference between any two numbers in the list.\n    \"\"\"\n    min_num = min(nums)\n    max_num = max(nums)\n    return max_num - min_num", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(nums: List[int], target: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    Given a list of numbers `nums` and a target number `target`, find all pairs of numbers in `nums`\n    such that their sum is equal to the target number.\n\n    For example, if nums = [1, 2, 3, 4, 5] and target = 7, the pairs (2, 5) and (3, 4) sum up to the target number.\n    \"\"\"\n    pairs = []\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            pairs.append((num, target - num))\n        num_set.add(num)\n    return pairs\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return (nums, target)\n\nassert f(*g()) == [(2, 5), (3, 4)]\n", "emb": null, "idx_generation": 443, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List, Tuple\n\ndef f(nums: List[int], target: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    Given a list of numbers `nums` and a target number `target`, find all pairs of numbers in `nums`\n    such that their sum is equal to the target number.\n\n    For example, if nums = [1, 2, 3, 4, 5] and target = 7, the pairs (2, 5) and (3, 4) sum up to the target number.\n    \"\"\"\n    pairs = []\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            pairs.append((num, target - num))\n        num_set.add(num)\n    return pairs", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return (nums, target)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List, Set\n\ndef f(nums1: List[int], nums2: List[int]) -> Set[int]:\n    \"\"\"\n    Given two lists of numbers `nums1` and `nums2`, find the intersection of the two lists.\n\n    For example, if nums1 = [1, 2, 2, 3, 4] and nums2 = [2, 2, 3, 5], the intersection is [2, 3].\n    \"\"\"\n    return set(nums1) & set(nums2)\n\ndef g(nums1: List[int] = [1, 2, 2, 3, 4], nums2: List[int] = [2, 2, 3, 5]):\n    return (nums1, nums2)\n\nassert f(*g()) == {2, 3}\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 443, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List, Set\n\ndef f(nums1: List[int], nums2: List[int]) -> Set[int]:\n    \"\"\"\n    Given two lists of numbers `nums1` and `nums2`, find the intersection of the two lists.\n\n    For example, if nums1 = [1, 2, 2, 3, 4] and nums2 = [2, 2, 3, 5], the intersection is [2, 3].\n    \"\"\"\n    return set(nums1) & set(nums2)", "solution_func": "def g(nums1: List[int] = [1, 2, 2, 3, 4], nums2: List[int] = [2, 2, 3, 5]):\n    return (nums1, nums2)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of numbers `nums`, find the maximum subarray sum.\n\n    For example, if nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4], the maximum subarray sum is 6\n    (corresponding to the subarray [4, -1, 2, 1]).\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum = max(num, curr_sum + num)\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n\ndef g(nums: List[int] = [-2, 1, -3, 4, -1, 2, 1, -5, 4]):\n    return nums\n\nassert f(g()) == 6\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0], "idx_generation": 443, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of numbers `nums`, find the maximum subarray sum.\n\n    For example, if nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4], the maximum subarray sum is 6\n    (corresponding to the subarray [4, -1, 2, 1]).\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum = max(num, curr_sum + num)\n        max_sum = max(max_sum, curr_sum)\n    return max_sum", "solution_func": "def g(nums: List[int] = [-2, 1, -3, 4, -1, 2, 1, -5, 4]):\n    return nums", "map_ix": [1, 1, 0, 1, 0, 0, 0, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, return True if there exists a pair of numbers in the list that add up to the target. Otherwise, return False.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Output:\n    True\n\n    Explanation: There exists a pair of numbers (4, 5) in the list that add up to the target number 9.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (nums, target)\n\nassert f(*g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 443, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, return True if there exists a pair of numbers in the list that add up to the target. Otherwise, return False.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Output:\n    True\n\n    Explanation: There exists a pair of numbers (4, 5) in the list that add up to the target number 9.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (nums, target)", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum product of any three numbers in the list.\n\n    Example:\n    nums = [-10, -3, 5, 2, -2, 0]\n\n    Output:\n    150\n\n    Explanation: The maximum product can be obtained by multiplying -10, -3, and 5.\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    return max(nums[0] * nums[1] * nums[n-1], nums[n-1] * nums[n-2] * nums[n-3])\n\ndef g(nums: List[int] = [-10, -3, 5, 2, -2, 0]):\n    return (nums,)\n\nassert f(*g()) == 150\n\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 443, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum product of any three numbers in the list.\n\n    Example:\n    nums = [-10, -3, 5, 2, -2, 0]\n\n    Output:\n    150\n\n    Explanation: The maximum product can be obtained by multiplying -10, -3, and 5.\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    return max(nums[0] * nums[1] * nums[n-1], nums[n-1] * nums[n-2] * nums[n-3])", "solution_func": "def g(nums: List[int] = [-10, -3, 5, 2, -2, 0]):\n    return (nums,)", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list where each element is the sum of all other elements in the original list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n\n    Output:\n    [14, 13, 12, 11, 10]\n\n    Explanation: The first element in the output is the sum of all other elements except 1, the second element is the sum of all other elements except 2, and so on.\n    \"\"\"\n    total_sum = sum(nums)\n    return [total_sum - num for num in nums]\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return (nums,)\n\nassert f(*g()) == [14, 13, 12, 11, 10]\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 443, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list where each element is the sum of all other elements in the original list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n\n    Output:\n    [14, 13, 12, 11, 10]\n\n    Explanation: The first element in the output is the sum of all other elements except 1, the second element is the sum of all other elements except 2, and so on.\n    \"\"\"\n    total_sum = sum(nums)\n    return [total_sum - num for num in nums]", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return (nums,)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 443, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 444, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> int:\n    \"\"\"\n    Given a 2D grid of integers, calculate the sum of each row and find the maximum row sum.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    24\n    \"\"\"\n    max_sum = float('-inf')\n    for row in arr:\n        row_sum = sum(row)\n        max_sum = max(max_sum, row_sum)\n    return max_sum\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == 24\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 444, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> int:\n    \"\"\"\n    Given a 2D grid of integers, calculate the sum of each row and find the maximum row sum.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    24\n    \"\"\"\n    max_sum = float('-inf')\n    for row in arr:\n        row_sum = sum(row)\n        max_sum = max(max_sum, row_sum)\n    return max_sum", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a 2D grid of integers, rotate the grid by 90 degrees clockwise.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    \"\"\"\n    n = len(arr)\n    rotated_arr = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            rotated_arr[j][n - i - 1] = arr[i][j]\n    return rotated_arr\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 444, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a 2D grid of integers, rotate the grid by 90 degrees clockwise.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    \"\"\"\n    n = len(arr)\n    rotated_arr = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            rotated_arr[j][n - i - 1] = arr[i][j]\n    return rotated_arr", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\n\ndef f(nums: List[int], k: int, target_sum: int) -> List[Tuple[int]]:\n    \"\"\"\n    Return a list of all possible combinations of k numbers from the given list that sum up to the target_sum.\n    \"\"\"\n    combinations = list(itertools.combinations(nums, k))\n    return [combo for combo in combinations if sum(combo) == target_sum]\n\ndef g(k=3, target_sum=15):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), k=3, target_sum=15) == [(5, 6, 4)]\n", "emb": null, "idx_generation": 444, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\n\ndef f(nums: List[int], k: int, target_sum: int) -> List[Tuple[int]]:\n    \"\"\"\n    Return a list of all possible combinations of k numbers from the given list that sum up to the target_sum.\n    \"\"\"\n    combinations = list(itertools.combinations(nums, k))\n    return [combo for combo in combinations if sum(combo) == target_sum]", "solution_func": "def g(k=3, target_sum=15):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Rearrange the elements of the given list in a random order.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Sample output:\n    [4, 2, 7, 6, 1, 10, 3, 9, 5, 8]\n    \"\"\"\n    random.shuffle(nums)\n    return nums\n\ndef g():\n    \"\"\"Generate a list of numbers from 1 to 10.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert sorted(f(g())) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True", "emb": null, "idx_generation": 444, "target_skills": null, "problem_func": "import random\nfrom typing import*\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Rearrange the elements of the given list in a random order.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Sample output:\n    [4, 2, 7, 6, 1, 10, 3, 9, 5, 8]\n    \"\"\"\n    random.shuffle(nums)\n    return nums", "solution_func": "def g():\n    \"\"\"Generate a list of numbers from 1 to 10.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(text: str, pattern: str) -> bool:\n    \"\"\"\n    Check if the given pattern is present in the given text.\n\n    Sample input:\n    text = \"This is a sample text\"\n    pattern = \"sample\"\n\n    Sample output:\n    True\n    \"\"\"\n    return pattern.lower() in text.lower()\n\ndef g():\n    \"\"\"Generate a text and a pattern.\"\"\"\n    return (\"This is a sample text\", \"sample\")\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 444, "target_skills": null, "problem_func": "from typing import*\n\ndef f(text: str, pattern: str) -> bool:\n    \"\"\"\n    Check if the given pattern is present in the given text.\n\n    Sample input:\n    text = \"This is a sample text\"\n    pattern = \"sample\"\n\n    Sample output:\n    True\n    \"\"\"\n    return pattern.lower() in text.lower()", "solution_func": "def g():\n    \"\"\"Generate a text and a pattern.\"\"\"\n    return (\"This is a sample text\", \"sample\")", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to the target value.\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 444, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to the target value.\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g(s='racecar'):\n    return s\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 444, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]", "solution_func": "def g(s='racecar'):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"Sort a list of numbers in ascending order.\"\"\"\n    return sorted(nums)\n\ndef g(nums=[3, 1, 4, 1, 5, 9, 2, 6, 5, 3]):\n    return nums\n\nassert f(g()) == [1, 1, 2, 3, 3, 4, 5, 5, 6, 9]\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 444, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"Sort a list of numbers in ascending order.\"\"\"\n    return sorted(nums)", "solution_func": "def g(nums=[3, 1, 4, 1, 5, 9, 2, 6, 5, 3]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> int:\n    \"\"\"\n    Given a square matrix of integers, find the sum of the diagonal elements.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    15\n    \"\"\"\n    n = len(arr)\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += arr[i][i]\n    return diagonal_sum\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == 15\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 444, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[List[int]]) -> int:\n    \"\"\"\n    Given a square matrix of integers, find the sum of the diagonal elements.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    15\n    \"\"\"\n    n = len(arr)\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += arr[i][i]\n    return diagonal_sum", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum number in the list.\n\n    Sample input:\n    [1, 5, 3, 2, 4]\n\n    Sample output:\n    5\n    \"\"\"\n    return max(nums)\n\ndef g():\n    return [1, 5, 3, 2, 4]\n\nassert f(g()) == 5\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 445, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum number in the list.\n\n    Sample input:\n    [1, 5, 3, 2, 4]\n\n    Sample output:\n    5\n    \"\"\"\n    return max(nums)", "solution_func": "def g():\n    return [1, 5, 3, 2, 4]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(s: str) -> str:\n    \"\"\"\n    Given a string, reverse the string and return the reversed version.\n\n    Sample input:\n    \"Hello, World!\"\n\n    Sample output:\n    \"!dlroW ,olleH\"\n    \"\"\"\n    return s[::-1]\n\ndef g():\n    return \"Hello, World!\"\n\nassert f(g()) == \"!dlroW ,olleH\"\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 445, "target_skills": null, "problem_func": "from typing import*\n\ndef f(s: str) -> str:\n    \"\"\"\n    Given a string, reverse the string and return the reversed version.\n\n    Sample input:\n    \"Hello, World!\"\n\n    Sample output:\n    \"!dlroW ,olleH\"\n    \"\"\"\n    return s[::-1]", "solution_func": "def g():\n    return \"Hello, World!\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(nums: List[int], k: int) -> List[int]:\n    \"\"\"\n    Given a list of integers, return the top k elements from the list in descending order.\n\n    Sample input:\n    [5, 3, 8, 2, 9], 3\n\n    Sample output:\n    [9, 8, 5]\n    \"\"\"\n    return sorted(nums, reverse=True)[:k]\n\ndef g():\n    return [5, 3, 8, 2, 9], 3\n\nassert f(*g()) == [9, 8, 5]\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 445, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int], k: int) -> List[int]:\n    \"\"\"\n    Given a list of integers, return the top k elements from the list in descending order.\n\n    Sample input:\n    [5, 3, 8, 2, 9], 3\n\n    Sample output:\n    [9, 8, 5]\n    \"\"\"\n    return sorted(nums, reverse=True)[:k]", "solution_func": "def g():\n    return [5, 3, 8, 2, 9], 3", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> int:\n    \"\"\"\n    Find the maximum product of any row in the given 2D array.\n\n    Sample input:\n    arr = [[1, 2, 3],\n           [4, 5, 6],\n           [7, 8, 9]]\n\n    Sample output:\n    504\n\n    Explanation: The rows with maximum products are:\n    1 2 3 (product = 6)\n    4 5 6 (product = 120)\n    7 8 9 (product = 504)\n    Their maximum product is 504.\n\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(arr)):\n        row_product = 1\n        for j in range(len(arr[i])):\n            row_product *= arr[i][j]\n        max_product = max(max_product, row_product)\n    return max_product\n\ndef g() -> List[List[int]]:\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]\n\nassert f(g()) == 504\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 445, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> int:\n    \"\"\"\n    Find the maximum product of any row in the given 2D array.\n\n    Sample input:\n    arr = [[1, 2, 3],\n           [4, 5, 6],\n           [7, 8, 9]]\n\n    Sample output:\n    504\n\n    Explanation: The rows with maximum products are:\n    1 2 3 (product = 6)\n    4 5 6 (product = 120)\n    7 8 9 (product = 504)\n    Their maximum product is 504.\n\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(arr)):\n        row_product = 1\n        for j in range(len(arr[i])):\n            row_product *= arr[i][j]\n        max_product = max(max_product, row_product)\n    return max_product", "solution_func": "def g() -> List[List[int]]:\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"Find the sum of all prime numbers in the given list.\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    prime_sum = 0\n    for num in nums:\n        if is_prime(num):\n            prime_sum += num\n    return prime_sum\n\ndef g() -> List[int]:\n    return [2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 17\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 445, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"Find the sum of all prime numbers in the given list.\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    prime_sum = 0\n    for num in nums:\n        if is_prime(num):\n            prime_sum += num\n    return prime_sum", "solution_func": "def g() -> List[int]:\n    return [2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if all the elements in the matrix are equal.\"\"\"\n    element = matrix[0][0]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] != element:\n                return False\n    return True\n\ndef g() -> List[List[int]]:\n    return [[1, 1, 1],\n            [1, 1, 1],\n            [1, 1, 1]]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 445, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if all the elements in the matrix are equal.\"\"\"\n    element = matrix[0][0]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] != element:\n                return False\n    return True", "solution_func": "def g() -> List[List[int]]:\n    return [[1, 1, 1],\n            [1, 1, 1],\n            [1, 1, 1]]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a grid where the sum of each row, column, and diagonal is the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    target_sum = sum(arr[0])\n\n    # Check rows\n    for row in arr:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for col in range(n):\n        if sum(arr[row][col] for row in range(n)) != target_sum:\n            return False\n\n    # Check diagonal\n    if sum(arr[i][i] for i in range(n)) != target_sum:\n        return False\n\n    # Check reverse diagonal\n    if sum(arr[i][n-i-1] for i in range(n)) != target_sum:\n        return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return arr\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 445, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a grid where the sum of each row, column, and diagonal is the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    target_sum = sum(arr[0])\n\n    # Check rows\n    for row in arr:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for col in range(n):\n        if sum(arr[row][col] for row in range(n)) != target_sum:\n            return False\n\n    # Check diagonal\n    if sum(arr[i][i] for i in range(n)) != target_sum:\n        return False\n\n    # Check reverse diagonal\n    if sum(arr[i][n-i-1] for i in range(n)) != target_sum:\n        return False\n\n    return True", "solution_func": "def g(arr: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return arr", "map_ix": [1, 0, 0, 0, 0, 1, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a Latin square.\n    A Latin square is a grid where each element appears exactly once in each row and each column.\n\n    Sample Input:\n    arr = [[1, 2, 3], [2, 3, 1], [3, 1, 2]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    nums = set(range(1, n+1))\n\n    # Check rows\n    for row in arr:\n        if set(row) != nums:\n            return False\n\n    # Check columns\n    for col in range(n):\n        if set(arr[row][col] for row in range(n)) != nums:\n            return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [2, 3, 1], [3, 1, 2]]):\n    return arr\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 445, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a Latin square.\n    A Latin square is a grid where each element appears exactly once in each row and each column.\n\n    Sample Input:\n    arr = [[1, 2, 3], [2, 3, 1], [3, 1, 2]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    nums = set(range(1, n+1))\n\n    # Check rows\n    for row in arr:\n        if set(row) != nums:\n            return False\n\n    # Check columns\n    for col in range(n):\n        if set(arr[row][col] for row in range(n)) != nums:\n            return False\n\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [2, 3, 1], [3, 1, 2]]):\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a staircase pattern.\n    A staircase pattern is a grid where the elements form a pattern that resembles a staircase.\n\n    Sample Input:\n    arr = [[1, 0, 0], [1, 1, 0], [1, 1, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i][j] != 0:\n                return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[1, 0, 0], [1, 1, 0], [1, 1, 1]]):\n    return arr\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 445, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a staircase pattern.\n    A staircase pattern is a grid where the elements form a pattern that resembles a staircase.\n\n    Sample Input:\n    arr = [[1, 0, 0], [1, 1, 0], [1, 1, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i][j] != 0:\n                return False\n\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 0, 0], [1, 1, 0], [1, 1, 1]]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a 2D grid of integers, rotate the grid by 90 degrees counter-clockwise.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    [[3, 6, 9], [2, 5, 8], [1, 4, 7]]\n    \"\"\"\n    n = len(arr)\n    rotated_arr = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            rotated_arr[n - j - 1][i] = arr[i][j]\n    return rotated_arr\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == [[3, 6, 9], [2, 5, 8], [1, 4, 7]]\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 445, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a 2D grid of integers, rotate the grid by 90 degrees counter-clockwise.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    [[3, 6, 9], [2, 5, 8], [1, 4, 7]]\n    \"\"\"\n    n = len(arr)\n    rotated_arr = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            rotated_arr[n - j - 1][i] = arr[i][j]\n    return rotated_arr", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(names: List[str]) -> bool:\n    \"\"\"\n    Check if the given list of names is in alphabetical order.\n    Return True if the list is in alphabetical order, False otherwise.\n    \"\"\"\n    return names == sorted(names)\n\ndef g(names=[\"Alice\", \"Bob\", \"Charlie\", \"David\"]):\n    return (names,)\n    \nassert f(*g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 446, "target_skills": null, "problem_func": "from typing import*\ndef f(names: List[str]) -> bool:\n    \"\"\"\n    Check if the given list of names is in alphabetical order.\n    Return True if the list is in alphabetical order, False otherwise.\n    \"\"\"\n    return names == sorted(names)", "solution_func": "def g(names=[\"Alice\", \"Bob\", \"Charlie\", \"David\"]):\n    return (names,)", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a palindrome.\n    Return True if the list is a palindrome, False otherwise.\n    \"\"\"\n    return numbers == numbers[::-1]\n\ndef g(numbers=[1, 2, 3, 2, 1]):\n    return (numbers,)\n    \nassert f(*g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 446, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a palindrome.\n    Return True if the list is a palindrome, False otherwise.\n    \"\"\"\n    return numbers == numbers[::-1]", "solution_func": "def g(numbers=[1, 2, 3, 2, 1]):\n    return (numbers,)", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(words: List[str]) -> bool:\n    \"\"\"\n    Check if the given list of words contains any duplicates.\n    Return True if the list contains duplicates, False otherwise.\n    \"\"\"\n    return len(words) != len(set(words))\n\ndef g(words=[\"apple\", \"banana\", \"orange\", \"banana\"]):\n    return (words,)\n    \nassert f(*g()) == True\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 446, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str]) -> bool:\n    \"\"\"\n    Check if the given list of words contains any duplicates.\n    Return True if the list contains duplicates, False otherwise.\n    \"\"\"\n    return len(words) != len(set(words))", "solution_func": "def g(words=[\"apple\", \"banana\", \"orange\", \"banana\"]):\n    return (words,)", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=1) -> bool:\n    \"\"\"What is the sum of the first n prime numbers?\"\"\"\n    primes = [2]\n    num = 3\n    while len(primes) < n:\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n        num += 2\n    return sum(primes) == int(s)\ndef g(n = 1):\n    primes = [2]\n    num = 3\n    while len(primes) < n:\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n        num += 2\n    return str(sum(primes))\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 446, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=1) -> bool:\n    \"\"\"What is the sum of the first n prime numbers?\"\"\"\n    primes = [2]\n    num = 3\n    while len(primes) < n:\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n        num += 2\n    return sum(primes) == int(s)", "solution_func": "def g(n = 1):\n    primes = [2]\n    num = 3\n    while len(primes) < n:\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n        num += 2\n    return str(sum(primes))", "map_ix": [0, 1, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=10) -> bool:\n    \"\"\"What is the sum of the digits of n factorial?\"\"\"\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n    return sum(int(digit) for digit in str(factorial(n))) == int(s)\ndef g(n = 10):\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n    return str(sum(int(digit) for digit in str(factorial(n))))\nassert f(g())\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 446, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=10) -> bool:\n    \"\"\"What is the sum of the digits of n factorial?\"\"\"\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n    return sum(int(digit) for digit in str(factorial(n))) == int(s)", "solution_func": "def g(n = 10):\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n    return str(sum(int(digit) for digit in str(factorial(n))))", "map_ix": [0, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, n=4) -> bool:\n    \"\"\"Find the sum of all numbers between 1 and n (inclusive) that are divisible by 3 or 5.\"\"\"\n    return sum(num for num in range(1, n+1) if num % 3 == 0 or num % 5 == 0) == int(s)\ndef g(n = 4):\n    return str(sum(num for num in range(1, n+1) if num % 3 == 0 or num % 5 == 0))\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 446, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=4) -> bool:\n    \"\"\"Find the sum of all numbers between 1 and n (inclusive) that are divisible by 3 or 5.\"\"\"\n    return sum(num for num in range(1, n+1) if num % 3 == 0 or num % 5 == 0) == int(s)", "solution_func": "def g(n = 4):\n    return str(sum(num for num in range(1, n+1) if num % 3 == 0 or num % 5 == 0))", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, check if it is a palindrome.\n\n    Sample input:\n    s = \"racecar\"\n\n    Sample output:\n    True\n\n    Explanation: The string \"racecar\" is a palindrome.\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s: str = \"racecar\"):\n    return s\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 446, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, check if it is a palindrome.\n\n    Sample input:\n    s = \"racecar\"\n\n    Sample output:\n    True\n\n    Explanation: The string \"racecar\" is a palindrome.\n    \"\"\"\n    return s == s[::-1]", "solution_func": "def g(s: str = \"racecar\"):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum product of any two numbers in the list.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample output:\n    20\n\n    Explanation: The maximum product is obtained by multiplying 4 and 5, which gives 20.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(nums)-1):\n        for j in range(i+1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == 20\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 446, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum product of any two numbers in the list.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample output:\n    20\n\n    Explanation: The maximum product is obtained by multiplying 4 and 5, which gives 20.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(nums)-1):\n        for j in range(i+1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n    return max_product", "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 4, 5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"Given a list of integers and a value k, determine if there exists a subarray of the list with a product greater than or equal to k.\"\"\"\n    for i in range(len(arr)):\n        curr_product = 1\n        for j in range(i, len(arr)):\n            curr_product *= arr[j]\n            if curr_product >= k:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], k: int = 20):\n    return arr, k\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 446, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"Given a list of integers and a value k, determine if there exists a subarray of the list with a product greater than or equal to k.\"\"\"\n    for i in range(len(arr)):\n        curr_product = 1\n        for j in range(i, len(arr)):\n            curr_product *= arr[j]\n            if curr_product >= k:\n                return True\n    return False", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5], k: int = 20):\n    return arr, k", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a sorted list of integers in ascending order and a target integer, find two distinct\n    indices i and j in the list such that arr[i] + arr[j] == target.\n\n    Example:\n    arr = [1, 3, 5, 7, 9]\n    target = 10\n\n    The sum of arr[0] and arr[4] is equal to the target.\n    Therefore, f(arr, target) returns [0, 4].\n    \"\"\"\n    i, j = 0, len(arr) - 1\n    while i < j:\n        if arr[i] + arr[j] == target:\n            return [i, j]\n        elif arr[i] + arr[j] < target:\n            i += 1\n        else:\n            j -= 1\n    return []\n\ndef g(arr: List[int] = [1, 3, 5, 7, 9], target: int = 10):\n    return arr, target\n\nassert f(*g()) == [0, 4]\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 446, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a sorted list of integers in ascending order and a target integer, find two distinct\n    indices i and j in the list such that arr[i] + arr[j] == target.\n\n    Example:\n    arr = [1, 3, 5, 7, 9]\n    target = 10\n\n    The sum of arr[0] and arr[4] is equal to the target.\n    Therefore, f(arr, target) returns [0, 4].\n    \"\"\"\n    i, j = 0, len(arr) - 1\n    while i < j:\n        if arr[i] + arr[j] == target:\n            return [i, j]\n        elif arr[i] + arr[j] < target:\n            i += 1\n        else:\n            j -= 1\n    return []", "solution_func": "def g(arr: List[int] = [1, 3, 5, 7, 9], target: int = 10):\n    return arr, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subsequence of length k in the list that is strictly decreasing\"\"\"\n    for i in range(len(nums)-k+1):\n        subsequence = nums[i:i+k]\n        if all(subsequence[j] > subsequence[j+1] for j in range(k-1)):\n            return True\n    return False\n\ndef g(k=3):\n    return [10, 8, 6, 4, 2, 9, 7, 5, 3, 1]\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 447, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subsequence of length k in the list that is strictly decreasing\"\"\"\n    for i in range(len(nums)-k+1):\n        subsequence = nums[i:i+k]\n        if all(subsequence[j] > subsequence[j+1] for j in range(k-1)):\n            return True\n    return False", "solution_func": "def g(k=3):\n    return [10, 8, 6, 4, 2, 9, 7, 5, 3, 1]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that add up to the target number.\n    The pair of numbers can be the same or different.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 447, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that add up to the target number.\n    The pair of numbers can be the same or different.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=4) -> bool:\n    \"\"\"\n    Check if there exists a subsequence of length k in the list where the sum of its elements is divisible by k.\n    \"\"\"\n    for i in range(len(nums)-k+1):\n        subsequence = nums[i:i+k]\n        if sum(subsequence) % k == 0:\n            return True\n    return False\n\ndef g(k=4):\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 447, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=4) -> bool:\n    \"\"\"\n    Check if there exists a subsequence of length k in the list where the sum of its elements is divisible by k.\n    \"\"\"\n    for i in range(len(nums)-k+1):\n        subsequence = nums[i:i+k]\n        if sum(subsequence) % k == 0:\n            return True\n    return False", "solution_func": "def g(k=4):\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find two numbers in the list whose sum is equal to the target number.\n    Return the two numbers as a list.\n\n    Sample Input:\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    target = 15\n\n    Sample Output:\n    [5, 10]\n    \"\"\"\n    num_set = set()\n    for num in numbers:\n        if target - num in num_set:\n            return [num, target - num]\n        num_set.add(num)\n    return []\n\ndef g(numbers: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 15):\n    return (numbers, target)\n\nassert f(*g()) == [5, 10]\n", "emb": null, "idx_generation": 447, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find two numbers in the list whose sum is equal to the target number.\n    Return the two numbers as a list.\n\n    Sample Input:\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    target = 15\n\n    Sample Output:\n    [5, 10]\n    \"\"\"\n    num_set = set()\n    for num in numbers:\n        if target - num in num_set:\n            return [num, target - num]\n        num_set.add(num)\n    return []", "solution_func": "def g(numbers: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 15):\n    return (numbers, target)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist three numbers in the list whose sum is equal to the target number.\n\n    Sample Input:\n    numbers = [2, 4, 6, 8, 10, 12]\n    target = 20\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            complement = target - numbers[i] - numbers[j]\n            if complement in num_set:\n                return True\n            num_set.add(numbers[i])\n            num_set.add(numbers[j])\n    return False\n\ndef g(numbers: List[int] = [2, 4, 6, 8, 10, 12], target: int = 20):\n    return (numbers, target)\n\nassert f(*g()) == True\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 447, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist three numbers in the list whose sum is equal to the target number.\n\n    Sample Input:\n    numbers = [2, 4, 6, 8, 10, 12]\n    target = 20\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            complement = target - numbers[i] - numbers[j]\n            if complement in num_set:\n                return True\n            num_set.add(numbers[i])\n            num_set.add(numbers[j])\n    return False", "solution_func": "def g(numbers: List[int] = [2, 4, 6, 8, 10, 12], target: int = 20):\n    return (numbers, target)", "map_ix": [1, 0, 1, 0, 0, 0, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist four numbers in the list whose sum is equal to the target number.\n\n    Sample Input:\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    target = 20\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                complement = target - numbers[i] - numbers[j] - numbers[k]\n                if complement in num_set:\n                    return True\n                num_set.add(numbers[i])\n                num_set.add(numbers[j])\n                num_set.add(numbers[k])\n    return False\n\ndef g(numbers: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 20):\n    return (numbers, target)\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 447, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist four numbers in the list whose sum is equal to the target number.\n\n    Sample Input:\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    target = 20\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                complement = target - numbers[i] - numbers[j] - numbers[k]\n                if complement in num_set:\n                    return True\n                num_set.add(numbers[i])\n                num_set.add(numbers[j])\n                num_set.add(numbers[k])\n    return False", "solution_func": "def g(numbers: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 20):\n    return (numbers, target)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> str:\n    \"\"\"\n    Reverse the order of words in a given string.\n\n    Sample Input:\n    \"Hello World\"\n\n    Sample Output:\n    \"World Hello\"\n    \"\"\"\n    words = s.split()\n    reversed_words = words[::-1]\n    return ' '.join(reversed_words)\n\ndef g():\n    return \"Hello World\"\n\nassert f(g()) == \"World Hello\"\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 447, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> str:\n    \"\"\"\n    Reverse the order of words in a given string.\n\n    Sample Input:\n    \"Hello World\"\n\n    Sample Output:\n    \"World Hello\"\n    \"\"\"\n    words = s.split()\n    reversed_words = words[::-1]\n    return ' '.join(reversed_words)", "solution_func": "def g():\n    return \"Hello World\"", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Find the sum of all the elements in a given matrix.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    45\n    \"\"\"\n    total_sum = 0\n    for row in matrix:\n        total_sum += sum(row)\n    return total_sum\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == 45\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 447, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Find the sum of all the elements in a given matrix.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    45\n    \"\"\"\n    total_sum = 0\n    for row in matrix:\n        total_sum += sum(row)\n    return total_sum", "solution_func": "def g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in a given list that add up to the target number.\n\n    Sample Input:\n    [1, 2, 3, 4, 5], 7\n\n    Sample Output:\n    True\n    \"\"\"\n    complements = set()\n    for num in nums:\n        if num in complements:\n            return True\n        complements.add(target - num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 7\n\nassert f(*g()) == True\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 447, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in a given list that add up to the target number.\n\n    Sample Input:\n    [1, 2, 3, 4, 5], 7\n\n    Sample Output:\n    True\n    \"\"\"\n    complements = set()\n    for num in nums:\n        if num in complements:\n            return True\n        complements.add(target - num)\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5], 7", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subsequence of length k in the list that is strictly increasing\"\"\"\n    for i in range(len(nums)-k+1):\n        subsequence = nums[i:i+k]\n        if all(subsequence[j] < subsequence[j+1] for j in range(k-1)):\n            return True\n    return False\n\ndef g(k=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 447, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subsequence of length k in the list that is strictly increasing\"\"\"\n    for i in range(len(nums)-k+1):\n        subsequence = nums[i:i+k]\n        if all(subsequence[j] < subsequence[j+1] for j in range(k-1)):\n            return True\n    return False", "solution_func": "def g(k=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Find the sum of all prime numbers in the given list.\n\n    Sample Input:\n    arr = [2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Sample Output:\n    17\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return sum(num for num in arr if is_prime(num))\n\ndef g():\n    return [2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 17\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 448, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Find the sum of all prime numbers in the given list.\n\n    Sample Input:\n    arr = [2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Sample Output:\n    17\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return sum(num for num in arr if is_prime(num))", "solution_func": "def g():\n    return [2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Rearrange the elements in the given list such that all even numbers appear before odd numbers.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Sample Output:\n    [2, 4, 6, 8, 10, 1, 3, 5, 7, 9]\n    \"\"\"\n    even_nums = [num for num in arr if num % 2 == 0]\n    odd_nums = [num for num in arr if num % 2 != 0]\n    return even_nums + odd_nums\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == [2, 4, 6, 8, 10, 1, 3, 5, 7, 9]\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 448, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Rearrange the elements in the given list such that all even numbers appear before odd numbers.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Sample Output:\n    [2, 4, 6, 8, 10, 1, 3, 5, 7, 9]\n    \"\"\"\n    even_nums = [num for num in arr if num % 2 == 0]\n    odd_nums = [num for num in arr if num % 2 != 0]\n    return even_nums + odd_nums", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[str]) -> List[str]:\n    \"\"\"\n    Sort the given list of strings in descending order of their lengths.\n\n    Sample Input:\n    arr = ['apple', 'banana', 'cherry', 'date', 'elderberry']\n\n    Sample Output:\n    ['elderberry', 'banana', 'cherry', 'apple', 'date']\n    \"\"\"\n    return sorted(arr, key=lambda x: len(x), reverse=True)\n\ndef g():\n    return ['apple', 'banana', 'cherry', 'date', 'elderberry']\n\nassert f(g()) == ['elderberry', 'banana', 'cherry', 'apple', 'date']\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 448, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[str]) -> List[str]:\n    \"\"\"\n    Sort the given list of strings in descending order of their lengths.\n\n    Sample Input:\n    arr = ['apple', 'banana', 'cherry', 'date', 'elderberry']\n\n    Sample Output:\n    ['elderberry', 'banana', 'cherry', 'apple', 'date']\n    \"\"\"\n    return sorted(arr, key=lambda x: len(x), reverse=True)", "solution_func": "def g():\n    return ['apple', 'banana', 'cherry', 'date', 'elderberry']", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of elements in the given list that add up to the target value.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6], target: int = 9):\n    return (nums, target)\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 448, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of elements in the given list that add up to the target value.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6], target: int = 9):\n    return (nums, target)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], row_sum: int, col_sum: int) -> bool:\n    \"\"\"\n    Check if there exists a row and column in the given matrix whose sum is equal to the given row_sum and col_sum respectively.\n    \"\"\"\n    num_rows = len(matrix)\n    num_cols = len(matrix[0])\n    \n    for i in range(num_rows):\n        if sum(matrix[i]) == row_sum:\n            return True\n    \n    for j in range(num_cols):\n        col_total = 0\n        for i in range(num_rows):\n            col_total += matrix[i][j]\n        if col_total == col_sum:\n            return True\n    \n    return False\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], row_sum: int = 6, col_sum: int = 15):\n    return (matrix, row_sum, col_sum)\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 448, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], row_sum: int, col_sum: int) -> bool:\n    \"\"\"\n    Check if there exists a row and column in the given matrix whose sum is equal to the given row_sum and col_sum respectively.\n    \"\"\"\n    num_rows = len(matrix)\n    num_cols = len(matrix[0])\n    \n    for i in range(num_rows):\n        if sum(matrix[i]) == row_sum:\n            return True\n    \n    for j in range(num_cols):\n        col_total = 0\n        for i in range(num_rows):\n            col_total += matrix[i][j]\n        if col_total == col_sum:\n            return True\n    \n    return False", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], row_sum: int = 6, col_sum: int = 15):\n    return (matrix, row_sum, col_sum)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list where each element is the sum of all other elements in the original list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6]\n\n    Output:\n    [20, 19, 18, 17, 16, 15]\n\n    Explanation: The first element in the output is the sum of all other elements except 1, the second element is the sum of all other elements except 2, and so on.\n    \"\"\"\n    n = len(nums)\n    result = [0] * n\n\n    for i in range(n):\n        result[i] = sum(nums) - nums[i]\n\n    return result\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6], target: int = 9):\n    return (nums, target)\n\nassert f(*g()) == [20, 19, 18, 17, 16, 15]\n\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 448, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list where each element is the sum of all other elements in the original list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6]\n\n    Output:\n    [20, 19, 18, 17, 16, 15]\n\n    Explanation: The first element in the output is the sum of all other elements except 1, the second element is the sum of all other elements except 2, and so on.\n    \"\"\"\n    n = len(nums)\n    result = [0] * n\n\n    for i in range(n):\n        result[i] = sum(nums) - nums[i]\n\n    return result", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6], target: int = 9):\n    return (nums, target)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target, find if there are count numbers that multiply to the target, but the numbers can be repeated.\n\n    Sample Input:\n    numbers = [2, 3, 4, 5, 6]\n    target = 120\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    from itertools import combinations_with_replacement\n\n    for combo in combinations_with_replacement(numbers, count):\n        product = 1\n        for num in combo:\n            product *= num\n        if product == target:\n            return True\n    return False\n\ndef g():\n    return [2, 3, 4, 5, 6], 120, 3\n\nassert f(*g()) == True\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 448, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target, find if there are count numbers that multiply to the target, but the numbers can be repeated.\n\n    Sample Input:\n    numbers = [2, 3, 4, 5, 6]\n    target = 120\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    from itertools import combinations_with_replacement\n\n    for combo in combinations_with_replacement(numbers, count):\n        product = 1\n        for num in combo:\n            product *= num\n        if product == target:\n            return True\n    return False", "solution_func": "def g():\n    return [2, 3, 4, 5, 6], 120, 3", "map_ix": [0, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target, find if there are three numbers whose sum is equal to the target, but the numbers cannot be repeated.\n\n    Sample Input:\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    target = 15\n\n    Sample Output:\n    True\n    \"\"\"\n    from itertools import combinations\n\n    for combo in combinations(numbers, 3):\n        if sum(combo) == target:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 15\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 448, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target, find if there are three numbers whose sum is equal to the target, but the numbers cannot be repeated.\n\n    Sample Input:\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    target = 15\n\n    Sample Output:\n    True\n    \"\"\"\n    from itertools import combinations\n\n    for combo in combinations(numbers, 3):\n        if sum(combo) == target:\n            return True\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 15", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target, find if there are count numbers that sum up to the target, but the numbers cannot be repeated.\n\n    Sample Input:\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    target = 15\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    from itertools import combinations\n\n    for combo in combinations(numbers, count):\n        if sum(combo) == target:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 15, 3\n\nassert f(*g()) == True\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 448, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target, find if there are count numbers that sum up to the target, but the numbers cannot be repeated.\n\n    Sample Input:\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    target = 15\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    from itertools import combinations\n\n    for combo in combinations(numbers, count):\n        if sum(combo) == target:\n            return True\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 15, 3", "map_ix": [0, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst1: List[int], lst2: List[int]) -> int:\n    \"\"\"\n    Given two lists of integers, find the maximum sum of any pair of elements where one element is from lst1 and the other element is from lst2.\n\n    Sample Input:\n    lst1 = [1, 2, 3]\n    lst2 = [4, 5, 6]\n\n    Sample Output:\n    9\n    \"\"\"\n    return max(x + y for x in lst1 for y in lst2)\n\ndef g():\n    return [1, 2, 3], [4, 5, 6]\n\nassert f(*g()) == 9\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 448, "target_skills": null, "problem_func": "from typing import*\ndef f(lst1: List[int], lst2: List[int]) -> int:\n    \"\"\"\n    Given two lists of integers, find the maximum sum of any pair of elements where one element is from lst1 and the other element is from lst2.\n\n    Sample Input:\n    lst1 = [1, 2, 3]\n    lst2 = [4, 5, 6]\n\n    Sample Output:\n    9\n    \"\"\"\n    return max(x + y for x in lst1 for y in lst2)", "solution_func": "def g():\n    return [1, 2, 3], [4, 5, 6]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int, k: int) -> bool:\n    \"\"\"\n    Determine if there exists k consecutive elements in the given list whose sum is equal to the target number.\n    \"\"\"\n    for i in range(len(arr) - k + 1):\n        if sum(arr[i:i+k]) == target:\n            return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7], target: int = 12, k: int = 3):\n    return arr, target, k\n\nassert f(*g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 449, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int, k: int) -> bool:\n    \"\"\"\n    Determine if there exists k consecutive elements in the given list whose sum is equal to the target number.\n    \"\"\"\n    for i in range(len(arr) - k + 1):\n        if sum(arr[i:i+k]) == target:\n            return True\n    return False", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7], target: int = 12, k: int = 3):\n    return arr, target, k", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is symmetrical along the main diagonal.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(*g()) == True\n", "emb": null, "idx_generation": 449, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is symmetrical along the main diagonal.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transpose the given matrix.\n    \"\"\"\n    transposed = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n    return transposed\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(*g()) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n", "emb": null, "idx_generation": 449, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transpose the given matrix.\n    \"\"\"\n    transposed = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n    return transposed", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of numbers, return True if there is at least one negative number in the list, False otherwise.\n    \"\"\"\n    for num in nums:\n        if num < 0:\n            return True\n    return False\n\ndef g(nums: List[int] = [1, 2, -3, 4, 5]):\n    return nums\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 449, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of numbers, return True if there is at least one negative number in the list, False otherwise.\n    \"\"\"\n    for num in nums:\n        if num < 0:\n            return True\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, -3, 4, 5]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of numbers, return the product of all the positive numbers in the list.\n    \"\"\"\n    product = 1\n    for num in nums:\n        if num > 0:\n            product *= num\n    return product\n\ndef g(nums: List[int] = [1, -2, 3, 4, -5]):\n    return nums\n\nassert f(g()) == 12\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 449, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of numbers, return the product of all the positive numbers in the list.\n    \"\"\"\n    product = 1\n    for num in nums:\n        if num > 0:\n            product *= num\n    return product", "solution_func": "def g(nums: List[int] = [1, -2, 3, 4, -5]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of numbers, return a new list containing only the even numbers from the original list.\n    \"\"\"\n    even_nums = []\n    for num in nums:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6]):\n    return nums\n\nassert f(g()) == [2, 4, 6]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 449, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of numbers, return a new list containing only the even numbers from the original list.\n    \"\"\"\n    even_nums = []\n    for num in nums:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find three numbers in the list such that their sum is equal to the target number.\n    Return True if such a triplet exists, otherwise return False.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    complements = set()\n    for i in range(len(nums)):\n        num1 = nums[i]\n        for j in range(i+1, len(nums)):\n            num2 = nums[j]\n            complement = target - num1 - num2\n            if complement in complements:\n                return True\n            complements.add(num1)\n            complements.add(num2)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return nums, target\n\nassert f(*g())\n", "emb": [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 449, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find three numbers in the list such that their sum is equal to the target number.\n    Return True if such a triplet exists, otherwise return False.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    complements = set()\n    for i in range(len(nums)):\n        num1 = nums[i]\n        for j in range(i+1, len(nums)):\n            num2 = nums[j]\n            complement = target - num1 - num2\n            if complement in complements:\n                return True\n            complements.add(num1)\n            complements.add(num2)\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return nums, target", "map_ix": [0, 0, 1, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find the maximum number of non-overlapping pairs of numbers in the list such that the sum of each pair is equal to the target number.\n    Return the maximum number of pairs.\n\n    Sample Input:\n    nums = [20, 40, 30, 50, 60, 10, 80, 70]\n    target = 100\n\n    Sample Output:\n    3\n    \"\"\"\n    complements = set()\n    pairs = 0\n    for num in nums:\n        if num in complements:\n            pairs += 1\n            complements.remove(num)\n        else:\n            complements.add(target - num)\n    return pairs\n\ndef g(nums: List[int] = [20, 40, 30, 50, 60, 10, 80, 70], target: int = 100):\n    return nums, target\n\nassert f(*g())\n", "emb": null, "idx_generation": 449, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find the maximum number of non-overlapping pairs of numbers in the list such that the sum of each pair is equal to the target number.\n    Return the maximum number of pairs.\n\n    Sample Input:\n    nums = [20, 40, 30, 50, 60, 10, 80, 70]\n    target = 100\n\n    Sample Output:\n    3\n    \"\"\"\n    complements = set()\n    pairs = 0\n    for num in nums:\n        if num in complements:\n            pairs += 1\n            complements.remove(num)\n        else:\n            complements.add(target - num)\n    return pairs", "solution_func": "def g(nums: List[int] = [20, 40, 30, 50, 60, 10, 80, 70], target: int = 100):\n    return nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find the index of two numbers in the list such that their sum is equal to the target number.\n    Return the indices as a tuple (index1, index2).\n\n    Sample Input:\n    nums = [3, 4, 5, 7, 8]\n    target = 12\n\n    Sample Output:\n    (2, 3)\n    \"\"\"\n    complements = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in complements:\n            return (complements[complement], i)\n        complements[num] = i\n    return ()\n\ndef g(nums: List[int] = [3, 4, 5, 7, 8], target: int = 12):\n    return nums, target\n\nassert f(*g())\n", "emb": null, "idx_generation": 449, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find the index of two numbers in the list such that their sum is equal to the target number.\n    Return the indices as a tuple (index1, index2).\n\n    Sample Input:\n    nums = [3, 4, 5, 7, 8]\n    target = 12\n\n    Sample Output:\n    (2, 3)\n    \"\"\"\n    complements = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in complements:\n            return (complements[complement], i)\n        complements[num] = i\n    return ()", "solution_func": "def g(nums: List[int] = [3, 4, 5, 7, 8], target: int = 12):\n    return nums, target", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an upper triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate an upper triangular matrix of the given size\n    \"\"\"\n    return [[0 if j < i else 1 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 449, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an upper triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i):\n            if matrix[i][j] != 0:\n                return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate an upper triangular matrix of the given size\n    \"\"\"\n    return [[0 if j < i else 1 for j in range(size)] for i in range(size)]", "map_ix": [1, 0, 1, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there exists four numbers in the given list whose sum is equal to the target number.\n    \"\"\"\n    nums.sort()\n    for i in range(len(nums) - 3):\n        for j in range(i + 1, len(nums) - 2):\n            left = j + 1\n            right = len(nums) - 1\n            while left < right:\n                curr_sum = nums[i] + nums[j] + nums[left] + nums[right]\n                if curr_sum == target:\n                    return True\n                elif curr_sum < target:\n                    left += 1\n                else:\n                    right -= 1\n    return False\n\ndef g(nums: List[int] = [1, 4, 5, 2, 8, 3], target: int = 20):\n    return nums, target\n\nassert f(*g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 450, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there exists four numbers in the given list whose sum is equal to the target number.\n    \"\"\"\n    nums.sort()\n    for i in range(len(nums) - 3):\n        for j in range(i + 1, len(nums) - 2):\n            left = j + 1\n            right = len(nums) - 1\n            while left < right:\n                curr_sum = nums[i] + nums[j] + nums[left] + nums[right]\n                if curr_sum == target:\n                    return True\n                elif curr_sum < target:\n                    left += 1\n                else:\n                    right -= 1\n    return False", "solution_func": "def g(nums: List[int] = [1, 4, 5, 2, 8, 3], target: int = 20):\n    return nums, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if it is a symmetric matrix.\n\n    Sample Input:\n    [[1, 2, 3],\n     [2, 4, 5],\n     [3, 5, 6]]\n\n    Sample Output:\n    False\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g() -> List[List[int]]:\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g()) == False\n\n", "emb": null, "idx_generation": 450, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if it is a symmetric matrix.\n\n    Sample Input:\n    [[1, 2, 3],\n     [2, 4, 5],\n     [3, 5, 6]]\n\n    Sample Output:\n    False\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g() -> List[List[int]]:\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose sum is equal to the target number.\n    \"\"\"\n    nums.sort()\n    left = 0\n    right = len(nums) - 1\n    while left < right:\n        curr_sum = nums[left] + nums[right]\n        if curr_sum == target:\n            return True\n        elif curr_sum < target:\n            left += 1\n        else:\n            right -= 1\n    return False\n\ndef g(nums: List[int] = [1, 4, 5, 2, 8, 3], target: int = 9):\n    return nums, target\n\nassert f(*g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 450, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose sum is equal to the target number.\n    \"\"\"\n    nums.sort()\n    left = 0\n    right = len(nums) - 1\n    while left < right:\n        curr_sum = nums[left] + nums[right]\n        if curr_sum == target:\n            return True\n        elif curr_sum < target:\n            left += 1\n        else:\n            right -= 1\n    return False", "solution_func": "def g(nums: List[int] = [1, 4, 5, 2, 8, 3], target: int = 9):\n    return nums, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if the given matrix is a symmetric matrix.\n    \"\"\"\n\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g()) == True\n\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 450, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if the given matrix is a symmetric matrix.\n    \"\"\"\n\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n\n    return True", "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    \"\"\"\n\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g()) == True\n\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 450, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    \"\"\"\n\n    return nums == nums[::-1]", "solution_func": "def g():\n    return [1, 2, 3, 2, 1]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that add up to the target value.\n    \"\"\"\n\n    num_set = set()\n\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=7):\n    return nums, target\n\nassert f(*g()) == True\n\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 450, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that add up to the target value.\n    \"\"\"\n\n    num_set = set()\n\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=7):\n    return nums, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of any contiguous subarray.\n\n    Example:\n    nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\n    The contiguous subarray with the maximum sum is [4, -1, 2, 1], and the sum is 6.\n    Therefore, f(nums) returns 6.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n\ndef g(nums: List[int] = [-2, 1, -3, 4, -1, 2, 1, -5, 4]):\n    return nums\n\nassert f(g()) == 6\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 450, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of any contiguous subarray.\n\n    Example:\n    nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\n    The contiguous subarray with the maximum sum is [4, -1, 2, 1], and the sum is 6.\n    Therefore, f(nums) returns 6.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum", "solution_func": "def g(nums: List[int] = [-2, 1, -3, 4, -1, 2, 1, -5, 4]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix, rotate it 90 degrees clockwise.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    The matrix after rotating 90 degrees clockwise is:\n    [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    Therefore, f(matrix) returns [[7, 4, 1], [8, 5, 2], [9, 6, 3]].\n    \"\"\"\n    n = len(matrix)\n    rotated_matrix = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        for j in range(n):\n            rotated_matrix[i][j] = matrix[n - j - 1][i]\n\n    return rotated_matrix\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 450, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix, rotate it 90 degrees clockwise.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    The matrix after rotating 90 degrees clockwise is:\n    [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    Therefore, f(matrix) returns [[7, 4, 1], [8, 5, 2], [9, 6, 3]].\n    \"\"\"\n    n = len(matrix)\n    rotated_matrix = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        for j in range(n):\n            rotated_matrix[i][j] = matrix[n - j - 1][i]\n\n    return rotated_matrix", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [1, 0, 0, 0, 0, 1, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the length of the longest increasing subsequence.\n\n    Example:\n    nums = [10, 9, 2, 5, 3, 7, 101, 18]\n\n    The longest increasing subsequence is [2, 3, 7, 101], and its length is 4.\n    Therefore, f(nums) returns 4.\n    \"\"\"\n    dp = [1] * len(nums)\n\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)\n\ndef g(nums: List[int] = [10, 9, 2, 5, 3, 7, 101, 18]):\n    return nums\n\nassert f(g()) == 4\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 450, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the length of the longest increasing subsequence.\n\n    Example:\n    nums = [10, 9, 2, 5, 3, 7, 101, 18]\n\n    The longest increasing subsequence is [2, 3, 7, 101], and its length is 4.\n    Therefore, f(nums) returns 4.\n    \"\"\"\n    dp = [1] * len(nums)\n\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)", "solution_func": "def g(nums: List[int] = [10, 9, 2, 5, 3, 7, 101, 18]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of numbers, return the sum of all the even numbers.\n    \"\"\"\n    total = 0\n    for num in nums:\n        if num % 2 == 0:\n            total += num\n    return total\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == 6\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 450, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of numbers, return the sum of all the even numbers.\n    \"\"\"\n    total = 0\n    for num in nums:\n        if num % 2 == 0:\n            total += num\n    return total", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums", "map_ix": [1, 1, 0, 1, 0, 1, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n\n    Example:\n    nums = [1, 2, 3, 2, 1]\n    output: True\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 451, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n\n    Example:\n    nums = [1, 2, 3, 2, 1]\n    output: True\n    \"\"\"\n    return nums == nums[::-1]", "solution_func": "def g():\n    return [1, 2, 3, 2, 1]", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the sum of all the even numbers in the given list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6]\n    output: 12\n    \"\"\"\n    return sum(num for num in nums if num % 2 == 0)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g()) == 12\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 451, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the sum of all the even numbers in the given list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6]\n    output: 12\n    \"\"\"\n    return sum(num for num in nums if num % 2 == 0)", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Find the product of the main diagonal elements in a given matrix.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    output: 45\n    \"\"\"\n    product = 1\n    for i in range(len(matrix)):\n        product *= matrix[i][i]\n    return product\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == 45\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 451, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Find the product of the main diagonal elements in a given matrix.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    output: 45\n    \"\"\"\n    product = 1\n    for i in range(len(matrix)):\n        product *= matrix[i][i]\n    return product", "solution_func": "def g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target number, return the number of pairs of numbers in the list that add up to the target.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Output:\n    2\n\n    Explanation: There are 2 pairs of numbers ([4, 5], [3, 6]) in the list that add up to the target number 9.\n    \"\"\"\n    count = 0\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            count += 1\n    return count\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (nums, target)\n\nassert f(*g()) == 2\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 451, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target number, return the number of pairs of numbers in the list that add up to the target.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Output:\n    2\n\n    Explanation: There are 2 pairs of numbers ([4, 5], [3, 6]) in the list that add up to the target number 9.\n    \"\"\"\n    count = 0\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            count += 1\n    return count", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (nums, target)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[List[int]]:\n    \"\"\"\n    Given a list of integers and a target number, return a list of all pairs of numbers in the list that add up to the target.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Output:\n    [[4, 5], [3, 6]]\n\n    Explanation: There are 2 pairs of numbers ([4, 5], [3, 6]) in the list that add up to the target number 9.\n    \"\"\"\n    pairs = []\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            pairs.append([num, complement])\n    return pairs\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (nums, target)\n\nassert f(*g()) == [[4, 5], [3, 6]]\n", "emb": null, "idx_generation": 451, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> List[List[int]]:\n    \"\"\"\n    Given a list of integers and a target number, return a list of all pairs of numbers in the list that add up to the target.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Output:\n    [[4, 5], [3, 6]]\n\n    Explanation: There are 2 pairs of numbers ([4, 5], [3, 6]) in the list that add up to the target number 9.\n    \"\"\"\n    pairs = []\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            pairs.append([num, complement])\n    return pairs", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (nums, target)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target number, return a list of all numbers in the list that can be combined to add up to the target.\n    The numbers in the output list should be in ascending order.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Output:\n    [4, 5]\n\n    Explanation: The numbers [4, 5] in the list can be combined to add up to the target number 9.\n    \"\"\"\n    combinations = []\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            combinations.append(num)\n    return sorted(combinations)\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (nums, target)\n\nassert f(*g()) == [4, 5]\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 451, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target number, return a list of all numbers in the list that can be combined to add up to the target.\n    The numbers in the output list should be in ascending order.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Output:\n    [4, 5]\n\n    Explanation: The numbers [4, 5] in the list can be combined to add up to the target number 9.\n    \"\"\"\n    combinations = []\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            combinations.append(num)\n    return sorted(combinations)", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (nums, target)", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is.\n    \"\"\"\n    return nums\n\nassert f(g([3, 4, -7, 2, 1, 3, 1]), 4)\n\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 451, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False", "solution_func": "def g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is.\n    \"\"\"\n    return nums", "map_ix": [1, 0, 1, 0, 0, 0, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(s: str, target: str) -> bool:\n    \"\"\"\n    Check if the target string is a substring of the given string.\n    \"\"\"\n    if target in s:\n        return True\n    else:\n        return False\n\ndef g(s: str, target: str):\n    \"\"\"\n    This solution returns the input strings as is.\n    \"\"\"\n    return s, target\n\nassert f(*g(\"Hello, World!\", \"World!\")) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 451, "target_skills": null, "problem_func": "from typing import*\n\ndef f(s: str, target: str) -> bool:\n    \"\"\"\n    Check if the target string is a substring of the given string.\n    \"\"\"\n    if target in s:\n        return True\n    else:\n        return False", "solution_func": "def g(s: str, target: str):\n    \"\"\"\n    This solution returns the input strings as is.\n    \"\"\"\n    return s, target", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that sums up to the target value.\n    \"\"\"\n    nums_set = set(nums)\n\n    for num in nums:\n        complement = target - num\n        if complement in nums_set:\n            return True\n    \n    return False\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is.\n    \"\"\"\n    return nums\n\nassert f(g([1, 2, 3, 4, 5]), 7) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 451, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that sums up to the target value.\n    \"\"\"\n    nums_set = set(nums)\n\n    for num in nums:\n        complement = target - num\n        if complement in nums_set:\n            return True\n    \n    return False", "solution_func": "def g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is.\n    \"\"\"\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are three numbers in the array that sum up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5], target=9):\n    return arr, target\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 451, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are three numbers in the array that sum up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False", "solution_func": "def g(arr=[1, 2, 3, 4, 5], target=9):\n    return arr, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given array is a palindrome.\n    A palindrome is a sequence that reads the same forwards and backwards.\n\n    Sample Input:\n    arr = [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return arr == arr[::-1]\n\ndef g(arr: List[int] = [1, 2, 3, 2, 1]):\n    return arr\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 452, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given array is a palindrome.\n    A palindrome is a sequence that reads the same forwards and backwards.\n\n    Sample Input:\n    arr = [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return arr == arr[::-1]", "solution_func": "def g(arr: List[int] = [1, 2, 3, 2, 1]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given array is sorted in non-decreasing order.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 452, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given array is sorted in non-decreasing order.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5]):\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given array contains any duplicate elements.\n\n    Sample Input:\n    arr = [1, 2, 3, 2, 4]\n\n    Sample Output:\n    True\n    \"\"\"\n    return len(arr) != len(set(arr))\n\ndef g(arr: List[int] = [1, 2, 3, 2, 4]):\n    return arr\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 452, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given array contains any duplicate elements.\n\n    Sample Input:\n    arr = [1, 2, 3, 2, 4]\n\n    Sample Output:\n    True\n    \"\"\"\n    return len(arr) != len(set(arr))", "solution_func": "def g(arr: List[int] = [1, 2, 3, 2, 4]):\n    return arr", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> int:\n    \"\"\"\n    Given a string, return the number of vowels in the string.\n    \"\"\"\n    vowels = \"aeiou\"\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    return count\n\ndef g(s=\"Hello World\"):\n    \"\"\"\n    This solution counts the number of vowels in a given string.\n    \"\"\"\n    return s\n\nassert f(g()) == 3\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 452, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> int:\n    \"\"\"\n    Given a string, return the number of vowels in the string.\n    \"\"\"\n    vowels = \"aeiou\"\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    return count", "solution_func": "def g(s=\"Hello World\"):\n    \"\"\"\n    This solution counts the number of vowels in a given string.\n    \"\"\"\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the maximum value in the list.\n    \"\"\"\n    return max(nums)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == 5\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 452, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the maximum value in the list.\n    \"\"\"\n    return max(nums)", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with only the even numbers from the original list.\n    \"\"\"\n    return [num for num in nums if num % 2 == 0]\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == [2, 4]\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 452, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with only the even numbers from the original list.\n    \"\"\"\n    return [num for num in nums if num % 2 == 0]", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target value, find two numbers in the list that add up to the target value.\n    Return the indices of the two numbers in a list.\n    \"\"\"\n    num_dict = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_dict:\n            return [num_dict[complement], i]\n        num_dict[num] = i\n    return []\n\ndef g(nums: List[int] = [2, 7, 11, 15], target: int = 9):\n    return nums, target\n\nassert f(*g()) == [0, 1]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 452, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target value, find two numbers in the list that add up to the target value.\n    Return the indices of the two numbers in a list.\n    \"\"\"\n    num_dict = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_dict:\n            return [num_dict[complement], i]\n        num_dict[num] = i\n    return []", "solution_func": "def g(nums: List[int] = [2, 7, 11, 15], target: int = 9):\n    return nums, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum subarray sum.\n    A subarray is a contiguous part of the array.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum = max(num, curr_sum + num)\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n\ndef g(nums: List[int] = [-2, 1, -3, 4, -1, 2, 1, -5, 4]):\n    return nums\n\nassert f(g()) == 6\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 452, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum subarray sum.\n    A subarray is a contiguous part of the array.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum = max(num, curr_sum + num)\n        max_sum = max(max_sum, curr_sum)\n    return max_sum", "solution_func": "def g(nums: List[int] = [-2, 1, -3, 4, -1, 2, 1, -5, 4]):\n    return nums", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, sort the list in non-decreasing order using the Bubble Sort algorithm.\n    Return the sorted list.\n    \"\"\"\n    n = len(nums)\n    for i in range(n - 1):\n        for j in range(n - i - 1):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    return nums\n\ndef g(nums: List[int] = [64, 34, 25, 12, 22, 11, 90]):\n    return nums\n\nassert f(g()) == [11, 12, 22, 25, 34, 64, 90]\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 452, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, sort the list in non-decreasing order using the Bubble Sort algorithm.\n    Return the sorted list.\n    \"\"\"\n    n = len(nums)\n    for i in range(n - 1):\n        for j in range(n - i - 1):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    return nums", "solution_func": "def g(nums: List[int] = [64, 34, 25, 12, 22, 11, 90]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list is a strictly increasing sequence.\n\n    Sample Input:\n    [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return all(nums[i] < nums[i+1] for i in range(len(nums)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 452, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list is a strictly increasing sequence.\n\n    Sample Input:\n    [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return all(nums[i] < nums[i+1] for i in range(len(nums)-1))", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Count the number of distinct elements in the given matrix.\n    \"\"\"\n\n    elements = set()\n\n    for row in matrix:\n        for num in row:\n            elements.add(num)\n\n    return len(elements)\n\ndef g(size=3):\n    \"\"\"\n    Generate a matrix filled with random integers of the given size.\n    \"\"\"\n    import random\n    return [[random.randint(1, 10) for _ in range(size)] for _ in range(size)]\n\nassert f(g()) == 6\n", "emb": null, "idx_generation": 453, "target_skills": null, "problem_func": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Count the number of distinct elements in the given matrix.\n    \"\"\"\n\n    elements = set()\n\n    for row in matrix:\n        for num in row:\n            elements.add(num)\n\n    return len(elements)", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a matrix filled with random integers of the given size.\n    \"\"\"\n    import random\n    return [[random.randint(1, 10) for _ in range(size)] for _ in range(size)]", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Find the maximum value in each row of the given matrix.\n    \"\"\"\n\n    max_values = []\n\n    for row in matrix:\n        max_values.append(max(row))\n\n    return max_values\n\ndef g(size=3):\n    \"\"\"\n    Generate a matrix filled with random integers of the given size.\n    \"\"\"\n    import random\n    return [[random.randint(1, 10) for _ in range(size)] for _ in range(size)]\n\nassert f(g()) == [9, 8, 10]\n", "emb": null, "idx_generation": 453, "target_skills": null, "problem_func": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Find the maximum value in each row of the given matrix.\n    \"\"\"\n\n    max_values = []\n\n    for row in matrix:\n        max_values.append(max(row))\n\n    return max_values", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a matrix filled with random integers of the given size.\n    \"\"\"\n    import random\n    return [[random.randint(1, 10) for _ in range(size)] for _ in range(size)]", "map_ix": null}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Find the sum of the top left to bottom right diagonal elements in the given matrix.\n    \"\"\"\n\n    diagonal_sum = 0\n\n    for i in range(len(matrix)):\n        diagonal_sum += matrix[i][i]\n\n    return diagonal_sum\n\ndef g(size=3):\n    \"\"\"\n    Generate a matrix filled with random integers of the given size.\n    \"\"\"\n    import random\n    return [[random.randint(1, 10) for _ in range(size)] for _ in range(size)]\n\nassert f(g()) == 21\n", "emb": null, "idx_generation": 453, "target_skills": null, "problem_func": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Find the sum of the top left to bottom right diagonal elements in the given matrix.\n    \"\"\"\n\n    diagonal_sum = 0\n\n    for i in range(len(matrix)):\n        diagonal_sum += matrix[i][i]\n\n    return diagonal_sum", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a matrix filled with random integers of the given size.\n    \"\"\"\n    import random\n    return [[random.randint(1, 10) for _ in range(size)] for _ in range(size)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of integers is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 453, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of integers is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]", "solution_func": "def g():\n    return [1, 2, 3, 2, 1]", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transpose the given matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    transposed = [[0 for _ in range(rows)] for _ in range(cols)]\n    for i in range(rows):\n        for j in range(cols):\n            transposed[j][i] = matrix[i][j]\n    return transposed\n\ndef g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\nassert f(g()) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 453, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transpose the given matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    transposed = [[0 for _ in range(rows)] for _ in range(cols)]\n    for i in range(rows):\n        for j in range(cols):\n            transposed[j][i] = matrix[i][j]\n    return transposed", "solution_func": "def g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Count the number of zeros in the given matrix.\n    \"\"\"\n    count = 0\n    for row in matrix:\n        for num in row:\n            if num == 0:\n                count += 1\n    return count\n\ndef g():\n    return [\n        [1, 2, 0],\n        [4, 0, 6],\n        [0, 8, 9]\n    ]\n\nassert f(g()) == 3\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 453, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Count the number of zeros in the given matrix.\n    \"\"\"\n    count = 0\n    for row in matrix:\n        for num in row:\n            if num == 0:\n                count += 1\n    return count", "solution_func": "def g():\n    return [\n        [1, 2, 0],\n        [4, 0, 6],\n        [0, 8, 9]\n    ]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers that sum up to the target value.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    \"\"\"\n    This solution returns the input list of numbers and the target value as is.\n    \"\"\"\n    return nums, target\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 453, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find two numbers that sum up to the target value.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    \"\"\"\n    This solution returns the input list of numbers and the target value as is.\n    \"\"\"\n    return nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, check if it is a symmetric matrix.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    \"\"\"\n    This solution returns the input matrix as is.\n    \"\"\"\n    return matrix\n\nassert f(g()) == False\n", "emb": null, "idx_generation": 453, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, check if it is a symmetric matrix.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    \"\"\"\n    This solution returns the input matrix as is.\n    \"\"\"\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a sorted list of integers, find the target value using binary search.\n    \"\"\"\n    left = 0\n    right = len(nums) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if nums[mid] == target:\n            return True\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 3):\n    \"\"\"\n    This solution returns the input list of numbers and the target value as is.\n    \"\"\"\n    return nums, target\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 453, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a sorted list of integers, find the target value using binary search.\n    \"\"\"\n    left = 0\n    right = len(nums) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if nums[mid] == target:\n            return True\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 3):\n    \"\"\"\n    This solution returns the input list of numbers and the target value as is.\n    \"\"\"\n    return nums, target", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=8, b=3, c=10) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c odd integers)\"\"\"\n    odd_sum = sum([2*i + 1 for i in range(c)])\n    return n + a == b * odd_sum\n\ndef g(a=8, b=3, c=10):\n    odd_sum = sum([2*i + 1 for i in range(c)])\n    return -a + b * odd_sum\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 453, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=8, b=3, c=10) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c odd integers)\"\"\"\n    odd_sum = sum([2*i + 1 for i in range(c)])\n    return n + a == b * odd_sum", "solution_func": "def g(a=8, b=3, c=10):\n    odd_sum = sum([2*i + 1 for i in range(c)])\n    return -a + b * odd_sum", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the largest positive integer that is missing from the list.\n\n    Example:\n    nums = [1, 3, 5, 2, 6, 8, 9]\n\n    Output:\n    7\n\n    Explanation: The largest positive integer missing from the list is 7.\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]:\n            nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n\n    for i in range(n, 0, -1):\n        if nums[i-1] != i:\n            return i\n\n    return 1\n\ndef g(nums: List[int] = [1, 3, 5, 2, 6, 8, 9]):\n    return (nums,)\n\nassert f(*g()) == 7\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 454, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the largest positive integer that is missing from the list.\n\n    Example:\n    nums = [1, 3, 5, 2, 6, 8, 9]\n\n    Output:\n    7\n\n    Explanation: The largest positive integer missing from the list is 7.\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]:\n            nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n\n    for i in range(n, 0, -1):\n        if nums[i-1] != i:\n            return i\n\n    return 1", "solution_func": "def g(nums: List[int] = [1, 3, 5, 2, 6, 8, 9]):\n    return (nums,)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the first positive integer that is missing from the list.\n\n    Example:\n    nums = [1, 3, 5, 2, 6, 8, 9]\n\n    Output:\n    2\n\n    Explanation: The first positive integer missing from the list is 2.\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]:\n            nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n\n    for i in range(n):\n        if nums[i] != i + 1:\n            return i + 1\n\n    return n + 1\n\ndef g(nums: List[int] = [1, 3, 5, 2, 6, 8, 9]):\n    return (nums,)\n\nassert f(*g()) == 2\n\n", "emb": null, "idx_generation": 454, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the first positive integer that is missing from the list.\n\n    Example:\n    nums = [1, 3, 5, 2, 6, 8, 9]\n\n    Output:\n    2\n\n    Explanation: The first positive integer missing from the list is 2.\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]:\n            nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n\n    for i in range(n):\n        if nums[i] != i + 1:\n            return i + 1\n\n    return n + 1", "solution_func": "def g(nums: List[int] = [1, 3, 5, 2, 6, 8, 9]):\n    return (nums,)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the number of positive integers missing from the list.\n\n    Example:\n    nums = [1, 3, 5, 2, 6, 8, 9]\n\n    Output:\n    3\n\n    Explanation: There are 3 positive integers (4, 7, 10) missing from the list.\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]:\n            nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n\n    count = 0\n    for i in range(n):\n        if nums[i] != i + 1:\n            count += 1\n\n    return count\n\ndef g(nums: List[int] = [1, 3, 5, 2, 6, 8, 9]):\n    return (nums,)\n\nassert f(*g()) == 3\n\n", "emb": null, "idx_generation": 454, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the number of positive integers missing from the list.\n\n    Example:\n    nums = [1, 3, 5, 2, 6, 8, 9]\n\n    Output:\n    3\n\n    Explanation: There are 3 positive integers (4, 7, 10) missing from the list.\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]:\n            nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n\n    count = 0\n    for i in range(n):\n        if nums[i] != i + 1:\n            count += 1\n\n    return count", "solution_func": "def g(nums: List[int] = [1, 3, 5, 2, 6, 8, 9]):\n    return (nums,)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list contains a subarray of length 3 in increasing order.\n    \"\"\"\n    for i in range(len(arr) - 2):\n        if arr[i] < arr[i+1] < arr[i+2]:\n            return True\n    return False\n\ndef g():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return arr\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 454, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list contains a subarray of length 3 in increasing order.\n    \"\"\"\n    for i in range(len(arr) - 2):\n        if arr[i] < arr[i+1] < arr[i+2]:\n            return True\n    return False", "solution_func": "def g():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return arr", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a perfect power of 2.\n    \"\"\"\n    return n != 0 and (n & (n - 1)) == 0\n\ndef g():\n    n = 16\n    return n\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 454, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a perfect power of 2.\n    \"\"\"\n    return n != 0 and (n & (n - 1)) == 0", "solution_func": "def g():\n    n = 16\n    return n", "map_ix": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of any contiguous subarray.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    for num in arr:\n        curr_sum = max(num, curr_sum + num)\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n\ndef g():\n    arr = [-2, -3, 4, -1, -2, 1, 5, -3]\n    return arr\n\nassert f(g()) == 7\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 454, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of any contiguous subarray.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    for num in arr:\n        curr_sum = max(num, curr_sum + num)\n        max_sum = max(max_sum, curr_sum)\n    return max_sum", "solution_func": "def g():\n    arr = [-2, -3, 4, -1, -2, 1, 5, -3]\n    return arr", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are three numbers in the given list that add up to the target number.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return nums, target\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 454, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are three numbers in the given list that add up to the target number.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return nums, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list whose sum is equal to the target number.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        curr_sum = arr[i]\n        j = i + 1\n        while j <= n:\n            if curr_sum == target:\n                return True\n            if curr_sum > target or j == n:\n                break\n            curr_sum += arr[j]\n            j += 1\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return arr, target\n\nassert f(*g()) == True\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 454, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list whose sum is equal to the target number.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        curr_sum = arr[i]\n        j = i + 1\n        while j <= n:\n            if curr_sum == target:\n                return True\n            if curr_sum > target or j == n:\n                break\n            curr_sum += arr[j]\n            j += 1\n    return False", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return arr, target", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"\n    Check if two strings are anagrams of each other.\n\n    Sample Input:\n    s1 = \"listen\"\n    s2 = \"silent\"\n\n    Sample Output:\n    True\n    \"\"\"\n    if len(s1) != len(s2):\n        return False\n    count = [0] * 26\n    for i in range(len(s1)):\n        count[ord(s1[i]) - ord('a')] += 1\n        count[ord(s2[i]) - ord('a')] -= 1\n    for c in count:\n        if c != 0:\n            return False\n    return True\n\ndef g(s1: str = \"listen\", s2: str = \"silent\"):\n    return s1, s2\n\nassert f(*g()) == True\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 454, "target_skills": null, "problem_func": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"\n    Check if two strings are anagrams of each other.\n\n    Sample Input:\n    s1 = \"listen\"\n    s2 = \"silent\"\n\n    Sample Output:\n    True\n    \"\"\"\n    if len(s1) != len(s2):\n        return False\n    count = [0] * 26\n    for i in range(len(s1)):\n        count[ord(s1[i]) - ord('a')] += 1\n        count[ord(s2[i]) - ord('a')] -= 1\n    for c in count:\n        if c != 0:\n            return False\n    return True", "solution_func": "def g(s1: str = \"listen\", s2: str = \"silent\"):\n    return s1, s2", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list whose sum is equal to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 8) == True\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 454, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list whose sum is equal to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist three numbers in the list whose sum is equal to the target number.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 18\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 455, "target_skills": null, "problem_func": "from typing import*\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist three numbers in the list whose sum is equal to the target number.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 18", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist four numbers in the list whose sum is equal to the target number.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                for l in range(k+1, len(numbers)):\n                    if numbers[i] + numbers[j] + numbers[k] + numbers[l] == target:\n                        return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 20\n\nassert f(*g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 455, "target_skills": null, "problem_func": "from typing import*\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist four numbers in the list whose sum is equal to the target number.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                for l in range(k+1, len(numbers)):\n                    if numbers[i] + numbers[j] + numbers[k] + numbers[l] == target:\n                        return True\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 20", "map_ix": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist two numbers in the list whose difference is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in numbers:\n        if num - target in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4\n\nassert f(*g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 455, "target_skills": null, "problem_func": "from typing import*\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist two numbers in the list whose difference is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in numbers:\n        if num - target in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Find the index of the target word in the list of words\"\"\"\n    return words.index(target)\ndef g(words = ['java', 'python', 'ruby', 'javascript']):\n    return words\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 455, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Find the index of the target word in the list of words\"\"\"\n    return words.index(target)", "solution_func": "def g(words = ['java', 'python', 'ruby', 'javascript']):\n    return words", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=50, num_of_elements=2) -> bool:\n    \"\"\"Find a combination of num_of_elements numbers from the given list that multiplies up to the target value.\"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(numbers, num_of_elements))\ndef g(target=50, num_of_elements=2):\n    numbers = [10, 25, 30, 40, 50, 60, 70, 80, 90]\n    return numbers\nassert f(g()) == True\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 455, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=50, num_of_elements=2) -> bool:\n    \"\"\"Find a combination of num_of_elements numbers from the given list that multiplies up to the target value.\"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(numbers, num_of_elements))", "solution_func": "def g(target=50, num_of_elements=2):\n    numbers = [10, 25, 30, 40, 50, 60, 70, 80, 90]\n    return numbers", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(phrase: str, target='python') -> bool:\n    \"\"\"Check if the target word is present in the given phrase\"\"\"\n    return target in phrase\ndef g(phrase='I love programming in python'):\n    return phrase\nassert f(g()) == True\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 455, "target_skills": null, "problem_func": "from typing import*\ndef f(phrase: str, target='python') -> bool:\n    \"\"\"Check if the target word is present in the given phrase\"\"\"\n    return target in phrase", "solution_func": "def g(phrase='I love programming in python'):\n    return phrase", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the maximum product of any two numbers in the list.\n    \"\"\"\n    n = len(nums)\n    max_product = float('-inf')\n\n    for i in range(n):\n        for j in range(i+1, n):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n\n    return max_product\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6]):\n    return (nums,)\n\nassert f(*g()) == 30\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 455, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the maximum product of any two numbers in the list.\n    \"\"\"\n    n = len(nums)\n    max_product = float('-inf')\n\n    for i in range(n):\n        for j in range(i+1, n):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n\n    return max_product", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6]):\n    return (nums,)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list where each element is the sum of all other elements in the original list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6]\n\n    Output:\n    [20, 19, 18, 17, 16, 15]\n\n    Explanation: The first element in the output is the sum of all other elements except 1, the second element is the sum of all other elements except 2, and so on.\n    \"\"\"\n    n = len(nums)\n    result = []\n\n    for i in range(n):\n        temp_sum = sum(nums[:i] + nums[i+1:])\n        result.append(temp_sum)\n\n    return result\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6]):\n    return (nums,)\n\nassert f(*g()) == [20, 19, 18, 17, 16, 15]\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 455, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list where each element is the sum of all other elements in the original list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6]\n\n    Output:\n    [20, 19, 18, 17, 16, 15]\n\n    Explanation: The first element in the output is the sum of all other elements except 1, the second element is the sum of all other elements except 2, and so on.\n    \"\"\"\n    n = len(nums)\n    result = []\n\n    for i in range(n):\n        temp_sum = sum(nums[:i] + nums[i+1:])\n        result.append(temp_sum)\n\n    return result", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6]):\n    return (nums,)", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix of integers, rotate the matrix 90 degrees clockwise.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Output:\n    [[7, 4, 1],\n     [8, 5, 2],\n     [9, 6, 3]]\n    \"\"\"\n\n    n = len(matrix)\n    m = len(matrix[0])\n    result = [[0] * n for _ in range(m)]\n\n    for i in range(n):\n        for j in range(m):\n            result[j][n-i-1] = matrix[i][j]\n\n    return result\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return (matrix,)\n\nassert f(*g()) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 455, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix of integers, rotate the matrix 90 degrees clockwise.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Output:\n    [[7, 4, 1],\n     [8, 5, 2],\n     [9, 6, 3]]\n    \"\"\"\n\n    n = len(matrix)\n    m = len(matrix[0])\n    result = [[0] * n for _ in range(m)]\n\n    for i in range(n):\n        for j in range(m):\n            result[j][n-i-1] = matrix[i][j]\n\n    return result", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return (matrix,)", "map_ix": [1, 0, 1, 0, 0, 0, 1, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=6):\n    return nums\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 455, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=6):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target number, find the number of pairs in the list that add up to the target.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    target = 6\n    \n    Sample output:\n    2\n    \n    Explanation: The pairs [1, 5] and [2, 4] add up to the target value of 6.\n    \"\"\"\n    count = 0\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            count += 1\n    return count\n\ndef g() -> (List[int], int):\n    return ([1, 2, 3, 4, 5], 6)\n\nassert f(*g()) == 2\n\n", "emb": null, "idx_generation": 456, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target number, find the number of pairs in the list that add up to the target.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    target = 6\n    \n    Sample output:\n    2\n    \n    Explanation: The pairs [1, 5] and [2, 4] add up to the target value of 6.\n    \"\"\"\n    count = 0\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            count += 1\n    return count", "solution_func": "def g() -> (List[int], int):\n    return ([1, 2, 3, 4, 5], 6)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the given list contains a subsequence that has a minimum value equal to the target value.\n\n    A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n    Sample input:\n    nums = [5, 4, 3, 2, 1]\n    target = 2\n    \n    Sample output:\n    True\n    \n    Explanation: The subsequence [3, 2] has a minimum value of 2, which is equal to the target value.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if min(nums[i:j]) == target:\n                return True\n    return False\n\ndef g() -> (List[int], int):\n    return ([5, 4, 3, 2, 1], 2)\n\nassert f(*g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 456, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the given list contains a subsequence that has a minimum value equal to the target value.\n\n    A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n    Sample input:\n    nums = [5, 4, 3, 2, 1]\n    target = 2\n    \n    Sample output:\n    True\n    \n    Explanation: The subsequence [3, 2] has a minimum value of 2, which is equal to the target value.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if min(nums[i:j]) == target:\n                return True\n    return False", "solution_func": "def g() -> (List[int], int):\n    return ([5, 4, 3, 2, 1], 2)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the maximum sum of any contiguous subarray within the given list.\n\n    A subarray is a contiguous part of an array.\n    \n    Sample input:\n    nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n    \n    Sample output:\n    6\n    \n    Explanation: The contiguous subarray [4, -1, 2, 1] has the maximum sum of 6.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n\ndef g() -> List[int]:\n    return [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\nassert f(g()) == 6\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 456, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the maximum sum of any contiguous subarray within the given list.\n\n    A subarray is a contiguous part of an array.\n    \n    Sample input:\n    nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n    \n    Sample output:\n    6\n    \n    Explanation: The contiguous subarray [4, -1, 2, 1] has the maximum sum of 6.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum", "solution_func": "def g() -> List[int]:\n    return [-2, 1, -3, 4, -1, 2, 1, -5, 4]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if it is a Toeplitz matrix.\n    A matrix is Toeplitz if every diagonal from top-left to bottom-right has the same elements.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [4, 1, 2], [7, 4, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    for i in range(rows - 1):\n        for j in range(cols - 1):\n            if matrix[i][j] != matrix[i + 1][j + 1]:\n                return False\n    return True\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 1, 2], [7, 4, 1]]):\n    return matrix\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 456, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if it is a Toeplitz matrix.\n    A matrix is Toeplitz if every diagonal from top-left to bottom-right has the same elements.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [4, 1, 2], [7, 4, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    for i in range(rows - 1):\n        for j in range(cols - 1):\n            if matrix[i][j] != matrix[i + 1][j + 1]:\n                return False\n    return True", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 1, 2], [7, 4, 1]]):\n    return matrix", "map_ix": [1, 0, 1, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the maximum product of any two numbers in the given list of integers.\n\n    Sample Input:\n    nums = [-2, 3, -4, 5, 1]\n\n    Sample Output:\n    20\n    \"\"\"\n    n = len(nums)\n    if n < 2:\n        return None\n\n    max_product = float('-inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n\ndef g(nums: List[int] = [-2, 3, -4, 5, 1]):\n    return nums\n\nassert f(g()) == 20\n\n", "emb": null, "idx_generation": 456, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the maximum product of any two numbers in the given list of integers.\n\n    Sample Input:\n    nums = [-2, 3, -4, 5, 1]\n\n    Sample Output:\n    20\n    \"\"\"\n    n = len(nums)\n    if n < 2:\n        return None\n\n    max_product = float('-inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n    return max_product", "solution_func": "def g(nums: List[int] = [-2, 3, -4, 5, 1]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, check if it is a palindrome.\n    A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward.\n\n    Sample Input:\n    s = \"level\"\n\n    Sample Output:\n    True\n    \"\"\"\n    s = s.lower()\n    return s == s[::-1]\n\ndef g(s: str = \"level\"):\n    return s\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 456, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, check if it is a palindrome.\n    A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward.\n\n    Sample Input:\n    s = \"level\"\n\n    Sample Output:\n    True\n    \"\"\"\n    s = s.lower()\n    return s == s[::-1]", "solution_func": "def g(s: str = \"level\"):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if each row and column has a prime sum.\n\n    Sample Input:\n    arr = [[2, 4, 6], [8, 10, 12], [14, 16, 18]]\n\n    Sample Output:\n    False\n    \"\"\"\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    row_sum = [sum(row) for row in arr]\n    column_sum = [sum(column) for column in zip(*arr)]\n    return all(is_prime(sum_value) for sum_value in row_sum + column_sum)\n\ndef g(arr: List[List[int]] = [[2, 4, 6], [8, 10, 12], [14, 16, 18]]):\n    return arr\n\nassert f(g()) == False\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 456, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if each row and column has a prime sum.\n\n    Sample Input:\n    arr = [[2, 4, 6], [8, 10, 12], [14, 16, 18]]\n\n    Sample Output:\n    False\n    \"\"\"\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    row_sum = [sum(row) for row in arr]\n    column_sum = [sum(column) for column in zip(*arr)]\n    return all(is_prime(sum_value) for sum_value in row_sum + column_sum)", "solution_func": "def g(arr: List[List[int]] = [[2, 4, 6], [8, 10, 12], [14, 16, 18]]):\n    return arr", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the sum of the first column is equal to the sum of the last row.\n\n    Sample Input:\n    arr = [[2, 4, 6], [8, 10, 12], [14, 16, 18]]\n\n    Sample Output:\n    False\n    \"\"\"\n    first_column_sum = sum(row[0] for row in arr)\n    last_row_sum = sum(arr[-1])\n    return first_column_sum == last_row_sum\n\ndef g(arr: List[List[int]] = [[2, 4, 6], [8, 10, 12], [14, 16, 18]]):\n    return arr\n\nassert f(g()) == False\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 456, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the sum of the first column is equal to the sum of the last row.\n\n    Sample Input:\n    arr = [[2, 4, 6], [8, 10, 12], [14, 16, 18]]\n\n    Sample Output:\n    False\n    \"\"\"\n    first_column_sum = sum(row[0] for row in arr)\n    last_row_sum = sum(arr[-1])\n    return first_column_sum == last_row_sum", "solution_func": "def g(arr: List[List[int]] = [[2, 4, 6], [8, 10, 12], [14, 16, 18]]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if there is a row or column where all the numbers are equal.\n\n    Sample Input:\n    arr = [[2, 4, 6], [8, 10, 12], [14, 16, 18]]\n\n    Sample Output:\n    False\n    \"\"\"\n    for row in arr:\n        if len(set(row)) == 1:\n            return True\n    for column in zip(*arr):\n        if len(set(column)) == 1:\n            return True\n    return False\n\ndef g(arr: List[List[int]] = [[2, 4, 6], [8, 10, 12], [14, 16, 18]]):\n    return arr\n\nassert f(g()) == False\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 456, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if there is a row or column where all the numbers are equal.\n\n    Sample Input:\n    arr = [[2, 4, 6], [8, 10, 12], [14, 16, 18]]\n\n    Sample Output:\n    False\n    \"\"\"\n    for row in arr:\n        if len(set(row)) == 1:\n            return True\n    for column in zip(*arr):\n        if len(set(column)) == 1:\n            return True\n    return False", "solution_func": "def g(arr: List[List[int]] = [[2, 4, 6], [8, 10, 12], [14, 16, 18]]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target value, count the number of pairs that sum up to the target.\n    \"\"\"\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                count += 1\n    return count\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 6):\n    \"\"\"\n    This solution returns the input list and target value as is.\n    \"\"\"\n    return nums, target\n\nassert f(*g()) == 2\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 456, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target value, count the number of pairs that sum up to the target.\n    \"\"\"\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                count += 1\n    return count", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 6):\n    \"\"\"\n    This solution returns the input list and target value as is.\n    \"\"\"\n    return nums, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> int:\n    \"\"\"\n    Given a 2D grid of integers, find the sum of all the elements in the grid.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    45\n    \"\"\"\n    return sum(sum(row) for row in arr)\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == 45\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 457, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> int:\n    \"\"\"\n    Given a 2D grid of integers, find the sum of all the elements in the grid.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    45\n    \"\"\"\n    return sum(sum(row) for row in arr)", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a 2D grid of integers, return a list of the sums of each row.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    [6, 15, 24]\n    \"\"\"\n    return [sum(row) for row in arr]\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == [6, 15, 24]\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 457, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a 2D grid of integers, return a list of the sums of each row.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    [6, 15, 24]\n    \"\"\"\n    return [sum(row) for row in arr]", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [1, 1, 0, 0, 0, 1, 1, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> int:\n    \"\"\"\n    Given a 2D grid of integers, find the maximum value in the grid.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    9\n    \"\"\"\n    return max(max(row) for row in arr)\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == 9\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 457, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> int:\n    \"\"\"\n    Given a 2D grid of integers, find the maximum value in the grid.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    9\n    \"\"\"\n    return max(max(row) for row in arr)", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum difference between any two elements in the list.\n\n    Sample Input:\n    arr = [5, 3, 8, 2, 1, 9, 4]\n\n    Sample Output:\n    8\n    \"\"\"\n    min_val = float('inf')\n    max_diff = 0\n\n    for num in arr:\n        min_val = min(min_val, num)\n        max_diff = max(max_diff, num - min_val)\n\n    return max_diff\n\ndef g(arr: List[int] = [5, 3, 8, 2, 1, 9, 4]):\n    return arr\n\nassert f(g()) == 8\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 457, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum difference between any two elements in the list.\n\n    Sample Input:\n    arr = [5, 3, 8, 2, 1, 9, 4]\n\n    Sample Output:\n    8\n    \"\"\"\n    min_val = float('inf')\n    max_diff = 0\n\n    for num in arr:\n        min_val = min(min_val, num)\n        max_diff = max(max_diff, num - min_val)\n\n    return max_diff", "solution_func": "def g(arr: List[int] = [5, 3, 8, 2, 1, 9, 4]):\n    return arr", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, find the two elements that appear only once and return them in a new list.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 1, 2]\n\n    Sample Output:\n    [3, 4]\n    \"\"\"\n    xor_val = 0\n\n    for num in arr:\n        xor_val ^= num\n\n    # Find the rightmost set bit of xor_val\n    rightmost_set_bit = xor_val & -xor_val\n\n    num1, num2 = 0, 0\n\n    for num in arr:\n        if num & rightmost_set_bit:\n            num1 ^= num\n        else:\n            num2 ^= num\n\n    return [num1, num2]\n\ndef g(arr: List[int] = [1, 2, 3, 4, 1, 2]):\n    return arr\n\nassert f(g()) == [3, 4]\n", "emb": [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 457, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, find the two elements that appear only once and return them in a new list.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 1, 2]\n\n    Sample Output:\n    [3, 4]\n    \"\"\"\n    xor_val = 0\n\n    for num in arr:\n        xor_val ^= num\n\n    # Find the rightmost set bit of xor_val\n    rightmost_set_bit = xor_val & -xor_val\n\n    num1, num2 = 0, 0\n\n    for num in arr:\n        if num & rightmost_set_bit:\n            num1 ^= num\n        else:\n            num2 ^= num\n\n    return [num1, num2]", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 1, 2]):\n    return arr", "map_ix": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a list of lists of integers, return a new list containing the maximum element from each sublist.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    [3, 6, 9]\n    \"\"\"\n    max_elements = []\n\n    for sublist in arr:\n        max_elements.append(max(sublist))\n\n    return max_elements\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == [3, 6, 9]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 457, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a list of lists of integers, return a new list containing the maximum element from each sublist.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    [3, 6, 9]\n    \"\"\"\n    max_elements = []\n\n    for sublist in arr:\n        max_elements.append(max(sublist))\n\n    return max_elements", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=14, b=50, c=47) -> bool:\n    \"\"\"Find n such that n + a == (b * c) - (the sum of the first c integers)\"\"\"\n    return n + a == (b * c) - sum([i for i in range(c)])\n\ndef g(a=14, b=50, c=47):\n    return -a + (b * c) - sum([i for i in range(c)])\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 457, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=14, b=50, c=47) -> bool:\n    \"\"\"Find n such that n + a == (b * c) - (the sum of the first c integers)\"\"\"\n    return n + a == (b * c) - sum([i for i in range(c)])", "solution_func": "def g(a=14, b=50, c=47):\n    return -a + (b * c) - sum([i for i in range(c)])", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subset of the list whose sum is divisible by 3.\n    Return True if such a subset exists, False otherwise.\n    \"\"\"\n    for r in range(1, len(arr) + 1):\n        for subset in itertools.combinations(arr, r):\n            if sum(subset) % 3 == 0:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5]):\n    return (arr,)\n\nassert f(*g()) == True\n", "emb": [0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 457, "target_skills": null, "problem_func": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subset of the list whose sum is divisible by 3.\n    Return True if such a subset exists, False otherwise.\n    \"\"\"\n    for r in range(1, len(arr) + 1):\n        for subset in itertools.combinations(arr, r):\n            if sum(subset) % 3 == 0:\n                return True\n    return False", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5]):\n    return (arr,)", "map_ix": [0, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target sum, check if there exists a subset of the list whose sum is equal to the target sum.\n    Return True if such a subset exists, False otherwise.\n    \"\"\"\n    dp = [[False] * (target_sum + 1) for _ in range(len(arr) + 1)]\n    dp[0][0] = True\n\n    for i in range(1, len(arr) + 1):\n        dp[i][0] = True\n\n    for i in range(1, len(arr) + 1):\n        for j in range(1, target_sum + 1):\n            if arr[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j - arr[i - 1]] or dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    return dp[len(arr)][target_sum]\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], target_sum: int = 9):\n    return (arr, target_sum)\n\nassert f(*g()) == True\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 457, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target sum, check if there exists a subset of the list whose sum is equal to the target sum.\n    Return True if such a subset exists, False otherwise.\n    \"\"\"\n    dp = [[False] * (target_sum + 1) for _ in range(len(arr) + 1)]\n    dp[0][0] = True\n\n    for i in range(1, len(arr) + 1):\n        dp[i][0] = True\n\n    for i in range(1, len(arr) + 1):\n        for j in range(1, target_sum + 1):\n            if arr[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j - arr[i - 1]] or dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    return dp[len(arr)][target_sum]", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5], target_sum: int = 9):\n    return (arr, target_sum)", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target integer, find two numbers from the list that add up to the target.\n\n    Example:\n    nums = [2, 7, 11, 15]\n    target = 9\n    Output: [2, 7]\n    \"\"\"\n    complements = {}\n    for num in nums:\n        complement = target - num\n        if complement in complements:\n            return [complement, num]\n        complements[num] = True\n    return []\n\ndef g(nums: List[int] = [2, 7, 11, 15], target: int = 9):\n    return nums, target\n\nassert f(*g()) == [2, 7]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 457, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target integer, find two numbers from the list that add up to the target.\n\n    Example:\n    nums = [2, 7, 11, 15]\n    target = 9\n    Output: [2, 7]\n    \"\"\"\n    complements = {}\n    for num in nums:\n        complement = target - num\n        if complement in complements:\n            return [complement, num]\n        complements[num] = True\n    return []", "solution_func": "def g(nums: List[int] = [2, 7, 11, 15], target: int = 9):\n    return nums, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=10, b=20, c=30) -> bool:\n    \"\"\"Check if the given number is the sum of a, b, and c\"\"\"\n    return n == a + b + c\n\ndef g(a=10, b=20, c=30):\n    return a + b + c\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 458, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=10, b=20, c=30) -> bool:\n    \"\"\"Check if the given number is the sum of a, b, and c\"\"\"\n    return n == a + b + c", "solution_func": "def g(a=10, b=20, c=30):\n    return a + b + c", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=5, b=10) -> bool:\n    \"\"\"Check if the given number is divisible by a and b\"\"\"\n    return n % a == 0 and n % b == 0\n\ndef g(a=5, b=10):\n    return a * b\n\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 458, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=5, b=10) -> bool:\n    \"\"\"Check if the given number is divisible by a and b\"\"\"\n    return n % a == 0 and n % b == 0", "solution_func": "def g(a=5, b=10):\n    return a * b", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=20, b=3) -> bool:\n    \"\"\"Check if the given number is a perfect square and the square root of it is divisible by b\"\"\"\n    return math.isqrt(n) ** 2 == n and math.isqrt(n) % b == 0\n\ndef g(a=20, b=3):\n    n = a * b\n    return n\n\nassert f(g())\n", "emb": null, "idx_generation": 458, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=20, b=3) -> bool:\n    \"\"\"Check if the given number is a perfect square and the square root of it is divisible by b\"\"\"\n    return math.isqrt(n) ** 2 == n and math.isqrt(n) % b == 0", "solution_func": "def g(a=20, b=3):\n    n = a * b\n    return n", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, s1='a', s2='b', count1=50, count2=30) -> bool:\n    \"\"\"\n    Determine if the string s is a palindrome and has count1 occurrences of s1 and count2 occurrences of s2.\n\n    Example:\n    f('aba', 'a', 'b', 2, 1) => True\n    \"\"\"\n    return s == s[::-1] and s.count(s1) == count1 and s.count(s2) == count2\n\ndef g(s1 = 'a', s2 = 'b', count1 = 50, count2 = 30):\n    return (s1 * count1) + (s2 * count2) + (s1 * count1)[::-1]\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 458, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, s1='a', s2='b', count1=50, count2=30) -> bool:\n    \"\"\"\n    Determine if the string s is a palindrome and has count1 occurrences of s1 and count2 occurrences of s2.\n\n    Example:\n    f('aba', 'a', 'b', 2, 1) => True\n    \"\"\"\n    return s == s[::-1] and s.count(s1) == count1 and s.count(s2) == count2", "solution_func": "def g(s1 = 'a', s2 = 'b', count1 = 50, count2 = 30):\n    return (s1 * count1) + (s2 * count2) + (s1 * count1)[::-1]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the minimum element in the list.\n\n    Example:\n    f([5, 3, 8, 2, 9]) => 2\n    \"\"\"\n    return min(nums)\n\ndef g(nums: List[int] = [5, 3, 8, 2, 9]):\n    return nums\n\nassert f(g()) == 2\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 458, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the minimum element in the list.\n\n    Example:\n    f([5, 3, 8, 2, 9]) => 2\n    \"\"\"\n    return min(nums)", "solution_func": "def g(nums: List[int] = [5, 3, 8, 2, 9]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, remove all even numbers from the list and return the updated list.\n\n    Example:\n    f([2, 5, 8, 9, 4]) => [5, 9]\n    \"\"\"\n    return [num for num in nums if num % 2 != 0]\n\ndef g(nums: List[int] = [2, 5, 8, 9, 4]):\n    return nums\n\nassert f(g()) == [5, 9]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 458, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, remove all even numbers from the list and return the updated list.\n\n    Example:\n    f([2, 5, 8, 9, 4]) => [5, 9]\n    \"\"\"\n    return [num for num in nums if num % 2 != 0]", "solution_func": "def g(nums: List[int] = [2, 5, 8, 9, 4]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(nums: List[int], n: int) -> bool:\n    \"\"\"\n    Check if the sum of the first n numbers in the list is equal to the sum of the last n numbers.\n    \"\"\"\n    return sum(nums[:n]) == sum(nums[-n:])\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: int = 3):\n    return (nums, n)\n\nassert f(*g()) == False\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 458, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int], n: int) -> bool:\n    \"\"\"\n    Check if the sum of the first n numbers in the list is equal to the sum of the last n numbers.\n    \"\"\"\n    return sum(nums[:n]) == sum(nums[-n:])", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: int = 3):\n    return (nums, n)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\n\ndef f(nums: List[int], n: int, target: int) -> bool:\n    \"\"\"\n    Check if there exists a subsequence of length n in the list that sums up to the target value.\n    \"\"\"\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    return dp[n][target]\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: int = 3, target: int = 15):\n    return (nums, n, target)\n\nassert f(*g()) == True\n", "emb": null, "idx_generation": 458, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int], n: int, target: int) -> bool:\n    \"\"\"\n    Check if there exists a subsequence of length n in the list that sums up to the target value.\n    \"\"\"\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    return dp[n][target]", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: int = 3, target: int = 15):\n    return (nums, n, target)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Find the index of the first occurrence of the target value in the list.\n    Return -1 if the target value is not found.\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return i\n    return -1\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 5):\n    return (nums, target)\n\nassert f(*g()) == 4\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 458, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Find the index of the first occurrence of the target value in the list.\n    Return -1 if the target value is not found.\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return i\n    return -1", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 5):\n    return (nums, target)", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a pair of numbers whose sum is divisible by 10.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        remainder = num % 10\n        if (10 - remainder) % 10 in seen:\n            return True\n        seen.add(remainder)\n    return False\n\ndef g():\n    return [12, 34, 56, 78, 90]\n\nassert f(*g()) == True\n\n", "emb": null, "idx_generation": 458, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a pair of numbers whose sum is divisible by 10.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        remainder = num % 10\n        if (10 - remainder) % 10 in seen:\n            return True\n        seen.add(remainder)\n    return False", "solution_func": "def g():\n    return [12, 34, 56, 78, 90]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist three numbers in the list whose sum is equal to the target number.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            for k in range(j + 1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 18\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 459, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist three numbers in the list whose sum is equal to the target number.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            for k in range(j + 1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 18", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist two numbers in the list whose difference is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in numbers:\n        if num - target in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], 4\n\nassert f(*g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 459, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist two numbers in the list whose difference is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in numbers:\n        if num - target in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g():\n    return [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], 4", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist four numbers in the list whose sum is equal to the target number.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            for k in range(j + 1, len(numbers)):\n                for l in range(k + 1, len(numbers)):\n                    if numbers[i] + numbers[j] + numbers[k] + numbers[l] == target:\n                        return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 26\n\nassert f(*g()) == True\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 459, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist four numbers in the list whose sum is equal to the target number.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            for k in range(j + 1, len(numbers)):\n                for l in range(k + 1, len(numbers)):\n                    if numbers[i] + numbers[j] + numbers[k] + numbers[l] == target:\n                        return True\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 26", "map_ix": [1, 1, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], threshold=5) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the numbers greater than the threshold.\n    \"\"\"\n    return [num for num in nums if num > threshold]\n\ndef g(threshold=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == [6, 7, 8, 9, 10]\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 459, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], threshold=5) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the numbers greater than the threshold.\n    \"\"\"\n    return [num for num in nums if num > threshold]", "solution_func": "def g(threshold=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there are two integers in the list that sum up to the target value.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 459, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there are two integers in the list that sum up to the target value.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False", "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the numbers that are divisible by 3 and not divisible by 2.\n    \"\"\"\n    return [num for num in nums if num % 3 == 0 and num % 2 != 0]\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == [3, 9]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 459, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the numbers that are divisible by 3 and not divisible by 2.\n    \"\"\"\n    return [num for num in nums if num % 3 == 0 and num % 2 != 0]", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, words=[\"apple\", \"banana\", \"cherry\"]) -> bool:\n    \"\"\"Check if a string can be formed by concatenating words from a given list\"\"\"\n    n = len(s)\n    if n == 0:\n        return True\n    dp = [False] * (n + 1)\n    dp[0] = True\n    for i in range(1, n + 1):\n        for j in range(i):\n            if dp[j] and s[j:i] in words:\n                dp[i] = True\n                break\n    return dp[n]\n\ndef g(words=[\"apple\", \"banana\", \"cherry\"]):\n    return \"applebanana\"\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 459, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, words=[\"apple\", \"banana\", \"cherry\"]) -> bool:\n    \"\"\"Check if a string can be formed by concatenating words from a given list\"\"\"\n    n = len(s)\n    if n == 0:\n        return True\n    dp = [False] * (n + 1)\n    dp[0] = True\n    for i in range(1, n + 1):\n        for j in range(i):\n            if dp[j] and s[j:i] in words:\n                dp[i] = True\n                break\n    return dp[n]", "solution_func": "def g(words=[\"apple\", \"banana\", \"cherry\"]):\n    return \"applebanana\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exist two numbers in a given list that sum up to the target\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 459, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exist two numbers in a given list that sum up to the target\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"Check if a given number can be expressed as the sum of k primes\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n + 1) if is_prime(i)]\n    dp = [False] * (n + 1)\n    dp[0] = True\n    for i in range(k):\n        for j in range(n + 1):\n            if primes[i] <= j and dp[j - primes[i]]:\n                dp[j] = True\n    return dp[n]\n\ndef g():\n    return (10,)\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 459, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"Check if a given number can be expressed as the sum of k primes\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n + 1) if is_prime(i)]\n    dp = [False] * (n + 1)\n    dp[0] = True\n    for i in range(k):\n        for j in range(n + 1):\n            if primes[i] <= j and dp[j - primes[i]]:\n                dp[j] = True\n    return dp[n]", "solution_func": "def g():\n    return (10,)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Calculate the product of all numbers in the given list of integers.\n\n    Sample Input:\n    [1, 2, 3, 4, 5, 6]\n\n    Sample Output:\n    720\n    \"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n    return product\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6]):\n    return nums\n\nassert f(g()) == 720\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 459, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Calculate the product of all numbers in the given list of integers.\n\n    Sample Input:\n    [1, 2, 3, 4, 5, 6]\n\n    Sample Output:\n    720\n    \"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n    return product", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6]):\n    return nums", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D list of integers, check if the sum of each row is equal to the sum of each column.\n\n    Example:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    The sum of each row is [6, 15, 24] and the sum of each column is [12, 15, 18].\n    Since the sums are equal, the function should return True.\n    \"\"\"\n    row_sums = [sum(row) for row in arr]\n    col_sums = [sum(col) for col in zip(*arr)]\n    return row_sums == col_sums\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 460, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D list of integers, check if the sum of each row is equal to the sum of each column.\n\n    Example:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    The sum of each row is [6, 15, 24] and the sum of each column is [12, 15, 18].\n    Since the sums are equal, the function should return True.\n    \"\"\"\n    row_sums = [sum(row) for row in arr]\n    col_sums = [sum(col) for col in zip(*arr)]\n    return row_sums == col_sums", "solution_func": "def g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, check if it is a palindrome.\n\n    Example:\n    s = \"racecar\"\n    The string is a palindrome, so the function should return True.\n    \"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 460, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, check if it is a palindrome.\n\n    Example:\n    s = \"racecar\"\n    The string is a palindrome, so the function should return True.\n    \"\"\"\n    return s == s[::-1]", "solution_func": "def g():\n    return \"racecar\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum product of any three numbers in the list.\n\n    Example:\n    nums = [-10, -3, 1, 2, 3, 4, 5]\n    The maximum product of any three numbers in the list is 60 (2*3*5), so the function should return 60.\n    \"\"\"\n    nums.sort()\n    return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])\n\ndef g():\n    return [-10, -3, 1, 2, 3, 4, 5]\n\nassert f(g()) == 60\n", "emb": null, "idx_generation": 460, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum product of any three numbers in the list.\n\n    Example:\n    nums = [-10, -3, 1, 2, 3, 4, 5]\n    The maximum product of any three numbers in the list is 60 (2*3*5), so the function should return 60.\n    \"\"\"\n    nums.sort()\n    return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])", "solution_func": "def g():\n    return [-10, -3, 1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 7]) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a pair of numbers whose sum is equal to n.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == n:\n                return True\n    return False\n\ndef g(nums=[2, 4, 7]):\n    return sum(nums)\n\nassert f(g())\n", "emb": null, "idx_generation": 460, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[2, 4, 7]) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a pair of numbers whose sum is equal to n.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == n:\n                return True\n    return False", "solution_func": "def g(nums=[2, 4, 7]):\n    return sum(nums)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target number, determine if there exists a pair of numbers in the matrix\n    whose sum is equal to the target number.\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            for x in range(i, len(matrix)):\n                for y in range(len(matrix[x])):\n                    if matrix[i][j] + matrix[x][y] == target:\n                        return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 460, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target number, determine if there exists a pair of numbers in the matrix\n    whose sum is equal to the target number.\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            for x in range(i, len(matrix)):\n                for y in range(len(matrix[x])):\n                    if matrix[i][j] + matrix[x][y] == target:\n                        return True\n    return False", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3]) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a triple of numbers whose sum is equal to n.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == n:\n                    return True\n    return False\n\ndef g(nums=[1, 2, 3]):\n    return sum(nums)\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 460, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3]) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a triple of numbers whose sum is equal to n.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == n:\n                    return True\n    return False", "solution_func": "def g(nums=[1, 2, 3]):\n    return sum(nums)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subsequence of length k in the list that is strictly decreasing\"\"\"\n    for i in range(len(nums)-k+1):\n        subsequence = nums[i:i+k]\n        if all(subsequence[j] > subsequence[j+1] for j in range(k-1)):\n            return True\n    return False\n\ndef g(k=3):\n    return [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 460, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subsequence of length k in the list that is strictly decreasing\"\"\"\n    for i in range(len(nums)-k+1):\n        subsequence = nums[i:i+k]\n        if all(subsequence[j] > subsequence[j+1] for j in range(k-1)):\n            return True\n    return False", "solution_func": "def g(k=3):\n    return [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], k=4) -> bool:\n    \"\"\"Check if there exists a subsequence of length k in the list that is strictly increasing and contains only prime numbers\"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    for i in range(len(nums)-k+1):\n        subsequence = nums[i:i+k]\n        if all(subsequence[j] in primes for j in range(k)):\n            return True\n    return False\n\ndef g(k=4):\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\nassert f(g()) == False\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 460, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k=4) -> bool:\n    \"\"\"Check if there exists a subsequence of length k in the list that is strictly increasing and contains only prime numbers\"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    for i in range(len(nums)-k+1):\n        subsequence = nums[i:i+k]\n        if all(subsequence[j] in primes for j in range(k)):\n            return True\n    return False", "solution_func": "def g(k=4):\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], k=2) -> bool:\n    \"\"\"Check if there exists a subsequence of length k in the list that is strictly increasing and contains both even and odd numbers\"\"\"\n    for i in range(len(nums)-k+1):\n        subsequence = nums[i:i+k]\n        if all(subsequence[j] < subsequence[j+1] for j in range(k-1)) and any(subsequence[j] % 2 == 0 for j in range(k)) and any(subsequence[j] % 2 != 0 for j in range(k)):\n            return True\n    return False\n\ndef g(k=2):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 460, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k=2) -> bool:\n    \"\"\"Check if there exists a subsequence of length k in the list that is strictly increasing and contains both even and odd numbers\"\"\"\n    for i in range(len(nums)-k+1):\n        subsequence = nums[i:i+k]\n        if all(subsequence[j] < subsequence[j+1] for j in range(k-1)) and any(subsequence[j] % 2 == 0 for j in range(k)) and any(subsequence[j] % 2 != 0 for j in range(k)):\n            return True\n    return False", "solution_func": "def g(k=2):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, target: int) -> bool:\n    \"\"\"\n    Given a number n and a target, check if the number n is divisible by the target and the product of its digits is equal to the target value.\n    If both conditions are met, return True. Otherwise, return False.\n    \"\"\"\n    if target == 0:\n        return False\n    \n    digit_product = 1\n    for digit in str(n):\n        digit_product *= int(digit)\n    \n    return n % target == 0 and digit_product == target\n\ndef g():\n    return 36, 9\n\nassert f(*g()) == True\n\n", "emb": null, "idx_generation": 460, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, target: int) -> bool:\n    \"\"\"\n    Given a number n and a target, check if the number n is divisible by the target and the product of its digits is equal to the target value.\n    If both conditions are met, return True. Otherwise, return False.\n    \"\"\"\n    if target == 0:\n        return False\n    \n    digit_product = 1\n    for digit in str(n):\n        digit_product *= int(digit)\n    \n    return n % target == 0 and digit_product == target", "solution_func": "def g():\n    return 36, 9", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a grid where the sum of each row, each column, and both diagonals are equal.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    target_sum = sum(arr[0])\n    \n    # Check rows\n    for row in arr:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for i in range(n):\n        col_sum = 0\n        for j in range(n):\n            col_sum += arr[j][i]\n        if col_sum != target_sum:\n            return False\n    \n    # Check diagonal 1\n    diag1_sum = 0\n    for i in range(n):\n        diag1_sum += arr[i][i]\n    if diag1_sum != target_sum:\n        return False\n    \n    # Check diagonal 2\n    diag2_sum = 0\n    for i in range(n):\n        diag2_sum += arr[i][n-i-1]\n    if diag2_sum != target_sum:\n        return False\n    \n    return True\n\ndef g(arr: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return arr\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 461, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a grid where the sum of each row, each column, and both diagonals are equal.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    target_sum = sum(arr[0])\n    \n    # Check rows\n    for row in arr:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for i in range(n):\n        col_sum = 0\n        for j in range(n):\n            col_sum += arr[j][i]\n        if col_sum != target_sum:\n            return False\n    \n    # Check diagonal 1\n    diag1_sum = 0\n    for i in range(n):\n        diag1_sum += arr[i][i]\n    if diag1_sum != target_sum:\n        return False\n    \n    # Check diagonal 2\n    diag2_sum = 0\n    for i in range(n):\n        diag2_sum += arr[i][n-i-1]\n    if diag2_sum != target_sum:\n        return False\n    \n    return True", "solution_func": "def g(arr: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of numbers `nums` and a target value, find the number of subarrays whose sum is equal to the target value.\n\n    For example, if nums = [1, 2, 3, 4, 5] and target = 10, there are 2 subarrays ([1, 2, 3, 4] and [4, 5]) whose sum is equal to the target value.\n\n    Return the count of such subarrays.\n    \"\"\"\n    count = 0\n    for i in range(len(nums)):\n        curr_sum = 0\n        for j in range(i, len(nums)):\n            curr_sum += nums[j]\n            if curr_sum == target:\n                count += 1\n    return count\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 10):\n    return (nums, target)\n\nassert f(*g()) == 2\n\n", "emb": null, "idx_generation": 461, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of numbers `nums` and a target value, find the number of subarrays whose sum is equal to the target value.\n\n    For example, if nums = [1, 2, 3, 4, 5] and target = 10, there are 2 subarrays ([1, 2, 3, 4] and [4, 5]) whose sum is equal to the target value.\n\n    Return the count of such subarrays.\n    \"\"\"\n    count = 0\n    for i in range(len(nums)):\n        curr_sum = 0\n        for j in range(i, len(nums)):\n            curr_sum += nums[j]\n            if curr_sum == target:\n                count += 1\n    return count", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 10):\n    return (nums, target)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n\n    A magic square is a grid where the sum of all elements in each row, column, and both diagonals is equal and each number from 1 to n^2 (where n is the size of the grid) is used exactly once.\n\n    Sample Input:\n    arr = [[16, 3, 2, 13], [5, 10, 11, 8], [9, 6, 7, 12], [4, 15, 14, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    target_sum = n * (n**2 + 1) // 2\n\n    # Check rows\n    for row in arr:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for i in range(n):\n        col_sum = 0\n        for j in range(n):\n            col_sum += arr[j][i]\n        if col_sum != target_sum:\n            return False\n\n    # Check diagonal 1\n    diag1_sum = 0\n    for i in range(n):\n        diag1_sum += arr[i][i]\n    if diag1_sum != target_sum:\n        return False\n\n    # Check diagonal 2\n    diag2_sum = 0\n    for i in range(n):\n        diag2_sum += arr[i][n - i - 1]\n    if diag2_sum != target_sum:\n        return False\n\n    # Check if all numbers from 1 to n^2 are used exactly once\n    nums = set()\n    for row in arr:\n        for num in row:\n            if num < 1 or num > n**2 or num in nums:\n                return False\n            nums.add(num)\n\n    return True\n\ndef g(arr: List[List[int]] = [[16, 3, 2, 13], [5, 10, 11, 8], [9, 6, 7, 12], [4, 15, 14, 1]]):\n    return arr\n\nassert f(g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 461, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n\n    A magic square is a grid where the sum of all elements in each row, column, and both diagonals is equal and each number from 1 to n^2 (where n is the size of the grid) is used exactly once.\n\n    Sample Input:\n    arr = [[16, 3, 2, 13], [5, 10, 11, 8], [9, 6, 7, 12], [4, 15, 14, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    target_sum = n * (n**2 + 1) // 2\n\n    # Check rows\n    for row in arr:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for i in range(n):\n        col_sum = 0\n        for j in range(n):\n            col_sum += arr[j][i]\n        if col_sum != target_sum:\n            return False\n\n    # Check diagonal 1\n    diag1_sum = 0\n    for i in range(n):\n        diag1_sum += arr[i][i]\n    if diag1_sum != target_sum:\n        return False\n\n    # Check diagonal 2\n    diag2_sum = 0\n    for i in range(n):\n        diag2_sum += arr[i][n - i - 1]\n    if diag2_sum != target_sum:\n        return False\n\n    # Check if all numbers from 1 to n^2 are used exactly once\n    nums = set()\n    for row in arr:\n        for num in row:\n            if num < 1 or num > n**2 or num in nums:\n                return False\n            nums.add(num)\n\n    return True", "solution_func": "def g(arr: List[List[int]] = [[16, 3, 2, 13], [5, 10, 11, 8], [9, 6, 7, 12], [4, 15, 14, 1]]):\n    return arr", "map_ix": [1, 1, 0, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return the sum of each row in the matrix.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    [6, 15, 24]\n    \"\"\"\n    row_sum = []\n    for row in matrix:\n        row_sum.append(sum(row))\n    return row_sum\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [6, 15, 24]\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 461, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return the sum of each row in the matrix.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    [6, 15, 24]\n    \"\"\"\n    row_sum = []\n    for row in matrix:\n        row_sum.append(sum(row))\n    return row_sum", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [1, 1, 0, 1, 0, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return the sum of each column in the matrix.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    [12, 15, 18]\n    \"\"\"\n    column_sum = []\n    for j in range(len(matrix[0])):\n        col_sum = 0\n        for i in range(len(matrix)):\n            col_sum += matrix[i][j]\n        column_sum.append(col_sum)\n    return column_sum\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [12, 15, 18]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 461, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return the sum of each column in the matrix.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    [12, 15, 18]\n    \"\"\"\n    column_sum = []\n    for j in range(len(matrix[0])):\n        col_sum = 0\n        for i in range(len(matrix)):\n            col_sum += matrix[i][j]\n        column_sum.append(col_sum)\n    return column_sum", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix of integers, return the transpose of the matrix.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    [[1, 4, 7],\n     [2, 5, 8],\n     [3, 6, 9]]\n    \"\"\"\n    transpose = []\n    for j in range(len(matrix[0])):\n        trans_row = []\n        for i in range(len(matrix)):\n            trans_row.append(matrix[i][j])\n        transpose.append(trans_row)\n    return transpose\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 461, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix of integers, return the transpose of the matrix.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    [[1, 4, 7],\n     [2, 5, 8],\n     [3, 6, 9]]\n    \"\"\"\n    transpose = []\n    for j in range(len(matrix[0])):\n        trans_row = []\n        for i in range(len(matrix)):\n            trans_row.append(matrix[i][j])\n        transpose.append(trans_row)\n    return transpose", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if there exists a subarray (contiguous elements) whose sum is equal to the target.\n\n    Sample Input:\n    nums = [2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n\n    Explanation:\n    The subarray [2, 3, 4] has a sum of 9.\n    \"\"\"\n    n = len(nums)\n    prefix_sum = 0\n    prefix_sums = {0}\n    for i in range(n):\n        prefix_sum += nums[i]\n        if prefix_sum == target:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\n\ndef g(nums: List[int] = [2, 3, 4, 5], target: int = 9):\n    return (nums, target)\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 461, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if there exists a subarray (contiguous elements) whose sum is equal to the target.\n\n    Sample Input:\n    nums = [2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n\n    Explanation:\n    The subarray [2, 3, 4] has a sum of 9.\n    \"\"\"\n    n = len(nums)\n    prefix_sum = 0\n    prefix_sums = {0}\n    for i in range(n):\n        prefix_sum += nums[i]\n        if prefix_sum == target:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False", "solution_func": "def g(nums: List[int] = [2, 3, 4, 5], target: int = 9):\n    return (nums, target)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, determine if there exists a subarray (contiguous elements) where the sum of the subarray's elements is equal to 0.\n\n    Sample Input:\n    nums = [2, -3, 4, -5]\n\n    Sample Output:\n    True\n\n    Explanation:\n    The subarray [-3, 4, -5] has a sum of 0.\n    \"\"\"\n    n = len(nums)\n    prefix_sum = 0\n    prefix_sums = {0}\n    for i in range(n):\n        prefix_sum += nums[i]\n        if prefix_sum in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\n\ndef g(nums: List[int] = [2, -3, 4, -5]):\n    return (nums,)\n\nassert f(*g()) == True\n\n", "emb": null, "idx_generation": 461, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, determine if there exists a subarray (contiguous elements) where the sum of the subarray's elements is equal to 0.\n\n    Sample Input:\n    nums = [2, -3, 4, -5]\n\n    Sample Output:\n    True\n\n    Explanation:\n    The subarray [-3, 4, -5] has a sum of 0.\n    \"\"\"\n    n = len(nums)\n    prefix_sum = 0\n    prefix_sums = {0}\n    for i in range(n):\n        prefix_sum += nums[i]\n        if prefix_sum in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False", "solution_func": "def g(nums: List[int] = [2, -3, 4, -5]):\n    return (nums,)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, determine if there exists a subarray (contiguous elements) where the product of the subarray's elements is equal to 0.\n\n    Sample Input:\n    nums = [2, 0, 4, -5]\n\n    Sample Output:\n    True\n\n    Explanation:\n    The subarray [2, 0] has a product of 0.\n    \"\"\"\n    n = len(nums)\n    prefix_product = 1\n    prefix_products = {1}\n    for i in range(n):\n        prefix_product *= nums[i]\n        if prefix_product == 0:\n            return True\n        prefix_products.add(prefix_product)\n    return False\n\ndef g(nums: List[int] = [2, 0, 4, -5]):\n    return (nums,)\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 461, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, determine if there exists a subarray (contiguous elements) where the product of the subarray's elements is equal to 0.\n\n    Sample Input:\n    nums = [2, 0, 4, -5]\n\n    Sample Output:\n    True\n\n    Explanation:\n    The subarray [2, 0] has a product of 0.\n    \"\"\"\n    n = len(nums)\n    prefix_product = 1\n    prefix_products = {1}\n    for i in range(n):\n        prefix_product *= nums[i]\n        if prefix_product == 0:\n            return True\n        prefix_products.add(prefix_product)\n    return False", "solution_func": "def g(nums: List[int] = [2, 0, 4, -5]):\n    return (nums,)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if there exist two distinct indices i and j in the list\n    such that nums[i] + nums[j] == target.\n\n    Example:\n    lst = [2, 7, 11, 15]\n    target = 9\n\n    Output:\n    True\n    \"\"\"\n    seen = set()\n    for num in lst:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(lst=[2, 7, 11, 15], target=9):\n    return lst, target\n\nassert f(*g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 461, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if there exist two distinct indices i and j in the list\n    such that nums[i] + nums[j] == target.\n\n    Example:\n    lst = [2, 7, 11, 15]\n    target = 9\n\n    Output:\n    True\n    \"\"\"\n    seen = set()\n    for num in lst:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(lst=[2, 7, 11, 15], target=9):\n    return lst, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum difference between two consecutive elements in the list.\n\n    Sample Input:\n    [1, 5, 3, 9, 2]\n\n    Sample Output:\n    6\n\n    The maximum difference between consecutive elements is 6, which occurs between 5 and 3.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(nums) - 1):\n        diff = abs(nums[i] - nums[i+1])\n        max_diff = max(max_diff, diff)\n    return max_diff\n\ndef g(nums: List[int] = [1, 5, 3, 9, 2]):\n    return nums\n\nassert f(g()) == 6\n\n", "emb": null, "idx_generation": 462, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum difference between two consecutive elements in the list.\n\n    Sample Input:\n    [1, 5, 3, 9, 2]\n\n    Sample Output:\n    6\n\n    The maximum difference between consecutive elements is 6, which occurs between 5 and 3.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(nums) - 1):\n        diff = abs(nums[i] - nums[i+1])\n        max_diff = max(max_diff, diff)\n    return max_diff", "solution_func": "def g(nums: List[int] = [1, 5, 3, 9, 2]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list is a palindrome.\n\n    Sample Input:\n    [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n\n    The list is a palindrome as it reads the same forwards and backwards.\n    \"\"\"\n    reversed_nums = nums[::-1]\n    return nums == reversed_nums\n\ndef g(nums: List[int] = [1, 2, 3, 2, 1]):\n    return nums\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 462, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list is a palindrome.\n\n    Sample Input:\n    [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n\n    The list is a palindrome as it reads the same forwards and backwards.\n    \"\"\"\n    reversed_nums = nums[::-1]\n    return nums == reversed_nums", "solution_func": "def g(nums: List[int] = [1, 2, 3, 2, 1]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, remove all duplicates and return a new list with unique elements.\n\n    Sample Input:\n    [1, 2, 3, 2, 4, 5, 1, 3]\n\n    Sample Output:\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    unique_nums = list(set(nums))\n    return unique_nums\n\ndef g(nums: List[int] = [1, 2, 3, 2, 4, 5, 1, 3]):\n    return nums\n\nassert f(g()) == [1, 2, 3, 4, 5]\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 462, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, remove all duplicates and return a new list with unique elements.\n\n    Sample Input:\n    [1, 2, 3, 2, 4, 5, 1, 3]\n\n    Sample Output:\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    unique_nums = list(set(nums))\n    return unique_nums", "solution_func": "def g(nums: List[int] = [1, 2, 3, 2, 4, 5, 1, 3]):\n    return nums", "map_ix": [1, 1, 0, 1, 0, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"Check if a string s can be formed by concatenating multiple occurrences of another string t.\"\"\"\n    if len(s) % len(t) != 0:\n        return False\n    n = len(t)\n    for i in range(0, len(s), n):\n        if s[i:i+n] != t:\n            return False\n    return True\n\ndef g():\n    return (\"abcabcabc\", \"abc\")\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 462, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"Check if a string s can be formed by concatenating multiple occurrences of another string t.\"\"\"\n    if len(s) % len(t) != 0:\n        return False\n    n = len(t)\n    for i in range(0, len(s), n):\n        if s[i:i+n] != t:\n            return False\n    return True", "solution_func": "def g():\n    return (\"abcabcabc\", \"abc\")", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"Find the maximum subarray sum of a given list of integers.\"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n\ndef g():\n    return [1, -2, 3, 4, -1, 2, 1, -5, 4]\n\nassert f(g()) == 10\n\n", "emb": null, "idx_generation": 462, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"Find the maximum subarray sum of a given list of integers.\"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "solution_func": "def g():\n    return [1, -2, 3, 4, -1, 2, 1, -5, 4]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"Given a matrix, transpose it by swapping its rows and columns.\"\"\"\n    transposed = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n    return transposed\n\ndef g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\nassert f(g()) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 462, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"Given a matrix, transpose it by swapping its rows and columns.\"\"\"\n    transposed = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n    return transposed", "solution_func": "def g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(lst: List[List[int]], target=100) -> bool:\n    \"\"\"Check if the sum of any three numbers in the list is equal to the target.\"\"\"\n    return any(lst[i] + lst[j] + lst[k] == target for i in range(len(lst)) for j in range(i+1, len(lst)) for k in range(j+1, len(lst)))\ndef g(target=100):\n    return [[10, 20, 30], [40, 50, 60], [70, 80, 90], [100, 110, 120]]\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 462, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[List[int]], target=100) -> bool:\n    \"\"\"Check if the sum of any three numbers in the list is equal to the target.\"\"\"\n    return any(lst[i] + lst[j] + lst[k] == target for i in range(len(lst)) for j in range(i+1, len(lst)) for k in range(j+1, len(lst)))", "solution_func": "def g(target=100):\n    return [[10, 20, 30], [40, 50, 60], [70, 80, 90], [100, 110, 120]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"\n    Given a list of integers and given an integer n, determine if there is a subsequence of the list\n    whose sum is equal to n.\n    \"\"\"\n    return any(sum(nums[i:j]) == n for i in range(len(nums)) for j in range(i+1, len(nums)+1))\ndef g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return 25\nassert f(g()) == False\n\n", "emb": null, "idx_generation": 462, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"\n    Given a list of integers and given an integer n, determine if there is a subsequence of the list\n    whose sum is equal to n.\n    \"\"\"\n    return any(sum(nums[i:j]) == n for i in range(len(nums)) for j in range(i+1, len(nums)+1))", "solution_func": "def g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return 25", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[int], target=0) -> bool:\n    \"\"\"Check if the difference of any two numbers in the list is equal to the target.\"\"\"\n    return any(lst[i] - lst[j] == target for i in range(len(lst)) for j in range(i+1, len(lst)))\ndef g(target=0):\n    return [10, 20, 30, 40, 50]\nassert f(g()) == False\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 462, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], target=0) -> bool:\n    \"\"\"Check if the difference of any two numbers in the list is equal to the target.\"\"\"\n    return any(lst[i] - lst[j] == target for i in range(len(lst)) for j in range(i+1, len(lst)))", "solution_func": "def g(target=0):\n    return [10, 20, 30, 40, 50]", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist three numbers in the list whose sum is equal to the target number.\n    \"\"\"\n    for i in range(len(numbers)-2):\n        for j in range(i+1, len(numbers)-1):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], 28\n\nassert f(*g()) == True\n", "emb": null, "idx_generation": 462, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist three numbers in the list whose sum is equal to the target number.\n    \"\"\"\n    for i in range(len(numbers)-2):\n        for j in range(i+1, len(numbers)-1):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False", "solution_func": "def g():\n    return [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], 28", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of numbers `nums` and a target number `target`, find all pairs of numbers in `nums`\n    such that their sum is equal to the target number.\n\n    For example, if nums = [1, 2, 3, 4, 5] and target = 7, the pairs (2, 5) and (3, 4) sum up to the target number.\n    \"\"\"\n    pairs = []\n    num_set = set()\n    \n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            pairs.append((complement, num))\n        num_set.add(num)\n    \n    return pairs\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return (nums, target)\n\nassert f(*g()) == [(2, 5), (3, 4)]\n", "emb": null, "idx_generation": 463, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of numbers `nums` and a target number `target`, find all pairs of numbers in `nums`\n    such that their sum is equal to the target number.\n\n    For example, if nums = [1, 2, 3, 4, 5] and target = 7, the pairs (2, 5) and (3, 4) sum up to the target number.\n    \"\"\"\n    pairs = []\n    num_set = set()\n    \n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            pairs.append((complement, num))\n        num_set.add(num)\n    \n    return pairs", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return (nums, target)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of numbers `nums`, return a new list containing only the unique elements in `nums`\n    while preserving the original order.\n\n    Example:\n    nums = [1, 2, 3, 2, 4, 1, 5]\n\n    Output:\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    unique_nums = []\n    num_set = set()\n    \n    for num in nums:\n        if num not in num_set:\n            unique_nums.append(num)\n            num_set.add(num)\n    \n    return unique_nums\n\ndef g(nums: List[int] = [1, 2, 3, 2, 4, 1, 5]):\n    return (nums,)\n\nassert f(*g()) == [1, 2, 3, 4, 5]\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 463, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of numbers `nums`, return a new list containing only the unique elements in `nums`\n    while preserving the original order.\n\n    Example:\n    nums = [1, 2, 3, 2, 4, 1, 5]\n\n    Output:\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    unique_nums = []\n    num_set = set()\n    \n    for num in nums:\n        if num not in num_set:\n            unique_nums.append(num)\n            num_set.add(num)\n    \n    return unique_nums", "solution_func": "def g(nums: List[int] = [1, 2, 3, 2, 4, 1, 5]):\n    return (nums,)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int) -> int:\n    \"\"\"\n    Given a positive integer `n`, return the sum of all the multiples of 3 or 5 below `n`.\n\n    Example:\n    n = 10\n\n    Output:\n    23  # Multiples of 3 or 5 below 10 are: 3, 5, 6, 9\n    \"\"\"\n    multiples = []\n    for i in range(1, n):\n        if i % 3 == 0 or i % 5 == 0:\n            multiples.append(i)\n    \n    return sum(multiples)\n\ndef g(n: int = 10):\n    return (n,)\n\nassert f(*g()) == 23\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 463, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int) -> int:\n    \"\"\"\n    Given a positive integer `n`, return the sum of all the multiples of 3 or 5 below `n`.\n\n    Example:\n    n = 10\n\n    Output:\n    23  # Multiples of 3 or 5 below 10 are: 3, 5, 6, 9\n    \"\"\"\n    multiples = []\n    for i in range(1, n):\n        if i % 3 == 0 or i % 5 == 0:\n            multiples.append(i)\n    \n    return sum(multiples)", "solution_func": "def g(n: int = 10):\n    return (n,)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=50, k=2) -> bool:\n    \"\"\"Check if there are k distinct numbers in the list that sum up to the target value\"\"\"\n    def k_sum(nums, target, k):\n        if k == 0 and target == 0:\n            return True\n        if k <= 0 or target <= 0 or not nums:\n            return False\n        return k_sum(nums[1:], target - nums[0], k - 1) or k_sum(nums[1:], target, k)\n    return k_sum(nums, target, k)\n\ndef g(target=50, k=2):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 463, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=50, k=2) -> bool:\n    \"\"\"Check if there are k distinct numbers in the list that sum up to the target value\"\"\"\n    def k_sum(nums, target, k):\n        if k == 0 and target == 0:\n            return True\n        if k <= 0 or target <= 0 or not nums:\n            return False\n        return k_sum(nums[1:], target - nums[0], k - 1) or k_sum(nums[1:], target, k)\n    return k_sum(nums, target, k)", "solution_func": "def g(target=50, k=2):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(path: List[int], weights=[{1: 100}, {0: 200, 2: 300}, {2: 400, 0: 500, 3: 600}, {}], bound=100) -> bool:\n    \"\"\"\n    Find a path from node 0 to node 1, of length at most bound, in the given digraph.\n    weights[a][b] is weight on edge [a,b] for (int) nodes a, b\n    \"\"\"\n    return path[0] == 0 and path[-1] == 1 and (sum((weights[a][b] for (a, b) in zip(path, path[1:]))) <= bound)\ndef g(weights = [{1: 100}, {0: 200, 2: 300}, {2: 400, 0: 500, 3: 600}, {}], bound = 100):\n    # Dijkstra's algorithm (bound is ignored)\n    u, v = 0, 1  # go from 0 to 1\n    import heapq\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in weights[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + weights[i][j], j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]\nassert f(g())\n", "emb": [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 463, "target_skills": null, "problem_func": "from typing import*\ndef f(path: List[int], weights=[{1: 100}, {0: 200, 2: 300}, {2: 400, 0: 500, 3: 600}, {}], bound=100) -> bool:\n    \"\"\"\n    Find a path from node 0 to node 1, of length at most bound, in the given digraph.\n    weights[a][b] is weight on edge [a,b] for (int) nodes a, b\n    \"\"\"\n    return path[0] == 0 and path[-1] == 1 and (sum((weights[a][b] for (a, b) in zip(path, path[1:]))) <= bound)", "solution_func": "def g(weights = [{1: 100}, {0: 200, 2: 300}, {2: 400, 0: 500, 3: 600}, {}], bound = 100):\n    # Dijkstra's algorithm (bound is ignored)\n    u, v = 0, 1  # go from 0 to 1\n    import heapq\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in weights[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + weights[i][j], j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]", "map_ix": [0, 0, 1, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=2, b=3) -> bool:\n    \"\"\"Check if n is divisible by a or b\"\"\"\n    return n % a == 0 or n % b == 0\ndef g(a = 2, b = 3):\n    return a * b\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 463, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=2, b=3) -> bool:\n    \"\"\"Check if n is divisible by a or b\"\"\"\n    return n % a == 0 or n % b == 0", "solution_func": "def g(a = 2, b = 3):\n    return a * b", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list is palindrome.\n    Return True if the list is palindrome, False otherwise.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 4, 3, 2, 1]):\n    return nums\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 463, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list is palindrome.\n    Return True if the list is palindrome, False otherwise.\n    \"\"\"\n    return nums == nums[::-1]", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 4, 3, 2, 1]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, calculate the sum of all even numbers in the list.\n    Return the sum of the even numbers.\n    \"\"\"\n    return sum(num for num in nums if num % 2 == 0)\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g()) == 30\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 463, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, calculate the sum of all even numbers in the list.\n    Return the sum of the even numbers.\n    \"\"\"\n    return sum(num for num in nums if num % 2 == 0)", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, remove all duplicate numbers and return the list with unique numbers.\n    The order of the unique numbers should be the same as the original list.\n    \"\"\"\n    return list(set(nums))\n\ndef g(nums: List[int] = [1, 2, 2, 3, 4, 4, 5, 5, 6]):\n    return nums\n\nassert f(g()) == [1, 2, 3, 4, 5, 6]\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 463, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, remove all duplicate numbers and return the list with unique numbers.\n    The order of the unique numbers should be the same as the original list.\n    \"\"\"\n    return list(set(nums))", "solution_func": "def g(nums: List[int] = [1, 2, 2, 3, 4, 4, 5, 5, 6]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target k, check if there exist two numbers in the list whose sum is equal to k.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    k = 12\n\n    Sample Output:\n    True\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = k - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 12\n\nassert f(*g()) == True\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0], "idx_generation": 463, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target k, check if there exist two numbers in the list whose sum is equal to k.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    k = 12\n\n    Sample Output:\n    True\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = k - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 12", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 1]}, {"fitness": -Infinity, "program_str": "import math\nfrom typing import*\n\ndef f(n: int, a=9, b=30, c=20) -> bool:\n    \"\"\"\n    Given an integer n, check if it is a perfect square and if it satisfies the equation n + a == b * (the sum of the first c integers)\n\n    Sample Input:\n    n = 361\n    a = 9\n    b = 30\n    c = 20\n\n    Sample Output:\n    True\n    \"\"\"\n    if math.isqrt(n) ** 2 != n:\n        return False\n\n    return n + a == sum([b * i for i in range(c)])\n\ndef g(a = 9, b = 30, c = 20):\n    return (a * c) ** 2\n\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 464, "target_skills": null, "problem_func": "import math\nfrom typing import*\n\ndef f(n: int, a=9, b=30, c=20) -> bool:\n    \"\"\"\n    Given an integer n, check if it is a perfect square and if it satisfies the equation n + a == b * (the sum of the first c integers)\n\n    Sample Input:\n    n = 361\n    a = 9\n    b = 30\n    c = 20\n\n    Sample Output:\n    True\n    \"\"\"\n    if math.isqrt(n) ** 2 != n:\n        return False\n\n    return n + a == sum([b * i for i in range(c)])", "solution_func": "def g(a = 9, b = 30, c = 20):\n    return (a * c) ** 2", "map_ix": null}, {"fitness": 1.0, "program_str": "import random\nfrom typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are three distinct indices i, j, and k in the list such that the sum of nums[i], nums[j], and nums[k] is equal to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(nums)\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (nums, target)\n\nassert f(*g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 464, "target_skills": null, "problem_func": "import random\nfrom typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are three distinct indices i, j, and k in the list such that the sum of nums[i], nums[j], and nums[k] is equal to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(nums)\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (nums, target)", "map_ix": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if it is a symmetric matrix.\n    A matrix is symmetric if it is equal to its transpose.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\n    Sample Output:\n    False\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    if rows != cols:\n        return False\n\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g()) == False\n\n", "emb": null, "idx_generation": 464, "target_skills": null, "problem_func": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if it is a symmetric matrix.\n    A matrix is symmetric if it is equal to its transpose.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\n    Sample Output:\n    False\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    if rows != cols:\n        return False\n\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]], target=3) -> bool:\n    \"\"\"Find the number of points that are inside a circle centered at the origin with radius 5.\"\"\"\n    return sum((x ** 2 + y ** 2) <= 25 for x, y in points) == target\ndef g(target=3):\n    return [(x, y) for x in range(-5, 6) for y in range(-5, 6)]\nassert f(g()) == True\n", "emb": null, "idx_generation": 464, "target_skills": null, "problem_func": "from typing import*\ndef f(points: List[Tuple[int, int]], target=3) -> bool:\n    \"\"\"Find the number of points that are inside a circle centered at the origin with radius 5.\"\"\"\n    return sum((x ** 2 + y ** 2) <= 25 for x, y in points) == target", "solution_func": "def g(target=3):\n    return [(x, y) for x in range(-5, 6) for y in range(-5, 6)]", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers that sums up to the target value.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for r in range(1, len(numbers) + 1) for comb in combinations(numbers, r))\ndef g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g()) == True\n", "emb": null, "idx_generation": 464, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers that sums up to the target value.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for r in range(1, len(numbers) + 1) for comb in combinations(numbers, r))", "solution_func": "def g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Find a row in the matrix that contains all the numbers from 1 to 9.\"\"\"\n    return any(set(row) == set(range(1, 10)) for row in matrix)\ndef g(target=15):\n    return [[1, 2, 3, 4, 5, 6, 7, 8, 9], [9, 8, 7, 6, 5, 4, 3, 2, 1], [5, 6, 7, 8, 9, 1, 2, 3, 4]]\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 464, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Find a row in the matrix that contains all the numbers from 1 to 9.\"\"\"\n    return any(set(row) == set(range(1, 10)) for row in matrix)", "solution_func": "def g(target=15):\n    return [[1, 2, 3, 4, 5, 6, 7, 8, 9], [9, 8, 7, 6, 5, 4, 3, 2, 1], [5, 6, 7, 8, 9, 1, 2, 3, 4]]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose sum is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 6):\n    return nums, target\n\nassert f(*g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 464, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose sum is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 6):\n    return nums, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n: int) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose sum is divisible by n.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if (n - num % n) in num_set:\n            return True\n        num_set.add(num % n)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], n: int = 3):\n    return nums, n\n\nassert f(*g()) == True\n\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 464, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n: int) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose sum is divisible by n.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if (n - num % n) in num_set:\n            return True\n        num_set.add(num % n)\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], n: int = 3):\n    return nums, n", "map_ix": [1, 0, 1, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose product is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target % num == 0 and target // num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 6):\n    return nums, target\n\nassert f(*g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 464, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose product is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target % num == 0 and target // num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 6):\n    return nums, target", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix, rotate it 90 degrees counterclockwise.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    The matrix after rotating 90 degrees counterclockwise is:\n    [[3, 6, 9], [2, 5, 8], [1, 4, 7]]\n    Therefore, f(matrix) returns [[3, 6, 9], [2, 5, 8], [1, 4, 7]].\n    \"\"\"\n    n = len(matrix)\n    rotated_matrix = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        for j in range(n):\n            rotated_matrix[i][j] = matrix[j][n - i - 1]\n\n    return rotated_matrix\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [[3, 6, 9], [2, 5, 8], [1, 4, 7]]\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 464, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix, rotate it 90 degrees counterclockwise.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    The matrix after rotating 90 degrees counterclockwise is:\n    [[3, 6, 9], [2, 5, 8], [1, 4, 7]]\n    Therefore, f(matrix) returns [[3, 6, 9], [2, 5, 8], [1, 4, 7]].\n    \"\"\"\n    n = len(matrix)\n    rotated_matrix = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        for j in range(n):\n            rotated_matrix[i][j] = matrix[j][n - i - 1]\n\n    return rotated_matrix", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [1, 0, 0, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, find the sum of all the elements in the matrix.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    45\n    \"\"\"\n    total_sum = 0\n    for row in matrix:\n        for num in row:\n            total_sum += num\n    return total_sum\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 45\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 465, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, find the sum of all the elements in the matrix.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    45\n    \"\"\"\n    total_sum = 0\n    for row in matrix:\n        for num in row:\n            total_sum += num\n    return total_sum", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if it is a symmetric matrix.\n\n    Sample Input:\n    [[1, 2, 3],\n     [2, 4, 5],\n     [3, 5, 6]]\n\n    Sample Output:\n    False\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g()) == False\n\n", "emb": null, "idx_generation": 465, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if it is a symmetric matrix.\n\n    Sample Input:\n    [[1, 2, 3],\n     [2, 4, 5],\n     [3, 5, 6]]\n\n    Sample Output:\n    False\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return a list containing the diagonal elements of the matrix.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    [1, 5, 9]\n    \"\"\"\n    n = len(matrix)\n    diagonal_elements = []\n    for i in range(n):\n        diagonal_elements.append(matrix[i][i])\n    return diagonal_elements\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [1, 5, 9]\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 465, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return a list containing the diagonal elements of the matrix.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    [1, 5, 9]\n    \"\"\"\n    n = len(matrix)\n    diagonal_elements = []\n    for i in range(n):\n        diagonal_elements.append(matrix[i][i])\n    return diagonal_elements", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that sums up to the target value.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g(), target=10) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 465, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that sums up to the target value.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 465, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g():\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains duplicate elements.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 1]\n\nassert f(g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 465, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains duplicate elements.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 1]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target number, determine the number of subarrays whose sum is equal to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    2\n\n    Explanation:\n    The subarrays [2, 3, 4] and [4, 5] have a sum of 9.\n    \"\"\"\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if sum(nums[i:j+1]) == target:\n                count += 1\n    return count\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (nums, target)\n\nassert f(*g()) == 2\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 465, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target number, determine the number of subarrays whose sum is equal to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    2\n\n    Explanation:\n    The subarrays [2, 3, 4] and [4, 5] have a sum of 9.\n    \"\"\"\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if sum(nums[i:j+1]) == target:\n                count += 1\n    return count", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (nums, target)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the prime numbers in the original list.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return [num for num in nums if is_prime(num)]\n\ndef g():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return (nums,)\n\nassert f(*g()) == [2, 3, 5, 7]\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 465, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the prime numbers in the original list.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return [num for num in nums if is_prime(num)]", "solution_func": "def g():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return (nums,)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the number of times the maximum number appears in the list.\n    \"\"\"\n    max_num = max(nums)\n    count = 0\n    for num in nums:\n        if num == max_num:\n            count += 1\n    return count\n\ndef g():\n    nums = [1, 2, 3, 4, 5, 5, 4, 3, 2, 1]\n    return (nums,)\n\nassert f(*g()) == 2\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 465, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the number of times the maximum number appears in the list.\n    \"\"\"\n    max_num = max(nums)\n    count = 0\n    for num in nums:\n        if num == max_num:\n            count += 1\n    return count", "solution_func": "def g():\n    nums = [1, 2, 3, 4, 5, 5, 4, 3, 2, 1]\n    return (nums,)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist three numbers in the list whose sum is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            for k in range(j + 1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 17\n\nassert f(*g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 465, "target_skills": null, "problem_func": "from typing import*\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist three numbers in the list whose sum is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            for k in range(j + 1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 17", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Two Sum\n\n    Given a list of integers and a target value, find two numbers in the list that add up to the target.\n    Return the indices of the two numbers.\n\n    Example:\n    nums = [2, 7, 11, 15]\n    target = 9\n\n    Output: [0, 1]\n\n    Explanation: The numbers at indices 0 and 1 (2 and 7) add up to 9.\n    \"\"\"\n    seen = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in seen:\n            return [seen[complement], i]\n        seen[num] = i\n    return []\n\ndef g(nums: List[int] = [2, 7, 11, 15], target: int = 9):\n    return (nums, target)\n\nassert f(*g()) == [0, 1]\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 466, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Two Sum\n\n    Given a list of integers and a target value, find two numbers in the list that add up to the target.\n    Return the indices of the two numbers.\n\n    Example:\n    nums = [2, 7, 11, 15]\n    target = 9\n\n    Output: [0, 1]\n\n    Explanation: The numbers at indices 0 and 1 (2 and 7) add up to 9.\n    \"\"\"\n    seen = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in seen:\n            return [seen[complement], i]\n        seen[num] = i\n    return []", "solution_func": "def g(nums: List[int] = [2, 7, 11, 15], target: int = 9):\n    return (nums, target)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, k: int) -> str:\n    \"\"\"\n    Rotate String\n\n    Given a string and an integer k, rotate the string to the right by k steps.\n\n    Example:\n    s = \"abcdefg\"\n    k = 3\n\n    Output: \"efgabcd\"\n\n    Explanation: The string is rotated right by 3 steps.\n    \"\"\"\n    k %= len(s)\n    return s[-k:] + s[:-k]\n\ndef g(s: str = \"abcdefg\", k: int = 3):\n    return (s, k)\n\nassert f(*g()) == \"efgabcd\"\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 466, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, k: int) -> str:\n    \"\"\"\n    Rotate String\n\n    Given a string and an integer k, rotate the string to the right by k steps.\n\n    Example:\n    s = \"abcdefg\"\n    k = 3\n\n    Output: \"efgabcd\"\n\n    Explanation: The string is rotated right by 3 steps.\n    \"\"\"\n    k %= len(s)\n    return s[-k:] + s[:-k]", "solution_func": "def g(s: str = \"abcdefg\", k: int = 3):\n    return (s, k)", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Maximum Subarray Sum\n\n    Given an integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\n\n    Example:\n    nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\n    Output: 6\n\n    Explanation: The subarray [4, -1, 2, 1] has the largest sum of 6.\n    \"\"\"\n    curr_sum = max_sum = nums[0]\n    for num in nums[1:]:\n        curr_sum = max(num, curr_sum + num)\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n\ndef g(nums: List[int] = [-2, 1, -3, 4, -1, 2, 1, -5, 4]):\n    return (nums,)\n\nassert f(*g()) == 6\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 466, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Maximum Subarray Sum\n\n    Given an integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\n\n    Example:\n    nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\n    Output: 6\n\n    Explanation: The subarray [4, -1, 2, 1] has the largest sum of 6.\n    \"\"\"\n    curr_sum = max_sum = nums[0]\n    for num in nums[1:]:\n        curr_sum = max(num, curr_sum + num)\n        max_sum = max(max_sum, curr_sum)\n    return max_sum", "solution_func": "def g(nums: List[int] = [-2, 1, -3, 4, -1, 2, 1, -5, 4]):\n    return (nums,)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of numbers `nums` and a target number `target`, find the number of pairs of numbers in `nums`\n    such that their sum is equal to the target number.\n\n    For example, if nums = [1, 2, 3, 4, 5] and target = 7, the pairs (2, 5) and (3, 4) sum up to the target number,\n    so the output should be 2.\n    \"\"\"\n    num_set = set()\n    count = 0\n    for num in nums:\n        if target - num in num_set:\n            count += 1\n        num_set.add(num)\n    return count\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return (nums, target)\n\nassert f(*g()) == 2\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 466, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of numbers `nums` and a target number `target`, find the number of pairs of numbers in `nums`\n    such that their sum is equal to the target number.\n\n    For example, if nums = [1, 2, 3, 4, 5] and target = 7, the pairs (2, 5) and (3, 4) sum up to the target number,\n    so the output should be 2.\n    \"\"\"\n    num_set = set()\n    count = 0\n    for num in nums:\n        if target - num in num_set:\n            count += 1\n        num_set.add(num)\n    return count", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return (nums, target)", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of numbers `nums`, find the next permutation in lexicographically increasing order.\n\n    For example, if nums = [1, 2, 3], the next permutation would be [1, 3, 2].\n    \"\"\"\n    n = len(nums)\n    i = n - 2\n    while i >= 0 and nums[i+1] <= nums[i]:\n        i -= 1\n    if i >= 0:\n        j = n - 1\n        while j >= 0 and nums[j] <= nums[i]:\n            j -= 1\n        nums[i], nums[j] = nums[j], nums[i]\n    nums[i+1:] = reversed(nums[i+1:])\n    return nums\n\ndef g(nums: List[int] = [1, 2, 3]):\n    return nums\n\nassert f(g()) == [1, 3, 2]\n\n", "emb": null, "idx_generation": 466, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of numbers `nums`, find the next permutation in lexicographically increasing order.\n\n    For example, if nums = [1, 2, 3], the next permutation would be [1, 3, 2].\n    \"\"\"\n    n = len(nums)\n    i = n - 2\n    while i >= 0 and nums[i+1] <= nums[i]:\n        i -= 1\n    if i >= 0:\n        j = n - 1\n        while j >= 0 and nums[j] <= nums[i]:\n            j -= 1\n        nums[i], nums[j] = nums[j], nums[i]\n    nums[i+1:] = reversed(nums[i+1:])\n    return nums", "solution_func": "def g(nums: List[int] = [1, 2, 3]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of numbers `nums`, find the next greater permutation in lexicographically increasing order.\n\n    For example, if nums = [1, 2, 3], the next greater permutation would be [1, 3, 2].\n    \"\"\"\n    n = len(nums)\n    i = n - 2\n    while i >= 0 and nums[i+1] <= nums[i]:\n        i -= 1\n    if i >= 0:\n        j = n - 1\n        while j >= 0 and nums[j] <= nums[i]:\n            j -= 1\n        nums[i], nums[j] = nums[j], nums[i]\n    nums[i+1:] = reversed(nums[i+1:])\n    return nums\n\ndef g(nums: List[int] = [3, 2, 1]):\n    return nums\n\nassert f(g()) == [1, 2, 3]\n\n", "emb": null, "idx_generation": 466, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of numbers `nums`, find the next greater permutation in lexicographically increasing order.\n\n    For example, if nums = [1, 2, 3], the next greater permutation would be [1, 3, 2].\n    \"\"\"\n    n = len(nums)\n    i = n - 2\n    while i >= 0 and nums[i+1] <= nums[i]:\n        i -= 1\n    if i >= 0:\n        j = n - 1\n        while j >= 0 and nums[j] <= nums[i]:\n            j -= 1\n        nums[i], nums[j] = nums[j], nums[i]\n    nums[i+1:] = reversed(nums[i+1:])\n    return nums", "solution_func": "def g(nums: List[int] = [3, 2, 1]):\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(numbers: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of numbers, find two numbers that add up to the target value.\n\n    Example:\n    numbers = [2, 4, 6, 8]\n    target = 10\n\n    Output:\n    [2, 8]\n    \"\"\"\n    complement_map = {}\n    for i in range(len(numbers)):\n        complement = target - numbers[i]\n        if complement in complement_map:\n            return [complement_map[complement], i]\n        complement_map[numbers[i]] = i\n    return []\n\ndef g(target: int = 10):\n    return [2, 4, 6, 8]\n\nassert f(g(), target=10) == [2, 8]\n", "emb": null, "idx_generation": 466, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of numbers, find two numbers that add up to the target value.\n\n    Example:\n    numbers = [2, 4, 6, 8]\n    target = 10\n\n    Output:\n    [2, 8]\n    \"\"\"\n    complement_map = {}\n    for i in range(len(numbers)):\n        complement = target - numbers[i]\n        if complement in complement_map:\n            return [complement_map[complement], i]\n        complement_map[numbers[i]] = i\n    return []", "solution_func": "def g(target: int = 10):\n    return [2, 4, 6, 8]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if the target value exists in the matrix.\n\n    Example:\n    matrix = [\n        [1, 3, 5],\n        [7, 9, 11],\n        [13, 15, 17]\n    ]\n    target = 11\n\n    Output:\n    True\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return False\n    \n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    left = 0\n    right = rows * cols - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        row = mid // cols\n        col = mid % cols\n        \n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return False\n\ndef g(target: int = 11):\n    return [\n        [1, 3, 5],\n        [7, 9, 11],\n        [13, 15, 17]\n    ]\n\nassert f(g(), target=11) == True\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 466, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if the target value exists in the matrix.\n\n    Example:\n    matrix = [\n        [1, 3, 5],\n        [7, 9, 11],\n        [13, 15, 17]\n    ]\n    target = 11\n\n    Output:\n    True\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return False\n    \n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    left = 0\n    right = rows * cols - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        row = mid // cols\n        col = mid % cols\n        \n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return False", "solution_func": "def g(target: int = 11):\n    return [\n        [1, 3, 5],\n        [7, 9, 11],\n        [13, 15, 17]\n    ]", "map_ix": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, find the next greater element for each element in the list.\n\n    Example:\n    nums = [4, 5, 2, 1, 9, 8, 6, 7]\n    \n    Output:\n    [5, 9, 9, 9, -1, -1, 7, -1]\n    \"\"\"\n    stack = []\n    result = [-1] * len(nums)\n    \n    for i in range(len(nums)):\n        while stack and nums[i] > nums[stack[-1]]:\n            result[stack.pop()] = nums[i]\n        stack.append(i)\n    \n    return result\n\ndef g():\n    return [4, 5, 2, 1, 9, 8, 6, 7]\n\nassert f(g()) == [5, 9, 9, 9, -1, -1, 7, -1]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 466, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, find the next greater element for each element in the list.\n\n    Example:\n    nums = [4, 5, 2, 1, 9, 8, 6, 7]\n    \n    Output:\n    [5, 9, 9, 9, -1, -1, 7, -1]\n    \"\"\"\n    stack = []\n    result = [-1] * len(nums)\n    \n    for i in range(len(nums)):\n        while stack and nums[i] > nums[stack[-1]]:\n            result[stack.pop()] = nums[i]\n        stack.append(i)\n    \n    return result", "solution_func": "def g():\n    return [4, 5, 2, 1, 9, 8, 6, 7]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size.\n    \"\"\"\n    return [[0 if j > i else 1 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 466, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size.\n    \"\"\"\n    return [[0 if j > i else 1 for j in range(size)] for i in range(size)]", "map_ix": [1, 0, 1, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return a list containing the sum of each row.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    output: [6, 15, 24]\n    \"\"\"\n    row_sums = []\n    for row in matrix:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n    return row_sums\n\ndef g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\nassert f(g()) == [6, 15, 24]\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 467, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return a list containing the sum of each row.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    output: [6, 15, 24]\n    \"\"\"\n    row_sums = []\n    for row in matrix:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n    return row_sums", "solution_func": "def g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, find the maximum element in the matrix.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    output: 9\n    \"\"\"\n    max_element = float('-inf')\n    for row in matrix:\n        for num in row:\n            max_element = max(max_element, num)\n    return max_element\n\ndef g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\nassert f(g()) == 9\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 467, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, find the maximum element in the matrix.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    output: 9\n    \"\"\"\n    max_element = float('-inf')\n    for row in matrix:\n        for num in row:\n            max_element = max(max_element, num)\n    return max_element", "solution_func": "def g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return a list containing the sum of each column.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    output: [12, 15, 18]\n    \"\"\"\n    column_sums = []\n    for col in zip(*matrix):\n        col_sum = sum(col)\n        column_sums.append(col_sum)\n    return column_sums\n\ndef g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\nassert f(g()) == [12, 15, 18]\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 467, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return a list containing the sum of each column.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    output: [12, 15, 18]\n    \"\"\"\n    column_sums = []\n    for col in zip(*matrix):\n        col_sum = sum(col)\n        column_sums.append(col_sum)\n    return column_sums", "solution_func": "def g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import *\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given array is a palindrome.\n\n    Sample Input:\n    arr = [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 467, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given array is a palindrome.\n\n    Sample Input:\n    arr = [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return arr == arr[::-1]", "solution_func": "def g():\n    return [1, 2, 3, 2, 1]", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import *\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given array that sum up to the target number.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for num in arr:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(target: int = 7):\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), target=7) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 467, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given array that sum up to the target number.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for num in arr:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(target: int = 7):\n    return [1, 2, 3, 4, 5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import *\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of any contiguous subarray.\n\n    Sample Input:\n    arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\n    Sample Output:\n    6\n\n    Explanation: The contiguous subarray [4, -1, 2, 1] has the largest sum of 6.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in arr:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n\ndef g():\n    return [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\nassert f(g()) == 6\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 467, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of any contiguous subarray.\n\n    Sample Input:\n    arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\n    Sample Output:\n    6\n\n    Explanation: The contiguous subarray [4, -1, 2, 1] has the largest sum of 6.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in arr:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "solution_func": "def g():\n    return [-2, 1, -3, 4, -1, 2, 1, -5, 4]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport numpy as np\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n\n    A magic square is a square matrix where the sum of each row, each column, and both diagonals are equal.\n\n    Sample Input:\n    matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])  # Target sum for rows, columns, and diagonals\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for col in np.transpose(matrix):\n        if sum(col) != target_sum:\n            return False\n\n    # Check diagonal from top-left to bottom-right\n    diagonal1 = [matrix[i][i] for i in range(n)]\n    if sum(diagonal1) != target_sum:\n        return False\n\n    # Check diagonal from top-right to bottom-left\n    diagonal2 = [matrix[i][n-i-1] for i in range(n)]\n    if sum(diagonal2) != target_sum:\n        return False\n    \n    return True\n\ndef g(matrix: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 467, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n\n    A magic square is a square matrix where the sum of each row, each column, and both diagonals are equal.\n\n    Sample Input:\n    matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])  # Target sum for rows, columns, and diagonals\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for col in np.transpose(matrix):\n        if sum(col) != target_sum:\n            return False\n\n    # Check diagonal from top-left to bottom-right\n    diagonal1 = [matrix[i][i] for i in range(n)]\n    if sum(diagonal1) != target_sum:\n        return False\n\n    # Check diagonal from top-right to bottom-left\n    diagonal2 = [matrix[i][n-i-1] for i in range(n)]\n    if sum(diagonal2) != target_sum:\n        return False\n    \n    return True", "solution_func": "def g(matrix: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix", "map_ix": [1, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n\n    A palindrome is a list that reads the same forwards and backwards.\n\n    Sample Input:\n    lst = [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return lst == lst[::-1]\n\ndef g(lst: List[int] = [1, 2, 3, 2, 1]):\n    return lst\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 467, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n\n    A palindrome is a list that reads the same forwards and backwards.\n\n    Sample Input:\n    lst = [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return lst == lst[::-1]", "solution_func": "def g(lst: List[int] = [1, 2, 3, 2, 1]):\n    return lst", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[str]) -> bool:\n    \"\"\"\n    Check if the given list of strings is sorted in lexicographical order.\n\n    Sample Input:\n    lst = ['apple', 'banana', 'cherry', 'date']\n\n    Sample Output:\n    True\n    \"\"\"\n    return sorted(lst) == lst\n\ndef g(lst: List[str] = ['apple', 'banana', 'cherry', 'date']):\n    return lst\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 467, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(lst: List[str]) -> bool:\n    \"\"\"\n    Check if the given list of strings is sorted in lexicographical order.\n\n    Sample Input:\n    lst = ['apple', 'banana', 'cherry', 'date']\n\n    Sample Output:\n    True\n    \"\"\"\n    return sorted(lst) == lst", "solution_func": "def g(lst: List[str] = ['apple', 'banana', 'cherry', 'date']):\n    return lst", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: List[int], n=3, s=10) -> bool:\n    \"\"\"\n    Given a list of n integers, determine if there exists a sublist whose sum is equal to s.\n    \"\"\"\n    def subset_sum(arr, n, s):\n        if s == 0:\n            return True\n        if n == 0 and s != 0:\n            return False\n        if arr[n - 1] > s:\n            return subset_sum(arr, n - 1, s)\n        return subset_sum(arr, n - 1, s) or subset_sum(arr, n - 1, s - arr[n - 1])\n\n    return subset_sum(x, n, s)\n\n\ndef g(n=3, s=10):\n    x = [1, 2, 3, 4, 5]\n    return (x[:n], n, s)\n\n\nassert f(*g()) == True\n", "emb": null, "idx_generation": 467, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], n=3, s=10) -> bool:\n    \"\"\"\n    Given a list of n integers, determine if there exists a sublist whose sum is equal to s.\n    \"\"\"\n    def subset_sum(arr, n, s):\n        if s == 0:\n            return True\n        if n == 0 and s != 0:\n            return False\n        if arr[n - 1] > s:\n            return subset_sum(arr, n - 1, s)\n        return subset_sum(arr, n - 1, s) or subset_sum(arr, n - 1, s - arr[n - 1])\n\n    return subset_sum(x, n, s)", "solution_func": "def g(n=3, s=10):\n    x = [1, 2, 3, 4, 5]\n    return (x[:n], n, s)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target number, return a list of all numbers in the list that are divisible by the target.\n    The numbers in the output list should be in ascending order.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 2\n\n    Output:\n    [2, 4]\n\n    Explanation: The numbers [2, 4] in the list are divisible by the target number 2.\n    \"\"\"\n    divisible_nums = []\n    for num in nums:\n        if num % target == 0:\n            divisible_nums.append(num)\n    return sorted(divisible_nums)\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 2):\n    return (nums, target)\n\nassert f(*g()) == [2, 4]\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 468, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target number, return a list of all numbers in the list that are divisible by the target.\n    The numbers in the output list should be in ascending order.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 2\n\n    Output:\n    [2, 4]\n\n    Explanation: The numbers [2, 4] in the list are divisible by the target number 2.\n    \"\"\"\n    divisible_nums = []\n    for num in nums:\n        if num % target == 0:\n            divisible_nums.append(num)\n    return sorted(divisible_nums)", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 2):\n    return (nums, target)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, check if there exists a pair of numbers in the list whose sum is equal to the target.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Output:\n    True\n\n    Explanation: The numbers [4, 5] in the list can be combined to add up to the target number 9.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (nums, target)\n\nassert f(*g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 468, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, check if there exists a pair of numbers in the list whose sum is equal to the target.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Output:\n    True\n\n    Explanation: The numbers [4, 5] in the list can be combined to add up to the target number 9.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (nums, target)", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target number, count the number of pairs of numbers in the list whose sum is equal to the target.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Output:\n    1\n\n    Explanation: The numbers [4, 5] in the list can be combined to add up to the target number 9.\n    \"\"\"\n    count = 0\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            count += 1\n    return count\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (nums, target)\n\nassert f(*g()) == 1\n", "emb": null, "idx_generation": 468, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target number, count the number of pairs of numbers in the list whose sum is equal to the target.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Output:\n    1\n\n    Explanation: The numbers [4, 5] in the list can be combined to add up to the target number 9.\n    \"\"\"\n    count = 0\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            count += 1\n    return count", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (nums, target)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list contains any duplicate elements.\n\n    Sample Input:\n    nums = [1, 2, 3, 2, 4]\n\n    Sample Output:\n    True\n\n    Explanation: The list contains duplicate elements (2).\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 2, 4]\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 468, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list contains any duplicate elements.\n\n    Sample Input:\n    nums = [1, 2, 3, 2, 4]\n\n    Sample Output:\n    True\n\n    Explanation: The list contains duplicate elements (2).\n    \"\"\"\n    return len(nums) != len(set(nums))", "solution_func": "def g():\n    return [1, 2, 3, 2, 4]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with the squares of all the numbers in the original list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    [1, 4, 9, 16, 25]\n\n    Explanation: The squares of the numbers in the original list are [1, 4, 9, 16, 25].\n    \"\"\"\n    return [num ** 2 for num in nums]\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == [1, 4, 9, 16, 25]\n\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 468, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with the squares of all the numbers in the original list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    [1, 4, 9, 16, 25]\n\n    Explanation: The squares of the numbers in the original list are [1, 4, 9, 16, 25].\n    \"\"\"\n    return [num ** 2 for num in nums]", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(nums: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"\n    Given a list of tuples, where each tuple contains two integers, return a new list with the sum of the integers in each tuple.\n\n    Sample Input:\n    nums = [(1, 2), (3, 4), (5, 6)]\n\n    Sample Output:\n    [3, 7, 11]\n\n    Explanation: The sum of (1, 2) is 3, the sum of (3, 4) is 7, and the sum of (5, 6) is 11.\n    \"\"\"\n    return [num1 + num2 for num1, num2 in nums]\n\ndef g():\n    return [(1, 2), (3, 4), (5, 6)]\n\nassert f(g()) == [3, 7, 11]\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 468, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List, Tuple\n\ndef f(nums: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"\n    Given a list of tuples, where each tuple contains two integers, return a new list with the sum of the integers in each tuple.\n\n    Sample Input:\n    nums = [(1, 2), (3, 4), (5, 6)]\n\n    Sample Output:\n    [3, 7, 11]\n\n    Explanation: The sum of (1, 2) is 3, the sum of (3, 4) is 7, and the sum of (5, 6) is 11.\n    \"\"\"\n    return [num1 + num2 for num1, num2 in nums]", "solution_func": "def g():\n    return [(1, 2), (3, 4), (5, 6)]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    A magic square is an n x n matrix of distinct positive integers where the sum of each row, each column, and both diagonals is the same value.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        if sum(matrix[i][j] for i in range(n)) != target_sum:\n            return False\n\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(matrix[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n\n    return True\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\nassert f(g([[2, 7, 6], [9, 5, 1], [4, 3, 8]])) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 468, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    A magic square is an n x n matrix of distinct positive integers where the sum of each row, each column, and both diagonals is the same value.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        if sum(matrix[i][j] for i in range(n)) != target_sum:\n            return False\n\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(matrix[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n\n    return True", "solution_func": "def g(matrix: List[List[int]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n    A symmetric matrix is a square matrix that is equal to its transpose.\n    \"\"\"\n    n = len(matrix)\n\n    for i in range(n):\n        for j in range(i, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n\n    return True\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\nassert f(g([[1, 2, 3], [2, 4, 5], [3, 5, 6]])) == False\n\n", "emb": null, "idx_generation": 468, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n    A symmetric matrix is a square matrix that is equal to its transpose.\n    \"\"\"\n    n = len(matrix)\n\n    for i in range(n):\n        for j in range(i, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n\n    return True", "solution_func": "def g(matrix: List[List[int]]):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Find the sum of the elements in the main diagonal of the given matrix.\n    The main diagonal of a matrix consists of the elements that are located on the diagonal running from the top-left corner to the bottom-right corner.\n    \"\"\"\n    n = len(matrix)\n    diagonal_sum = 0\n\n    for i in range(n):\n        diagonal_sum += matrix[i][i]\n\n    return diagonal_sum\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\nassert f(g([[1, 2, 3], [4, 5, 6], [7, 8, 9]])) == 15\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 468, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Find the sum of the elements in the main diagonal of the given matrix.\n    The main diagonal of a matrix consists of the elements that are located on the diagonal running from the top-left corner to the bottom-right corner.\n    \"\"\"\n    n = len(matrix)\n    diagonal_sum = 0\n\n    for i in range(n):\n        diagonal_sum += matrix[i][i]\n\n    return diagonal_sum", "solution_func": "def g(matrix: List[List[int]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Calculate the sum of all even numbers in the given list of integers.\n    \"\"\"\n    return sum(num for num in nums if num % 2 == 0)\n\ndef g(nums: List[int]):\n    return nums\n\nassert f(g([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) == 30\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 468, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Calculate the sum of all even numbers in the given list of integers.\n    \"\"\"\n    return sum(num for num in nums if num % 2 == 0)", "solution_func": "def g(nums: List[int]):\n    return nums", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the minimum sum of any contiguous subarray.\n    \"\"\"\n    min_sum = float('inf')\n    curr_sum = 0\n    for num in arr:\n        curr_sum = min(num, curr_sum + num)\n        min_sum = min(min_sum, curr_sum)\n    return min_sum\n\ndef g():\n    arr = [1, -2, 3, -4, 5, -6]\n    return arr\n\nassert f(g()) == -8\n", "emb": null, "idx_generation": 469, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the minimum sum of any contiguous subarray.\n    \"\"\"\n    min_sum = float('inf')\n    curr_sum = 0\n    for num in arr:\n        curr_sum = min(num, curr_sum + num)\n        min_sum = min(min_sum, curr_sum)\n    return min_sum", "solution_func": "def g():\n    arr = [1, -2, 3, -4, 5, -6]\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the length of the longest increasing subarray.\n    \"\"\"\n    max_length = 1\n    curr_length = 1\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            curr_length += 1\n        else:\n            max_length = max(max_length, curr_length)\n            curr_length = 1\n    return max(max_length, curr_length)\n\ndef g():\n    arr = [1, 2, 3, 2, 4, 5, 6, 3, 2, 1]\n    return arr\n\nassert f(g()) == 4\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 469, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the length of the longest increasing subarray.\n    \"\"\"\n    max_length = 1\n    curr_length = 1\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            curr_length += 1\n        else:\n            max_length = max(max_length, curr_length)\n            curr_length = 1\n    return max(max_length, curr_length)", "solution_func": "def g():\n    arr = [1, 2, 3, 2, 4, 5, 6, 3, 2, 1]\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return the longest subarray with equal number of even and odd integers.\n\n    If multiple subarrays have the same length, return the one with the smallest starting index.\n\n    Example:\n    arr = [2, 4, 6, 1, 3, 5, 7]\n    output: [1, 3, 5, 7]\n    \"\"\"\n    counts = {0: -1}\n    max_length = 0\n    count = 0\n    start = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            count += 1\n        else:\n            count -= 1\n        if count in counts:\n            if i - counts[count] > max_length:\n                max_length = i - counts[count]\n                start = counts[count] + 1\n        else:\n            counts[count] = i\n    return arr[start:start+max_length]\n\ndef g():\n    arr = [2, 4, 6, 1, 3, 5, 7, 8, 9, 10, 11, 12, 13]\n    return arr\n\nassert f(g()) == [1, 3, 5, 7]\n", "emb": null, "idx_generation": 469, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return the longest subarray with equal number of even and odd integers.\n\n    If multiple subarrays have the same length, return the one with the smallest starting index.\n\n    Example:\n    arr = [2, 4, 6, 1, 3, 5, 7]\n    output: [1, 3, 5, 7]\n    \"\"\"\n    counts = {0: -1}\n    max_length = 0\n    count = 0\n    start = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            count += 1\n        else:\n            count -= 1\n        if count in counts:\n            if i - counts[count] > max_length:\n                max_length = i - counts[count]\n                start = counts[count] + 1\n        else:\n            counts[count] = i\n    return arr[start:start+max_length]", "solution_func": "def g():\n    arr = [2, 4, 6, 1, 3, 5, 7, 8, 9, 10, 11, 12, 13]\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    Given a matrix of integers and a target number, find the indices (row and column) of all occurrences of the target number in the matrix.\n    \"\"\"\n    indices = []\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target:\n                indices.append((i, j))\n    return indices\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 5\n    return (matrix, target)\n\nassert f(*g()) == [(1, 1)]\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 469, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    Given a matrix of integers and a target number, find the indices (row and column) of all occurrences of the target number in the matrix.\n    \"\"\"\n    indices = []\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target:\n                indices.append((i, j))\n    return indices", "solution_func": "def g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 5\n    return (matrix, target)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the positive numbers in the same order as the original list.\n    \"\"\"\n    return [num for num in lst if num > 0]\n\ndef g():\n    return [1, -2, 3, -4, 5, -6]\n\nassert f(g()) == [1, 3, 5]\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 469, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the positive numbers in the same order as the original list.\n    \"\"\"\n    return [num for num in lst if num > 0]", "solution_func": "def g():\n    return [1, -2, 3, -4, 5, -6]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[int], n: int = 5) -> int:\n    \"\"\"\n    Given a list of integers and a target number n, count the number of occurrences of n in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num == n:\n            count += 1\n    return count\n\ndef g(n: int = 5):\n    return [1, 5, 2, 5, 3, 5, 4, 5, 5]\n\nassert f(g()) == 5\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 469, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int], n: int = 5) -> int:\n    \"\"\"\n    Given a list of integers and a target number n, count the number of occurrences of n in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num == n:\n            count += 1\n    return count", "solution_func": "def g(n: int = 5):\n    return [1, 5, 2, 5, 3, 5, 4, 5, 5]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with the elements in reverse order.\n\n    Sample Input:\n    [1, 2, 3, 4, 5]\n\n    Sample Output:\n    [5, 4, 3, 2, 1]\n    \"\"\"\n    return nums[::-1]\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return (nums,)\n\nassert f(*g()) == [5, 4, 3, 2, 1]\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 469, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with the elements in reverse order.\n\n    Sample Input:\n    [1, 2, 3, 4, 5]\n\n    Sample Output:\n    [5, 4, 3, 2, 1]\n    \"\"\"\n    return nums[::-1]", "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return (nums,)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(words: List[str], n: int) -> List[str]:\n    \"\"\"\n    Given a list of words, return a new list with the words that have length greater than or equal to n.\n\n    Sample Input:\n    [\"apple\", \"banana\", \"grape\", \"kiwi\", \"orange\"]\n\n    Sample Output:\n    [\"banana\", \"orange\"]\n    \"\"\"\n    return [word for word in words if len(word) >= n]\n\ndef g(words=[\"apple\", \"banana\", \"grape\", \"kiwi\", \"orange\"], n=6):\n    return (words, n)\n\nassert f(*g()) == [\"banana\", \"orange\"]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 469, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], n: int) -> List[str]:\n    \"\"\"\n    Given a list of words, return a new list with the words that have length greater than or equal to n.\n\n    Sample Input:\n    [\"apple\", \"banana\", \"grape\", \"kiwi\", \"orange\"]\n\n    Sample Output:\n    [\"banana\", \"orange\"]\n    \"\"\"\n    return [word for word in words if len(word) >= n]", "solution_func": "def g(words=[\"apple\", \"banana\", \"grape\", \"kiwi\", \"orange\"], n=6):\n    return (words, n)", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, calculate the sum of all the elements in the matrix.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    45\n    \"\"\"\n    return sum(sum(row) for row in matrix)\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return (matrix,)\n\nassert f(*g()) == 45\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 469, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, calculate the sum of all the elements in the matrix.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    45\n    \"\"\"\n    return sum(sum(row) for row in matrix)", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return (matrix,)", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return arr\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 469, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True", "solution_func": "def g(arr: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return arr", "map_ix": [1, 1, 0, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the product of all the elements in the list.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g()) == 120\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 470, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the product of all the elements in the list.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5]):\n    return arr", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, check if it is a symmetric matrix.\n    A matrix is symmetric if it is equal to its transpose.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    transpose = [[matrix[j][i] for j in range(len(matrix[i]))] for i in range(len(matrix))]\n    return matrix == transpose\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 470, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, check if it is a symmetric matrix.\n    A matrix is symmetric if it is equal to its transpose.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    transpose = [[matrix[j][i] for j in range(len(matrix[i]))] for i in range(len(matrix))]\n    return matrix == transpose", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list is sorted in non-decreasing order.\n\n    Sample Input:\n    arr = [1, 2, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return arr == sorted(arr)\n\ndef g(arr: List[int] = [1, 2, 2, 3, 4, 5]):\n    return arr\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 470, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list is sorted in non-decreasing order.\n\n    Sample Input:\n    arr = [1, 2, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return arr == sorted(arr)", "solution_func": "def g(arr: List[int] = [1, 2, 2, 3, 4, 5]):\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"Calculate the sum of the diagonals in a given matrix.\"\"\"\n    n = len(matrix)\n    diagonal_sum = sum(matrix[i][i] for i in range(n))\n    anti_diagonal_sum = sum(matrix[i][n-1-i] for i in range(n))\n    return diagonal_sum - anti_diagonal_sum\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == -4\n", "emb": null, "idx_generation": 470, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"Calculate the sum of the diagonals in a given matrix.\"\"\"\n    n = len(matrix)\n    diagonal_sum = sum(matrix[i][i] for i in range(n))\n    anti_diagonal_sum = sum(matrix[i][n-1-i] for i in range(n))\n    return diagonal_sum - anti_diagonal_sum", "solution_func": "def g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the sum of all elements in each row is greater than the sum of all elements in each column.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    row_sums = [sum(row) for row in arr]\n    col_sums = [sum(col) for col in zip(*arr)]\n    return all(row_sum > col_sum for row_sum, col_sum in zip(row_sums, col_sums))\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 470, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the sum of all elements in each row is greater than the sum of all elements in each column.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    row_sums = [sum(row) for row in arr]\n    col_sums = [sum(col) for col in zip(*arr)]\n    return all(row_sum > col_sum for row_sum, col_sum in zip(row_sums, col_sums))", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the sum of all elements in each row is less than the sum of all elements in each column.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    False\n    \"\"\"\n    row_sums = [sum(row) for row in arr]\n    col_sums = [sum(col) for col in zip(*arr)]\n    return all(row_sum < col_sum for row_sum, col_sum in zip(row_sums, col_sums))\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 470, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the sum of all elements in each row is less than the sum of all elements in each column.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    False\n    \"\"\"\n    row_sums = [sum(row) for row in arr]\n    col_sums = [sum(col) for col in zip(*arr)]\n    return all(row_sum < col_sum for row_sum, col_sum in zip(row_sums, col_sums))", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"\n    Determine if it is possible to find a pair of numbers in a list that sums up to a target number. The pair of numbers\n    must be distinct and the order of the numbers in the pair does not matter.\n\n    Sample input:\n    [5, 10, 15, 20]\n\n    Sample output:\n    True\n\n    The pair of numbers (10, 15) sums up to 25, which is the target number.\n    \"\"\"\n    return any(num1 + num2 == target for i, num1 in enumerate(numbers) for num2 in numbers[i+1:])\n\ndef g(target=5):\n    return [1, 2, 3, target - 1]\n\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 470, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"\n    Determine if it is possible to find a pair of numbers in a list that sums up to a target number. The pair of numbers\n    must be distinct and the order of the numbers in the pair does not matter.\n\n    Sample input:\n    [5, 10, 15, 20]\n\n    Sample output:\n    True\n\n    The pair of numbers (10, 15) sums up to 25, which is the target number.\n    \"\"\"\n    return any(num1 + num2 == target for i, num1 in enumerate(numbers) for num2 in numbers[i+1:])", "solution_func": "def g(target=5):\n    return [1, 2, 3, target - 1]", "map_ix": null}, {"fitness": 1.0, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any combination sums up to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False\n\ndef g(k=3, target_sum=6):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 2, 3, 4, 5, target_sum - 10]\n\nassert f(g(), k=3, target_sum=6) == True\n\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 470, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any combination sums up to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False", "solution_func": "def g(k=3, target_sum=6):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 2, 3, 4, 5, target_sum - 10]", "map_ix": [0, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(tri: List[int], edges=[[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]) -> bool:\n    \"\"\"Check if a given directed graph contains a cycle.\"\"\"\n    graph = {}\n    for edge in edges:\n        if edge[0] not in graph:\n            graph[edge[0]] = []\n        graph[edge[0]].append(edge[1])\n    visited = set()\n    def dfs(node, visited, stack):\n        visited.add(node)\n        stack.add(node)\n        for neighbor in graph.get(node, []):\n            if neighbor not in visited:\n                if dfs(neighbor, visited, stack):\n                    return True\n            elif neighbor in stack:\n                return True\n        stack.remove(node)\n        return False\n    for node in graph:\n        if dfs(node, visited, set()):\n            return True\n    return False\ndef g(edges = [[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]):\n    return edges\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 470, "target_skills": null, "problem_func": "from typing import*\ndef f(tri: List[int], edges=[[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]) -> bool:\n    \"\"\"Check if a given directed graph contains a cycle.\"\"\"\n    graph = {}\n    for edge in edges:\n        if edge[0] not in graph:\n            graph[edge[0]] = []\n        graph[edge[0]].append(edge[1])\n    visited = set()\n    def dfs(node, visited, stack):\n        visited.add(node)\n        stack.add(node)\n        for neighbor in graph.get(node, []):\n            if neighbor not in visited:\n                if dfs(neighbor, visited, stack):\n                    return True\n            elif neighbor in stack:\n                return True\n        stack.remove(node)\n        return False\n    for node in graph:\n        if dfs(node, visited, set()):\n            return True\n    return False", "solution_func": "def g(edges = [[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]):\n    return edges", "map_ix": [0, 0, 1, 0, 0, 0, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=5) -> int:\n    \"\"\"\n    Given a list of integers and a target number, find the sum of all numbers in the list that are divisible by the target.\n    Return the sum if there are any such numbers, otherwise return 0.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 2\n\n    Sample Output:\n    6\n    \"\"\"\n    divisible_sum = 0\n    for num in nums:\n        if num % target == 0:\n            divisible_sum += num\n    return divisible_sum\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 2):\n    return nums, target\n\nassert f(*g()) == 6\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 470, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=5) -> int:\n    \"\"\"\n    Given a list of integers and a target number, find the sum of all numbers in the list that are divisible by the target.\n    Return the sum if there are any such numbers, otherwise return 0.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 2\n\n    Sample Output:\n    6\n    \"\"\"\n    divisible_sum = 0\n    for num in nums:\n        if num % target == 0:\n            divisible_sum += num\n    return divisible_sum", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 2):\n    return nums, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subarray with a sum equal to k.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    k = 7\n    output: True\n    \"\"\"\n    prefix_sum = 0\n    seen = set()\n    seen.add(0)\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum - k in seen:\n            return True\n        seen.add(prefix_sum)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 7\n\nassert f(*g()) == True\n\n", "emb": [1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 471, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subarray with a sum equal to k.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    k = 7\n    output: True\n    \"\"\"\n    prefix_sum = 0\n    seen = set()\n    seen.add(0)\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum - k in seen:\n            return True\n        seen.add(prefix_sum)\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5], 7", "map_ix": [1, 0, 1, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is sorted in non-decreasing order.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    output: True\n    \"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 471, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is sorted in non-decreasing order.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    output: True\n    \"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a sorted list of integers, find the index of the target value using binary search.\n\n    Example:\n    nums = [1, 3, 5, 7, 9]\n    target = 7\n    output: 3\n    \"\"\"\n    left = 0\n    right = len(nums) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1\n\ndef g():\n    return [1, 3, 5, 7, 9], 7\n\nassert f(*g()) == 3\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 471, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a sorted list of integers, find the index of the target value using binary search.\n\n    Example:\n    nums = [1, 3, 5, 7, 9]\n    target = 7\n    output: 3\n    \"\"\"\n    left = 0\n    right = len(nums) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1", "solution_func": "def g():\n    return [1, 3, 5, 7, 9], 7", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target number, find and return the number of pairs from the list that add up to the target.\n\n    Example:\n    arr = [2, 4, 7, 11, 15]\n    target = 9\n\n    The pairs that add up to the target are (2, 7) and (4, 5), so the function should return 2.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                count += 1\n    return count\n\ndef g():\n    arr = [2, 4, 7, 11, 15]\n    target = 9\n    return (arr, target)\n\nassert f(*g()) == 2\n", "emb": null, "idx_generation": 471, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target number, find and return the number of pairs from the list that add up to the target.\n\n    Example:\n    arr = [2, 4, 7, 11, 15]\n    target = 9\n\n    The pairs that add up to the target are (2, 7) and (4, 5), so the function should return 2.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                count += 1\n    return count", "solution_func": "def g():\n    arr = [2, 4, 7, 11, 15]\n    target = 9\n    return (arr, target)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find and return the maximum sum of any contiguous subarray.\n\n    Example:\n    arr = [1, -2, 3, -1, 2, -3, 4, -1, 5, -4]\n\n    The contiguous subarray with the maximum sum is [3, -1, 2, -3, 4, -1, 5], so the function should return 9.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in arr:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n\ndef g():\n    arr = [1, -2, 3, -1, 2, -3, 4, -1, 5, -4]\n    return (arr,)\n\nassert f(*g()) == 9\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 471, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find and return the maximum sum of any contiguous subarray.\n\n    Example:\n    arr = [1, -2, 3, -1, 2, -3, 4, -1, 5, -4]\n\n    The contiguous subarray with the maximum sum is [3, -1, 2, -3, 4, -1, 5], so the function should return 9.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in arr:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "solution_func": "def g():\n    arr = [1, -2, 3, -1, 2, -3, 4, -1, 5, -4]\n    return (arr,)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, sort the list in non-decreasing order using the bubble sort algorithm and return the sorted list.\n\n    Example:\n    arr = [5, 2, 8, 12, 3]\n\n    After sorting, the list becomes [2, 3, 5, 8, 12], so the function should return [2, 3, 5, 8, 12].\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\ndef g():\n    arr = [5, 2, 8, 12, 3]\n    return (arr,)\n\nassert f(*g()) == [2, 3, 5, 8, 12]\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 471, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, sort the list in non-decreasing order using the bubble sort algorithm and return the sorted list.\n\n    Example:\n    arr = [5, 2, 8, 12, 3]\n\n    After sorting, the list becomes [2, 3, 5, 8, 12], so the function should return [2, 3, 5, 8, 12].\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr", "solution_func": "def g():\n    arr = [5, 2, 8, 12, 3]\n    return (arr,)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import *\n\ndef f(lst: List[int], n: int) -> int:\n    \"\"\"\n    Given a list of integers and a target number n, find the index of the first occurrence of n in the list.\n    If n is not present in the list, return -1.\n    \"\"\"\n    for i in range(len(lst)):\n        if lst[i] == n:\n            return i\n    return -1\n\ndef g(lst: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: int = 5):\n    return lst, n\n\nassert f(*g()) == 4\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 471, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\n\ndef f(lst: List[int], n: int) -> int:\n    \"\"\"\n    Given a list of integers and a target number n, find the index of the first occurrence of n in the list.\n    If n is not present in the list, return -1.\n    \"\"\"\n    for i in range(len(lst)):\n        if lst[i] == n:\n            return i\n    return -1", "solution_func": "def g(lst: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: int = 5):\n    return lst, n", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import *\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if any row or column has all elements equal.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 4, 4], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n\n    # Check if any row has all elements equal\n    for row in arr:\n        if len(set(row)) == 1:\n            return True\n    \n    # Check if any column has all elements equal\n    for j in range(cols):\n        column = [arr[i][j] for i in range(rows)]\n        if len(set(column)) == 1:\n            return True\n    \n    return False\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 471, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if any row or column has all elements equal.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 4, 4], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n\n    # Check if any row has all elements equal\n    for row in arr:\n        if len(set(row)) == 1:\n            return True\n    \n    # Check if any column has all elements equal\n    for j in range(cols):\n        column = [arr[i][j] for i in range(rows)]\n        if len(set(column)) == 1:\n            return True\n    \n    return False", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import *\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the sum of all even numbers in the list.\n    \"\"\"\n    total = 0\n    for num in arr:\n        if num % 2 == 0:\n            total += num\n    return total\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr\n\nassert f(g()) == 30\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 471, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the sum of all even numbers in the list.\n    \"\"\"\n    total = 0\n    for num in arr:\n        if num % 2 == 0:\n            total += num\n    return total", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list contains a palindrome.\n    A palindrome is a word, number, phrase, or other sequence of characters that reads the same forward and backward.\n\n    Sample Input:\n    arr = [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return arr == arr[::-1]\n\ndef g(arr: List[int] = [1, 2, 3, 2, 1]):\n    return arr\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 471, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list contains a palindrome.\n    A palindrome is a word, number, phrase, or other sequence of characters that reads the same forward and backward.\n\n    Sample Input:\n    arr = [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return arr == arr[::-1]", "solution_func": "def g(arr: List[int] = [1, 2, 3, 2, 1]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, target: int) -> bool:\n    \"\"\"\n    Given a number n and a target, check if the number n is a prime number and the sum of its digits is equal to the target value.\n    If both conditions are met, return True. Otherwise, return False.\n    \"\"\"\n    if target == 0:\n        return False\n    \n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return is_prime(n) and sum([int(i) for i in str(n)]) == target\n\ndef g():\n    return 17, 8\n\nassert f(*g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 472, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, target: int) -> bool:\n    \"\"\"\n    Given a number n and a target, check if the number n is a prime number and the sum of its digits is equal to the target value.\n    If both conditions are met, return True. Otherwise, return False.\n    \"\"\"\n    if target == 0:\n        return False\n    \n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return is_prime(n) and sum([int(i) for i in str(n)]) == target", "solution_func": "def g():\n    return 17, 8", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, target: int) -> bool:\n    \"\"\"\n    Given a number n and a target, check if the number n is a palindrome and the sum of its digits is equal to the target value.\n    If both conditions are met, return True. Otherwise, return False.\n    \"\"\"\n    if target == 0:\n        return False\n    \n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    return is_palindrome(n) and sum([int(i) for i in str(n)]) == target\n\ndef g():\n    return 121, 5\n\nassert f(*g()) == True\n\n", "emb": null, "idx_generation": 472, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, target: int) -> bool:\n    \"\"\"\n    Given a number n and a target, check if the number n is a palindrome and the sum of its digits is equal to the target value.\n    If both conditions are met, return True. Otherwise, return False.\n    \"\"\"\n    if target == 0:\n        return False\n    \n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    return is_palindrome(n) and sum([int(i) for i in str(n)]) == target", "solution_func": "def g():\n    return 121, 5", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, target: int) -> bool:\n    \"\"\"\n    Given a number n and a target, check if the number n is divisible by 2 and 3, and the sum of its digits is equal to the target value.\n    If both conditions are met, return True. Otherwise, return False.\n    \"\"\"\n    if target == 0:\n        return False\n    \n    return n % 2 == 0 and n % 3 == 0 and sum([int(i) for i in str(n)]) == target\n\ndef g():\n    return 36, 9\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 472, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, target: int) -> bool:\n    \"\"\"\n    Given a number n and a target, check if the number n is divisible by 2 and 3, and the sum of its digits is equal to the target value.\n    If both conditions are met, return True. Otherwise, return False.\n    \"\"\"\n    if target == 0:\n        return False\n    \n    return n % 2 == 0 and n % 3 == 0 and sum([int(i) for i in str(n)]) == target", "solution_func": "def g():\n    return 36, 9", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix, return the maximum element in the matrix.\n    \"\"\"\n    max_element = float('-inf')\n    for row in matrix:\n        for num in row:\n            if num > max_element:\n                max_element = num\n    return max_element\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 9\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 472, "target_skills": null, "problem_func": "from typing import*\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix, return the maximum element in the matrix.\n    \"\"\"\n    max_element = float('-inf')\n    for row in matrix:\n        for num in row:\n            if num > max_element:\n                max_element = num\n    return max_element", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [1, 0, 0, 0, 0, 1, 1, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport itertools\n\ndef f(nums: List[int]) -> List[List[int]]:\n    \"\"\"\n    Given a list of integers, return all possible permutations of the list.\n\n    Sample Input:\n    [1, 2, 3]\n\n    Sample Output:\n    [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    \"\"\"\n    return list(itertools.permutations(nums))\n\ndef g(nums: List[int] = [1, 2, 3]):\n    return nums\n\nassert f(g()) == [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]\n\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 472, "target_skills": null, "problem_func": "from typing import*\nimport itertools\n\ndef f(nums: List[int]) -> List[List[int]]:\n    \"\"\"\n    Given a list of integers, return all possible permutations of the list.\n\n    Sample Input:\n    [1, 2, 3]\n\n    Sample Output:\n    [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    \"\"\"\n    return list(itertools.permutations(nums))", "solution_func": "def g(nums: List[int] = [1, 2, 3]):\n    return nums", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport random\n\ndef f(numbers: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of numbers and a target number, return the number of pairs in the list whose sum is equal to the target.\n\n    Sample Input:\n    numbers = [1, 2, 3, 4, 5]\n    target = 6\n\n    Sample Output:\n    2\n    \"\"\"\n    count = 0\n    seen = set()\n    for num in numbers:\n        complement = target - num\n        if complement in seen:\n            count += 1\n        seen.add(num)\n    return count\n\ndef g(numbers: List[int] = [1, 2, 3, 4, 5], target: int = 6):\n    return (numbers, target)\n\nassert f(*g()) == 2\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 472, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(numbers: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of numbers and a target number, return the number of pairs in the list whose sum is equal to the target.\n\n    Sample Input:\n    numbers = [1, 2, 3, 4, 5]\n    target = 6\n\n    Sample Output:\n    2\n    \"\"\"\n    count = 0\n    seen = set()\n    for num in numbers:\n        complement = target - num\n        if complement in seen:\n            count += 1\n        seen.add(num)\n    return count", "solution_func": "def g(numbers: List[int] = [1, 2, 3, 4, 5], target: int = 6):\n    return (numbers, target)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 472, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]", "solution_func": "def g():\n    return [1, 2, 3, 2, 1]", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the prime numbers.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [num for num in nums if is_prime(num)]\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == [2, 3, 5, 7]\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 472, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the prime numbers.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [num for num in nums if is_prime(num)]", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Calculate the sum of all the even numbers in the given list.\n    \"\"\"\n    return sum(num for num in nums if num % 2 == 0)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 30\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 472, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Calculate the sum of all the even numbers in the given list.\n    \"\"\"\n    return sum(num for num in nums if num % 2 == 0)", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int], target: int, n = 3) -> bool:\n    \"\"\"Check if there exists a subsequence of the given list that sums up to the target value, with at most n numbers.\"\"\"\n    def find_subsequence(start, curr_sum, count):\n        if curr_sum == target:\n            return True\n        if curr_sum > target or start == len(x) or count > n:\n            return False\n        if find_subsequence(start + 1, curr_sum + x[start], count + 1):\n            return True\n        if find_subsequence(start + 1, curr_sum, count):\n            return True\n        return False\n\n    return find_subsequence(0, 0, 0)\n\ndef g(x: List[int] = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target: int = 150):\n    return (x, target)\n\nassert f(*g())\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 472, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], target: int, n = 3) -> bool:\n    \"\"\"Check if there exists a subsequence of the given list that sums up to the target value, with at most n numbers.\"\"\"\n    def find_subsequence(start, curr_sum, count):\n        if curr_sum == target:\n            return True\n        if curr_sum > target or start == len(x) or count > n:\n            return False\n        if find_subsequence(start + 1, curr_sum + x[start], count + 1):\n            return True\n        if find_subsequence(start + 1, curr_sum, count):\n            return True\n        return False\n\n    return find_subsequence(0, 0, 0)", "solution_func": "def g(x: List[int] = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target: int = 150):\n    return (x, target)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], n: int = 0) -> int:\n    \"\"\"\n    Given a list of integers and a target number n, count the number of occurrences of n in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num == n:\n            count += 1\n    return count\n\ndef g(n: int = 0):\n    return [0, 1, 2, 3, 4, 5, 0, 0, 0]\n\nassert f(g()) == 3\n\n\n", "emb": null, "idx_generation": 473, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], n: int = 0) -> int:\n    \"\"\"\n    Given a list of integers and a target number n, count the number of occurrences of n in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num == n:\n            count += 1\n    return count", "solution_func": "def g(n: int = 0):\n    return [0, 1, 2, 3, 4, 5, 0, 0, 0]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], n: int = 8) -> int:\n    \"\"\"\n    Given a list of integers and a target number n, count the number of occurrences of n in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num == n:\n            count += 1\n    return count\n\ndef g(n: int = 8):\n    return [8, 8, 8, 8, 8, 8, 8]\n\nassert f(g()) == 7\n\n\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 473, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], n: int = 8) -> int:\n    \"\"\"\n    Given a list of integers and a target number n, count the number of occurrences of n in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num == n:\n            count += 1\n    return count", "solution_func": "def g(n: int = 8):\n    return [8, 8, 8, 8, 8, 8, 8]", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], n: int = 1) -> int:\n    \"\"\"\n    Given a list of integers and a target number n, count the number of occurrences of n in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num == n:\n            count += 1\n    return count\n\ndef g(n: int = 1):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g()) == 1\n\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 473, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], n: int = 1) -> int:\n    \"\"\"\n    Given a list of integers and a target number n, count the number of occurrences of n in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num == n:\n            count += 1\n    return count", "solution_func": "def g(n: int = 1):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], n: int) -> bool:\n    \"\"\"\n    Given a list of words and an integer n, check if there exists two words in the list that have a common prefix of length n.\n\n    Sample Input:\n    words = [\"apple\", \"application\", \"banana\", \"cat\"]\n    n = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    prefix_set = set()\n    for word in words:\n        prefix = word[:n]\n        if prefix in prefix_set:\n            return True\n        prefix_set.add(prefix)\n    return False\n\ndef g():\n    return [\"apple\", \"application\", \"banana\", \"cat\"], 3\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 473, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], n: int) -> bool:\n    \"\"\"\n    Given a list of words and an integer n, check if there exists two words in the list that have a common prefix of length n.\n\n    Sample Input:\n    words = [\"apple\", \"application\", \"banana\", \"cat\"]\n    n = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    prefix_set = set()\n    for word in words:\n        prefix = word[:n]\n        if prefix in prefix_set:\n            return True\n        prefix_set.add(prefix)\n    return False", "solution_func": "def g():\n    return [\"apple\", \"application\", \"banana\", \"cat\"], 3", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers and an integer k, check if there exists a subarray of length k such that all elements in the subarray are distinct.\n\n    Sample Input:\n    nums = [1, 2, 3, 1, 4, 5]\n    k = 4\n\n    Sample Output:\n    False\n    \"\"\"\n    num_set = set()\n    for i in range(len(nums) - k + 1):\n        subarray = nums[i:i+k]\n        if len(subarray) != len(set(subarray)):\n            return False\n    return True\n\ndef g():\n    return [1, 2, 3, 1, 4, 5], 4\n\nassert f(*g()) == False\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 473, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers and an integer k, check if there exists a subarray of length k such that all elements in the subarray are distinct.\n\n    Sample Input:\n    nums = [1, 2, 3, 1, 4, 5]\n    k = 4\n\n    Sample Output:\n    False\n    \"\"\"\n    num_set = set()\n    for i in range(len(nums) - k + 1):\n        subarray = nums[i:i+k]\n        if len(subarray) != len(set(subarray)):\n            return False\n    return True", "solution_func": "def g():\n    return [1, 2, 3, 1, 4, 5], 4", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome, considering only alphanumeric characters and ignoring cases.\n\n    Sample Input:\n    s = \"A man, a plan, a canal: Panama\"\n\n    Sample Output:\n    True\n    \"\"\"\n    s = ''.join(ch.lower() for ch in s if ch.isalnum())\n    return s == s[::-1]\n\ndef g():\n    return \"A man, a plan, a canal: Panama\"\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 473, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome, considering only alphanumeric characters and ignoring cases.\n\n    Sample Input:\n    s = \"A man, a plan, a canal: Panama\"\n\n    Sample Output:\n    True\n    \"\"\"\n    s = ''.join(ch.lower() for ch in s if ch.isalnum())\n    return s == s[::-1]", "solution_func": "def g():\n    return \"A man, a plan, a canal: Panama\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, determine whether any two numbers from the list add up to the target.\n\n    Sample Input:\n    numbers = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    complements = set()\n    for num in numbers:\n        if num in complements:\n            return True\n        complements.add(target - num)\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 9)\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 473, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, determine whether any two numbers from the list add up to the target.\n\n    Sample Input:\n    numbers = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    complements = set()\n    for num in numbers:\n        if num in complements:\n            return True\n        complements.add(target - num)\n    return False", "solution_func": "def g():\n    return ([1, 2, 3, 4, 5], 9)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Given a string, check if it is a palindrome.\n\n    Sample Input:\n    string = \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return string == string[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 473, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Given a string, check if it is a palindrome.\n\n    Sample Input:\n    string = \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return string == string[::-1]", "solution_func": "def g():\n    return \"racecar\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given an n x m matrix and a target integer, determine whether the target integer is present in the matrix.\n\n    Sample Input:\n    matrix = [\n        [1, 3, 5],\n        [7, 9, 11],\n        [13, 15, 17]\n    ]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g():\n    return ([\n        [1, 3, 5],\n        [7, 9, 11],\n        [13, 15, 17]\n    ], 9)\n\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 473, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given an n x m matrix and a target integer, determine whether the target integer is present in the matrix.\n\n    Sample Input:\n    matrix = [\n        [1, 3, 5],\n        [7, 9, 11],\n        [13, 15, 17]\n    ]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False", "solution_func": "def g():\n    return ([\n        [1, 3, 5],\n        [7, 9, 11],\n        [13, 15, 17]\n    ], 9)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the list contains any negative numbers.\"\"\"\n    return any(num < 0 for num in lst)\ndef g():\n    return [1, -2, 3, 4, -5]\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 473, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the list contains any negative numbers.\"\"\"\n    return any(num < 0 for num in lst)", "solution_func": "def g():\n    return [1, -2, 3, 4, -5]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport math\n\ndef f(n: int) -> int:\n    \"\"\"\n    Given an integer n, find the sum of all the prime numbers less than or equal to n.\n\n    Sample Input:\n    n = 10\n\n    Sample Output:\n    17 (2 + 3 + 5 + 7 = 17)\n    \"\"\"\n    sum_primes = 0\n\n    for num in range(2, n+1):\n        is_prime = True\n\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                is_prime = False\n                break\n\n        if is_prime:\n            sum_primes += num\n\n    return sum_primes\n\ndef g(n: int = 10):\n    return n\n\nassert f(g()) == 17\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 474, "target_skills": null, "problem_func": "from typing import*\nimport math\n\ndef f(n: int) -> int:\n    \"\"\"\n    Given an integer n, find the sum of all the prime numbers less than or equal to n.\n\n    Sample Input:\n    n = 10\n\n    Sample Output:\n    17 (2 + 3 + 5 + 7 = 17)\n    \"\"\"\n    sum_primes = 0\n\n    for num in range(2, n+1):\n        is_prime = True\n\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                is_prime = False\n                break\n\n        if is_prime:\n            sum_primes += num\n\n    return sum_primes", "solution_func": "def g(n: int = 10):\n    return n", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string s, determine if it is a palindrome.\n\n    Sample Input:\n    s = \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s: str = \"racecar\"):\n    return s\n\nassert f(g())\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 474, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string s, determine if it is a palindrome.\n\n    Sample Input:\n    s = \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == s[::-1]", "solution_func": "def g(s: str = \"racecar\"):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nimport random\n\ndef f(n: int, k: int, target: int) -> bool:\n    \"\"\"\n    Given a list of n integers, find if there exists a subset of k integers that sum up to the target.\n\n    Sample Input:\n    n = 5\n    k = 3\n    target = 10\n    arr = [2, 4, 6, 8, 10]\n\n    Sample Output:\n    True (Subset [2, 4, 6] sums up to 10)\n    \"\"\"\n    arr = random.sample(range(1, 100), n)\n    subsets = [[]]\n\n    for num in arr:\n        new_subsets = []\n        for subset in subsets:\n            new_subset = subset + [num]\n            new_subsets.append(new_subset)\n            if sum(new_subset) == target and len(new_subset) == k:\n                return True\n        subsets.extend(new_subsets)\n\n    return False\n\ndef g(n: int = 5, k: int = 3, target: int = 10):\n    return (n, k, target)\n\nassert f(*g())\n\n", "emb": null, "idx_generation": 474, "target_skills": null, "problem_func": "from typing import*\nimport random\n\ndef f(n: int, k: int, target: int) -> bool:\n    \"\"\"\n    Given a list of n integers, find if there exists a subset of k integers that sum up to the target.\n\n    Sample Input:\n    n = 5\n    k = 3\n    target = 10\n    arr = [2, 4, 6, 8, 10]\n\n    Sample Output:\n    True (Subset [2, 4, 6] sums up to 10)\n    \"\"\"\n    arr = random.sample(range(1, 100), n)\n    subsets = [[]]\n\n    for num in arr:\n        new_subsets = []\n        for subset in subsets:\n            new_subset = subset + [num]\n            new_subsets.append(new_subset)\n            if sum(new_subset) == target and len(new_subset) == k:\n                return True\n        subsets.extend(new_subsets)\n\n    return False", "solution_func": "def g(n: int = 5, k: int = 3, target: int = 10):\n    return (n, k, target)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(num_list: List[int]) -> int:\n    \"\"\"Find the maximum element in a list of integers.\"\"\"\n    return max(num_list)\n\ndef g(num_list=[1, 5, 2, 9, 7]):\n    return num_list\n\nassert f(g()) == 9\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 474, "target_skills": null, "problem_func": "from typing import*\ndef f(num_list: List[int]) -> int:\n    \"\"\"Find the maximum element in a list of integers.\"\"\"\n    return max(num_list)", "solution_func": "def g(num_list=[1, 5, 2, 9, 7]):\n    return num_list", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"Remove duplicates from a list of integers while preserving the order.\"\"\"\n    return list(dict.fromkeys(nums))\n\ndef g(nums=[1, 2, 2, 3, 4, 4, 5]):\n    return nums\n\nassert f(g()) == [1, 2, 3, 4, 5]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 474, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"Remove duplicates from a list of integers while preserving the order.\"\"\"\n    return list(dict.fromkeys(nums))", "solution_func": "def g(nums=[1, 2, 2, 3, 4, 4, 5]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g(s=\"racecar\"):\n    return s\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 474, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]", "solution_func": "def g(s=\"racecar\"):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers and an integer n, find the sum of all elements in the matrix that are divisible by n.\n\n    Sample Input:\n    n = 3\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Sample Output:\n    18\n\n    Explanation: The elements in the matrix that are divisible by 3 are: 3, 6, 9. Their sum is 18.\n    \"\"\"\n    return sum([matrix[i][j] for i in range(len(matrix)) for j in range(len(matrix[0])) if matrix[i][j] % n == 0])\n\ndef g() -> Tuple[int, List[List[int]]]:\n    return 3, [[1, 2, 3],\n               [4, 5, 6],\n               [7, 8, 9]]\n\nassert f(*g()) == 18\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 474, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(n: int, matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers and an integer n, find the sum of all elements in the matrix that are divisible by n.\n\n    Sample Input:\n    n = 3\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Sample Output:\n    18\n\n    Explanation: The elements in the matrix that are divisible by 3 are: 3, 6, 9. Their sum is 18.\n    \"\"\"\n    return sum([matrix[i][j] for i in range(len(matrix)) for j in range(len(matrix[0])) if matrix[i][j] % n == 0])", "solution_func": "def g() -> Tuple[int, List[List[int]]]:\n    return 3, [[1, 2, 3],\n               [4, 5, 6],\n               [7, 8, 9]]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers and an integer n, return a new list with all elements from the original list that are divisible by n.\n\n    Sample Input:\n    n = 3\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n    Sample Output:\n    [3, 6, 9]\n    \"\"\"\n    return [num for num in lst if num % n == 0]\n\ndef g() -> Tuple[int, List[int]]:\n    return 3, [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(*g()) == [3, 6, 9]\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 474, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, lst: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers and an integer n, return a new list with all elements from the original list that are divisible by n.\n\n    Sample Input:\n    n = 3\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n    Sample Output:\n    [3, 6, 9]\n    \"\"\"\n    return [num for num in lst if num % n == 0]", "solution_func": "def g() -> Tuple[int, List[int]]:\n    return 3, [1, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers and an integer n, find the sum of the main diagonal elements that are divisible by n.\n\n    Sample Input:\n    n = 3\n    matrix = [[3, 2, 1],\n              [4, 6, 8],\n              [7, 8, 9]]\n\n    Sample Output:\n    9\n\n    Explanation: The main diagonal elements that are divisible by 3 are: 3. Their sum is 9.\n    \"\"\"\n    return sum([matrix[i][i] for i in range(len(matrix)) if matrix[i][i] % n == 0])\n\ndef g() -> Tuple[int, List[List[int]]]:\n    return 3, [[3, 2, 1],\n               [4, 6, 8],\n               [7, 8, 9]]\n\nassert f(*g()) == 9\n\n", "emb": null, "idx_generation": 474, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers and an integer n, find the sum of the main diagonal elements that are divisible by n.\n\n    Sample Input:\n    n = 3\n    matrix = [[3, 2, 1],\n              [4, 6, 8],\n              [7, 8, 9]]\n\n    Sample Output:\n    9\n\n    Explanation: The main diagonal elements that are divisible by 3 are: 3. Their sum is 9.\n    \"\"\"\n    return sum([matrix[i][i] for i in range(len(matrix)) if matrix[i][i] % n == 0])", "solution_func": "def g() -> Tuple[int, List[List[int]]]:\n    return 3, [[3, 2, 1],\n               [4, 6, 8],\n               [7, 8, 9]]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n    \"\"\"\n    return s == s[::-1]\n\ndef g(target: str = \"racecar\"):\n    return target\n\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 474, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n    \"\"\"\n    return s == s[::-1]", "solution_func": "def g(target: str = \"racecar\"):\n    return target", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of any contiguous subarray.\n\n    Example:\n    arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\n    The contiguous subarray with the maximum sum is [4, -1, 2, 1], and the sum is 6.\n    Therefore, f(arr) returns 6.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for num in arr:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n\ndef g(arr: List[int] = [-2, 1, -3, 4, -1, 2, 1, -5, 4]):\n    return arr\n\nassert f(g()) == 6\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 475, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of any contiguous subarray.\n\n    Example:\n    arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\n    The contiguous subarray with the maximum sum is [4, -1, 2, 1], and the sum is 6.\n    Therefore, f(arr) returns 6.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for num in arr:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum", "solution_func": "def g(arr: List[int] = [-2, 1, -3, 4, -1, 2, 1, -5, 4]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the length of the longest increasing subsequence.\n\n    Example:\n    arr = [10, 9, 2, 5, 3, 7, 101, 18]\n\n    The longest increasing subsequence is [2, 3, 7, 101], and the length is 4.\n    Therefore, f(arr) returns 4.\n    \"\"\"\n    if not arr:\n        return 0\n\n    dp = [1] * len(arr)\n\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)\n\ndef g(arr: List[int] = [10, 9, 2, 5, 3, 7, 101, 18]):\n    return arr\n\nassert f(g()) == 4\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 475, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the length of the longest increasing subsequence.\n\n    Example:\n    arr = [10, 9, 2, 5, 3, 7, 101, 18]\n\n    The longest increasing subsequence is [2, 3, 7, 101], and the length is 4.\n    Therefore, f(arr) returns 4.\n    \"\"\"\n    if not arr:\n        return 0\n\n    dp = [1] * len(arr)\n\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)", "solution_func": "def g(arr: List[int] = [10, 9, 2, 5, 3, 7, 101, 18]):\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list contains any duplicate elements.\n\n    Example:\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    The list does not contain any duplicate elements.\n    Therefore, f(arr) returns False.\n    \"\"\"\n    seen = set()\n\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr\n\nassert f(g()) == False\n\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 475, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list contains any duplicate elements.\n\n    Example:\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    The list does not contain any duplicate elements.\n    Therefore, f(arr) returns False.\n    \"\"\"\n    seen = set()\n\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n\n    return False", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum product of any two distinct numbers in the list.\n\n    Sample Input:\n    [1, 2, 3, 4, 5]\n\n    Sample Output:\n    20\n    \"\"\"\n    max_product = float('-inf')\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n    \n    return max_product\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == 20\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 475, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum product of any two distinct numbers in the list.\n\n    Sample Input:\n    [1, 2, 3, 4, 5]\n\n    Sample Output:\n    20\n    \"\"\"\n    max_product = float('-inf')\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n    \n    return max_product", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(s: str) -> str:\n    \"\"\"\n    Given a string, reverse the order of words in the string.\n\n    Sample Input:\n    \"Hello World\"\n\n    Sample Output:\n    \"World Hello\"\n    \"\"\"\n    words = s.split()\n    reversed_words = \" \".join(reversed(words))\n    return reversed_words\n\ndef g(s: str = \"Hello World\"):\n    return s\n\nassert f(g()) == \"World Hello\"\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 475, "target_skills": null, "problem_func": "from typing import*\n\ndef f(s: str) -> str:\n    \"\"\"\n    Given a string, reverse the order of words in the string.\n\n    Sample Input:\n    \"Hello World\"\n\n    Sample Output:\n    \"World Hello\"\n    \"\"\"\n    words = s.split()\n    reversed_words = \" \".join(reversed(words))\n    return reversed_words", "solution_func": "def g(s: str = \"Hello World\"):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target number, find two numbers in the list that sum up to the target.\n\n    Sample Input:\n    nums = [2, 7, 11, 15]\n    target = 9\n\n    Sample Output:\n    [2, 7]\n    \"\"\"\n    num_dict = {}\n    \n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_dict:\n            return [nums[num_dict[complement]], num]\n        num_dict[num] = i\n    \n    return []\n\ndef g(nums: List[int] = [2, 7, 11, 15], target: int = 9):\n    return nums, target\n\nassert f(*g()) == [2, 7]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 475, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target number, find two numbers in the list that sum up to the target.\n\n    Sample Input:\n    nums = [2, 7, 11, 15]\n    target = 9\n\n    Sample Output:\n    [2, 7]\n    \"\"\"\n    num_dict = {}\n    \n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_dict:\n            return [nums[num_dict[complement]], num]\n        num_dict[num] = i\n    \n    return []", "solution_func": "def g(nums: List[int] = [2, 7, 11, 15], target: int = 9):\n    return nums, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains at least one number that is a perfect square.\n    \"\"\"\n    def is_perfect_square(n):\n        return int(n**0.5)**2 == n\n\n    return any(is_perfect_square(num) for num in nums)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == False\n\n\n", "emb": null, "idx_generation": 475, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains at least one number that is a perfect square.\n    \"\"\"\n    def is_perfect_square(n):\n        return int(n**0.5)**2 == n\n\n    return any(is_perfect_square(num) for num in nums)", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list is sorted in non-decreasing order.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return arr == sorted(arr)\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g()) == True\n\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 475, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list is sorted in non-decreasing order.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return arr == sorted(arr)", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5]):\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> List[str]:\n    \"\"\"\n    Given a string s, return a list of all substrings of s.\n\n    Sample Input:\n    s = \"abc\"\n\n    Sample Output:\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \"\"\"\n    substrings = []\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substrings.append(s[i:j])\n    return substrings\n\ndef g(s: str = \"abc\"):\n    return s\n\nassert f(g()) == [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 475, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> List[str]:\n    \"\"\"\n    Given a string s, return a list of all substrings of s.\n\n    Sample Input:\n    s = \"abc\"\n\n    Sample Output:\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \"\"\"\n    substrings = []\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substrings.append(s[i:j])\n    return substrings", "solution_func": "def g(s: str = \"abc\"):\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given array contains a pair of numbers whose product is a perfect square.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > 0 and int(product ** 0.5) ** 2 == product:\n                return True\n    return False\n\ndef g(arr=[2, 4, 6, 8, 10]):\n    return arr\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 475, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given array contains a pair of numbers whose product is a perfect square.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > 0 and int(product ** 0.5) ** 2 == product:\n                return True\n    return False", "solution_func": "def g(arr=[2, 4, 6, 8, 10]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there are three numbers in the given list that add up to the target number.\n\n    Sample input:\n    [1, 2, 3, 4, 5], 9\n\n    Sample output:\n    True\n\n    Explanation:\n    The numbers 2, 4, and 3 add up to 9.\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            total = nums[i] + nums[left] + nums[right]\n            if total == target:\n                return True\n            elif total < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (nums, target)\n\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 476, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there are three numbers in the given list that add up to the target number.\n\n    Sample input:\n    [1, 2, 3, 4, 5], 9\n\n    Sample output:\n    True\n\n    Explanation:\n    The numbers 2, 4, and 3 add up to 9.\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            total = nums[i] + nums[left] + nums[right]\n            if total == target:\n                return True\n            elif total < target:\n                left += 1\n            else:\n                right -= 1\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (nums, target)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with all the duplicates removed and the remaining elements in the same order.\n\n    Sample input:\n    [1, 2, 3, 3, 4, 4, 5]\n\n    Sample output:\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    return list(dict.fromkeys(nums))\n\ndef g(nums: List[int] = [1, 2, 3, 3, 4, 4, 5]):\n    return (nums,)\n\nassert f(*g()) == [1, 2, 3, 4, 5]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 476, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with all the duplicates removed and the remaining elements in the same order.\n\n    Sample input:\n    [1, 2, 3, 3, 4, 4, 5]\n\n    Sample output:\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    return list(dict.fromkeys(nums))", "solution_func": "def g(nums: List[int] = [1, 2, 3, 3, 4, 4, 5]):\n    return (nums,)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the sum of all even numbers in the list.\n\n    Sample input:\n    [1, 2, 3, 4, 5, 6]\n\n    Sample output:\n    12\n    \"\"\"\n    return sum(num for num in nums if num % 2 == 0)\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6]):\n    return (nums,)\n\nassert f(*g()) == 12\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 476, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the sum of all even numbers in the list.\n\n    Sample input:\n    [1, 2, 3, 4, 5, 6]\n\n    Sample output:\n    12\n    \"\"\"\n    return sum(num for num in nums if num % 2 == 0)", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6]):\n    return (nums,)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if any two numbers in the list add up to the target number.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n    output: True\n\n    Explanation: The numbers 2 and 5 add up to 7.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 7\n\nassert f(*g()) == True\n\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 476, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if any two numbers in the list add up to the target number.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n    output: True\n\n    Explanation: The numbers 2 and 5 add up to 7.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5], 7", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with only the even numbers.\n\n    Example:\n    arr = [1, 2, 3, 4, 5]\n    output: [2, 4]\n    \"\"\"\n    return [num for num in arr if num % 2 == 0]\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == [2, 4]\n\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 476, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with only the even numbers.\n\n    Example:\n    arr = [1, 2, 3, 4, 5]\n    output: [2, 4]\n    \"\"\"\n    return [num for num in arr if num % 2 == 0]", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target number, return a new list with all occurrences of the target number removed.\n\n    Example:\n    arr = [1, 2, 3, 4, 2, 5]\n    target = 2\n    output: [1, 3, 4, 5]\n    \"\"\"\n    return [num for num in arr if num != target]\n\ndef g():\n    return [1, 2, 3, 4, 2, 5], 2\n\nassert f(*g()) == [1, 3, 4, 5]\n\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0], "idx_generation": 476, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target number, return a new list with all occurrences of the target number removed.\n\n    Example:\n    arr = [1, 2, 3, 4, 2, 5]\n    target = 2\n    output: [1, 3, 4, 5]\n    \"\"\"\n    return [num for num in arr if num != target]", "solution_func": "def g():\n    return [1, 2, 3, 4, 2, 5], 2", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 1, 1]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the product of all the elements in the list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n\n    The product of all the elements in the list is 1 * 2 * 3 * 4 * 5 = 120.\n    Therefore, f(nums) returns 120.\n    \"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n    return product\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == 120\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 476, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the product of all the elements in the list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n\n    The product of all the elements in the list is 1 * 2 * 3 * 4 * 5 = 120.\n    Therefore, f(nums) returns 120.\n    \"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n    return product", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list is sorted in ascending order.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n\n    The list is sorted in ascending order.\n    Therefore, f(nums) returns True.\n    \"\"\"\n    for i in range(len(nums) - 1):\n        if nums[i] > nums[i + 1]:\n            return False\n    return True\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 476, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list is sorted in ascending order.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n\n    The list is sorted in ascending order.\n    Therefore, f(nums) returns True.\n    \"\"\"\n    for i in range(len(nums) - 1):\n        if nums[i] > nums[i + 1]:\n            return False\n    return True", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the number of even numbers in the list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    There are 5 even numbers in the list.\n    Therefore, f(nums) returns 5.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num % 2 == 0:\n            count += 1\n    return count\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g()) == 5\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 476, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the number of even numbers in the list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    There are 5 even numbers in the list.\n    Therefore, f(nums) returns 5.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num % 2 == 0:\n            count += 1\n    return count", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if the list is in strictly increasing order, otherwise return False.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return all(arr[i] < arr[i+1] for i in range(len(arr)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 476, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if the list is in strictly increasing order, otherwise return False.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return all(arr[i] < arr[i+1] for i in range(len(arr)-1))", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there is a subset of numbers that sums up to the target value\n    \"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\n\ndef g(target=0):\n    return [1, 2, 4, 5, 7, 10]\n\nassert f(g()) == True\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 477, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there is a subset of numbers that sums up to the target value\n    \"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)", "solution_func": "def g(target=0):\n    return [1, 2, 4, 5, 7, 10]", "map_ix": [0, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=10, b=5, c=3) -> bool:\n    \"\"\"\n    Find n such that n + a == b * (the sum of the first c integers)\n    \"\"\"\n    return n + a == b * sum([i for i in range(1, c+1)])\n\ndef g(a=10, b=5, c=3):\n    return -a + b * sum([i for i in range(1, c+1)])\n\nassert f(g())\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 477, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=10, b=5, c=3) -> bool:\n    \"\"\"\n    Find n such that n + a == b * (the sum of the first c integers)\n    \"\"\"\n    return n + a == b * sum([i for i in range(1, c+1)])", "solution_func": "def g(a=10, b=5, c=3):\n    return -a + b * sum([i for i in range(1, c+1)])", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find two numbers in the list that add up to the given target.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return [nums[i], nums[j]]\n    return []\n\ndef g(target=12):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g(), target=12) == [3, 9]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 477, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find two numbers in the list that add up to the given target.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return [nums[i], nums[j]]\n    return []", "solution_func": "def g(target=12):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\n\ndef f(nums: List[int], k: int) -> List[int]:\n    \"\"\"\n    Given a list of integers `nums` and an integer `k`, find all pairs of numbers in `nums` whose sum is equal to `k`.\n    Return a list of tuples containing the pairs.\n    \"\"\"\n    result = []\n    num_set = set()\n    for num in nums:\n        complement = k - num\n        if complement in num_set:\n            result.append((num, complement))\n        num_set.add(num)\n    return result\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], k: int = 7):\n    return nums, k\n\nassert f(*g()) == [(2, 5), (3, 4)]\n\n", "emb": null, "idx_generation": 477, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int], k: int) -> List[int]:\n    \"\"\"\n    Given a list of integers `nums` and an integer `k`, find all pairs of numbers in `nums` whose sum is equal to `k`.\n    Return a list of tuples containing the pairs.\n    \"\"\"\n    result = []\n    num_set = set()\n    for num in nums:\n        complement = k - num\n        if complement in num_set:\n            result.append((num, complement))\n        num_set.add(num)\n    return result", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], k: int = 7):\n    return nums, k", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\n\ndef f(s: str, substr: str) -> bool:\n    \"\"\"\n    Determine if the given substring `substr` is a palindrome and appears in the string `s`.\n    \"\"\"\n    return substr == substr[::-1] and substr in s\n\ndef g(s: str = \"racecar\", substr: str = \"race\"):\n    return s, substr\n\nassert f(*g()) == True\n\n", "emb": null, "idx_generation": 477, "target_skills": null, "problem_func": "from typing import*\n\ndef f(s: str, substr: str) -> bool:\n    \"\"\"\n    Determine if the given substring `substr` is a palindrome and appears in the string `s`.\n    \"\"\"\n    return substr == substr[::-1] and substr in s", "solution_func": "def g(s: str = \"racecar\", substr: str = \"race\"):\n    return s, substr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(nums: List[int], k: int) -> int:\n    \"\"\"\n    Given a list of integers `nums` and an integer `k`, find the maximum sum of any subarray of size `k` in `nums`.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    start = 0\n    for end, num in enumerate(nums):\n        curr_sum += num\n        if end >= k - 1:\n            max_sum = max(max_sum, curr_sum)\n            curr_sum -= nums[start]\n            start += 1\n    return max_sum\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], k: int = 3):\n    return nums, k\n\nassert f(*g()) == 12\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 477, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int], k: int) -> int:\n    \"\"\"\n    Given a list of integers `nums` and an integer `k`, find the maximum sum of any subarray of size `k` in `nums`.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    start = 0\n    for end, num in enumerate(nums):\n        curr_sum += num\n        if end >= k - 1:\n            max_sum = max(max_sum, curr_sum)\n            curr_sum -= nums[start]\n            start += 1\n    return max_sum", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], k: int = 3):\n    return nums, k", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the sum of all the even elements in the list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n\n    The sum of all the even elements in the list is 2 + 4 = 6.\n    Therefore, f(nums) returns 6.\n    \"\"\"\n    even_sum = 0\n    for num in nums:\n        if num % 2 == 0:\n            even_sum += num\n    return even_sum\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == 6\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 477, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the sum of all the even elements in the list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n\n    The sum of all the even elements in the list is 2 + 4 = 6.\n    Therefore, f(nums) returns 6.\n    \"\"\"\n    even_sum = 0\n    for num in nums:\n        if num % 2 == 0:\n            even_sum += num\n    return even_sum", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the difference between the maximum and minimum elements in the list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n\n    The maximum element in the list is 5 and the minimum element is 1.\n    Therefore, f(nums) returns 5 - 1 = 4.\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    max_num = min_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    return max_num - min_num\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == 4\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 477, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the difference between the maximum and minimum elements in the list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n\n    The maximum element in the list is 5 and the minimum element is 1.\n    Therefore, f(nums) returns 5 - 1 = 4.\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    max_num = min_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    return max_num - min_num", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target value, find the number of occurrences of the target value in the list.\n\n    Example:\n    nums = [2, 4, 2, 1, 2, 3, 2]\n    target = 2\n\n    The target value 2 occurs 4 times in the list.\n    Therefore, f(nums, target) returns 4.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num == target:\n            count += 1\n    return count\n\ndef g(nums: List[int] = [2, 4, 2, 1, 2, 3, 2]):\n    return nums\n\nassert f(g(), 2) == 4\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 477, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target value, find the number of occurrences of the target value in the list.\n\n    Example:\n    nums = [2, 4, 2, 1, 2, 3, 2]\n    target = 2\n\n    The target value 2 occurs 4 times in the list.\n    Therefore, f(nums, target) returns 4.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num == target:\n            count += 1\n    return count", "solution_func": "def g(nums: List[int] = [2, 4, 2, 1, 2, 3, 2]):\n    return nums", "map_ix": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains exactly four consecutive numbers in decreasing order.\n    \"\"\"\n    for i in range(len(nums) - 3):\n        if nums[i] == nums[i+1] + 1 == nums[i+2] + 2 == nums[i+3] + 3:\n            return True\n    return False\n\ndef g():\n    return [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 477, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains exactly four consecutive numbers in decreasing order.\n    \"\"\"\n    for i in range(len(nums) - 3):\n        if nums[i] == nums[i+1] + 1 == nums[i+2] + 2 == nums[i+3] + 3:\n            return True\n    return False", "solution_func": "def g():\n    return [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"\n    Return True if there exists a pair of numbers in the list whose product is equal to the target value.\n    \"\"\"\n    return any(arr[i] * arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr)))\ndef g(target=0):\n    arr = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n    return arr\nassert f(g()) == False\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 478, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"\n    Return True if there exists a pair of numbers in the list whose product is equal to the target value.\n    \"\"\"\n    return any(arr[i] * arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr)))", "solution_func": "def g(target=0):\n    arr = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n    \"\"\"\n    return s == s[::-1]\ndef g():\n    s = \"racecar\"\n    return s\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 478, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n    \"\"\"\n    return s == s[::-1]", "solution_func": "def g():\n    s = \"racecar\"\n    return s", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a square matrix.\n    \"\"\"\n    return all(len(row) == len(matrix) for row in matrix)\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 478, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a square matrix.\n    \"\"\"\n    return all(len(row) == len(matrix) for row in matrix)", "solution_func": "def g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(words: List[str], target_length=15) -> bool:\n    \"\"\"\n    Check if there is a combination of words that has a total length greater than or equal to the target length.\n    \"\"\"\n    def combination_length(words, target_length):\n        if target_length <= 0:\n            return True\n        if not words or target_length < 0:\n            return False\n        return combination_length(words[1:], target_length - len(words[0])) or combination_length(words[1:], target_length)\n    return combination_length(words, target_length)\n\ndef g(target_length=15):\n    return [\"apple\", \"banana\", \"grape\", \"kiwi\", \"orange\"]\n\nassert f(g()) == True\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 478, "target_skills": null, "problem_func": "from typing import*\ndef f(words: List[str], target_length=15) -> bool:\n    \"\"\"\n    Check if there is a combination of words that has a total length greater than or equal to the target length.\n    \"\"\"\n    def combination_length(words, target_length):\n        if target_length <= 0:\n            return True\n        if not words or target_length < 0:\n            return False\n        return combination_length(words[1:], target_length - len(words[0])) or combination_length(words[1:], target_length)\n    return combination_length(words, target_length)", "solution_func": "def g(target_length=15):\n    return [\"apple\", \"banana\", \"grape\", \"kiwi\", \"orange\"]", "map_ix": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Given a list of integers, find the two numbers that add up to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for i in range(len(nums)):\n        complement = target - nums[i]\n        if complement in nums_set and complement != nums[i]:\n            return True\n    return False\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8, 10]):\n    return nums\n\nassert f(g()) == False\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 478, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Given a list of integers, find the two numbers that add up to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for i in range(len(nums)):\n        complement = target - nums[i]\n        if complement in nums_set and complement != nums[i]:\n            return True\n    return False", "solution_func": "def g(nums: List[int] = [2, 5, 3, 4, 8, 10]):\n    return nums", "map_ix": [1, 0, 1, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int = 10) -> bool:\n    \"\"\"\n    Given a matrix of integers, find if there exists a row or column whose sum is equal to the target.\n    If such a row or column exists, return True. Otherwise, return False.\n    \"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    \n    for i in range(n):\n        row_sum = sum(matrix[i])\n        if row_sum == target:\n            return True\n\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum == target:\n            return True\n\n    return False\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == False\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "idx_generation": 478, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int = 10) -> bool:\n    \"\"\"\n    Given a matrix of integers, find if there exists a row or column whose sum is equal to the target.\n    If such a row or column exists, return True. Otherwise, return False.\n    \"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    \n    for i in range(n):\n        row_sum = sum(matrix[i])\n        if row_sum == target:\n            return True\n\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum == target:\n            return True\n\n    return False", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, a=18, b=63, c=30) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])\n\ndef g(a = 18, b = 63, c = 30):\n    return -a + sum([b * i for i in range(c)]) + 1\n\nassert f(g())\n", "emb": null, "idx_generation": 478, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=18, b=63, c=30) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])", "solution_func": "def g(a = 18, b = 63, c = 30):\n    return -a + sum([b * i for i in range(c)]) + 1", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains any duplicate elements.\n    \"\"\"\n    return len(set(nums)) < len(nums)\n\ndef g(nums: List[int] = [1, 1, 1, 2, 2, 3, 4]):\n    \"\"\"\n    This solution returns the input list as is\n    \"\"\"\n    return nums\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 478, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains any duplicate elements.\n    \"\"\"\n    return len(set(nums)) < len(nums)", "solution_func": "def g(nums: List[int] = [1, 1, 1, 2, 2, 3, 4]):\n    \"\"\"\n    This solution returns the input list as is\n    \"\"\"\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, a=18, b=63, c=30) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])\n\ndef g(a = 18, b = 63, c = 30):\n    return -a + sum([b * i for i in range(c)]) - 1\n\nassert f(g())\n", "emb": null, "idx_generation": 478, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=18, b=63, c=30) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])", "solution_func": "def g(a = 18, b = 63, c = 30):\n    return -a + sum([b * i for i in range(c)]) - 1", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target.\"\"\"\n    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n        if curr_sum == target:\n            return True\n    return False\n\ndef g() -> Tuple[List[int], int]:\n    return ([1, 2, 3, 4, 5], 9)\n\nassert f(*g()) == True\n\n", "emb": null, "idx_generation": 478, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target.\"\"\"\n    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n        if curr_sum == target:\n            return True\n    return False", "solution_func": "def g() -> Tuple[List[int], int]:\n    return ([1, 2, 3, 4, 5], 9)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], k: int, target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target sum, find if there are k non-negative integers in the list that sum up to the target.\n    \"\"\"\n    if k == 0 and target == 0:\n        return True\n    elif k == 0 or target <= 0 or len(nums) == 0:\n        return False\n    else:\n        return f(nums[1:], k-1, target-nums[0]) or f(nums[1:], k, target)\n\ndef g(nums=[2, 4, 6, 8, 10], k=3, target=18):\n    return nums\n\nassert f(g(), k=3, target=18)\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 479, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], k: int, target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target sum, find if there are k non-negative integers in the list that sum up to the target.\n    \"\"\"\n    if k == 0 and target == 0:\n        return True\n    elif k == 0 or target <= 0 or len(nums) == 0:\n        return False\n    else:\n        return f(nums[1:], k-1, target-nums[0]) or f(nums[1:], k, target)", "solution_func": "def g(nums=[2, 4, 6, 8, 10], k=3, target=18):\n    return nums", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n: int) -> int:\n    \"\"\"\n    Given a string and an integer n, find the number of times the character 'a' appears in the first n characters of the string.\n    \"\"\"\n    return s[:n].count('a')\n\ndef g(s='banana', n=5):\n    return s\n\nassert f(g(), n=5) == 3\n", "emb": null, "idx_generation": 479, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n: int) -> int:\n    \"\"\"\n    Given a string and an integer n, find the number of times the character 'a' appears in the first n characters of the string.\n    \"\"\"\n    return s[:n].count('a')", "solution_func": "def g(s='banana', n=5):\n    return s", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, find the sum of all the elements in the matrix.\n    \"\"\"\n    return sum(sum(row) for row in matrix)\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 45\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 479, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, find the sum of all the elements in the matrix.\n    \"\"\"\n    return sum(sum(row) for row in matrix)", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is sorted in non-decreasing order.\n    \"\"\"\n    return nums == sorted(nums)\n\ndef g():\n    return [4, 3, 2, 1]\n\nassert f(g()) == False\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 479, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is sorted in non-decreasing order.\n    \"\"\"\n    return nums == sorted(nums)", "solution_func": "def g():\n    return [4, 3, 2, 1]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list x whose sum is equal to the target\"\"\"\n    n = len(x)\n    for i in range(n):\n        for j in range(i+1, n):\n            if x[i] + x[j] == target:\n                return True\n    return False\n\ndef g(x=[1, 2, 3, 4, 5], target=8):\n    return (x, target)\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 479, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list x whose sum is equal to the target\"\"\"\n    n = len(x)\n    for i in range(n):\n        for j in range(i+1, n):\n            if x[i] + x[j] == target:\n                return True\n    return False", "solution_func": "def g(x=[1, 2, 3, 4, 5], target=8):\n    return (x, target)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substrings=['abc', 'def', 'ghi', 'jkl']) -> bool:\n    \"\"\"\n    Check if the given string contains all the substrings in any order, ignoring case.\n    \"\"\"\n    s = s.lower()\n    sub_count = {sub.lower(): 0 for sub in substrings}\n    for sub in substrings:\n        if sub.lower() in s:\n            sub_count[sub.lower()] += 1\n    return all(count > 0 for count in sub_count.values())\n\ndef g(substrings=['ABC', 'DEF', 'GHI', 'JKL']):\n    return ''.join(substrings)\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 479, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substrings=['abc', 'def', 'ghi', 'jkl']) -> bool:\n    \"\"\"\n    Check if the given string contains all the substrings in any order, ignoring case.\n    \"\"\"\n    s = s.lower()\n    sub_count = {sub.lower(): 0 for sub in substrings}\n    for sub in substrings:\n        if sub.lower() in s:\n            sub_count[sub.lower()] += 1\n    return all(count > 0 for count in sub_count.values())", "solution_func": "def g(substrings=['ABC', 'DEF', 'GHI', 'JKL']):\n    return ''.join(substrings)", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target value, return a new list containing only the indices where the target value occurs.\n\n    Example:\n    nums = [2, 4, 2, 1, 2, 3, 2]\n    target = 2\n\n    The target value 2 occurs at indices 0, 2, 4, and 6 in the list.\n    Therefore, f(nums, target) returns [0, 2, 4, 6].\n    \"\"\"\n    indices = []\n    for i, num in enumerate(nums):\n        if num == target:\n            indices.append(i)\n    return indices\n\ndef g(nums: List[int] = [2, 4, 2, 1, 2, 3, 2]):\n    return nums\n\nassert f(g(), 2) == [0, 2, 4, 6]\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 479, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target value, return a new list containing only the indices where the target value occurs.\n\n    Example:\n    nums = [2, 4, 2, 1, 2, 3, 2]\n    target = 2\n\n    The target value 2 occurs at indices 0, 2, 4, and 6 in the list.\n    Therefore, f(nums, target) returns [0, 2, 4, 6].\n    \"\"\"\n    indices = []\n    for i, num in enumerate(nums):\n        if num == target:\n            indices.append(i)\n    return indices", "solution_func": "def g(nums: List[int] = [2, 4, 2, 1, 2, 3, 2]):\n    return nums", "map_ix": [1, 1, 1, 1, 1, 1, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the unique elements in the original list, in the same order.\n\n    Example:\n    nums = [2, 4, 2, 1, 2, 3, 2]\n\n    The unique elements in the list are [2, 4, 1, 3].\n    Therefore, f(nums) returns [2, 4, 1, 3].\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n\ndef g(nums: List[int] = [2, 4, 2, 1, 2, 3, 2]):\n    return nums\n\nassert f(g()) == [2, 4, 1, 3]\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 479, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the unique elements in the original list, in the same order.\n\n    Example:\n    nums = [2, 4, 2, 1, 2, 3, 2]\n\n    The unique elements in the list are [2, 4, 1, 3].\n    Therefore, f(nums) returns [2, 4, 1, 3].\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums", "solution_func": "def g(nums: List[int] = [2, 4, 2, 1, 2, 3, 2]):\n    return nums", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing the elements in reverse order.\n\n    Example:\n    nums = [2, 4, 2, 1, 2, 3, 2]\n\n    The reverse of the list is [2, 3, 2, 1, 2, 4, 2].\n    Therefore, f(nums) returns [2, 3, 2, 1, 2, 4, 2].\n    \"\"\"\n    return nums[::-1]\n\ndef g(nums: List[int] = [2, 4, 2, 1, 2, 3, 2]):\n    return nums\n\nassert f(g()) == [2, 3, 2, 1, 2, 4, 2]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 479, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing the elements in reverse order.\n\n    Example:\n    nums = [2, 4, 2, 1, 2, 3, 2]\n\n    The reverse of the list is [2, 3, 2, 1, 2, 4, 2].\n    Therefore, f(nums) returns [2, 3, 2, 1, 2, 4, 2].\n    \"\"\"\n    return nums[::-1]", "solution_func": "def g(nums: List[int] = [2, 4, 2, 1, 2, 3, 2]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Find if there exist three numbers in the list whose product is equal to the target number.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] * nums[j] * nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g(), 120) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 479, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Find if there exist three numbers in the list whose product is equal to the target number.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] * nums[j] * nums[k] == target:\n                    return True\n    return False", "solution_func": "def g(nums=[2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int], target: int, n = 2) -> bool:\n    \"\"\"Check if there exists a subsequence of the given list that sums up to the target value, with exactly n numbers.\"\"\"\n    def find_subsequence(start, curr_sum, count):\n        if curr_sum == target and count == n:\n            return True\n        if curr_sum > target or start == len(x) or count > n:\n            return False\n        if find_subsequence(start + 1, curr_sum + x[start], count + 1):\n            return True\n        if find_subsequence(start + 1, curr_sum, count):\n            return True\n        return False\n\n    return find_subsequence(0, 0, 0)\n\ndef g(x: List[int] = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target: int = 90):\n    return (x, target)\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 480, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], target: int, n = 2) -> bool:\n    \"\"\"Check if there exists a subsequence of the given list that sums up to the target value, with exactly n numbers.\"\"\"\n    def find_subsequence(start, curr_sum, count):\n        if curr_sum == target and count == n:\n            return True\n        if curr_sum > target or start == len(x) or count > n:\n            return False\n        if find_subsequence(start + 1, curr_sum + x[start], count + 1):\n            return True\n        if find_subsequence(start + 1, curr_sum, count):\n            return True\n        return False\n\n    return find_subsequence(0, 0, 0)", "solution_func": "def g(x: List[int] = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target: int = 90):\n    return (x, target)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(x: List[int], target: int, n = 3) -> bool:\n    \"\"\"Check if there exists a subsequence of the given list that sums up to the target value, with at most n numbers, and the subsequence is in non-decreasing order.\"\"\"\n    def find_subsequence(start, curr_sum, count, last_num):\n        if curr_sum == target:\n            return True\n        if curr_sum > target or start == len(x) or count > n:\n            return False\n        if x[start] >= last_num and find_subsequence(start + 1, curr_sum + x[start], count + 1, x[start]):\n            return True\n        if find_subsequence(start + 1, curr_sum, count, last_num):\n            return True\n        return False\n\n    return find_subsequence(0, 0, 0, float('-inf'))\n\ndef g(x: List[int] = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target: int = 150):\n    return (x, target)\n\nassert f(*g())\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 480, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], target: int, n = 3) -> bool:\n    \"\"\"Check if there exists a subsequence of the given list that sums up to the target value, with at most n numbers, and the subsequence is in non-decreasing order.\"\"\"\n    def find_subsequence(start, curr_sum, count, last_num):\n        if curr_sum == target:\n            return True\n        if curr_sum > target or start == len(x) or count > n:\n            return False\n        if x[start] >= last_num and find_subsequence(start + 1, curr_sum + x[start], count + 1, x[start]):\n            return True\n        if find_subsequence(start + 1, curr_sum, count, last_num):\n            return True\n        return False\n\n    return find_subsequence(0, 0, 0, float('-inf'))", "solution_func": "def g(x: List[int] = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target: int = 150):\n    return (x, target)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: List[int], target: int, n = 3) -> bool:\n    \"\"\"Check if there exists a subsequence of the given list that sums up to the target value, with at most n numbers, and the subsequence is in non-increasing order.\"\"\"\n    def find_subsequence(start, curr_sum, count, last_num):\n        if curr_sum == target:\n            return True\n        if curr_sum > target or start == len(x) or count > n:\n            return False\n        if x[start] <= last_num and find_subsequence(start + 1, curr_sum + x[start], count + 1, x[start]):\n            return True\n        if find_subsequence(start + 1, curr_sum, count, last_num):\n            return True\n        return False\n\n    return find_subsequence(0, 0, 0, float('inf'))\n\ndef g(x: List[int] = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target: int = 150):\n    return (x, target)\n\nassert f(*g())\n", "emb": null, "idx_generation": 480, "target_skills": null, "problem_func": "from typing import*\ndef f(x: List[int], target: int, n = 3) -> bool:\n    \"\"\"Check if there exists a subsequence of the given list that sums up to the target value, with at most n numbers, and the subsequence is in non-increasing order.\"\"\"\n    def find_subsequence(start, curr_sum, count, last_num):\n        if curr_sum == target:\n            return True\n        if curr_sum > target or start == len(x) or count > n:\n            return False\n        if x[start] <= last_num and find_subsequence(start + 1, curr_sum + x[start], count + 1, x[start]):\n            return True\n        if find_subsequence(start + 1, curr_sum, count, last_num):\n            return True\n        return False\n\n    return find_subsequence(0, 0, 0, float('inf'))", "solution_func": "def g(x: List[int] = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target: int = 150):\n    return (x, target)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> int:\n    \"\"\"\n    Find the index of the first occurrence of the target value in the given list.\n    Return -1 if the target value is not found.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 5):\n    return arr, target\n\nassert f(*g()) == 4\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 480, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> int:\n    \"\"\"\n    Find the index of the first occurrence of the target value in the given list.\n    Return -1 if the target value is not found.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 5):\n    return arr, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> int:\n    \"\"\"\n    Find the sum of all numbers in the given list that are divisible by the target value.\n    \"\"\"\n    total = 0\n    for num in arr:\n        if num % target == 0:\n            total += num\n    return total\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 2):\n    return arr, target\n\nassert f(*g()) == 30\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 480, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> int:\n    \"\"\"\n    Find the sum of all numbers in the given list that are divisible by the target value.\n    \"\"\"\n    total = 0\n    for num in arr:\n        if num % target == 0:\n            total += num\n    return total", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 2):\n    return arr, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Remove all occurrences of the target value from the given list.\n    Return the modified list.\n    \"\"\"\n    return [num for num in arr if num != target]\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 5):\n    return arr, target\n\nassert f(*g()) == [1, 2, 3, 4, 6, 7, 8, 9, 10]\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 480, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Remove all occurrences of the target value from the given list.\n    Return the modified list.\n    \"\"\"\n    return [num for num in arr if num != target]", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 5):\n    return arr, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n\n    A magic square is a square matrix where the sum of each row, each column, and both diagonals are equal.\n\n    Sample Input:\n    matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])  # Target sum for rows, columns, and diagonals\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for col in zip(*matrix):\n        if sum(col) != target_sum:\n            return False\n\n    # Check diagonal from top-left to bottom-right\n    diagonal1 = [matrix[i][i] for i in range(n)]\n    if sum(diagonal1) != target_sum:\n        return False\n\n    # Check diagonal from top-right to bottom-left\n    diagonal2 = [matrix[i][n-i-1] for i in range(n)]\n    if sum(diagonal2) != target_sum:\n        return False\n    \n    return True\n\ndef g(matrix: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix\n\nassert f(g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 480, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n\n    A magic square is a square matrix where the sum of each row, each column, and both diagonals are equal.\n\n    Sample Input:\n    matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])  # Target sum for rows, columns, and diagonals\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for col in zip(*matrix):\n        if sum(col) != target_sum:\n            return False\n\n    # Check diagonal from top-left to bottom-right\n    diagonal1 = [matrix[i][i] for i in range(n)]\n    if sum(diagonal1) != target_sum:\n        return False\n\n    # Check diagonal from top-right to bottom-left\n    diagonal2 = [matrix[i][n-i-1] for i in range(n)]\n    if sum(diagonal2) != target_sum:\n        return False\n    \n    return True", "solution_func": "def g(matrix: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix", "map_ix": [1, 1, 0, 1, 0, 0, 1, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport numpy as np\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n\n    A magic square is a square matrix where the sum of each row, each column, and both diagonals are equal.\n\n    Sample Input:\n    matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])  # Target sum for rows, columns, and diagonals\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for col in np.transpose(matrix):\n        if sum(col) != target_sum:\n            return False\n\n    # Check diagonal from top-left to bottom-right\n    diagonal1 = [matrix[i][i] for i in range(n)]\n    if sum(diagonal1) != target_sum:\n        return False\n\n    # Check diagonal from top-right to bottom-left\n    diagonal2 = [matrix[i][n-i-1] for i in range(n)]\n    if sum(diagonal2) != target_sum:\n        return False\n    \n    return True\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == False\n\n", "emb": [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 480, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n\n    A magic square is a square matrix where the sum of each row, each column, and both diagonals are equal.\n\n    Sample Input:\n    matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])  # Target sum for rows, columns, and diagonals\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for col in np.transpose(matrix):\n        if sum(col) != target_sum:\n            return False\n\n    # Check diagonal from top-left to bottom-right\n    diagonal1 = [matrix[i][i] for i in range(n)]\n    if sum(diagonal1) != target_sum:\n        return False\n\n    # Check diagonal from top-right to bottom-left\n    diagonal2 = [matrix[i][n-i-1] for i in range(n)]\n    if sum(diagonal2) != target_sum:\n        return False\n    \n    return True", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [1, 1, 1, 1, 0, 1, 1, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport numpy as np\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n\n    A magic square is a square matrix where the sum of each row, each column, and both diagonals are equal.\n\n    Sample Input:\n    matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])  # Target sum for rows, columns, and diagonals\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for col in np.transpose(matrix):\n        if sum(col) != target_sum:\n            return False\n\n    # Check diagonal from top-left to bottom-right\n    diagonal1 = [matrix[i][i] for i in range(n)]\n    if sum(diagonal1) != target_sum:\n        return False\n\n    # Check diagonal from top-right to bottom-left\n    diagonal2 = [matrix[i][n-i-1] for i in range(n)]\n    if sum(diagonal2) != target_sum:\n        return False\n    \n    return True\n\ndef g(matrix: List[List[int]] = [[3, 7, 5], [4, 5, 6], [9, 2, 1]]):\n    return matrix\n\nassert f(g()) == False\n\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 480, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n\n    A magic square is a square matrix where the sum of each row, each column, and both diagonals are equal.\n\n    Sample Input:\n    matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])  # Target sum for rows, columns, and diagonals\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for col in np.transpose(matrix):\n        if sum(col) != target_sum:\n            return False\n\n    # Check diagonal from top-left to bottom-right\n    diagonal1 = [matrix[i][i] for i in range(n)]\n    if sum(diagonal1) != target_sum:\n        return False\n\n    # Check diagonal from top-right to bottom-left\n    diagonal2 = [matrix[i][n-i-1] for i in range(n)]\n    if sum(diagonal2) != target_sum:\n        return False\n    \n    return True", "solution_func": "def g(matrix: List[List[int]] = [[3, 7, 5], [4, 5, 6], [9, 2, 1]]):\n    return matrix", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size with diagonal elements as 1\n    \"\"\"\n    return [[1 if i >= j else 0 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n\n\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 480, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size with diagonal elements as 1\n    \"\"\"\n    return [[1 if i >= j else 0 for j in range(size)] for i in range(size)]", "map_ix": [1, 0, 1, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a checkerboard pattern.\n    A checkerboard pattern is a grid where the elements form a pattern that alternates between odd and even numbers.\n\n    Sample Input:\n    arr = [[1, 2, 1], [2, 1, 2], [1, 2, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(n):\n        for j in range(m):\n            if (i + j) % 2 == 0:\n                if arr[i][j] % 2 != 1:\n                    return False\n            else:\n                if arr[i][j] % 2 != 0:\n                    return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 1], [2, 1, 2], [1, 2, 1]]):\n    return arr\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 481, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a checkerboard pattern.\n    A checkerboard pattern is a grid where the elements form a pattern that alternates between odd and even numbers.\n\n    Sample Input:\n    arr = [[1, 2, 1], [2, 1, 2], [1, 2, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(n):\n        for j in range(m):\n            if (i + j) % 2 == 0:\n                if arr[i][j] % 2 != 1:\n                    return False\n            else:\n                if arr[i][j] % 2 != 0:\n                    return False\n\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 1], [2, 1, 2], [1, 2, 1]]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a grid where the sum of each row, column, and diagonal is the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    target_sum = sum(arr[0])\n\n    # Check rows\n    for i in range(n):\n        if sum(arr[i]) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(m):\n        if sum(arr[i][j] for i in range(n)) != target_sum:\n            return False\n\n    # Check diagonals\n    if sum(arr[i][i] for i in range(n)) != target_sum or sum(arr[i][n-i-1] for i in range(n)) != target_sum:\n        return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return arr\n\nassert f(g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 481, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a grid where the sum of each row, column, and diagonal is the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    target_sum = sum(arr[0])\n\n    # Check rows\n    for i in range(n):\n        if sum(arr[i]) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(m):\n        if sum(arr[i][j] for i in range(n)) != target_sum:\n            return False\n\n    # Check diagonals\n    if sum(arr[i][i] for i in range(n)) != target_sum or sum(arr[i][n-i-1] for i in range(n)) != target_sum:\n        return False\n\n    return True", "solution_func": "def g(arr: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return arr", "map_ix": [1, 1, 0, 0, 0, 1, 1, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a staircase pattern.\n    A staircase pattern is a grid where the elements form a pattern that is strictly increasing along both rows and columns.\n\n    Sample Input:\n    arr = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(n):\n        for j in range(m):\n            if i > 0 and arr[i][j] <= arr[i-1][j]:\n                return False\n            if j > 0 and arr[i][j] <= arr[i][j-1]:\n                return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]):\n    return arr\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 481, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a staircase pattern.\n    A staircase pattern is a grid where the elements form a pattern that is strictly increasing along both rows and columns.\n\n    Sample Input:\n    arr = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(n):\n        for j in range(m):\n            if i > 0 and arr[i][j] <= arr[i-1][j]:\n                return False\n            if j > 0 and arr[i][j] <= arr[i][j-1]:\n                return False\n\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]):\n    return arr", "map_ix": [1, 0, 1, 0, 0, 1, 1, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport numpy as np\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix, return the sum of the elements in the lower triangle (including the main diagonal).\n\n    Example:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    The lower triangle elements are: 1, 4, 5, 7, 8, 9\n    The sum of these elements is 34.\n    \"\"\"\n    lower_triangle = np.tril(matrix)\n    return np.sum(lower_triangle)\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == 34\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 481, "target_skills": null, "problem_func": "from typing import*\nimport numpy as np\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix, return the sum of the elements in the lower triangle (including the main diagonal).\n\n    Example:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    The lower triangle elements are: 1, 4, 5, 7, 8, 9\n    The sum of these elements is 34.\n    \"\"\"\n    lower_triangle = np.tril(matrix)\n    return np.sum(lower_triangle)", "solution_func": "def g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": [1, 0, 1, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix, find the maximum value in each row and return the sum of these maximum values.\n\n    Example:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    The maximum values in each row are: 3, 6, 9\n    The sum of these maximum values is 18.\n    \"\"\"\n    return sum(max(row) for row in matrix)\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == 18\n", "emb": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 481, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix, find the maximum value in each row and return the sum of these maximum values.\n\n    Example:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    The maximum values in each row are: 3, 6, 9\n    The sum of these maximum values is 18.\n    \"\"\"\n    return sum(max(row) for row in matrix)", "solution_func": "def g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "map_ix": [1, 1, 1, 1, 1, 1, 1, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, check if it is a symmetric matrix.\n\n    Example:\n    [[1, 2, 3],\n     [2, 4, 5],\n     [3, 5, 6]]\n\n    The matrix is symmetric, so the output is True.\n    \"\"\"\n    n = len(matrix)\n    return all(matrix[i][j] == matrix[j][i] for i in range(n) for j in range(n))\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 481, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, check if it is a symmetric matrix.\n\n    Example:\n    [[1, 2, 3],\n     [2, 4, 5],\n     [3, 5, 6]]\n\n    The matrix is symmetric, so the output is True.\n    \"\"\"\n    n = len(matrix)\n    return all(matrix[i][j] == matrix[j][i] for i in range(n) for j in range(n))", "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if the list contains any duplicate numbers, False otherwise.\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == False\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 481, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if the list contains any duplicate numbers, False otherwise.\n    \"\"\"\n    return len(nums) != len(set(nums))", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix, return the sum of all the elements in the matrix.\n    \"\"\"\n    return sum(sum(row) for row in matrix)\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 45\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 481, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix, return the sum of all the elements in the matrix.\n    \"\"\"\n    return sum(sum(row) for row in matrix)", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target sum, find a pair of numbers in the list that add up to the target sum.\n    Return the pair of numbers as a list, or an empty list if no such pair exists.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target_sum - num\n        if complement in seen:\n            return [complement, num]\n        seen.add(num)\n    return []\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target_sum: int = 7):\n    return (nums, target_sum)\n\nassert f(*g()) == [2, 5]\n\n", "emb": null, "idx_generation": 481, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target sum, find a pair of numbers in the list that add up to the target sum.\n    Return the pair of numbers as a list, or an empty list if no such pair exists.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target_sum - num\n        if complement in seen:\n            return [complement, num]\n        seen.add(num)\n    return []", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target_sum: int = 7):\n    return (nums, target_sum)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, word='python', max_len=10) -> bool:\n    \"\"\"\n    Check if a given string is a palindrome and its length is less than or equal to a specified maximum length.\n    \"\"\"\n    if len(word) <= max_len:\n        return word == s and word == word[::-1]\n    return False\n\ndef g(word='python', max_len=10):\n    if len(word) <= max_len:\n        return word\n    return word[:max_len]\n\nassert f(g())\n", "emb": null, "idx_generation": 481, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, word='python', max_len=10) -> bool:\n    \"\"\"\n    Check if a given string is a palindrome and its length is less than or equal to a specified maximum length.\n    \"\"\"\n    if len(word) <= max_len:\n        return word == s and word == word[::-1]\n    return False", "solution_func": "def g(word='python', max_len=10):\n    if len(word) <= max_len:\n        return word\n    return word[:max_len]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a grid where the sum of each row, column, and diagonal is the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    target_sum = sum(arr[0])\n\n    # Check rows\n    for i in range(n):\n        if sum(arr[i]) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(m):\n        column_sum = sum(arr[i][j] for i in range(n))\n        if column_sum != target_sum:\n            return False\n\n    # Check diagonals\n    diagonal_sum1 = sum(arr[i][i] for i in range(n))\n    diagonal_sum2 = sum(arr[i][n-i-1] for i in range(n))\n    if diagonal_sum1 != target_sum or diagonal_sum2 != target_sum:\n        return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return arr\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 482, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a grid where the sum of each row, column, and diagonal is the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    target_sum = sum(arr[0])\n\n    # Check rows\n    for i in range(n):\n        if sum(arr[i]) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(m):\n        column_sum = sum(arr[i][j] for i in range(n))\n        if column_sum != target_sum:\n            return False\n\n    # Check diagonals\n    diagonal_sum1 = sum(arr[i][i] for i in range(n))\n    diagonal_sum2 = sum(arr[i][n-i-1] for i in range(n))\n    if diagonal_sum1 != target_sum or diagonal_sum2 != target_sum:\n        return False\n\n    return True", "solution_func": "def g(arr: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return arr", "map_ix": [1, 1, 0, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a Latin square.\n    A Latin square is a grid where each row and column contains unique elements.\n\n    Sample Input:\n    arr = [[1, 2, 3], [3, 1, 2], [2, 3, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    # Check rows\n    for i in range(n):\n        if len(set(arr[i])) != m:\n            return False\n\n    # Check columns\n    for j in range(m):\n        column_elements = [arr[i][j] for i in range(n)]\n        if len(set(column_elements)) != n:\n            return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [3, 1, 2], [2, 3, 1]]):\n    return arr\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 482, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a Latin square.\n    A Latin square is a grid where each row and column contains unique elements.\n\n    Sample Input:\n    arr = [[1, 2, 3], [3, 1, 2], [2, 3, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    # Check rows\n    for i in range(n):\n        if len(set(arr[i])) != m:\n            return False\n\n    # Check columns\n    for j in range(m):\n        column_elements = [arr[i][j] for i in range(n)]\n        if len(set(column_elements)) != n:\n            return False\n\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [3, 1, 2], [2, 3, 1]]):\n    return arr", "map_ix": [1, 1, 0, 0, 0, 1, 1, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a diagonal matrix.\n    A diagonal matrix is a grid where all off-diagonal elements are zero.\n\n    Sample Input:\n    arr = [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    # Check off-diagonal elements\n    for i in range(n):\n        for j in range(m):\n            if i != j and arr[i][j] != 0:\n                return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[1, 0, 0], [0, 2, 0], [0, 0, 3]]):\n    return arr\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 482, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a diagonal matrix.\n    A diagonal matrix is a grid where all off-diagonal elements are zero.\n\n    Sample Input:\n    arr = [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    # Check off-diagonal elements\n    for i in range(n):\n        for j in range(m):\n            if i != j and arr[i][j] != 0:\n                return False\n\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 0, 0], [0, 2, 0], [0, 0, 3]]):\n    return arr", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if it is a symmetric matrix.\n    A symmetric matrix is a square matrix that is equal to its transpose.\n    \"\"\"\n    n = len(matrix)\n    transposed_matrix = [[matrix[j][i] for j in range(n)] for i in range(n)]\n    return matrix == transposed_matrix\n\ndef g(matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g()) == False\n", "emb": null, "idx_generation": 482, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if it is a symmetric matrix.\n    A symmetric matrix is a square matrix that is equal to its transpose.\n    \"\"\"\n    n = len(matrix)\n    transposed_matrix = [[matrix[j][i] for j in range(n)] for i in range(n)]\n    return matrix == transposed_matrix", "solution_func": "def g(matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if it is a lower triangular matrix.\n    A lower triangular matrix is a square matrix where all the entries above the main diagonal are zero.\n    \"\"\"\n    n = len(matrix)\n    for i in range(1, n):\n        for j in range(i):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(matrix = [[1, 0, 0], [2, 3, 0], [4, 5, 6]]):\n    return matrix\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 482, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if it is a lower triangular matrix.\n    A lower triangular matrix is a square matrix where all the entries above the main diagonal are zero.\n    \"\"\"\n    n = len(matrix)\n    for i in range(1, n):\n        for j in range(i):\n            if matrix[i][j] != 0:\n                return False\n    return True", "solution_func": "def g(matrix = [[1, 0, 0], [2, 3, 0], [4, 5, 6]]):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if it is a Toeplitz matrix.\n    A Toeplitz matrix is a matrix where every diagonal from top-left to bottom-right has the same elements.\n    \"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(1, n):\n        for j in range(1, m):\n            if matrix[i][j] != matrix[i-1][j-1]:\n                return False\n    return True\n\ndef g(matrix = [[1, 2, 3], [4, 1, 2], [7, 4, 1]]):\n    return matrix\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 482, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if it is a Toeplitz matrix.\n    A Toeplitz matrix is a matrix where every diagonal from top-left to bottom-right has the same elements.\n    \"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(1, n):\n        for j in range(1, m):\n            if matrix[i][j] != matrix[i-1][j-1]:\n                return False\n    return True", "solution_func": "def g(matrix = [[1, 2, 3], [4, 1, 2], [7, 4, 1]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str, target: str) -> bool:\n    \"\"\"\n    Given a string and a target, check if the string contains the target as a substring and the length of the string is divisible by the length of the target.\n    If both conditions are met, return True. Otherwise, return False.\n    \"\"\"\n    if target == \"\":\n        return False\n    \n    return target in string and len(string) % len(target) == 0\n\ndef g(string: str = \"abababab\", target: str = \"ab\"):\n    return string, target\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 482, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str, target: str) -> bool:\n    \"\"\"\n    Given a string and a target, check if the string contains the target as a substring and the length of the string is divisible by the length of the target.\n    If both conditions are met, return True. Otherwise, return False.\n    \"\"\"\n    if target == \"\":\n        return False\n    \n    return target in string and len(string) % len(target) == 0", "solution_func": "def g(string: str = \"abababab\", target: str = \"ab\"):\n    return string, target", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the sum of the first half of the numbers is equal to the sum of the second half of the numbers.\n    If the sums are equal, return True. Otherwise, return False.\n    \"\"\"\n    if len(nums) % 2 != 0:\n        return False\n    \n    half = len(nums) // 2\n    return sum(nums[:half]) == sum(nums[half:])\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6]):\n    return nums\n\nassert f(g()) == False\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 482, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the sum of the first half of the numbers is equal to the sum of the second half of the numbers.\n    If the sums are equal, return True. Otherwise, return False.\n    \"\"\"\n    if len(nums) % 2 != 0:\n        return False\n    \n    half = len(nums) // 2\n    return sum(nums[:half]) == sum(nums[half:])", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Given two numbers n and k, check if the sum of the first k prime numbers is equal to n.\n    If the sum is equal, return True. Otherwise, return False.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = []\n    i = 2\n    while len(primes) < k:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n    \n    return sum(primes) == n\n\ndef g(n: int = 20, k: int = 3):\n    return n, k\n\nassert f(*g()) == True\n", "emb": null, "idx_generation": 482, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Given two numbers n and k, check if the sum of the first k prime numbers is equal to n.\n    If the sum is equal, return True. Otherwise, return False.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = []\n    i = 2\n    while len(primes) < k:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n    \n    return sum(primes) == n", "solution_func": "def g(n: int = 20, k: int = 3):\n    return n, k", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum value in the list.\n    \"\"\"\n    return max(nums)\n\ndef g(nums=[1, 5, 3, 9, 2]):\n    return nums\n\nassert f(g()) == 9\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 482, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum value in the list.\n    \"\"\"\n    return max(nums)", "solution_func": "def g(nums=[1, 5, 3, 9, 2]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[str]]) -> bool:\n    \"\"\"\n    Given a matrix of strings, check if all the strings in each row are the same.\n\n    Sample Input:\n    [[\"apple\", \"apple\", \"apple\"],\n     [\"banana\", \"banana\", \"banana\"],\n     [\"kiwi\", \"orange\", \"grape\"]]\n\n    Sample Output:\n    False\n    \"\"\"\n    for row in matrix:\n        if len(set(row)) > 1:\n            return False\n    return True\n\ndef g() -> List[List[str]]:\n    return [[\"apple\", \"apple\", \"apple\"], [\"banana\", \"banana\", \"banana\"], [\"kiwi\", \"orange\", \"grape\"]]\n\nassert f(g()) == False\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 483, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[str]]) -> bool:\n    \"\"\"\n    Given a matrix of strings, check if all the strings in each row are the same.\n\n    Sample Input:\n    [[\"apple\", \"apple\", \"apple\"],\n     [\"banana\", \"banana\", \"banana\"],\n     [\"kiwi\", \"orange\", \"grape\"]]\n\n    Sample Output:\n    False\n    \"\"\"\n    for row in matrix:\n        if len(set(row)) > 1:\n            return False\n    return True", "solution_func": "def g() -> List[List[str]]:\n    return [[\"apple\", \"apple\", \"apple\"], [\"banana\", \"banana\", \"banana\"], [\"kiwi\", \"orange\", \"grape\"]]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Count the number of pairs of elements in the given list whose sum is equal to the target number.\n\n    Sample input:\n    [1, 2, 3, 4, 5]\n    7\n\n    Sample output:\n    2\n    \"\"\"\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                count += 1\n    return count\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return (nums, target)\n\nassert f(*g()) == 2\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 483, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Count the number of pairs of elements in the given list whose sum is equal to the target number.\n\n    Sample input:\n    [1, 2, 3, 4, 5]\n    7\n\n    Sample output:\n    2\n    \"\"\"\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                count += 1\n    return count", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return (nums, target)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(s: str, word: str) -> bool:\n    \"\"\"Check if the given string ends with the given word.\"\"\"\n    return s.endswith(word)\n\ndef g(word: str = 'world'):\n    return \"Hello \" + word\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 483, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(s: str, word: str) -> bool:\n    \"\"\"Check if the given string ends with the given word.\"\"\"\n    return s.endswith(word)", "solution_func": "def g(word: str = 'world'):\n    return \"Hello \" + word", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size\n    \"\"\"\n    return [[0 if j > i else 1 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 483, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size\n    \"\"\"\n    return [[0 if j > i else 1 for j in range(size)] for i in range(size)]", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i, cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a symmetric matrix of the given size\n    \"\"\"\n    return [[1 if j >= i else 0 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 483, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i, cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a symmetric matrix of the given size\n    \"\"\"\n    return [[1 if j >= i else 0 for j in range(size)] for i in range(size)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a diagonal matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a diagonal matrix of the given size\n    \"\"\"\n    return [[1 if i == j else 0 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 483, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a diagonal matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a diagonal matrix of the given size\n    \"\"\"\n    return [[1 if i == j else 0 for j in range(size)] for i in range(size)]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a square matrix.\n    A square matrix has the same number of rows and columns.\n\n    Sample Input:\n    arr = [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    return n == m\n\ndef g(arr: List[List[int]] = [[1, 0, 0], [0, 2, 0], [0, 0, 3]]):\n    return arr\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 483, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a square matrix.\n    A square matrix has the same number of rows and columns.\n\n    Sample Input:\n    arr = [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    return n == m", "solution_func": "def g(arr: List[List[int]] = [[1, 0, 0], [0, 2, 0], [0, 0, 3]]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a lower triangular matrix.\n    A lower triangular matrix has all elements above the main diagonal equal to zero.\n\n    Sample Input:\n    arr = [[1, 0, 0], [2, 3, 0], [4, 5, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(n):\n        for j in range(i + 1, m):\n            if arr[i][j] != 0:\n                return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[1, 0, 0], [2, 3, 0], [4, 5, 6]]):\n    return arr\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 483, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a lower triangular matrix.\n    A lower triangular matrix has all elements above the main diagonal equal to zero.\n\n    Sample Input:\n    arr = [[1, 0, 0], [2, 3, 0], [4, 5, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(n):\n        for j in range(i + 1, m):\n            if arr[i][j] != 0:\n                return False\n\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 0, 0], [2, 3, 0], [4, 5, 6]]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is an upper triangular matrix.\n    An upper triangular matrix has all elements below the main diagonal equal to zero.\n\n    Sample Input:\n    arr = [[1, 2, 3], [0, 4, 5], [0, 0, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i][j] != 0:\n                return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [0, 4, 5], [0, 0, 6]]):\n    return arr\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 483, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is an upper triangular matrix.\n    An upper triangular matrix has all elements below the main diagonal equal to zero.\n\n    Sample Input:\n    arr = [[1, 2, 3], [0, 4, 5], [0, 0, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i][j] != 0:\n                return False\n\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [0, 4, 5], [0, 0, 6]]):\n    return arr", "map_ix": [1, 0, 1, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if all elements in the list are odd numbers.\"\"\"\n    return all(num % 2 != 0 for num in lst)\n\ndef g():\n    return [1, 3, 5, 7, 9]\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 483, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if all elements in the list are odd numbers.\"\"\"\n    return all(num % 2 != 0 for num in lst)", "solution_func": "def g():\n    return [1, 3, 5, 7, 9]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]], target_area=50, num_points=3) -> bool:\n    \"\"\"\n    Given a list of points in a 2D plane, find the set of points that form a triangle with the largest area.\n    Return True if the area of the triangle is equal to or greater than the target_area, False otherwise.\n    \"\"\"\n    max_area = 0\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            for k in range(j+1, len(points)):\n                x1, y1 = points[i]\n                x2, y2 = points[j]\n                x3, y3 = points[k]\n                area = abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n                if area > max_area:\n                    max_area = area\n    return max_area >= target_area\n\ndef g(points=[(0, 0), (1, 2), (3, 1), (2, 3)]):\n    return points\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 484, "target_skills": null, "problem_func": "from typing import*\ndef f(points: List[Tuple[int, int]], target_area=50, num_points=3) -> bool:\n    \"\"\"\n    Given a list of points in a 2D plane, find the set of points that form a triangle with the largest area.\n    Return True if the area of the triangle is equal to or greater than the target_area, False otherwise.\n    \"\"\"\n    max_area = 0\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            for k in range(j+1, len(points)):\n                x1, y1 = points[i]\n                x2, y2 = points[j]\n                x3, y3 = points[k]\n                area = abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n                if area > max_area:\n                    max_area = area\n    return max_area >= target_area", "solution_func": "def g(points=[(0, 0), (1, 2), (3, 1), (2, 3)]):\n    return points", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, target_length=10) -> bool:\n    \"\"\"\n    Given a string s, find the shortest substring that contains all the vowels (a, e, i, o, u)\n    and has a length greater than or equal to target_length.\n    Return True if such a substring exists, False otherwise.\n    \"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    min_length = float('inf')\n    for i in range(len(s)):\n        for j in range(i+target_length, len(s)+1):\n            substring = s[i:j]\n            if all(v in substring for v in vowels):\n                min_length = min(min_length, len(substring))\n    return min_length < float('inf')\n\ndef g():\n    return \"thequickbrownfoxjumpsoverthelazydog\"\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 484, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target_length=10) -> bool:\n    \"\"\"\n    Given a string s, find the shortest substring that contains all the vowels (a, e, i, o, u)\n    and has a length greater than or equal to target_length.\n    Return True if such a substring exists, False otherwise.\n    \"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    min_length = float('inf')\n    for i in range(len(s)):\n        for j in range(i+target_length, len(s)+1):\n            substring = s[i:j]\n            if all(v in substring for v in vowels):\n                min_length = min(min_length, len(substring))\n    return min_length < float('inf')", "solution_func": "def g():\n    return \"thequickbrownfoxjumpsoverthelazydog\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"\n    Given a list of numbers, find all pairs of numbers that sum up to the target_sum.\n    Return True if at least one pair is found, False otherwise.\n    \"\"\"\n    pairs = set()\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                pairs.add((numbers[i], numbers[j]))\n    return len(pairs) > 0\n\ndef g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return numbers\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 484, "target_skills": null, "problem_func": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"\n    Given a list of numbers, find all pairs of numbers that sum up to the target_sum.\n    Return True if at least one pair is found, False otherwise.\n    \"\"\"\n    pairs = set()\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                pairs.add((numbers[i], numbers[j]))\n    return len(pairs) > 0", "solution_func": "def g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return numbers", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subarray with a sum equal to k.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    k = 7\n    output: True\n    \"\"\"\n    prefix_sum = 0\n    seen = set()\n    seen.add(0)\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum - k in seen:\n            return True\n        seen.add(prefix_sum)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 7\n\nassert f(*g()) == True\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 484, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subarray with a sum equal to k.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    k = 7\n    output: True\n    \"\"\"\n    prefix_sum = 0\n    seen = set()\n    seen.add(0)\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum - k in seen:\n            return True\n        seen.add(prefix_sum)\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5], 7", "map_ix": [1, 1, 0, 1, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subarray with a sum equal to k.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    k = 7\n    output: True\n    \"\"\"\n    prefix_sum = 0\n    seen = set()\n    seen.add(0)\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum - k in seen:\n            return True\n        seen.add(prefix_sum)\n    return False\n\ndef g():\n    return [5, -2, 3, 4, 1], 6\n\nassert f(*g()) == True\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 484, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subarray with a sum equal to k.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    k = 7\n    output: True\n    \"\"\"\n    prefix_sum = 0\n    seen = set()\n    seen.add(0)\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum - k in seen:\n            return True\n        seen.add(prefix_sum)\n    return False", "solution_func": "def g():\n    return [5, -2, 3, 4, 1], 6", "map_ix": [1, 1, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subarray with a sum equal to k.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    k = 7\n    output: True\n    \"\"\"\n    prefix_sum = 0\n    seen = set()\n    seen.add(0)\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum - k in seen:\n            return True\n        seen.add(prefix_sum)\n    return False\n\ndef g():\n    return [-1, -2, -3, -4, -5], -7\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 484, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subarray with a sum equal to k.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    k = 7\n    output: True\n    \"\"\"\n    prefix_sum = 0\n    seen = set()\n    seen.add(0)\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum - k in seen:\n            return True\n        seen.add(prefix_sum)\n    return False", "solution_func": "def g():\n    return [-1, -2, -3, -4, -5], -7", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the sum of the squares of all odd numbers in the list.\n    \"\"\"\n    return sum(num ** 2 for num in nums if num % 2 != 0)\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g()) == 165\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 484, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the sum of the squares of all odd numbers in the list.\n    \"\"\"\n    return sum(num ** 2 for num in nums if num % 2 != 0)", "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if all integers in the list are prime numbers.\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return all(is_prime(num) for num in nums)\n\ndef g(nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return nums\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 484, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if all integers in the list are prime numbers.\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return all(is_prime(num) for num in nums)", "solution_func": "def g(nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return nums", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the list is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums=[1, 2, 3, 2, 1]):\n    return nums\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 484, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the list is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]", "solution_func": "def g(nums=[1, 2, 3, 2, 1]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find two numbers in the list that sum up to the target value and return their indices.\n\n    Sample Input:\n    nums = [2, 7, 11, 15]\n    target = 9\n\n    Sample Output:\n    [0, 1]\n    \"\"\"\n    num_dict = {}\n    for i, num in enumerate(nums):\n        if target - num in num_dict:\n            return [num_dict[target - num], i]\n        num_dict[num] = i\n    return []\n\ndef g():\n    return ([2, 7, 11, 15], 9)\n\nassert f(*g()) == [0, 1]\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 484, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find two numbers in the list that sum up to the target value and return their indices.\n\n    Sample Input:\n    nums = [2, 7, 11, 15]\n    target = 9\n\n    Sample Output:\n    [0, 1]\n    \"\"\"\n    num_dict = {}\n    for i, num in enumerate(nums):\n        if target - num in num_dict:\n            return [num_dict[target - num], i]\n        num_dict[num] = i\n    return []", "solution_func": "def g():\n    return ([2, 7, 11, 15], 9)", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose sum is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 6):\n    return nums, target\n\nassert f(*g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 485, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose sum is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 6):\n    return nums, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the odd numbers in the original list.\n    \"\"\"\n    return [num for num in nums if num % 2 != 0]\n\ndef g():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return (nums,)\n\nassert f(*g()) == [1, 3, 5, 7, 9]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 485, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the odd numbers in the original list.\n    \"\"\"\n    return [num for num in nums if num % 2 != 0]", "solution_func": "def g():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return (nums,)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> int:\n    \"\"\"\n    Given a list of lists of integers, find the minimum sum of a subarray within each list and return the sum of the minimum subarray sums.\n\n    Example:\n    nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    The minimum subarray sums are [1, 4, 7].\n    The sum of the minimum subarray sums is 1 + 4 + 7 = 12.\n\n    Therefore, f(nums) returns 12.\n    \"\"\"\n    result = 0\n    for sublist in nums:\n        min_sum = float('inf')\n        curr_sum = 0\n        for num in sublist:\n            curr_sum += num\n            min_sum = min(min_sum, curr_sum)\n            if curr_sum > 0:\n                curr_sum = 0\n        result += min_sum\n    return result\n\ndef g(nums: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums\n\nassert f(g()) == 12\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 485, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> int:\n    \"\"\"\n    Given a list of lists of integers, find the minimum sum of a subarray within each list and return the sum of the minimum subarray sums.\n\n    Example:\n    nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    The minimum subarray sums are [1, 4, 7].\n    The sum of the minimum subarray sums is 1 + 4 + 7 = 12.\n\n    Therefore, f(nums) returns 12.\n    \"\"\"\n    result = 0\n    for sublist in nums:\n        min_sum = float('inf')\n        curr_sum = 0\n        for num in sublist:\n            curr_sum += num\n            min_sum = min(min_sum, curr_sum)\n            if curr_sum > 0:\n                curr_sum = 0\n        result += min_sum\n    return result", "solution_func": "def g(nums: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the sum of all the odd numbers in the list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    The sum of all the odd numbers in the list is 25.\n    Therefore, f(nums) returns 25.\n    \"\"\"\n    total_sum = 0\n    for num in nums:\n        if num % 2 != 0:\n            total_sum += num\n    return total_sum\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g()) == 25\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 485, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the sum of all the odd numbers in the list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    The sum of all the odd numbers in the list is 25.\n    Therefore, f(nums) returns 25.\n    \"\"\"\n    total_sum = 0\n    for num in nums:\n        if num % 2 != 0:\n            total_sum += num\n    return total_sum", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the second largest number in the list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    The second largest number in the list is 9.\n    Therefore, f(nums) returns 9.\n    \"\"\"\n    largest = float('-inf')\n    second_largest = float('-inf')\n    for num in nums:\n        if num > largest:\n            second_largest = largest\n            largest = num\n        elif num > second_largest and num < largest:\n            second_largest = num\n    return second_largest\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g()) == 9\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 485, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the second largest number in the list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    The second largest number in the list is 9.\n    Therefore, f(nums) returns 9.\n    \"\"\"\n    largest = float('-inf')\n    second_largest = float('-inf')\n    for num in nums:\n        if num > largest:\n            second_largest = largest\n            largest = num\n        elif num > second_largest and num < largest:\n            second_largest = num\n    return second_largest", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with all the duplicate elements removed.\n\n    Example:\n    nums = [1, 2, 3, 2, 4, 5, 6, 4]\n\n    The list with duplicate elements removed is [1, 2, 3, 4, 5, 6].\n    Therefore, f(nums) returns [1, 2, 3, 4, 5, 6].\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n\ndef g(nums: List[int] = [1, 2, 3, 2, 4, 5, 6, 4]):\n    return nums\n\nassert f(g()) == [1, 2, 3, 4, 5, 6]\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 485, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with all the duplicate elements removed.\n\n    Example:\n    nums = [1, 2, 3, 2, 4, 5, 6, 4]\n\n    The list with duplicate elements removed is [1, 2, 3, 4, 5, 6].\n    Therefore, f(nums) returns [1, 2, 3, 4, 5, 6].\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums", "solution_func": "def g(nums: List[int] = [1, 2, 3, 2, 4, 5, 6, 4]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a grid where the sum of each row, each column, and both diagonals are the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    target_sum = sum(arr[0])\n    for i in range(n):\n        if sum(arr[i]) != target_sum:\n            return False\n        if sum(arr[j][i] for j in range(n)) != target_sum:\n            return False\n    if sum(arr[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(arr[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 485, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a grid where the sum of each row, each column, and both diagonals are the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    target_sum = sum(arr[0])\n    for i in range(n):\n        if sum(arr[i]) != target_sum:\n            return False\n        if sum(arr[j][i] for j in range(n)) != target_sum:\n            return False\n    if sum(arr[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(arr[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a grid where the sum of each row, each column, and both diagonals are the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    target_sum = sum(arr[0])\n    for i in range(n):\n        if sum(arr[i]) != target_sum:\n            return False\n        if sum(arr[j][i] for j in range(n)) != target_sum:\n            return False\n    if sum(arr[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(arr[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 485, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a grid where the sum of each row, each column, and both diagonals are the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    target_sum = sum(arr[0])\n    for i in range(n):\n        if sum(arr[i]) != target_sum:\n            return False\n        if sum(arr[j][i] for j in range(n)) != target_sum:\n            return False\n    if sum(arr[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(arr[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [1, 0, 1, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a grid where the sum of each row, each column, and both diagonals are the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    target_sum = sum(arr[0])\n    for i in range(n):\n        if sum(arr[i]) != target_sum:\n            return False\n        if sum(arr[j][i] for j in range(n)) != target_sum:\n            return False\n    if sum(arr[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(arr[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 485, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a grid where the sum of each row, each column, and both diagonals are the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    target_sum = sum(arr[0])\n    for i in range(n):\n        if sum(arr[i]) != target_sum:\n            return False\n        if sum(arr[j][i] for j in range(n)) != target_sum:\n            return False\n    if sum(arr[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(arr[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an upper triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate an upper triangular matrix of the given size\n    \"\"\"\n    return [[0 if j < i else 1 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 485, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an upper triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i):\n            if matrix[i][j] != 0:\n                return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate an upper triangular matrix of the given size\n    \"\"\"\n    return [[0 if j < i else 1 for j in range(size)] for i in range(size)]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D matrix of integers, check if the matrix is an identity matrix.\n    An identity matrix is a square matrix where the diagonal elements are all 1s and the remaining elements are all 0s.\n\n    Sample Input:\n    matrix = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    \n    # Check diagonal elements\n    for i in range(n):\n        if matrix[i][i] != 1:\n            return False\n    \n    # Check non-diagonal elements\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n    \n    return True\n\ndef g(matrix: List[List[int]] = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]):\n    return matrix\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 486, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D matrix of integers, check if the matrix is an identity matrix.\n    An identity matrix is a square matrix where the diagonal elements are all 1s and the remaining elements are all 0s.\n\n    Sample Input:\n    matrix = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    \n    # Check diagonal elements\n    for i in range(n):\n        if matrix[i][i] != 1:\n            return False\n    \n    # Check non-diagonal elements\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n    \n    return True", "solution_func": "def g(matrix: List[List[int]] = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]):\n    return matrix", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D matrix of integers, check if the matrix is a diagonal matrix.\n    A diagonal matrix is a square matrix where all non-diagonal elements are zero.\n\n    Sample Input:\n    matrix = [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    \n    # Check non-diagonal elements\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n    \n    return True\n\ndef g(matrix: List[List[int]] = [[1, 0, 0], [0, 2, 0], [0, 0, 3]]):\n    return matrix\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 486, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D matrix of integers, check if the matrix is a diagonal matrix.\n    A diagonal matrix is a square matrix where all non-diagonal elements are zero.\n\n    Sample Input:\n    matrix = [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    \n    # Check non-diagonal elements\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n    \n    return True", "solution_func": "def g(matrix: List[List[int]] = [[1, 0, 0], [0, 2, 0], [0, 0, 3]]):\n    return matrix", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D matrix of integers, check if the matrix is a symmetric matrix.\n    A symmetric matrix is a square matrix where the element at row i and column j is equal to the element at row j and column i.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    \n    # Check symmetry\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    \n    return True\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 486, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D matrix of integers, check if the matrix is a symmetric matrix.\n    A symmetric matrix is a square matrix where the element at row i and column j is equal to the element at row j and column i.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    \n    # Check symmetry\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    \n    return True", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a sublist in the array that is a palindrome.\n    A palindrome is a sequence that reads the same forwards and backwards.\n\n    Example:\n    arr = [1, 2, 3, 2, 1]\n    output: True\n    \"\"\"\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            sublist = arr[i:j+1]\n            if sublist == sublist[::-1]:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 2, 1]):\n    return arr\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 486, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a sublist in the array that is a palindrome.\n    A palindrome is a sequence that reads the same forwards and backwards.\n\n    Example:\n    arr = [1, 2, 3, 2, 1]\n    output: True\n    \"\"\"\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            sublist = arr[i:j+1]\n            if sublist == sublist[::-1]:\n                return True\n    return False", "solution_func": "def g(arr: List[int] = [1, 2, 3, 2, 1]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a sublist in the list that is a perfect square.\n\n    Example:\n    lst = [1, 2, 3, 4, 5]\n    output: True\n    \"\"\"\n    for i in range(len(lst)-1):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if any(num**0.5 == int(num**0.5) for num in sublist):\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 486, "target_skills": null, "problem_func": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a sublist in the list that is a perfect square.\n\n    Example:\n    lst = [1, 2, 3, 4, 5]\n    output: True\n    \"\"\"\n    for i in range(len(lst)-1):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if any(num**0.5 == int(num**0.5) for num in sublist):\n                return True\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(lst1: List[int], lst2: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a pair of elements, one from each list, that sums up to a perfect square.\n\n    Example:\n    lst1 = [1, 2, 3]\n    lst2 = [4, 5, 6]\n    output: True\n    \"\"\"\n    for num1 in lst1:\n        for num2 in lst2:\n            if (num1 + num2)**0.5 == int((num1 + num2)**0.5):\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3], [4, 5, 6]\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 486, "target_skills": null, "problem_func": "from typing import*\ndef f(lst1: List[int], lst2: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a pair of elements, one from each list, that sums up to a perfect square.\n\n    Example:\n    lst1 = [1, 2, 3]\n    lst2 = [4, 5, 6]\n    output: True\n    \"\"\"\n    for num1 in lst1:\n        for num2 in lst2:\n            if (num1 + num2)**0.5 == int((num1 + num2)**0.5):\n                return True\n    return False", "solution_func": "def g():\n    return [1, 2, 3], [4, 5, 6]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, a=5, b=10, c=3) -> bool:\n    \"\"\"Check if n is divisible by b and is equal to the sum of the first c multiples of a\"\"\"\n    return n % b == 0 and n == sum([a * i for i in range(1, c+1)])\ndef g(a = 5, b = 10, c = 3):\n    return sum([a * i for i in range(1, c+1)]) + b\nassert f(g())\n", "emb": null, "idx_generation": 486, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=5, b=10, c=3) -> bool:\n    \"\"\"Check if n is divisible by b and is equal to the sum of the first c multiples of a\"\"\"\n    return n % b == 0 and n == sum([a * i for i in range(1, c+1)])", "solution_func": "def g(a = 5, b = 10, c = 3):\n    return sum([a * i for i in range(1, c+1)]) + b", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], n=10) -> bool:\n    \"\"\"Check if all the numbers in the list are divisible by n\"\"\"\n    return all(num % n == 0 for num in arr)\ndef g(n=10):\n    return [n*i for i in range(1, 6)]\nassert f(g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], "idx_generation": 486, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], n=10) -> bool:\n    \"\"\"Check if all the numbers in the list are divisible by n\"\"\"\n    return all(num % n == 0 for num in arr)", "solution_func": "def g(n=10):\n    return [n*i for i in range(1, 6)]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 1]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given string s contains exactly n vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count == n\ndef g(n=3):\n    return \"Hello\"\nassert f(g())\n", "emb": null, "idx_generation": 486, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given string s contains exactly n vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count == n", "solution_func": "def g(n=3):\n    return \"Hello\"", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of numbers, check if the sum of all the numbers is a prime number.\n    \"\"\"\n    total = sum(nums)\n    if total < 2:\n        return False\n    for i in range(2, int(total**0.5) + 1):\n        if total % i == 0:\n            return False\n    return True\ndef g():\n    return [2, 4, 6, 8, 10]\nassert f(g()) == False\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 486, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of numbers, check if the sum of all the numbers is a prime number.\n    \"\"\"\n    total = sum(nums)\n    if total < 2:\n        return False\n    for i in range(2, int(total**0.5) + 1):\n        if total % i == 0:\n            return False\n    return True", "solution_func": "def g():\n    return [2, 4, 6, 8, 10]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, return the sum of all the elements in the matrix.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    45\n    \"\"\"\n    total_sum = 0\n    for row in matrix:\n        for num in row:\n            total_sum += num\n    return total_sum\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 45\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 487, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, return the sum of all the elements in the matrix.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    45\n    \"\"\"\n    total_sum = 0\n    for row in matrix:\n        for num in row:\n            total_sum += num\n    return total_sum", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return the maximum element in each row as a list.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    [3, 6, 9]\n    \"\"\"\n    max_elements = []\n    for row in matrix:\n        max_elements.append(max(row))\n    return max_elements\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [3, 6, 9]\n\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 487, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return the maximum element in each row as a list.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    [3, 6, 9]\n    \"\"\"\n    max_elements = []\n    for row in matrix:\n        max_elements.append(max(row))\n    return max_elements", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, return the sum of elements in each column as a list.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    [12, 15, 18]\n    \"\"\"\n    column_sums = [0] * len(matrix[0])\n    for row in matrix:\n        for i, num in enumerate(row):\n            column_sums[i] += num\n    return column_sums\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [12, 15, 18]\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 487, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, return the sum of elements in each column as a list.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    [12, 15, 18]\n    \"\"\"\n    column_sums = [0] * len(matrix[0])\n    for row in matrix:\n        for i, num in enumerate(row):\n            column_sums[i] += num\n    return column_sums", "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Find the number of unique pairs in the list that sum up to the target value.\n    \"\"\"\n    count = 0\n    nums.sort()\n    left = 0\n    right = len(nums) - 1\n    \n    while left < right:\n        curr_sum = nums[left] + nums[right]\n        if curr_sum == target:\n            count += 1\n            left += 1\n            right -= 1\n        elif curr_sum < target:\n            left += 1\n        else:\n            right -= 1\n    \n    return count\n\ndef g(nums: List[int], target: int):\n    return nums, target\n\nassert f(*g([1, 2, 3, 4, 5, 6, 7], 8)) == 3\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 487, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Find the number of unique pairs in the list that sum up to the target value.\n    \"\"\"\n    count = 0\n    nums.sort()\n    left = 0\n    right = len(nums) - 1\n    \n    while left < right:\n        curr_sum = nums[left] + nums[right]\n        if curr_sum == target:\n            count += 1\n            left += 1\n            right -= 1\n        elif curr_sum < target:\n            left += 1\n        else:\n            right -= 1\n    \n    return count", "solution_func": "def g(nums: List[int], target: int):\n    return nums, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Return a list with the duplicates removed while preserving the original order of elements.\n\n    Sample Input:\n    nums = [1, 2, 3, 2, 4, 5, 6, 5, 4]\n\n    Sample Output:\n    [1, 2, 3, 4, 5, 6]\n    \"\"\"\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result\n\ndef g(nums: List[int] = [1, 2, 3, 2, 4, 5, 6, 5, 4]):\n    return nums\n\nassert f(g()) == [1, 2, 3, 4, 5, 6]\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 487, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Return a list with the duplicates removed while preserving the original order of elements.\n\n    Sample Input:\n    nums = [1, 2, 3, 2, 4, 5, 6, 5, 4]\n\n    Sample Output:\n    [1, 2, 3, 4, 5, 6]\n    \"\"\"\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result", "solution_func": "def g(nums: List[int] = [1, 2, 3, 2, 4, 5, 6, 5, 4]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Calculate the sum of the diagonal elements of the given matrix.\n    \"\"\"\n    n = len(matrix)\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += matrix[i][i]\n    return diagonal_sum\n\ndef g(size=3):\n    \"\"\"\n    Generate a square matrix of the given size with random elements\n    \"\"\"\n    import random\n    return [[random.randint(0, 9) for _ in range(size)] for _ in range(size)]\n\nassert f(g()) == 12\n\n", "emb": null, "idx_generation": 487, "target_skills": null, "problem_func": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Calculate the sum of the diagonal elements of the given matrix.\n    \"\"\"\n    n = len(matrix)\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += matrix[i][i]\n    return diagonal_sum", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate a square matrix of the given size with random elements\n    \"\"\"\n    import random\n    return [[random.randint(0, 9) for _ in range(size)] for _ in range(size)]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(n: int, k: int = 3) -> bool:\n    \"\"\"\n    Check if a given number can be expressed as the sum of k consecutive numbers.\n    \"\"\"\n    if k <= 1:\n        return True\n    if k > n:\n        return False\n    for i in range(1, n // 2 + 1):\n        total = 0\n        count = 0\n        for j in range(i, n + 1):\n            total += j\n            count += 1\n            if total == n and count == k:\n                return True\n            if total > n or count > k:\n                break\n    return False\n\ndef g(n: int = 15, k: int = 3):\n    return (n, k)\n\nassert f(*g())\n", "emb": [0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 487, "target_skills": null, "problem_func": "from typing import*\n\ndef f(n: int, k: int = 3) -> bool:\n    \"\"\"\n    Check if a given number can be expressed as the sum of k consecutive numbers.\n    \"\"\"\n    if k <= 1:\n        return True\n    if k > n:\n        return False\n    for i in range(1, n // 2 + 1):\n        total = 0\n        count = 0\n        for j in range(i, n + 1):\n            total += j\n            count += 1\n            if total == n and count == k:\n                return True\n            if total > n or count > k:\n                break\n    return False", "solution_func": "def g(n: int = 15, k: int = 3):\n    return (n, k)", "map_ix": [0, 1, 1, 1, 0, 1, 1, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\n\ndef f(n: int, k: int = 3) -> bool:\n    \"\"\"\n    Check if a given number is a perfect square and can be expressed as the sum of k consecutive natural numbers.\n    \"\"\"\n    if k <= 1:\n        return True\n    if k > n:\n        return False\n    for i in range(1, n // 2 + 1):\n        total = 0\n        count = 0\n        for j in range(i, n + 1):\n            total += j\n            count += 1\n            if total == n and count == k and (n ** 0.5).is_integer():\n                return True\n            if total > n or count > k:\n                break\n    return False\n\ndef g(n: int = 36, k: int = 6):\n    return (n, k)\n\nassert f(*g())\n", "emb": null, "idx_generation": 487, "target_skills": null, "problem_func": "from typing import*\n\ndef f(n: int, k: int = 3) -> bool:\n    \"\"\"\n    Check if a given number is a perfect square and can be expressed as the sum of k consecutive natural numbers.\n    \"\"\"\n    if k <= 1:\n        return True\n    if k > n:\n        return False\n    for i in range(1, n // 2 + 1):\n        total = 0\n        count = 0\n        for j in range(i, n + 1):\n            total += j\n            count += 1\n            if total == n and count == k and (n ** 0.5).is_integer():\n                return True\n            if total > n or count > k:\n                break\n    return False", "solution_func": "def g(n: int = 36, k: int = 6):\n    return (n, k)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\n\ndef f(n: int, k: int = 3) -> bool:\n    \"\"\"\n    Check if a given number can be expressed as the sum of k Fibonacci numbers.\n    \"\"\"\n    fib = [0, 1]\n    while fib[-1] < n:\n        fib.append(fib[-1] + fib[-2])\n    if k <= 1:\n        return True\n    if k > n:\n        return False\n    for i in range(len(fib)):\n        total = 0\n        count = 0\n        for j in range(i, len(fib)):\n            total += fib[j]\n            count += 1\n            if total == n and count == k:\n                return True\n            if total > n or count > k:\n                break\n    return False\n\ndef g(n: int = 34, k: int = 4):\n    return (n, k)\n\nassert f(*g())\n", "emb": null, "idx_generation": 487, "target_skills": null, "problem_func": "from typing import*\n\ndef f(n: int, k: int = 3) -> bool:\n    \"\"\"\n    Check if a given number can be expressed as the sum of k Fibonacci numbers.\n    \"\"\"\n    fib = [0, 1]\n    while fib[-1] < n:\n        fib.append(fib[-1] + fib[-2])\n    if k <= 1:\n        return True\n    if k > n:\n        return False\n    for i in range(len(fib)):\n        total = 0\n        count = 0\n        for j in range(i, len(fib)):\n            total += fib[j]\n            count += 1\n            if total == n and count == k:\n                return True\n            if total > n or count > k:\n                break\n    return False", "solution_func": "def g(n: int = 34, k: int = 4):\n    return (n, k)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a subsequence of even numbers that sums up to a target value.\n\n    A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    \n    Sample output:\n    True\n    \n    Explanation: The subsequence [2, 4] sums up to the target value of 6.\n    \"\"\"\n    target = 6\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            subsequence = nums[i:j]\n            if sum(subsequence) == target and all(num % 2 == 0 for num in subsequence):\n                return True\n    \n    return False\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n\n", "emb": null, "idx_generation": 487, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a subsequence of even numbers that sums up to a target value.\n\n    A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    \n    Sample output:\n    True\n    \n    Explanation: The subsequence [2, 4] sums up to the target value of 6.\n    \"\"\"\n    target = 6\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            subsequence = nums[i:j]\n            if sum(subsequence) == target and all(num % 2 == 0 for num in subsequence):\n                return True\n    \n    return False", "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains at least one number that is a perfect square.\n    \"\"\"\n    def is_perfect_square(n):\n        return n >= 0 and int(n**0.5)**2 == n\n\n    return any(is_perfect_square(num) for num in nums)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == False\n", "emb": null, "idx_generation": 488, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains at least one number that is a perfect square.\n    \"\"\"\n    def is_perfect_square(n):\n        return n >= 0 and int(n**0.5)**2 == n\n\n    return any(is_perfect_square(num) for num in nums)", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str) -> str:\n    \"\"\"\n    Reverse the given string and return the result.\n    \"\"\"\n    return string[::-1]\n\ndef g():\n    return \"Hello, World!\"\n\nassert f(g()) == \"!dlroW ,olleH\"\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 488, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str) -> str:\n    \"\"\"\n    Reverse the given string and return the result.\n    \"\"\"\n    return string[::-1]", "solution_func": "def g():\n    return \"Hello, World!\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains at least one number that is a prime number.\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return any(is_prime(num) for num in nums)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 488, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains at least one number that is a prime number.\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return any(is_prime(num) for num in nums)", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is sorted in non-decreasing order.\n    Return True if the list is sorted, False otherwise.\n    \"\"\"\n    return numbers == sorted(numbers)\n\ndef g(numbers: List[int] = [4, 2, 6, 1, 9]):\n    return (numbers,)\n\nassert f(*g()) == False\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 488, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is sorted in non-decreasing order.\n    Return True if the list is sorted, False otherwise.\n    \"\"\"\n    return numbers == sorted(numbers)", "solution_func": "def g(numbers: List[int] = [4, 2, 6, 1, 9]):\n    return (numbers,)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 488, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n\n    return True", "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers contains any prime numbers.\n    Return True if the list contains primes, False otherwise.\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return any(is_prime(num) for num in nums)\n\ndef g(nums: List[int] = [4, 9, 7, 12, 15]):\n    return (nums,)\n\nassert f(*g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 488, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers contains any prime numbers.\n    Return True if the list contains primes, False otherwise.\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return any(is_prime(num) for num in nums)", "solution_func": "def g(nums: List[int] = [4, 9, 7, 12, 15]):\n    return (nums,)", "map_ix": [1, 1, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Given a list of numbers, find a pair of numbers that sums up to the target number.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    def pair_sum(numbers, target_sum):\n        seen = set()\n        for num in numbers:\n            complement = target_sum - num\n            if complement in seen:\n                return True\n            seen.add(num)\n        return False\n\n    return pair_sum(numbers, target_sum=10)\n\ndef g(numbers=[1, 2, 3, 4, 5]):\n    return numbers\n\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 488, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Given a list of numbers, find a pair of numbers that sums up to the target number.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    def pair_sum(numbers, target_sum):\n        seen = set()\n        for num in numbers:\n            complement = target_sum - num\n            if complement in seen:\n                return True\n            seen.add(num)\n        return False\n\n    return pair_sum(numbers, target_sum=10)", "solution_func": "def g(numbers=[1, 2, 3, 4, 5]):\n    return numbers", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n    Return True if the string is palindrome, False otherwise.\n    \"\"\"\n    return string == string[::-1]\n\ndef g(string: str = \"racecar\"):\n    return string\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 488, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n    Return True if the string is palindrome, False otherwise.\n    \"\"\"\n    return string == string[::-1]", "solution_func": "def g(string: str = \"racecar\"):\n    return string", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an identity matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if i == j and matrix[i][j] != 1:\n                return False\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate an identity matrix of the given size.\n    \"\"\"\n    return [[1 if i == j else 0 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 488, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an identity matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if i == j and matrix[i][j] != 1:\n                return False\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True", "solution_func": "def g(size=3):\n    \"\"\"\n    Generate an identity matrix of the given size.\n    \"\"\"\n    return [[1 if i == j else 0 for j in range(size)] for i in range(size)]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: int, a=93252338) -> bool:\n    \"\"\"Solve a unary negation problem\"\"\"\n    return -x != a\ndef g(a = 93252338):\n    return - a\nassert f(g())\n", "emb": null, "idx_generation": 488, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, a=93252338) -> bool:\n    \"\"\"Solve a unary negation problem\"\"\"\n    return -x != a", "solution_func": "def g(a = 93252338):\n    return - a", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, check if there are two numbers in the list whose sum is equal to the target value.\n    If such numbers exist, return True. Otherwise, return False.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 14\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 489, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, check if there are two numbers in the list whose sum is equal to the target value.\n    If such numbers exist, return True. Otherwise, return False.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 14", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum that can be obtained by adding any two numbers in the list.\n    \"\"\"\n    max_sum = float('-inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            max_sum = max(max_sum, nums[i] + nums[j])\n    return max_sum\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 19\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 489, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum that can be obtained by adding any two numbers in the list.\n    \"\"\"\n    max_sum = float('-inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            max_sum = max(max_sum, nums[i] + nums[j])\n    return max_sum", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the numbers that are divisible by 3 but not divisible by 2.\n    \"\"\"\n    return [num for num in nums if num % 3 == 0 and num % 2 != 0]\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == [3, 9]\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 489, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the numbers that are divisible by 3 but not divisible by 2.\n    \"\"\"\n    return [num for num in nums if num % 3 == 0 and num % 2 != 0]", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target_sum: int = 10) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that sums up to the target_sum.\n    \"\"\"\n    def find_combination(start, curr_sum):\n        if curr_sum == target_sum:\n            return True\n        if curr_sum > target_sum or start == len(nums):\n            return False\n        for i in range(start, len(nums)):\n            if find_combination(i + 1, curr_sum + nums[i]):\n                return True\n        return False\n\n    return find_combination(0, 0)\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is\n    \"\"\"\n    return nums\n\nassert f(g([2, 4, 6, 8, 10])) == True\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 489, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target_sum: int = 10) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that sums up to the target_sum.\n    \"\"\"\n    def find_combination(start, curr_sum):\n        if curr_sum == target_sum:\n            return True\n        if curr_sum > target_sum or start == len(nums):\n            return False\n        for i in range(start, len(nums)):\n            if find_combination(i + 1, curr_sum + nums[i]):\n                return True\n        return False\n\n    return find_combination(0, 0)", "solution_func": "def g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is\n    \"\"\"\n    return nums", "map_ix": [0, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(li: List[int], n=9) -> bool:\n    \"\"\"\n    Given n, find n integers such that li[i] + li[i+1] + li[i+2] == 3*li[i+3], for i = 0, 1, ..., n-3\n    where indices >= n \"wrap around\". Note: only n multiples of 4 are given since this is only possible for n\n    that are multiples of 4.\n\n    Sample input:\n    9\n\n    Sample output:\n    [_, _, _, _, _, _, _, _, _]\n\n    (Sample output hidden because showing sample output would give away too much information.)\n    \"\"\"\n    assert n % 4 == 0, 'Hint: n is a multiple of 4'\n    return len(li) == n and all((li[(i + 3) % n] == li[i] + li[i + 1] + li[i + 2] for i in range(n - 3)))\ndef g(n = 9):\n    return [1, 2, 3, -6] * (n // 4)\nassert f(g())\n", "emb": null, "idx_generation": 489, "target_skills": null, "problem_func": "from typing import*\ndef f(li: List[int], n=9) -> bool:\n    \"\"\"\n    Given n, find n integers such that li[i] + li[i+1] + li[i+2] == 3*li[i+3], for i = 0, 1, ..., n-3\n    where indices >= n \"wrap around\". Note: only n multiples of 4 are given since this is only possible for n\n    that are multiples of 4.\n\n    Sample input:\n    9\n\n    Sample output:\n    [_, _, _, _, _, _, _, _, _]\n\n    (Sample output hidden because showing sample output would give away too much information.)\n    \"\"\"\n    assert n % 4 == 0, 'Hint: n is a multiple of 4'\n    return len(li) == n and all((li[(i + 3) % n] == li[i] + li[i + 1] + li[i + 2] for i in range(n - 3)))", "solution_func": "def g(n = 9):\n    return [1, 2, 3, -6] * (n // 4)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target_sum: int = 30) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that sums up to the target_sum.\n    \"\"\"\n    def find_combination(start, curr_sum):\n        if curr_sum == target_sum:\n            return True\n        if curr_sum > target_sum or start == len(nums):\n            return False\n        for i in range(start, len(nums)):\n            if find_combination(i + 1, curr_sum + nums[i]):\n                return True\n        return False\n\n    return find_combination(0, 0)\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is\n    \"\"\"\n    return nums\n\nassert f(g([5, 10, 15, 20, 25, 30, 35])) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 489, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target_sum: int = 30) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that sums up to the target_sum.\n    \"\"\"\n    def find_combination(start, curr_sum):\n        if curr_sum == target_sum:\n            return True\n        if curr_sum > target_sum or start == len(nums):\n            return False\n        for i in range(start, len(nums)):\n            if find_combination(i + 1, curr_sum + nums[i]):\n                return True\n        return False\n\n    return find_combination(0, 0)", "solution_func": "def g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is\n    \"\"\"\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target number, find and return the indices of three numbers from the list that add up to the target.\n\n    It is guaranteed that there is exactly one solution.\n    \"\"\"\n    n = len(arr)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return [i, j, k]\n    return []\n\ndef g():\n    arr = [2, 4, 7, 11, 15]\n    target = 22\n    return (arr, target)\n\nassert f(*g()) == [0, 1, 3]\n", "emb": null, "idx_generation": 489, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target number, find and return the indices of three numbers from the list that add up to the target.\n\n    It is guaranteed that there is exactly one solution.\n    \"\"\"\n    n = len(arr)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return [i, j, k]\n    return []", "solution_func": "def g():\n    arr = [2, 4, 7, 11, 15]\n    target = 22\n    return (arr, target)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target number, find and return the indices of two numbers from the list that add up to the target.\n\n    It is guaranteed that there is exactly one solution.\n    \"\"\"\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == target:\n                return [i, j]\n    return []\n\ndef g():\n    arr = [2, 4, 7, 11, 15]\n    target = 18\n    return (arr, target)\n\nassert f(*g()) == [1, 3]\n", "emb": null, "idx_generation": 489, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target number, find and return the indices of two numbers from the list that add up to the target.\n\n    It is guaranteed that there is exactly one solution.\n    \"\"\"\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == target:\n                return [i, j]\n    return []", "solution_func": "def g():\n    arr = [2, 4, 7, 11, 15]\n    target = 18\n    return (arr, target)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, find and return the indices of two numbers from the list that add up to zero.\n\n    It is guaranteed that there is exactly one solution.\n    \"\"\"\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == 0:\n                return [i, j]\n    return []\n\ndef g():\n    arr = [-2, 4, 7, -11, 15]\n    return arr\n\nassert f(*g()) == [0, 3]\n", "emb": null, "idx_generation": 489, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, find and return the indices of two numbers from the list that add up to zero.\n\n    It is guaranteed that there is exactly one solution.\n    \"\"\"\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == 0:\n                return [i, j]\n    return []", "solution_func": "def g():\n    arr = [-2, 4, 7, -11, 15]\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose difference is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if num - target in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 3, 5, 7, 9], target: int = 2):\n    return nums, target\n\nassert f(*g()) == False\n\n", "emb": null, "idx_generation": 489, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose difference is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if num - target in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums: List[int] = [1, 3, 5, 7, 9], target: int = 2):\n    return nums, target", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the sum of the squared values of all even numbers in the list.\n    \"\"\"\n    return sum([num**2 for num in nums if num % 2 == 0])\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 120\n\n\n", "emb": null, "idx_generation": 490, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the sum of the squared values of all even numbers in the list.\n    \"\"\"\n    return sum([num**2 for num in nums if num % 2 == 0])", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the number of distinct elements in the list.\n    \"\"\"\n    return len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 10\n\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 490, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the number of distinct elements in the list.\n    \"\"\"\n    return len(set(nums))", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the sum of all numbers that are divisible by 5 but not divisible by 3.\n    \"\"\"\n    return sum([num for num in nums if num % 5 == 0 and num % 3 != 0])\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 5\n\n\n", "emb": null, "idx_generation": 490, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the sum of all numbers that are divisible by 5 but not divisible by 3.\n    \"\"\"\n    return sum([num for num in nums if num % 5 == 0 and num % 3 != 0])", "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a staircase pattern.\n    A staircase pattern is a grid where each row is strictly increasing from left to right, and the first element of each subsequent row is greater than the last element of the previous row.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(n-1):\n        if arr[i][-1] >= arr[i+1][0]:\n            return False\n        for j in range(m-1):\n            if arr[i][j] >= arr[i][j+1]:\n                return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 490, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a staircase pattern.\n    A staircase pattern is a grid where each row is strictly increasing from left to right, and the first element of each subsequent row is greater than the last element of the previous row.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(n-1):\n        if arr[i][-1] >= arr[i+1][0]:\n            return False\n        for j in range(m-1):\n            if arr[i][j] >= arr[i][j+1]:\n                return False\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [1, 0, 0, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a grid where the sum of every row, column, and diagonal is the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    target_sum = sum(arr[0])\n\n    for i in range(1, n):\n        if sum(arr[i]) != target_sum:\n            return False\n\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += arr[i][j]\n        if col_sum != target_sum:\n            return False\n\n    diagonal_sum1 = 0\n    diagonal_sum2 = 0\n    for i in range(n):\n        diagonal_sum1 += arr[i][i]\n        diagonal_sum2 += arr[i][n-i-1]\n    if diagonal_sum1 != target_sum or diagonal_sum2 != target_sum:\n        return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return arr\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 490, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a grid where the sum of every row, column, and diagonal is the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    target_sum = sum(arr[0])\n\n    for i in range(1, n):\n        if sum(arr[i]) != target_sum:\n            return False\n\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += arr[i][j]\n        if col_sum != target_sum:\n            return False\n\n    diagonal_sum1 = 0\n    diagonal_sum2 = 0\n    for i in range(n):\n        diagonal_sum1 += arr[i][i]\n        diagonal_sum2 += arr[i][n-i-1]\n    if diagonal_sum1 != target_sum or diagonal_sum2 != target_sum:\n        return False\n\n    return True", "solution_func": "def g(arr: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a spiral pattern.\n    A spiral pattern is a grid where the elements form a pattern that starts from the top left corner and spirals inward in a clockwise direction.\n\n    Sample Input:\n    arr = [[1, 2, 3], [8, 9, 4], [7, 6, 5]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    top_row = 0\n    bottom_row = n - 1\n    left_col = 0\n    right_col = m - 1\n    direction = 0\n\n    while top_row <= bottom_row and left_col <= right_col:\n        if direction == 0:  # Move from left to right\n            for i in range(left_col, right_col + 1):\n                if arr[top_row][i] != arr[top_row][left_col]:\n                    return False\n            top_row += 1\n            direction = 1\n        elif direction == 1:  # Move from top to bottom\n            for i in range(top_row, bottom_row + 1):\n                if arr[i][right_col] != arr[top_row][right_col]:\n                    return False\n            right_col -= 1\n            direction = 2\n        elif direction == 2:  # Move from right to left\n            for i in range(right_col, left_col - 1, -1):\n                if arr[bottom_row][i] != arr[bottom_row][right_col]:\n                    return False\n            bottom_row -= 1\n            direction = 3\n        elif direction == 3:  # Move from bottom to top\n            for i in range(bottom_row, top_row - 1, -1):\n                if arr[i][left_col] != arr[bottom_row][left_col]:\n                    return False\n            left_col += 1\n            direction = 0\n\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [8, 9, 4], [7, 6, 5]]):\n    return arr\n\nassert f(g()) == True\n\n", "emb": null, "idx_generation": 490, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a spiral pattern.\n    A spiral pattern is a grid where the elements form a pattern that starts from the top left corner and spirals inward in a clockwise direction.\n\n    Sample Input:\n    arr = [[1, 2, 3], [8, 9, 4], [7, 6, 5]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    top_row = 0\n    bottom_row = n - 1\n    left_col = 0\n    right_col = m - 1\n    direction = 0\n\n    while top_row <= bottom_row and left_col <= right_col:\n        if direction == 0:  # Move from left to right\n            for i in range(left_col, right_col + 1):\n                if arr[top_row][i] != arr[top_row][left_col]:\n                    return False\n            top_row += 1\n            direction = 1\n        elif direction == 1:  # Move from top to bottom\n            for i in range(top_row, bottom_row + 1):\n                if arr[i][right_col] != arr[top_row][right_col]:\n                    return False\n            right_col -= 1\n            direction = 2\n        elif direction == 2:  # Move from right to left\n            for i in range(right_col, left_col - 1, -1):\n                if arr[bottom_row][i] != arr[bottom_row][right_col]:\n                    return False\n            bottom_row -= 1\n            direction = 3\n        elif direction == 3:  # Move from bottom to top\n            for i in range(bottom_row, top_row - 1, -1):\n                if arr[i][left_col] != arr[bottom_row][left_col]:\n                    return False\n            left_col += 1\n            direction = 0\n\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [8, 9, 4], [7, 6, 5]]):\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, substrings=['t', 'vochemachylit', 'vutextynydakelopi', 'fazapydomozamochug']) -> bool:\n    \"\"\"\n    Find a string that contains all the substrings reversed and forward\n    \"\"\"\n    return all((sub in s and sub[::-1] in s for sub in substrings))\n\ndef g(substrings = ['t', 'vochemachylit', 'vutextynydakelopi', 'fazapydomozamochug']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])\n\nassert f(g())\n\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 490, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substrings=['t', 'vochemachylit', 'vutextynydakelopi', 'fazapydomozamochug']) -> bool:\n    \"\"\"\n    Find a string that contains all the substrings reversed and forward\n    \"\"\"\n    return all((sub in s and sub[::-1] in s for sub in substrings))", "solution_func": "def g(substrings = ['t', 'vochemachylit', 'vutextynydakelopi', 'fazapydomozamochug']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, substrings=['t', 'vochemachylit', 'vutextynydakelopi', 'fazapydomozamochug']) -> bool:\n    \"\"\"\n    Find the length of the shortest substring that contains all the given substrings in any order.\n    \"\"\"\n    unique_substrings = set(substrings)\n    min_length = float('inf')\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if all((sub in substring for sub in unique_substrings)):\n                min_length = min(min_length, len(substring))\n    return min_length\n\ndef g(substrings = ['t', 'vochemachylit', 'vutextynydakelopi', 'fazapydomozamochug']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])\n\nassert f(g()) == 2\n\n", "emb": null, "idx_generation": 490, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substrings=['t', 'vochemachylit', 'vutextynydakelopi', 'fazapydomozamochug']) -> bool:\n    \"\"\"\n    Find the length of the shortest substring that contains all the given substrings in any order.\n    \"\"\"\n    unique_substrings = set(substrings)\n    min_length = float('inf')\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if all((sub in substring for sub in unique_substrings)):\n                min_length = min(min_length, len(substring))\n    return min_length", "solution_func": "def g(substrings = ['t', 'vochemachylit', 'vutextynydakelopi', 'fazapydomozamochug']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, substrings=['t', 'vochemachylit', 'vutextynydakelopi', 'fazapydomozamochug']) -> bool:\n    \"\"\"\n    Find the number of occurrences of each substring in the given string.\n    \"\"\"\n    count = {}\n    for sub in substrings:\n        count[sub] = s.count(sub)\n    return count\n\ndef g(substrings = ['t', 'vochemachylit', 'vutextynydakelopi', 'fazapydomozamochug']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])\n\nassert f(g()) == {'t': 1, 'vochemachylit': 1, 'vutextynydakelopi': 1, 'fazapydomozamochug': 1, 't': 1, 'tilyhcamehcemohcov': 1, 'ipolekadayntxetuv': 1, 'guhcomazomodypazaf': 1}\n\n", "emb": null, "idx_generation": 490, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, substrings=['t', 'vochemachylit', 'vutextynydakelopi', 'fazapydomozamochug']) -> bool:\n    \"\"\"\n    Find the number of occurrences of each substring in the given string.\n    \"\"\"\n    count = {}\n    for sub in substrings:\n        count[sub] = s.count(sub)\n    return count", "solution_func": "def g(substrings = ['t', 'vochemachylit', 'vutextynydakelopi', 'fazapydomozamochug']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], target: int, replacement: int) -> List[int]:\n    \"\"\"\n    Given a list of integers, a target number, and a replacement number, return a new list with all occurrences of the target number replaced by the replacement number.\n\n    Example:\n    arr = [1, 2, 3, 4, 2, 5]\n    target = 2\n    replacement = 0\n    output: [1, 0, 3, 4, 0, 5]\n    \"\"\"\n    return [replacement if num == target else num for num in arr]\n\ndef g():\n    return [1, 2, 3, 4, 2, 5], 2, 0\n\nassert f(*g()) == [1, 0, 3, 4, 0, 5]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 490, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], target: int, replacement: int) -> List[int]:\n    \"\"\"\n    Given a list of integers, a target number, and a replacement number, return a new list with all occurrences of the target number replaced by the replacement number.\n\n    Example:\n    arr = [1, 2, 3, 4, 2, 5]\n    target = 2\n    replacement = 0\n    output: [1, 0, 3, 4, 0, 5]\n    \"\"\"\n    return [replacement if num == target else num for num in arr]", "solution_func": "def g():\n    return [1, 2, 3, 4, 2, 5], 2, 0", "map_ix": [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nimport datetime\nfrom typing import List\n\ndef f(dates: List[datetime.date]) -> bool:\n    \"\"\"\n    Given a list of dates, check if all dates are in the past (before today's date).\n\n    Example:\n    dates = [datetime.date(2022, 1, 1), datetime.date(2022, 6, 30), datetime.date(2023, 12, 31)]\n    The date today is 2022-12-15, so the function should return False.\n\n    Return True if all dates are in the past, otherwise False.\n    \"\"\"\n    today = datetime.date.today()\n    return all(date < today for date in dates)\n\ndef g(dates: List[datetime.date] = [datetime.date(2022, 1, 1), datetime.date(2022, 6, 30), datetime.date(2023, 12, 31)]):\n    return dates\n\nassert f(g()) == False\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 491, "target_skills": null, "problem_func": "from typing import*\nimport datetime\nfrom typing import List\n\ndef f(dates: List[datetime.date]) -> bool:\n    \"\"\"\n    Given a list of dates, check if all dates are in the past (before today's date).\n\n    Example:\n    dates = [datetime.date(2022, 1, 1), datetime.date(2022, 6, 30), datetime.date(2023, 12, 31)]\n    The date today is 2022-12-15, so the function should return False.\n\n    Return True if all dates are in the past, otherwise False.\n    \"\"\"\n    today = datetime.date.today()\n    return all(date < today for date in dates)", "solution_func": "def g(dates: List[datetime.date] = [datetime.date(2022, 1, 1), datetime.date(2022, 6, 30), datetime.date(2023, 12, 31)]):\n    return dates", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the even numbers.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    The function should return [2, 4, 6, 8, 10].\n\n    Return a list of even numbers.\n    \"\"\"\n    return [num for num in nums if num % 2 == 0]\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g()) == [2, 4, 6, 8, 10]\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 491, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the even numbers.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    The function should return [2, 4, 6, 8, 10].\n\n    Return a list of even numbers.\n    \"\"\"\n    return [num for num in nums if num % 2 == 0]", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the sum of all the prime numbers.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    The prime numbers in the list are 2, 3, 5, and 7.\n    The sum of these prime numbers is 17.\n\n    Return the sum of all the prime numbers.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return sum(num for num in nums if is_prime(num))\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g()) == 17\n\n", "emb": [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 491, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the sum of all the prime numbers.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    The prime numbers in the list are 2, 3, 5, and 7.\n    The sum of these prime numbers is 17.\n\n    Return the sum of all the prime numbers.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return sum(num for num in nums if is_prime(num))", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums", "map_ix": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=0, count=3) -> bool:\n    \"\"\"Find if there are count numbers that multiply to the target\"\"\"\n    from itertools import combinations\n    return any(np.prod(c) == target for c in combinations(nums, count))\ndef g(target = 0, count = 3):\n    return [1, 2, 3, 4, 5]\nassert f(g()) == True\n", "emb": null, "idx_generation": 491, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=0, count=3) -> bool:\n    \"\"\"Find if there are count numbers that multiply to the target\"\"\"\n    from itertools import combinations\n    return any(np.prod(c) == target for c in combinations(nums, count))", "solution_func": "def g(target = 0, count = 3):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=0, count=3) -> bool:\n    \"\"\"Find if there are count numbers that add up to the target and multiply to another target\"\"\"\n    from itertools import combinations\n    return any((sum(c) == target) and (np.prod(c) == target*2) for c in combinations(nums, count))\ndef g(target = 0, count = 3):\n    return [1, 2, 3, 4, 5]\nassert f(g()) == True\n", "emb": null, "idx_generation": 491, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=0, count=3) -> bool:\n    \"\"\"Find if there are count numbers that add up to the target and multiply to another target\"\"\"\n    from itertools import combinations\n    return any((sum(c) == target) and (np.prod(c) == target*2) for c in combinations(nums, count))", "solution_func": "def g(target = 0, count = 3):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=2, b=5, c=10) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the cubes of the first c integers)\"\"\"\n    return n + a == sum([b * i**3 for i in range(c)])\ndef g(a = 2, b = 5, c = 10):\n    return -a + sum([b * i**3 for i in range(c)])\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 491, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=2, b=5, c=10) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the cubes of the first c integers)\"\"\"\n    return n + a == sum([b * i**3 for i in range(c)])", "solution_func": "def g(a = 2, b = 5, c = 10):\n    return -a + sum([b * i**3 for i in range(c)])", "map_ix": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of a subarray.\n\n    Sample Input:\n    arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\n    Sample Output:\n    6\n\n    Explanation: The subarray with the maximum sum is [4, -1, 2, 1], which gives a sum of 6.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in arr:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n\ndef g():\n    return [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\nassert f(g()) == 6\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 491, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of a subarray.\n\n    Sample Input:\n    arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\n    Sample Output:\n    6\n\n    Explanation: The subarray with the maximum sum is [4, -1, 2, 1], which gives a sum of 6.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in arr:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "solution_func": "def g():\n    return [-2, 1, -3, 4, -1, 2, 1, -5, 4]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str) -> str:\n    \"\"\"\n    Given a string, return a new string where the first and last characters have been exchanged.\n\n    Sample Input:\n    s = \"hello\"\n\n    Sample Output:\n    \"oellh\"\n    \"\"\"\n    if len(s) <= 1:\n        return s\n    return s[-1] + s[1:-1] + s[0]\n\ndef g():\n    return \"hello\"\n\nassert f(g()) == \"oellh\"\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 491, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str) -> str:\n    \"\"\"\n    Given a string, return a new string where the first and last characters have been exchanged.\n\n    Sample Input:\n    s = \"hello\"\n\n    Sample Output:\n    \"oellh\"\n    \"\"\"\n    if len(s) <= 1:\n        return s\n    return s[-1] + s[1:-1] + s[0]", "solution_func": "def g():\n    return \"hello\"", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with all duplicates removed.\n\n    Sample Input:\n    nums = [1, 1, 2, 2, 3, 4, 5, 5]\n\n    Sample Output:\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    return list(set(nums))\n\ndef g():\n    return [1, 1, 2, 2, 3, 4, 5, 5]\n\nassert f(g()) == [1, 2, 3, 4, 5]\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 491, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with all duplicates removed.\n\n    Sample Input:\n    nums = [1, 1, 2, 2, 3, 4, 5, 5]\n\n    Sample Output:\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    return list(set(nums))", "solution_func": "def g():\n    return [1, 1, 2, 2, 3, 4, 5, 5]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose difference is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if num - target in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 2):\n    return nums, target\n\nassert f(*g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 491, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose difference is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if num - target in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 2):\n    return nums, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subsequence with a sum equal to k.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    k = 9\n    output: True\n    \"\"\"\n    if k == 0:\n        return True\n    if not nums:\n        return False\n    return f(nums[1:], k) or f(nums[1:], k - nums[0])\n\ndef g():\n    return [1, 2, 3, 4, 5], 9\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 492, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subsequence with a sum equal to k.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    k = 9\n    output: True\n    \"\"\"\n    if k == 0:\n        return True\n    if not nums:\n        return False\n    return f(nums[1:], k) or f(nums[1:], k - nums[0])", "solution_func": "def g():\n    return [1, 2, 3, 4, 5], 9", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subsequence with a sum divisible by k.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    k = 3\n    output: True\n    \"\"\"\n    def helper(i, cur_sum):\n        if i == len(nums):\n            return cur_sum % k == 0\n        return helper(i + 1, cur_sum + nums[i]) or helper(i + 1, cur_sum)\n\n    return helper(0, 0)\n\ndef g():\n    return [1, 2, 3, 4, 5], 3\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 492, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subsequence with a sum divisible by k.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    k = 3\n    output: True\n    \"\"\"\n    def helper(i, cur_sum):\n        if i == len(nums):\n            return cur_sum % k == 0\n        return helper(i + 1, cur_sum + nums[i]) or helper(i + 1, cur_sum)\n\n    return helper(0, 0)", "solution_func": "def g():\n    return [1, 2, 3, 4, 5], 3", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subsequence with a sum greater than or equal to k.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    k = 10\n    output: True\n    \"\"\"\n    def helper(i, cur_sum):\n        if i == len(nums):\n            return cur_sum >= k\n        return helper(i + 1, cur_sum + nums[i]) or helper(i + 1, cur_sum)\n\n    return helper(0, 0)\n\ndef g():\n    return [1, 2, 3, 4, 5], 10\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 492, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subsequence with a sum greater than or equal to k.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    k = 10\n    output: True\n    \"\"\"\n    def helper(i, cur_sum):\n        if i == len(nums):\n            return cur_sum >= k\n        return helper(i + 1, cur_sum + nums[i]) or helper(i + 1, cur_sum)\n\n    return helper(0, 0)", "solution_func": "def g():\n    return [1, 2, 3, 4, 5], 10", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if all numbers in the list are divisible by the target\"\"\"\n    return all(num % target == 0 for num in nums)\n\ndef g(nums: List[int] = [12, 24, 36, 48, 60], target: int = 6):\n    return (nums, target)\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 492, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if all numbers in the list are divisible by the target\"\"\"\n    return all(num % target == 0 for num in nums)", "solution_func": "def g(nums: List[int] = [12, 24, 36, 48, 60], target: int = 6):\n    return (nums, target)", "map_ix": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import *\ndef f(arr: List[int], n: int) -> bool:\n    \"\"\"Check if all the numbers in the list are greater than n\"\"\"\n    return all(num > n for num in arr)\n\ndef g(n: int = 5):\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n", "emb": null, "idx_generation": 492, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\ndef f(arr: List[int], n: int) -> bool:\n    \"\"\"Check if all the numbers in the list are greater than n\"\"\"\n    return all(num > n for num in arr)", "solution_func": "def g(n: int = 5):\n    return [2, 4, 6, 8, 10]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import *\nimport random\n\ndef f(li: List[int], target_sum: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target sum, determine if it is possible to select a subset of the list\n    elements such that their sum is greater than or equal to the target sum.\n\n    Sample input:\n    [1, 2, 3, 4, 5], 9\n\n    Sample output:\n    True\n    \"\"\"\n    def subset_sum(li, target_sum):\n        n = len(li)\n        dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n        for i in range(n + 1):\n            dp[i][0] = True\n        for i in range(1, n + 1):\n            for j in range(1, target_sum + 1):\n                if li[i - 1] > j:\n                    dp[i][j] = dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j] or dp[i - 1][j - li[i - 1]]\n        return dp[n][target_sum]\n    \n    random.shuffle(li)\n    return subset_sum(li, target_sum)\n\ndef g(li: List[int] = [1, 2, 3, 4, 5], target_sum: int = 9):\n    return (li, target_sum)\n\nassert f(*g())\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 492, "target_skills": null, "problem_func": "from typing import*\nfrom typing import *\nimport random\n\ndef f(li: List[int], target_sum: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target sum, determine if it is possible to select a subset of the list\n    elements such that their sum is greater than or equal to the target sum.\n\n    Sample input:\n    [1, 2, 3, 4, 5], 9\n\n    Sample output:\n    True\n    \"\"\"\n    def subset_sum(li, target_sum):\n        n = len(li)\n        dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n        for i in range(n + 1):\n            dp[i][0] = True\n        for i in range(1, n + 1):\n            for j in range(1, target_sum + 1):\n                if li[i - 1] > j:\n                    dp[i][j] = dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j] or dp[i - 1][j - li[i - 1]]\n        return dp[n][target_sum]\n    \n    random.shuffle(li)\n    return subset_sum(li, target_sum)", "solution_func": "def g(li: List[int] = [1, 2, 3, 4, 5], target_sum: int = 9):\n    return (li, target_sum)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(matrix: List[List[int]]) -> List[Tuple[int, int]]:\n    \"\"\"\n    Given a matrix of integers, find all the coordinates of the cells that contain the maximum value in the matrix.\n    Return a list of tuples representing the row and column indices of these cells.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    output: [(2, 2)]\n    \"\"\"\n    max_value = max(max(row) for row in matrix)\n    max_coords = [(i, j) for i, row in enumerate(matrix) for j, num in enumerate(row) if num == max_value]\n    return max_coords\n\ndef g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\nassert f(g()) == [(2, 2)]\n", "emb": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 492, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List, Tuple\n\ndef f(matrix: List[List[int]]) -> List[Tuple[int, int]]:\n    \"\"\"\n    Given a matrix of integers, find all the coordinates of the cells that contain the maximum value in the matrix.\n    Return a list of tuples representing the row and column indices of these cells.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    output: [(2, 2)]\n    \"\"\"\n    max_value = max(max(row) for row in matrix)\n    max_coords = [(i, j) for i, row in enumerate(matrix) for j, num in enumerate(row) if num == max_value]\n    return max_coords", "solution_func": "def g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]", "map_ix": [1, 0, 0, 1, 0, 0, 1, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(matrix: List[List[int]]) -> List[Tuple[int, int]]:\n    \"\"\"\n    Given a matrix of integers, find all the coordinates of the cells that contain a prime number in the matrix.\n    Return a list of tuples representing the row and column indices of these cells.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    output: [(0, 2), (2, 0), (2, 2)]\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_coords = [(i, j) for i, row in enumerate(matrix) for j, num in enumerate(row) if is_prime(num)]\n    return prime_coords\n\ndef g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\nassert f(g()) == [(0, 2), (2, 0), (2, 2)]\n", "emb": null, "idx_generation": 492, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List, Tuple\n\ndef f(matrix: List[List[int]]) -> List[Tuple[int, int]]:\n    \"\"\"\n    Given a matrix of integers, find all the coordinates of the cells that contain a prime number in the matrix.\n    Return a list of tuples representing the row and column indices of these cells.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    output: [(0, 2), (2, 0), (2, 2)]\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_coords = [(i, j) for i, row in enumerate(matrix) for j, num in enumerate(row) if is_prime(num)]\n    return prime_coords", "solution_func": "def g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix of integers, rotate the matrix 90 degrees clockwise and return the rotated matrix.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    output: [\n        [7, 4, 1],\n        [8, 5, 2],\n        [9, 6, 3]\n    ]\n    \"\"\"\n    rotated_matrix = [[matrix[j][i] for j in range(len(matrix)-1, -1, -1)] for i in range(len(matrix[0]))]\n    return rotated_matrix\n\ndef g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\nassert f(g()) == [\n    [7, 4, 1],\n    [8, 5, 2],\n    [9, 6, 3]\n]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 492, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List, Tuple\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix of integers, rotate the matrix 90 degrees clockwise and return the rotated matrix.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    output: [\n        [7, 4, 1],\n        [8, 5, 2],\n        [9, 6, 3]\n    ]\n    \"\"\"\n    rotated_matrix = [[matrix[j][i] for j in range(len(matrix)-1, -1, -1)] for i in range(len(matrix[0]))]\n    return rotated_matrix", "solution_func": "def g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, return the sum of each column in the matrix.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    The sum of each column in the matrix is [12, 15, 18].\n    Therefore, f(matrix) returns [12, 15, 18].\n    \"\"\"\n    column_sums = []\n    \n    for j in range(len(matrix[0])):\n        column_sum = sum(row[j] for row in matrix)\n        column_sums.append(column_sum)\n        \n    return column_sums\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [12, 15, 18]\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 492, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, return the sum of each column in the matrix.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    The sum of each column in the matrix is [12, 15, 18].\n    Therefore, f(matrix) returns [12, 15, 18].\n    \"\"\"\n    column_sums = []\n    \n    for j in range(len(matrix[0])):\n        column_sum = sum(row[j] for row in matrix)\n        column_sums.append(column_sum)\n        \n    return column_sums", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target number, find the index of the first occurrence of the target number in the list.\n    If the target number is not found, return -1.\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return i\n    return -1\n\ndef g():\n    nums = [1, 3, 5, 7, 9]\n    target = 5\n    return (nums, target)\n\nassert f(*g()) == 2\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 493, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target number, find the index of the first occurrence of the target number in the list.\n    If the target number is not found, return -1.\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return i\n    return -1", "solution_func": "def g():\n    nums = [1, 3, 5, 7, 9]\n    target = 5\n    return (nums, target)", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if a given string is a palindrome.\n    \"\"\"\n    return string == string[::-1]\n\ndef g(string=\"racecar\"):\n    return string\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 493, "target_skills": null, "problem_func": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if a given string is a palindrome.\n    \"\"\"\n    return string == string[::-1]", "solution_func": "def g(string=\"racecar\"):\n    return string", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of any contiguous subarray.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum = max(num, curr_sum + num)\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n\ndef g(nums: List[int] = [1, -2, 3, -4, 5, -6]):\n    return nums\n\nassert f(g()) == 5\n\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 493, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of any contiguous subarray.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum = max(num, curr_sum + num)\n        max_sum = max(max_sum, curr_sum)\n    return max_sum", "solution_func": "def g(nums: List[int] = [1, -2, 3, -4, 5, -6]):\n    return nums", "map_ix": [1, 0, 1, 0, 0, 0, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int, target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target sum, find if there are k non-negative integers in the list that sum up to the target.\n    \"\"\"\n    if k == 0 and target == 0:\n        return True\n    elif k == 0 or target <= 0 or len(nums) == 0:\n        return False\n    else:\n        return f(nums[1:], k-1, target-nums[0]) or f(nums[1:], k, target)\n\ndef g(nums=[2, 4, 6, 8, 10], k=3, target=18):\n    return nums\n\nassert f(g(), k=3, target=18)\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 493, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int, target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target sum, find if there are k non-negative integers in the list that sum up to the target.\n    \"\"\"\n    if k == 0 and target == 0:\n        return True\n    elif k == 0 or target <= 0 or len(nums) == 0:\n        return False\n    else:\n        return f(nums[1:], k-1, target-nums[0]) or f(nums[1:], k, target)", "solution_func": "def g(nums=[2, 4, 6, 8, 10], k=3, target=18):\n    return nums", "map_ix": [0, 1, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int, target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target sum, find if there are k non-negative integers in the list that sum up to the target.\n    \"\"\"\n    if k == 0 and target == 0:\n        return True\n    elif k == 0 or target <= 0 or len(nums) == 0:\n        return False\n    else:\n        return f(nums[1:], k-1, target-nums[0]) or f(nums[1:], k, target)\n\ndef g(nums=[2, 4, 6, 8, 10], k=3, target=18):\n    return nums\n\nassert f(g(), k=3, target=18)\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 493, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int, target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target sum, find if there are k non-negative integers in the list that sum up to the target.\n    \"\"\"\n    if k == 0 and target == 0:\n        return True\n    elif k == 0 or target <= 0 or len(nums) == 0:\n        return False\n    else:\n        return f(nums[1:], k-1, target-nums[0]) or f(nums[1:], k, target)", "solution_func": "def g(nums=[2, 4, 6, 8, 10], k=3, target=18):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int, target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target sum, find if there are k non-negative integers in the list that sum up to the target.\n    \"\"\"\n    if k == 0 and target == 0:\n        return True\n    elif k == 0 or target <= 0 or len(nums) == 0:\n        return False\n    else:\n        return f(nums[1:], k-1, target-nums[0]) or f(nums[1:], k, target)\n\ndef g(nums=[2, 4, 6, 8, 10], k=3, target=18):\n    return nums\n\nassert f(g(), k=3, target=18)\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 493, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int, target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target sum, find if there are k non-negative integers in the list that sum up to the target.\n    \"\"\"\n    if k == 0 and target == 0:\n        return True\n    elif k == 0 or target <= 0 or len(nums) == 0:\n        return False\n    else:\n        return f(nums[1:], k-1, target-nums[0]) or f(nums[1:], k, target)", "solution_func": "def g(nums=[2, 4, 6, 8, 10], k=3, target=18):\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target_sum: int = 10) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that sums up to the target_sum.\n    \"\"\"\n    def find_combination(start, curr_sum):\n        if curr_sum == target_sum:\n            return True\n        if curr_sum > target_sum or start == len(nums):\n            return False\n        for i in range(start, len(nums)):\n            if find_combination(i + 1, curr_sum + nums[i]):\n                return True\n        return False\n\n    return find_combination(0, 0)\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is\n    \"\"\"\n    return nums\n\nassert f(g([1, 2, 3, 4, 5, 6]), 10) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 493, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target_sum: int = 10) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that sums up to the target_sum.\n    \"\"\"\n    def find_combination(start, curr_sum):\n        if curr_sum == target_sum:\n            return True\n        if curr_sum > target_sum or start == len(nums):\n            return False\n        for i in range(start, len(nums)):\n            if find_combination(i + 1, curr_sum + nums[i]):\n                return True\n        return False\n\n    return find_combination(0, 0)", "solution_func": "def g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is\n    \"\"\"\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target_sum: int = 10) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that sums up to the target_sum.\n    \"\"\"\n    def find_combination(start, curr_sum):\n        if curr_sum == target_sum:\n            return True\n        if curr_sum > target_sum or start == len(nums):\n            return False\n        for i in range(start, len(nums)):\n            if find_combination(i + 1, curr_sum + nums[i]):\n                return True\n        return False\n\n    return find_combination(0, 0)\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is\n    \"\"\"\n    return nums\n\nassert f(g([2, 3, 5, 7]), 15) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 493, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target_sum: int = 10) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that sums up to the target_sum.\n    \"\"\"\n    def find_combination(start, curr_sum):\n        if curr_sum == target_sum:\n            return True\n        if curr_sum > target_sum or start == len(nums):\n            return False\n        for i in range(start, len(nums)):\n            if find_combination(i + 1, curr_sum + nums[i]):\n                return True\n        return False\n\n    return find_combination(0, 0)", "solution_func": "def g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is\n    \"\"\"\n    return nums", "map_ix": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target_sum: int = 10) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that sums up to the target_sum.\n    \"\"\"\n    def find_combination(start, curr_sum):\n        if curr_sum == target_sum:\n            return True\n        if curr_sum > target_sum or start == len(nums):\n            return False\n        for i in range(start, len(nums)):\n            if find_combination(i + 1, curr_sum + nums[i]):\n                return True\n        return False\n\n    return find_combination(0, 0)\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is\n    \"\"\"\n    return nums\n\nassert f(g([1, 3, 5, 7, 9]), 20) == False\n\n", "emb": null, "idx_generation": 493, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target_sum: int = 10) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that sums up to the target_sum.\n    \"\"\"\n    def find_combination(start, curr_sum):\n        if curr_sum == target_sum:\n            return True\n        if curr_sum > target_sum or start == len(nums):\n            return False\n        for i in range(start, len(nums)):\n            if find_combination(i + 1, curr_sum + nums[i]):\n                return True\n        return False\n\n    return find_combination(0, 0)", "solution_func": "def g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is\n    \"\"\"\n    return nums", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n\n    Sample Input:\n    nums = [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums=[1, 2, 3, 2, 1]):\n    return nums\n\nassert f(*g()) == True\n\n", "emb": null, "idx_generation": 493, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n\n    Sample Input:\n    nums = [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return nums == nums[::-1]", "solution_func": "def g(nums=[1, 2, 3, 2, 1]):\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, check if there exists a pair of numbers in the list whose sum is equal to the target number.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    num_set = set()\n    for num in arr:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (arr, target)\n\nassert f(*g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 494, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, check if there exists a pair of numbers in the list whose sum is equal to the target number.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    num_set = set()\n    for num in arr:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (arr, target)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target number, find the index of the first occurrence of the target number in the list.\n    If the target number is not in the list, return -1.\n    \"\"\"\n    for i, num in enumerate(arr):\n        if num == target:\n            return i\n    return -1\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 3):\n    return (arr, target)\n\nassert f(*g()) == 2\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 494, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target number, find the index of the first occurrence of the target number in the list.\n    If the target number is not in the list, return -1.\n    \"\"\"\n    for i, num in enumerate(arr):\n        if num == target:\n            return i\n    return -1", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 3):\n    return (arr, target)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target number, find all pairs of numbers in the list whose sum is equal to the target number.\n    Return a list of tuples containing the pairs.\n    \"\"\"\n    pairs = []\n    num_set = set()\n    for num in arr:\n        if target - num in num_set:\n            pairs.append((num, target - num))\n        num_set.add(num)\n    return pairs\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 6):\n    return (arr, target)\n\nassert f(*g()) == [(1, 5), (2, 4)]\n", "emb": null, "idx_generation": 494, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target number, find all pairs of numbers in the list whose sum is equal to the target number.\n    Return a list of tuples containing the pairs.\n    \"\"\"\n    pairs = []\n    num_set = set()\n    for num in arr:\n        if target - num in num_set:\n            pairs.append((num, target - num))\n        num_set.add(num)\n    return pairs", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 6):\n    return (arr, target)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(strings: List[str], target: str) -> bool:\n    \"\"\"\n    Check if there exists a string in the list that, when concatenated with the target, forms a palindrome.\n    \"\"\"\n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    for string in strings:\n        if is_palindrome(string + target):\n            return True\n    return False\n\ndef g(strings: List[str] = [\"ab\", \"cd\", \"ef\"], target: str = \"ba\"):\n    return (strings, target)\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 494, "target_skills": null, "problem_func": "from typing import*\ndef f(strings: List[str], target: str) -> bool:\n    \"\"\"\n    Check if there exists a string in the list that, when concatenated with the target, forms a palindrome.\n    \"\"\"\n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    for string in strings:\n        if is_palindrome(string + target):\n            return True\n    return False", "solution_func": "def g(strings: List[str] = [\"ab\", \"cd\", \"ef\"], target: str = \"ba\"):\n    return (strings, target)", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the matrix whose sum is equal to the target number.\n    \"\"\"\n    def subarray_sum(nums, target):\n        n = len(nums)\n        prefix_sum = [0] * (n + 1)\n        for i in range(1, n + 1):\n            prefix_sum[i] = prefix_sum[i - 1] + nums[i - 1]\n        for i in range(n):\n            for j in range(i + 1, n + 1):\n                if prefix_sum[j] - prefix_sum[i] == target:\n                    return True\n        return False\n    \n    for row in matrix:\n        if subarray_sum(row, target):\n            return True\n    return False\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target: int = 12):\n    return (matrix, target)\n\nassert f(*g()) == True\n\n", "emb": null, "idx_generation": 494, "target_skills": null, "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the matrix whose sum is equal to the target number.\n    \"\"\"\n    def subarray_sum(nums, target):\n        n = len(nums)\n        prefix_sum = [0] * (n + 1)\n        for i in range(1, n + 1):\n            prefix_sum[i] = prefix_sum[i - 1] + nums[i - 1]\n        for i in range(n):\n            for j in range(i + 1, n + 1):\n                if prefix_sum[j] - prefix_sum[i] == target:\n                    return True\n        return False\n    \n    for row in matrix:\n        if subarray_sum(row, target):\n            return True\n    return False", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target: int = 12):\n    return (matrix, target)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list whose product is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target % num == 0 and target // num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 10):\n    return (nums, target)\n\nassert f(*g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 494, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list whose product is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target % num == 0 and target // num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 10):\n    return (nums, target)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(s: str, char: str) -> bool:\n    \"\"\"Check if the given character is the last character of each word in the string\"\"\"\n    words = s.split()\n    return all(word[-1] == char for word in words)\ndef g(s: str = \"Python Programming Puzzles\", char: str = \"s\"):\n    return (s, char)\nassert f(*g()) == False\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 494, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, char: str) -> bool:\n    \"\"\"Check if the given character is the last character of each word in the string\"\"\"\n    words = s.split()\n    return all(word[-1] == char for word in words)", "solution_func": "def g(s: str = \"Python Programming Puzzles\", char: str = \"s\"):\n    return (s, char)", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], threshold=100, num_elements=3) -> bool:\n    \"\"\"Check if there exists a subset of num_elements integers that sum up to a value less than or equal to threshold.\"\"\"\n    from itertools import combinations\n    for subset in combinations(nums, num_elements):\n        if sum(subset) <= threshold:\n            return True\n    return False\n\ndef g(threshold=100, num_elements=3):\n    return [50, 60, 70, 80, 90, 100, 110, 120, 130, 140]\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 494, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], threshold=100, num_elements=3) -> bool:\n    \"\"\"Check if there exists a subset of num_elements integers that sum up to a value less than or equal to threshold.\"\"\"\n    from itertools import combinations\n    for subset in combinations(nums, num_elements):\n        if sum(subset) <= threshold:\n            return True\n    return False", "solution_func": "def g(threshold=100, num_elements=3):\n    return [50, 60, 70, 80, 90, 100, 110, 120, 130, 140]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the sum of all elements in each row is greater than the sum of all elements in each column.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    row_sums = [sum(row) for row in arr]\n    col_sums = [sum(col) for col in zip(*arr)]\n    return all(row_sum > col_sum for row_sum, col_sum in zip(row_sums, col_sums))\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 494, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the sum of all elements in each row is greater than the sum of all elements in each column.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    row_sums = [sum(row) for row in arr]\n    col_sums = [sum(col) for col in zip(*arr)]\n    return all(row_sum > col_sum for row_sum, col_sum in zip(row_sums, col_sums))", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> int:\n    \"\"\"\n    Given a list of integers `nums` and an integer `k`, find the longest subarray in the list that sums up to at most k.\n    Return the length of the longest subarray.\n\n    Example:\n    nums = [1, -2, 3, 4, -5]\n    k = 3\n    Output: 3\n    Explanation: The longest subarray that sums up to at most 3 is [1, -2, 3] with a length of 3.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = {0: -1}\n    max_length = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n        if prefix_sum <= k:\n            max_length = max(max_length, i - prefix_sums.get(prefix_sum - k, i))\n        if prefix_sum not in prefix_sums:\n            prefix_sums[prefix_sum] = i\n\n    return max_length\n\ndef g(nums: List[int] = [1, -2, 3, 4, -5], k: int = 3):\n    return (nums, k)\n\nassert f(*g()) == 3\n\n", "emb": null, "idx_generation": 494, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> int:\n    \"\"\"\n    Given a list of integers `nums` and an integer `k`, find the longest subarray in the list that sums up to at most k.\n    Return the length of the longest subarray.\n\n    Example:\n    nums = [1, -2, 3, 4, -5]\n    k = 3\n    Output: 3\n    Explanation: The longest subarray that sums up to at most 3 is [1, -2, 3] with a length of 3.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = {0: -1}\n    max_length = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n        if prefix_sum <= k:\n            max_length = max(max_length, i - prefix_sums.get(prefix_sum - k, i))\n        if prefix_sum not in prefix_sums:\n            prefix_sums[prefix_sum] = i\n\n    return max_length", "solution_func": "def g(nums: List[int] = [1, -2, 3, 4, -5], k: int = 3):\n    return (nums, k)", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nimport itertools\n\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Find if there exists a combination of numbers in nums that sums up to target.\"\"\"\n    for r in range(1, len(nums)+1):\n        for combination in itertools.combinations(nums, r):\n            if sum(combination) == target:\n                return True\n    return False\n\ndef g(target=12):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\n\nassert f(g()) == True\n", "emb": [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], "idx_generation": 495, "target_skills": null, "problem_func": "from typing import*\nimport itertools\n\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Find if there exists a combination of numbers in nums that sums up to target.\"\"\"\n    for r in range(1, len(nums)+1):\n        for combination in itertools.combinations(nums, r):\n            if sum(combination) == target:\n                return True\n    return False", "solution_func": "def g(target=12):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums", "map_ix": [0, 1, 0, 0, 0, 1, 0, 0, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find the largest product of two distinct numbers from the list that is less than the target value.\"\"\"\n    max_product = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            product = nums[i] * nums[j]\n            if product < target and product > max_product:\n                max_product = product\n    return max_product\n\ndef g(target=100):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\n\nassert f(g()) == 72\n", "emb": null, "idx_generation": 495, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find the largest product of two distinct numbers from the list that is less than the target value.\"\"\"\n    max_product = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            product = nums[i] * nums[j]\n            if product < target and product > max_product:\n                max_product = product\n    return max_product", "solution_func": "def g(target=100):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find if there exists a subset of numbers from the list that sums up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n    for i in range(1, n + 1):\n        for j in range(target + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j >= nums[i - 1]:\n                dp[i][j] = dp[i][j] or dp[i - 1][j - nums[i - 1]]\n    return dp[n][target]\n\ndef g(target=20):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 495, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find if there exists a subset of numbers from the list that sums up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n    for i in range(1, n + 1):\n        for j in range(target + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j >= nums[i - 1]:\n                dp[i][j] = dp[i][j] or dp[i - 1][j - nums[i - 1]]\n    return dp[n][target]", "solution_func": "def g(target=20):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a pair of numbers that sum up to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in nums_set and complement != num:\n            return True\n    return False\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8], target: int = 9):\n    return nums, target\n\nassert f(*g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 495, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a pair of numbers that sum up to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in nums_set and complement != num:\n            return True\n    return False", "solution_func": "def g(nums: List[int] = [2, 5, 3, 4, 8], target: int = 9):\n    return nums, target", "map_ix": [1, 0, 0, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a triplet of numbers that sum up to the target.\n    If such a triplet exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            complement = target - nums[i] - nums[j]\n            if complement in nums_set and complement != nums[i] and complement != nums[j]:\n                return True\n    return False\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8], target: int = 11):\n    return nums, target\n\nassert f(*g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 495, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a triplet of numbers that sum up to the target.\n    If such a triplet exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            complement = target - nums[i] - nums[j]\n            if complement in nums_set and complement != nums[i] and complement != nums[j]:\n                return True\n    return False", "solution_func": "def g(nums: List[int] = [2, 5, 3, 4, 8], target: int = 11):\n    return nums, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[List[int]]:\n    \"\"\"\n    Given a list of integers, find all unique quadruplets that sum up to the target.\n    Return a list of the quadruplets.\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    result = []\n    for i in range(n-3):\n        if i > 0 and nums[i] == nums[i-1]:\n            continue\n        for j in range(i+1, n-2):\n            if j > i+1 and nums[j] == nums[j-1]:\n                continue\n            left = j + 1\n            right = n - 1\n            while left < right:\n                total = nums[i] + nums[j] + nums[left] + nums[right]\n                if total < target:\n                    left += 1\n                elif total > target:\n                    right -= 1\n                else:\n                    result.append([nums[i], nums[j], nums[left], nums[right]])\n                    while left < right and nums[left] == nums[left+1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right-1]:\n                        right -= 1\n                    left += 1\n                    right -= 1\n    return result\n\ndef g(nums: List[int] = [1, 0, -1, 0, -2, 2], target: int = 0):\n    return nums, target\n\nassert f(*g()) == [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]]\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], "idx_generation": 495, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> List[List[int]]:\n    \"\"\"\n    Given a list of integers, find all unique quadruplets that sum up to the target.\n    Return a list of the quadruplets.\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    result = []\n    for i in range(n-3):\n        if i > 0 and nums[i] == nums[i-1]:\n            continue\n        for j in range(i+1, n-2):\n            if j > i+1 and nums[j] == nums[j-1]:\n                continue\n            left = j + 1\n            right = n - 1\n            while left < right:\n                total = nums[i] + nums[j] + nums[left] + nums[right]\n                if total < target:\n                    left += 1\n                elif total > target:\n                    right -= 1\n                else:\n                    result.append([nums[i], nums[j], nums[left], nums[right]])\n                    while left < right and nums[left] == nums[left+1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right-1]:\n                        right -= 1\n                    left += 1\n                    right -= 1\n    return result", "solution_func": "def g(nums: List[int] = [1, 0, -1, 0, -2, 2], target: int = 0):\n    return nums, target", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a staircase pattern.\n    A staircase pattern is a grid where the elements form a pattern that starts with a decreasing sequence in each row, and the next row starts with a smaller value than the previous row.\n\n    Sample Input:\n    arr = [[9, 8, 7], [6, 5, 4], [3, 2, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(1, n):\n        if arr[i][0] >= arr[i-1][0]:\n            return False\n        for j in range(m-1):\n            if arr[i][j] >= arr[i-1][j] or arr[i][j+1] >= arr[i][j]:\n                return False\n    return True\n\ndef g(arr: List[List[int]] = [[9, 8, 7], [6, 5, 4], [3, 2, 1]]):\n    return arr\n\nassert f(g()) == True\n", "emb": [1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 495, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a staircase pattern.\n    A staircase pattern is a grid where the elements form a pattern that starts with a decreasing sequence in each row, and the next row starts with a smaller value than the previous row.\n\n    Sample Input:\n    arr = [[9, 8, 7], [6, 5, 4], [3, 2, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(1, n):\n        if arr[i][0] >= arr[i-1][0]:\n            return False\n        for j in range(m-1):\n            if arr[i][j] >= arr[i-1][j] or arr[i][j+1] >= arr[i][j]:\n                return False\n    return True", "solution_func": "def g(arr: List[List[int]] = [[9, 8, 7], [6, 5, 4], [3, 2, 1]]):\n    return arr", "map_ix": [1, 1, 1, 0, 0, 1, 1, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a zigzag pattern.\n    A zigzag pattern is a grid where the elements form a pattern that alternates between ascending and descending sequences in each row.\n\n    Sample Input:\n    arr = [[1, 2, 3], [6, 5, 4], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(1, n):\n        if i % 2 == 0:\n            if arr[i][0] <= arr[i-1][0]:\n                return False\n            for j in range(m-1):\n                if arr[i][j] <= arr[i-1][j] or arr[i][j+1] >= arr[i][j]:\n                    return False\n        else:\n            if arr[i][0] >= arr[i-1][0]:\n                return False\n            for j in range(m-1):\n                if arr[i][j] >= arr[i-1][j] or arr[i][j+1] <= arr[i][j]:\n                    return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [6, 5, 4], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 495, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a zigzag pattern.\n    A zigzag pattern is a grid where the elements form a pattern that alternates between ascending and descending sequences in each row.\n\n    Sample Input:\n    arr = [[1, 2, 3], [6, 5, 4], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(1, n):\n        if i % 2 == 0:\n            if arr[i][0] <= arr[i-1][0]:\n                return False\n            for j in range(m-1):\n                if arr[i][j] <= arr[i-1][j] or arr[i][j+1] >= arr[i][j]:\n                    return False\n        else:\n            if arr[i][0] >= arr[i-1][0]:\n                return False\n            for j in range(m-1):\n                if arr[i][j] >= arr[i-1][j] or arr[i][j+1] <= arr[i][j]:\n                    return False\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [6, 5, 4], [7, 8, 9]]):\n    return arr", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a symmetric pattern.\n    A symmetric pattern is a grid where the elements form a pattern that is symmetric across the diagonal.\n\n    Sample Input:\n    arr = [[1, 2, 3], [2, 1, 4], [3, 4, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(n):\n        for j in range(i+1, m):\n            if arr[i][j] != arr[j][i]:\n                return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [2, 1, 4], [3, 4, 1]]):\n    return arr\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 495, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a symmetric pattern.\n    A symmetric pattern is a grid where the elements form a pattern that is symmetric across the diagonal.\n\n    Sample Input:\n    arr = [[1, 2, 3], [2, 1, 4], [3, 4, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(n):\n        for j in range(i+1, m):\n            if arr[i][j] != arr[j][i]:\n                return False\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [2, 1, 4], [3, 4, 1]]):\n    return arr", "map_ix": [1, 0, 1, 0, 0, 1, 1, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int, a=14302, b=5) -> bool:\n    \"\"\"\n    Given an integer n, find the n-th Fibonacci number.\n\n    Sample input:\n    6\n\n    Sample output:\n    8\n\n    Explanation: The 6th Fibonacci number is 8.\n    \"\"\"\n    assert n >= 0, 'Hint: n should be a non-negative integer.'\n    fib = [0, 1]\n    while len(fib) <= n:\n        fib.append(fib[-1] + fib[-2])\n    return fib[n]\ndef g(n = 6, a = 14302, b = 5):\n    return n\nassert f(g()) == 8\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 495, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=14302, b=5) -> bool:\n    \"\"\"\n    Given an integer n, find the n-th Fibonacci number.\n\n    Sample input:\n    6\n\n    Sample output:\n    8\n\n    Explanation: The 6th Fibonacci number is 8.\n    \"\"\"\n    assert n >= 0, 'Hint: n should be a non-negative integer.'\n    fib = [0, 1]\n    while len(fib) <= n:\n        fib.append(fib[-1] + fib[-2])\n    return fib[n]", "solution_func": "def g(n = 6, a = 14302, b = 5):\n    return n", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(x: int, a=93252338) -> bool:\n    \"\"\"Check if a number is a palindrome\"\"\"\n    return str(x) == str(x)[::-1]\n\ndef g(a = 93252338):\n    return a\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 496, "target_skills": null, "problem_func": "from typing import*\ndef f(x: int, a=93252338) -> bool:\n    \"\"\"Check if a number is a palindrome\"\"\"\n    return str(x) == str(x)[::-1]", "solution_func": "def g(a = 93252338):\n    return a", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, a=93252338) -> bool:\n    \"\"\"Check if a number is a prime number\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(a = 93252338):\n    return a\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 496, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=93252338) -> bool:\n    \"\"\"Check if a number is a prime number\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "solution_func": "def g(a = 93252338):\n    return a", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(n: int, a=93252338) -> bool:\n    \"\"\"Check if a number is a perfect square\"\"\"\n    return int(n**0.5) ** 2 == n\n\ndef g(a = 93252338):\n    return a\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 496, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int, a=93252338) -> bool:\n    \"\"\"Check if a number is a perfect square\"\"\"\n    return int(n**0.5) ** 2 == n", "solution_func": "def g(a = 93252338):\n    return a", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(arr: List[int], k=5) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose sum is equal to k\"\"\"\n    return any(arr[i] + arr[j] == k for i in range(len(arr)) for j in range(i+1, len(arr)))\ndef g(k=5):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 496, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], k=5) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose sum is equal to k\"\"\"\n    return any(arr[i] + arr[j] == k for i in range(len(arr)) for j in range(i+1, len(arr)))", "solution_func": "def g(k=5):\n    return [1, 2, 3, 4, 5]", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], n=3) -> bool:\n    \"\"\"Check if the list contains exactly n even numbers\"\"\"\n    return len([num for num in arr if num % 2 == 0]) == n\ndef g(n=3):\n    return [2, 4, 6, 8, 10]\nassert f(g())\n", "emb": null, "idx_generation": 496, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], n=3) -> bool:\n    \"\"\"Check if the list contains exactly n even numbers\"\"\"\n    return len([num for num in arr if num % 2 == 0]) == n", "solution_func": "def g(n=3):\n    return [2, 4, 6, 8, 10]", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(arr: List[int], x=10) -> bool:\n    \"\"\"Check if there exists an element in the list that is greater than x\"\"\"\n    return any(num > x for num in arr)\ndef g(x=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n", "emb": null, "idx_generation": 496, "target_skills": null, "problem_func": "from typing import*\ndef f(arr: List[int], x=10) -> bool:\n    \"\"\"Check if there exists an element in the list that is greater than x\"\"\"\n    return any(num > x for num in arr)", "solution_func": "def g(x=10):\n    return [1, 2, 3, 4, 5]", "map_ix": null}, {"fitness": -Infinity, "program_str": "import numpy as np\nfrom typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n    A symmetric matrix is a square matrix that is equal to its transpose.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\n    Sample Output:\n    False\n    \"\"\"\n    transpose_matrix = np.transpose(matrix).tolist()\n    return matrix == transpose_matrix\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g()) == False\n\n", "emb": null, "idx_generation": 496, "target_skills": null, "problem_func": "import numpy as np\nfrom typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n    A symmetric matrix is a square matrix that is equal to its transpose.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\n    Sample Output:\n    False\n    \"\"\"\n    transpose_matrix = np.transpose(matrix).tolist()\n    return matrix == transpose_matrix", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(strings: List[str]) -> bool:\n    \"\"\"\n    Check if all strings in the list are anagrams of each other.\n\n    Sample Input:\n    strings = ['race', 'acre', 'care']\n\n    Sample Output:\n    True\n    \"\"\"\n    sorted_strings = [\"\".join(sorted(s)) for s in strings]\n    return len(set(sorted_strings)) == 1\n\ndef g(strings: List[str] = ['race', 'acre', 'care']):\n    return strings\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 496, "target_skills": null, "problem_func": "from typing import*\n\ndef f(strings: List[str]) -> bool:\n    \"\"\"\n    Check if all strings in the list are anagrams of each other.\n\n    Sample Input:\n    strings = ['race', 'acre', 'care']\n\n    Sample Output:\n    True\n    \"\"\"\n    sorted_strings = [\"\".join(sorted(s)) for s in strings]\n    return len(set(sorted_strings)) == 1", "solution_func": "def g(strings: List[str] = ['race', 'acre', 'care']):\n    return strings", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the second largest element in the list.\n\n    Example:\n    nums = [5, 2, 9, 6, 1]\n\n    The second largest element in the list is 6.\n    Therefore, f(nums) returns 6.\n    \"\"\"\n    max_num = float('-inf')\n    second_max_num = float('-inf')\n    for num in nums:\n        if num > max_num:\n            second_max_num = max_num\n            max_num = num\n        elif num > second_max_num and num < max_num:\n            second_max_num = num\n    return second_max_num\n\ndef g(nums: List[int] = [5, 2, 9, 6, 1]):\n    return nums\n\nassert f(g()) == 6\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 496, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the second largest element in the list.\n\n    Example:\n    nums = [5, 2, 9, 6, 1]\n\n    The second largest element in the list is 6.\n    Therefore, f(nums) returns 6.\n    \"\"\"\n    max_num = float('-inf')\n    second_max_num = float('-inf')\n    for num in nums:\n        if num > max_num:\n            second_max_num = max_num\n            max_num = num\n        elif num > second_max_num and num < max_num:\n            second_max_num = num\n    return second_max_num", "solution_func": "def g(nums: List[int] = [5, 2, 9, 6, 1]):\n    return nums", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find if there exists a pair of numbers in the list that add up to the target.\n\n    Sample Input:\n    nums = [2, 4, 6, 8, 10]\n    target = 12\n\n    Sample Output:\n    True\n    \"\"\"\n    complements = set()\n    for num in nums:\n        complement = target - num\n        if complement in complements:\n            return True\n        complements.add(num)\n    return False\n\ndef g():\n    return [2, 4, 6, 8, 10], 12\n\nassert f(*g())\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 496, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find if there exists a pair of numbers in the list that add up to the target.\n\n    Sample Input:\n    nums = [2, 4, 6, 8, 10]\n    target = 12\n\n    Sample Output:\n    True\n    \"\"\"\n    complements = set()\n    for num in nums:\n        complement = target - num\n        if complement in complements:\n            return True\n        complements.add(num)\n    return False", "solution_func": "def g():\n    return [2, 4, 6, 8, 10], 12", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Find the sum of all numbers in the given list that are greater than the target value.\n    Return the sum.\n    \"\"\"\n    total = 0\n    for num in nums:\n        if num > target:\n            total += num\n    return total\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 5):\n    return nums, target\n\nassert f(*g()) == 45\n", "emb": null, "idx_generation": 497, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Find the sum of all numbers in the given list that are greater than the target value.\n    Return the sum.\n    \"\"\"\n    total = 0\n    for num in nums:\n        if num > target:\n            total += num\n    return total", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 5):\n    return nums, target", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find all the indices where the target value occurs in the given list.\n    Return a list of indices.\n    \"\"\"\n    indices = []\n    for i in range(len(nums)):\n        if nums[i] == target:\n            indices.append(i)\n    return indices\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 5):\n    return nums, target\n\nassert f(*g()) == [4]\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 497, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find all the indices where the target value occurs in the given list.\n    Return a list of indices.\n    \"\"\"\n    indices = []\n    for i in range(len(nums)):\n        if nums[i] == target:\n            indices.append(i)\n    return indices", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 5):\n    return nums, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the target value is present in the given list.\n    Return True if present, else False.\n    \"\"\"\n    for num in nums:\n        if num == target:\n            return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 5):\n    return nums, target\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 497, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the target value is present in the given list.\n    Return True if present, else False.\n    \"\"\"\n    for num in nums:\n        if num == target:\n            return True\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 5):\n    return nums, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a pair of numbers that sum up to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for i in range(len(nums)-1):\n        complement = target - nums[i]\n        if complement in nums_set and complement != nums[i]:\n            return True\n    return False\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8], target: int = 11):\n    return nums, target\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 497, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a pair of numbers that sum up to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for i in range(len(nums)-1):\n        complement = target - nums[i]\n        if complement in nums_set and complement != nums[i]:\n            return True\n    return False", "solution_func": "def g(nums: List[int] = [2, 5, 3, 4, 8], target: int = 11):\n    return nums, target", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers, find a pair of numbers that sum up to the target.\n    If such a pair exists, return the pair. Otherwise, return an empty list.\n    \"\"\"\n    nums_set = set(nums)\n    for i in range(len(nums)-1):\n        complement = target - nums[i]\n        if complement in nums_set and complement != nums[i]:\n            return [nums[i], complement]\n    return []\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8], target: int = 11):\n    return nums, target\n\nassert f(*g()) == [3, 8]\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 497, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers, find a pair of numbers that sum up to the target.\n    If such a pair exists, return the pair. Otherwise, return an empty list.\n    \"\"\"\n    nums_set = set(nums)\n    for i in range(len(nums)-1):\n        complement = target - nums[i]\n        if complement in nums_set and complement != nums[i]:\n            return [nums[i], complement]\n    return []", "solution_func": "def g(nums: List[int] = [2, 5, 3, 4, 8], target: int = 11):\n    return nums, target", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> Tuple[int, int, int]:\n    \"\"\"\n    Given a list of integers, find three numbers that sum up to the target.\n    If such three numbers exist, return the three numbers as a tuple. Otherwise, return an empty tuple.\n    \"\"\"\n    nums_set = set(nums)\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            complement = target - nums[i] - nums[j]\n            if complement in nums_set and complement != nums[i] and complement != nums[j]:\n                return (nums[i], nums[j], complement)\n    return ()\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8], target: int = 11):\n    return nums, target\n\nassert f(*g()) == (2, 3, 6)\n", "emb": null, "idx_generation": 497, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> Tuple[int, int, int]:\n    \"\"\"\n    Given a list of integers, find three numbers that sum up to the target.\n    If such three numbers exist, return the three numbers as a tuple. Otherwise, return an empty tuple.\n    \"\"\"\n    nums_set = set(nums)\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            complement = target - nums[i] - nums[j]\n            if complement in nums_set and complement != nums[i] and complement != nums[j]:\n                return (nums[i], nums[j], complement)\n    return ()", "solution_func": "def g(nums: List[int] = [2, 5, 3, 4, 8], target: int = 11):\n    return nums, target", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix, rotate it 90 degrees counter-clockwise.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    The matrix after rotating 90 degrees counter-clockwise is:\n    [[3, 6, 9], [2, 5, 8], [1, 4, 7]]\n    Therefore, f(matrix) returns [[3, 6, 9], [2, 5, 8], [1, 4, 7]].\n    \"\"\"\n    n = len(matrix)\n    rotated_matrix = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        for j in range(n):\n            rotated_matrix[i][j] = matrix[j][n - i - 1]\n\n    return rotated_matrix\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [[3, 6, 9], [2, 5, 8], [1, 4, 7]]\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 497, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix, rotate it 90 degrees counter-clockwise.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    The matrix after rotating 90 degrees counter-clockwise is:\n    [[3, 6, 9], [2, 5, 8], [1, 4, 7]]\n    Therefore, f(matrix) returns [[3, 6, 9], [2, 5, 8], [1, 4, 7]].\n    \"\"\"\n    n = len(matrix)\n    rotated_matrix = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        for j in range(n):\n            rotated_matrix[i][j] = matrix[j][n - i - 1]\n\n    return rotated_matrix", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix, flip it horizontally.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    The matrix after flipping horizontally is:\n    [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\n    Therefore, f(matrix) returns [[3, 2, 1], [6, 5, 4], [9, 8, 7]].\n    \"\"\"\n    n = len(matrix)\n    flipped_matrix = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        for j in range(n):\n            flipped_matrix[i][j] = matrix[i][n - j - 1]\n\n    return flipped_matrix\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 497, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix, flip it horizontally.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    The matrix after flipping horizontally is:\n    [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\n    Therefore, f(matrix) returns [[3, 2, 1], [6, 5, 4], [9, 8, 7]].\n    \"\"\"\n    n = len(matrix)\n    flipped_matrix = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        for j in range(n):\n            flipped_matrix[i][j] = matrix[i][n - j - 1]\n\n    return flipped_matrix", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix, multiply each element by 2.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    The matrix after multiplying each element by 2 is:\n    [[2, 4, 6], [8, 10, 12], [14, 16, 18]]\n    Therefore, f(matrix) returns [[2, 4, 6], [8, 10, 12], [14, 16, 18]].\n    \"\"\"\n    n = len(matrix)\n    multiplied_matrix = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        for j in range(n):\n            multiplied_matrix[i][j] = matrix[i][j] * 2\n\n    return multiplied_matrix\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [[2, 4, 6], [8, 10, 12], [14, 16, 18]]\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 497, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix, multiply each element by 2.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    The matrix after multiplying each element by 2 is:\n    [[2, 4, 6], [8, 10, 12], [14, 16, 18]]\n    Therefore, f(matrix) returns [[2, 4, 6], [8, 10, 12], [14, 16, 18]].\n    \"\"\"\n    n = len(matrix)\n    multiplied_matrix = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        for j in range(n):\n            multiplied_matrix[i][j] = matrix[i][j] * 2\n\n    return multiplied_matrix", "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers `arr` and an integer `target`, find if there exists a pair of numbers in the list that sums up to the target.\n    Return True if such a pair exists, False otherwise.\n\n    Example:\n    arr = [1, 2, 3, 4, 5]\n    target = 7\n    Output: True\n    Explanation: The pair (2, 5) sums up to 7.\n    \"\"\"\n    num_set = set()\n    for num in arr:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return (arr, target)\n\nassert f(*g()) == True\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 497, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers `arr` and an integer `target`, find if there exists a pair of numbers in the list that sums up to the target.\n    Return True if such a pair exists, False otherwise.\n\n    Example:\n    arr = [1, 2, 3, 4, 5]\n    target = 7\n    Output: True\n    Explanation: The pair (2, 5) sums up to 7.\n    \"\"\"\n    num_set = set()\n    for num in arr:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False", "solution_func": "def g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return (arr, target)", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a lower triangular matrix.\n    A lower triangular matrix has all elements above the main diagonal equal to zero.\n\n    Sample Input:\n    arr = [[1, 0, 0], [2, 3, 0], [4, 5, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i][j] != 0:\n                return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[1, 0, 0], [2, 3, 0], [4, 5, 6]]):\n    return arr\n\nassert f(g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 498, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a lower triangular matrix.\n    A lower triangular matrix has all elements above the main diagonal equal to zero.\n\n    Sample Input:\n    arr = [[1, 0, 0], [2, 3, 0], [4, 5, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i][j] != 0:\n                return False\n\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 0, 0], [2, 3, 0], [4, 5, 6]]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a symmetric matrix.\n    A symmetric matrix is equal to its transpose.\n\n    Sample Input:\n    arr = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i][j] != arr[j][i]:\n                return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return arr\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 498, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a symmetric matrix.\n    A symmetric matrix is equal to its transpose.\n\n    Sample Input:\n    arr = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i][j] != arr[j][i]:\n                return False\n\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return arr", "map_ix": [1, 0, 1, 0, 0, 1, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid of numbers where the sums of the numbers in each row, each column, and both main diagonals are the same.\n\n    Sample Input:\n    arr = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    target_sum = sum(arr[0])\n\n    # Check rows\n    for row in arr:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += arr[i][j]\n        if col_sum != target_sum:\n            return False\n\n    # Check main diagonal\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += arr[i][i]\n    if diagonal_sum != target_sum:\n        return False\n\n    # Check secondary diagonal\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += arr[i][n - i - 1]\n    if diagonal_sum != target_sum:\n        return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]):\n    return arr\n\nassert f(g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 498, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid of numbers where the sums of the numbers in each row, each column, and both main diagonals are the same.\n\n    Sample Input:\n    arr = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    target_sum = sum(arr[0])\n\n    # Check rows\n    for row in arr:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += arr[i][j]\n        if col_sum != target_sum:\n            return False\n\n    # Check main diagonal\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += arr[i][i]\n    if diagonal_sum != target_sum:\n        return False\n\n    # Check secondary diagonal\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += arr[i][n - i - 1]\n    if diagonal_sum != target_sum:\n        return False\n\n    return True", "solution_func": "def g(arr: List[List[int]] = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]):\n    return arr", "map_ix": [1, 1, 0, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a perfect square grid.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n\n    for row in arr:\n        if len(row) != n:\n            return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 498, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a perfect square grid.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n\n    for row in arr:\n        if len(row) != n:\n            return False\n\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr", "map_ix": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a symmetric grid.\n\n    Sample Input:\n    arr = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i][j] != arr[j][i]:\n                return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return arr\n\nassert f(g()) == True\n", "emb": [1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0], "idx_generation": 498, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a symmetric grid.\n\n    Sample Input:\n    arr = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i][j] != arr[j][i]:\n                return False\n\n    return True", "solution_func": "def g(arr: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return arr", "map_ix": [1, 0, 1, 0, 0, 1, 1, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    False\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    target_sum = sum(arr[0])\n\n    # Check rows\n    for i in range(n):\n        if sum(arr[i]) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(m):\n        column_sum = sum(arr[i][j] for i in range(n))\n        if column_sum != target_sum:\n            return False\n\n    # Check diagonals\n    diagonal_sum1 = sum(arr[i][i] for i in range(n))\n    diagonal_sum2 = sum(arr[i][n-i-1] for i in range(n))\n    if diagonal_sum1 == target_sum or diagonal_sum2 == target_sum:\n        return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return arr\n\nassert f(g()) == False\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 498, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    False\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    target_sum = sum(arr[0])\n\n    # Check rows\n    for i in range(n):\n        if sum(arr[i]) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(m):\n        column_sum = sum(arr[i][j] for i in range(n))\n        if column_sum != target_sum:\n            return False\n\n    # Check diagonals\n    diagonal_sum1 = sum(arr[i][i] for i in range(n))\n    diagonal_sum2 = sum(arr[i][n-i-1] for i in range(n))\n    if diagonal_sum1 == target_sum or diagonal_sum2 == target_sum:\n        return False\n\n    return True", "solution_func": "def g(arr: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return arr", "map_ix": [1, 1, 0, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are exactly 'count' numbers that form a valid geometric progression with a common ratio of 'target'.\n\n    Sample Input:\n    arr = [1, 3, 9, 27, 81]\n    target = 3\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(arr[i] * target == arr[i+1] and arr[i+1] * target == arr[i+2] for i in range(len(arr)-2))\n\ndef g(arr: List[int] = [1, 3, 9, 27, 81], target: int = 3, count: int = 3):\n    return (arr, target, count)\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], "idx_generation": 498, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are exactly 'count' numbers that form a valid geometric progression with a common ratio of 'target'.\n\n    Sample Input:\n    arr = [1, 3, 9, 27, 81]\n    target = 3\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(arr[i] * target == arr[i+1] and arr[i+1] * target == arr[i+2] for i in range(len(arr)-2))", "solution_func": "def g(arr: List[int] = [1, 3, 9, 27, 81], target: int = 3, count: int = 3):\n    return (arr, target, count)", "map_ix": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[str], target: str) -> bool:\n    \"\"\"\n    Check if a given string target can be formed by concatenating the strings in the list arr.\n\n    Sample Input:\n    arr = ['abc', 'def', 'ghi']\n    target = 'abcdefghi'\n\n    Sample Output:\n    True\n    \"\"\"\n    concat_str = ''.join(arr)\n    return concat_str == target\n\ndef g(arr: List[str] = ['abc', 'def', 'ghi'], target: str = 'abcdefghi'):\n    return (arr, target)\n\nassert f(*g()) == True\n\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 498, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[str], target: str) -> bool:\n    \"\"\"\n    Check if a given string target can be formed by concatenating the strings in the list arr.\n\n    Sample Input:\n    arr = ['abc', 'def', 'ghi']\n    target = 'abcdefghi'\n\n    Sample Output:\n    True\n    \"\"\"\n    concat_str = ''.join(arr)\n    return concat_str == target", "solution_func": "def g(arr: List[str] = ['abc', 'def', 'ghi'], target: str = 'abcdefghi'):\n    return (arr, target)", "map_ix": [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are exactly 'count' numbers that form a valid Fibonacci series with a common difference of 'target'.\n\n    Sample Input:\n    arr = [1, 2, 3, 5, 8]\n    target = 2\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(arr[i] + target == arr[i+1] and arr[i+1] + target == arr[i+2] for i in range(len(arr)-2))\n\ndef g(arr: List[int] = [1, 2, 3, 5, 8], target: int = 2, count: int = 3):\n    return (arr, target, count)\n\nassert f(*g()) == True\n\n", "emb": null, "idx_generation": 498, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are exactly 'count' numbers that form a valid Fibonacci series with a common difference of 'target'.\n\n    Sample Input:\n    arr = [1, 2, 3, 5, 8]\n    target = 2\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(arr[i] + target == arr[i+1] and arr[i+1] + target == arr[i+2] for i in range(len(arr)-2))", "solution_func": "def g(arr: List[int] = [1, 2, 3, 5, 8], target: int = 2, count: int = 3):\n    return (arr, target, count)", "map_ix": null}, {"fitness": -Infinity, "program_str": "from typing import*\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray of length k in the given list nums whose sum is equal to zero.\n    \"\"\"\n    for i in range(len(nums) - k + 1):\n        if sum(nums[i:i+k]) == 0:\n            return True\n    return False\n\ndef g(nums=[1, -2, 3, 4, -5], k=3):\n    return nums, k\n\nassert f(*g()) == True\n", "emb": null, "idx_generation": 498, "target_skills": null, "problem_func": "from typing import*\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray of length k in the given list nums whose sum is equal to zero.\n    \"\"\"\n    for i in range(len(nums) - k + 1):\n        if sum(nums[i:i+k]) == 0:\n            return True\n    return False", "solution_func": "def g(nums=[1, -2, 3, 4, -5], k=3):\n    return nums, k", "map_ix": null}, {"fitness": -Infinity, "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find a subset of numbers that sum up to the target.\n\n    Sample input:\n    [1, -2, 3, 4, -1, -6, 7], 2\n\n    Sample output:\n    True\n\n    Explanation: The subset (-2, 4) sums up to 2.\n    \"\"\"\n    from itertools import combinations\n    for r in range(1, len(arr) + 1):\n        for subset in combinations(arr, r):\n            if sum(subset) == target:\n                return True\n    return False\n\ndef g(target=2):\n    return [1, -2, 3, 4, -1, -6, 7]\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 499, "target_skills": null, "problem_func": "import itertools\nfrom typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find a subset of numbers that sum up to the target.\n\n    Sample input:\n    [1, -2, 3, 4, -1, -6, 7], 2\n\n    Sample output:\n    True\n\n    Explanation: The subset (-2, 4) sums up to 2.\n    \"\"\"\n    from itertools import combinations\n    for r in range(1, len(arr) + 1):\n        for subset in combinations(arr, r):\n            if sum(subset) == target:\n                return True\n    return False", "solution_func": "def g(target=2):\n    return [1, -2, 3, 4, -1, -6, 7]", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a given number is a prime number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 13\n\nassert f(g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 499, "target_skills": null, "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a given number is a prime number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "solution_func": "def g():\n    return 13", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": -Infinity, "program_str": "from typing import*\ndef f(s: str, target_char: str) -> bool:\n    \"\"\"\n    Given a string and a target character, check if the target character is present in the string.\n\n    Sample input:\n    \"Hello World!\", \"o\"\n\n    Sample output:\n    True\n\n    Explanation: The target character 'o' is present in the string \"Hello World!\".\n    \"\"\"\n    return target_char in s\n\ndef g(target_char=\"o\"):\n    return \"Hello World!\"\n\nassert f(g()) == True\n", "emb": null, "idx_generation": 499, "target_skills": null, "problem_func": "from typing import*\ndef f(s: str, target_char: str) -> bool:\n    \"\"\"\n    Given a string and a target character, check if the target character is present in the string.\n\n    Sample input:\n    \"Hello World!\", \"o\"\n\n    Sample output:\n    True\n\n    Explanation: The target character 'o' is present in the string \"Hello World!\".\n    \"\"\"\n    return target_char in s", "solution_func": "def g(target_char=\"o\"):\n    return \"Hello World!\"", "map_ix": null}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number k, determine if there exists a subarray (contiguous elements) whose product is equal to k.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    k = 24\n\n    Sample Output:\n    True\n\n    Explanation:\n    The subarray [3, 4] has a product of 12, which is equal to k.\n    \"\"\"\n    n = len(nums)\n    prefix_product = 1\n    prefix_products = {1}\n    for i in range(n):\n        prefix_product *= nums[i]\n        if prefix_product == k or k % prefix_product == 0 and k // prefix_product in prefix_products:\n            return True\n        prefix_products.add(prefix_product)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], k: int = 24):\n    return (nums, k)\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 499, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number k, determine if there exists a subarray (contiguous elements) whose product is equal to k.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    k = 24\n\n    Sample Output:\n    True\n\n    Explanation:\n    The subarray [3, 4] has a product of 12, which is equal to k.\n    \"\"\"\n    n = len(nums)\n    prefix_product = 1\n    prefix_products = {1}\n    for i in range(n):\n        prefix_product *= nums[i]\n        if prefix_product == k or k % prefix_product == 0 and k // prefix_product in prefix_products:\n            return True\n        prefix_products.add(prefix_product)\n    return False", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5], k: int = 24):\n    return (nums, k)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list where each element is the product of all elements in the original list except itself.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    [120, 60, 40, 30, 24]\n\n    Explanation:\n    The product of all elements in nums except 1 is 120.\n    The product of all elements in nums except 2 is 60.\n    The product of all elements in nums except 3 is 40.\n    The product of all elements in nums except 4 is 30.\n    The product of all elements in nums except 5 is 24.\n    \"\"\"\n    n = len(nums)\n    left_products = [1] * n\n    right_products = [1] * n\n    output = []\n    \n    for i in range(1, n):\n        left_products[i] = left_products[i-1] * nums[i-1]\n    \n    for i in range(n-2, -1, -1):\n        right_products[i] = right_products[i+1] * nums[i+1]\n    \n    for i in range(n):\n        output.append(left_products[i] * right_products[i])\n    \n    return output\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return (nums,)\n\nassert f(*g()) == [120, 60, 40, 30, 24]\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 499, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list where each element is the product of all elements in the original list except itself.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    [120, 60, 40, 30, 24]\n\n    Explanation:\n    The product of all elements in nums except 1 is 120.\n    The product of all elements in nums except 2 is 60.\n    The product of all elements in nums except 3 is 40.\n    The product of all elements in nums except 4 is 30.\n    The product of all elements in nums except 5 is 24.\n    \"\"\"\n    n = len(nums)\n    left_products = [1] * n\n    right_products = [1] * n\n    output = []\n    \n    for i in range(1, n):\n        left_products[i] = left_products[i-1] * nums[i-1]\n    \n    for i in range(n-2, -1, -1):\n        right_products[i] = right_products[i+1] * nums[i+1]\n    \n    for i in range(n):\n        output.append(left_products[i] * right_products[i])\n    \n    return output", "solution_func": "def g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return (nums,)", "map_ix": [1, 1, 0, 0, 0, 0, 0, 1, 1, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number k, determine if there exists a subarray (contiguous elements) whose sum is a multiple of k.\n\n    Sample Input:\n    nums = [4, 5, 6, 7, 8, 9]\n    k = 6\n\n    Sample Output:\n    True\n\n    Explanation:\n    The subarray [6, 7, 8] has a sum of 21, which is a multiple of k.\n    \"\"\"\n    n = len(nums)\n    prefix_sum = 0\n    prefix_sums = {0}\n    for i in range(n):\n        prefix_sum = (prefix_sum + nums[i]) % k\n        if prefix_sum in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\n\ndef g(nums: List[int] = [4, 5, 6, 7, 8, 9], k: int = 6):\n    return (nums, k)\n\nassert f(*g()) == True\n", "emb": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 499, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number k, determine if there exists a subarray (contiguous elements) whose sum is a multiple of k.\n\n    Sample Input:\n    nums = [4, 5, 6, 7, 8, 9]\n    k = 6\n\n    Sample Output:\n    True\n\n    Explanation:\n    The subarray [6, 7, 8] has a sum of 21, which is a multiple of k.\n    \"\"\"\n    n = len(nums)\n    prefix_sum = 0\n    prefix_sums = {0}\n    for i in range(n):\n        prefix_sum = (prefix_sum + nums[i]) % k\n        if prefix_sum in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False", "solution_func": "def g(nums: List[int] = [4, 5, 6, 7, 8, 9], k: int = 6):\n    return (nums, k)", "map_ix": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of integers is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    \"\"\"\n    Generate a list of integers that forms a palindrome.\n    \"\"\"\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 499, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of integers is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]", "solution_func": "def g():\n    \"\"\"\n    Generate a list of integers that forms a palindrome.\n    \"\"\"\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"\n    Check if s1 is an anagram of s2.\n    \"\"\"\n    return sorted(s1) == sorted(s2)\n\ndef g():\n    \"\"\"\n    Generate two strings that are anagrams of each other.\n    \"\"\"\n    return \"listen\", \"silent\"\n\nassert f(*g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 499, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"\n    Check if s1 is an anagram of s2.\n    \"\"\"\n    return sorted(s1) == sorted(s2)", "solution_func": "def g():\n    \"\"\"\n    Generate two strings that are anagrams of each other.\n    \"\"\"\n    return \"listen\", \"silent\"", "map_ix": [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there is a duplicate element in the given list of integers.\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    \"\"\"\n    Generate a list of integers with duplicate elements.\n    \"\"\"\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]\n\nassert f(g()) == True\n\n", "emb": [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "idx_generation": 499, "target_skills": null, "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there is a duplicate element in the given list of integers.\n    \"\"\"\n    return len(nums) != len(set(nums))", "solution_func": "def g():\n    \"\"\"\n    Generate a list of integers with duplicate elements.\n    \"\"\"\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]", "map_ix": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"fitness": 1.0, "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a pair of numbers that multiply to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        if target % num == 0 and target // num in nums_set and target // num != num:\n            return True\n    return False\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8], target: int = 15):\n    return nums, target\n\nassert f(*g()) == True\n\n", "emb": [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0], "idx_generation": 499, "target_skills": null, "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a pair of numbers that multiply to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        if target % num == 0 and target // num in nums_set and target // num != num:\n            return True\n    return False", "solution_func": "def g(nums: List[int] = [2, 5, 3, 4, 8], target: int = 15):\n    return nums, target", "map_ix": [1, 1, 0, 0, 0, 1, 0, 1, 1, 0]}]