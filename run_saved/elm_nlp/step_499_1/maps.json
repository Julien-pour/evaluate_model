[
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist three numbers in the list whose sum is equal to the target number.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 18\n\nassert f(*g()) == True\n\n",
        "idx_generation": 455,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a perfect rectangle.\n    A perfect rectangle is a grid where every row has the same number of columns.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5], [6, 7, 8]]\n\n    Sample Output:\n    False\n    \"\"\"\n    num_cols = len(arr[0])\n    for row in arr:\n        if len(row) != num_cols:\n            return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 132,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a zigzag pattern.\n    A zigzag pattern is a grid where the elements form a pattern that alternates between increasing and decreasing.\n\n    Sample Input:\n    arr = [[1, 2, 3], [6, 5, 4], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(n):\n        if i % 2 == 0:\n            for j in range(m-1):\n                if arr[i][j] >= arr[i][j+1]:\n                    return False\n        else:\n            for j in range(m-1):\n                if arr[i][j] <= arr[i][j+1]:\n                    return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [6, 5, 4], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 361,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it is a palindrome.\n\n    Example:\n    nums = [1, 2, 3, 2, 1]\n    output: True\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g() -> List[int]:\n    nums = [1, 2, 3, 2, 1]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 400,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums: List[int] = [1, 2, 3, 2, 1]):\n    return nums\n\nassert f(g()) == True\n\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    \"\"\"\n    Check if the given list of words forms a valid word square.\n\n    A word square is a square grid of letters, where the words read across and down in the grid are the same.\n\n    Sample input:\n    words = [\n        \"ball\",\n        \"area\",\n        \"lead\",\n        \"lady\"\n    ]\n    \n    Sample output:\n    True\n    \n    Explanation: The words \"ball\", \"area\", \"lead\", and \"lady\" form a valid word square.\n    \"\"\"\n\n    n = len(words)\n    \n    for i in range(n):\n        for j in range(len(words[i])):\n            if words[i][j] != words[j][i]:\n                return False\n    \n    return True\n\ndef g() -> List[str]:\n    return [\n        \"ball\",\n        \"area\",\n        \"lead\",\n        \"lady\"\n    ]\n\nassert f(g())\n",
        "idx_generation": 441,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains at least one number that is a power of 2.\n    \"\"\"\n    def is_power_of_2(n):\n        return n & (n - 1) == 0 and n != 0\n\n    return any(is_power_of_2(num) for num in nums)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n\n",
        "idx_generation": 415,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[345, 876, 134, 567, 912, 678, 234, 789, 123, 456]) -> bool:\n    \"\"\"Find the sum of all multiples of n in a list of numbers.\"\"\"\n    return sum(num for num in nums if num % n == 0) > 0\ndef g(nums=[345, 876, 134, 567, 912, 678, 234, 789, 123, 456]):\n    return max(nums)\nassert f(g()) == True\n",
        "idx_generation": 407,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=-8783800228130606, b=-508993556991975) -> bool:\n    \"\"\"Check if a given number is the difference of two other numbers.\"\"\"\n    return a - x == b\n\ndef g(a=-8783800228130606, b=-508993556991975):\n    return a - b\n\nassert f(g())\n",
        "idx_generation": 341,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], n: int) -> bool:\n    \"\"\"\n    Check if the sum of the first n numbers in the list is greater than the sum of the remaining numbers.\n    \"\"\"\n    return sum(nums[:n]) > sum(nums[n:])\n\ndef g():\n    return list(range(10))\n\nassert f(g(), 5) == False\n",
        "idx_generation": 243,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list whose sum is equal to the target value.\n    Return True if such a subarray exists, False otherwise.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if prefix_sum[j] - prefix_sum[i] == target:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return arr, target\n\nassert f(*g()) == True\n",
        "idx_generation": 174,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return the sum of each row in the matrix.\n    \"\"\"\n    row_sums = []\n    \n    for row in matrix:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n        \n    return row_sums\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [6, 15, 24]\n",
        "idx_generation": 315,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(inds: List[int], vecs=[169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]) -> bool:\n    \"\"\"\n    Parity learning: Given binary vectors in a subspace, find the secret set S of indices such that:\n    $\\\\sum_{i \\\\in S} x_i = 1 (mod 2)$\n    \"\"\"\n    return len([sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs])\n\ndef g(vecs = [169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]\nassert f(g()) == 17\n",
        "idx_generation": 281,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an upper triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate an upper triangular matrix of the given size\n    \"\"\"\n    return [[0 if j < i else 1 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n",
        "idx_generation": 31,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, substrings=['abc', 'def', 'ghi', 'jkl']) -> bool:\n    \"\"\"\n    Find a string that contains all the substrings in a specific order\n    \"\"\"\n    index = 0\n    for sub in substrings:\n        if sub not in s[index:]:\n            return False\n        index += s[index:].index(sub) + len(sub)\n    return True\ndef g(substrings=['abc', 'def', 'ghi', 'jkl']):\n    return ''.join(substrings)\nassert f(g()) == True\n",
        "idx_generation": 14,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an upper triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate an upper triangular matrix of the given size\n    \"\"\"\n    return [[0 if j < i else 1 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n",
        "idx_generation": 201,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: List[int], n=5, s=15) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 5, s = 15):\n    x = [1, 2, 3, 4, 5]\n    return x[:n]\nassert f(g()) == True\n",
        "idx_generation": 121,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> int:\n    \"\"\"\n    Find the number of occurrences of the target value in the given list.\n    Return the count of occurrences.\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num == target:\n            count += 1\n    return count\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 5):\n    return arr, target\n\nassert f(*g()) == 1\n",
        "idx_generation": 326,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: List[int], n=3, s=15) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 3, s = 15):\n    if n == 1:\n        return [s]\n    elif n == 2:\n        return [s - 1, 1]\n    else:\n        return [s - 2, 1, 1]\nassert f(g()) == True\n",
        "idx_generation": 31,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(n: int, k: int = 3) -> bool:\n    \"\"\"\n    Check if a given number can be expressed as the sum of k consecutive numbers.\n    \"\"\"\n    if k <= 1:\n        return True\n    if k > n:\n        return False\n    for i in range(1, n // 2 + 1):\n        total = 0\n        count = 0\n        for j in range(i, n + 1):\n            total += j\n            count += 1\n            if total == n and count == k:\n                return True\n            if total > n or count > k:\n                break\n    return False\n\ndef g(n: int = 15, k: int = 3):\n    return (n, k)\n\nassert f(*g())\n",
        "idx_generation": 487,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum element in the list.\n\n    Sample Input:\n    [1, 5, 2, 9, 3]\n\n    Sample Output:\n    9\n    \"\"\"\n    return max(nums)\n\ndef g(nums=[1, 5, 2, 9, 3]):\n    return nums\n\nassert f(g()) == 9\n\n",
        "idx_generation": 400,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Find the index of the maximum element in the list.\"\"\"\n    return lst.index(max(lst))\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g()) == 4\n",
        "idx_generation": 55,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a triplet of numbers whose sum is equal to the target.\n    If such a triplet exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            complement = target - nums[i] - nums[j]\n            if complement in nums_set and complement != nums[i] and complement != nums[j]:\n                return True\n    return False\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 256,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return s == s[::-1]\n\ndef g(s=\"racecar\"):\n    return s\n\nassert f(g()) == True\n",
        "idx_generation": 207,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    num_set = set()\n    for num in lst:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(lst: List[int] = [2, 4, 6, 8, 10], target: int = 12):\n    return (lst, target)\n\nassert f(*g()) == True\n",
        "idx_generation": 156,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix of integers, transpose the matrix (interchange rows and columns) and return the transposed matrix.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    output: [\n        [1, 4, 7],\n        [2, 5, 8],\n        [3, 6, 9]\n    ]\n    \"\"\"\n    transposed_matrix = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n    return transposed_matrix\n\ndef g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\nassert f(g()) == [\n    [1, 4, 7],\n    [2, 5, 8],\n    [3, 6, 9]\n]\n",
        "idx_generation": 295,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import *\ndef f(matrix: List[List[int]], num_rows=4, num_cols=4) -> bool:\n    \"\"\"Check if a given matrix is upper triangular\"\"\"\n    for i in range(num_rows):\n        for j in range(num_cols):\n            if i > j and matrix[i][j] != 0:\n                return False\n    return True\ndef g(matrix=[[1, 2, 3, 4], [0, 5, 6, 7], [0, 0, 8, 9], [0, 0, 0, 10]], num_rows=4, num_cols=4):\n    return matrix\nassert f(g()) == True\n",
        "idx_generation": 82,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find a pair of numbers from a list that sums up to a target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=20):\n    return [5, 15, 3, 7, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 19,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if all numbers in the list are greater than the target\"\"\"\n    return all(num > target for num in nums)\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 0):\n    return (nums, target)\n\nassert f(*g()) == True\n",
        "idx_generation": 77,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a spiral pattern.\n    A spiral pattern is a grid where the elements form a clockwise inward spiral, starting from the top-left corner.\n\n    Sample Input:\n    arr = [[1, 2, 3], [8, 9, 4], [7, 6, 5]]\n\n    Sample Output:\n    True\n    \"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n    n = rows * cols\n\n    top = 0\n    bottom = rows - 1\n    left = 0\n    right = cols - 1\n\n    direction = 0\n    count = 0\n\n    while count < n:\n        if direction == 0:\n            for i in range(left, right+1):\n                if arr[top][i] != count + 1:\n                    return False\n                count += 1\n            top += 1\n            direction = 1\n        elif direction == 1:\n            for i in range(top, bottom+1):\n                if arr[i][right] != count + 1:\n                    return False\n                count += 1\n            right -= 1\n            direction = 2\n        elif direction == 2:\n            for i in range(right, left-1, -1):\n                if arr[bottom][i] != count + 1:\n                    return False\n                count += 1\n            bottom -= 1\n            direction = 3\n        elif direction == 3:\n            for i in range(bottom, top-1, -1):\n                if arr[i][left] != count + 1:\n                    return False\n                count += 1\n            left += 1\n            direction = 0\n\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [8, 9, 4], [7, 6, 5]]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 412,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(grid: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a 2D grid of integers and a target number, return True if the target number exists in the grid,\n    otherwise return False.\n\n    Sample input:\n    grid = [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]\n    target = 5\n\n    Sample output:\n    True\n\n    Explanation: The target number 5 exists in the grid.\n    \"\"\"\n    for row in grid:\n        if target in row:\n            return True\n    return False\n\ndef g(grid=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=5):\n    return grid, target\n\nassert f(*g()) == True\n",
        "idx_generation": 138,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if each row and column has an even sum.\n\n    Sample Input:\n    arr = [[2, 4, 6], [8, 10, 12], [14, 16, 18]]\n\n    Sample Output:\n    True\n    \"\"\"\n    row_sum = [sum(row) for row in arr]\n    column_sum = [sum(column) for column in zip(*arr)]\n    return all(sum_value % 2 == 0 for sum_value in row_sum + column_sum)\n\ndef g(arr: List[List[int]] = [[2, 4, 6], [8, 10, 12], [14, 16, 18]]):\n    return arr\n\nassert f(g()) == True\n\n",
        "idx_generation": 263,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a checkerboard pattern.\n    A checkerboard pattern is a grid where the elements form a pattern similar to a checkerboard.\n\n    Sample Input:\n    arr = [[1, 2, 1], [2, 1, 2], [1, 2, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if (i + j) % 2 == 0 and arr[i][j] != 1:\n                return False\n            if (i + j) % 2 != 0 and arr[i][j] != 2:\n                return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 1], [2, 1, 2], [1, 2, 1]]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 159,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import *\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"\n    Determine if it is possible to find a pair of numbers in a list that XORs to a target number. The pair of numbers\n    must be distinct and the order of the numbers in the pair does not matter.\n\n    Sample input:\n    [5, 10, 15, 20]\n\n    Sample output:\n    True\n\n    The pair of numbers (10, 15) XORs to 5, which is the target number.\n    \"\"\"\n    return any(num1 ^ num2 == target for i, num1 in enumerate(numbers) for num2 in numbers[i+1:])\ndef g(target=0):\n    return [5, 10, 15, target ^ 5]\nassert f(g()) == True\n",
        "idx_generation": 49,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import *\ndef f(s: List[int], target_sum=100) -> bool:\n    \"\"\"\n    Find if there exists a pair of numbers in the given list whose sum is equal to the target_sum.\n    \"\"\"\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] + s[j] == target_sum:\n                return True\n    return False\ndef g(s=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return sorted(s)\nassert f(g()) == True\n",
        "idx_generation": 21,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is.\n    \"\"\"\n    return nums\n\nassert f(g([3, 4, -7, 2, 1, 3, 1]), 4)\n",
        "idx_generation": 245,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"Given an array of integers, replace each element with the product of all the other elements without using the division operation.\"\"\"\n    n = len(nums)\n    result = [1] * n\n\n    left_product = 1\n    for i in range(n):\n        result[i] *= left_product\n        left_product *= nums[i]\n\n    right_product = 1\n    for i in range(n - 1, -1, -1):\n        result[i] *= right_product\n        right_product *= nums[i]\n\n    return result\n\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    return (nums,)\n\nassert f(*g()) == [120, 60, 40, 30, 24]\n",
        "idx_generation": 65,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    # check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # check columns\n    for col in range(n):\n        if sum(matrix[i][col] for i in range(n)) != target_sum:\n            return False\n    # check diagonals\n    if sum(matrix[i][i] for i in range(n)) != target_sum or sum(matrix[i][n-i-1] for i in range(n)) != target_sum:\n        return False\n    return True\n\ndef g(n: int):\n    \"\"\"Generate a magic square of size n.\"\"\"\n    if n % 2 == 0:\n        raise ValueError(\"n must be odd\")\n    magic_square = [[0] * n for _ in range(n)]\n    i = n // 2\n    j = n - 1\n    num = 1\n    while num <= n * n:\n        if i == -1 and j == n:  # condition 4\n            j = n - 2\n            i = 0\n        else:\n            if j == n:\n                j = 0\n            if i < 0:\n                i = n - 1\n        if magic_square[int(i)][int(j)]:  # condition 2\n            j = j - 2\n            i = i + 1\n            continue\n        else:\n            magic_square[int(i)][int(j)] = num\n            num = num + 1\n        j = j + 1\n        i = i - 1  # condition 1\n    return magic_square\n\nassert f(g(3)) == True\n",
        "idx_generation": 175,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(matrix: List[List[int]]) -> List[Tuple[int, int]]:\n    \"\"\"\n    Given a matrix of integers, find all the coordinates of the cells that contain the maximum value in the matrix.\n    Return a list of tuples representing the row and column indices of these cells.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    output: [(2, 2)]\n    \"\"\"\n    max_value = max(max(row) for row in matrix)\n    max_coords = [(i, j) for i, row in enumerate(matrix) for j, num in enumerate(row) if num == max_value]\n    return max_coords\n\ndef g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\nassert f(g()) == [(2, 2)]\n",
        "idx_generation": 492,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are exactly 'count' numbers that form a valid arithmetic progression with a common difference of 'target'.\n\n    Sample Input:\n    nums = [1, 3, 5, 7, 9]\n    target = 2\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(nums[i] + target == nums[i+1] and nums[i+1] + target == nums[i+2] for i in range(len(nums)-2))\n\ndef g(nums: List[int] = [1, 3, 5, 7, 9], target: int = 2, count: int = 3):\n    return (nums, target, count)\n\nassert f(*g())\n",
        "idx_generation": 290,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if there exists a subarray (contiguous elements) whose sum is equal to the target.\n\n    Sample Input:\n    nums = [1, 4, 2, 8, 3]\n    target = 11\n\n    Sample Output:\n    True\n\n    Explanation:\n    The subarray [4, 2, 5] has a sum of 11.\n    \"\"\"\n    n = len(nums)\n    prefix_sum = 0\n    prefix_sums = {0}\n    for i in range(n):\n        prefix_sum += nums[i]\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\n\ndef g(nums: List[int] = [1, 4, 2, 8, 3], target: int = 11):\n    return (nums, target)\n\nassert f(*g()) == True\n",
        "idx_generation": 224,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=5) -> bool:\n    \"\"\"\n    Given an array of integers and a target value, find two numbers in the array that sum up to the target value.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 108,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the given list that add up to the target number.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[2, 4, 6, 8], target=10):\n    return nums, target\n\nassert f(*g()) == True\n",
        "idx_generation": 65,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], num_rows=3, num_cols=3) -> bool:\n    \"\"\"Check if a given matrix is diagonal\"\"\"\n    for i in range(num_rows):\n        for j in range(num_cols):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\ndef g(matrix=[[1, 0, 0], [0, 2, 0], [0, 0, 3]], num_rows=3, num_cols=3):\n    return matrix\nassert f(g()) == True\n",
        "idx_generation": 22,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, find three integers in the list such that their sum is closest to the target value.\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    closest_sum = float('inf')\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target:\n                return True\n            if abs(current_sum - target) < abs(closest_sum - target):\n                closest_sum = current_sum\n            if current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\ndef g(nums = [1, 6, 4, 2, 3]):\n    return nums\nassert f(g()) == True\n",
        "idx_generation": 174,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is an upper triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate an upper triangular matrix of the given size\n    \"\"\"\n    return [[0 if j < i else 1 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n",
        "idx_generation": 166,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a staircase pattern.\n    A staircase pattern is a grid where the elements form a pattern that starts with an increasing sequence in each row, and the next row starts with a greater value than the previous row.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(1, n):\n        if arr[i][0] <= arr[i-1][0]:\n            return False\n        for j in range(m-1):\n            if arr[i][j] <= arr[i-1][j] or arr[i][j+1] <= arr[i][j]:\n                return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == True\n\n",
        "idx_generation": 390,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import numpy as np\nfrom typing import*\n\ndef f(matrix: List[List[int]], target_sum: int) -> bool:\n    \"\"\"\n    Check if there exists a submatrix in the given matrix that has a sum equal to the target_sum.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    prefix_sum = np.zeros((rows + 1, cols + 1))\n    for i in range(1, rows + 1):\n        for j in range(1, cols + 1):\n            prefix_sum[i][j] = prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1] + matrix[i - 1][j - 1]\n\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i + 1, rows + 1):\n                for l in range(j + 1, cols + 1):\n                    submatrix_sum = prefix_sum[k][l] - prefix_sum[i][l] - prefix_sum[k][j] + prefix_sum[i][j]\n                    if submatrix_sum == target_sum:\n                        return True\n    \n    return False\n\ndef g(matrix: List[List[int]]):\n    \"\"\"\n    This solution returns the input matrix as is.\n    \"\"\"\n    return matrix\n\nassert f(g([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), 12) == True\n\n",
        "idx_generation": 232,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are two distinct indices i and j in the list such that the absolute difference between nums[i] and nums[j] is at most target.\n\n    Sample Input:\n    nums = [1, 5, 7, 10, 15]\n    target = 4\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if any(num - i <= target and num - i >= 0 for i in num_set):\n            return True\n        if any(i - num <= target and i - num >= 0 for i in num_set):\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 5, 7, 10, 15], target: int = 4):\n    return (nums, target)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 424,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a symmetric matrix.\n    A symmetric matrix is equal to its transpose.\n\n    Sample Input:\n    arr = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i][j] != arr[j][i]:\n                return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return arr\n\nassert f(g()) == True\n\n",
        "idx_generation": 498,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], num_rows=3, num_cols=3) -> bool:\n    \"\"\"Check if a given matrix is a symmetric matrix\"\"\"\n    for i in range(num_rows):\n        for j in range(num_cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]], num_rows=3, num_cols=3):\n    return matrix\nassert f(g()) == True\n",
        "idx_generation": 85,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import *\ndef f(li: List[int], target=10) -> bool:\n    \"\"\"\n    Find a list of integers that contains exactly three distinct values, such that the sum of the values is equal to the target.\n    \"\"\"\n    return len(set(li)) == 3 and sum(li) == target\n\ndef g(target=10):\n    return [2, 3, 5]\n\nassert f(g()) == True\n",
        "idx_generation": 168,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if the given matrix is symmetric.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g()) == True\n",
        "idx_generation": 63,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(grid: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sums of the rows, columns, and diagonals are all equal.\n\n    Sample Input:\n    grid = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(grid)\n    target_sum = sum(grid[0])\n\n    # Check rows\n    for row in grid:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        if sum(grid[i][j] for i in range(n)) != target_sum:\n            return False\n\n    # Check diagonals\n    if sum(grid[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(grid[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n\n    return True\n\ndef g(grid: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return grid\n\nassert f(g()) == True\n",
        "idx_generation": 97,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix of integers, transpose the matrix and return the transposed matrix.\n    \"\"\"\n    result = []\n    \n    for col in range(len(matrix[0])):\n        transposed_row = []\n        for row in matrix:\n            transposed_row.append(row[col])\n        result.append(transposed_row)\n        \n    return result\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n\n",
        "idx_generation": 299,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nimport math\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a number in the list that, when added to the target, gives a perfect square.\n    \"\"\"\n    for num in numbers:\n        if math.isqrt(num + target) ** 2 == num + target:\n            return True\n    return False\n\ndef g(numbers: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 2):\n    return (numbers, target)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 109,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import *\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    target_sum = sum(matrix[0])\n    for i in range(len(matrix)):\n        row_sum = sum(matrix[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(matrix[0])):\n        col_sum = sum(matrix[i][j] for i in range(len(matrix)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(matrix[i][i] for i in range(len(matrix)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(matrix[i][len(matrix) - i - 1] for i in range(len(matrix)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True\n\ndef g(matrix: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix\n\nassert f(g()) == True\n",
        "idx_generation": 191,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=9, b=30, c=20) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])\ndef g(a = 9, b = 30, c = 20):\n    return -a + sum([b * i for i in range(c)])\nassert f(g())\n",
        "idx_generation": 341,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, t=150, upper=2000) -> bool:\n    \"\"\"\n    Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n    * if n is even, divide n by 2,\n    * if n is odd, multiply n by 3 and add 1\n    Find `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n    \"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= upper\ndef g(t = 150, upper = 2000):\n    # Faster solution for simultaneously solving multiple problems is of course possible\n    bound = t + 10\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 1) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return min(prev)\nassert f(g()) == True\n",
        "idx_generation": 4,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains exactly three consecutive numbers in increasing order.\n    \"\"\"\n    for i in range(len(nums) - 2):\n        if nums[i] == nums[i+1] - 1 == nums[i+2] - 2:\n            return True\n    return False\n\ndef g():\n    return [4, 5, 6, 1, 2, 3, 7, 8, 9]\n\nassert f(g()) == True\n",
        "idx_generation": 398,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Check if any row or column of the matrix contains the target number\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    for col in zip(*matrix):\n        if target in col:\n            return True\n    return False\ndef g(target = 5):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g()) == True\n",
        "idx_generation": 21,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers `nums` and a target number `target`, find if there exists a pair of numbers in `nums`\n    such that their sum is equal to the target number.\n\n    For example, if nums = [1, 2, 3, 4, 5] and target = 7, the pair (2, 5) sum up to the target number.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return (nums, target)\n\nassert f(*g()) == True\n",
        "idx_generation": 327,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(li: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, determine if there exists a pair of integers in the list\n    whose sum is equal to the target.\n\n    Sample input:\n    [1, 2, 3, 4, 5], 9\n\n    Sample output:\n    True\n    \"\"\"\n    seen = set()\n    for num in li:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(li = [1, 2, 3, 4, 5], target = 9):\n    return (li[1:], target)\n\nassert f(*g())\n\n",
        "idx_generation": 146,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given nested list whose sum is equal to 10.\n    \"\"\"\n\n    num_set = set()\n    for lst in nums:\n        for num in lst:\n            if 10 - num in num_set:\n                return True\n            num_set.add(num)\n    return False\n\ndef g(nums: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums\n\nassert f(g()) == True\n\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the list contains all even numbers.\"\"\"\n    return all(num % 2 == 0 for num in lst)\ndef g():\n    return [2, 4, 6, 8, 10]\nassert f(g()) == True\n",
        "idx_generation": 208,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import random\nfrom typing import*\n\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there is a pair of numbers in the list lst that add up to the target.\n\n    Sample input:\n    lst = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample output:\n    True\n\n    Explanation: The pair of numbers (4, 5) add up to 9 and they are present in the list.\n    \"\"\"\n    assert len(lst) > 1, 'Hint: The list should have at least 2 numbers.'\n    return any(i + j == target for i in lst for j in lst if i != j)\n\ndef g(lst=[1, 2, 3, 4, 5], target=9):\n    return lst, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 221,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the given list contains two numbers that add up to the target number.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(target: int):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(15), 15) == True\n\n",
        "idx_generation": 443,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> Tuple[int, int]:\n    \"\"\"\n    Given a matrix of integers and a target number, find the indices (row and column) of the last occurrence of the target number in the matrix.\n    \"\"\"\n    for i in range(len(matrix)-1, -1, -1):\n        for j in range(len(matrix[i])-1, -1, -1):\n            if matrix[i][j] == target:\n                return (i, j)\n    return (-1, -1)\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 5\n    return (matrix, target)\n\nassert f(*g()) == (1, 1)\n",
        "idx_generation": 171,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist two numbers in the list whose sum is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in numbers:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 15\n\nassert f(*g()) == True\n\n",
        "idx_generation": 392,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: int, a=100, b=50) -> bool:\n    \"\"\"Check if the sum of two numbers is equal to a and their difference is equal to b\"\"\"\n    return x[0] + x[1] == a and abs(x[0] - x[1]) == b\ndef g(a=100, b=50):\n    return [a//2 + b//2, a//2 - b//2]\nassert f(g()) == True\n",
        "idx_generation": 78,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, a=14302, b=5) -> bool:\n    \"\"\"Check if the provided number is divisible by n\"\"\"\n    return n % a == 0\ndef g(a = 14302, b = 5):\n    return a * b\nassert f(g()) == True\n",
        "idx_generation": 45,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int = 3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the given array, such that the sum of its elements is zero.\"\"\"\n    for i in range(len(arr) - k + 1):\n        subarr = arr[i:i+k]\n        if sum(subarr) == 0:\n            return True\n    return False\n\ndef g(k: int = 3):\n    return [0] * k\n\nassert f(g()) == True\n",
        "idx_generation": 16,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find a subarray where the sum of its elements is greater than or equal to a given constant\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr) + 1):\n            if sum(arr[i:j]) >= target:\n                return True\n    return False\ndef g(target = 10):\n    return [1, 2, 3, 4, 5]\nassert f(g()) == True\n",
        "idx_generation": 65,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square\n    \"\"\"\n    n = len(matrix)\n    target_sum = n * (n**2 + 1) // 2\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != target_sum:\n            return False\n    # Check diagonals\n    main_diag_sum = sum(matrix[i][i] for i in range(n))\n    anti_diag_sum = sum(matrix[i][n-i-1] for i in range(n))\n    if main_diag_sum != target_sum or anti_diag_sum != target_sum:\n        return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a magic square of the given size\n    \"\"\"\n    magic_square = [[0 for _ in range(size)] for _ in range(size)]\n    i, j = 0, size // 2\n    for num in range(1, size**2 + 1):\n        magic_square[i][j] = num\n        i -= 1\n        j += 1\n        if num % size == 0:\n            i += 2\n            j -= 1\n        elif i < 0:\n            i = size - 1\n        elif j == size:\n            j = 0\n    return magic_square\n\nassert f(g()) == True\n",
        "idx_generation": 49,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, determine if it is a magic square.\n    A magic square is an n x n matrix of distinct positive integers from 1 to n^2 where the sums of each row, each\n    column, and both diagonals are all equal.\n\n    Sample Input:\n    `matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for i in range(n):\n        col_sum = sum(matrix[j][i] for j in range(n))\n        if col_sum != target_sum:\n            return False\n    # Check diagonal 1\n    diagonal1_sum = sum(matrix[i][i] for i in range(n))\n    if diagonal1_sum != target_sum:\n        return False\n    # Check diagonal 2\n    diagonal2_sum = sum(matrix[i][n - i - 1] for i in range(n))\n    if diagonal2_sum != target_sum:\n        return False\n    return True\n\ndef g(matrix=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix\n\nassert f(g()) == True\n",
        "idx_generation": 71,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nimport numpy as np\nfrom typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a diagonal matrix.\"\"\"\n    n = len(matrix)\n\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n\n    return True\n\ndef g(n=3):\n    \"\"\"Generate a diagonal matrix of size n x n.\"\"\"\n    diagonal_matrix = np.zeros((n, n), dtype=int)\n\n    for i in range(n):\n        num = np.random.randint(1, 10)\n        diagonal_matrix[i][i] = num\n\n    return diagonal_matrix.tolist()\n\nassert f(g()) == True\n",
        "idx_generation": 275,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='ca') -> bool:\n    \"\"\"Check if all words in the list words start with the given prefix.\"\"\"\n    return all(word.startswith(prefix) for word in words)\ndef g(prefix='ca'):\n    return ['cat', 'car', 'cake', 'cab']\nassert f(g()) == True\n",
        "idx_generation": 4,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, a=7, b=20, c=25) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c even integers)\"\"\"\n    return n + a == sum([b * (2*i) for i in range(1, c+1)])\ndef g(a=7, b=20, c=25):\n    return -a + sum([b * (2*i) for i in range(1, c+1)])\nassert f(g()) == True\n",
        "idx_generation": 175,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if all the numbers in the list are divisible by 5.\n    \"\"\"\n    return all([num % 5 == 0 for num in nums])\n\ndef g():\n    return [10, 20, 30, 40, 50]\n\nassert f(g()) == True\n",
        "idx_generation": 80,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a diagonal matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a diagonal matrix of the given size\n    \"\"\"\n    return [[1 if j == i else 0 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n",
        "idx_generation": 205,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiply to give an even product.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] % 2 == 0:\n                return True\n    return False\n\ndef g(nums=[2, 4, 6, 8]):\n    return nums\n\nassert f(g()) == True\n\n",
        "idx_generation": 292,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains only prime numbers.\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\n    return all(is_prime(num) for num in nums)\n\ndef g():\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n\nassert f(g()) == True\n\n",
        "idx_generation": 310,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a staircase pattern.\n    A staircase pattern is a grid where the elements form a pattern that starts with a decreasing sequence in each row, and the next row starts with a smaller value than the previous row.\n\n    Sample Input:\n    arr = [[9, 8, 7], [6, 5, 4], [3, 2, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(1, n):\n        if arr[i][0] >= arr[i-1][0]:\n            return False\n        for j in range(m-1):\n            if arr[i][j] >= arr[i-1][j] or arr[i][j+1] >= arr[i][j]:\n                return False\n    return True\n\ndef g(arr: List[List[int]] = [[9, 8, 7], [6, 5, 4], [3, 2, 1]]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 495,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix of integers, rotate it 90 degrees clockwise.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    [[7, 4, 1],\n     [8, 5, 2],\n     [9, 6, 3]]\n    \"\"\"\n    n = len(matrix)\n    rotated_matrix = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            rotated_matrix[i][j] = matrix[n - j - 1][i]\n    return rotated_matrix\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n",
        "idx_generation": 394,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n",
        "idx_generation": 197,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target: int) -> List[int]:\n    \"\"\"\n    Given a matrix of integers and a target number, return a list of all indices (row and column pairs) where the element is equal to the target.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    target = 5\n    output: [(1, 1)]\n    \"\"\"\n    target_indices = []\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == target:\n                target_indices.append((i, j))\n    return target_indices\n\ndef g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ], 5\n\nassert f(*g()) == [(1, 1)]\n",
        "idx_generation": 322,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"\n    Given an integer n and a list of integers, return True if there exists a subset of the list that sums up to n,\n    otherwise return False.\n\n    Example:\n    n = 9\n    nums = [2, 4, 5, 7, 9]\n\n    The subset [2, 7] sums up to 9.\n    Therefore, f(n, nums) returns True.\n    \"\"\"\n    dp = [False] * (n + 1)\n    dp[0] = True\n\n    for num in nums:\n        for i in range(n, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n\n    return dp[n]\n\ndef g(n: int = 9, nums: List[int] = [2, 4, 5, 7, 9]):\n    return n, nums\n\nassert f(*g())\n",
        "idx_generation": 442,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a grid where the sum of each row, each column, and both diagonals are the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    target_sum = sum(arr[0])\n    for i in range(n):\n        if sum(arr[i]) != target_sum:\n            return False\n        if sum(arr[j][i] for j in range(n)) != target_sum:\n            return False\n    if sum(arr[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(arr[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n",
        "idx_generation": 317,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], num_rows=3, num_cols=3) -> bool:\n    \"\"\"Check if a given matrix is a magic square\"\"\"\n    row_sums = [sum(matrix[i]) for i in range(num_rows)]\n    col_sums = [sum(matrix[j][i] for j in range(num_rows)) for i in range(num_cols)]\n    main_diag_sum = sum(matrix[i][i] for i in range(num_rows))\n    anti_diag_sum = sum(matrix[i][num_rows-1-i] for i in range(num_rows))\n    return all(row_sum == main_diag_sum for row_sum in row_sums) and all(col_sum == main_diag_sum for col_sum in col_sums) and main_diag_sum == anti_diag_sum\ndef g(matrix=[[2, 7, 6], [9, 5, 1], [4, 3, 8]], num_rows=3, num_cols=3):\n    return matrix\nassert f(g()) == True\n",
        "idx_generation": 22,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], num_rows=3, num_cols=3) -> bool:\n    \"\"\"Check if a given matrix is a lower triangular matrix\"\"\"\n    for i in range(num_rows):\n        for j in range(i+1, num_cols):\n            if matrix[i][j] != 0:\n                return False\n    return True\ndef g(matrix=[[1, 0, 0], [2, 3, 0], [4, 5, 6]], num_rows=3, num_cols=3):\n    return matrix\nassert f(g()) == True\n",
        "idx_generation": 64,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target value, return a new list containing only the indices where the target value occurs.\n\n    Example:\n    nums = [2, 4, 2, 1, 2, 3, 2]\n    target = 2\n\n    The target value 2 occurs at indices 0, 2, 4, and 6 in the list.\n    Therefore, f(nums, target) returns [0, 2, 4, 6].\n    \"\"\"\n    indices = []\n    for i, num in enumerate(nums):\n        if num == target:\n            indices.append(i)\n    return indices\n\ndef g(nums: List[int] = [2, 4, 2, 1, 2, 3, 2]):\n    return nums\n\nassert f(g(), 2) == [0, 2, 4, 6]\n",
        "idx_generation": 479,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, check if there exists a subarray in the list whose sum is greater than the target.\n\n    Sample Input:\n    [1, 4, 20, 3, 10, 5], 33\n\n    Sample Output:\n    False\n    \"\"\"\n    curr_sum = nums[0]\n    start = 0\n    for i in range(1, len(nums) + 1):\n        while curr_sum > target and start < i-1:\n            curr_sum -= nums[start]\n            start += 1\n        if curr_sum > target:\n            return True\n        if i < len(nums):\n            curr_sum += nums[i]\n    return False\n\ndef g() -> Tuple[List[int], int]:\n    return ([1, 4, 20, 3, 10, 5], 33)\n\nassert f(*g()) == False\n\n",
        "idx_generation": 146,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the maximum product of any two numbers in the list.\n    \"\"\"\n    n = len(nums)\n    max_product = float('-inf')\n\n    for i in range(n):\n        for j in range(i+1, n):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n\n    return max_product\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6]):\n    return (nums,)\n\nassert f(*g()) == 30\n\n",
        "idx_generation": 455,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(moves: List[List[int]], capacities=[50, 75, 100], init=[25, 0, 75], goal=[0, 50, 50]) -> bool:\n    \"\"\"\n    Given an initial state of water quantities in jugs and jug capacities, find a sequence of moves (pouring\n    one jug into another until it is full or the first is empty) to reaches the given goal state.\n    moves is list of [from, to] pairs\n    \"\"\"\n    state = init.copy()\n    for [i, j] in moves:\n        assert min(i, j) >= 0, 'Indices must be non-negative'\n        assert i != j, 'Cannot pour from same state to itself'\n        n = min(capacities[j], state[i] + state[j])\n        (state[i], state[j]) = (state[i] + state[j] - n, n)\n    return state == goal\ndef g(capacities = [50, 75, 100], init = [25, 0, 75], goal = [0, 50, 50]):\n    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]\nassert f(g()) == True\n",
        "idx_generation": 35,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Find if there exists a subsequence of numbers in a list that sums up to a given target\"\"\"\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target, num - 1, -1):\n            if dp[i - num]:\n                dp[i] = True\n    return dp[target]\n\ndef g(target=5):\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n",
        "idx_generation": 88,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> str:\n    \"\"\"\n    Given a string, reverse the order of the words in the string.\n\n    Sample Input:\n    \"Hello World\"\n\n    Sample Output:\n    \"World Hello\"\n    \"\"\"\n    words = string.split()\n    return ' '.join(reversed(words))\n\ndef g():\n    return \"Hello World\"\n\nassert f(g()) == \"World Hello\"\n\n",
        "idx_generation": 400,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if a given list is a palindrome.\n    \"\"\"\n    return arr == arr[::-1]\n\ndef g() -> List[int]:\n    \"\"\"\n    Generate a palindrome list for testing.\n    \"\"\"\n    return [1, 2, 3, 2, 1]\n\nassert f(g()) == True\n",
        "idx_generation": 190,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it is a palindrome.\n\n    Sample Input:\n    arr = [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return arr == arr[::-1]\n\ndef g(arr: List[int] = [1, 2, 3, 2, 1]):\n    return arr\n\nassert f(g()) == True\n\n",
        "idx_generation": 303,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list is a palindrome.\n    A palindrome is a list that reads the same forwards and backwards.\n\n    Sample Input:\n    arr = [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g()) == True\n",
        "idx_generation": 150,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Calculate the product of all odd numbers in the given list of integers.\n\n    Sample Input:\n    [1, 2, 3, 4, 5]\n\n    Sample Output:\n    15\n    \"\"\"\n    product = 1\n    for num in nums:\n        if num % 2 != 0:\n            product *= num\n    return product\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == 15\n",
        "idx_generation": 408,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: List[int], n=6, s=30) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 6, s = 30):\n    if n == 1:\n        return [s]\n    elif n == 2:\n        return [s - 1, 1]\n    elif n == 3:\n        return [s - 2, 1, 1]\n    elif n == 4:\n        return [s/4, s/4, s/4, s/4]\n    elif n == 5:\n        return [s/5, s/5, s/5, s/5, s/5]\n    else:\n        return [s/6, s/6, s/6, s/6, s/6, s/6]\nassert f(g()) == True\n",
        "idx_generation": 73,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a subsequence that sums up to a target value.\n\n    A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    \n    Sample output:\n    True\n    \n    Explanation: The subsequence [2, 3, 5] sums up to the target value of 10.\n    \"\"\"\n    target = 10\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    \n    return False\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 279,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: List[int], a=7, r=2) -> bool:\n    \"\"\"Check if the list contains a geometric sequence with a common ratio of r and starting from a.\"\"\"\n    return all([x[i] * r == x[i + 1] for i in range(len(x) - 1)])\ndef g(a = 7, r = 2):\n    return [a, a * r, a * r ** 2, a * r ** 3]\nassert f(g()) == True\n",
        "idx_generation": 0,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are any 'count' numbers that form a valid geometric progression with a common ratio of 'target'.\n\n    Sample Input:\n    nums = [1, 3, 9, 27, 81]\n    target = 3\n    count = 4\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(nums[i] * target == nums[i+1] and nums[i+1] * target == nums[i+2] and nums[i+2] * target == nums[i+3] for i in range(len(nums)-count+1))\n\ndef g(nums: List[int] = [1, 3, 9, 27, 81], target: int = 3, count: int = 4):\n    return (nums, target, count)\n\nassert f(*g())\n",
        "idx_generation": 418,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: List[int], n=3, s=12) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 3, s = 12):\n    x = [2, 4, 6, 8, 10]\n    return x[:n]\nassert f(g()) == True\n",
        "idx_generation": 165,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of five people having the same birthday in a group of n is near 1/5.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 1/5) ** 2 <= year_len\ndef g(year_len = 365):\n    n = 1\n    distinct_prob = 1.0\n    best = (1/5, 1)  # (difference between probability and 1/5, n)\n    while distinct_prob > 1/5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(1/5 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True\n",
        "idx_generation": 22,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: List[int], n=5, s=19) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 5, s = 19):\n    x = [1] * n\n    x[1] = s - n + 1\n    return x\nassert f(g()) == True\n",
        "idx_generation": 148,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(string: str, n=3) -> bool:\n    \"\"\"\n    Find if the given string contains exactly n vowels.\n\n    Sample Input:\n    string = \"Hello, World!\"\n    n = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in string.lower():\n        if char in vowels:\n            count += 1\n    return count == n\n\ndef g(string = \"Hello, World!\", n = 3):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in string.lower():\n        if char in vowels:\n            count += 1\n    if count < n:\n        string += 'a' * (n - count)\n    elif count > n:\n        string = string.replace('a', '', count - n)\n    return string\n\nassert f(g()) == True\n",
        "idx_generation": 11,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the target integer exists in the given list of integers.\n\n    Sample Input:\n    [5, 3, 1, 4, 2], 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return target in nums\n\ndef g(nums: List[int] = [5, 3, 1, 4, 2], target: int = 3):\n    return (nums, target)\n\nassert f(*g())\n",
        "idx_generation": 400,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is greater than or equal to the target.\"\"\"\n    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n        if curr_sum >= target:\n            return True\n    return False\n\ndef g() -> Tuple[List[int], int]:\n    return ([2, 5, 10, 3, 8, 6], 20)\n\nassert f(*g()) == True\n",
        "idx_generation": 129,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], target=15):\n    return (nums, target)\n\nassert f(*g()) == True\n",
        "idx_generation": 257,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int, k: int = 2) -> List[int]:\n    \"\"\"\n    Find k numbers in the given list nums that sum up to the target value.\n    \"\"\"\n    result = []\n    def backtrack(remain, start, path):\n        if remain == 0 and len(path) == k:\n            result.append(path)\n            return\n        for i in range(start, len(nums)):\n            if nums[i] > remain:\n                break\n            backtrack(remain - nums[i], i + 1, path + [nums[i]])\n\n    backtrack(target, 0, [])\n    return result\n\ndef g(nums=[1, 2, 3, 4, 5], target=5, k=2):\n    return nums\n\nassert f(g(), target=5) == [[1, 4], [2, 3]]\n",
        "idx_generation": 218,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 5) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a pair of numbers whose absolute difference is equal to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        complement = num + target\n        if complement in nums_set:\n            return True\n    return False\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 198,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a spiral pattern.\n    A spiral pattern is a grid where the elements form a pattern that spirals inward.\n\n    Sample Input:\n    arr = [[1, 2, 3], [8, 9, 4], [7, 6, 5]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    min_row, max_row, min_col, max_col = 0, n-1, 0, m-1\n    num = 1\n\n    while min_row <= max_row and min_col <= max_col:\n        # Traverse right\n        for j in range(min_col, max_col+1):\n            if arr[min_row][j] != num:\n                return False\n            num += 1\n        min_row += 1\n\n        # Traverse down\n        for i in range(min_row, max_row+1):\n            if arr[i][max_col] != num:\n                return False\n            num += 1\n        max_col -= 1\n\n        # Traverse left\n        if min_row <= max_row:\n            for j in range(max_col, min_col-1, -1):\n                if arr[max_row][j] != num:\n                    return False\n                num += 1\n            max_row -= 1\n\n        # Traverse up\n        if min_col <= max_col:\n            for i in range(max_row, min_row-1, -1):\n                if arr[i][min_col] != num:\n                    return False\n                num += 1\n            min_col += 1\n\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [8, 9, 4], [7, 6, 5]]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 187,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the given number is present in the list\"\"\"\n    return n in lst\ndef g(lst=[1, 2, 3, 4, 5]):\n    return lst[2]\nassert f(g()) == True\n",
        "idx_generation": 17,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, check if there exists a pair of numbers in the list that sum up to the target.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=10):\n    return nums, target\n\nassert f(*g()) == False\n\n",
        "idx_generation": 67,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers `nums` and an integer `k`, find if there exists a subarray in the list that sums up to exactly k.\n    Return True if such a subarray exists, False otherwise.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    k = 7\n    Output: True\n    Explanation: The subarray [2, 5] sums up to 7.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == k:\n            return True\n        if prefix_sum - k in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], k: int = 7):\n    return (nums, k)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 330,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a grid where the sum of each row, column, and diagonal is the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    target_sum = sum(arr[0])\n\n    # Check rows\n    for row in arr:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for col in range(n):\n        if sum(arr[row][col] for row in range(n)) != target_sum:\n            return False\n\n    # Check diagonal\n    if sum(arr[i][i] for i in range(n)) != target_sum:\n        return False\n\n    # Check reverse diagonal\n    if sum(arr[i][n-i-1] for i in range(n)) != target_sum:\n        return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 445,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target number, return True if the target number exists in the matrix,\n    otherwise return False.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    target = 10\n\n    Output:\n    False\n\n    Explanation: The target number 10 does not exist in the matrix.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=10):\n    return matrix, target\n\nassert f(*g()) == False\n\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix, return the maximum element in the matrix.\n    \"\"\"\n    max_element = float('-inf')\n    for row in matrix:\n        for num in row:\n            if num > max_element:\n                max_element = num\n    return max_element\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 9\n\n",
        "idx_generation": 472,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Determine if it is possible to find a pair of numbers in a matrix that XORs to a target number. The pair of numbers\n    must be distinct and the order of the numbers in the pair does not matter.\n\n    Sample input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample output:\n    True\n\n    The pair of numbers (2, 6) XORs to 4, which is the target number.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for x in range(i, rows):\n                for y in range(j, cols):\n                    if matrix[i][j] ^ matrix[x][y] == target and (i != x or j != y):\n                        return True\n    return False\n\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, target ^ 2, 9]]\n\nassert f(g()) == True\n",
        "idx_generation": 60,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target number, find and return two numbers from the list that add up to the target.\n\n    It is guaranteed that there is exactly one solution.\n    \"\"\"\n    nums = {}\n    for i in range(len(arr)):\n        complement = target - arr[i]\n        if complement in nums:\n            return [nums[complement], i]\n        nums[arr[i]] = i\n    return []\ndef g():\n    arr = [2, 4, 7, 11, 15]\n    target = 9\n    return (arr, target)\nassert f(*g()) == [0, 2]\n\n",
        "idx_generation": 179,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target number, find two numbers in the list that add up to the target.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return [num, complement]\n    return []\n\ndef g():\n    nums = [2, 4, 6, 8, 10]\n    target = 12\n    return (nums, target)\n\nassert f(*g()) == [2, 10]\n",
        "idx_generation": 359,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum possible sum of a contiguous subarray.\n\n    Example:\n    nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\n    Output:\n    6\n\n    Explanation: The contiguous subarray with the maximum sum is [4, -1, 2, 1], which gives a sum of 6.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    for num in nums:\n        curr_sum += num\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n\n    return max_sum\n\ndef g(nums: List[int] = [-2, 1, -3, 4, -1, 2, 1, -5, 4]):\n    return (nums,)\n\nassert f(*g()) == 6\n",
        "idx_generation": 331,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(ladders: List[List[int]], start=1, end=100) -> bool:\n    \"\"\"\n    Given a list of ladder positions, check if there is a ladder path from start to end.\n\n    A ladder path is a sequence of positions where each position is reachable from the previous position\n    using a ladder in the given list.\n\n    Example:\n    ladders = [[1, 6], [4, 10], [5, 20], [7, 9], [15, 25], [23, 27], [30, 40], [50, 60]]\n    start = 1\n    end = 25\n    output: True\n    \"\"\"\n    assert all((len(ladder) == 2 and 1 <= ladder[0] < ladder[1] <= 100 for ladder in ladders))\n    ladders_dict = {ladder[0]: ladder[1] for ladder in ladders}\n    position = start\n    while position < end:\n        if position in ladders_dict:\n            position = ladders_dict[position]\n        else:\n            position += 1\n    return position == end\ndef g(start=1, end=100):\n    return [[1, 6], [4, 10], [5, 20], [7, 9], [15, 25], [23, 27], [30, 40], [50, 60]]\nassert f(g()) == True\n",
        "idx_generation": 8,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size\n    \"\"\"\n    return [[0 if j > i else 1 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n",
        "idx_generation": 96,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i + 1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size with random elements\n    \"\"\"\n    import random\n    return [[random.randint(0, 9) if i >= j else 0 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n\n",
        "idx_generation": 349,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a symmetric matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a symmetric matrix of the given size\n    \"\"\"\n    return [[1 if j == i else 0 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n\n",
        "idx_generation": 260,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"Calculate the sum of the diagonals in a given matrix.\"\"\"\n    n = len(matrix)\n    diagonal_sum = sum(matrix[i][i] for i in range(n))\n    anti_diagonal_sum = sum(matrix[i][n-1-i] for i in range(n))\n    return diagonal_sum + anti_diagonal_sum\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == 30\n\n",
        "idx_generation": 384,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], num_rows=3, num_cols=3) -> bool:\n    \"\"\"Check if a given matrix is symmetric\"\"\"\n    for i in range(num_rows):\n        for j in range(num_cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]], num_rows=3, num_cols=3):\n    return matrix\nassert f(g()) == True\n",
        "idx_generation": 15,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is a Toeplitz matrix.\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n\n    for i in range(1, n):\n        for j in range(1, m):\n            if matrix[i][j] != matrix[i-1][j-1]:\n                return False\n\n    return True\n\ndef g(matrix=[[1, 2, 3], [4, 1, 2], [7, 4, 1]]):\n    return matrix\n\nassert f(g()) == True\n",
        "idx_generation": 100,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square\n    \"\"\"\n    n = len(matrix)\n    target_sum = n * (n**2 + 1) // 2\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != target_sum:\n            return False\n    # Check diagonals\n    main_diag_sum = sum(matrix[i][i] for i in range(n))\n    anti_diag_sum = sum(matrix[i][n-i-1] for i in range(n))\n    if main_diag_sum != target_sum or anti_diag_sum != target_sum:\n        return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a magic square of the given size\n    \"\"\"\n    magic_square = [[0 for _ in range(size)] for _ in range(size)]\n    i, j = 0, size // 2\n    for num in range(1, size**2 + 1):\n        magic_square[i][j] = num\n        i -= 1\n        j += 1\n        if num % size == 0:\n            i += 2\n            j -= 1\n        elif i < 0:\n            i = size - 1\n        elif j == size:\n            j = 0\n    return magic_square\n\nassert f(g()) == True\n\n",
        "idx_generation": 351,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an identity matrix\n    \"\"\"\n    n = len(matrix)\n    return all((matrix[i][j] == 1 if i == j else matrix[i][j] == 0) for i in range(n) for j in range(n))\n\ndef g(matrix=[[1, 0, 0], [0, 1, 0], [0, 0, 1]]):\n    \"\"\"\n    This solution creates a 3x3 identity matrix\n    \"\"\"\n    return matrix\n\nassert f(g()) == True\n",
        "idx_generation": 153,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if the given matrix is a magic square.\n\n    Sample Input:\n    matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for i in range(n):\n        col_sum = sum(matrix[j][i] for j in range(n))\n        if col_sum != target_sum:\n            return False\n    # Check diagonal 1\n    diagonal1_sum = sum(matrix[i][i] for i in range(n))\n    if diagonal1_sum != target_sum:\n        return False\n    # Check diagonal 2\n    diagonal2_sum = sum(matrix[i][n - i - 1] for i in range(n))\n    if diagonal2_sum != target_sum:\n        return False\n    return True\n\ndef g(matrix: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix\n\nassert f(g()) == True\n\n",
        "idx_generation": 278,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"\n    Determine if it is possible to find a pair of numbers in a list that sums up to a target number. The pair of numbers\n    must be distinct and the order of the numbers in the pair does not matter.\n\n    Sample input:\n    [50, 60, 90, 110]\n\n    Sample output:\n    True\n\n    The pair of numbers (50, 60) sums up to 110, which is the target number.\n    \"\"\"\n    return any(target - num in numbers for num in numbers)\ndef g(target=100):\n    return [50, 60, 90, target - 50]\nassert f(g()) == True\n",
        "idx_generation": 27,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"Check if all sublists in the given list have the same length\"\"\"\n    return len(set(len(sublist) for sublist in arr)) == 1\n\ndef g(arr=[[1, 2, 3], [4, 5], [6, 7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n\n",
        "idx_generation": 144,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there is a pair of numbers in the given list that adds up to the target.\n\n    Sample Input:\n    [1, 2, 3, 4, 5], 9\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g() -> Tuple[List[int], int]:\n    return ([1, 2, 3, 4, 5], 9)\n\nassert f(*g()) == True\n",
        "idx_generation": 154,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a 2D grid of integers, return a list of the sums of each row.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    [6, 15, 24]\n    \"\"\"\n    return [sum(row) for row in arr]\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == [6, 15, 24]\n",
        "idx_generation": 457,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, b=20) -> bool:\n    \"\"\"Check if x is a multiple of a specific number.\"\"\"\n    return x % b == 0\ndef g(b=20):\n    return b * 5\nassert f(g())\n",
        "idx_generation": 298,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if there exists a subarray (contiguous elements) whose product is equal to the target.\n\n    Sample Input:\n    nums = [2, 3, 4, 5]\n    target = 120\n\n    Sample Output:\n    True\n\n    Explanation:\n    The subarray [3, 4, 5] has a product of 120.\n    \"\"\"\n    n = len(nums)\n    prefix_product = 1\n    prefix_products = {1}\n    for i in range(n):\n        prefix_product *= nums[i]\n        if prefix_product == target:\n            return True\n        prefix_products.add(prefix_product)\n    return False\n\ndef g(nums: List[int] = [2, 3, 4, 5], target: int = 120):\n    return (nums, target)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 411,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nimport math\nfrom typing import*\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"Find if there are count numbers that divide the target\"\"\"\n    return any(all(target % nums[i] == 0 for i in indices) for indices in itertools.combinations(range(len(nums)), count))\ndef g(target: int = 20, count: int = 3, nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return (nums, target, count)\nassert f(*g()) == True\n",
        "idx_generation": 55,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list whose sum is equal to the target value.\n    Return True if such a subarray exists, False otherwise.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 10\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if prefix_sum[j] - prefix_sum[i] == target:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 10):\n    return arr, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 218,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, check if there exists a subarray in the list whose sum is equal to the target.\n\n    Sample Input:\n    [1, 4, 20, 3, 10, 5], 33\n\n    Sample Output:\n    True\n    \"\"\"\n    curr_sum = nums[0]\n    start = 0\n    for i in range(1, len(nums) + 1):\n        while curr_sum > target and start < i-1:\n            curr_sum -= nums[start]\n            start += 1\n        if curr_sum == target:\n            return True\n        if i < len(nums):\n            curr_sum += nums[i]\n    return False\n\ndef g() -> Tuple[List[int], int]:\n    return ([1, 4, 20, 3, 10, 5], 33)\n\nassert f(*g()) == True\n",
        "idx_generation": 121,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import numpy as np\nfrom typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n    n = len(matrix)\n    target_sum = n * (n**2 + 1) // 2\n\n    # Check rows\n    row_sums = [sum(row) for row in matrix]\n    if not all(sum == target_sum for sum in row_sums):\n        return False\n\n    # Check columns\n    col_sums = [sum(col) for col in zip(*matrix)]\n    if not all(sum == target_sum for sum in col_sums):\n        return False\n\n    # Check diagonals\n    diag_sum1 = sum(matrix[i][i] for i in range(n))\n    diag_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    if diag_sum1 != target_sum or diag_sum2 != target_sum:\n        return False\n\n    return True\n\ndef g(n=3):\n    \"\"\"Generate a magic square of size n x n.\"\"\"\n    magic_square = np.zeros((n, n), dtype=int)\n    num = 1\n    i, j = 0, n // 2\n\n    while num <= n**2:\n        magic_square[i, j] = num\n        num += 1\n        new_i = (i - 1) % n\n        new_j = (j + 1) % n\n        if magic_square[new_i, new_j]:\n            i += 1\n        else:\n            i = new_i\n            j = new_j\n\n    return magic_square.tolist()\n\nassert f(g()) == True\n",
        "idx_generation": 27,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], a=7, b=100) -> bool:\n    \"\"\"Check if x is a power of a within the range [a, b]\"\"\"\n    return any(a ** i == x for i in range(int(b/a) + 1))\n\ndef g(a = 7, b = 100):\n    return a ** (b // a)\n\nassert f(g()) == True\n",
        "idx_generation": 109,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an identity matrix.\n\n    Sample Input:\n    matrix = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n            if i == j and matrix[i][j] != 1:\n                return False\n\n    return True\n\ndef g(n=3):\n    \"\"\"\n    Generate an identity matrix of size n x n.\n    \"\"\"\n    identity_matrix = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        identity_matrix[i][i] = 1\n\n    return identity_matrix\n\nassert f(g()) == True\n",
        "idx_generation": 323,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(grades: Dict[str, int], passing_grade: int = 60) -> bool:\n    \"\"\"\n    Determine if all the grades in the given dictionary are above the passing_grade.\n\n    Sample Input:\n    grades = {\"Math\": 75, \"Science\": 80, \"English\": 90}\n\n    Sample Output:\n    True\n    \"\"\"\n    return all(grade > passing_grade for grade in grades.values())\n\ndef g(grades: Dict[str, int] = {\"Math\": 75, \"Science\": 80, \"English\": 90}, passing_grade: int = 60):\n    return (grades, passing_grade)\n\nassert f(*g())\n",
        "idx_generation": 128,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if all numbers in the list are divisible by the target number\"\"\"\n    return all(num % target == 0 for num in nums)\n\ndef g(nums: List[int] = [3, 6, 9, 12, 15, 18], target: int = 3):\n    return (nums, target)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 86,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, a=14302, b=5) -> bool:\n    \"\"\"Check if the given number is a palindrome\"\"\"\n    return str(n) == str(n)[::-1]\n\ndef g(a = 14302, b = 5):\n    return a // b\n\nassert f(g()) == False\n",
        "idx_generation": 84,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"Given an array of integers, find the sum of all the even numbers in the array.\"\"\"\n    return sum(num for num in nums if num % 2 == 0)\n\ndef g():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return (nums,)\n\nassert f(*g()) == 20\n",
        "idx_generation": 99,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Return a list of all the odd numbers in the list.\n    \"\"\"\n    return [num for num in nums if num % 2 != 0]\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == [1, 3, 5, 7, 9]\n\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains only even numbers.\n    \"\"\"\n    return all(num % 2 == 0 for num in nums)\n\ndef g():\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\nassert f(g()) == True\n\n",
        "idx_generation": 432,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the sum of all even numbers in the list.\n    \"\"\"\n    return sum(num for num in nums if num % 2 == 0)\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g()) == 30\n",
        "idx_generation": 436,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=8) -> bool:\n    \"\"\"\n    Given a matrix of integers, determine if the target integer is present in the matrix.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == True\n",
        "idx_generation": 116,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the sum of each row in the matrix is equal to the sum of each column in the matrix.\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return row_sums == col_sums\n\ndef g(matrix=[[1,2,3],[4,5,6],[7,8,9]]):\n    return matrix\n\nassert f(g()) == False\n",
        "idx_generation": 54,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the sum of each row in the matrix is equal to the sum of each column in the matrix.\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return all(sum == 0 for sum in row_sums) or all(sum == 0 for sum in col_sums)\n\ndef g(matrix=[[1,2,3],[4,5,6],[7,8,9]]):\n    return matrix\n\nassert f(g()) == False\n",
        "idx_generation": 86,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose product is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target % num == 0 and target // num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 6):\n    return nums, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 246,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"Check if n is a power of k.\"\"\"\n    if n == 0:\n        return False\n    while n != 1:\n        if n % k != 0:\n            return False\n        n = n // k\n    return True\n\ndef g(n = 16, k = 2):\n    return (n, k)\n\nassert f(*g())\n",
        "idx_generation": 177,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> int:\n    \"\"\"\n    Given a 2D grid of integers, find the sum of all the elements in the grid.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    45\n    \"\"\"\n    return sum(sum(row) for row in arr)\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == 45\n",
        "idx_generation": 457,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, find the next greater element for each element in the list.\n\n    Example:\n    nums = [4, 5, 2, 1, 9, 8, 6, 7]\n    \n    Output:\n    [5, 9, 9, 9, -1, -1, 7, -1]\n    \"\"\"\n    stack = []\n    result = [-1] * len(nums)\n    \n    for i in range(len(nums)):\n        while stack and nums[i] > nums[stack[-1]]:\n            result[stack.pop()] = nums[i]\n        stack.append(i)\n    \n    return result\n\ndef g():\n    return [4, 5, 2, 1, 9, 8, 6, 7]\n\nassert f(g()) == [5, 9, 9, 9, -1, -1, 7, -1]\n",
        "idx_generation": 466,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there is a subset of numbers in the given list whose sum is equal to the target number.\n    \"\"\"\n    def subsetSum(numbers, target):\n        if target == 0:\n            return True\n        if not numbers or target < 0:\n            return False\n        return subsetSum(numbers[1:], target) or subsetSum(numbers[1:], target - numbers[0])\n\n    return subsetSum(nums, target)\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g()) == True\n",
        "idx_generation": 380,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    n = len(s)\n    for i in range(n // 2):\n        if s[i] != s[n - i - 1]:\n            return False\n    return True\n\ndef g(s=\"madam\"):\n    return s\n\nassert f(g()) == True\n",
        "idx_generation": 401,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring: str) -> bool:\n    \"\"\"\n    Given a string and a substring, check if the substring appears more than once consecutively in the string.\n    \"\"\"\n    return substring * 2 in s\n\ndef g():\n    s = \"abcabcabc\"\n    substring = \"abc\"\n    return (s, substring)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 355,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums: List[int] = [1, 2, 3, 2, 1]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 308,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(array: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    \"\"\"\n    return array == array[::-1]\n\ndef g():\n    \"\"\"\n    Generate a list with numbers from 1 to 10.\n    \"\"\"\n    return list(range(1, 11))\n\nassert f(g()) == False\n\n",
        "idx_generation": 198,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: int, a=-5741705983914418) -> bool:\n    \"\"\"Solve a unary negation problem\"\"\"\n    return -x == a\ndef g(a = -5741705983914418):\n    return -a\nassert f(g()) == True\n",
        "idx_generation": 17,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m: int, k: int) -> bool:\n    \"\"\"\n    Given three positive integers n, m, and k, find if it is possible to construct a matrix of size n x m, \n    where each cell contains a positive integer, such that the sum of all numbers in the matrix is divisible by k.\n    \"\"\"\n    return (n * m * (n + 1) * (m + 1)) % (2 * k) == 0\n\ndef g(n = 3, m = 4, k = 5):\n    return n, m, k\n\nassert f(*g()) == True\n",
        "idx_generation": 409,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=18, b=63, c=30) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])\ndef g(a = 18, b = 63, c = 30):\n    return -a + sum([b * i for i in range(c)])\nassert f(g())\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is symmetric along the main diagonal\n    \"\"\"\n    return all((matrix[i][j] == matrix[j][i]) for i in range(len(matrix)) for j in range(len(matrix[0])))\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    \"\"\"\n    This solution checks if the element at position (i, j) is equal to the element at position (j, i) for all elements in the matrix\n    \"\"\"\n    return matrix\nassert f(g()) == True\n",
        "idx_generation": 10,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grid: List[List[str]], target='python') -> bool:\n    \"\"\"\n    Check if the target word is present in the grid.\n    \"\"\"\n    m = len(grid)\n    n = len(grid[0])\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == target[0]:\n                if dfs(grid, i, j, target, 0):\n                    return True\n    return False\n\ndef dfs(grid, i, j, target, index):\n    if index == len(target):\n        return True\n    if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] != target[index]:\n        return False\n    grid[i][j] = '#'\n    found = dfs(grid, i + 1, j, target, index + 1) or dfs(grid, i - 1, j, target, index + 1) \\\n            or dfs(grid, i, j + 1, target, index + 1) or dfs(grid, i, j - 1, target, index + 1)\n    grid[i][j] = target[index]\n    return found\n\ndef g(grid = [['p', 'y', 't', 'h', 'o', 'n'], ['r', 'a', 'b', 'c', 'd', 'e'], ['f', 'g', 'i', 'j', 'k', 'l']]):\n    return grid\n\nassert f(g()) == True\n\n",
        "idx_generation": 228,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    \"\"\"Find a path with a prime number of nodes from nodes 0 to 1 in the given digraph on vertices 0, 1,..., n.\"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return p[0] == 0 and p[-1] == 1 and is_prime(len(p)) and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\n\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    prime_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in prime_paths and j not in prime_paths:\n                prime_paths[j] = prime_paths[i] + [j]\n    return prime_paths.get(n)\n\nassert f(g())\n",
        "idx_generation": 383,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any combination sums up to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False\n\ndef g(k=4, target_sum=10):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), k=4, target_sum=10) == True\n",
        "idx_generation": 247,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: List[int], n=3, s=15) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a >= 0 for a in x])\ndef g(n = 3, s = 15):\n    if n == 1:\n        return [s]\n    elif n == 2:\n        return [s - 1, 1]\n    else:\n        return [s/3, s/3, s/3]\nassert f(g()) == True\n",
        "idx_generation": 181,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: List[int], n=3, s=15) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s, where the maximum element is odd.\"\"\"\n    return len(x) == n and sum(x) == s and max(x) % 2 == 1\ndef g(n = 3, s = 15):\n    x = [s // n] * n\n    remainder = s % n\n    for i in range(remainder):\n        x[i] += 1\n    return x\nassert f(g()) == True\n",
        "idx_generation": 64,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, t=100, upper=1000) -> bool:\n    \"\"\"\n    Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n    * if n is even, divide n by 2,\n    * if n is odd, multiply n by 3 and add 1\n    Find `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n    \"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= upper\n\ndef g(t = 100, upper = 1000):\n    bound = t + 10\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 1) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return min(prev)\n\nassert f(g()) == True\n",
        "idx_generation": 177,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(string: str, n: int) -> bool:\n    \"\"\"Check if the given string has at least n consecutive uppercase letters.\"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(string=\"Hello, WORLD!\", n=3):\n    return (string, n)\n\nassert f(*g()) == True\n",
        "idx_generation": 32,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if a given list of numbers contains any duplicates.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5, 1]\n\n    Sample output:\n    True\n\n    Explanation: The number 1 appears twice in the list.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 1]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 402,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, find the maximum value in the matrix.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    output: 9\n    \"\"\"\n    max_val = float('-inf')\n    for row in matrix:\n        for num in row:\n            if num > max_val:\n                max_val = num\n    return max_val\n\ndef g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\nassert f(g()) == 9\n",
        "idx_generation": 152,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find two numbers in the list that add up to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums.sort()\n    left = 0\n    right = len(nums) - 1\n    while left < right:\n        total = nums[left] + nums[right]\n        if total == target:\n            return True\n        elif total < target:\n            left += 1\n        else:\n            right -= 1\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g(), 10) == True\n\n",
        "idx_generation": 320,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target value.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(nums: List[int], target: int):\n    return nums, target\n\nassert f(*g([1, 2, 3, 4, 5], 8)) == True\n",
        "idx_generation": 240,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if the target value is present in the given matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    row = 0\n    col = cols - 1\n\n    while row < rows and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] > target:\n            col -= 1\n        else:\n            row += 1\n\n    return False\n\ndef g(matrix: List[List[int]] = [[1, 3, 5], [7, 9, 11], [13, 15, 17]], target: int = 9):\n    return matrix, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 263,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a symmetric matrix of the given size.\n    \"\"\"\n    return [[1 if i == j else 0 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n",
        "idx_generation": 372,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if the given matrix contains the target number.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=5):\n    return (matrix, target)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 196,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, num=3) -> bool:\n    \"\"\"Find a string that repeats itself num times.\"\"\"\n    if len(s) % num != 0:\n        return False\n    section_len = len(s) // num\n    for i in range(num):\n        if s[i*section_len : (i+1)*section_len] != s[:section_len]:\n            return False\n    return True\n\ndef g(num=3):\n    s = 'abc'*num\n    return s\n\nassert f(g()) == True\n",
        "idx_generation": 0,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: List[int], n=3, s=15) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 3, s = 15):\n    if n == 1:\n        return [s]\n    elif n == 2:\n        return [s - 1, 1]\n    else:\n        return [s/3, s/3, s/3]\nassert f(g()) == True\n",
        "idx_generation": 78,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix, rotate it 90 degrees clockwise.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    The matrix after rotating 90 degrees clockwise is:\n    [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    Therefore, f(matrix) returns [[7, 4, 1], [8, 5, 2], [9, 6, 3]].\n    \"\"\"\n    n = len(matrix)\n    rotated_matrix = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        for j in range(n):\n            rotated_matrix[i][j] = matrix[n - j - 1][i]\n\n    return rotated_matrix\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n\n",
        "idx_generation": 450,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a square matrix.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    rows = len(arr)\n    for row in arr:\n        if len(row) != rows:\n            return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == True\n\n",
        "idx_generation": 402,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Determine if it is possible to find a pair of numbers in a matrix that XORs to a target number. The pair of numbers\n    must be distinct and the order of the numbers in the pair does not matter.\n\n    Sample input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample output:\n    True\n\n    The pair of numbers (2, 6) XORs to 4, which is the target number.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for x in range(i, rows):\n                for y in range(j, cols):\n                    if matrix[i][j] ^ matrix[x][y] == target and (i != x or j != y):\n                        return True\n    return False\n\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, target ^ 2, 9]]\n\nassert f(g()) == True\n\n",
        "idx_generation": 434,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: int, a=10, b=74723522) -> bool:\n    \"\"\"Satisfy a simple if statement with an and clause\"\"\"\n    if x > 0 and a > 50:\n        return x - a == b\n    else:\n        return x + a == b\ndef g(a = 10, b = 74723522):\n    if a > 50 and b > a:\n        return b + a\n    else:\n        return b - a\nassert f(g()) == True\n",
        "idx_generation": 1,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(li: List[int], target=10) -> bool:\n    \"\"\"\n    Find a list of integers that contains exactly two distinct values, such that the sum of the values is equal to the target.\n    \"\"\"\n    return len(set(li)) == 2 and sum(li) == target\n\ndef g(target=10):\n    return [3, 7]\n\nassert f(g()) == True\n",
        "idx_generation": 73,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i + 1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size\n    \"\"\"\n    return [[0 if j > i else 1 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n",
        "idx_generation": 18,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is.\n    \"\"\"\n    return nums\n\nassert f(g([3, 4, -7, 2, 1, 3, 1]), 4)\n",
        "idx_generation": 226,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\nfrom typing import List\n\ndef f(matrix: List[List[int]], target_sum: int) -> bool:\n    \"\"\"\n    Check if there exists a submatrix in the given matrix that has a sum equal to the target_sum.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    prefix_sum = np.zeros((rows + 1, cols + 1))\n    for i in range(1, rows + 1):\n        for j in range(1, cols + 1):\n            prefix_sum[i][j] = prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1] + matrix[i - 1][j - 1]\n\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i + 1, rows + 1):\n                for l in range(j + 1, cols + 1):\n                    submatrix_sum = prefix_sum[k][l] - prefix_sum[i][l] - prefix_sum[k][j] + prefix_sum[i][j]\n                    if submatrix_sum == target_sum:\n                        return True\n    \n    return False\n\ndef g(matrix: List[List[int]]):\n    \"\"\"\n    This solution returns the input matrix as is.\n    \"\"\"\n    return matrix\n\nassert f(g([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), 12) == True\n\n",
        "idx_generation": 366,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size\n    \"\"\"\n    return [[0 if j > i else 1 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n\n",
        "idx_generation": 422,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return ([[1, 2, 3],\n             [2, 4, 5],\n             [3, 5, 6]])\n\nassert f(g()) == True\n",
        "idx_generation": 66,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a symmetric pattern.\n    A symmetric pattern is a grid where the elements are symmetric with respect to the diagonal.\n\n    Sample Input:\n    arr = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if arr[i][j] != arr[j][i]:\n                return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 132,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers and an integer k, find if there exists a subarray with a sum divisible by k.\n\n    Sample Input:\n    nums = [4, 3, 6, 1, 2]\n    k = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    prefix_sum = 0\n    reminders = {0: -1}\n    for i, num in enumerate(nums):\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in reminders:\n            if i - reminders[prefix_sum] >= 2:\n                return True\n        else:\n            reminders[prefix_sum] = i\n    return False\n\ndef g():\n    return [4, 3, 6, 1, 2], 7\n\nassert f(*g())\n",
        "idx_generation": 178,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if it is a magic square.\n    A magic square is a square matrix in which the sum of each row, each column, and both diagonals is the same.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for col in zip(*matrix):\n        if sum(col) != target_sum:\n            return False\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(matrix[i][n-1-i] for i in range(n)) != target_sum:\n        return False\n    return True\ndef g(matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix\nassert f(g()) == True\n\n",
        "idx_generation": 419,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(arr: List[int], k: int = 3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the given array, such that the product of its elements is zero.\"\"\"\n    for i in range(len(arr) - k + 1):\n        subarr = arr[i:i+k]\n        if 0 in subarr:\n            return True\n    return False\n\ndef g(k: int = 3):\n    return [0] * k\n\nassert f(g()) == True\n",
        "idx_generation": 49,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is a magic square.\"\"\"\n    n = len(matrix)\n    target_sum = n * (n ** 2 + 1) // 2\n\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diag_sum1 = sum(matrix[i][i] for i in range(n))\n    diag_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n\n    return all(sum == target_sum for sum in row_sums + col_sums + [diag_sum1, diag_sum2])\n\ndef g(matrix=[[2,7,6],[9,5,1],[4,3,8]]):\n    return matrix\n\nassert f(g()) == True\n",
        "idx_generation": 86,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains any duplicate elements.\"\"\"\n    return len(nums) != len(set(nums))\n\ndef g(nums: List[int] = [1, 2, 3, 2, 4]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 185,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums1: List[int], nums2: List[int], target: int) -> bool:\n    \"\"\"\n    Given two lists of integers, nums1 and nums2, and an integer target, find if there exists a pair of numbers, one from each list, such that their product is equal to the target.\n\n    Sample Input:\n    nums1 = [1, 2, 3, 4]\n    nums2 = [2, 4, 6, 8]\n    target = 16\n\n    Sample Output:\n    True\n    \"\"\"\n    for num1 in nums1:\n        for num2 in nums2:\n            if num1 * num2 == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4], [2, 4, 6, 8], 16\n\nassert f(*g())\n",
        "idx_generation": 180,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a grid where the sum of each row, column, and diagonal is the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    target_sum = sum(arr[0])\n\n    # Check rows\n    for i in range(n):\n        if sum(arr[i]) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(m):\n        if sum(arr[i][j] for i in range(n)) != target_sum:\n            return False\n\n    # Check diagonals\n    if sum(arr[i][i] for i in range(n)) != target_sum or sum(arr[i][n-i-1] for i in range(n)) != target_sum:\n        return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return arr\n\nassert f(g()) == True\n\n",
        "idx_generation": 481,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(inds: List[int], vecs=[169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]) -> bool:\n    \"\"\"\n    Parity learning: Given binary vectors in a subspace, find the secret set S of indices such that:\n    $\\\\sum_{i \\\\in S} x_i = 1 (mod 2)$\n    \"\"\"\n    return all((sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs))\ndef g(vecs = [169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]\nassert f(g()) == True\n",
        "idx_generation": 118,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list whose sum is equal to the target value.\n    Return True if such a subarray exists, False otherwise.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 10\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if prefix_sum[j] - prefix_sum[i] == target:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 10):\n    return arr, target\n\nassert f(*g()) == True\n",
        "idx_generation": 280,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Find if there exists a subarray in the given list of numbers whose sum is equal to zero.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum in prefix_sums or prefix_sum == 0:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\n\ndef g(nums: List[int] = [4, -2, 3, -1, 2, -3, 1]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 163,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if it is a magic square.\n\n    Sample Input:\n    [[2, 7, 6],\n     [9, 5, 1],\n     [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum = sum(matrix[i][i] for i in range(n))\n    anti_diagonal_sum = sum(matrix[i][n-i-1] for i in range(n))\n    if target_sum != diagonal_sum or target_sum != anti_diagonal_sum:\n        return False\n    for i in range(n):\n        if row_sums[i] != target_sum or col_sums[i] != target_sum:\n            return False\n    return True\n\ndef g() -> List[List[int]]:\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g()) == True\n",
        "idx_generation": 175,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(num: int, digits=[0, 2, 4, 6, 8]) -> bool:\n    \"\"\"Check if the given number contains only even digits\"\"\"\n    return all(int(d) % 2 == 0 for d in str(num))\n\ndef g():\n    return 24680\n\nassert f(g()) == True\n",
        "idx_generation": 161,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of numbers, return a new list with only the even numbers.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6]\n    output: [2, 4, 6]\n    \"\"\"\n    return [num for num in nums if num % 2 == 0]\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g()) == [2, 4, 6]\n",
        "idx_generation": 243,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, check if there exists a pair of numbers in the list whose sum is equal to the target.\n\n    Sample Input:\n    [2, 4, 6, 8], 10\n\n    Sample Output:\n    True\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g() -> Tuple[List[int], int]:\n    return ([2, 4, 6, 8], 10)\n\nassert f(*g()) == True\n",
        "idx_generation": 88,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=5, target=10) -> bool:\n    \"\"\"Check if there exists a row or column in the matrix whose sum is equal to the target.\"\"\"\n    row_sum = [sum(row) for row in matrix]\n    column_sum = [sum(column) for column in zip(*matrix)]\n    return any(sum_value == target for sum_value in row_sum + column_sum)\n\ndef g(n=5, target=10):\n    return [[i] * n for i in range(target // n + 1)]\n\nassert f(g()) == True\n",
        "idx_generation": 99,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int = 3) -> bool:\n    \"\"\"\n    Check if there exists a subarray of length k in the given array, such that the product of its elements is divisible by k.\n    \"\"\"\n    for i in range(len(arr) - k + 1):\n        subarr = arr[i:i+k]\n        product = 1\n        for num in subarr:\n            product *= num\n        if product % k == 0:\n            return True\n    return False\n\ndef g(k: int = 3):\n    return [k] * k\n\nassert f(g()) == True\n\n",
        "idx_generation": 253,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=8) -> bool:\n    \"\"\"\n    Given a matrix of integers, determine if the target integer is present in the matrix.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == True\n",
        "idx_generation": 139,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(grid: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sums of the rows, columns, and diagonals are all equal.\n\n    Sample Input:\n    grid = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(grid)\n    target_sum = sum(grid[0])\n\n    # Check rows\n    for row in grid:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        if sum(grid[i][j] for i in range(n)) != target_sum:\n            return False\n\n    # Check diagonals\n    if sum(grid[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(grid[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n\n    return True\n\ndef g(grid: List[List[int]] = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]):\n    return grid\n\nassert f(g()) == True\n",
        "idx_generation": 125,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=5, target=10) -> bool:\n    \"\"\"Check if there exists a column in the matrix whose sum is equal to the target.\"\"\"\n    transpose_matrix = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n    return any(sum(column) == target for column in transpose_matrix)\n\ndef g(n=5, target=10):\n    return [[i] * n for i in range(target // n + 1)]\n\nassert f(g()) == False\n\n",
        "idx_generation": 99,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a diagonal pattern.\n    A diagonal pattern is a grid where the elements form a pattern that diagonally increases.\n\n    Sample Input:\n    arr = [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(n):\n        for j in range(m):\n            if i != j and arr[i][j] != 0:\n                return False\n            elif i == j and arr[i][j] != i+1:\n                return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[1, 0, 0], [0, 2, 0], [0, 0, 3]]):\n    return arr\n\nassert f(g()) == True\n\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> int:\n    \"\"\"\n    Given a 2D grid of integers, find the maximum value in the grid.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    9\n    \"\"\"\n    return max(max(row) for row in arr)\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == 9\n",
        "idx_generation": 457,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(string: str, substring: str) -> bool:\n    \"\"\"\n    Check if the given string contains a substring.\n    \"\"\"\n    return substring in string\n\ndef g(string: str = \"Hello, World!\", substring: str = \"World\"):\n    return (string, substring)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 401,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums: List[int] = [2, 3, 5, 7, 5, 3, 2]):\n    return nums\n\nassert f(g()) == True\n\n",
        "idx_generation": 354,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(s: str, substring: str = 'abc') -> bool:\n    \"\"\"\n    Check if a given string contains all characters of a given substring in the same order.\n\n    Sample Input:\n    s = \"abcdef\"\n    substring = \"abc\"\n\n    Sample Output:\n    True\n    \"\"\"\n    if len(substring) == 0:\n        return True\n    if len(s) == 0:\n        return False\n    if s[0] == substring[0]:\n        return f(s[1:], substring[1:])\n    return f(s[1:], substring)\n\ndef g() -> List[int]:\n    return \"abcdef\"\n\nassert f(g()) == True\n\n",
        "idx_generation": 236,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number n is a power of 2.\"\"\"\n    return n & (n - 1) == 0\n\ndef g(n: int = 32):\n    return n\n\nassert f(g()) == True\n",
        "idx_generation": 87,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if all the elements are even, otherwise return False.\n\n    Sample Input:\n    arr = [2, 4, 6, 8]\n\n    Sample Output:\n    True\n    \"\"\"\n    return all(num % 2 == 0 for num in arr)\n\ndef g():\n    return [2, 4, 6, 8]\n\nassert f(g()) == True\n\n",
        "idx_generation": 410,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> int:\n    \"\"\"\n    Given a 2D grid of integers, find the sum of all the elements in the grid.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    45\n    \"\"\"\n    total_sum = 0\n    for row in arr:\n        total_sum += sum(row)\n    return total_sum\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == 45\n\n",
        "idx_generation": 166,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find three numbers in the list such that their sum is equal to the target number.\n    Return True if such a triplet exists, otherwise return False.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    complements = set()\n    for i in range(len(nums)):\n        num1 = nums[i]\n        for j in range(i+1, len(nums)):\n            num2 = nums[j]\n            complement = target - num1 - num2\n            if complement in complements:\n                return True\n            complements.add(num1)\n            complements.add(num2)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 449,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2) -> bool:\n    \"\"\"\n    Given a list of non-increasing integers and given an integer k, determine how many positive integers in the list\n    are strictly larger than the kth.\n    \"\"\"\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return all((s > scores[k] and s > 0 for s in scores[:n])) and all((s <= scores[k] or s <= 0 for s in scores[n:]))\n\ndef g(scores = [20, 19, 17, 13, 12, 11, 10, 6], k = 2):\n    threshold = max(scores[k], 1)\n    return sum(s > threshold for s in scores)\n\nassert f(g()) == True\n",
        "idx_generation": 98,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], n: int = 8) -> int:\n    \"\"\"\n    Given a list of integers and a target number n, count the number of occurrences of n in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num == n:\n            count += 1\n    return count\n\ndef g(n: int = 8):\n    return [8, 8, 8, 8, 8, 8, 8]\n\nassert f(g()) == 7\n\n\n",
        "idx_generation": 473,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, k=2) -> bool:\n    \"\"\"\n    Given a string s, check if there are at least k palindromic substrings in s.\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substr = s[i:j]\n            if substr == substr[::-1]:\n                count += 1\n    return count >= k\n\ndef g(k=2):\n    return \"racecar\" * (k-1) + \"level\"\n\nassert f(g()) == True\n",
        "idx_generation": 52,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a pair of numbers whose product is equal to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        if num != 0 and target % num == 0 and target // num in nums_set:\n            return True\n    return False\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums\n\nassert f(g()) == True\n\n",
        "idx_generation": 231,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(lst: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subset of k numbers from the list whose sum is divisible by k.\"\"\"\n\n    def subsets_sum_divisible(nums, k, subset=[], index=0):\n        if len(subset) == k:\n            return sum(subset) % k == 0\n        if index >= len(nums):\n            return False\n        with_num = subsets_sum_divisible(nums, k, subset + [nums[index]], index + 1)\n        without_num = subsets_sum_divisible(nums, k, subset, index + 1)\n        return with_num or without_num\n\n    return subsets_sum_divisible(lst, k)\n    \ndef g(k = 3):\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\nassert f(g()) == True\n",
        "idx_generation": 75,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"\n    Given n, check if the given string s contains exactly n vowels.\n\n    Sample input:\n    \"hello\"\n\n    Sample output:\n    True\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count == n\n\ndef g(n = 5):\n    return \"aeiou\" * (n // 5)\n\nassert f(g())\n",
        "idx_generation": 379,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a pair of numbers in the list that sum up to the target value.\n    \"\"\"\n    num_set = set()\n    for num in arr:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(arr: List[int] = [1, 4, 7, 3, 9, 2, 5], target: int = 10):\n    return (arr, target)\n\nassert f(*g()) == True\n",
        "idx_generation": 404,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Set\n\ndef f(s1: Set[int], s2: Set[int]) -> bool:\n    \"\"\"\n    Given two sets of integers, check if there is a pair of integers (one from each set)\n    such that their sum is divisible by 5.\n\n    Sample Input:\n    s1 = {1, 2, 3, 4, 5}\n    s2 = {6, 7, 8, 9, 10}\n\n    Sample Output:\n    True\n    \"\"\"\n    for num1 in s1:\n        for num2 in s2:\n            if (num1 + num2) % 5 == 0:\n                return True\n\n    return False\n\ndef g(s1: Set[int] = {1, 2, 3, 4, 5}, s2: Set[int] = {6, 7, 8, 9, 10}):\n    return s1, s2\n\nassert f(*g()) == True\n",
        "idx_generation": 269,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, sort the list in ascending order using the bubble sort algorithm.\n\n    Sample Input:\n    arr = [5, 3, 8, 2, 1, 9, 4]\n\n    Sample Output:\n    [1, 2, 3, 4, 5, 8, 9]\n    \"\"\"\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\n    return arr\n\ndef g(arr: List[int] = [5, 3, 8, 2, 1, 9, 4]):\n    return arr\n\nassert f(g()) == [1, 2, 3, 4, 5, 8, 9]\n\n",
        "idx_generation": 423,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Sort the given list of integers in ascending order.\n\n    Sample Input:\n    [5, 3, 1, 4, 2]\n\n    Sample Output:\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    if len(nums) <= 1:\n        return nums\n    pivot = nums[len(nums) // 2]\n    left = [x for x in nums if x < pivot]\n    middle = [x for x in nums if x == pivot]\n    right = [x for x in nums if x > pivot]\n    return f(left) + middle + f(right)\n\ndef g(nums: List[int] = [5, 3, 1, 4, 2]):\n    return nums\n\nassert f(g()) == [1, 2, 3, 4, 5]\n",
        "idx_generation": 380,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a grid where the sum of every row, every column, and both diagonals is the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        if sum(arr[i]) != target_sum:\n            return False\n        col_sum = 0\n        for j in range(len(arr[i])):\n            col_sum += arr[j][i]\n        if col_sum != target_sum:\n            return False\n    diag_sum1 = 0\n    diag_sum2 = 0\n    for i in range(len(arr)):\n        diag_sum1 += arr[i][i]\n        diag_sum2 += arr[i][len(arr)-1-i]\n    if diag_sum1 != target_sum or diag_sum2 != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return arr\n\nassert f(g()) == True\n\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(arr: List[int], k: int) -> List[int]:\n    \"\"\"Rotate the given list to the right by k steps.\"\"\"\n    k = k % len(arr)\n    return arr[-k:] + arr[:-k]\n\ndef g(arr: List[int], k: int):\n    return arr, k\n\nassert f(*g([1, 2, 3, 4, 5], 2)) == [4, 5, 1, 2, 3]\n",
        "idx_generation": 222,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"\n    Determine if a given string is a palindrome after removing exactly n characters from it.\n\n    Sample input:\n    \"madam\", 2\n\n    Sample output:\n    True\n\n    Explanation:\n    By removing 'a' and 'd', the string \"madam\" becomes a palindrome.\n    \"\"\"\n    if n < 0:\n        return False\n    if n == 0:\n        return s == s[::-1]\n    if len(s) <= 1:\n        return True\n    if s[0] == s[-1]:\n        return f(s[1:-1], n)\n    else:\n        return f(s[1:], n - 1) or f(s[:-1], n - 1)\ndef g(s: str = \"madam\", n: int = 2):\n    return (s, n)\nassert f(*g())\n",
        "idx_generation": 102,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], num_rows=3, num_cols=3) -> bool:\n    \"\"\"Check if a given matrix is an upper triangular matrix\"\"\"\n    for i in range(num_rows):\n        for j in range(i):\n            if matrix[i][j] != 0:\n                return False\n    return True\ndef g(matrix=[[1, 2, 3], [0, 4, 5], [0, 0, 6]], num_rows=3, num_cols=3):\n    return matrix\nassert f(g()) == True\n",
        "idx_generation": 85,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"\n    Given two integers n and k, check if there exists a Pythagorean triplet (a, b, c)\n    where a, b, and c are positive integers less than or equal to n and c is divisible by k.\n    \"\"\"\n    for a in range(1, n+1):\n        for b in range(a+1, n+1):\n            c = (a**2 + b**2)**0.5\n            if c.is_integer() and c <= n and c % k == 0:\n                return True\n    return False\n\ndef g(k=3):\n    n = 1\n    while not f(n, k):\n        n += 1\n    return n\n\nassert f(g()) == True\n",
        "idx_generation": 52,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"\n    Check if there is a contiguous subarray of numbers that sums up to the target value\n    \"\"\"\n    num_elements = len(nums)\n    for i in range(num_elements):\n        sum = nums[i]\n        for j in range(i+1, num_elements):\n            sum += nums[j]\n            if sum == target:\n                return True\n    return False\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g()) == True\n",
        "idx_generation": 161,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(inds: List[int], vecs=[169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]) -> bool:\n    \"\"\"\n    Parity learning: Given binary vectors in a subspace, find the secret set S of indices such that:\n    $\\\\sum_{i \\\\in S} x_i = 1 (mod 2)$\n    \"\"\"\n    return any((sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs))\n\ndef g(vecs = [169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]\nassert f(g())\n",
        "idx_generation": 281,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a toeplitz matrix.\n    A toeplitz matrix is a matrix where each descending diagonal from left to right is constant.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 1, 2], [7, 4, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    m, n = len(arr), len(arr[0])\n    for i in range(m-1):\n        for j in range(n-1):\n            if arr[i][j] != arr[i+1][j+1]:\n                return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 1, 2], [7, 4, 1]]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 178,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n: int) -> bool:\n    \"\"\"\n    Given a list of integers `nums` and an integer `n`, find if there exists a subsequence in the list that sums up to exactly n.\n    Return True if such a subsequence exists, False otherwise.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    n = 7\n    Output: True\n    Explanation: The subsequence [2, 5] sums up to 7.\n    \"\"\"\n    dp = [False] * (n + 1)\n    dp[0] = True\n\n    for num in nums:\n        for i in range(n, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n\n    return dp[n]\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], n: int = 7):\n    return (nums, n)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 356,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n\n",
        "idx_generation": 376,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix of integers, rotate the matrix 90 degrees clockwise.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Output:\n    [[7, 4, 1],\n     [8, 5, 2],\n     [9, 6, 3]]\n    \"\"\"\n\n    n = len(matrix)\n    m = len(matrix[0])\n    result = [[0] * n for _ in range(m)]\n\n    for i in range(n):\n        for j in range(m):\n            result[j][n-i-1] = matrix[i][j]\n\n    return result\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return (matrix,)\n\nassert f(*g()) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n\n",
        "idx_generation": 455,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a symmetric matrix of the given size\n    \"\"\"\n    return [[1 if i == j else 0 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n",
        "idx_generation": 90,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nimport numpy as np\nfrom typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix.\"\"\"\n    n = len(matrix)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n\n    return True\n\ndef g(n=3):\n    \"\"\"Generate a symmetric matrix of size n x n.\"\"\"\n    symmetric_matrix = np.zeros((n, n), dtype=int)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            num = np.random.randint(1, 10)\n            symmetric_matrix[i][j] = num\n            symmetric_matrix[j][i] = num\n\n    return symmetric_matrix.tolist()\n\nassert f(g()) == True\n",
        "idx_generation": 275,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list is a palindrome\"\"\"\n    return nums == nums[::-1]\n\ndef g(nums=[1, 2, 3, 2, 1]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 198,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], n=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list that sums up to n.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums) + 1):\n            if sum(nums[i:j]) == n:\n                return True\n    return False\n    \ndef g(n=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \nassert f(g()) == True\n",
        "idx_generation": 54,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import *\nimport numpy as np\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1,cols):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size\n    \"\"\"\n    return [[0 if j > i else 1 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n",
        "idx_generation": 120,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(str_list: List[str], target_length=5) -> bool:\n    \"\"\"Check if any string in the list has a length equal to the target_length\"\"\"\n    return any(len(s) == target_length for s in str_list)\n\ndef g(str_list: List[str] = ['apple', 'banana', 'cherry', 'date']):\n    return str_list\n\nassert f(g()) == True\n",
        "idx_generation": 186,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Check if there exists a number in the list that is greater than the target value.\n    \"\"\"\n    return any(num > target for num in nums)\n\ndef g(target=100):\n    return list(range(target))\n\nassert f(g()) == False\n\n",
        "idx_generation": 204,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a Latin square.\n    A Latin square is a grid where each row and column contains unique elements.\n\n    Sample Input:\n    arr = [[1, 2, 3], [3, 1, 2], [2, 3, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    # Check rows\n    for i in range(n):\n        if len(set(arr[i])) != m:\n            return False\n\n    # Check columns\n    for j in range(m):\n        column_elements = [arr[i][j] for i in range(n)]\n        if len(set(column_elements)) != n:\n            return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [3, 1, 2], [2, 3, 1]]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 482,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, values=[0, 1, 2, 3, 4, 5, 6], k=5) -> bool:\n    \"\"\"\n    Given a list of non-decreasing integers and given an integer k, determine if there are exactly n numbers in the list\n    that are equal to the kth number.\n    \"\"\"\n    assert all((values[i] <= values[i + 1] for i in range(len(values) - 1))), 'Hint: values are non-decreasing'\n    return sum(x == values[k] for x in values) == n\ndef g(values=[0, 1, 2, 3, 4, 5, 6], k=5):\n    threshold = values[k]\n    return sum(x == threshold for x in values)\nassert f(g()) == True\n",
        "idx_generation": 131,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to exactly k.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == k:\n            return True\n        if prefix_sum - k in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False\n\ndef g(nums: List[int], k: int):\n    \"\"\"\n    This solution returns the input list and target value as is.\n    \"\"\"\n    return (nums, k)\n\nnums = [1, 2, 3, 4, 5]\nk = 9\n\nassert f(*g(nums, k)) == True\n",
        "idx_generation": 296,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list whose sum is equal to the target value.\n    Return True if such a subarray exists, False otherwise.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if prefix_sum[j] - prefix_sum[i] == target:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return arr, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 257,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an identity matrix\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if (i == j and matrix[i][j] != 1) or (i != j and matrix[i][j] != 0):\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate an identity matrix of the given size\n    \"\"\"\n    identity_matrix = [[0 for _ in range(size)] for _ in range(size)]\n    for i in range(size):\n        identity_matrix[i][i] = 1\n    return identity_matrix\n\nassert f(g()) == True\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(prices: List[float], discount: float) -> List[float]:\n    \"\"\"\n    Given a list of prices and a discount percentage, calculate the discounted price for each item.\n\n    Example:\n    prices = [10.0, 20.0, 30.0, 40.0]\n    discount = 0.2\n    output: [8.0, 16.0, 24.0, 32.0]\n    \"\"\"\n    return [price * (1 - discount) for price in prices]\n\ndef g():\n    return ([10.0, 20.0, 30.0, 40.0], 0.2)\n\nassert f(*g()) == [8.0, 16.0, 24.0, 32.0]\n\n",
        "idx_generation": 197,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if all numbers in the list are even.\n    \"\"\"\n    return all(x % 2 == 0 for x in nums)\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g()) == True\n\n",
        "idx_generation": 274,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: List[int], a=7, s=5) -> bool:\n    \"\"\"Check if the list contains an arithmetic sequence with a common difference of s and starting from a.\"\"\"\n    return all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])\ndef g(a = 7, s = 5):\n    return [a, a + s, a + 2 * s, a + 3 * s]\nassert f(g()) == True\n",
        "idx_generation": 0,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, a=50) -> bool:\n    \"\"\"\n    Given a number n, check if it is divisible by the sum of its digits.\n    \"\"\"\n    return n % sum(map(int, str(n))) == 0\ndef g(a = 50):\n    return int('1' + '0' * (len(str(a)) - 2))\nassert f(g()) == True\n",
        "idx_generation": 15,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(li: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, determine if there exists a pair of integers in the list\n    whose sum is equal to the target.\n\n    Sample input:\n    [1, 2, 3, 4, 5], 9\n\n    Sample output:\n    True\n    \"\"\"\n    seen = set()\n    for num in li:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(li = [1, 2, 3, 4, 5], target = 9):\n    return (li, target)\n\nassert f(*g())\n",
        "idx_generation": 133,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the sum of all the even numbers in the list.\n    \"\"\"\n    return sum(num for num in nums if num % 2 == 0)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == 6\n",
        "idx_generation": 221,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, find the sum of all the elements in the matrix.\n    \"\"\"\n    result = 0\n    \n    for row in matrix:\n        result += sum(row)\n        \n    return result\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 45\n\n",
        "idx_generation": 258,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Given a list of integers, find the two numbers that add up to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in nums_set and complement != num:\n            return True\n    return False\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 245,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, d: dict={1: \"one\", 2: \"two\", 3: \"three\"}) -> bool:\n    \"\"\"Check if the given number is a key in the dictionary\"\"\"\n    return n in d.keys()\ndef g(d={1: \"one\", 2: \"two\", 3: \"three\"}):\n    return list(d.keys())[0]\nassert f(g()) == True\n",
        "idx_generation": 76,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import math\nfrom typing import*\ndef f(n: int, target: int) -> bool:\n    \"\"\"Check if the number n is a perfect square and the sum of its digits is equal to the target value.\"\"\"\n    def digit_sum(num):\n        return sum([int(i) for i in str(num)])\n    \n    return math.isqrt(n) ** 2 == n and digit_sum(n) == target\n\ndef g():\n    return 16, 7\nassert f(*g()) == True\n\n",
        "idx_generation": 140,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=5, target=10) -> bool:\n    \"\"\"Check if there exists a row or column in the matrix whose sum is equal to the target.\"\"\"\n    row_sum = [sum(row) for row in matrix]\n    column_sum = [sum(column) for column in zip(*matrix)]\n    return any(sum_value == target for sum_value in row_sum + column_sum)\n\ndef g(n=5, target=10):\n    return [[i] * n for i in range(target // n + 1)]\n\nassert f(g()) == True\n",
        "idx_generation": 112,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list with all negative numbers changed to positive numbers.\n    \"\"\"\n    return [abs(num) for num in nums]\n\nassert f(g([3, -4, 7, -2, 1, 3, -1]), 4)\n",
        "idx_generation": 286,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(li: List[int], n=12) -> bool:\n    \"\"\"\n    Given n, find n integers such that li[i] * li[i+1] + 1 == li[i+2], for i = 0, 1, ..., n-1\n    where indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\n    that are multiples of 3 (as proven in the IMO problem).\n\n    Sample input:\n    12\n\n    Sample output:\n    [_, _, _, _, _, _, _, _, _, _, _, _]\n\n    (Sample output hidden because showing sample output would give away too much information.)\n    \"\"\"\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n = 12):\n    return [-1, -1, 2] * (n // 3)\nassert f(g()) == True\n",
        "idx_generation": 11,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a list of lists of integers, return a new list containing the maximum element from each sublist.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    [3, 6, 9]\n    \"\"\"\n    max_elements = []\n\n    for sublist in arr:\n        max_elements.append(max(sublist))\n\n    return max_elements\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == [3, 6, 9]\n",
        "idx_generation": 457,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, check if it is a palindrome.\n\n    Sample input:\n    \"racecar\"\n\n    Sample output:\n    True\n    \"\"\"\n    return s == s[::-1]\n\ndef g():\n    s = \"racecar\"\n    return (s,)\n\nassert f(*g()) == True\n",
        "idx_generation": 402,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> List[str]:\n    \"\"\"\n    Given a string s, return a list of all substrings of s.\n\n    Sample Input:\n    s = \"abc\"\n\n    Sample Output:\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \"\"\"\n    substrings = []\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substrings.append(s[i:j])\n    return substrings\n\ndef g(s: str = \"abc\"):\n    return s\n\nassert f(g()) == [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n\n\n",
        "idx_generation": 475,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import random\nfrom typing import*\ndef f(inds: List[int], vecs=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"\n    Check if the sum of elements at given indices in the binary representation of each number in vecs is odd.\n    \"\"\"\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) % 2 == 1\n\ndef g(vecs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    # convert numbers to binary representation\n    vecs = [[(n >> i) & 1 for i in range(4)] for n in vecs]\n\n    # generate random indices\n    import random\n    rand = random.Random(0)\n    inds = [i for i in range(4) if rand.randrange(2)]\n\n    return inds\n\nassert f(g()) == True\n",
        "idx_generation": 104,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Given a positive integer n, check if it is a perfect number.\n    A perfect number is a positive integer that is equal to the sum of its proper divisors (excluding the number itself).\n\n    Example:\n    n = 28\n    The proper divisors of 28 are 1, 2, 4, 7, and 14.\n    The sum of the proper divisors is 1 + 2 + 4 + 7 + 14 = 28, which is equal to n.\n\n    Therefore, f(n) returns True.\n    \"\"\"\n    divisors = [x for x in range(1, n) if n % x == 0]\n    return sum(divisors) == n\n\ndef g(n: int = 28):\n    return n\n\nassert f(g()) == True\n",
        "idx_generation": 411,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size\n    \"\"\"\n    return [[0 if j > i else 1 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n",
        "idx_generation": 205,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(path: List[int], edges=[[3, 5], [2, 1], [4, 5], [3, 6], [6, 7], [5, 3], [4, 3], [6, 2], [5, 2], [7, 0], [3, 4], [0, 5], [0, 0], [1, 0], [0, 2], [3, 1]]) -> bool:\n    \"\"\"Find the shortest path from node 0 to node n in a given digraph on vertices 0, 1,..., n.\"\"\"\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max((max(edge) for edge in edges))\n    return True\n\ndef g(edges = [[3, 5], [2, 1], [4, 5], [3, 6], [6, 7], [5, 3], [4, 3], [6, 2], [5, 2], [7, 0], [3, 4], [0, 5], [0, 0], [1, 0], [0, 2], [3, 1]]):\n    graph = {}\n    for edge in edges:\n        if edge[0] in graph:\n            graph[edge[0]].append(edge[1])\n        else:\n            graph[edge[0]] = [edge[1]]\n    queue = [[0]]\n    while queue:\n        path = queue.pop(0)\n        node = path[-1]\n        if node == max((max(edge) for edge in edges)):\n            return path\n        for adjacent in graph.get(node, []):\n            new_path = list(path)\n            new_path.append(adjacent)\n            queue.append(new_path)\n    return []\n\nassert f(g()) == True\n",
        "idx_generation": 108,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\ndef f(squares: List[List[int]], m=8, n=8) -> bool:\n    \"\"\"Position min(m, n) <= 8 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 8, n = 8):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g()) == True\n",
        "idx_generation": 96,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Find if there exists a combination of numbers in nums that sums up to target.\"\"\"\n    for r in range(1, len(nums)+1):\n        for combination in itertools.combinations(nums, r):\n            if sum(combination) == target:\n                return True\n    return False\n\ndef g(target=12):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 495,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, k: int) -> List[List[int]]:\n    \"\"\"Given an array of integers and a target number, find all unique combinations in the array where the sum of the numbers is equal to the target and the length of the combination is equal to k.\"\"\"\n    nums.sort()\n    result = []\n\n    def backtrack(curr_sum, start, combination):\n        if curr_sum == target and len(combination) == k:\n            result.append(combination)\n            return\n        if curr_sum > target or len(combination) > k:\n            return\n        for i in range(start, len(nums)):\n            if i > start and nums[i] == nums[i - 1]:\n                continue\n            backtrack(curr_sum + nums[i], i + 1, combination + [nums[i]])\n\n    backtrack(0, 0, [])\n    return result\n\ndef g():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    target = 10\n    k = 3\n    return (nums, target, k)\n\nassert f(*g()) == [[1, 2, 7], [1, 3, 6], [1, 4, 5], [2, 3, 5]]\n",
        "idx_generation": 77,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if there are three distinct numbers in the list that sum up to 10.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == 10:\n                    return True\n    return False\n\ndef g(numbers: List[int] = [1, 2, 3, 4, 5]):\n    return numbers\n\nassert f(g()) == True\n\n",
        "idx_generation": 437,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"\n    Find a list of integers containing exactly two distinct values, such that no integer repeats\n    twice consecutively among the first fifteen entries and the sum of all the elements is odd.\n    (So the list needs to have length greater than fourteen.)\n    \"\"\"\n    return all([li[i] != li[i + 1] for i in range(14)]) and len(set(li)) == 2 and sum(li) % 2 != 0\n\ndef g():\n    return [i % 2 for i in range(15)]\n\nassert f(g()) == True\n",
        "idx_generation": 76,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the sum of all the elements.\n\n    Example:\n    arr = [1, 2, 3, 4, 5]\n    output: 15\n    \"\"\"\n    return sum(arr)\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g()) == 15\n",
        "idx_generation": 404,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n=10) -> bool:\n    \"\"\"Check if all the numbers in the list are divisible by n\"\"\"\n    return all(num % n == 0 for num in arr)\ndef g(n=10):\n    return [n*i for i in range(1, 6)]\nassert f(g())\n",
        "idx_generation": 486,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist two numbers in the list whose difference is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in numbers:\n        if num - target in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], 4\n\nassert f(*g()) == True\n",
        "idx_generation": 459,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, sort the list in non-decreasing order using the Bubble Sort algorithm.\n    Return the sorted list.\n    \"\"\"\n    n = len(nums)\n    for i in range(n - 1):\n        for j in range(n - i - 1):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    return nums\n\ndef g(nums: List[int] = [64, 34, 25, 12, 22, 11, 90]):\n    return nums\n\nassert f(g()) == [11, 12, 22, 25, 34, 64, 90]\n",
        "idx_generation": 452,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a diagonal pattern.\n    A diagonal pattern is a grid where the elements form a pattern that starts with an increasing sequence along the main diagonal, and the next diagonal starts with a greater value than the previous diagonal.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(1, n):\n        if arr[i][i] <= arr[i-1][i-1]:\n            return False\n        for j in range(i, m-1):\n            if arr[j+1][j+1] <= arr[j][j]:\n                return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == True\n\n",
        "idx_generation": 390,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, remove all duplicate elements and return the modified list.\n\n    Sample Input:\n    arr = [1, 2, 2, 3, 4, 4, 5]\n\n    Sample Output:\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    return list(set(arr))\n\ndef g(arr: List[int] = [1, 2, 2, 3, 4, 4, 5]):\n    return arr\n\nassert f(g()) == [1, 2, 3, 4, 5]\n\n",
        "idx_generation": 248,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int) -> bool:\n    \"\"\"\n    Given an integer, check if it is a palindrome.\n\n    Example:\n    num = 12321\n\n    Output:\n    True\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef g(num: int = 12321):\n    return num\n\nassert f(g()) == True\n",
        "idx_generation": 347,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=5, target=10) -> bool:\n    \"\"\"Find a row in the matrix whose sum is equal to the target.\"\"\"\n    return any(sum(row) == target for row in matrix)\ndef g(n=5, target=10):\n    return [[i] * n for i in range(target // n + 1)]\nassert f(g()) == True\n",
        "idx_generation": 86,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers, check if there is an arithmetic progression present with the target difference.\n\n    Example:\n    nums = [1, 3, 5, 7, 9]\n    target = 2\n    output: True\n    \"\"\"\n    nums.sort()\n    for i in range(len(nums) - 2):\n        if nums[i + 1] - nums[i] == target and nums[i + 2] - nums[i + 1] == target:\n            return True\n    return False\n\ndef g():\n    return [1, 3, 5, 7, 9], 2\nassert f(*g()) == True\n",
        "idx_generation": 83,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100, k=2) -> bool:\n    \"\"\"Check if there exists a group of k numbers in the list whose sum is equal to the target value.\"\"\"\n    def backtrack(nums, target, k, start, cur_sum):\n        if k == 0:\n            return cur_sum == target\n        for i in range(start, len(nums)):\n            if backtrack(nums, target, k - 1, i + 1, cur_sum + nums[i]):\n                return True\n        return False\n    \n    return backtrack(nums, target, k, 0, 0)\n\ndef g(target=100, k=2):\n    return list(range(1, target // k + 1))\n\nassert f(g()) == False\n",
        "idx_generation": 212,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, t=125, upper=1500) -> bool:\n    \"\"\"\n    Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n    * if n is even, divide n by 2,\n    * if n is odd, multiply n by 3 and add 1\n    Find `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n    \"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= upper\ndef g(t = 125, upper = 1500):\n    # Faster solution for simultaneously solving multiple problems is of course possible\n    bound = t + 10\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 1) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return min(prev)\nassert f(g()) == True\n\n",
        "idx_generation": 272,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(matrix: List[List[int]], num_rows=3, num_cols=3) -> bool:\n    \"\"\"Check if a given matrix is lower triangular\"\"\"\n    for i in range(num_rows):\n        for j in range(i+1, num_cols):\n            if matrix[i][j] != 0:\n                return False\n    return True\ndef g(matrix=[[1, 0, 0], [2, 3, 0], [4, 5, 6]], num_rows=3, num_cols=3):\n    return matrix\nassert f(g()) == True\n",
        "idx_generation": 430,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an upper triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate an upper triangular matrix of the given size\n    \"\"\"\n    return [[0 if j < i else 1 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n",
        "idx_generation": 449,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], num_rows=2, num_cols=2) -> bool:\n    \"\"\"Check if a given matrix is upper triangular\"\"\"\n    for i in range(num_rows):\n        for j in range(i+1, num_cols):\n            if matrix[i][j] != 0:\n                return False\n    return True\ndef g(matrix=[[1, 0], [2, 3]], num_rows=2, num_cols=2):\n    return matrix\nassert f(g()) == True\n",
        "idx_generation": 93,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a square matrix.\n    A square matrix is a grid where the number of rows is equal to the number of columns.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    rows = len(arr)\n    for row in arr:\n        if len(row) != rows:\n            return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == True\n\n",
        "idx_generation": 292,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is symmetric\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a symmetric matrix of the given size\n    \"\"\"\n    return [[1 if i == j else 0 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n\n",
        "idx_generation": 387,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there are two numbers in the given list that add up to the target number.\"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return ([2, 7, 11, 15], 9)\n\nassert f(*g()) == True\n",
        "idx_generation": 66,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(grid: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sums of the rows, columns, and diagonals are all equal.\n\n    Sample Input:\n    grid = [[1, 2, 3], [4, 5, 6], [7, 8, 10]]\n\n    Sample Output:\n    False\n    \"\"\"\n    n = len(grid)\n    target_sum = sum(grid[0])\n\n    # Check rows\n    for row in grid:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        if sum(grid[i][j] for i in range(n)) != target_sum:\n            return False\n\n    # Check diagonals\n    if sum(grid[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(grid[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n\n    return True\n\ndef g(grid: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 10]]):\n    return grid\n\nassert f(g()) == False\n\n",
        "idx_generation": 125,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\n\ndef f(lst: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if there is a pair of numbers in any sublist of the list lst that add up to the target.\n\n    Sample input:\n    lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 9\n\n    Sample output:\n    True\n\n    Explanation: The pair of numbers (3, 6) add up to 9 and they are present in the sublist [1, 2, 3].\n    \"\"\"\n    assert len(lst) > 0, 'Hint: The list should have at least 1 sublist.'\n    return any(i + j == target for sublist in lst for i in sublist for j in sublist if i != j)\n\ndef g(lst=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=9):\n    return lst, target\n\nassert f(*g()) == True\n",
        "idx_generation": 281,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, count=2) -> bool:\n    \"\"\"Find if there are count numbers that add up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(nums, count))\ndef g(target = 10, count = 2):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g()) == True\n",
        "idx_generation": 12,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if there are two numbers that sum up to the target.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n    output: True\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 7\n\nassert f(*g()) == True\n",
        "idx_generation": 283,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, a=7, b=20, c=25) -> bool:\n    \"\"\"Find n such that n + a is divisible by b\"\"\"\n    return (n + a) % b == 0\ndef g(a=7, b=20, c=25):\n    return b - a\nassert f(g()) == True\n",
        "idx_generation": 190,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: List[int], n=4, s=20) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 4, s = 20):\n    x = [s // n] * n\n    remainder = s % n\n    for i in range(remainder):\n        x[i] += 1\n    return x\nassert f(g()) == True\n",
        "idx_generation": 21,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> int:\n    \"\"\"\n    Given a list of lists of integers, find the maximum sum of a subarray within each list and return the sum of the maximum subarray sums.\n\n    Example:\n    nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    The maximum subarray sums are [6, 15, 24].\n    The sum of the maximum subarray sums is 6 + 15 + 24 = 45.\n\n    Therefore, f(nums) returns 45.\n    \"\"\"\n    result = 0\n    for sublist in nums:\n        max_sum = float('-inf')\n        curr_sum = 0\n        for num in sublist:\n            curr_sum += num\n            max_sum = max(max_sum, curr_sum)\n            if curr_sum < 0:\n                curr_sum = 0\n        result += max_sum\n    return result\n\ndef g(nums: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums\n\nassert f(g()) == 45\n",
        "idx_generation": 337,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], n=3, s=0) -> bool:\n    \"\"\"\n    Check if there exists a list of n non-negative integers that sum up to s.\n    If no values for n and s are provided, it will check if there exists a list of 3 non-negative integers that sum up to zero.\n    \"\"\"\n    return len(x) == n and sum(x) == s and all([a >= 0 for a in x])\n\ndef g(n=3, s=0):\n    x = [0] * n\n    return x\n\nassert f(g()) == True\n\n\n",
        "idx_generation": 268,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum != target_sum:\n            return False\n    \n    # Check diagonals\n    diagonal_sum1 = 0\n    diagonal_sum2 = 0\n    for i in range(n):\n        diagonal_sum1 += matrix[i][i]\n        diagonal_sum2 += matrix[i][n-1-i]\n    if diagonal_sum1 != target_sum or diagonal_sum2 != target_sum:\n        return False\n    \n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a magic square of the given size\n    \"\"\"\n    magic_square = [[0 for _ in range(size)] for _ in range(size)]\n    num = 1\n    i = 0\n    j = size // 2\n    while num <= size*size:\n        magic_square[i][j] = num\n        num += 1\n        new_i = (i - 1) % size\n        new_j = (j + 1) % size\n        if magic_square[new_i][new_j] != 0:\n            i = (i + 1) % size\n        else:\n            i = new_i\n            j = new_j\n    return magic_square\n\nassert f(g()) == True\n",
        "idx_generation": 285,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if all elements in the list are divisible by 3.\"\"\"\n    return all([num % 3 == 0 for num in arr])\n\ndef g():\n    return [3, 6, 9, 12, 15]\n\nassert f(g()) == True\n",
        "idx_generation": 288,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of numbers, return the sum of all the odd numbers.\n    \"\"\"\n    total = 0\n    for num in nums:\n        if num % 2 != 0:\n            total += num\n    return total\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == 9\n",
        "idx_generation": 425,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(arr: List[int], k: int = 3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the given array, such that the sum of its elements is equal to k.\"\"\"\n    for i in range(len(arr) - k + 1):\n        subarr = arr[i:i+k]\n        if sum(subarr) == k:\n            return True\n    return False\n\ndef g(k: int = 3):\n    return [1] * (k + 1)\n\nassert f(g()) == True\n",
        "idx_generation": 49,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: int, a=5, b=100) -> bool:\n    \"\"\"Check if a number is divisible by both a and b\"\"\"\n    return x % a == 0 and x % b == 0\ndef g(a = 5, b = 100):\n    return a * b\nassert f(g()) == True\n",
        "idx_generation": 16,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose sum is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return nums, target\n\nassert f(*g()) == True\n",
        "idx_generation": 195,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, return the sum of all the elements in the matrix.\n    \"\"\"\n    total_sum = 0\n    \n    for row in matrix:\n        for num in row:\n            total_sum += num\n        \n    return total_sum\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 45\n",
        "idx_generation": 346,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a given string is a pangram.\n    \"\"\"\n    alphabet = set('abcdefghijklmnopqrstuvwxyz')\n    return alphabet.issubset(set(s.lower()))\n\ndef g():\n    \"\"\"\n    This solution checks if the given string contains all the letters of the alphabet.\n    \"\"\"\n    return \"The quick brown fox jumps over the lazy dog\"\n\nassert f(g()) == True\n\n",
        "idx_generation": 335,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a diagonal matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a diagonal matrix of the given size with diagonal elements as 1\n    \"\"\"\n    return [[1 if i == j else 0 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n\n",
        "idx_generation": 291,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int = 3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the given array, such that the sum of its elements is greater than or equal to k.\"\"\"\n    for i in range(len(arr) - k + 1):\n        subarr = arr[i:i+k]\n        subarr_sum = sum(subarr)\n        if subarr_sum >= k:\n            return True\n    return False\n\ndef g(k: int = 3):\n    return [1] * k\n\nassert f(g()) == True\n",
        "idx_generation": 119,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    target_sum = sum(arr[0])\n    # Check rows\n    for row in arr:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for col in range(len(arr[0])):\n        if sum(row[col] for row in arr) != target_sum:\n            return False\n    # Check diagonals\n    if sum(arr[i][i] for i in range(len(arr))) != target_sum:\n        return False\n    if sum(arr[i][len(arr)-i-1] for i in range(len(arr))) != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 159,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if it is a Latin square.\n\n    Sample Input:\n    [[1, 2, 3],\n     [3, 1, 2],\n     [2, 3, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    rows = [set() for _ in range(n)]\n    cols = [set() for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] in rows[i] or matrix[i][j] in cols[j]:\n                return False\n            rows[i].add(matrix[i][j])\n            cols[j].add(matrix[i][j])\n    return True\n\ndef g() -> List[List[int]]:\n    return [[1, 2, 3], [3, 1, 2], [2, 3, 1]]\n\nassert f(g()) == True\n",
        "idx_generation": 133,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that sum up to the target value.\n    \"\"\"\n    nums = set()\n\n    for num in arr:\n        if target - num in nums:\n            return True\n        nums.add(num)\n\n    return False\n\ndef g(arr: List[int]):\n    \"\"\"\n    This solution returns the input list in reverse order.\n    \"\"\"\n    return arr[::-1]\n\nassert f(g([1, 2, 3, 4, 5]), 9)\n",
        "idx_generation": 325,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an identity matrix\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                if matrix[i][j] != 1:\n                    return False\n            else:\n                if matrix[i][j] != 0:\n                    return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate an identity matrix of the given size\n    \"\"\"\n    return [[1 if i == j else 0 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n",
        "idx_generation": 18,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target integer, find two numbers from the list that add up to the target.\n\n    Example:\n    nums = [2, 7, 11, 15]\n    target = 9\n    Output: [2, 7]\n    \"\"\"\n    complements = {}\n    for num in nums:\n        complement = target - num\n        if complement in complements:\n            return [complement, num]\n        complements[num] = True\n    return []\n\ndef g(nums: List[int] = [2, 7, 11, 15], target: int = 9):\n    return nums, target\n\nassert f(*g()) == [2, 7]\n",
        "idx_generation": 457,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(corners: List[List[int]], m=89, n=554, a=6, target=1397) -> bool:\n    \"\"\"Find a minimal list of corner locations for a\u00d7a tiles that covers [0, m] \u00d7 [0, n] and does not double-cover\n    squares.\n\n    Sample Input:\n    m = 10\n    n = 9\n    a = 5\n    target = 4\n\n    Sample Output:\n    [[0, 0], [0, 5], [5, 0], [5, 5]]\n    \"\"\"\n    covered = {(i + x, j + y) for (i, j) in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, 'Double coverage'\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})\ndef g(m = 89, n = 554, a = 6, target = 1397):\n    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]\nassert f(g()) == True\n",
        "idx_generation": 49,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'jackfruit', 'kiwi']) -> bool:\n    \"\"\"Check if a given string is a substring of any word in a list.\"\"\"\n    return any(s in word for word in words)\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'jackfruit', 'kiwi']):\n    return sorted(words)[0]\nassert f(g()) == True\n",
        "idx_generation": 407,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(inds: List[int], vecs=[169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]) -> bool:\n    \"\"\"\n    Parity learning: Given binary vectors in a subspace, find the secret set S of indices such that:\n    $\\\\sum_{i \\\\in S} x_i = 1 (mod 2)$\n    \"\"\"\n    return all((sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs))\ndef g(vecs = [169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]\nassert f(g()) == True\n",
        "idx_generation": 118,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Given a positive integer n, check if it is a prime number.\n    A prime number is a positive integer greater than 1 that has no divisors other than 1 and itself.\n\n    Example:\n    n = 7\n    The only divisors of 7 are 1 and 7.\n\n    Therefore, f(n) returns True.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(n: int = 7):\n    return n\n\nassert f(g()) == True\n",
        "idx_generation": 411,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a magic square\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    \n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for col in range(cols):\n        if sum(matrix[i][col] for i in range(rows)) != target_sum:\n            return False\n    \n    # Check diagonals\n    if sum(matrix[i][i] for i in range(rows)) != target_sum:\n        return False\n    \n    if sum(matrix[i][rows-i-1] for i in range(rows)) != target_sum:\n        return False\n    \n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a magic square of the given size\n    \"\"\"\n    square = [[0] * size for _ in range(size)]\n    row = 0\n    col = size // 2\n    num = 1\n    \n    while num <= size ** 2:\n        square[row][col] = num\n        num += 1\n        new_row = (row - 1) % size\n        new_col = (col + 1) % size\n        if square[new_row][new_col] != 0:\n            row += 1\n        else:\n            row = new_row\n            col = new_col\n    \n    return square\n\nassert f(g()) == True\n",
        "idx_generation": 364,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List, Tuple\n\ndef f(squares: List[Tuple[int, int]], m=8, n=8) -> bool:\n    \"\"\"Position max(m, n) queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = max(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\n  \ndef g(m=8, n=8):\n    # brute force\n    k = max(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [(i, j) for i, j in enumerate(p)]\n\nassert f(g()) == True\n",
        "idx_generation": 121,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, words: List[str]) -> bool:\n    \"\"\"Check if a given string is a combination of the words in the list.\"\"\"\n    word_set = set(words)\n    if s == '':\n        return True\n    for i in range(1, len(s) + 1):\n        if s[:i] in word_set and f(s[i:], words):\n            return True\n    return False\ndef g(words=['apple', 'banana', 'cherry']):\n    return ''.join(words)\nassert f(g(), g().split())\n",
        "idx_generation": 138,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: List[int], n=3, s=10) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 3, s = 10):\n    x = [s // n] * n\n    remainder = s % n\n    for i in range(remainder):\n        x[i] += 1\n    return x\nassert f(g()) == True\n",
        "idx_generation": 7,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\ndef f(squares: List[List[int]], m=10, n=6) -> bool:\n    \"\"\"Position min(m, n) <= 10 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 10, n = 6):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g()) == True\n",
        "idx_generation": 84,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given an array of integers nums and a target integer, return the indices of the two numbers such that they add up to the target.\n\n    Example:\n    nums = [2, 7, 11, 15]\n    target = 9\n\n    Output: [0, 1]\n\n    Explanation: The sum of nums[0] = 2 and nums[1] = 7 is equal to the target 9, so the indices [0, 1] are returned.\n    \"\"\"\n    nums_dict = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in nums_dict:\n            return [nums_dict[complement], i]\n        nums_dict[num] = i\n    return []\n\ndef g(nums=[2, 7, 11, 15], target=9):\n    return nums, target\n\nassert f(*g()) == [0, 1]\n",
        "idx_generation": 405,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of a subarray.\n\n    Sample Input:\n    arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\n    Sample Output:\n    6\n\n    Explanation: The subarray with the maximum sum is [4, -1, 2, 1], which gives a sum of 6.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in arr:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n\ndef g():\n    return [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\nassert f(g()) == 6\n\n",
        "idx_generation": 491,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a diagonal pattern.\n    A diagonal pattern is a grid where the elements form a pattern that starts with a decreasing sequence along the main diagonal, and the next diagonal starts with a smaller value than the previous diagonal.\n\n    Sample Input:\n    arr = [[9, 8, 7], [6, 5, 4], [3, 2, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(1, n):\n        if arr[i][i] >= arr[i-1][i-1]:\n            return False\n        for j in range(i, m-1):\n            if arr[j+1][j+1] >= arr[j][j]:\n                return False\n    return True\n\ndef g(arr: List[List[int]] = [[9, 8, 7], [6, 5, 4], [3, 2, 1]]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 412,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if all the numbers in a list are even.\"\"\"\n    return all([num % 2 == 0 for num in nums])\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 265,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]\n\nassert f(g()) == True\n",
        "idx_generation": 373,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> int:\n    \"\"\"Find the maximum sum of a contiguous subarray in the given list that is less than or equal to the target value.\"\"\"\n    max_sum = float('-inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            subarray_sum = sum(nums[i:j])\n            if subarray_sum <= target and subarray_sum > max_sum:\n                max_sum = subarray_sum\n    return max_sum\n\ndef g(target=100):\n    nums = [10, 20, 30, 40, 50]\n    return nums\n\nassert f(g()) == 100\n",
        "idx_generation": 105,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Find the difference between the maximum and minimum numbers in the list and check if it is equal to the target\"\"\"\n    return max(numbers) - min(numbers) == target\n\ndef g(numbers: List[int] = [2, 5, 3, 8, 10, 6], target: int = 8):\n    return (numbers, target)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 103,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subsequence of the list whose sum is equal to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(nums=[2, 4, 6, 8], target=10):\n    return nums, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 292,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist three numbers in the list whose sum is equal to the target number.\n\n    Sample Input:\n    numbers = [2, 4, 6, 8, 10, 12]\n    target = 20\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            complement = target - numbers[i] - numbers[j]\n            if complement in num_set:\n                return True\n            num_set.add(numbers[i])\n            num_set.add(numbers[j])\n    return False\n\ndef g(numbers: List[int] = [2, 4, 6, 8, 10, 12], target: int = 20):\n    return (numbers, target)\n\nassert f(*g()) == True\n",
        "idx_generation": 447,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size.\n    \"\"\"\n    return [[0 if j > i else 1 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n\n",
        "idx_generation": 466,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a matrix is symmetric.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return (matrix,)\n\nassert f(g()) == True\n",
        "idx_generation": 113,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target number, return True if the target number exists in the matrix,\n    otherwise return False.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    target = 10\n\n    Output:\n    False\n\n    Explanation: The target number 10 does not exist in the matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    row = 0\n    col = cols - 1\n\n    while row < rows and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=10):\n    return matrix, target\n\nassert f(*g()) == False\n\n",
        "idx_generation": 325,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subarray with a sum equal to k.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    k = 7\n    output: True\n    \"\"\"\n    prefix_sum = 0\n    seen = set()\n    seen.add(0)\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum - k in seen:\n            return True\n        seen.add(prefix_sum)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 7\n\nassert f(*g()) == True\n\n",
        "idx_generation": 471,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int = 3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the given array, such that the sum of its elements is divisible by k.\"\"\"\n    for i in range(len(arr) - k + 1):\n        subarr = arr[i:i+k]\n        if sum(subarr) % k == 0:\n            return True\n    return False\n\ndef g(k: int = 3):\n    return [k] * k\n\nassert f(g()) == True\n",
        "idx_generation": 115,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sums of the rows, columns, and diagonals are all equal.\n\n    Sample Input:\n    grid = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    target_sum = sum(arr[0])\n\n    # Check rows\n    for row in arr:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        if sum(arr[i][j] for i in range(n)) != target_sum:\n            return False\n\n    # Check diagonals\n    if sum(arr[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(arr[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n\n    return True\n\ndef g(arr: List[List[int]]):\n    return arr\n\nassert f(g([[2, 7, 6], [9, 5, 1], [4, 3, 8]])) == True\n",
        "idx_generation": 137,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that subtracts to the target value.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        result = num - target\n        if result in num_set:\n            return True\n    return False\n\ndef g(nums: List[int], target: int):\n    return nums, target\n\nassert f(*g([1, 2, 3, 4, 5], 3)) == True\n\n",
        "idx_generation": 287,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(tot: int, nums=[32, 24, 19, 88, 6, 33, 13], thresh=33) -> bool:\n    \"\"\"Add up 1 or 2 for numbers in a list depending on whether they exceed a threshold\"\"\"\n    return tot == sum((1 if i < thresh else 2 for i in nums))\ndef g(nums = [32, 24, 19, 88, 6, 33, 13], thresh = 33):\n    return sum(1 if i < thresh else 2 for i in nums)\n\ndef f2(tot: int, nums=[32, 24, 19, 88, 6, 33, 13], thresh=33) -> bool:\n    \"\"\"Find the total sum of numbers in a list that are not divisible by a given threshold.\"\"\"\n    return tot == sum((i for i in nums if i % thresh != 0))\ndef g2(nums = [32, 24, 19, 88, 6, 33, 13], thresh = 33):\n    return sum(i for i in nums if i % thresh != 0)\n\nassert f(g()) == True\n",
        "idx_generation": 25,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(dictionary: Dict[str, int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of values in the dictionary whose sum equals the target value.\n    \"\"\"\n    values = list(dictionary.values())\n    for i in range(len(values)):\n        for j in range(i+1, len(values)):\n            if values[i] + values[j] == target:\n                return True\n    return False\n\ndef g(dictionary={\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}, target=7):\n    return (dictionary, target)\n\nassert f(*g()) == True\n",
        "idx_generation": 302,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the array that sum up to the target\"\"\"\n    seen = set()\n    for num in arr:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5], target=9):\n    return arr, target\n\nassert f(*g()) == True\n",
        "idx_generation": 314,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: int, a=10, b=74723522) -> bool:\n    \"\"\"Satisfy a simple if statement with an or clause\"\"\"\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b\ndef g(a = 10, b = 74723522):\n    if a <= 50 and b > a:\n        return b + a\n    else:\n        return b - a\nassert f(g()) == True\n",
        "idx_generation": 67,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> int:\n    \"\"\"\n    Given a list of lists of integers, find the maximum product of a subarray within each list and return the sum of the maximum subarray products.\n\n    Example:\n    nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    The maximum subarray products are [6, 120, 504].\n    The sum of the maximum subarray products is 6 + 120 + 504 = 630.\n\n    Therefore, f(nums) returns 630.\n    \"\"\"\n    result = 0\n    for sublist in nums:\n        max_product = float('-inf')\n        curr_product = 1\n        for num in sublist:\n            curr_product *= num\n            max_product = max(max_product, curr_product)\n            if curr_product < 1:\n                curr_product = 1\n        result += max_product\n    return result\n\ndef g(nums: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums\n\nassert f(g()) == 630\n",
        "idx_generation": 348,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it contains a subarray of length 3 where the sum of the first two elements is equal to the third element.\n\n    Sample Input:\n    [1, 2, 3, 4, 5, 6, 7]\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(arr) - 2):\n        if arr[i] + arr[i + 1] == arr[i + 2]:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7]\n\nassert f(g()) == True\n",
        "idx_generation": 301,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a grid where the sum of each row, each column, and both diagonals are the same.\n\n    Sample Input:\n    arr = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    target_sum = sum(arr[0])\n    for i in range(n):\n        if sum(arr[i]) != target_sum:\n            return False\n        if sum(arr[j][i] for j in range(n)) != target_sum:\n            return False\n    if sum(arr[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(arr[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]):\n    return arr\n\nassert f(g()) == True\n\n",
        "idx_generation": 292,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\n\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there is a pair of numbers in the list lst that multiply to the target.\n\n    Sample input:\n    lst = [1, 2, 3, 4, 5]\n    target = 10\n\n    Sample output:\n    True\n\n    Explanation: The pair of numbers (2, 5) multiply to 10 and they are present in the list.\n    \"\"\"\n    assert len(lst) > 1, 'Hint: The list should have at least 2 numbers.'\n    return any(i * j == target for i in lst for j in lst if i != j)\n\ndef g(lst=[1, 2, 3, 4, 5], target=10):\n    return lst, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 291,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of numbers, return the sum of all the even numbers.\n    \"\"\"\n    total = 0\n    for num in nums:\n        if num % 2 == 0:\n            total += num\n    return total\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == 6\n\n",
        "idx_generation": 450,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(word: str) -> bool:\n    \"\"\"Check if the given word is a palindrome.\"\"\"\n    return word == word[::-1]\n\ndef g():\n    return \"level\"\n\nassert f(g()) == True\n",
        "idx_generation": 69,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(res: int, m=1234578987654321, n=4) -> bool:\n    \"\"\"\n    Find the result of applying the following operation to integer m, n times: if the last digit is odd, add 1, \n    otherwise divide it by 10.\n    \"\"\"\n    for i in range(n):\n        m = m + 1 if m % 10 % 2 else m // 10\n    return res == m\ndef g(m = 1234578987654321, n = 4):\n    for i in range(n):\n        m = (m + 1 if m % 10 % 2 else m // 10)\n    return m\nassert f(g()) == True\n",
        "idx_generation": 23,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose difference is divisible by the target number.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if (num - target) % target == 0 and (num - target) // target in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 2):\n    return nums, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 215,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an identity matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != (1 if i == j else 0):\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate an identity matrix of the given size.\n    \"\"\"\n    return [[1 if i == j else 0 for j in range(size)] for i in range(size)]\n\nassert f(g())\n",
        "idx_generation": 387,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the even numbers from the original list.\n    \"\"\"\n    return [num for num in nums if num % 2 == 0]\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == [2, 4, 6, 8, 10]\n",
        "idx_generation": 407,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: List[int], n=4, s=12) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a >= 0 for a in x])\ndef g(n = 4, s = 12):\n    if n == 1:\n        return [s]\n    elif n == 2:\n        return [s - 1, 1]\n    elif n == 3:\n        return [s - 2, 1, 1]\n    else:\n        return [s/4, s/4, s/4, s/4]\nassert f(g()) == True\n",
        "idx_generation": 199,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import *\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    matrix = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    target_sum = sum(matrix[0])\n    for i in range(len(matrix)):\n        row_sum = sum(matrix[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(matrix[0])):\n        col_sum = sum(matrix[i][j] for i in range(len(matrix)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(matrix[i][i] for i in range(len(matrix)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(matrix[i][len(matrix) - i - 1] for i in range(len(matrix)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True\n\ndef g(matrix: List[List[int]] = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]):\n    return matrix\n\nassert f(g()) == True\n",
        "idx_generation": 191,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Determine if it is possible to find a pair of numbers in a matrix that add up to a target number. The pair of numbers\n    must be distinct and the order of the numbers in the pair does not matter.\n\n    Sample input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample output:\n    True\n\n    The pair of numbers (2, 4) adds up to 6, which is the target number.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for x in range(i, rows):\n                for y in range(j, cols):\n                    if matrix[i][j] + matrix[x][y] == target and (i != x or j != y):\n                        return True\n    return False\n\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, target - 2, 9]]\n\nassert f(g()) == True\n",
        "idx_generation": 194,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Calculate the product of all odd numbers in the given list of integers.\n\n    Sample Input:\n    [1, 2, 3, 4, 5, 6]\n\n    Sample Output:\n    15\n    \"\"\"\n    return 1 if len(nums) == 0 else (nums[0] if nums[0] % 2 != 0 else 1) * f(nums[1:])\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6]):\n    return nums\n\nassert f(g()) == 15\n\n",
        "idx_generation": 436,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if the given list contains a number that is a multiple of the target value.\"\"\"\n    return any(num % target == 0 for num in nums)\n\ndef g(target=10):\n    nums = [2, 4, 6, 8, 10]\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 24,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, remove all even numbers from the list and return the updated list.\n\n    Example:\n    f([2, 5, 8, 9, 4]) => [5, 9]\n    \"\"\"\n    return [num for num in nums if num % 2 != 0]\n\ndef g(nums: List[int] = [2, 5, 8, 9, 4]):\n    return nums\n\nassert f(g()) == [5, 9]\n",
        "idx_generation": 458,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is symmetric along the secondary diagonal\n    \"\"\"\n    n = len(matrix)\n    return all((matrix[i][j] == matrix[n-j-1][n-i-1]) for i in range(n) for j in range(n))\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    \"\"\"\n    This solution checks if the element at position (i, j) is equal to the element at position (n-j-1, n-i-1) for all elements in the matrix\n    \"\"\"\n    return matrix\n\nassert f(g()) == False\n",
        "idx_generation": 87,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n\n    Sample Input:\n    \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s: str = \"racecar\"):\n    return s\n\nassert f(g())\n",
        "idx_generation": 409,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Determine if it is possible to find a pair of numbers in a matrix that XORs to a target number. The pair of numbers\n    must be distinct and the order of the numbers in the pair does not matter.\n\n    Sample input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample output:\n    True\n\n    The pair of numbers (2, 6) XORs to 4, which is the target number.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for x in range(i, rows):\n                for y in range(j, cols):\n                    if matrix[i][j] ^ matrix[x][y] == target and (i != x or j != y):\n                        return True\n    return False\n\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, target ^ 2, 9]]\n\nassert f(g()) == True\n\n",
        "idx_generation": 371,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> float:\n    \"\"\"\n    Calculate the average value of a given list of integers.\n    \"\"\"\n    return sum(arr) / len(arr)\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g()) == 3.0\n\n",
        "idx_generation": 414,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the sum of all elements in the grid is divisible by 5.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    total_sum = sum(sum(row) for row in arr)\n    return total_sum % 5 == 0\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == True\n\n",
        "idx_generation": 366,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(path: List[int], weights=[{1: 100}, {0: 200, 2: 300}, {2: 400, 0: 500, 3: 600}, {}], bound=100) -> bool:\n    \"\"\"\n    Find a path from node 0 to node 1, of length at most bound, in the given digraph.\n    weights[a][b] is weight on edge [a,b] for (int) nodes a, b\n    \"\"\"\n    return path[0] == 0 and path[-1] == 1 and (sum((weights[a][b] for (a, b) in zip(path, path[1:]))) <= bound)\ndef g(weights = [{1: 100}, {0: 200, 2: 300}, {2: 400, 0: 500, 3: 600}, {}], bound = 100):\n    # Dijkstra's algorithm (bound is ignored)\n    u, v = 0, 1  # go from 0 to 1\n    import heapq\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in weights[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + weights[i][j], j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]\nassert f(g()) == True\n",
        "idx_generation": 50,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List, Tuple\n\ndef f(squares: List[Tuple[int, int]], m=8, n=8) -> bool:\n    \"\"\"Position max(m, n) queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = max(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\n  \ndef g(m=8, n=8):\n    # brute force\n    k = max(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [(i, j) for i, j in enumerate(p)]\n\nassert f(g()) == True\n",
        "idx_generation": 162,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(words: List[str], target_length=10) -> bool:\n    \"\"\"\n    Check if there is a combination of words that has a total length equal to the target length.\n    \"\"\"\n    def combination_length(words, target_length):\n        if target_length == 0:\n            return True\n        if not words or target_length < 0:\n            return False\n        return combination_length(words[1:], target_length - len(words[0])) or combination_length(words[1:], target_length)\n    return combination_length(words, target_length)\n\ndef g(target_length=10):\n    return [\"apple\", \"banana\", \"grape\", \"kiwi\", \"orange\"]\n\nassert f(g()) == True\n",
        "idx_generation": 140,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of five people having the same birthday in a group of n is near 1/5.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 1/5) ** 2 <= year_len\ndef g(year_len = 365):\n    n = 1\n    distinct_prob = 1.0\n    best = (1/5, 1)  # (difference between probability and 1/5, n)\n    while distinct_prob > 1/5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(1/5 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True\n",
        "idx_generation": 33,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Given two positive integers n and k, find if it is possible to divide n into k positive integers such that\n    the product of these integers is equal to n.\n\n    Sample Input:\n    n = 36\n    k = 4\n\n    Sample Output:\n    True\n    \"\"\"\n    if k == 1:\n        return True\n    if k > n:\n        return False\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0 and f(n // i, k - 1):\n            return True\n    return False\n\ndef g(n: int = 36, k: int = 4):\n    return (n, k)\n\nassert f(*g())\n",
        "idx_generation": 97,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is sorted in non-decreasing order.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\n\ndef g():\n    \"\"\"\n    Generate a sorted list of integers in non-decreasing order.\n    \"\"\"\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n",
        "idx_generation": 405,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a 2D grid of integers, rotate the grid by 90 degrees counter-clockwise.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    [[3, 6, 9], [2, 5, 8], [1, 4, 7]]\n    \"\"\"\n    n = len(arr)\n    rotated_arr = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            rotated_arr[n - j - 1][i] = arr[i][j]\n    return rotated_arr\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == [[3, 6, 9], [2, 5, 8], [1, 4, 7]]\n",
        "idx_generation": 445,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Find if there exists a pair of numbers in the list that add up to the target value.\n    If no target is provided, it will check if there exists a pair of numbers that add up to zero.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g()) == False\n\n\n",
        "idx_generation": 268,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target number, find the minimum number of coins needed to make up the target.\n    You have an infinite number of each coin denomination in the list.\n\n    Sample Input:\n    nums = [1, 2, 5]\n    target = 11\n\n    Sample Output:\n    3\n\n    Explanation:\n    The minimum number of coins needed to make up 11 is 3 (1 + 5 + 5 = 11).\n    \"\"\"\n    dp = [float('inf')] * (target + 1)\n    dp[0] = 0\n    for i in range(1, target + 1):\n        for num in nums:\n            if num <= i:\n                dp[i] = min(dp[i], dp[i - num] + 1)\n    return dp[target]\n\ndef g(nums: List[int] = [1, 2, 5], target: int = 11):\n    return (nums, target)\n\nassert f(*g()) == 3\n",
        "idx_generation": 426,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size\n    \"\"\"\n    return [[0 if j > i else 1 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n",
        "idx_generation": 122,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nimport math\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a number in the list that, when subtracted from the target, gives a perfect square.\n    \"\"\"\n    for num in numbers:\n        if math.isqrt(target - num) ** 2 == target - num:\n            return True\n    return False\n\ndef g(numbers: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 2):\n    return (numbers, target)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 109,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the length of the longest increasing subarray.\n\n    Example:\n    nums = [1, 2, 3, 2, 5, 6, 7, 8, 9]\n\n    Output:\n    6\n\n    Explanation: The longest increasing subarray is [2, 5, 6, 7, 8, 9], which has a length of 6.\n    \"\"\"\n    max_length = 0\n    curr_length = 0\n\n    for i in range(len(nums) - 1):\n        if nums[i] < nums[i + 1]:\n            curr_length += 1\n            if curr_length > max_length:\n                max_length = curr_length\n        else:\n            curr_length = 0\n\n    return max_length + 1\n\ndef g(nums: List[int] = [1, 2, 3, 2, 5, 6, 7, 8, 9]):\n    return (nums,)\n\nassert f(*g()) == 6\n\n",
        "idx_generation": 413,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is.\n    \"\"\"\n    return nums\n\nassert f(g([3, 4, -7, 2, 1, 3, 1]), 4)\n\n",
        "idx_generation": 451,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is an upper triangular matrix.\n    An upper triangular matrix has all elements below the main diagonal equal to zero.\n\n    Sample Input:\n    arr = [[1, 2, 3], [0, 4, 5], [0, 0, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i][j] != 0:\n                return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [0, 4, 5], [0, 0, 6]]):\n    return arr\n\nassert f(g()) == True\n\n",
        "idx_generation": 483,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is symmetric along the main diagonal.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(i+1, len(matrix)):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g(n=3):\n    return [[i + j for i in range(n)] for j in range(n)]\nassert f(g()) == True\n",
        "idx_generation": 138,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nimport numpy as np\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a Toeplitz matrix.\"\"\"\n    n = len(matrix)\n    \n    for i in range(n-1):\n        for j in range(n-1):\n            if matrix[i][j] != matrix[i+1][j+1]:\n                return False\n    \n    return True\n\ndef g(n=3):\n    \"\"\"Generate a Toeplitz matrix of size n x n.\"\"\"\n    matrix = np.random.randint(0, 10, size=(n, n)).tolist()\n    \n    for i in range(n-1):\n        for j in range(n-1):\n            matrix[i+1][j+1] = matrix[i][j]\n    \n    return matrix\n\nassert f(g()) == True\n\n",
        "idx_generation": 336,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: List[int], n=5, s=19) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 5, s = 19):\n    x = [1] * n\n    x[-1] = s - n + 1\n    return x\nassert f(g()) == True\n",
        "idx_generation": 148,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 165,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of elements in the given list whose sum is equal to the target number.\n\n    Sample input:\n    [1, 2, 3, 4, 5]\n    7\n\n    Sample output:\n    True\n    \"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return (nums, target)\n\nassert f(*g())\n",
        "idx_generation": 289,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find a pair of numbers from a list that, when multiplied, sums up to a target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target - nums[i] - nums[j]:\n                return True\n    return False\n\ndef g(target=20):\n    return [2, 5, 6, 10, 3, 4]\n\nassert f(g()) == True\n",
        "idx_generation": 32,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find two numbers in the list such that their sum is equal to the target number.\n    Return True if such a pair exists, otherwise return False.\n\n    Sample Input:\n    nums = [2, 5, 7, 9, 12]\n    target = 17\n\n    Sample Output:\n    True\n    \"\"\"\n    complements = set()\n    for num in nums:\n        if num in complements:\n            return True\n        complements.add(target - num)\n    return False\n\ndef g(nums: List[int] = [2, 5, 7, 9, 12], target: int = 17):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 421,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(li: List[int], n=9) -> bool:\n    \"\"\"\n    Given n, find n integers such that li[i] * li[i+1] + 1 == li[i+2], for i = 0, 1, ..., n-1\n    where indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\n    that are multiples of 3 (as proven in the IMO problem).\n\n    Sample input:\n    9\n\n    Sample output:\n    [_, _, _, _, _, _, _, _, _]\n\n    (Sample output hidden because showing sample output would give away too much information.)\n    \"\"\"\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n = 9):\n    return [-1, -1, 2] * (n // 3)\nassert f(g()) == True\n",
        "idx_generation": 11,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum difference between any two elements in the list.\n\n    Sample Input:\n    arr = [5, 3, 8, 2, 1, 9, 4]\n\n    Sample Output:\n    8\n    \"\"\"\n    min_val = float('inf')\n    max_diff = 0\n\n    for num in arr:\n        min_val = min(min_val, num)\n        max_diff = max(max_diff, num - min_val)\n\n    return max_diff\n\ndef g(arr: List[int] = [5, 3, 8, 2, 1, 9, 4]):\n    return arr\n\nassert f(g()) == 8\n",
        "idx_generation": 457,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there is a subset of numbers that can be divided into two equal-sum subarrays.\n\n    Sample Input:\n    `nums = [1, 5, 11, 5]`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    total_sum = sum(nums)\n    if total_sum % 2 != 0:\n        return False\n    target_sum = total_sum // 2\n    n = len(nums)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    return dp[n][target_sum]\n\ndef g():\n    return [1, 5, 11, 5]\n\nassert f(g()) == True\n",
        "idx_generation": 78,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there is a contiguous subarray in the given list whose sum is equal to the target number.\n    \"\"\"\n    prefix_sum = 0\n    sum_set = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target or prefix_sum - target in sum_set:\n            return True\n        sum_set.add(prefix_sum)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g()) == True\n",
        "idx_generation": 380,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the minimum sum of any contiguous subarray.\n\n    Sample Input:\n    arr = [1, -2, 3, -4, 5, -6]\n\n    Sample Output:\n    -6\n    \"\"\"\n    current_sum = min_sum = arr[0]\n    for num in arr[1:]:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum\n\ndef g(arr: List[int] = [1, -2, 3, -4, 5, -6]):\n    return arr\n\nassert f(g()) == -6\n",
        "idx_generation": 316,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a magic square\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    \n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for col in range(cols):\n        if sum(matrix[i][col] for i in range(rows)) != target_sum:\n            return False\n    \n    # Check diagonals\n    if sum(matrix[i][i] for i in range(rows)) != target_sum:\n        return False\n    \n    if sum(matrix[i][rows-i-1] for i in range(rows)) != target_sum:\n        return False\n    \n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a magic square of the given size\n    \"\"\"\n    square = [[0] * size for _ in range(size)]\n    row = 0\n    col = size // 2\n    num = 1\n    \n    while num <= size ** 2:\n        square[row][col] = num\n        num += 1\n        new_row = (row - 1) % size\n        new_col = (col + 1) % size\n        if square[new_row][new_col] != 0:\n            row += 1\n        else:\n            row = new_row\n            col = new_col\n    \n    return square\n\nassert f(g()) == True\n",
        "idx_generation": 331,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix, return the sum of all the elements.\n    \"\"\"\n    return sum(sum(row) for row in matrix)\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 45\n\n",
        "idx_generation": 338,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(num: int, digits=[1, 3, 5, 7, 9]) -> bool:\n    \"\"\"Check if the given number contains only odd digits\"\"\"\n    return all(int(d) % 2 != 0 for d in str(num))\n\ndef g():\n    return 13579\n\nassert f(g()) == True\n",
        "idx_generation": 75,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return s == s[::-1]\ndef g(s = 'racecar'):\n    return s\nassert f(g()) == True\n",
        "idx_generation": 53,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if all elements in the list are divisible by 2.\n    \"\"\"\n    return all(x % 2 == 0 for x in arr)\n\ndef g(arr: List[int] = [2, 4, 6, 8, 10]):\n    return arr\n\nassert f(g()) == True\n\n\n",
        "idx_generation": 264,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Tuple\n\ndef f(t1: Tuple[str, int], t2: Tuple[str, int]) -> bool:\n    \"\"\"\n    Given two tuples, each containing a string and an integer, check if the sum of the integers\n    in each tuple is the same.\n\n    Sample Input:\n    t1 = ('apple', 5)\n    t2 = ('banana', 3)\n\n    Sample Output:\n    False\n    \"\"\"\n    sum1 = t1[1]\n    sum2 = t2[1]\n    return sum1 == sum2\n\ndef g(t1: Tuple[str, int] = ('apple', 5), t2: Tuple[str, int] = ('banana', 3)):\n    return t1, t2\n\nassert f(*g()) == False\n\n",
        "idx_generation": 397,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return the sum of each row in the matrix.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    [6, 15, 24]\n    \"\"\"\n    row_sum = []\n    for row in matrix:\n        row_sum.append(sum(row))\n    return row_sum\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [6, 15, 24]\n",
        "idx_generation": 461,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"\n    Given an integer n and a list of integers nums, determine if there exists a subset of nums that sums up to n.\n\n    Sample Input:\n    n = 9\n    nums = [3, 34, 4, 12, 5, 2]\n\n    Sample Output:\n    True\n    \"\"\"\n    dp = [[False] * (n + 1) for _ in range(len(nums) + 1)]\n    for i in range(len(nums) + 1):\n        dp[i][0] = True\n\n    for i in range(1, len(nums) + 1):\n        for j in range(1, n + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[len(nums)][n]\n\ndef g(n: int = 9, nums: List[int] = [3, 34, 4, 12, 5, 2]):\n    return (n, nums)\n\nassert f(*g())\n",
        "idx_generation": 222,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target: int = 0) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target value, return True if there exists a submatrix\n    whose sum is equal to the target value, False otherwise.\n\n    Sample Input:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    target = 12\n\n    Sample Output:\n    True\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n\n    for i in range(m):\n        for j in range(n):\n            for k in range(i, m):\n                for l in range(j, n):\n                    submatrix_sum = 0\n                    for x in range(i, k + 1):\n                        for y in range(j, l + 1):\n                            submatrix_sum += matrix[x][y]\n                    if submatrix_sum == target:\n                        return True\n\n    return False\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target: int = 12):\n    return matrix, target\n\nassert f(*g()) == True\n",
        "idx_generation": 235,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a perfect square.\n    A perfect square is a grid where the number of rows is equal to the number of columns.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    num_rows = len(arr)\n    num_cols = len(arr[0])\n    return num_rows == num_cols\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 215,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers contains any duplicates.\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g(nums: List[int]):\n    return nums\n\nassert f(g([1, 2, 3, 4, 5, 5])) == True\n",
        "idx_generation": 439,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there is a subarray in the list that adds up to the target value\"\"\"\n    prefix_sum = 0\n    sum_set = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target or prefix_sum - target in sum_set:\n            return True\n        sum_set.add(prefix_sum)\n    return False\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\nassert f(*g()) == True\n",
        "idx_generation": 44,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], n: int) -> bool:\n    \"\"\"\n    Check if the sum of the first n numbers in the list is equal to the sum of the last n numbers.\n    \"\"\"\n    return sum(nums[:n]) == sum(nums[-n:])\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: int = 3):\n    return (nums, n)\n\nassert f(*g()) == False\n",
        "idx_generation": 458,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(grid: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sums of the rows, columns, and diagonals are all equal and the maximum value in the grid is even.\n\n    Sample Input:\n    grid = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    False\n    \"\"\"\n    n = len(grid)\n    target_sum = sum(grid[0])\n\n    # Check rows\n    for row in grid:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        if sum(grid[i][j] for i in range(n)) != target_sum:\n            return False\n\n    # Check diagonals\n    if sum(grid[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(grid[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n\n    return max(max(row) for row in grid) % 2 == 0\n\ndef g(grid: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return grid\n\nassert f(g()) == False\n",
        "idx_generation": 110,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list is a palindrome.\n\n    Sample Input:\n    nums = [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n\n    Explanation: The list is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums: List[int] = [1, 2, 3, 2, 1]):\n    return nums\n\nassert f(g()) == True\n\n",
        "idx_generation": 409,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Determine if it is possible to find a pair of numbers in a matrix that XORs to a target number. The pair of numbers\n    must be distinct and the order of the numbers in the pair does not matter.\n\n    Sample input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample output:\n    True\n\n    The pair of numbers (2, 6) XORs to 4, which is the target number.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for x in range(i, rows):\n                for y in range(j, cols):\n                    if matrix[i][j] ^ matrix[x][y] == target and (i != x or j != y):\n                        return True\n    return False\n\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, target ^ 2, 9]]\n\nassert f(g()) == True\n\n",
        "idx_generation": 389,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the target value exists in the given list and it is the only odd number.\n    Return True if the target is the only odd number, otherwise return False.\n    \"\"\"\n    odd_count = 0\n    for num in arr:\n        if num == target:\n            odd_count += 1\n            if num % 2 != 1:\n                return False\n    return odd_count == 1\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 5):\n    return arr, target\n\nassert f(*g())\n",
        "idx_generation": 415,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n\n",
        "idx_generation": 376,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(equations: List[str], values: List[float], queries: List[List[str]]) -> List[float]:\n    \"\"\"Given a list of equations and their corresponding values, evaluate the queries and return the results.\"\"\"\n    graph = {}\n    for (dividend, divisor), value in zip(equations, values):\n        if dividend in graph:\n            graph[dividend][divisor] = value\n        else:\n            graph[dividend] = {divisor: value}\n        if divisor in graph:\n            graph[divisor][dividend] = 1 / value\n        else:\n            graph[divisor] = {dividend: 1 / value}\n\n    def dfs(start, end, visited):\n        if start not in graph or end not in graph:\n            return -1.0\n        if start == end:\n            return 1.0\n        visited.add(start)\n        for neighbor, value in graph[start].items():\n            if neighbor not in visited:\n                result = dfs(neighbor, end, visited)\n                if result != -1.0:\n                    return value * result\n        return -1.0\n\n    results = []\n    for query in queries:\n        dividend, divisor = query\n        results.append(dfs(dividend, divisor, set()))\n    return results\n\ndef g():\n    equations = [[\"a\", \"b\"], [\"b\", \"c\"]]\n    values = [2.0, 3.0]\n    queries = [[\"a\", \"c\"], [\"b\", \"a\"], [\"a\", \"e\"], [\"a\", \"a\"], [\"x\", \"x\"]]\n    return (equations, values, queries)\n\nassert f(*g()) == [6.0, 0.5, -1.0, 1.0, -1.0]\n",
        "idx_generation": 65,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(tri: List[int], edges=[[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]) -> bool:\n    \"\"\"Check if a given directed graph contains a cycle.\"\"\"\n    graph = {}\n    for edge in edges:\n        if edge[0] not in graph:\n            graph[edge[0]] = []\n        graph[edge[0]].append(edge[1])\n    visited = set()\n    def dfs(node, visited, stack):\n        visited.add(node)\n        stack.add(node)\n        for neighbor in graph.get(node, []):\n            if neighbor not in visited:\n                if dfs(neighbor, visited, stack):\n                    return True\n            elif neighbor in stack:\n                return True\n        stack.remove(node)\n        return False\n    for node in graph:\n        if dfs(node, visited, set()):\n            return True\n    return False\ndef g(edges = [[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]):\n    return edges\nassert f(g()) == True\n",
        "idx_generation": 113,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a subset of numbers that sums up to the target value\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\n\ndef g(target=10):\n    return [1, 2, 3, 4, 7, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 23,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: List[int], n=3, s=10) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a >= 0 for a in x])\ndef g(n = 3, s = 10):\n    if n == 1:\n        return [s]\n    elif n == 2:\n        return [s - 1, 1]\n    else:\n        return [s/3, s/3, s/3]\nassert f(g()) == True\n",
        "idx_generation": 199,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any combination sums up to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False\n\ndef g(k=3, target_sum=6):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 2, 3, 4, 5, target_sum - 10]\n\nassert f(g(), k=3, target_sum=6) == True\n\n",
        "idx_generation": 470,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: int, target=100) -> bool:\n    \"\"\"Find two numbers that sum up to the target number and whose product is equal to x\"\"\"\n    for i in range(1, int(x/2)+1):\n        if x % i == 0:\n            if (i + (x/i)) == target:\n                return True\n    return False\ndef g(x = 2500, target = 100):\n    return x\nassert f(g()) == True\n",
        "idx_generation": 41,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(inds: List[int], vecs=[169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]) -> bool:\n    \"\"\"\n    Parity learning: Given binary vectors in a subspace, find the secret set S of indices such that:\n    $\\\\sum_{i \\\\in S} x_i = 1 (mod 2)$\n    \"\"\"\n    return any((sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs))\ndef g(vecs = [169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]\nassert f(g()) == True\n",
        "idx_generation": 118,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the maximum number in the list.\n    \"\"\"\n    return max(nums)\n\ndef g():\n    nums = [10, 5, 7, 3, 9, 2]\n    return nums\n\nassert f(g()) == 10\n",
        "idx_generation": 405,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix, rotate it 90 degrees counterclockwise.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    The matrix after rotating 90 degrees counterclockwise is:\n    [[3, 6, 9], [2, 5, 8], [1, 4, 7]]\n    Therefore, f(matrix) returns [[3, 6, 9], [2, 5, 8], [1, 4, 7]].\n    \"\"\"\n    n = len(matrix)\n    rotated_matrix = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        for j in range(n):\n            rotated_matrix[i][j] = matrix[j][n - i - 1]\n\n    return rotated_matrix\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [[3, 6, 9], [2, 5, 8], [1, 4, 7]]\n",
        "idx_generation": 464,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"Determine if the given list of lists contains any duplicates.\"\"\"\n    flat_list = [x for sublist in arr for x in sublist]\n    return len(flat_list) == len(set(flat_list))\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == True\n",
        "idx_generation": 316,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    \"\"\"\n    return li == li[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 438,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if a list of numbers is a palindrome.\n\n    Example:\n    numbers = [1, 2, 3, 2, 1]\n    output: True\n    \"\"\"\n    return numbers == numbers[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g()) == True\n",
        "idx_generation": 184,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers, check if there is a geometric progression present with the target ratio.\n\n    Example:\n    nums = [1, 3, 9, 27, 81]\n    target = 3\n    output: True\n    \"\"\"\n    nums.sort()\n    for i in range(len(nums) - 2):\n        if nums[i + 1] / nums[i] == target and nums[i + 2] / nums[i + 1] == target:\n            return True\n    return False\n\ndef g():\n    return [1, 3, 9, 27, 81], 3\nassert f(*g()) == True\n",
        "idx_generation": 111,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of any contiguous subarray.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum = max(num, curr_sum + num)\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n\ndef g(nums: List[int] = [1, -2, 3, -4, 5, -6]):\n    return nums\n\nassert f(g()) == 5\n\n",
        "idx_generation": 493,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is a Toeplitz matrix.\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    \n    for i in range(1, n):\n        for j in range(1, m):\n            if matrix[i][j] != matrix[i-1][j-1]:\n                return False\n    return True\n\ndef g(n=3, m=4):\n    return [[1, 2, 3, 4], [5, 1, 2, 3], [6, 5, 1, 2]]\nassert f(g()) == True\n",
        "idx_generation": 143,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[str]]) -> bool:\n    \"\"\"\n    Given a 2D grid of strings, check if all the elements in each column are the same.\n\n    Sample Input:\n    arr = [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    \n    # Check if arr is a square grid\n    if len(arr[0]) != n:\n        return False\n    \n    # Check if all elements in each column are the same\n    for j in range(n):\n        column_elements = [arr[i][j] for i in range(n)]\n        if len(set(column_elements)) != 1:\n            return False\n    \n    return True\n\ndef g(arr: List[List[str]] = [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]):\n    return arr\n\nassert f(g()) == True\n\n",
        "idx_generation": 427,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: List[int], n=5) -> bool:\n    \"\"\"Check if the list contains n consecutive numbers\"\"\"\n    return sorted(x) == list(range(min(x), min(x) + n))\ndef g(n = 5):\n    return list(range(n))\nassert f(g()) == True\n",
        "idx_generation": 1,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given an array of integers, check if the array can be divided into two subarrays of equal sum.\n\n    Sample Input:\n    arr = [2, 2, 2, 2, 2, 2, 2, 2]\n\n    Sample Output:\n    True\n    \"\"\"\n    total_sum = sum(arr)\n    if total_sum % 2 != 0:\n        return False\n    target_sum = total_sum // 2\n    current_sum = 0\n    visited = set()\n    for num in arr:\n        current_sum += num\n        if current_sum == target_sum:\n            return True\n        if current_sum - target_sum in visited:\n            return True\n        visited.add(current_sum)\n    return False\n\ndef g():\n    return [2, 2, 2, 2, 2, 2, 2, 2]\n\nassert f(g()) == True\n",
        "idx_generation": 236,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a grid where the sum of each row, each column, and both diagonals are the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    target_sum = sum(arr[0])\n    for i in range(n):\n        if sum(arr[i]) != target_sum:\n            return False\n        if sum(arr[j][i] for j in range(n)) != target_sum:\n            return False\n    if sum(arr[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(arr[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return arr\n\nassert f(g()) == True\n\n",
        "idx_generation": 268,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst1: List[int], lst2: List[int]) -> bool:\n    \"\"\"\n    Check if the two given lists have any common elements.\n\n    Sample Input:\n    lst1 = [1, 2, 3, 4]\n    lst2 = [3, 4, 5, 6]\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(num in lst2 for num in lst1)\n\ndef g():\n    return [1, 2, 3, 4], [3, 4, 5, 6]\n\nassert f(*g()) == True\n",
        "idx_generation": 296,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list whose sum equals the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[3, 7, 11, 15], target=18):\n    return nums, target\nassert f(g()[0], g()[1])\n",
        "idx_generation": 34,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]]) -> bool:\n    \"\"\"\n    Check if the given list of points forms a square\n    \"\"\"\n    if len(points) != 4:\n        return False\n    distances = []\n    for i in range(len(points)):\n        for j in range(i + 1, len(points)):\n            distance = (points[i][0] - points[j][0]) ** 2 + (points[i][1] - points[j][1]) ** 2\n            distances.append(distance)\n    return len(set(distances)) == 2 and distances.count(max(distances)) == 2 and distances.count(min(distances)) == 4\ndef g():\n    return [(0, 0), (0, 1), (1, 0), (1, 1)]\nassert f(g()) == True\n",
        "idx_generation": 28,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if all the numbers are prime.\n\n    Sample Input:\n    [2, 3, 5, 7, 11]\n\n    Sample Output:\n    True\n    \"\"\"\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return all(is_prime(num) for num in nums)\n\ndef g() -> List[int]:\n    return [2, 3, 5, 7, 11]\n\nassert f(g()) == True\n",
        "idx_generation": 88,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list whose sum is equal to 0.\n    Return True if such a subarray exists, False otherwise.\n\n    Sample Input:\n    arr = [1, 2, -3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if prefix_sum[j] - prefix_sum[i] == 0:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, -3, 4, 5]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 391,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=93252338) -> bool:\n    \"\"\"Check if a number is divisible by a\"\"\"\n    return x % a == 0\ndef g(a = 93252338):\n    return a * 2\nassert f(g())\n",
        "idx_generation": 327,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D matrix of integers, check if the matrix is a magic square.\n    A magic square is a square matrix where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    target_sum = sum(matrix[0])\n    \n    # Check row sums\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check column sums\n    for col in range(len(matrix[0])):\n        col_sum = sum(matrix[i][col] for i in range(len(matrix)))\n        if col_sum != target_sum:\n            return False\n    \n    # Check diagonal sums\n    diagonal_sum = sum(matrix[i][i] for i in range(len(matrix)))\n    if diagonal_sum != target_sum:\n        return False\n    \n    reverse_diagonal_sum = sum(matrix[i][len(matrix) - i - 1] for i in range(len(matrix)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    \n    return True\n\ndef g(matrix: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix\n\nassert f(g()) == True\n\n",
        "idx_generation": 367,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the sum of all even numbers in the list.\n\n    Sample Input:\n    [1, 5, 2, 9, 3, 4]\n\n    Sample Output:\n    6\n\n    Explanation: The even numbers in the list are [2, 4] and their sum is 6.\n    \"\"\"\n    return sum(num for num in nums if num % 2 == 0)\n\ndef g(nums=[1, 5, 2, 9, 3, 4]):\n    return nums\n\nassert f(g()) == 6\n\n",
        "idx_generation": 400,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome and the sum of its elements is a perfect square.\n    A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward.\n    \"\"\"\n    return nums == nums[::-1] and sum(nums) ** 0.5 % 1 == 0\n\ndef g(nums: List[int] = [1, 2, 3, 2, 1]):\n    return nums\n\nassert f(g()) == True\n\n",
        "idx_generation": 381,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of numbers, determine if it is possible to find a pair of numbers that add up to the target number.\n\n    Sample input:\n    [2, 4, 6, 8]\n\n    Sample output:\n    True\n\n    The pair of numbers (2, 6) adds up to 8, which is the target number.\n    \"\"\"\n    return any(target - num in numbers for num in numbers)\n\ndef g(target=0):\n    return [2, 4, 6, target - 2]\n\nassert f(g()) == True\n",
        "idx_generation": 59,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst1: List[int], lst2: List[int]) -> bool:\n    \"\"\"Check if the two lists have the same length and contain at least one common element.\"\"\"\n    return len(lst1) == len(lst2) and any(num in lst2 for num in lst1)\n\ndef g():\n    return ([1, 2, 3, 4, 5], [4, 5, 6, 7, 8])\n\nassert f(*g()) == True\n\n",
        "idx_generation": 265,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, remove all duplicates and return a new list with unique elements.\n\n    Sample Input:\n    [1, 2, 3, 2, 4, 5, 1, 3]\n\n    Sample Output:\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    unique_nums = list(set(nums))\n    return unique_nums\n\ndef g(nums: List[int] = [1, 2, 3, 2, 4, 5, 1, 3]):\n    return nums\n\nassert f(g()) == [1, 2, 3, 4, 5]\n\n",
        "idx_generation": 462,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if a list of numbers is a Fibonacci sequence.\n\n    Example:\n    numbers = [0, 1, 1, 2, 3, 5, 8]\n    output: True\n    \"\"\"\n    def is_fibonacci(n):\n        if n < 0:\n            return False\n        a, b = 0, 1\n        while b < n:\n            a, b = b, a + b\n        return b == n\n\n    return all(is_fibonacci(numbers[i]) and numbers[i] == numbers[i-1] + numbers[i-2] for i in range(2, len(numbers)))\n\ndef g():\n    return [0, 1, 1, 2, 3, 5, 8]\n\nassert f(g()) == True\n\n",
        "idx_generation": 228,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n    n = len(matrix)\n    target_sum = n * (n**2 + 1) // 2\n\n    # Check rows\n    if not all((sum(row) == target_sum for row in matrix)):\n        return False\n\n    # Check columns\n    if not all((sum(column) == target_sum for column in zip(*matrix))):\n        return False\n\n    # Check diagonal\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    if diagonal_sum1 != target_sum or diagonal_sum2 != target_sum:\n        return False\n\n    return True\n\ndef g():\n    matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n    return matrix\n\nassert f(g()) == True\n",
        "idx_generation": 236,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # check columns\n    for col in range(n):\n        if sum(matrix[i][col] for i in range(n)) != target_sum:\n            return False\n    \n    # check diagonals\n    if sum(matrix[i][i] for i in range(n)) != target_sum or sum(matrix[i][n-i-1] for i in range(n)) != target_sum:\n        return False\n    \n    return True\n\ndef g(n: int):\n    \"\"\"Generate a magic square of size n.\"\"\"\n    if n % 2 == 0:\n        raise ValueError(\"n must be odd\")\n    \n    magic_square = [[0] * n for _ in range(n)]\n    i = n // 2\n    j = n - 1\n    num = 1\n    \n    while num <= n * n:\n        if i == -1 and j == n:  # condition 4\n            j = n - 2\n            i = 0\n        else:\n            if j == n:\n                j = 0\n            if i < 0:\n                i = n - 1\n        \n        if magic_square[int(i)][int(j)]:  # condition 2\n            j = j - 2\n            i = i + 1\n            continue\n        else:\n            magic_square[int(i)][int(j)] = num\n            num = num + 1\n        \n        j = j + 1\n        i = i - 1  # condition 1\n    \n    return magic_square\n\nassert f(g(5)) == True\n\n",
        "idx_generation": 223,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix, find the maximum value in each row and return the sum of these maximum values.\n\n    Example:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    The maximum values in each row are: 3, 6, 9\n    The sum of these maximum values is 18.\n    \"\"\"\n    return sum(max(row) for row in matrix)\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == 18\n",
        "idx_generation": 481,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(arr: List[int], k: int = 4) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the given array, such that the product of its elements is zero.\"\"\"\n    for i in range(len(arr) - k + 1):\n        subarr = arr[i:i+k]\n        if 0 in subarr:\n            return True\n    return False\n\ndef g(k: int = 4):\n    return [0] * k\n\nassert f(g()) == True\n",
        "idx_generation": 50,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist three numbers in the list whose sum is equal to the target number.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            for k in range(j + 1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 18\n\nassert f(*g()) == True\n",
        "idx_generation": 459,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"\n    Find if there exists a subset of numbers in the list that sum up to the target value.\n    \"\"\"\n    n = len(x)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < x[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - x[i - 1]]\n    return dp[n][target]\ndef g(target=100):\n    return [1, 5, 10, 20, 50, 100]\nassert f(g()) == True\n",
        "idx_generation": 13,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sums of the rows, columns, and diagonals are all equal.\n\n    Sample Input:\n    grid = [[1, 4, 2], [7, 3, 6], [8, 5, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    n = len(arr)\n    target_sum = sum(arr[0])\n\n    # Check rows\n    for row in arr:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        if sum(arr[i][j] for i in range(n)) != target_sum:\n            return False\n\n    # Check diagonals\n    if sum(arr[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(arr[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n\n    return True\n\ndef g(arr: List[List[int]]):\n    return arr\n\nassert f(g([[1, 4, 2], [7, 3, 6], [8, 5, 9]])) == False\n",
        "idx_generation": 137,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string s, check if it is a palindrome.\n    A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward.\n\n    Example:\n    s = \"level\"\n    The string reads the same forward and backward.\n\n    Therefore, f(s) returns True.\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s: str = \"level\"):\n    return s\n\nassert f(g()) == True\n",
        "idx_generation": 411,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Determine if it is possible to find a pair of numbers in a matrix that XORs to a target number. The pair of numbers\n    must be distinct and the order of the numbers in the pair does not matter.\n\n    Sample input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample output:\n    True\n\n    The pair of numbers (2, 6) XORs to 4, which is the target number.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for x in range(i, rows):\n                for y in range(j, cols):\n                    if matrix[i][j] ^ matrix[x][y] == target and (i != x or j != y):\n                        return True\n    return False\n\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, target, 10]]\n\nassert f(g()) == False\n\n",
        "idx_generation": 389,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a number that is a perfect square.\n    \"\"\"\n    def is_perfect_square(n):\n        return int(n ** 0.5) ** 2 == n\n\n    return any(is_perfect_square(num) for num in nums)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n\n",
        "idx_generation": 415,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the sum of the first n powers of 2 is equal to the integer represented by s.\"\"\"\n    return sum([2**i for i in range(n)]) == int(s)\ndef g(n = 3):\n    return str(sum([2**i for i in range(n)]))\nassert f(g()) == True\n",
        "idx_generation": 2,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(tri: List[int], edges=[[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]) -> bool:\n    \"\"\"Find a triangle in the given directed graph that forms a cycle.\"\"\"\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a)\ndef g(edges = [[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True\n",
        "idx_generation": 110,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(tri: List[int], edges=[[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]) -> bool:\n    \"\"\"Check if a given directed graph contains a cycle.\"\"\"\n    graph = {}\n    for edge in edges:\n        if edge[0] not in graph:\n            graph[edge[0]] = []\n        graph[edge[0]].append(edge[1])\n    visited = set()\n    def dfs(node, visited, stack):\n        visited.add(node)\n        stack.add(node)\n        for neighbor in graph.get(node, []):\n            if neighbor not in visited:\n                if dfs(neighbor, visited, stack):\n                    return True\n            elif neighbor in stack:\n                return True\n        stack.remove(node)\n        return False\n    for node in graph:\n        if dfs(node, visited, set()):\n            return True\n    return False\ndef g(edges = [[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]):\n    return edges\nassert f(g()) == True\n",
        "idx_generation": 185,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of three people having the same birthday in a group of n is near 1/3.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 1/3) ** 2 <= year_len\ndef g(year_len = 365):\n    n = 1\n    distinct_prob = 1.0\n    best = (1/3, 1)  # (difference between probability and 1/3, n)\n    while distinct_prob > 1/3:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(1/3 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True\n",
        "idx_generation": 33,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: List[int], n=3, s=15) -> bool:\n    \"\"\"Find a list of n positive integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 3, s = 15):\n    if n == 1:\n        return [s]\n    elif n == 2:\n        return [s - 1, 1]\n    else:\n        return [s - 2, 1, 1]\nassert f(g()) == True\n",
        "idx_generation": 63,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it is a permutation of the numbers from 1 to n, where n is the length of the list.\n\n    Sample Input:\n    arr = [1, 3, 2, 5, 4]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    counter = [0] * (n + 1)\n    for num in arr:\n        if num < 1 or num > n or counter[num] > 0:\n            return False\n        counter[num] += 1\n    return True\n\ndef g(arr=[1, 3, 2, 5, 4]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 336,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target = 10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 406,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Determine if it is possible to obtain the target number by combining the numbers in nums using addition, subtraction, multiplication, and division.\"\"\"\n    if len(nums) == 1:\n        return nums[0] == target\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            a, b = nums[i], nums[j]\n            rest = [nums[k] for k in range(len(nums)) if k != i and k != j]\n            if f([a + b] + rest, target) or f([a - b] + rest, target) or f([b - a] + rest, target) or f([a * b] + rest, target) or (b != 0 and f([a / b] + rest, target)) or (a != 0 and f([b / a] + rest, target)):\n                return True\n    return False\ndef g(nums = [4, 1, 8, 7]):\n    return nums\nassert f(g()) == True\n",
        "idx_generation": 68,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a staircase pattern.\n    A staircase pattern is a grid where each row is strictly increasing from left to right, and the first element of each subsequent row is greater than the last element of the previous row.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(n-1):\n        if arr[i][-1] >= arr[i+1][0]:\n            return False\n        for j in range(m-1):\n            if arr[i][j] >= arr[i][j+1]:\n                return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == True\n\n",
        "idx_generation": 490,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose difference is equal to 5.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if num + 5 in num_set or num - 5 in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [3, 7, 8, 12]):\n    return nums\n\nassert f(g()) == True\n\n",
        "idx_generation": 317,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subsequence of length k in the list that is strictly decreasing\"\"\"\n    for i in range(len(nums)-k+1):\n        subsequence = nums[i:i+k]\n        if all(subsequence[j] > subsequence[j+1] for j in range(k-1)):\n            return True\n    return False\n\ndef g(k=3):\n    return [10, 8, 6, 4, 2, 9, 7, 5, 3, 1]\n\nassert f(g()) == True\n",
        "idx_generation": 439,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a number in the list that is less than the target value.\n    \"\"\"\n    return any(num < target for num in nums)\n\ndef g(target=0):\n    return list(range(target))\n\nassert f(g()) == False\n",
        "idx_generation": 243,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is a magic square.\"\"\"\n    n = len(matrix)\n    row_sum = sum(matrix[0])\n    col_sum = sum(matrix[i][0] for i in range(n))\n    diagonal_sum = sum(matrix[i][i] for i in range(n))\n    anti_diagonal_sum = sum(matrix[i][n-1-i] for i in range(n))\n    \n    if row_sum != col_sum or row_sum != diagonal_sum or row_sum != anti_diagonal_sum:\n        return False\n    \n    for i in range(n):\n        if sum(matrix[i]) != row_sum:\n            return False\n        if sum(matrix[j][i] for j in range(n)) != col_sum:\n            return False\n    return True\n\ndef g(n=3):\n    return [[8, 1, 6], [3, 5, 7], [4, 9, 2]]\nassert f(g()) == True\n",
        "idx_generation": 143,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, k: int, nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subarray of length k such that the sum of the elements is divisible by n.\n    \"\"\"\n    for i in range(len(nums)-k+1):\n        subarray = nums[i:i+k]\n        if sum(subarray) % n == 0:\n            return True\n    return False\n\ndef g(n: int = 3, k: int = 2, nums: List[int] = [4, 5, 6, 7, 8]):\n    return n, k, nums\n\nassert f(*g()) == True\n",
        "idx_generation": 168,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a staircase pattern.\n    A staircase pattern is a grid where the elements form a pattern that is strictly increasing along both rows and columns.\n\n    Sample Input:\n    arr = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(n):\n        for j in range(m):\n            if i > 0 and arr[i][j] <= arr[i-1][j]:\n                return False\n            if j > 0 and arr[i][j] <= arr[i][j-1]:\n                return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]):\n    return arr\n\nassert f(g()) == True\n\n",
        "idx_generation": 481,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, num_possibilities=5) -> bool:\n    \"\"\"Find if it is possible to select a subset of numbers from the given list that equals the target\"\"\"\n    from itertools import combinations\n    return any(sum(combo) == target for i in range(1, num_possibilities + 1) for combo in combinations(nums, i))\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=10, num_possibilities=5):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 33,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, t=100, upper=1000) -> bool:\n    \"\"\"\n    Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n    * if n is even, divide n by 2,\n    * if n is odd, multiply n by 3 and add 1\n    Find `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n    \"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= upper\ndef g(t = 100, upper = 1000):\n    # Faster solution for simultaneously solving multiple problems is of course possible\n    bound = t + 10\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 1) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return min(prev)\nassert f(g()) == True\n",
        "idx_generation": 4,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a subarray whose sum is equal to the target.\n    If such a subarray exists, return True. Otherwise, return False.\n    \"\"\"\n    prefix_sum = 0\n    sum_set = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target or prefix_sum - target in sum_set:\n            return True\n        sum_set.add(prefix_sum)\n    return False\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 256,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a grid where the sum of each row, each column, and both diagonals are the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    target_sum = sum(arr[0])\n    for i in range(n):\n        if sum(arr[i]) != target_sum:\n            return False\n        if sum(arr[j][i] for j in range(n)) != target_sum:\n            return False\n    if sum(arr[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(arr[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 273,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given nested list whose difference is equal to 5.\n    \"\"\"\n\n    num_set = set()\n    for lst in nums:\n        for num in lst:\n            if num - 5 in num_set or num + 5 in num_set:\n                return True\n            num_set.add(num)\n    return False\n\ndef g(nums: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 300,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, count=3) -> bool:\n    \"\"\"Find if there are count numbers that add up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(nums, count))\ndef g(target = 100, count = 3):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nassert f(g()) == True\n",
        "idx_generation": 35,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nimport math\nfrom typing import*\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"Find if there are count numbers that multiply to the target\"\"\"\n    return any(math.prod(nums[i] for i in indices) == target for indices in itertools.combinations(range(len(nums)), count))\ndef g(target: int = 10, count: int = 2, nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return (nums, target, count)\nassert f(*g()) == True\n\n",
        "idx_generation": 45,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import *\ndef f(n: int, k=5) -> bool:\n    \"\"\"\n    Check if a given number can be expressed as the sum of k consecutive odd integers.\n\n    Sample input:\n    n = 45\n\n    Sample output:\n    True\n\n    Explanation: 45 can be expressed as 7 + 9 + 11 + 13 + 15.\n    \"\"\"\n    return any(n % i == 0 and n // i - k // 2 >= 0 and n // i % 2 != 0 for i in range(1, int(n ** 0.5) + 1))\ndef g(k=5):\n    return sum(range(1, 2 * k + 1, 2))\nassert f(g()) == True\n",
        "idx_generation": 95,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list that sum up to the target number.\n\n    Sample Input:\n    [1, 2, 3, 4, 5], 8\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 8):\n    return nums, target\n\nassert f(*g()) == True\n",
        "idx_generation": 408,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers and a number k, find if there exists a subarray with sum divisible by k.\n    \"\"\"\n    prefix_sum = 0\n    mod_set = set()\n    mod_set.add(0)\n    for num in nums:\n        prefix_sum += num\n        prefix_sum %= k\n        if prefix_sum in mod_set:\n            return True\n        mod_set.add(prefix_sum)\n    return False\n\ndef g(nums=[4, 2, -3, 1, 6], k=5):\n    return nums, k\n\nassert f(*g()) == True\n",
        "idx_generation": 424,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D matrix of integers, check if the matrix is a magic square.\n    A magic square is a square matrix where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    matrix = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    target_sum = sum(matrix[0])\n    \n    # Check row sums\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check column sums\n    for col in range(len(matrix[0])):\n        col_sum = sum(matrix[i][col] for i in range(len(matrix)))\n        if col_sum != target_sum:\n            return False\n    \n    # Check diagonal sums\n    diagonal_sum = sum(matrix[i][i] for i in range(len(matrix)))\n    if diagonal_sum != target_sum:\n        return False\n    \n    reverse_diagonal_sum = sum(matrix[i][len(matrix) - i - 1] for i in range(len(matrix)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    \n    return True\n\ndef g(matrix: List[List[int]] = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]):\n    return matrix\n\nassert f(g()) == True\n\n",
        "idx_generation": 367,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the even numbers.\n\n    Example:\n    arr = [1, 2, 3, 4, 5]\n    output: [2, 4]\n    \"\"\"\n    return [num for num in arr if num % 2 == 0]\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g()) == [2, 4]\n",
        "idx_generation": 404,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subarray with a sum equal to k.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    k = 7\n    output: True\n    \"\"\"\n    prefix_sum = 0\n    seen = set()\n    seen.add(0)\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum - k in seen:\n            return True\n        seen.add(prefix_sum)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 7\n\nassert f(*g()) == True\n",
        "idx_generation": 484,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, a=14302, b=5) -> bool:\n    \"\"\"Check if the given number is divisible by both a and b\"\"\"\n    return n % a == 0 and n % b == 0\n\ndef g(a = 14302, b = 5):\n    return a // b\n\nassert f(g()) == False\n",
        "idx_generation": 84,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, check if there exists a pair of integers in the list whose sum is equal to the target.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 6\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for num in arr:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 6):\n    return arr, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 323,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given an array of integers, check if the array can be divided into two subarrays of equal sum.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Sample Output:\n    False\n    \"\"\"\n    total_sum = sum(arr)\n    if total_sum % 2 != 0:\n        return False\n    target_sum = total_sum // 2\n    current_sum = 0\n    visited = set()\n    for num in arr:\n        current_sum += num\n        if current_sum == target_sum:\n            return True\n        if current_sum - target_sum in visited:\n            return True\n        visited.add(current_sum)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == False\n",
        "idx_generation": 236,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers, determine if the target integer is present in the matrix.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 8\n\n    Sample Output:\n    True\n\n    Explanation:\n    The target integer 8 is present in the matrix.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target: int = 8):\n    return (matrix, target)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 244,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if all numbers in the list are greater than the target number\"\"\"\n    return all(num > target for num in nums)\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 0):\n    return (nums, target)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 230,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers, check if there are two numbers that add up to the target number.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n    output: True\n    \"\"\"\n    complements = set()\n    for num in nums:\n        complement = target - num\n        if complement in complements:\n            return True\n        complements.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 7\n\nassert f(*g()) == True\n\n",
        "idx_generation": 56,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the numbers that are divisible by 3 and not divisible by 2.\n    \"\"\"\n    return [num for num in nums if num % 3 == 0 and num % 2 != 0]\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == [3, 9]\n",
        "idx_generation": 459,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a subset of numbers that sums up to the target value\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g()) == True\n",
        "idx_generation": 16,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]], target=10) -> bool:\n    \"\"\"\n    Given a list of 2D points, find the pair of points that have the closest Euclidean distance between them.\n    Return True if the distance is less than or equal to the target value, False otherwise.\n    \"\"\"\n    min_distance = float('inf')\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            distance = ((points[i][0] - points[j][0])**2 + (points[i][1] - points[j][1])**2)**0.5\n            if distance < min_distance:\n                min_distance = distance\n    return min_distance <= target\n\ndef g(target=10):\n    points = [(0, 0), (3, 4), (1, 1), (5, 5), (2, 2)]\n    return points\n\nassert f(g()) == True\n",
        "idx_generation": 171,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str]) -> bool:\n    \"\"\"\n    Given a list of strings, check if there exists a string that is a palindrome.\n    \"\"\"\n    return any(string == string[::-1] for string in strings)\n\ndef g():\n    \"\"\"Generate a list of strings.\"\"\"\n    return [\"abc\", \"def\", \"racecar\"]\n\nassert f(g()) == True\n\n\n",
        "idx_generation": 421,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, substrings=['abc', 'def', 'ghi', 'jkl']) -> bool:\n    \"\"\"\n    Find the longest common subsequence between two strings.\n    \"\"\"\n    def lcs(s1, s2):\n        m = len(s1)\n        n = len(s2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            for j in range(n + 1):\n                if i == 0 or j == 0:\n                    dp[i][j] = 0\n                elif s1[i - 1] == s2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[m][n]\n    \n    return lcs(s, ''.join(substrings)) == len(''.join(substrings))\ndef g(substrings=['abc', 'def', 'ghi', 'jkl']):\n    return ''.join(substrings)\nassert f(g()) == True\n",
        "idx_generation": 42,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"\n    Determine if it is possible to find a pair of numbers in a matrix that XORs to a target number. The pair of numbers\n    must be distinct and the order of the numbers in the pair does not matter.\n\n    Sample input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample output:\n    True\n\n    The pair of numbers (2, 6) XORs to 4, which is the target number.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for x in range(i, rows):\n                for y in range(j, cols):\n                    if matrix[i][j] ^ matrix[x][y] == target and (i != x or j != y):\n                        return True\n    return False\n\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, target ^ 2, 8]]\n\nassert f(g()) == True\n\n",
        "idx_generation": 389,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a number that is a perfect cube.\n    \"\"\"\n    def is_perfect_cube(n):\n        return int(n ** (1 / 3)) ** 3 == n\n\n    return any(is_perfect_cube(num) for num in nums)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 417,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string is a palindrome of a specific length.\"\"\"\n    return s == s[::-1] and len(s) == n\ndef g(n=3):\n    return str(n) * n\nassert f(g()) == True\n",
        "idx_generation": 25,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(tri: List[int], edges=[[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]) -> bool:\n    \"\"\"Find a triangle in the given directed graph where the sum of the triangle's vertices is even.\"\"\"\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a + b + c) % 2 == 0\ndef g(edges = [[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True\n",
        "idx_generation": 110,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(tri: List[int], edges=[[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]) -> bool:\n    \"\"\"Check if a given directed graph contains a cycle.\"\"\"\n    graph = {}\n    for edge in edges:\n        if edge[0] not in graph:\n            graph[edge[0]] = []\n        graph[edge[0]].append(edge[1])\n    visited = set()\n    def dfs(node, visited, stack):\n        visited.add(node)\n        stack.add(node)\n        for neighbor in graph.get(node, []):\n            if neighbor not in visited:\n                if dfs(neighbor, visited, stack):\n                    return True\n            elif neighbor in stack:\n                return True\n        stack.remove(node)\n        return False\n    for node in graph:\n        if dfs(node, visited, set()):\n            return True\n    return False\ndef g(edges = [[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]):\n    return edges\nassert f(g()) == True\n",
        "idx_generation": 185,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5], target=10) -> bool:\n    \"\"\"Check if there exists a subset of the list whose sum is equal to the target.\"\"\"\n    def subsetSum(nums, n, target):\n        if target == 0:\n            return True\n        if n == 0 and target != 0:\n            return False\n        if nums[n-1] > target:\n            return subsetSum(nums, n-1, target)\n        return subsetSum(nums, n-1, target) or subsetSum(nums, n-1, target-nums[n-1])\n\n    return subsetSum(nums, n, target)\n\ndef g(nums = [1, 2, 3, 4, 5], target = 10):\n    return len(nums)\n\nassert f(g()) == True\n",
        "idx_generation": 44,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nimport math\nfrom typing import*\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"Find if there are count numbers that multiply to the target\"\"\"\n    return any(math.prod(nums[i] for i in indices) == target for indices in itertools.combinations(range(len(nums)), count))\ndef g(target: int = 24, count: int = 4, nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return (nums, target, count)\nassert f(*g()) == True\n",
        "idx_generation": 79,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(counts: List[int], target_prob=0.5) -> bool:\n    \"\"\"\n    Suppose a list of m 1's and n -1's are permuted at random.\n    What is the probability that all of the cumulative sums are positive?\n    The goal is to find counts = [m, n] that make the probability of the ballot problem close to target_prob.\n    \"\"\"\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06\ndef g(target_prob = 0.5):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]\nassert f(g())\n",
        "idx_generation": 352,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k: int = 3) -> bool:\n    \"\"\"\n    Check if there are k consecutive numbers in the list.\n    \"\"\"\n    nums.sort()\n    for i in range(len(nums) - k + 1):\n        if nums[i+k-1] - nums[i] == k - 1:\n            return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k: int = 3):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 408,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"Find the index of the minimum element in the list.\"\"\"\n    return lst.index(min(lst))\n\ndef g():\n    return [9, 7, 5, 2, 3, 4]\n\nassert f(g()) == 3\n",
        "idx_generation": 71,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a pair of numbers that sum up to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in nums_set and complement != num:\n            return True\n    return False\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8], target: int = 9):\n    return nums, target\n\nassert f(*g()) == True\n",
        "idx_generation": 495,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"Return the list of elements in reverse order.\"\"\"\n    return nums[::-1]\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return (nums,)\n\nassert f(*g()) == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n\n",
        "idx_generation": 352,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of numbers, return True if there is at least one negative number in the list, False otherwise.\n    \"\"\"\n    for num in nums:\n        if num < 0:\n            return True\n    return False\n\ndef g(nums: List[int] = [1, 2, -3, 4, 5]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 449,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int = 3) -> bool:\n    \"\"\"\n    Check if there exists a subarray of length k in the given array, such that the sum of its elements is greater than k.\n    \"\"\"\n    for i in range(len(arr) - k + 1):\n        subarr = arr[i:i+k]\n        if sum(subarr) > k:\n            return True\n    return False\n\ndef g(k: int = 3):\n    return [k] * k\n\nassert f(g()) == True\n\n",
        "idx_generation": 253,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if a list is a fibonacci sequence.\n    A fibonacci sequence is defined as a list where each element is the sum of the previous two elements.\"\"\"\n    if len(arr) < 3:\n        return False\n    for i in range(2, len(arr)):\n        if arr[i] != arr[i-1] + arr[i-2]:\n            return False\n    return True\n\ndef g(start: int, length: int):\n    \"\"\"Generate a fibonacci sequence.\"\"\"\n    fib_seq = [start, start]\n    for i in range(2, length):\n        fib_seq.append(fib_seq[i-1] + fib_seq[i-2])\n    return fib_seq\n\nassert f(g(0, 6)) == True\n",
        "idx_generation": 182,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import *\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if it is a symmetric matrix.\n\n    Sample Input:\n    [[1, 2, 3],\n     [2, 4, 5],\n     [3, 5, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g() -> List[List[int]]:\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g()) == True\n",
        "idx_generation": 171,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a symmetric pattern.\n    A symmetric pattern is a grid where the elements form a pattern that is symmetric across the diagonal.\n\n    Sample Input:\n    arr = [[1, 2, 3], [2, 1, 4], [3, 4, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(n):\n        for j in range(i+1, m):\n            if arr[i][j] != arr[j][i]:\n                return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [2, 1, 4], [3, 4, 1]]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 495,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of at least two people having the same birthday in a group of n is near 1/2.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 1/2) ** 2 <= year_len\ndef g(year_len = 365):\n    n = 1\n    distinct_prob = 1.0\n    best = (1/2, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 1/2:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(1/2 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True\n",
        "idx_generation": 33,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Find a list of integers where the difference between each consecutive pair is greater than or equal to 5.\n    \"\"\"\n    return all([abs(nums[i] - nums[i+1]) >= 5 for i in range(len(nums) - 1)])\ndef g():\n    return list(range(0, 11, 5))\nassert f(g()) == True\n",
        "idx_generation": 6,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list whose sum is greater than or equal to the target value.\n    Return True if such a subarray exists, False otherwise.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 10\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if prefix_sum[j] - prefix_sum[i] >= target:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 10):\n    return arr, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 262,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n\n",
        "idx_generation": 387,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains any duplicate elements.\n    \"\"\"\n    return len(set(nums)) < len(nums)\n\ndef g(nums: List[int] = [1, 1, 2, 3, 4]):\n    \"\"\"\n    This solution returns the input list as is\n    \"\"\"\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 301,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target=7) -> bool:\n    \"\"\"Check if the given list contains a number that is a multiple of the target value.\"\"\"\n    return any(num % target == 0 for num in nums)\n\ndef g(target=7):\n    nums = [14, 21, 28, 35, 42]\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 40,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, determine if it is a magic square.\n    A magic square is a square matrix in which the sums of each row, each column, and both diagonals are the same.\n\n    Sample input:\n    [[2, 7, 6],\n     [9, 5, 1],\n     [4, 3, 8]]\n\n    Sample output:\n    True\n\n    Explanation:\n    The sums of each row, each column, and both diagonals are all equal to 15.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) != target_sum:\n            return False\n        if sum(matrix[j][i] for j in range(n)) != target_sum:\n            return False\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(matrix[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n    return True\n\ndef g(matrix: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return (matrix,)\nassert f(*g())\n",
        "idx_generation": 48,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nimport random\ndef f(li: List[int], target_sum: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target sum, determine if it is possible to select a subset of the list\n    elements such that their sum is equal to the target sum.\n\n    Sample input:\n    [1, 2, 3, 4, 5], 9\n\n    Sample output:\n    True\n    \"\"\"\n    def subset_sum(li, target_sum):\n        n = len(li)\n        dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n        for i in range(n + 1):\n            dp[i][0] = True\n        for i in range(1, n + 1):\n            for j in range(1, target_sum + 1):\n                if li[i - 1] > j:\n                    dp[i][j] = dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j] or dp[i - 1][j - li[i - 1]]\n        return dp[n][target_sum]\n    random.shuffle(li)\n    return subset_sum(li, target_sum)\ndef g(li = [1, 2, 3, 4, 5], target_sum = 9):\n    return (li, target_sum)\nassert f(*g())\n",
        "idx_generation": 103,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum subarray sum.\n\n    A subarray is a contiguous part of the array.\n\n    Sample Input:\n    nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\n    Sample Output:\n    6\n    Explanation: The contiguous subarray [4, -1, 2, 1] has the largest sum = 6.\n    \"\"\"\n    n = len(nums)\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += nums[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum\n\ndef g():\n    return [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\nassert f(g()) == 6\n\n",
        "idx_generation": 431,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of numbers `nums`, find the maximum subarray sum.\n\n    For example, if nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4], the maximum subarray sum is 6\n    (corresponding to the subarray [4, -1, 2, 1]).\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum = max(num, curr_sum + num)\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n\ndef g(nums: List[int] = [-2, 1, -3, 4, -1, 2, 1, -5, 4]):\n    return nums\n\nassert f(g()) == 6\n",
        "idx_generation": 443,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n\n    A magic square is a square matrix where the sum of each row, each column, and both diagonals are equal.\n\n    Sample Input:\n    matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])  # Target sum for rows, columns, and diagonals\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for col in zip(*matrix):\n        if sum(col) != target_sum:\n            return False\n\n    # Check diagonal from top-left to bottom-right\n    diagonal1 = [matrix[i][i] for i in range(n)]\n    if sum(diagonal1) != target_sum:\n        return False\n\n    # Check diagonal from top-right to bottom-left\n    diagonal2 = [matrix[i][n-i-1] for i in range(n)]\n    if sum(diagonal2) != target_sum:\n        return False\n    \n    return True\n\ndef g(matrix: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix\n\nassert f(g()) == True\n\n",
        "idx_generation": 480,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(words: List[str]) -> List[str]:\n    \"\"\"\n    Given a list of words, return a new list containing only the words that start with a vowel.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return [word for word in words if word[0].lower() in vowels]\n\ndef g(words=[\"apple\", \"banana\", \"cat\", \"dog\", \"elephant\"]):\n    return words\n\nassert f(g()) == [\"apple\", \"elephant\"]\n",
        "idx_generation": 436,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(num: int, nums=[10, 20, 30, 40, 50]) -> bool:\n    \"\"\"\n    Check if the given number is present in the list and is a multiple of the first number in the list.\n    \"\"\"\n    return num in nums and num % nums[0] == 0\ndef g(nums=[10, 20, 30, 40, 50]):\n    return nums[3]\nassert f(g()) == True\n",
        "idx_generation": 100,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list where each element is multiplied by 3.\n    \"\"\"\n    return [num * 3 for num in arr]\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr\n\nassert f(g()) == [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]\n",
        "idx_generation": 326,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that forms a subsequence with a sum equal to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        num = nums[i - 1]\n        for j in range(target + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j >= num:\n                dp[i][j] = dp[i][j] or dp[i - 1][j - num]\n\n    return dp[n][target]\n\ndef g(nums: List[int], target: int):\n    return nums, target\n\nassert f(*g([2, 3, 5, 7], 10)) == True\n",
        "idx_generation": 255,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n    \n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum != target_sum:\n            return False\n    \n    # Check diagonals\n    diagonal_sum_1 = 0\n    diagonal_sum_2 = 0\n    for i in range(n):\n        diagonal_sum_1 += matrix[i][i]\n        diagonal_sum_2 += matrix[i][n-1-i]\n    if diagonal_sum_1 != target_sum or diagonal_sum_2 != target_sum:\n        return False\n    \n    return True\n\ndef g():\n    matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n    return matrix\n\nassert f(g()) == True\n",
        "idx_generation": 252,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a symmetric matrix of the given size\n    \"\"\"\n    symmetric_matrix = [[0 for _ in range(size)] for _ in range(size)]\n    for i in range(size):\n        for j in range(i, size):\n            symmetric_matrix[i][j] = symmetric_matrix[j][i] = i + j\n    return symmetric_matrix\n\nassert f(g()) == True\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find a pair of numbers in the list that sum up to the target.\n\n    Sample Input:\n    [1, 2, 3, 4, 5], 9\n\n    Sample Output:\n    True\n    \"\"\"\n    seen = set()\n    for num in arr:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g(), 9)\n",
        "idx_generation": 61,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target number, determine if there exists a pair of numbers in the matrix\n    whose sum is equal to the target number.\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            for x in range(i, len(matrix)):\n                for y in range(len(matrix[x])):\n                    if matrix[i][j] + matrix[x][y] == target:\n                        return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 460,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Check if there is a subset of numbers that sums up to the target value\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\n\ndef g(target=12):\n    return [2, 4, 6, 8, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 25,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]]) -> bool:\n    \"\"\"Check if the given list of points forms a convex polygon.\"\"\"\n\n    def orientation(p: Tuple[int, int], q: Tuple[int, int], r: Tuple[int, int]) -> int:\n        \"\"\"Find the orientation of three points (p, q, r) using cross product.\"\"\"\n        val = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1])\n        if val == 0:\n            return 0  # Collinear\n        elif val > 0:\n            return 1  # Clockwise\n        else:\n            return 2  # Counterclockwise\n\n    n = len(points)\n    if n < 3:\n        return False\n        \n    orientation_set = set()\n    for i in range(n):\n        j = (i + 1) % n\n        k = (i + 2) % n\n        orient = orientation(points[i], points[j], points[k])\n        orientation_set.add(orient)\n\n    return len(orientation_set) == 1\n\ndef g():\n    \"\"\"Generate a list of points to form a convex polygon.\"\"\"\n    return [(0, 0), (0, 4), (3, 5), (5, 3), (4, 0)]\n\nassert f(g()) == True\n",
        "idx_generation": 173,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, check if it is a palindrome.\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s: str):\n    \"\"\"\n    This solution returns the input string as is.\n    \"\"\"\n    return s\n\nassert f(g(\"racecar\"))\n\n",
        "idx_generation": 421,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, word='python') -> bool:\n    \"\"\"Check if the word 'python' is present in the given string\"\"\"\n    return word in s.lower()\ndef g(word = 'python'):\n    return 'I love ' + word\nassert f(g()) == True\n",
        "idx_generation": 43,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the number that appears only once in the given list.\n\n    Sample input:\n    [1, 2, 3, 4, 5, 1, 2, 3, 4]\n\n    Sample output:\n    5\n    \"\"\"\n    unique_num = 0\n    for num in nums:\n        unique_num ^= num\n    return unique_num\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 1, 2, 3, 4]):\n    return nums\n\nassert f(g()) == 5\n",
        "idx_generation": 433,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a number that is a Fibonacci number.\n    \"\"\"\n    def is_perfect_square(n):\n        return int(n ** 0.5) ** 2 == n\n\n    def is_fibonacci(n):\n        return is_perfect_square(5 * n ** 2 + 4) or is_perfect_square(5 * n ** 2 - 4)\n\n    return any(is_fibonacci(num) for num in nums)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 417,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, target='defojuhujuwilumec', length=7) -> bool:\n    \"\"\"Find a substring of the given length centered within the target string.\"\"\"\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s\ndef g(target = 'defojuhujuwilumec', length = 7):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]\nassert f(g()) == True\n",
        "idx_generation": 35,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(tri: List[int], edges=[[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]) -> bool:\n    \"\"\"Check if a given directed graph contains a cycle.\"\"\"\n    graph = {}\n    for edge in edges:\n        if edge[0] not in graph:\n            graph[edge[0]] = []\n        graph[edge[0]].append(edge[1])\n    visited = set()\n    def dfs(node, visited, stack):\n        visited.add(node)\n        stack.add(node)\n        for neighbor in graph.get(node, []):\n            if neighbor not in visited:\n                if dfs(neighbor, visited, stack):\n                    return True\n            elif neighbor in stack:\n                return True\n        stack.remove(node)\n        return False\n    for node in graph:\n        if dfs(node, visited, set()):\n            return True\n    return False\ndef g(edges = [[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]):\n    return edges\nassert f(g()) == True\n",
        "idx_generation": 185,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(tri: List[int], edges=[[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]) -> bool:\n    \"\"\"Check if a given directed graph contains a cycle.\"\"\"\n    graph = {}\n    for edge in edges:\n        if edge[0] not in graph:\n            graph[edge[0]] = []\n        graph[edge[0]].append(edge[1])\n    visited = set()\n    def dfs(node, visited, stack):\n        visited.add(node)\n        stack.add(node)\n        for neighbor in graph.get(node, []):\n            if neighbor not in visited:\n                if dfs(neighbor, visited, stack):\n                    return True\n            elif neighbor in stack:\n                return True\n        stack.remove(node)\n        return False\n    for node in graph:\n        if dfs(node, visited, set()):\n            return True\n    return False\ndef g(edges = [[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]):\n    return edges\nassert f(g()) == True\n",
        "idx_generation": 251,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, upper=1000) -> bool:\n    \"\"\"\n    Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n    * if n is even, divide n by 2,\n    * if n is odd, multiply n by 3 and add 1\n    Find `0 < n < upper` that results in a cycle, where the sequence of numbers generated by the process repeats itself.\n    \"\"\"\n    m = n\n    seen = set()\n    while n != 1:\n        if n in seen:\n            return True\n        seen.add(n)\n        n = 3 * n + 1 if n % 2 else n // 2\n        if n >= upper:\n            return False\n    return False\n\ndef g(upper=1000):\n    n = 2\n    while n < upper:\n        if f(n, upper):\n            return n\n        n += 1\n    return -1\n\nassert f(g()) == True\n",
        "idx_generation": 47,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: List[int], n=8, s=75) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 8, s = 75):\n    if n == 1:\n        return [s]\n    elif n == 2:\n        return [s - 1, 1]\n    elif n == 3:\n        return [s - 2, 1, 1]\n    elif n == 4:\n        return [s/4, s/4, s/4, s/4]\n    elif n == 5:\n        return [s/5, s/5, s/5, s/5, s/5]\n    elif n == 6:\n        return [s/6, s/6, s/6, s/6, s/6, s/6]\n    elif n == 7:\n        return [s/7, s/7, s/7, s/7, s/7, s/7, s/7]\n    else:\n        return [s/8, s/8, s/8, s/8, s/8, s/8, s/8, s/8]\nassert f(g()) == True\n",
        "idx_generation": 86,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(counts: List[int], target_prob=0.25) -> bool:\n    \"\"\"\n    Suppose a list of m 1's and n -1's are permuted at random.\n    What is the probability that all of the cumulative sums are positive?\n    The goal is to find counts = [m, n] that make the probability of the ballot problem close to target_prob.\n    \"\"\"\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06\ndef g(target_prob = 0.25):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]\nassert f(g())\n",
        "idx_generation": 352,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k: int = 2) -> int:\n    \"\"\"\n    Find the product of the k smallest numbers in the list.\n    \"\"\"\n    nums.sort()\n    product = 1\n    for i in range(k):\n        product *= nums[i]\n    return product\n\ndef g(nums: List[int] = [5, 2, 4, 3, 1], k: int = 2):\n    return nums\n\nassert f(g()) == 2\n",
        "idx_generation": 408,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], num_rows=3, num_cols=3) -> bool:\n    \"\"\"Check if a given matrix is a magic square\"\"\"\n    target_sum = sum(matrix[0])\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(num_cols):\n        col_sum = 0\n        for i in range(num_rows):\n            col_sum += matrix[i][j]\n        if col_sum != target_sum:\n            return False\n\n    # Check diagonals\n    diagonal_sum = 0\n    reverse_diagonal_sum = 0\n    for i in range(num_rows):\n        diagonal_sum += matrix[i][i]\n        reverse_diagonal_sum += matrix[i][num_cols - i - 1]\n    if diagonal_sum != target_sum or reverse_diagonal_sum != target_sum:\n        return False\n\n    return True\n\ndef g(matrix=[[2, 7, 6], [9, 5, 1], [4, 3, 8]], num_rows=3, num_cols=3):\n    return matrix\n\nassert f(g()) == True\n",
        "idx_generation": 84,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: tuple, target=50) -> bool:\n    \"\"\"\n    Check if the target number is present in the tuple.\n    \"\"\"\n\n    return target in numbers\n\ndef g():\n    return (10, 20, 30, 40, 50, 60, 70, 80, 90, 100)\n\nassert f(g()) == True\n",
        "idx_generation": 353,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list after sorting it.\n    \"\"\"\n    nums.sort()\n    return nums\n\nassert f(g([3, 4, -7, 2, 1, 3, 1]), 4)\n",
        "idx_generation": 339,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if it is a magic square.\n    A magic square is a square matrix where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    matrix = [\n        [2, 7, 6],\n        [9, 5, 1],\n        [4, 3, 8]\n    ]\n\n    Sample Output:\n    True\n    \"\"\"\n    size = len(matrix)\n    target_sum = sum(matrix[0])\n    for i in range(1, size):\n        if sum(matrix[i]) != target_sum:\n            return False\n    for j in range(size):\n        col_sum = sum(row[j] for row in matrix)\n        if col_sum != target_sum:\n            return False\n    diag_sum1 = sum(matrix[i][i] for i in range(size))\n    diag_sum2 = sum(matrix[i][size - 1 - i] for i in range(size))\n    if diag_sum1 != target_sum or diag_sum2 != target_sum:\n        return False\n    return True\n\ndef g(matrix: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix\n\nassert f(g()) == True\n",
        "idx_generation": 216,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if it is a symmetric matrix.\n\n    Sample Input:\n    [[1, 2, 3],\n     [2, 4, 5],\n     [3, 5, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g() -> List[List[int]]:\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g()) == True\n",
        "idx_generation": 175,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a symmetric grid.\n\n    Sample Input:\n    arr = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i][j] != arr[j][i]:\n                return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 498,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"\n    Determine if it is possible to find a pair of numbers in a list that sums up to a target number. The pair of numbers\n    must be distinct and the order of the numbers in the pair does not matter.\n\n    Sample input:\n    [50, 60, 90, 110]\n\n    Sample output:\n    True\n\n    The pair of numbers (50, 60) sums up to 110, which is the target number.\n    \"\"\"\n    return any(num1 + num2 == target for i, num1 in enumerate(numbers) for num2 in numbers[i + 1:])\ndef g(target=100):\n    return [50, 60, 90, target - 50]\nassert f(g()) == True\n",
        "idx_generation": 42,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, target_sum=10) -> bool:\n    \"\"\"\n    Find a list of n integers whose sum is equal to the target sum.\n    \"\"\"\n    import itertools\n    \n    for numbers in itertools.combinations(range(1, 10), n):\n        if sum(numbers) == target_sum:\n            return True\n    return False\n\ndef g(target_sum = 10):\n    n = 1\n    while not f(n, target_sum):\n        n += 1\n    return n\n\nassert f(g()) == True\n",
        "idx_generation": 7,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, t=100, upper=1000) -> bool:\n    \"\"\"\n    Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n    * if n is even, divide n by 2,\n    * if n is odd, multiply n by 3 and add 1\n    Find `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n    \"\"\"\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= upper\ndef g(t = 100, upper = 1000):\n    # Faster solution for simultaneously solving multiple problems is of course possible\n    bound = t + 10\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 1) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return min(prev)\nassert f(g()) == True\n\n",
        "idx_generation": 272,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    \"\"\"\n    n = len(matrix)\n    magic_sum = n * (n ** 2 + 1) // 2\n\n    # Check rows\n    if any(sum(row) != magic_sum for row in matrix):\n        return False\n\n    # Check columns\n    if any(sum(column) != magic_sum for column in zip(*matrix)):\n        return False\n\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != magic_sum or sum(matrix[i][n - i - 1] for i in range(n)) != magic_sum:\n        return False\n\n    return True\n\ndef g(n=3):\n    \"\"\"\n    Generate a magic square of the given size.\n    \"\"\"\n    if n % 2 == 1:\n        # For odd-sized squares\n        magic_square = [[0] * n for _ in range(n)]\n        row, col = 0, n // 2\n        for num in range(1, n ** 2 + 1):\n            magic_square[row][col] = num\n            row -= 1\n            col = (col + 1) % n\n            if magic_square[row][col] != 0:\n                row = (row + 2) % n\n                col = (col - 1) % n\n    else:\n        # For doubly-even-sized squares\n        magic_square = [[(n * i + j + 1 + n // 2) % (n ** 2) for j in range(n)] for i in range(n)]\n\n    return magic_square\n\nassert f(g()) == True\n",
        "idx_generation": 416,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find two numbers in the given list that add up to the target number,\n    and return the indices of those numbers as a list.\n\n    If no such numbers exist, return an empty list.\n    \"\"\"\n    seen = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in seen:\n            return [seen[complement], i]\n        seen[num] = i\n    return []\n\ndef g(nums=[1, 2, 3, 4, 5], target=7):\n    return nums, target\n\nassert f(*g()) == [2, 3]\n\n",
        "idx_generation": 324,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(start: int, k=10, lower=-8326797433194240, seq=[49, -99, 80, 26, 54, 13, 37, 13, -52, -47]) -> bool:\n    \"\"\"Find the smallest subsequence of length k whose sum is greater than or equal to lower\"\"\"\n    subseq = seq[start:start+k]\n    return sum(subseq) >= lower\ndef g(k=10, lower=-8326797433194240, seq=[49, -99, 80, 26, 54, 13, 37, 13, -52, -47]):\n    sums = []\n    for i in range(len(seq) - k + 1):\n        subseq = seq[i:i+k]\n        sums.append(sum(subseq))\n    min_sum = min(sums)\n    return sums.index(min_sum)\nassert f(g()) == True\n",
        "idx_generation": 14,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], k=3, target=10) -> bool:\n    \"\"\"\n    Find if there exist k numbers in the list such that their sum is equal to the target number\n    \"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(numbers, k))\n\ndef g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return numbers\n\nassert f(g()) == True\n",
        "idx_generation": 41,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"\n    Given a list of numbers and an integer n, check if the product of all the numbers in the list is divisible by n.\n    \"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n    return product % n == 0\ndef g(nums=[2, 4, 6, 8, 10]):\n    return sum(nums)\nassert f(g()) == True\n",
        "idx_generation": 48,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Find if it is possible to obtain the target number using arithmetic operations on the given list of numbers\"\"\"\n    if len(nums) == 1:\n        return nums[0] == target\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            a, b = nums[i], nums[j]\n            remaining = [nums[k] for k in range(len(nums)) if k != i and k != j]\n            if f(remaining + [a + b]) or f(remaining + [a - b]) or f(remaining + [b - a]) or f(remaining + [a * b]) or (b != 0 and f(remaining + [a / b])) or (a != 0 and f(remaining + [b / a])):\n                return True\n    return False\n\ndef g(nums = [2, 4, 6, 8]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 150,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list where each element is the product of all other elements in the original list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6]\n\n    Output:\n    [720, 360, 240, 180, 144, 120]\n\n    Explanation: The first element in the output is the product of all other elements except 1, the second element is the product of all other elements except 2, and so on.\n    \"\"\"\n    n = len(nums)\n    left = [0] * n\n    right = [0] * n\n    result = [0] * n\n\n    left[0] = 1\n    right[n - 1] = 1\n\n    for i in range(1, n):\n        left[i] = nums[i - 1] * left[i - 1]\n\n    for i in range(n - 2, -1, -1):\n        right[i] = nums[i + 1] * right[i + 1]\n\n    for i in range(n):\n        result[i] = left[i] * right[i]\n\n    return result\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6]):\n    return (nums,)\n\nassert f(*g()) == [720, 360, 240, 180, 144, 120]\n\n",
        "idx_generation": 435,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Set\n\ndef f(s1: Set[int], s2: Set[int]) -> bool:\n    \"\"\"\n    Given two sets of integers, check if there is a pair of integers (one from each set)\n    such that their product is even.\n\n    Sample Input:\n    s1 = {1, 2, 3, 4, 5}\n    s2 = {6, 7, 8, 9, 10}\n\n    Sample Output:\n    True\n    \"\"\"\n    for num1 in s1:\n        for num2 in s2:\n            if (num1 * num2) % 2 == 0:\n                return True\n\n    return False\n\ndef g(s1: Set[int] = {1, 2, 3, 4, 5}, s2: Set[int] = {6, 7, 8, 9, 10}):\n    return s1, s2\n\nassert f(*g()) == True\n\n",
        "idx_generation": 437,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the product of all numbers in the list is greater than the target\"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n    return product > target\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 10000):\n    return (nums, target)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 100,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that add up to the target.\"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 15):\n    return (nums, target)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 352,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Given a list of integers, find the two numbers that add up to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in nums_set and complement != num:\n            return True\n    return True\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums\n\nassert f(g()) == True\n\n",
        "idx_generation": 264,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a grid where the sum of each row, each column, and both diagonals are the same.\n\n    Sample Input:\n    arr = [[3, 9, 2], [1, 5, 6], [7, 4, 8]]\n\n    Sample Output:\n    False\n    \"\"\"\n    n = len(arr)\n    target_sum = sum(arr[0])\n    for i in range(n):\n        if sum(arr[i]) != target_sum:\n            return False\n        if sum(arr[j][i] for j in range(n)) != target_sum:\n            return False\n    if sum(arr[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(arr[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[3, 9, 2], [1, 5, 6], [7, 4, 8]]):\n    return arr\n\nassert f(g()) == False\n",
        "idx_generation": 277,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n\n",
        "idx_generation": 401,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target value.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 9)\n\nassert f(*g()) == True\n",
        "idx_generation": 66,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3]) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a triple of numbers whose sum is equal to n.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == n:\n                    return True\n    return False\n\ndef g(nums=[1, 2, 3]):\n    return sum(nums)\n\nassert f(g())\n",
        "idx_generation": 460,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a subset of numbers that sums up to the target value\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n",
        "idx_generation": 27,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a palindrome.\n    A palindrome is a grid that reads the same horizontally and vertically.\n\n    Sample Input:\n    arr = [[1, 2, 3], [2, 3, 2], [3, 2, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(n):\n            if arr[i][j] != arr[j][i]:\n                return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [2, 3, 2], [3, 2, 1]]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 178,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, pattern: str) -> bool:\n    \"\"\"\n    Given a word and a pattern, check if the word matches the pattern.\n    The pattern consists of lowercase letters and the word consists of lowercase letters separated by a space.\n\n    Sample Input:\n    word = \"cat dog cat\"\n    pattern = \"aba\"\n\n    Sample Output:\n    True\n    \"\"\"\n    word_list = word.split()\n    pattern_list = list(pattern)\n\n    if len(word_list) != len(pattern_list):\n        return False\n\n    word_to_pattern = {}\n    pattern_to_word = {}\n\n    for i in range(len(word_list)):\n        word_char = word_list[i]\n        pattern_char = pattern_list[i]\n\n        if word_char in word_to_pattern:\n            if word_to_pattern[word_char] != pattern_char:\n                return False\n        else:\n            word_to_pattern[word_char] = pattern_char\n\n        if pattern_char in pattern_to_word:\n            if pattern_to_word[pattern_char] != word_char:\n                return False\n        else:\n            pattern_to_word[pattern_char] = word_char\n\n    return True\n\ndef g(word: str = \"cat dog cat\", pattern: str = \"aba\"):\n    return word, pattern\n\nassert f(*g()) == True\n\n",
        "idx_generation": 423,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"\n    Determine if a given string is a palindrome after removing exactly n characters from it.\n\n    Sample input:\n    \"racecar\", 2\n\n    Sample output:\n    True\n\n    Explanation:\n    By removing 'a' and 'e', the string \"racecar\" becomes a palindrome.\n    \"\"\"\n    if n < 0:\n        return False\n    if n == 0:\n        return s == s[::-1]\n    if len(s) <= 1:\n        return True\n    if s[0] == s[-1]:\n        return f(s[1:-1], n)\n    else:\n        return f(s[1:], n - 1) or f(s[:-1], n - 1)\ndef g(s: str = \"racecar\", n: int = 2):\n    return (s, n)\nassert f(*g())\n",
        "idx_generation": 48,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if the given number is a perfect power of 2.\n    \"\"\"\n    return n != 0 and (n & (n - 1)) == 0\n\ndef g():\n    n = 16\n    return n\n\nassert f(g()) == True\n",
        "idx_generation": 454,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if each row and each column contains unique values.\n    \"\"\"\n    row_set = set()\n    column_set = set()\n    \n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] in row_set:\n                return False\n            row_set.add(matrix[i][j])\n            \n            if matrix[j][i] in column_set:\n                return False\n            column_set.add(matrix[j][i])\n    \n    return True\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == True\n",
        "idx_generation": 419,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, n=1) -> bool:\n    \"\"\"\n    Check if the sum of the digits of 2^n is equal to the given digit s.\n    \"\"\"\n    digits_sum = sum(int(digit) for digit in str(2 ** n))\n    return digits_sum == int(s)\n\ndef g(n = 1):\n    return (\"2\" if n == 0 else \"2\" if n == 1 else \"4\")\n\nassert f(g()) == True\n",
        "idx_generation": 128,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(tri: List[int], edges=[[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]) -> bool:\n    \"\"\"Check if a given directed graph contains a cycle.\"\"\"\n    graph = {}\n    for edge in edges:\n        if edge[0] not in graph:\n            graph[edge[0]] = []\n        graph[edge[0]].append(edge[1])\n    visited = set()\n    def dfs(node, visited, stack):\n        visited.add(node)\n        stack.add(node)\n        for neighbor in graph.get(node, []):\n            if neighbor not in visited:\n                if dfs(neighbor, visited, stack):\n                    return True\n            elif neighbor in stack:\n                return True\n        stack.remove(node)\n        return False\n    for node in graph:\n        if dfs(node, visited, set()):\n            return True\n    return False\ndef g(edges = [[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]):\n    return edges\nassert f(g()) == True\n\n",
        "idx_generation": 307,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(tri: List[int], edges=[[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]) -> bool:\n    \"\"\"Check if a given directed graph contains a cycle.\"\"\"\n    graph = {}\n    for edge in edges:\n        if edge[0] not in graph:\n            graph[edge[0]] = []\n        graph[edge[0]].append(edge[1])\n    visited = set()\n    def dfs(node, visited, stack):\n        visited.add(node)\n        stack.add(node)\n        for neighbor in graph.get(node, []):\n            if neighbor not in visited:\n                if dfs(neighbor, visited, stack):\n                    return True\n            elif neighbor in stack:\n                return True\n        stack.remove(node)\n        return False\n    for node in graph:\n        if dfs(node, visited, set()):\n            return True\n    return False\ndef g(edges = [[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]):\n    return edges\nassert f(g()) == True\n\n",
        "idx_generation": 307,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(moves: List[List[int]], initial_state=[5, 8, 3, 0]) -> bool:\n    \"\"\"\n    Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\n    removing one or more objects from a single non-empty heap. The player who takes the last object wins.\n    - initial_state is list of numbers of objects in each heap\n    - moves is a list of your moves: [heap, number of objects to take]\n    - you play first\n    \"\"\"\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [5, 8, 3, 0]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g()) == True\n",
        "idx_generation": 51,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(nums: List[int], threshold=100, num_elements=4) -> bool:\n    \"\"\"Check if there exists a subset of num_elements integers that sum up to a value greater than or equal to threshold.\"\"\"\n    for subset in itertools.combinations(nums, num_elements):\n        if sum(subset) >= threshold:\n            return True\n    return False\n\ndef g(threshold=100, num_elements=4):\n    return [50, 60, 70, 80, 90, 100, 110, 120, 130, 140]\n\nassert f(g()) == True\n",
        "idx_generation": 166,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(inds: List[int], vecs=[169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]) -> bool:\n    \"\"\"\n    Parity learning: Given binary vectors in a subspace, find the secret set S of indices such that:\n    $\\\\sum_{i \\\\in S} x_i = 1 (mod 2)$\n    \"\"\"\n    return all((sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs))\n\ndef g(vecs = [169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]\nassert f(g()) == True\n\n",
        "idx_generation": 362,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the given list that sum up to the target value.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums: List[int], target: int):\n    return (nums, target)\n\nassert f(*g([1, 2, 3, 4, 5], 9)) == True\n",
        "idx_generation": 408,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int, k: int = 2) -> List[int]:\n    \"\"\"\n    Find k numbers in the given list nums that add up to the target value.\n    \"\"\"\n    nums.sort()\n    result = []\n    def backtrack(remain, start, path):\n        if remain == 0 and len(path) == k:\n            result.append(path)\n            return\n        for i in range(start, len(nums)):\n            if nums[i] > remain:\n                break\n            backtrack(remain - nums[i], i + 1, path + [nums[i]])\n\n    backtrack(target, 0, [])\n    return result\n\ndef g(nums=[2, 7, 11, 15], target=18, k=2):\n    return nums\n\nassert f(g(), target=18) == [[7, 11]]\n\n",
        "idx_generation": 87,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target number, find and return a list of indices of all occurrences of the target number in the list.\n    \"\"\"\n    indices = []\n    for i in range(len(nums)):\n        if nums[i] == target:\n            indices.append(i)\n    return indices\n\ndef g():\n    nums = [1, 2, 3, 4, 5, 5, 6, 7, 5]\n    target = 5\n    return (nums, target)\n\nassert f(*g()) == [4, 5, 8]\n\n",
        "idx_generation": 355,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"Given a list of numbers, find the maximum sum of any two adjacent numbers in the list.\"\"\"\n    max_sum = float('-inf')\n    for i in range(len(nums)-1):\n        adj_sum = nums[i] + nums[i+1]\n        if adj_sum > max_sum:\n            max_sum = adj_sum\n    return max_sum\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == 9\n",
        "idx_generation": 428,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a Latin square.\n\n    A Latin square is an n \u00d7 n array filled with n different symbols, each occurring exactly once in each row and exactly once in each column.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [2, 3, 1],\n              [3, 1, 2]]\n\n    Output:\n    True\n\n    Explanation: The matrix is a Latin square since each row and each column contains the numbers 1, 2, and 3 exactly once.\n    \"\"\"\n    n = len(matrix)\n    symbols = set(range(1, n + 1))\n\n    # Check each row\n    for row in matrix:\n        if set(row) != symbols:\n            return False\n\n    # Check each column\n    for col in range(n):\n        if set(matrix[i][col] for i in range(n)) != symbols:\n            return False\n\n    return True\n\ndef g(matrix=[[1, 2, 3], [2, 3, 1], [3, 1, 2]]):\n    return matrix\n\nassert f(g()) == True\n",
        "idx_generation": 228,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, k: int) -> str:\n    \"\"\"\n    Rotate the characters in the string to the right by k positions.\n\n    Sample Input:\n    s = \"abcdefg\"\n    k = 3\n\n    Sample Output:\n    \"efgabcd\"\n    \"\"\"\n    n = len(s)\n    k %= n\n    return s[-k:] + s[:-k]\n\ndef g(s: str = \"abcdefg\", k: int = 3):\n    return (s, k)\n\nassert f(*g()) == \"efgabcd\"\n",
        "idx_generation": 212,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"Check if there are k consecutive numbers in the list\"\"\"\n    nums.sort()\n    for i in range(len(nums) - k):\n        if nums[i] == nums[i + k - 1] - k + 1:\n            return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5], k=3):\n    return nums, k\nassert f(*g()) == True\n",
        "idx_generation": 44,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a subset of numbers that sums up to the target value\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\n\ndef g(target=10):\n    return [1, 2, 3, 5, 8, 13]\n\nassert f(g()) == True\n",
        "idx_generation": 23,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subarray with a sum divisible by k.\n\n    Example:\n    nums = [3, 6, 9, 12, 15]\n    k = 4\n    output: True\n    \"\"\"\n    prefix_sum = 0\n    seen = set()\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in seen:\n            return True\n        seen.add(prefix_sum)\n    return False\n\ndef g():\n    return [3, 6, 9, 12, 15], 4\n\nassert f(*g()) == True\n\n",
        "idx_generation": 284,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(grid: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a sudoku solution.\n    A sudoku solution must satisfy all of the following rules:\n    1. Each of the digits 1-9 must occur exactly once in each row.\n    2. Each of the digits 1-9 must occur exactly once in each column.\n    3. Each of the the digits 1-9 must occur exactly once in each of the 9 3x3 sub-grids.\n\n    Sample Input:\n    grid = [[5, 3, 0, 0, 7, 0, 0, 0, 0],\n            [6, 0, 0, 1, 9, 5, 0, 0, 0],\n            [0, 9, 8, 0, 0, 0, 0, 6, 0],\n            [8, 0, 0, 0, 6, 0, 0, 0, 3],\n            [4, 0, 0, 8, 0, 3, 0, 0, 1],\n            [7, 0, 0, 0, 2, 0, 0, 0, 6],\n            [0, 6, 0, 0, 0, 0, 2, 8, 0],\n            [0, 0, 0, 4, 1, 9, 0, 0, 5],\n            [0, 0, 0, 0, 8, 0, 0, 7, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    def has_duplicate(arr: List[int]) -> bool:\n        seen = set()\n        for num in arr:\n            if num != 0 and num in seen:\n                return True\n            seen.add(num)\n        return False\n\n    for row in grid:\n        if has_duplicate(row):\n            return False\n\n    for col in zip(*grid):\n        if has_duplicate(col):\n            return False\n\n    for i in range(3):\n        for j in range(3):\n            subgrid = [grid[x][y] for x in range(i*3, (i+1)*3) for y in range(j*3, (j+1)*3)]\n            if has_duplicate(subgrid):\n                return False\n\n    return True\n\ndef g(grid: List[List[int]] = [[5, 3, 0, 0, 7, 0, 0, 0, 0],\n                               [6, 0, 0, 1, 9, 5, 0, 0, 0],\n                               [0, 9, 8, 0, 0, 0, 0, 6, 0],\n                               [8, 0, 0, 0, 6, 0, 0, 0, 3],\n                               [4, 0, 0, 8, 0, 3, 0, 0, 1],\n                               [7, 0, 0, 0, 2, 0, 0, 0, 6],\n                               [0, 6, 0, 0, 0, 0, 2, 8, 0],\n                               [0, 0, 0, 4, 1, 9, 0, 0, 5],\n                               [0, 0, 0, 0, 8, 0, 0, 7, 9]]):\n    return grid\n\nassert f(g()) == True\n",
        "idx_generation": 418,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, remove all duplicates and return the modified list.\n    \"\"\"\n    return list(set(nums))\n\ndef g(nums: List[int] = [1, 2, 3, 2, 4, 5, 1, 3, 5]):\n    return nums\n\nassert f(g()) == [1, 2, 3, 4, 5]\n",
        "idx_generation": 331,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"Find if there are count numbers that add up to the target, but the numbers can be repeated\"\"\"\n    return any(sum(nums[i] for i in indices) == target for indices in itertools.combinations_with_replacement(range(len(nums)), count))\ndef g(target: int = 10, count: int = 2, nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return (nums, target, count)\nassert f(*g()) == True\n",
        "idx_generation": 46,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers contains any duplicate elements\n    \"\"\"\n    return len(set(nums)) < len(nums)\n\ndef g(nums: List[int]) -> List[int]:\n    \"\"\"\n    This solution returns the input list as is\n    \"\"\"\n    return nums\n\nassert f(g([1, 2, 3, 4, 5])) == False\n",
        "idx_generation": 46,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nimport math\nfrom typing import*\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"Find if there are count numbers that multiply to the target\"\"\"\n    return any(math.prod(nums[i] for i in indices) == target for indices in itertools.combinations(range(len(nums)), count))\ndef g(target: int = 10, count: int = 2, nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return (nums, target, count)\nassert f(*g()) == True\n",
        "idx_generation": 49,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], threshold=100, num_elements=3) -> bool:\n    \"\"\"Check if there exists a subset of num_elements integers that sum up to a value greater than or equal to threshold.\"\"\"\n    from itertools import combinations\n    for subset in combinations(nums, num_elements):\n        if sum(subset) >= threshold:\n            return True\n    return False\n\ndef g(threshold=100, num_elements=3):\n    return [50, 60, 70, 80, 90, 100, 110, 120, 130, 140]\n\nassert f(g()) == True\n",
        "idx_generation": 157,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: int, y: int, z: int, a: int = 3, b: int = 5) -> bool:\n    \"\"\"Check if the values of x, y and z are in an arithmetic progression with a common difference of a.\"\"\"\n    return y - x == z - y == a\n\ndef g(x: int = 1, y: int = 4, z: int = 7):\n    return x, y, z\n\nassert f(*g()) == True\n",
        "idx_generation": 109,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the sum of all the numbers in the list is divisible by 10.\n    \"\"\"\n    return sum(nums) % 10 == 0\n\ndef g():\n    return [10, 20, 30, 40, 50]\n\nassert f(g()) == True\n\n",
        "idx_generation": 411,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    A magic square is an n x n matrix of distinct positive integers where the sum of each row, each column, and both diagonals is the same value.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        if sum(matrix[i][j] for i in range(n)) != target_sum:\n            return False\n\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(matrix[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n\n    return True\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\nassert f(g([[2, 7, 6], [9, 5, 1], [4, 3, 8]])) == True\n",
        "idx_generation": 439,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import numpy as np\nfrom typing import*\n\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if there exists a submatrix in the given matrix such that the sum of its elements is less than or equal to the target.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    prefix_sum = np.zeros((rows + 1, cols + 1))\n    for i in range(1, rows + 1):\n        for j in range(1, cols + 1):\n            prefix_sum[i][j] = prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1] + matrix[i - 1][j - 1]\n\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i + 1, rows + 1):\n                for l in range(j + 1, cols + 1):\n                    submatrix_sum = prefix_sum[k][l] - prefix_sum[i][l] - prefix_sum[k][j] + prefix_sum[i][j]\n                    if submatrix_sum <= target:\n                        return True\n    \n    return False\n\ndef g(matrix: List[List[int]]):\n    \"\"\"\n    This solution returns the input matrix as is.\n    \"\"\"\n    return matrix\n\nassert f(g([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), 12) == True\n\n",
        "idx_generation": 291,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n",
        "idx_generation": 422,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is lower triangular\n    \"\"\"\n    n = len(matrix)\n    return all(matrix[i][j] == 0 for i in range(n) for j in range(i+1, n))\ndef g(matrix=[[1, 0, 0], [2, 3, 0], [4, 5, 6]]):\n    \"\"\"\n    This solution checks if all elements above the main diagonal are zero\n    \"\"\"\n    return matrix\nassert f(g()) == True\n",
        "idx_generation": 68,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=4) -> bool:\n    \"\"\"Check if there exists a subsequence of length k in the list that is strictly increasing and contains only prime numbers\"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    for i in range(len(nums)-k+1):\n        subsequence = nums[i:i+k]\n        if all(subsequence[j] in primes for j in range(k)):\n            return True\n    return False\n\ndef g(k=4):\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\nassert f(g()) == False\n",
        "idx_generation": 460,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a subset of numbers that sums up to the target value\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\n\ndef g(target=10):\n    return [1, 2, 3, 4, 7, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 29,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid forms a staircase pattern.\n    A staircase pattern starts with 1 in the first row, 2 in the second row, and so on.\n\n    Sample Input:\n    arr = [[1, 0, 0], [1, 2, 0], [1, 2, 3]]\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr[0])):\n            if arr[i][j] != 0:\n                return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 0, 0], [1, 2, 0], [1, 2, 3]]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 178,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it is a palindrome.\n    \"\"\"\n    return arr == arr[::-1]\n\ndef g(arr: List[int] = [1, 2, 3, 2, 1]):\n    \"\"\"\n    This solution returns the input list as is.\n    \"\"\"\n    return arr\n\nassert f(g()) == True\n\n",
        "idx_generation": 424,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"\n    Determine if a given string is a palindrome after removing exactly n characters from it.\n\n    Sample input:\n    \"level\", 1\n\n    Sample output:\n    True\n\n    Explanation:\n    By removing any one character, the string \"level\" becomes a palindrome.\n    \"\"\"\n    if n < 0:\n        return False\n    if n == 0:\n        return s == s[::-1]\n    if len(s) <= 1:\n        return True\n    if s[0] == s[-1]:\n        return f(s[1:-1], n)\n    else:\n        return f(s[1:], n - 1) or f(s[:-1], n - 1)\ndef g(s: str = \"level\", n: int = 1):\n    return (s, n)\nassert f(*g())\n",
        "idx_generation": 102,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, find the two elements that appear only once and return them in a new list.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 1, 2]\n\n    Sample Output:\n    [3, 4]\n    \"\"\"\n    xor_val = 0\n\n    for num in arr:\n        xor_val ^= num\n\n    # Find the rightmost set bit of xor_val\n    rightmost_set_bit = xor_val & -xor_val\n\n    num1, num2 = 0, 0\n\n    for num in arr:\n        if num & rightmost_set_bit:\n            num1 ^= num\n        else:\n            num2 ^= num\n\n    return [num1, num2]\n\ndef g(arr: List[int] = [1, 2, 3, 4, 1, 2]):\n    return arr\n\nassert f(g()) == [3, 4]\n",
        "idx_generation": 457,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a diagonal matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a diagonal matrix of the given size.\n    \"\"\"\n    return [[1 if i == j else 0 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n\n",
        "idx_generation": 422,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: float, a=99) -> bool:\n    \"\"\"Find a negative odd number that when squared is close to a.\"\"\"\n    return abs(x ** 2 - a) < 10 ** (-3) and x < 0 and x % 2 != 0\ndef g(a = 99):\n    return -a ** 0.5\nassert f(g()) == True\n",
        "idx_generation": 22,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a pangram.\"\"\"\n    alphabet = set('abcdefghijklmnopqrstuvwxyz')\n    for char in s.lower():\n        if char in alphabet:\n            alphabet.remove(char)\n        if not alphabet:\n            return True\n    return False\n\ndef g(s: str):\n    return s\n\nassert f(g(\"The quick brown fox jumps over the lazy dog\")) == True\n\n",
        "idx_generation": 159,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(tri: List[int], edges=[[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]) -> bool:\n    \"\"\"Check if a given directed graph contains a cycle.\"\"\"\n    graph = {}\n    for edge in edges:\n        if edge[0] not in graph:\n            graph[edge[0]] = []\n        graph[edge[0]].append(edge[1])\n    visited = set()\n    def dfs(node, visited, stack):\n        visited.add(node)\n        stack.add(node)\n        for neighbor in graph.get(node, []):\n            if neighbor not in visited:\n                if dfs(neighbor, visited, stack):\n                    return True\n            elif neighbor in stack:\n                return True\n        stack.remove(node)\n        return False\n    for node in graph:\n        if dfs(node, visited, set()):\n            return True\n    return False\ndef g(edges = [[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]):\n    return edges\nassert f(g()) == True\n\n",
        "idx_generation": 307,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(tri: List[int], edges=[[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]) -> bool:\n    \"\"\"Check if a given directed graph contains a cycle.\"\"\"\n    graph = {}\n    for edge in edges:\n        if edge[0] not in graph:\n            graph[edge[0]] = []\n        graph[edge[0]].append(edge[1])\n    visited = set()\n    def dfs(node, visited, stack):\n        visited.add(node)\n        stack.add(node)\n        for neighbor in graph.get(node, []):\n            if neighbor not in visited:\n                if dfs(neighbor, visited, stack):\n                    return True\n            elif neighbor in stack:\n                return True\n        stack.remove(node)\n        return False\n    for node in graph:\n        if dfs(node, visited, set()):\n            return True\n    return False\ndef g(edges = [[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]):\n    return edges\nassert f(g()) == True\n\n",
        "idx_generation": 470,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 15):\n    return (nums, target)\n\nassert f(*g()) == True\n",
        "idx_generation": 56,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nimport math\nfrom typing import*\ndef f(nums: List[int], target=100, count=4) -> bool:\n    \"\"\"\n    Find if there are count numbers that multiply to the target.\n    \"\"\"\n    from itertools import combinations\n    return any(math.prod(c) == target for c in combinations(nums, count))\n\ndef g(target = 100, count = 4):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 179,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=1) -> bool:\n    \"\"\"What is the sum of the first n prime numbers?\"\"\"\n    primes = [2]\n    num = 3\n    while len(primes) < n:\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n        num += 2\n    return sum(primes) == int(s)\ndef g(n = 1):\n    primes = [2]\n    num = 3\n    while len(primes) < n:\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n        num += 2\n    return str(sum(primes))\nassert f(g())\n",
        "idx_generation": 446,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there are three integers in the given list that add up to the target number.\n\n    Sample Input:\n    [1, 2, 3, 4, 5, 6, 7, 8, 9], 15\n\n    Sample Output:\n    True\n    \"\"\"\n    nums.sort()\n    for i in range(len(nums) - 2):\n        left = i + 1\n        right = len(nums) - 1\n        while left < right:\n            total = nums[i] + nums[left] + nums[right]\n            if total == target:\n                return True\n            elif total < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g(), 15) == True\n",
        "idx_generation": 409,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"\n    Given a list of numbers, find a subset of numbers that sums up to the target_sum.\n    Return True if such a subset exists, False otherwise.\n    \"\"\"\n    def subset_sum(numbers, target_sum, memo={}):\n        if target_sum in memo:\n            return memo[target_sum]\n        if target_sum == 0:\n            return True\n        if target_sum < 0 or not numbers:\n            return False\n        include = subset_sum(numbers[1:], target_sum - numbers[0], memo)\n        exclude = subset_sum(numbers[1:], target_sum, memo)\n        memo[target_sum] = include or exclude\n        return memo[target_sum]\n\n    return subset_sum(numbers, target_sum)\n\ndef g(numbers=[10, 20, 30, 40, 50]):\n    return (numbers,)\n\nassert f(*g()) == True\n",
        "idx_generation": 104,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, find and return a new list containing only the even numbers from the original list in the same order.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    output: [2, 4, 6, 8, 10]\n    \"\"\"\n    even_nums = []\n    for num in nums:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g()) == [2, 4, 6, 8, 10]\n\n",
        "idx_generation": 423,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if the list contains two consecutive elements whose sum is equal to the target\"\"\"\n    return any(nums[i] + nums[i+1] == target for i in range(len(nums)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 7) == True\n",
        "idx_generation": 437,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the minimum difference between any two elements in the list.\n    \"\"\"\n    nums.sort()\n    min_diff = float('inf')\n    for i in range(len(nums) - 1):\n        diff = abs(nums[i] - nums[i+1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n\ndef g():\n    return [5, 10, 2, 8, 3, 7]\n    \nassert f(g()) == 1\n\n",
        "idx_generation": 239,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g()) == True\n",
        "idx_generation": 218,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"Find if there are count numbers that add up to the target, but the numbers can be repeated\"\"\"\n    return any(sum(nums[i] for i in indices) == target for indices in itertools.combinations(range(len(nums)), count))\ndef g(target: int = 10, count: int = 2, nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return (nums, target, count)\nassert f(*g()) == True\n\n",
        "idx_generation": 45,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there is a subset of numbers that sums up to the target value\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\n\ndef g(target=20):\n    return [1, 3, 5, 7, 9, 11]\n\nassert f(g()) == True\n",
        "idx_generation": 27,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to exactly k.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == k:\n            return True\n        if prefix_sum - k in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False\n\ndef g(nums: List[int], k: int):\n    \"\"\"\n    This solution returns the input list and target value as is.\n    \"\"\"\n    return (nums, k)\n\nnums = [2, 4, 6, 8, 10]\nk = 18\n\nassert f(*g(nums, k)) == True\n\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the smallest positive integer that is missing from the list.\n\n    Example:\n    nums = [1, 3, 5, 2, 6, 8, 9]\n\n    Output:\n    4\n\n    Explanation: The smallest positive integer missing from the list is 4.\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]:\n            nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n\n    for i in range(n):\n        if nums[i] != i + 1:\n            return i + 1\n\n    return n + 1\n\ndef g(nums: List[int] = [1, 3, 5, 2, 6, 8, 9]):\n    return (nums,)\n\nassert f(*g()) == 4\n\n",
        "idx_generation": 435,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> int:\n    \"\"\"\n    Find the number of pairs in the list whose sum is equal to the target value.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    target = 5\n\n    Sample output:\n    2\n\n    Explanation: The pairs that add up to the target value are (1, 4) and (2, 3).\n    \"\"\"\n    count = 0\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            count += 1\n    return count // 2\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 5) == 2\n",
        "idx_generation": 348,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(li: List[int], target=12) -> bool:\n    \"\"\"\n    Find a list of integers that contains exactly three distinct values, such that the sum of the values is equal to the target.\n    \"\"\"\n    return len(set(li)) == 3 and sum(li) == target\n\ndef g(target=12):\n    return [2, 4, 6]\n\nassert f(g()) == True\n",
        "idx_generation": 67,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import *\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"\n    Determine if it is possible to find a pair of numbers in a list that multiplies to a target number. The pair of numbers\n    must be distinct and the order of the numbers in the pair does not matter.\n\n    Sample input:\n    [2, 4, 6, 8]\n\n    Sample output:\n    True\n\n    The pair of numbers (2, 8) multiplies to 16, which is the target number.\n    \"\"\"\n    return any(target / num in numbers for num in numbers if target % num == 0)\ndef g(target=0):\n    return [2, 4, 6, int(target / 2)]\nassert f(g()) == True\n",
        "idx_generation": 49,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find two numbers in the list such that their product is equal to the target.\n\n    Sample Input:\n    [2, 4, 6, 8], 24\n\n    Sample Output:\n    True\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target / num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\ndef g():\n    return [2, 4, 6, 8]\nassert f(g(), 24)\n",
        "idx_generation": 61,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if a list is a perfect square sequence.\n    A perfect square sequence is defined as a list where each element is the square of the previous element.\"\"\"\n    if len(arr) < 2:\n        return False\n    for i in range(1, len(arr)):\n        if arr[i] != arr[i-1] ** 2:\n            return False\n    return True\n\ndef g(start: int, length: int):\n    \"\"\"Generate a perfect square sequence.\"\"\"\n    return [start ** 2 ** i for i in range(length)]\n\nassert f(g(2, 5)) == True\n",
        "idx_generation": 172,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains only even numbers\"\"\"\n    return all(num % 2 == 0 for num in nums)\n\ndef g():\n    nums = [2, 4, 6, 8, 10]\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 119,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in the given list that add up to the target number.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 8\n\n    Sample Output:\n    True\n    \"\"\"\n    s = set()\n    for num in nums:\n        if target - num in s:\n            return True\n        s.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 8):\n    return nums, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 436,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a grid where the sum of each row, column, and diagonal is the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    target_sum = sum(arr[0])\n    row_sums = [sum(row) for row in arr]\n    col_sums = [sum(col) for col in zip(*arr)]\n    diagonal_sum1 = sum(arr[i][i] for i in range(len(arr)))\n    diagonal_sum2 = sum(arr[i][len(arr)-1-i] for i in range(len(arr)))\n    return all(sum == target_sum for sum in row_sums + col_sums + [diagonal_sum1, diagonal_sum2])\n\ndef g(arr: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 292,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there is a subsequence of numbers in the list that sums up to the target value.\n\n    Sample Input:\n    `nums = [1, 2, 3, 4, 5]`\n    `target = 7`\n\n    Sample Output:\n    `True`\n    \"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    return dp[n][target]\n\ndef g(target=7):\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n",
        "idx_generation": 78,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=2) -> bool:\n    \"\"\"Check if there exists a subsequence of length k in the list that is strictly increasing and contains both even and odd numbers\"\"\"\n    for i in range(len(nums)-k+1):\n        subsequence = nums[i:i+k]\n        if all(subsequence[j] < subsequence[j+1] for j in range(k-1)) and any(subsequence[j] % 2 == 0 for j in range(k)) and any(subsequence[j] % 2 != 0 for j in range(k)):\n            return True\n    return False\n\ndef g(k=2):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 460,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"\n    Check if there exists a subsequence of numbers in the given list that sums up to the target value.\n\n    Example:\n    nums = [1, 2, 3, 4]\n    target = 5\n\n    Output:\n    True\n    \"\"\"\n    def subseq_sum(nums, target, index):\n        if target == 0:\n            return True\n        if index >= len(nums) or target < 0:\n            return False\n        return subseq_sum(nums, target - nums[index], index + 1) or subseq_sum(nums, target, index + 1)\n    return subseq_sum(nums, target, 0)\n\ndef g(target=5):\n    return [1, 2, 3, 4]\n\nassert f(g()) == True\n",
        "idx_generation": 33,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid of numbers where the sum of each row, each column, and each diagonal are equal.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    target_sum = sum(arr[0])  # sum of the first row\n\n    # Check rows\n    for row in arr:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for col in range(n):\n        col_sum = 0\n        for row in range(n):\n            col_sum += arr[row][col]\n        if col_sum != target_sum:\n            return False\n\n    # Check diagonals\n    diagonal_sum = 0\n    anti_diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += arr[i][i]\n        anti_diagonal_sum += arr[i][n - i - 1]\n    if diagonal_sum != target_sum or anti_diagonal_sum != target_sum:\n        return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 191,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a string is a palindrome.\n    \"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g()) == True\n",
        "idx_generation": 425,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, sub_str='abc') -> bool:\n    \"\"\"Check if the given string contains the sub_str as a substring.\"\"\"\n    return sub_str in s\ndef g(sub_str='abc'):\n    return \"xyz\" + sub_str + \"123\"\nassert f(g()) == True\n",
        "idx_generation": 130,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D matrix of integers, check if the matrix is a sparse matrix.\n    A sparse matrix is a matrix where the majority of its elements are zero.\n\n    Sample Input:\n    matrix = [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\n    Sample Output:\n    True\n    \"\"\"\n    zero_count = 0\n    total_elements = 0\n    \n    for row in matrix:\n        zero_count += row.count(0)\n        total_elements += len(row)\n    \n    # Check if matrix is a sparse matrix\n    if zero_count / total_elements > 0.5:\n        return True\n    \n    return False\n\ndef g(matrix: List[List[int]] = [[1, 0, 0], [0, 2, 0], [0, 0, 3]]):\n    return matrix\n\nassert f(g()) == True\n",
        "idx_generation": 423,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: float, a=25) -> bool:\n    \"\"\"Find a number that when cubed is close to a.\"\"\"\n    return abs(x ** 3 - a) < 10 ** (-3)\ndef g(a = 25):\n    return a ** (1/3)\nassert f(g()) == True\n",
        "idx_generation": 22,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, s='abcdefghij') -> bool:\n    \"\"\"\n    Given an integer n and a string s, determine if the nth character of s is equal to the last character of s.\n\n    Sample Input:\n    n = 4\n    s = \"abcdefghij\"\n\n    Sample Output:\n    False\n\n    Explanation:\n    The 4th character of s is 'd', which is not equal to the last character 'j'.\n    \"\"\"\n    return s[n] == s[-1]\n\ndef g(s='abcdefghij'):\n    return len(s) - 1\n\nassert f(g()) == True\n",
        "idx_generation": 190,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=3, s=12) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a % 3 == 0 for a in x])\ndef g(n = 3, s = 12):\n    x = [3] * n\n    x[0] = s - (3 * (n - 1))\n    return x\nassert f(g())\n",
        "idx_generation": 317,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Check if there is a subset of numbers that multiplies up to the target value\n    \"\"\"\n    def subset_product(nums, target):\n        if target == 1:\n            return True\n        if not nums or target < 1:\n            return False\n        return subset_product(nums[1:], target // nums[0]) or subset_product(nums[1:], target)\n    return subset_product(nums, target)\n\ndef g(target=100):\n    return [2, 4, 5, 10, 20]\n\nassert f(g()) == True\n",
        "idx_generation": 56,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: List[int], n=4, s=20) -> bool:\n    \"\"\"Find a list of n positive integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 4, s = 20):\n    if n == 1:\n        return [s]\n    elif n == 2:\n        return [s - 1, 1]\n    elif n == 3:\n        return [s - 2, 1, 1]\n    else:\n        return [s/4, s/4, s/4, s/4]\nassert f(g()) == True\n",
        "idx_generation": 181,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum product of any two numbers in the list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    20\n\n    Explanation: The maximum product is 5 * 4 = 20.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            product = nums[i] * nums[j]\n            max_product = max(max_product, product)\n    return max_product\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == 20\n\n",
        "idx_generation": 409,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a sorted array of distinct integers and a target value, return the index if the target is found.\n    If not, return the index where it would be if it were inserted in order.\n\n    Sample Input:\n    nums = [1,3,5,6], target = 5\n\n    Sample Output:\n    2\n    \"\"\"\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n\ndef g(nums: List[int] = [1, 3, 5, 6], target: int = 5):\n    return (nums, target)\n\nassert f(*g()) == 2\n",
        "idx_generation": 172,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are two distinct indices i and j in the list such that the absolute difference between nums[i] and nums[j] is less than target.\n\n    Sample Input:\n    nums = [1, 5, 7, 10, 15]\n    target = 4\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if any(num - i < target and num - i >= 0 for i in num_set):\n            return True\n        if any(i - num < target and i - num >= 0 for i in num_set):\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 5, 7, 10, 15], target: int = 4):\n    return (nums, target)\n\nassert f(*g()) == True\n",
        "idx_generation": 434,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, find and return the median of the list.\n\n    Example:\n    arr = [5, 2, 8, 1, 10]\n\n    Output:\n    5\n    \"\"\"\n    sorted_arr = sorted(arr)\n    n = len(sorted_arr)\n    if n % 2 == 0:\n        return (sorted_arr[n // 2] + sorted_arr[n // 2 - 1]) / 2\n    else:\n        return sorted_arr[n // 2]\n\ndef g():\n    return [5, 2, 8, 1, 10]\n\nassert f(g()) == 5\n\n",
        "idx_generation": 242,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix.\"\"\"\n    n = len(matrix)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix=[[1,2,3],[2,4,5],[3,5,6]]):\n    return matrix\n\nassert f(g()) == True\n",
        "idx_generation": 223,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"Find if there are count numbers that add up to the target\"\"\"\n    return any(sum(nums[i] for i in indices) == target for indices in itertools.combinations(range(len(nums)), count))\ndef g(target: int = 15, count: int = 3, nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return (nums, target, count)\nassert f(*g()) == True\n",
        "idx_generation": 55,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(li: List[int], n=7) -> bool:\n    \"\"\"Check if there exists n consecutive numbers in the list li\"\"\"\n    return any(all(li[i+j] == li[i]+j for j in range(n)) for i in range(len(li)-n+1))\ndef g(n = 7):\n    return list(range(n))\nassert f(g()) == True\n",
        "idx_generation": 40,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if there exists a pair of numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return arr, target\n\nassert f(*g()) == True\n",
        "idx_generation": 353,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n\n    A magic square is a grid where the sum of all elements in each row, column, and both diagonals is equal and each number from 1 to n^2 (where n is the size of the grid) is used exactly once.\n\n    Sample Input:\n    arr = [[16, 3, 2, 13], [5, 10, 11, 8], [9, 6, 7, 12], [4, 15, 14, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    target_sum = n * (n**2 + 1) // 2\n\n    # Check rows\n    for row in arr:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for i in range(n):\n        col_sum = 0\n        for j in range(n):\n            col_sum += arr[j][i]\n        if col_sum != target_sum:\n            return False\n\n    # Check diagonal 1\n    diag1_sum = 0\n    for i in range(n):\n        diag1_sum += arr[i][i]\n    if diag1_sum != target_sum:\n        return False\n\n    # Check diagonal 2\n    diag2_sum = 0\n    for i in range(n):\n        diag2_sum += arr[i][n - i - 1]\n    if diag2_sum != target_sum:\n        return False\n\n    # Check if all numbers from 1 to n^2 are used exactly once\n    nums = set()\n    for row in arr:\n        for num in row:\n            if num < 1 or num > n**2 or num in nums:\n                return False\n            nums.add(num)\n\n    return True\n\ndef g(arr: List[List[int]] = [[16, 3, 2, 13], [5, 10, 11, 8], [9, 6, 7, 12], [4, 15, 14, 1]]):\n    return arr\n\nassert f(g()) == True\n\n",
        "idx_generation": 461,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the unique elements.\n\n    Sample Input:\n    [1, 2, 3, 2, 4, 1]\n\n    Sample Output:\n    [1, 2, 3, 4]\n    \"\"\"\n    return list(set(nums))\n\ndef g(nums=[1, 2, 3, 2, 4, 1]):\n    return nums\n\nassert f(g()) == [1, 2, 3, 4]\n\n",
        "idx_generation": 400,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: List[int], n=4, s=20) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 4, s = 20):\n    if n == 1:\n        return [s]\n    elif n == 2:\n        return [s - 1, 1]\n    elif n == 3:\n        return [s - 2, 1, 1]\n    else:\n        return [s/4, s/4, s/4, s/4]\nassert f(g()) == True\n",
        "idx_generation": 73,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Check if the target number is the sum of any two adjacent numbers in the matrix\"\"\"\n    for row in matrix:\n        for i in range(len(row)-1):\n            if row[i] + row[i+1] == target:\n                return True\n    for col in zip(*matrix):\n        for i in range(len(col)-1):\n            if col[i] + col[i+1] == target:\n                return True\n    return False\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g()) == True\n",
        "idx_generation": 60,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square\n    \"\"\"\n    n = len(matrix)\n    target_sum = n * (n**2 + 1) // 2\n    rows = all(sum(row) == target_sum for row in matrix)\n    cols = all(sum(col) == target_sum for col in zip(*matrix))\n    diag1 = sum(matrix[i][i] for i in range(n)) == target_sum\n    diag2 = sum(matrix[i][n-i-1] for i in range(n)) == target_sum\n    return rows and cols and diag1 and diag2\ndef g(matrix=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    \"\"\"\n    This solution checks if all rows, columns, and diagonals have the same sum\n    \"\"\"\n    return matrix\nassert f(g()) == True\n",
        "idx_generation": 68,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find a sublist of consecutive numbers in nums that sums up to target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False\n\ndef g(target=15):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 182,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, substring: str = 'abc') -> bool:\n    \"\"\"\n    Determine if the given substring is a subsequence of the string s.\n\n    Sample Input:\n    s = \"ahbgdc\"\n    substring = \"abc\"\n\n    Sample Output:\n    True\n    \"\"\"\n    i = 0\n    for char in s:\n        if char == substring[i]:\n            i += 1\n        if i == len(substring):\n            return True\n    return False\n\ndef g(s: str = \"ahbgdc\", substring: str = \"abc\"):\n    return (s, substring)\n\nassert f(*g())\n",
        "idx_generation": 128,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target k, check if there exist two numbers in the list whose sum is equal to k.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    k = 12\n\n    Sample Output:\n    True\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = k - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 12\n\nassert f(*g()) == True\n",
        "idx_generation": 463,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, find the sum of each row and return a list of the sums.\n    \"\"\"\n    result = []\n    \n    for row in matrix:\n        result.append(sum(row))\n        \n    return result\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [6, 15, 24]\n\n",
        "idx_generation": 299,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in a list whose sum is equal to a given target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == False\n",
        "idx_generation": 88,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return the sum of each column in the matrix.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    [12, 15, 18]\n    \"\"\"\n    column_sum = []\n    for j in range(len(matrix[0])):\n        col_sum = 0\n        for i in range(len(matrix)):\n            col_sum += matrix[i][j]\n        column_sum.append(col_sum)\n    return column_sum\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [12, 15, 18]\n",
        "idx_generation": 461,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, numbers=[3, 7, 4, 2, 9, 1, 5, 8, 6]) -> bool:\n    \"\"\"\n    Find if there is a subset of numbers that sums up to n\n    \"\"\"\n    def subset_sum(numbers, n):\n        if n == 0:\n            return True\n        if not numbers or n < 0:\n            return False\n        return subset_sum(numbers[1:], n - numbers[0]) or subset_sum(numbers[1:], n)\n    \n    return subset_sum(numbers, n)\n\ndef g(n = 15, numbers=[3, 7, 4, 2, 9, 1, 5, 8, 6]):\n    return n, numbers\n\nassert f(*g())\n",
        "idx_generation": 41,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 194,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n    \"\"\"\n    return string == string[::-1]\n\ndef g():\n    string = \"level\"\n    return string\n\nassert f(g()) == True\n",
        "idx_generation": 427,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums: List[int] = [1, 2, 3, 2, 1]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 163,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of numbers, return a new list with the square root of each element.\n\n    Example:\n    nums = [1, 4, 9, 16, 25]\n\n    Output:\n    [1.0, 2.0, 3.0, 4.0, 5.0]\n    \"\"\"\n    return [math.sqrt(num) for num in nums]\n\ndef g():\n    return [1, 4, 9, 16, 25]\n\nassert f(g()) == [1.0, 2.0, 3.0, 4.0, 5.0]\n\n",
        "idx_generation": 430,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(num: int) -> bool:\n    \"\"\"Check if the given number is a perfect square.\"\"\"\n    return int(num ** 0.5) ** 2 == num\n\ndef g():\n    num = 49\n    return num\n\nassert f(g()) == True\n",
        "idx_generation": 26,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"\n    Given two strings s1 and s2, determine if s2 is a rotation of s1.\n\n    Sample Input:\n    s1 = \"waterbottle\"\n    s2 = \"erbottlewat\"\n\n    Sample Output:\n    True\n    \"\"\"\n    if len(s1) != len(s2):\n        return False\n    return s2 in (s1 + s1)\n\ndef g(s1: str = \"waterbottle\", s2: str = \"erbottlewat\"):\n    return (s1, s2)\n\nassert f(*g())\n",
        "idx_generation": 222,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are exactly 'count' numbers that form a valid geometric progression with a common ratio of 'target'.\n\n    Sample Input:\n    nums = [1, 2, 4, 8, 16]\n    target = 2\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(nums[i] * target == nums[i+1] and nums[i+1] * target == nums[i+2] for i in range(len(nums)-2))\n\ndef g(nums: List[int] = [1, 2, 4, 8, 16], target: int = 2, count: int = 3):\n    return (nums, target, count)\n\nassert f(*g())\n",
        "idx_generation": 403,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: List[int], n=3, s=15) -> bool:\n    \"\"\"Find a list of n integers that sum up to s and have all distinct digits\"\"\"\n    def has_unique_digits(num):\n        digits = set(str(num))\n        return len(digits) == len(str(num))\n\n    return len(x) == n and sum(x) == s and all([has_unique_digits(a) for a in x])\ndef g(n = 3, s = 15):\n    if n == 1:\n        return [s]\n    elif n == 2:\n        return [s - 1, 1]\n    else:\n        return [s - 2, 1, 1]\nassert f(g()) == True\n",
        "idx_generation": 62,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=3, s=10) -> bool:\n    \"\"\"Check if there exists a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\n\ndef g(n = 3, s = 10):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\n\nassert f(g())\n",
        "idx_generation": 229,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Find the maximum element in the given list.\n\n    Sample Input:\n    arr = [3, 9, 2, 5, 1]\n\n    Sample Output:\n    9\n    \"\"\"\n    max_element = float('-inf')\n    for num in arr:\n        if num > max_element:\n            max_element = num\n    return max_element\n\ndef g(arr: List[int] = [3, 9, 2, 5, 1]):\n    return arr\n\nassert f(g()) == 9\n",
        "idx_generation": 410,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a subarray with a sum equal to zero.\n\n    Sample Input:\n    nums = [4, 2, -3, 1, 6]\n\n    Sample Output:\n    True\n    \"\"\"\n    seen = set()\n    prefix_sum = 0\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum in seen or prefix_sum == 0:\n            return True\n        seen.add(prefix_sum)\n    return False\n\ndef g():\n    return [4, 2, -3, 1, 6]\n\nassert f(g()) == True\n",
        "idx_generation": 191,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return the last column of the matrix.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    [3, 6, 9]\n    \"\"\"\n    last_column = []\n    for row in matrix:\n        last_column.append(row[-1])\n    return last_column\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [3, 6, 9]\n",
        "idx_generation": 438,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"\n    Given an array of integers and a target value, find the maximum product of three numbers in the array.\n    Return the maximum product.\n    \"\"\"\n    n = len(arr)\n    if n < 3:\n        return 0\n    arr.sort()\n    return max(arr[0] * arr[1] * arr[n-1], arr[n-1] * arr[n-2] * arr[n-3])\n\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return arr\n\nassert f(g()) == 504\n\n",
        "idx_generation": 250,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a lower triangular matrix.\"\"\"\n    n = len(matrix)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(matrix=[[1, 0, 0], [2, 3, 0], [4, 5, 6]]):\n    return matrix\n\nassert f(g()) == True\n",
        "idx_generation": 276,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, determine if it is a permutation of the numbers from 1 to N (where N is the length of the list).\n\n    Sample Input:\n    nums = [4, 2, 3, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    nums.sort()\n    return nums == list(range(1, len(nums) + 1))\n\ndef g(nums: List[int]):\n    return nums\n\nassert f(g([4, 2, 3, 1]))\n",
        "idx_generation": 63,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"Find if there are count numbers that add up to the target, but the numbers cannot be repeated\"\"\"\n    return any(sum(nums[i] for i in indices) == target for indices in itertools.combinations(range(len(nums)), count))\ndef g(target: int = 10, count: int = 2, nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return (nums, target, count)\nassert f(*g()) == True\n\n",
        "idx_generation": 45,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k: int, target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target sum, find if there are k non-negative integers in the list that sum up to the target.\n    \"\"\"\n    if k == 0 and target == 0:\n        return True\n    elif k == 0 or target <= 0 or len(nums) == 0:\n        return False\n    else:\n        return f(nums[1:], k-1, target-nums[0]) or f(nums[1:], k, target)\n\ndef g(nums=[2, 4, 6, 8, 10], k=3, target=18):\n    return nums\n\nassert f(g(), k=3, target=18)\n",
        "idx_generation": 479,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 469,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the number n is a palindrome.\"\"\"\n    return str(n) == str(n)[::-1]\ndef g():\n    return 12321\nassert f(g()) == True\n",
        "idx_generation": 0,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with all the duplicates removed.\n    The order of the elements in the new list should be the same as the original list.\n    \"\"\"\n    return list(set(nums))\n\ndef g(nums: List[int] = [1, 2, 3, 4, 3, 2, 5, 6, 1]):\n    return nums\n\nassert f(g()) == [1, 2, 3, 4, 5, 6]\n",
        "idx_generation": 404,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"\n    Find a list of integers containing exactly five distinct values, such that no integer repeats\n    twice consecutively among the first twelve entries and the product of all the elements is positive.\n    (So the list needs to have length greater than eleven.)\n    \"\"\"\n    return all([li[i] != li[i + 1] for i in range(11)]) and len(set(li)) == 5 and all(li) > 0\n\ndef g():\n    return [i % 5 + 1 for i in range(12)]\n\nassert f(g()) == True\n",
        "idx_generation": 76,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find two numbers in the given list that add up to the target number.\n    Return the indices of the two numbers.\n\n    Sample Input:\n    nums = [3, 1, 5, 8]\n    target = 9\n\n    Sample Output:\n    [1, 3]\n    \"\"\"\n    complements = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in complements:\n            return [complements[complement], i]\n        complements[num] = i\n    return []\n\ndef g(nums=[3, 1, 5, 8], target=9):\n    return nums, target\n\nassert f(*g()) == [1, 3]\n",
        "idx_generation": 67,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a magic square, i.e., the sums of all rows, columns, and diagonals are equal.\n\n    Sample input:\n    [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample output:\n    True\n\n    The matrix is a magic square.\n    \"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diag_sum1 = sum(matrix[i][i] for i in range(len(matrix)))\n    diag_sum2 = sum(matrix[i][len(matrix)-1-i] for i in range(len(matrix)))\n    return all(val == row_sums[0] for val in row_sums) and \\\n           all(val == col_sums[0] for val in col_sums) and \\\n           diag_sum1 == row_sums[0] and \\\n           diag_sum2 == row_sums[0]\n\ndef g(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    This solution returns the matrix as is\n    \"\"\"\n    return matrix\n\nassert f(g([[2, 7, 6], [9, 5, 1], [4, 3, 8]]))\n",
        "idx_generation": 69,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: List[int], n=3, s=100) -> bool:\n    \"\"\"Find a list of n positive integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\n\ndef g(n = 3, s = 100):\n    x = [25, 25, 50]\n    return x[:n]\n\nassert f(g()) == True\n",
        "idx_generation": 202,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import math\nfrom typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int = 3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the given array, such that the product of its elements is divisible by k.\"\"\"\n    for i in range(len(arr) - k + 1):\n        subarr = arr[i:i+k]\n        if math.prod(subarr) % k == 0:\n            return True\n    return False\n\ndef g(k: int = 3):\n    return [k] * k\n\nassert f(g()) == True\n",
        "idx_generation": 132,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target number, return a new list with all occurrences of the target number removed.\n\n    Example:\n    arr = [1, 2, 3, 4, 2, 5]\n    target = 2\n    output: [1, 3, 4, 5]\n    \"\"\"\n    return [num for num in arr if num != target]\n\ndef g():\n    return [1, 2, 3, 4, 2, 5], 2\n\nassert f(*g()) == [1, 3, 4, 5]\n\n\n",
        "idx_generation": 476,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size with random elements\n    \"\"\"\n    import random\n    return [[random.randint(0, 9) if j <= i else 0 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n\n\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the sum of each row in the matrix is equal to the sum of each column in the matrix.\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return all(sum == 0 for sum in row_sums) and all(sum == 0 for sum in col_sums)\n\ndef g(matrix=[[0,0,0],[0,0,0],[0,0,0]]):\n    return matrix\n\nassert f(g()) == True\n",
        "idx_generation": 90,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix of integers, return the transpose of the matrix.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    [[1, 4, 7],\n     [2, 5, 8],\n     [3, 6, 9]]\n    \"\"\"\n    transpose = []\n    for j in range(len(matrix[0])):\n        trans_row = []\n        for i in range(len(matrix)):\n            trans_row.append(matrix[i][j])\n        transpose.append(trans_row)\n    return transpose\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n",
        "idx_generation": 461,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, k: int, numbers=[3, 7, 4, 2, 9, 1, 5, 8, 6]) -> bool:\n    \"\"\"\n    Find if there are k numbers in the list that sum up to n.\n    \"\"\"\n    def k_sum(numbers, k, n):\n        if k == 0 and n == 0:\n            return True\n        if k <= 0 or n <= 0 or not numbers:\n            return False\n        return k_sum(numbers[1:], k - 1, n - numbers[0]) or k_sum(numbers[1:], k, n)\n    \n    return k_sum(numbers, k, n)\n\ndef g(n = 15, k = 3, numbers=[3, 7, 4, 2, 9, 1, 5, 8, 6]):\n    return n, k, numbers\n\nassert f(*g())\n",
        "idx_generation": 41,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 194,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if the string is a valid email address.\n    \"\"\"\n    if '@' not in string:\n        return False\n    if '.' not in string[string.index('@'):]:\n        return False\n    return True\n\ndef g():\n    return \"test@example.com\"\n\nassert f(g())\n",
        "idx_generation": 427,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a palindrome.\n\n    Args:\n        nums: A list of integers.\n\n    Returns:\n        True if the list is a palindrome, False otherwise.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g() -> List[int]:\n    return [1, 2, 3, 2, 1]\n\nassert f(g()) == True\n",
        "idx_generation": 181,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a perfect square sequence.\n    A perfect square sequence is a list of numbers in which each number is a perfect square.\n    \"\"\"\n    for num in nums:\n        if int(num ** 0.5) ** 2 != num:\n            return False\n    return True\n\ndef g(nums: List[int] = [1, 4, 9, 16, 25]):\n    return nums\n\nassert f(g()) == True\n\n",
        "idx_generation": 430,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Check if there exists a subset of numbers in the given list that has a product equal to the target value.\n\n    Example:\n    nums = [2, 4, 6, 8]\n    target = 64\n\n    Output:\n    True\n    \"\"\"\n    def subset_product(nums, target):\n        if target == 1:\n            return True\n        if not nums or target < 1:\n            return False\n        return subset_product(nums[1:], target//nums[0]) or subset_product(nums[1:], target)\n    return subset_product(nums, target)\n\ndef g(target=100):\n    return [2, 4, 6, 8]\n\nassert f(g()) == True\n",
        "idx_generation": 33,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, s=123456) -> bool:\n    \"\"\"Check if a number is divisible by its digits sum.\"\"\"\n    return int(x) % s == 0\n\ndef g(s=123456):\n    return str(s)\n\nassert f(g())\n",
        "idx_generation": 278,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if it is possible to split the list into two subarrays such that the sum of elements in both subarrays is equal to the target.\n\n    Sample Input:\n    nums = [1, 5, 11, 5]\n    target = 11\n\n    Sample Output:\n    True\n\n    Explanation:\n    The list can be split into two subarrays: [1, 5, 5] and [11]. The sum of elements in both subarrays is equal to the target (11).\n    \"\"\"\n    total_sum = sum(nums)\n    if total_sum % 2 != 0:\n        return False\n    \n    target_sum = total_sum // 2\n    dp = [False] * (target_sum + 1)\n    dp[0] = True\n\n    for num in nums:\n        for i in range(target_sum, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n\n    return dp[target_sum]\n\ndef g(nums: List[int] = [1, 5, 11, 5], target: int = 11):\n    return (nums, target)\n\nassert f(*g()) == True\n",
        "idx_generation": 426,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(lst: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subset of k distinct numbers from the list whose sum is divisible by k.\"\"\"\n\n    def subsets_sum_divisible(nums, k, subset=[], index=0):\n        if len(subset) == k:\n            return sum(subset) % k == 0\n        if index >= len(nums):\n            return False\n        with_num = subsets_sum_divisible(nums, k, subset + [nums[index]], index + 1)\n        without_num = subsets_sum_divisible(nums, k, subset, index + 1)\n        return with_num or without_num\n\n    return subsets_sum_divisible(lst, k)\n    \ndef g(k = 5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 75,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that multiplies up to the target value.\"\"\"\n    prod = 1\n\n    for num in nums:\n        prod *= num\n\n    return prod == target\n\ndef g(nums: List[int], target: int):\n    return nums, target\n\nassert f(*g([2, 3, 4, 5], 120)) == True\n",
        "idx_generation": 249,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if the list contains any duplicate elements, otherwise return False.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return len(set(arr)) != len(arr)\n\ndef g():\n    return [1, 2, 3, 4, 5, 5]\n\nassert f(g()) == True\n\n",
        "idx_generation": 410,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers can be partitioned into three subarrays with equal sum.\n\n    Example:\n    nums = [1, 5, 2, 4, 6, 3]\n\n    Output:\n    True\n\n    Explanation: The list can be partitioned into [1, 5], [2, 4], and [6, 3], all having a sum of 6.\n    \"\"\"\n    total_sum = sum(nums)\n    if total_sum % 3 != 0:\n        return False\n    target_sum = total_sum // 3\n    dp = [[False] * (target_sum + 1) for _ in range(3)]\n    dp[0][0] = True\n    for num in nums:\n        for i in range(2, -1, -1):\n            for j in range(target_sum, num - 1, -1):\n                if dp[i - 1][j - num]:\n                    dp[i][j] = True\n    return dp[2][target_sum]\n\ndef g():\n    return [1, 5, 2, 4, 6, 3]\n\nassert f(g()) == True\n",
        "idx_generation": 192,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers can form a valid arithmetic sequence.\"\"\"\n    \n    nums.sort()\n    diff = nums[1] - nums[0]\n    \n    for i in range(2, len(nums)):\n        if nums[i] - nums[i-1] != diff:\n            return False\n    \n    return True\n\ndef g():\n    nums = [1, 4, 7, 10, 13]\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 252,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nimport numpy as np\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix.\"\"\"\n    n = len(matrix)\n\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n\n    return True\n\ndef g(n=3):\n    \"\"\"Generate a symmetric matrix of size n x n.\"\"\"\n    matrix = np.random.randint(0, 10, size=(n, n)).tolist()\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            matrix[j][i] = matrix[i][j]\n    \n    return matrix\n\nassert f(g()) == True\n\n",
        "idx_generation": 336,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\ndef f(li: List[int], target=15) -> bool:\n    \"\"\"\n    Check if there are three numbers in the list that sum up to the target value.\n    \"\"\"\n    from itertools import combinations\n    for c in combinations(li, 3):\n        if sum(c) == target:\n            return True\n    return False\n\ndef g(target=15):\n    return [4, 5, 2, 3, 6, 7, 8]\n\nassert f(g()) == True\n",
        "idx_generation": 67,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\ndef f(squares: List[List[int]], m=10, n=10) -> bool:\n    \"\"\"Position min(m, n) <= 10 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 10, n = 10):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g()) == True\n",
        "idx_generation": 55,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list where each element is the product of all elements in the original list except itself.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    [120, 60, 40, 30, 24]\n\n    Explanation:\n    The product of all elements in nums except 1 is 120.\n    The product of all elements in nums except 2 is 60.\n    The product of all elements in nums except 3 is 40.\n    The product of all elements in nums except 4 is 30.\n    The product of all elements in nums except 5 is 24.\n    \"\"\"\n    n = len(nums)\n    left_products = [1] * n\n    right_products = [1] * n\n    output = []\n    \n    for i in range(1, n):\n        left_products[i] = left_products[i-1] * nums[i-1]\n    \n    for i in range(n-2, -1, -1):\n        right_products[i] = right_products[i+1] * nums[i+1]\n    \n    for i in range(n):\n        output.append(left_products[i] * right_products[i])\n    \n    return output\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return (nums,)\n\nassert f(*g()) == [120, 60, 40, 30, 24]\n",
        "idx_generation": 499,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a grid where the sum of each row, column, and diagonal is the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    target_sum = sum(arr[0])\n\n    # Check rows\n    for i in range(n):\n        if sum(arr[i]) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(m):\n        column_sum = sum(arr[i][j] for i in range(n))\n        if column_sum != target_sum:\n            return False\n\n    # Check diagonals\n    diagonal_sum1 = sum(arr[i][i] for i in range(n))\n    diagonal_sum2 = sum(arr[i][n-i-1] for i in range(n))\n    if diagonal_sum1 != target_sum or diagonal_sum2 != target_sum:\n        return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 482,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, substrings=['abc', 'def', 'ghi', 'jkl']) -> bool:\n    \"\"\"\n    Find the indices of the first occurrence of each substring in the string s.\n    Return a list of tuples, each containing the substring and its corresponding index.\n    \"\"\"\n    indices = []\n    for sub in substrings:\n        if sub in s:\n            indices.append((sub, s.index(sub)))\n    return indices\ndef g(substrings=['abc', 'def', 'ghi', 'jkl']):\n    return ''.join(substrings)\nassert f(g()) == [('abc', 0), ('def', 3), ('ghi', 6), ('jkl', 9)]\n",
        "idx_generation": 15,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, pattern='abcd') -> bool:\n    \"\"\"Check if a given string follows a specific pattern.\"\"\"\n    words = s.split(' ')\n    if len(words) != len(pattern):\n        return False\n\n    word_map = {}\n    pattern_map = {}\n\n    for i in range(len(pattern)):\n        if pattern[i] not in pattern_map:\n            pattern_map[pattern[i]] = words[i]\n        else:\n            if pattern_map[pattern[i]] != words[i]:\n                return False\n\n        if words[i] not in word_map:\n            word_map[words[i]] = pattern[i]\n        else:\n            if word_map[words[i]] != pattern[i]:\n                return False\n\n    return True\n\ndef g(pattern='abcd'):\n    return \"apple banana cherry date\"\n\nassert f(g())\n",
        "idx_generation": 406,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of numbers, determine if it is possible to find a subsequence of numbers that add up to the target number.\n\n    Sample input:\n    [1, 2, 3, 4, 5]\n\n    Sample output:\n    True\n\n    The subsequence [1, 3, 5] adds up to 9, which is the target number.\n    \"\"\"\n    def subsequence_sum(numbers, target, index):\n        if target == 0:\n            return True\n        if index >= len(numbers) or target < 0:\n            return False\n        return subsequence_sum(numbers, target - numbers[index], index + 1) or subsequence_sum(numbers, target, index + 1)\n    return subsequence_sum(numbers, target, 0)\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5, target]\n\nassert f(g()) == True\n",
        "idx_generation": 82,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(start: int, k=3, lower=100000, seq=[91, 1, 2, 64, 18, 91, -30, 100, 3, 65, 18]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose product is minimal, possibly looping around\"\"\"\n    prod = 1\n    for i in range(start, start + k):\n        prod *= seq[i]\n    return prod <= lower\ndef g(k = 3, lower = 100000, seq = [91, 1, 2, 64, 18, 91, -30, 100, 3, 65, 18]):\n    def prod(start):\n        ans = 1\n        for i in range(start, start + k):\n            ans *= seq[i]\n        return ans\n\n    return min(range(-len(seq), len(seq) - k + 1), key=prod)\nassert f(g()) == True\n",
        "idx_generation": 69,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"Check if the target number exists in the list and is divisible by any element in the list.\"\"\"\n    return any(target % num == 0 for num in lst)\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g(), 12) == True\n",
        "idx_generation": 70,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int = 3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the given array, such that the average of its elements is zero.\"\"\"\n    for i in range(len(arr) - k + 1):\n        subarr = arr[i:i+k]\n        if sum(subarr) / k == 0:\n            return True\n    return False\n\ndef g(k: int = 3):\n    return [0] * k\n\nassert f(g()) == True\n",
        "idx_generation": 203,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int = 3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the given array, such that the sum of its elements is divisible by k.\"\"\"\n    for i in range(len(arr) - k + 1):\n        subarr = arr[i:i+k]\n        subarr_sum = sum(subarr)\n        if subarr_sum % k == 0:\n            return True\n    return False\n\ndef g(k: int = 3):\n    return [k] * k\n\nassert f(g()) == True\n",
        "idx_generation": 137,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return a list of the sums of each row.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Output: [6, 15, 24]\n\n    Explanation: The sums of the rows are [1+2+3, 4+5+6, 7+8+9] = [6, 15, 24].\n    \"\"\"\n    row_sums = []\n    for row in matrix:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n    return row_sums\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [6, 15, 24]\n\n",
        "idx_generation": 326,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 3, 5, 7]) -> bool:\n    \"\"\"Check if n is a prime number.\"\"\"\n    return all((n % i != 0 for i in range(2, int(n**0.5)+1))) and n > 1\ndef g(nums=[2, 3, 5, 7]):\n    return max(nums)\nassert f(g()) == True\n",
        "idx_generation": 92,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if there exists a subarray (contiguous elements) whose sum is equal to the target.\n\n    Sample Input:\n    nums = [2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n\n    Explanation:\n    The subarray [2, 3, 4] has a sum of 9.\n    \"\"\"\n    n = len(nums)\n    prefix_sum = 0\n    prefix_sums = {0}\n    for i in range(n):\n        prefix_sum += nums[i]\n        if prefix_sum == target:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\n\ndef g(nums: List[int] = [2, 3, 4, 5], target: int = 9):\n    return (nums, target)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 461,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"\n    Return True if there exists a pair of numbers in the list whose difference is equal to the target value.\n    \"\"\"\n    return any(abs(arr[i] - arr[j]) == target for i in range(len(arr)) for j in range(i+1, len(arr)))\ndef g(target=0):\n    arr = [1, 3, 5, 7, 9, 11, 13, 15, 17]\n    return arr\nassert f(g()) == False\n",
        "idx_generation": 48,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 197,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Determine if the given array is a palindrome.\n\n    Sample Input:\n    arr = [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g()) == True\n\n\n",
        "idx_generation": 428,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(string: str, pattern: str) -> bool:\n    \"\"\"\n    Check if the given pattern can be found in the given string.\n    \"\"\"\n    n = len(string)\n    m = len(pattern)\n    for i in range(n - m + 1):\n        if string[i:i+m] == pattern:\n            return True\n    return False\n\ndef g(string=\"Hello, World!\", pattern=\"World\"):\n    return string, pattern\n\nassert f(*g()) == True\n",
        "idx_generation": 184,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a prime sequence.\"\"\"\n    if len(nums) < 2:\n        return False\n    for num in nums:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n    return True\n\ndef g(n: int):\n    \"\"\"Generate a sequence of n prime numbers.\"\"\"\n    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes\n\nassert f(g(5)) == True\n",
        "idx_generation": 433,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, a=201717041833890, b=3585167190, upper_bound=731493653565433) -> bool:\n    \"\"\"Find the smallest common multiple of two integers.\"\"\"\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)\ndef g(a = 201717041833890, b = 3585167190, upper_bound = 731493653565433):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)\nassert f(g()) == True\n",
        "idx_generation": 34,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome list.\n    A palindrome list is a list that remains the same when reversed.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums: List[int] = [1, 2, 3, 2, 1]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 287,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(path: List[int], weights=[{1: 100}, {0: 200, 2: 300}, {2: 400, 0: 500, 3: 600}, {}], bound=100) -> bool:\n    \"\"\"\n    Find a path from node 0 to node 1, of length at most bound, in the given digraph.\n    weights[a][b] is weight on edge [a,b] for (int) nodes a, b\n    \"\"\"\n    return path[0] == 0 and path[-1] == 1 and (sum((weights[a][b] for (a, b) in zip(path, path[1:]))) <= bound)\ndef g(weights = [{1: 100}, {0: 200, 2: 300}, {2: 400, 0: 500, 3: 600}, {}], bound = 100):\n    # Dijkstra's algorithm (bound is ignored)\n    u, v = 0, 1  # go from 0 to 1\n    import heapq\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in weights[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + weights[i][j], j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]\nassert f(g())\n",
        "idx_generation": 463,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\ndef f(x: List[int], n=3, s=10) -> bool:\n    \"\"\"Find a list of n numbers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 3, s = 10):\n    x = [s // n] * n\n    remainder = s % n\n    for i in range(remainder):\n        x[i] += 1\n    return x\nassert f(g()) == True\n",
        "idx_generation": 81,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import factorial\n\ndef f(n: int, k: int) -> int:\n    \"\"\"Calculate the number of permutations of n items taken k at a time\"\"\"\n    return factorial(n) // factorial(n-k)\n\ndef g(n: int = 5, k: int = 3):\n    return n, k\n\nassert f(*g()) == 60\n",
        "idx_generation": 281,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if there exists a pair of distinct elements in the list that sum up to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n\n    Sample Output:\n    True\n\n    Explanation:\n    The pair (3, 4) sums up to 7.\n    \"\"\"\n    n = len(nums)\n    num_set = set()\n    for i in range(n):\n        if target - nums[i] in num_set:\n            return True\n        num_set.add(nums[i])\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return (nums, target)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 411,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the difference between any two numbers in the list is equal to the target.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if abs(nums[i] - nums[j]) == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=2):\n    return (nums, target)\n\nassert f(*g()) == True\n",
        "idx_generation": 192,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if the given matrix is a diagonal matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\nassert f(g()) == True\n",
        "idx_generation": 254,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers, determine if the target integer is present in any row or column.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    target = 6\n    output: True\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    for col in zip(*matrix):\n        if target in col:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix, 6\n\nassert f(*g()) == True\n",
        "idx_generation": 340,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(li: List[int], target=10) -> bool:\n    \"\"\"\n    Find a list of integers that contains exactly two distinct values, such that the product of the values is equal to the target.\n    \"\"\"\n    return len(set(li)) == 2 and li[0] * li[1] == target\n\ndef g(target=10):\n    return [2, 5]\n\nassert f(g()) == True\n",
        "idx_generation": 74,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(arr: List[int], n=5) -> bool:\n    \"\"\"Check if the given list contains exactly n distinct elements.\"\"\"\n    return len(set(arr)) == n\ndef g(n=5):\n    return list(range(n))\nassert f(g()) == True\n",
        "idx_generation": 58,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid of numbers where the sums of the numbers in each row, each column, and both main diagonals are the same.\n\n    Sample Input:\n    arr = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    target_sum = sum(arr[0])\n\n    # Check rows\n    for row in arr:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += arr[i][j]\n        if col_sum != target_sum:\n            return False\n\n    # Check main diagonal\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += arr[i][i]\n    if diagonal_sum != target_sum:\n        return False\n\n    # Check secondary diagonal\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += arr[i][n - i - 1]\n    if diagonal_sum != target_sum:\n        return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]):\n    return arr\n\nassert f(g()) == True\n\n",
        "idx_generation": 498,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(words: List[str], word_len=5) -> bool:\n    \"\"\"Find a word in a list that has a specific length\"\"\"\n    return any(len(word) == word_len for word in words)\ndef g(word_len = 5):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    return [alphabet[i % 26] * word_len for i in range(word_len + 1)]\nassert f(g()) == True\n",
        "idx_generation": 16,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if there exists a pair of numbers in the list such that their sum is equal to the target.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n\n    Output:\n    True\n\n    Explanation: There exists a pair of numbers in the list, 3 and 4, whose sum is equal to the target 7.\n    \"\"\"\n    num_set = set()\n\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return (nums, target)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 413,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, substrings=['foo', 'bar', 'baz']) -> bool:\n    \"\"\"\n    Check if a given string contains all substrings in the correct order.\n    \"\"\"\n    index = 0\n    for sub in substrings:\n        if sub in s[index:]:\n            index = s.index(sub, index) + len(sub)\n        else:\n            return False\n    return True\ndef g(substrings = ['foo', 'bar', 'baz']):\n    return \"\".join(substrings)\nassert f(g()) == True\n",
        "idx_generation": 98,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: List[str], n=3, s=15, char='a') -> bool:\n    \"\"\"Find a list of n strings with length s, where each string starts with a specific character\"\"\"\n    return len(x) == n and all([len(a) == s and a[0] == char for a in x])\ndef g(n = 3, s = 15, char='a'):\n    return [char * s] * n\nassert f(g()) == True\n",
        "idx_generation": 71,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there are any two numbers that multiply to the target\"\"\"\n    return any(nums[i] * nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target: int = 20, nums: List[int] = [2, 4, 5, 10, 12, 15]):\n    return (nums, target)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 87,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given an array of integers, check if the array can be divided into two subarrays of equal sum.\n\n    Sample Input:\n    arr = [5, 2, 6, 1, 4, 1, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    total_sum = sum(arr)\n    if total_sum % 2 != 0:\n        return False\n    target_sum = total_sum // 2\n    current_sum = 0\n    visited = set()\n    for num in arr:\n        current_sum += num\n        if current_sum == target_sum:\n            return True\n        if current_sum - target_sum in visited:\n            return True\n        visited.add(current_sum)\n    return False\n\ndef g():\n    return [5, 2, 6, 1, 4, 1, 5]\n\nassert f(g()) == True\n",
        "idx_generation": 222,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find two numbers in 'nums' that add up to 'target'\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 165,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n\n",
        "idx_generation": 376,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"\n    Check if the given number is divisible by any number in the list.\n    \"\"\"\n    for num in lst:\n        if n % num == 0:\n            return True\n    return False\ndef g(lst=[1, 2, 3, 4, 5]):\n    return lst[0]\nassert f(g()) == True\n",
        "idx_generation": 93,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, determine if there exists a subarray (contiguous elements) where the product of the subarray's elements is equal to 0.\n\n    Sample Input:\n    nums = [2, 0, 4, -5]\n\n    Sample Output:\n    True\n\n    Explanation:\n    The subarray [2, 0] has a product of 0.\n    \"\"\"\n    n = len(nums)\n    prefix_product = 1\n    prefix_products = {1}\n    for i in range(n):\n        prefix_product *= nums[i]\n        if prefix_product == 0:\n            return True\n        prefix_products.add(prefix_product)\n    return False\n\ndef g(nums: List[int] = [2, 0, 4, -5]):\n    return (nums,)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 461,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there is a subset of numbers that sums up to the target value\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50]\n\nassert f(g()) == True\n",
        "idx_generation": 50,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> int:\n    \"\"\"\n    Given a 2D grid of integers, find the maximum element in the grid.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    9\n    \"\"\"\n    max_element = float('-inf')\n    for row in arr:\n        max_element = max(max_element, max(row))\n    return max_element\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == 9\n\n",
        "idx_generation": 203,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a palindrome.\n    Return True if the list is a palindrome, False otherwise.\n    \"\"\"\n    return numbers == numbers[::-1]\n\ndef g(numbers=[1, 2, 3, 4, 5]):\n    return (numbers,)\n\nassert f(*g()) == False\n\n\n",
        "idx_generation": 431,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"\n    Check if a given string is a palindrome after removing exactly n characters from it.\n\n    Sample input:\n    \"madam\", 1\n\n    Sample output:\n    True\n\n    Explanation:\n    By removing 'd', the string \"madam\" becomes a palindrome.\n    \"\"\"\n    if n < 0:\n        return False\n    if n == 0:\n        return s == s[::-1]\n    if len(s) <= 1:\n        return True\n    if s[0] == s[-1]:\n        return f(s[1:-1], n)\n    else:\n        return f(s[1:], n - 1) or f(s[:-1], n - 1)\ndef g(s: str = \"madam\", n: int = 1):\n    return (s, n)\nassert f(*g()) == True\n",
        "idx_generation": 187,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, calculate the sum of all the elements in the matrix.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    output: 45\n    \"\"\"\n    result = 0\n    \n    for row in matrix:\n        result += sum(row)\n        \n    return result\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 45\n",
        "idx_generation": 437,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, a=8797233, b=2370036150831, lower_bound=8364173) -> bool:\n    \"\"\"Find a large common divisor of two integers.\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a = 8797233, b = 2370036150831, lower_bound = 8364173):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n\nassert f(g()) == True\n",
        "idx_generation": 35,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int = 2) -> str:\n    \"\"\"\n    Given a string and an integer n, rotate the string to the right by n positions.\n\n    Example:\n    s = \"python\"\n    n = 3\n    Rotating the string to the right by 3 positions, we get \"honpyt\".\n\n    Therefore, f(s, n) returns \"honpyt\".\n    \"\"\"\n    length = len(s)\n    n = n % length\n    return s[length - n:] + s[:length - n]\n\ndef g(s: str = \"python\", n: int = 3):\n    return (s, n)\n\nassert f(*g()) == \"honpyt\"\n",
        "idx_generation": 337,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\ndef f(squares: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Position min(m, n) <= 5 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 5, n = 5):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g()) == True\n",
        "idx_generation": 84,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=5, s=19) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 5, s = 19):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g())\n",
        "idx_generation": 313,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> int:\n    \"\"\"\n    Find the sum of all even numbers in the given list.\n    \"\"\"\n    return sum(num for num in lst if num % 2 == 0)\n\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return lst\n\nassert f(g()) == 30\n\n",
        "idx_generation": 412,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Check if the list contains a subsequence that forms an arithmetic progression.\n    \"\"\"\n    if len(lst) < 3:\n        return False\n    diff = lst[1] - lst[0]\n    for i in range(2, len(lst)):\n        if lst[i] - lst[i-1] != diff:\n            for j in range(i+1, len(lst)):\n                if lst[j] - lst[j-1] == diff:\n                    return True\n    return False\n\ndef g():\n    return [1, 2, 4, 5, 7, 9, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 207,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers, check if there is a geometric progression present with the target ratio.\n\n    Example:\n    nums = [1, 2, 4, 8, 16]\n    target = 2\n    output: True\n    \"\"\"\n    nums.sort()\n    for i in range(len(nums) - 2):\n        if nums[i + 1] / nums[i] == target and nums[i + 2] / nums[i + 1] == target:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 4, 8, 16], 2\n\nassert f(*g()) == True\n",
        "idx_generation": 278,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, determine whether the matrix is symmetric or not.\n\n    A matrix is symmetric if it is equal to its transpose.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n\n    Output:\n    True\n\n    Explanation: The matrix is symmetric because it is equal to its transpose.\n\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Output:\n    False\n\n    Explanation: The matrix is not symmetric because it is not equal to its transpose.\n    \"\"\"\n    transpose = [[matrix[j][i] for j in range(len(matrix[0]))] for i in range(len(matrix))]\n    return matrix == transpose\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g()) == True\n",
        "idx_generation": 345,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find two distinct numbers in the given list that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g()) == True\n",
        "idx_generation": 77,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: List[int], n=5, s=25) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a >= 0 for a in x])\ndef g(n = 5, s = 25):\n    if n == 1:\n        return [s]\n    elif n == 2:\n        return [s - 1, 1]\n    elif n == 3:\n        return [s - 2, 1, 1]\n    elif n == 4:\n        return [s - 3, 1, 1, 1]\n    else:\n        return [s - 4, 1, 1, 1, 1]\nassert f(g()) == True\n",
        "idx_generation": 63,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    False\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    target_sum = sum(arr[0])\n\n    # Check rows\n    for i in range(n):\n        if sum(arr[i]) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(m):\n        column_sum = sum(arr[i][j] for i in range(n))\n        if column_sum != target_sum:\n            return False\n\n    # Check diagonals\n    diagonal_sum1 = sum(arr[i][i] for i in range(n))\n    diagonal_sum2 = sum(arr[i][n-i-1] for i in range(n))\n    if diagonal_sum1 == target_sum or diagonal_sum2 == target_sum:\n        return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return arr\n\nassert f(g()) == False\n",
        "idx_generation": 498,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, substrings=['abc', 'def', 'ghi', 'jkl'], k=2) -> bool:\n    \"\"\"\n    Find the length of the longest substring in s that contains at least k of the substrings in any order.\n    \"\"\"\n    index = 0\n    max_length = 0\n    current_length = 0\n    count = 0\n    for sub in substrings:\n        if sub not in s[index:]:\n            if count >= k:\n                current_length += count * len(sub)\n                if current_length > max_length:\n                    max_length = current_length\n                current_length = 0\n                count = 0\n            else:\n                current_length = 0\n                count = 0\n        else:\n            index += s[index:].index(sub) + len(sub)\n            current_length += len(sub)\n            count += 1\n    if count >= k:\n        current_length += count * len(sub)\n        if current_length > max_length:\n            max_length = current_length\n    return max_length\ndef g(substrings=['abc', 'def', 'ghi', 'jkl'], k=2):\n    return ''.join(substrings)\nassert f(g()) == 24\n",
        "idx_generation": 19,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and an integer k, find the k most frequent elements in the list.\n\n    Sample Input:\n    arr = [1, 1, 1, 2, 2, 3]\n    k = 2\n\n    Sample Output:\n    [1, 2]\n    \"\"\"\n    count = {}\n    for num in arr:\n        count[num] = count.get(num, 0) + 1\n    sorted_nums = sorted(count.keys(), key=lambda x: count[x], reverse=True)\n    return sorted_nums[:k]\n\ndef g():\n    return [1, 1, 1, 2, 2, 3], 2\n\nassert f(*g()) == [1, 2]\n\n",
        "idx_generation": 431,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"\n    Given a string and an integer k, check if the string can be split into k equal parts.\n    Return True if it is possible, False otherwise.\n    \"\"\"\n    n = len(s)\n    if n % k != 0:\n        return False\n    part_size = n // k\n    for i in range(0, n, part_size):\n        if s[i:i+part_size] != s[:part_size]:\n            return False\n    return True\n\ndef g(s=\"abcabcabc\"):\n    return s\n\nassert f(g()) == True\n",
        "idx_generation": 108,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(arr: List[int], k: int = 3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the given array, such that the maximum element is equal to k.\"\"\"\n    for i in range(len(arr) - k + 1):\n        subarr = arr[i:i+k]\n        if max(subarr) == k:\n            return True\n    return False\n\ndef g(k: int = 3):\n    return [k] * k\n\nassert f(g()) == True\n",
        "idx_generation": 72,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, k=4) -> bool:\n    \"\"\"Check if a number is divisible by another number\"\"\"\n    return n % k == 0\ndef g(k = 4):\n    return 20 * k\nassert f(g()) == True\n",
        "idx_generation": 90,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer k, check if it is possible to split the list into two subarrays such that the sum of elements in each subarray is equal to k.\n\n    Example:\n    arr = [4, 3, 2, 6, 1]\n    k = 7\n    output: True\n\n    Explanation:\n    The subarrays [4, 3] and [2, 1] have a sum of 7.\n    \"\"\"\n    n = len(arr)\n    prefix_sum = 0\n    prefix_sum_set = set()\n\n    for i in range(n):\n        prefix_sum += arr[i]\n        if prefix_sum == k:\n            return True\n        if (prefix_sum - k) in prefix_sum_set:\n            return True\n        prefix_sum_set.add(prefix_sum)\n    \n    return False\n\ndef g():\n    return ([4, 3, 2, 6, 1], 7)\n\nassert f(*g()) == True\n",
        "idx_generation": 254,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"Calculate the sum of all elements in the given matrix.\"\"\"\n    total_sum = 0\n    for row in matrix:\n        total_sum += sum(row)\n    return total_sum\n\ndef g(n=3):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == 45\n",
        "idx_generation": 187,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n\n",
        "idx_generation": 401,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"\n    Given a number n and a list of integers, check if n is a multiple of all the integers in the list.\n    If n is a multiple of all the integers, return True. Otherwise, return False.\n    \"\"\"\n    return all(n % num == 0 for num in lst)\n\ndef g(n: int = 10, lst: List[int] = [2, 5]):\n    return n, lst\n\nassert f(*g()) == True\n",
        "idx_generation": 102,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"Given a matrix, transpose it by swapping its rows and columns.\"\"\"\n    transposed = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n    return transposed\n\ndef g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\nassert f(g()) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n\n",
        "idx_generation": 462,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: List[int], n=4, s=20) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a >= 0 for a in x])\ndef g(n = 4, s = 20):\n    if n == 1:\n        return [s]\n    elif n == 2:\n        return [s - 1, 1]\n    elif n == 3:\n        return [s - 2, 1, 1]\n    else:\n        return [s - 3, 1, 1, 1]\nassert f(g()) == True\n",
        "idx_generation": 63,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    target_sum = sum(arr[0])\n    \n    # Check rows\n    for row in arr:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for j in range(n):\n        column_sum = sum(arr[i][j] for i in range(n))\n        if column_sum != target_sum:\n            return False\n    \n    # Check diagonals\n    diagonal_sum1 = sum(arr[i][i] for i in range(n))\n    diagonal_sum2 = sum(arr[i][n-i-1] for i in range(n))\n    if diagonal_sum1 != target_sum or diagonal_sum2 != target_sum:\n        return False\n    \n    return True\n\ndef g(arr: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 213,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n    \"\"\"\n    return string == string[::-1]\n\ndef g(string: str):\n    return string\n\nassert f(g(\"racecar\")) == True\n",
        "idx_generation": 439,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(a: List[int]) -> bool:\n    \"\"\"Check if the list a is a palindrome\"\"\"\n    return a == a[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g()) == True\n",
        "idx_generation": 188,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=14, b=50, c=47) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the squares of the first c integers)\"\"\"\n    return n + a == sum([b * i**2 for i in range(c)])\ndef g(a = 14, b = 50, c = 47):\n    return -a + sum([b * i**2 for i in range(c)])\nassert f(g())\n",
        "idx_generation": 441,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, a=14302, b=5) -> bool:\n    \"\"\"\n    Given an integer n, find the n-th Fibonacci number.\n\n    Sample input:\n    6\n\n    Sample output:\n    8\n\n    Explanation: The 6th Fibonacci number is 8.\n    \"\"\"\n    assert n >= 0, 'Hint: n should be a non-negative integer.'\n    fib = [0, 1]\n    while len(fib) <= n:\n        fib.append(fib[-1] + fib[-2])\n    return fib[n]\ndef g(n = 6, a = 14302, b = 5):\n    return n\nassert f(g()) == 8\n\n",
        "idx_generation": 73,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target: int) -> bool:\n    \"\"\"\n    Given a number n and a target, check if the number n is divisible by the target and the sum of its digits is equal to the target value.\n    If both conditions are met, return True. Otherwise, return False.\n    \"\"\"\n    if target == 0:\n        return False\n    \n    return n % target == 0 and sum([int(i) for i in str(n)]) == target\n\ndef g():\n    return 36, 9\n\nassert f(*g()) == True\n",
        "idx_generation": 345,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=20, count=3) -> bool:\n    \"\"\"Find if there are count numbers that add up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(nums, count))\ndef g(target = 20, count = 3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g()) == True\n",
        "idx_generation": 0,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\ndef f(squares: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Position min(m, n) <= 5 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 5, n = 5):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g()) == True\n",
        "idx_generation": 96,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=7, c=20) -> bool:\n    \"\"\"Find n such that n + a == (the sum of the first c numbers) * b\"\"\"\n    return n + a == sum([i for i in range(c)]) * b\ndef g(a=5, b=7, c=20):\n    return -a + sum([i for i in range(c)]) * b\nassert f(g())\n\n",
        "idx_generation": 317,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> int:\n    \"\"\"\n    Find the maximum value in the given list.\n    \"\"\"\n    return max(lst)\n\ndef g(lst=[1, 2, 3, 4, 5]):\n    return lst\n\nassert f(g()) == 5\n",
        "idx_generation": 412,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum: int = 0) -> bool:\n    \"\"\"\n    Given a list of numbers, find a subset of numbers that sums up to the target_sum.\n    Return True if such a subset exists, False otherwise.\n    \"\"\"\n    def subset_sum(nums, target_sum, memo={}):\n        if target_sum in memo:\n            return memo[target_sum]\n        if target_sum == 0:\n            return True\n        if target_sum < 0 or not nums:\n            return False\n        include = subset_sum(nums[1:], target_sum - nums[0], memo)\n        exclude = subset_sum(nums[1:], target_sum, memo)\n        memo[target_sum] = include or exclude\n        return memo[target_sum]\n\n    return subset_sum(nums, target_sum)\n\ndef g(nums=[-1, 2, 3, -4, 5], target_sum=4):\n    return (nums, target_sum)\n\nassert f(g()) == True\n",
        "idx_generation": 220,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a pair of numbers whose product is equal to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for i in range(len(nums)):\n        complement = target / nums[i]\n        if complement in nums_set and complement != nums[i]:\n            return True\n    return False\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8], target: int = 10):\n    return nums, target\n\nassert f(*g()) == True\n",
        "idx_generation": 293,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list with duplicates removed.\n    \"\"\"\n    return list(set(nums))\n\nassert f(g([3, 4, -7, 2, 1, 3, 1]), 4)\n",
        "idx_generation": 353,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Given a list of integers, find if there exists a pair of numbers with a sum of 10.\"\"\"\n    return any((nums[i] + nums[j] == 10 for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g()) == True\n",
        "idx_generation": 88,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[List[int]]:\n    \"\"\"Given an array of integers and a target number, find all unique combinations in the array where the sum of the numbers is equal to the target.\"\"\"\n    nums.sort()\n    result = []\n\n    def backtrack(curr_sum, start, combination):\n        if curr_sum == target:\n            result.append(combination)\n            return\n        if curr_sum > target:\n            return\n        for i in range(start, len(nums)):\n            if i > start and nums[i] == nums[i - 1]:\n                continue\n            backtrack(curr_sum + nums[i], i + 1, combination + [nums[i]])\n\n    backtrack(0, 0, [])\n    return result\n\ndef g():\n    nums = [10, 1, 2, 7, 6, 1, 5]\n    target = 8\n    return (nums, target)\n\nassert f(*g()) == [[1, 1, 6], [1, 2, 5], [1, 7], [2, 6]]\n",
        "idx_generation": 65,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if there are at least k consecutive vowels in the given string\"\"\"\n    vowels = set(\"aeiou\")\n    count = 0\n    max_count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n            max_count = max(max_count, count)\n        else:\n            count = 0\n    return max_count >= k\ndef g(k = 3):\n    return \"aeiou\" + \"bcdfghj\" * (k-1)\nassert f(g()) == True\n",
        "idx_generation": 21,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Remove all duplicates from the given list of integers.\n\n    Sample Input:\n    [1, 2, 2, 3, 4, 4, 5]\n\n    Sample Output:\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    return list(set(nums))\n\ndef g(nums: List[int] = [1, 2, 2, 3, 4, 4, 5]):\n    return nums\n\nassert f(g()) == [1, 2, 3, 4, 5]\n\n",
        "idx_generation": 436,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, nums: List[int], k=2) -> bool:\n    \"\"\"\n    Given a list of integers and an integer k, determine if there are exactly n numbers in the list that are strictly larger than the kth number.\n    \"\"\"\n    assert len(nums) > k, 'Hint: List should have at least k+1 numbers'\n    return sum(num > nums[k] for num in nums) == n\n\ndef g(nums: List[int], k=2):\n    threshold = max(nums[k], 0)\n    return sum(num > threshold for num in nums)\n\nassert f(g([1, 2, 3, 4, 5, 6], 2), [1, 2, 3, 4, 5, 6], 2) == True\n",
        "idx_generation": 130,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"Check if the target number exists in the list and is divisible by any number in the list.\"\"\"\n    return any(target % num == 0 for num in lst)\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g(), 12) == True\n",
        "idx_generation": 83,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"\n    Check if the given number is present in the list and is a prime number.\n    \"\"\"\n    prime_nums = [2, 3, 5, 7, 11]\n    return n in lst and n in prime_nums\ndef g(lst=[1, 2, 3, 4, 5]):\n    return lst[3]\nassert f(g()) == False\n\n",
        "idx_generation": 93,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a perfect square list.\n    A perfect square list is a list where the square root of each element is an integer.\n    \"\"\"\n    return all(x ** 0.5 == int(x ** 0.5) for x in nums)\n\ndef g(nums: List[int] = [1, 4, 9, 16, 25]):\n    return nums\n\nassert f(g()) == True\n\n\n",
        "idx_generation": 264,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list contains both odd and even numbers.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(num % 2 == 0 for num in arr) and any(num % 2 != 0 for num in arr)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n",
        "idx_generation": 189,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a grid where the sum of each row, each column, and both diagonals are the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    target_sum = sum(arr[0])\n    for i in range(n):\n        if sum(arr[i]) != target_sum:\n            return False\n        if sum(arr[j][i] for j in range(n)) != target_sum:\n            return False\n    if sum(arr[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(arr[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n\n",
        "idx_generation": 406,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, check if there are two numbers in the list that add up to the target.\n    If there are two numbers that add up to the target, return True. Otherwise, return False.\n    \"\"\"\n    num_set = set()\n    for num in lst:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(lst: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return lst, target\n\nassert f(*g()) == True\n",
        "idx_generation": 102,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> int:\n    \"\"\"\n    Given a positive integer `n`, return the sum of all the multiples of 3 or 5 below `n`.\n\n    Example:\n    n = 10\n\n    Output:\n    23  # Multiples of 3 or 5 below 10 are: 3, 5, 6, 9\n    \"\"\"\n    multiples = []\n    for i in range(1, n):\n        if i % 3 == 0 or i % 5 == 0:\n            multiples.append(i)\n    \n    return sum(multiples)\n\ndef g(n: int = 10):\n    return (n,)\n\nassert f(*g()) == 23\n",
        "idx_generation": 463,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of numbers, determine if it is possible to find a subsequence of numbers that add up to the target number.\n\n    Sample input:\n    [1, 2, 3, 4, 5]\n\n    Sample output:\n    True\n\n    The subsequence [2, 3, 5] adds up to 10, which is the target number.\n    \"\"\"\n    def subsequence_sum(numbers, target, index):\n        if target == 0:\n            return True\n        if index >= len(numbers) or target < 0:\n            return False\n        return subsequence_sum(numbers, target - numbers[index], index + 1) or subsequence_sum(numbers, target, index + 1)\n    return subsequence_sum(numbers, target, 0)\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5, target]\n\nassert f(g()) == True\n",
        "idx_generation": 64,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given 2D grid is a magic square\n    A magic square is a square grid of numbers where the sums of each row, each column, and both main diagonals are the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    target_sum = sum(arr[0])\n    # Check row sums\n    for row in arr:\n        if sum(row) != target_sum:\n            return False\n    # Check column sums\n    for col in range(n):\n        if sum(arr[row][col] for row in range(n)) != target_sum:\n            return False\n    # Check main diagonal sum\n    if sum(arr[i][i] for i in range(n)) != target_sum:\n        return False\n    # Check second diagonal sum\n    if sum(arr[i][n-i-1] for i in range(n)) != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 217,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Given a string, determine if it is a palindrome when only alphanumeric characters are considered.\n\n    Sample input:\n    string = \"A man, a plan, a canal: Panama\"\n\n    Sample output:\n    True\n    \"\"\"\n\n    alphanumeric = ''\n    for char in string:\n        if char.isalnum():\n            alphanumeric += char.lower()\n\n    return alphanumeric == alphanumeric[::-1]\n\ndef g():\n    return \"A man, a plan, a canal: Panama\"\n\nassert f(g()) == True\n",
        "idx_generation": 440,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n\n    Sample Input:\n    nums = [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums: List[int] = [1, 2, 3, 2, 1]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 200,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(n: int, a=14, b=50, c=47) -> bool:\n    \"\"\"Find n such that n + a == b * (the product of the first c integers)\"\"\"\n    return n + a == b * math.prod(range(c))\ndef g(a = 14, b = 50, c = 47):\n    return -a + b * math.prod(range(c))\nassert f(g())\n",
        "idx_generation": 441,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(lst: List[int], k=4) -> bool:\n    \"\"\"Check if there exists a subset of k numbers from the list whose sum is divisible by k.\"\"\"\n\n    def subsets_sum_divisible(nums, k, subset=[], index=0):\n        if len(subset) == k:\n            return sum(subset) % k == 0\n        if index >= len(nums):\n            return False\n        with_num = subsets_sum_divisible(nums, k, subset + [nums[index]], index + 1)\n        without_num = subsets_sum_divisible(nums, k, subset, index + 1)\n        return with_num or without_num\n\n    return subsets_sum_divisible(lst, k)\n    \ndef g(k = 4):\n    return [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]\n\nassert f(g()) == True\n",
        "idx_generation": 75,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, num_possibilities=5) -> bool:\n    \"\"\"Find the sum of a subset of numbers that equals the target\"\"\"\n    from itertools import combinations\n    for i in range(num_possibilities, 0, -1):\n        for combo in combinations(nums, i):\n            if sum(combo) == target:\n                return True\n    return False\ndef g(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 10, num_possibilities = 5):\n    return nums\nassert f(g()) == True\n",
        "idx_generation": 15,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers, check if there exists a combination of numbers that adds up to the target number.\n    Return True if such a combination exists, False otherwise.\n    \"\"\"\n    def combination_sum(nums, target, path, res):\n        if target < 0:\n            return\n        if target == 0:\n            res.append(path)\n            return\n        if not nums:\n            return\n        combination_sum(nums[1:], target - nums[0], path + [nums[0]], res)\n        combination_sum(nums[1:], target, path, res)\n\n    res = []\n    combination_sum(nums, target, [], res)\n    if res:\n        return True\n    else:\n        return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return (nums, target)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 108,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are three numbers in the given list that add up to the target number.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 324,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> List[int]:\n    \"\"\"\n    Remove all duplicates from the given list and return a new list with unique elements.\n    \"\"\"\n    return list(set(lst))\n\ndef g(lst=[1, 2, 2, 3, 3, 4, 5]):\n    return lst\n\nassert f(g()) == [1, 2, 3, 4, 5]\n",
        "idx_generation": 412,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of positive integers, check if it can be partitioned into two subsets such that the sum of elements in both subsets is equal.\n\n    Sample Input:\n    nums = [1, 5, 11, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    total_sum = sum(nums)\n    if total_sum % 2 != 0:\n        return False\n    target_sum = total_sum // 2\n    n = len(nums)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(target_sum + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j >= nums[i - 1]:\n                dp[i][j] = dp[i][j] or dp[i - 1][j - nums[i - 1]]\n    return dp[n][target_sum]\n\ndef g():\n    return [1, 5, 11, 5]\n\nassert f(g()) == True\n",
        "idx_generation": 222,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list contains any odd values.\n\n    Example:\n    arr = [1, 2, 3, 4, 5, 6]\n\n    Output:\n    True\n    \"\"\"\n    return any(num % 2 != 0 for num in arr)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g()) == True\n\n\n",
        "idx_generation": 302,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> int:\n    \"\"\"\n    Find the maximum sum of any hourglass shape in the given 2D array.\n\n    An hourglass shape is defined as follows:\n    a b c\n      d\n    e f g\n\n    Sample input:\n    arr = [[1, 1, 1, 0, 0, 0],\n           [0, 1, 0, 0, 0, 0],\n           [1, 1, 1, 0, 0, 0],\n           [0, 0, 2, 4, 4, 0],\n           [0, 0, 0, 2, 0, 0],\n           [0, 0, 1, 2, 4, 0]]\n\n    Sample output:\n    19\n\n    Explanation: The hourglass shapes with maximum sums are:\n    2 4 4\n      2\n    1 2 4\n    and\n    1 1 1\n      1\n    1 2 4\n    Their sums are 19.\n\n    \"\"\"\n    max_sum = float('-inf')\n    for i in range(len(arr) - 2):\n        for j in range(len(arr[0]) - 2):\n            hourglass_sum = (\n                arr[i][j] + arr[i][j+1] + arr[i][j+2] +\n                arr[i+1][j+1] +\n                arr[i+2][j] + arr[i+2][j+1] + arr[i+2][j+2]\n            )\n            max_sum = max(max_sum, hourglass_sum)\n    return max_sum\n\ndef g() -> List[List[int]]:\n    return [[1, 1, 1, 0, 0, 0],\n            [0, 1, 0, 0, 0, 0],\n            [1, 1, 1, 0, 0, 0],\n            [0, 0, 2, 4, 4, 0],\n            [0, 0, 0, 2, 0, 0],\n            [0, 0, 1, 2, 4, 0]]\n\nassert f(g()) == 19\n",
        "idx_generation": 365,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list is a palindrome\"\"\"\n    return nums == nums[::-1]\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == False\n",
        "idx_generation": 91,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: List[int], n=3, s=10) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 1 for a in x])\ndef g(n = 3, s = 10):\n    x = [2, 3, 5]\n    return x[:n]\nassert f(g()) == True\n",
        "idx_generation": 89,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, target_word=\"python\") -> bool:\n    \"\"\"\n    Find if a given word can be formed by rearranging the characters of a string.\n    \"\"\"\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    for char in target_word:\n        if char not in char_count or char_count[char] == 0:\n            return False\n        char_count[char] -= 1\n    \n    return True\n\ndef g(target_word=\"python\"):\n    return \"optyhn\"\n\nassert f(g()) == True\n",
        "idx_generation": 23,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str]) -> bool:\n    \"\"\"\n    Check if the given list of words contains any duplicates.\n    Return True if the list contains duplicates, False otherwise.\n    \"\"\"\n    return len(words) != len(set(words))\n\ndef g(words=[\"apple\", \"banana\", \"orange\", \"banana\"]):\n    return (words,)\n    \nassert f(*g()) == True\n",
        "idx_generation": 446,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a pair of numbers whose product is equal to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] * lst[j] == target:\n                return True\n    return False\n\ndef g(lst: List[int] = [2, 5, 3, 4, 8]):\n    return lst\n\nassert f(g()) == True\n",
        "idx_generation": 135,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"\n    Given a list of integers, find a pair of numbers that sums up to the target number.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums = [10, 15, 5, 8, 2, 12, 20]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 101,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> int:\n    \"\"\"\n    Find the sum of all even numbers in the list.\n    \"\"\"\n    return sum([num for num in numbers if num % 2 == 0])\n\ndef g(numbers: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return (numbers,)\n\nassert f(*g()) == 30\n",
        "idx_generation": 113,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a prime number list.\n    A prime number list is a list where each element is a prime number.\n    \"\"\"\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return all(is_prime(x) for x in nums)\n\ndef g(nums: List[int] = [2, 3, 5, 7, 11]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 287,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if all numbers in the list are divisible by the target number.\n    \"\"\"\n    return all(num % target == 0 for num in nums)\n\ndef g(nums: List[int] = [10, 20, 30, 40, 50, 60], target: int = 10):\n    return (nums, target)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 191,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"Check if the given list of lists contains a square matrix.\"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n    return rows == cols\n\ndef g():\n    return [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\nassert f(g()) == True\n\n",
        "idx_generation": 416,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is a lower triangular matrix.\"\"\"\n    n = len(matrix)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(matrix=[[1,0,0],[2,4,0],[3,5,6]]):\n    return matrix\n\nassert f(g()) == True\n",
        "idx_generation": 107,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, calculate the sum of all even numbers in the list.\n    Return the sum of the even numbers.\n    \"\"\"\n    return sum(num for num in nums if num % 2 == 0)\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g()) == 30\n",
        "idx_generation": 463,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of numbers, determine if it is possible to find a subsequence of numbers that add up to the target number, using each number only once.\n\n    Sample input:\n    [1, 2, 3, 4, 5]\n\n    Sample output:\n    True\n\n    The subsequence [1, 4, 5] adds up to 10, which is the target number.\n    \"\"\"\n    def subsequence_sum(numbers, target, index):\n        if target == 0:\n            return True\n        if index >= len(numbers) or target < 0:\n            return False\n        return subsequence_sum(numbers, target - numbers[index], index + 1) or subsequence_sum(numbers, target, index + 1)\n    return subsequence_sum(numbers, target, 0)\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5, target]\n\nassert f(g()) == True\n",
        "idx_generation": 82,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n\n",
        "idx_generation": 253,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g(s='racecar'):\n    return s\n\nassert f(g()) == True\n",
        "idx_generation": 444,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(strings: List[str], target: str) -> bool:\n    \"\"\"\n    Given a list of strings and a target string, return True if the target string exists in the list,\n    otherwise return False.\n\n    Sample input:\n    strings = ['apple', 'banana', 'cherry']\n    target = 'banana'\n\n    Sample output:\n    True\n\n    Explanation: The target string 'banana' exists in the list.\n    \"\"\"\n    return any(target in s for s in strings)\n\ndef g(strings=['apple', 'banana', 'cherry'], target='banana'):\n    return strings, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 201,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], row_sum: int, col_sum: int) -> bool:\n    \"\"\"\n    Check if there exists a row and column in the given matrix whose sum is equal to the given row_sum and col_sum respectively.\n    \"\"\"\n    num_rows = len(matrix)\n    num_cols = len(matrix[0])\n    \n    for i in range(num_rows):\n        if sum(matrix[i]) == row_sum:\n            return True\n    \n    for j in range(num_cols):\n        col_total = 0\n        for i in range(num_rows):\n            col_total += matrix[i][j]\n        if col_total == col_sum:\n            return True\n    \n    return False\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], row_sum: int = 6, col_sum: int = 15):\n    return (matrix, row_sum, col_sum)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 448,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(lst: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subset of k numbers from the list whose sum is divisible by k.\"\"\"\n\n    def subsets_sum_divisible(nums, k, subset=[], index=0):\n        if len(subset) == k:\n            return sum(subset) % k == 0\n        if index >= len(nums):\n            return False\n        with_num = subsets_sum_divisible(nums, k, subset + [nums[index]], index + 1)\n        without_num = subsets_sum_divisible(nums, k, subset, index + 1)\n        return with_num or without_num\n\n    return subsets_sum_divisible(lst, k)\n    \ndef g():\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\nassert f(g()) == True\n",
        "idx_generation": 87,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=12, k=3) -> bool:\n    \"\"\"Find if there exists a combination of k numbers in the list that adds up to the target\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, k):\n        if sum(combo) == target:\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 20,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: List[int], n=3, s=10) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 1 for a in x])\ndef g(n = 3, s = 10):\n    x = [2, 3, 5]\n    return x[:n]\nassert f(g()) == True\n",
        "idx_generation": 114,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if the sum of each combination is divisible by the target_sum\n    for combo in combinations:\n        if sum(combo) % target_sum == 0:\n            return True\n\n    return False\n\ndef g(k=3, target_sum=5):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), k=3, target_sum=5) == True\n",
        "idx_generation": 335,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are exactly 'count' numbers that form a valid arithmetic progression with a common difference of 'target'.\n\n    Sample Input:\n    nums = [1, 3, 5, 7, 9]\n    target = 2\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(nums[i] + target == nums[i+1] and nums[i+1] + target == nums[i+2] for i in range(len(nums)-2))\n\ndef g(nums: List[int] = [1, 3, 5, 7, 9], target: int = 2, count: int = 3):\n    return (nums, target, count)\n\nassert f(*g())\n",
        "idx_generation": 413,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of a subarray.\n\n    Example:\n    nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\n    Output:\n    6\n\n    Explanation: The subarray [4, -1, 2, 1] has the maximum sum of 6.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n\ndef g():\n    return [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\nassert f(g()) == 6\n",
        "idx_generation": 223,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if i < j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size with random elements\n    \"\"\"\n    import random\n    return [[random.randint(0, 9) if i >= j else 0 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n\n",
        "idx_generation": 308,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"Return the maximum element in each column of a given matrix.\"\"\"\n    column_max = []\n    for i in range(len(matrix[0])):\n        max_val = max(row[i] for row in matrix)\n        column_max.append(max_val)\n    return column_max\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == [7, 8, 9]\n\n",
        "idx_generation": 384,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2) -> bool:\n    \"\"\"\n    Given a list of non-increasing integers and given an integer k, determine if there are exactly k positive integers\n    in the list that are larger than the kth integer.\n    \"\"\"\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return sum((s > scores[k] and s > 0 for s in scores)) == k\n\ndef g(scores = [20, 19, 17, 13, 12, 11, 10, 6], k = 2):\n    threshold = max(scores[k], 1)\n    return sum(s > threshold for s in scores)\n\nassert f(g()) == True\n",
        "idx_generation": 93,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: List[int], n=4, s=15) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and any([a % 2 == 0 for a in x])\ndef g(n = 4, s = 15):\n    x = [3] * n\n    x[0] = s - 3 * (n-1)\n    return x\nassert f(g()) == True\n",
        "idx_generation": 89,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], target: str) -> bool:\n    \"\"\"\n    Given a list of words, check if the target word is a concatenation of three other words from the list.\n\n    Example:\n    words = [\"apple\", \"banana\", \"pineapple\", \"orange\", \"watermelon\"]\n    target = \"applebananaorange\"\n    output: True\n    \"\"\"\n    for i in range(len(words)):\n        for j in range(len(words)):\n            for k in range(len(words)):\n                if i != j and i != k and j != k and words[i] + words[j] + words[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [\"apple\", \"banana\", \"pineapple\", \"orange\", \"watermelon\"], \"applebananaorange\"\n\nassert f(*g()) == True\n",
        "idx_generation": 52,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are two numbers in a given list that add up to the target number.\n\n    Sample Input:\n    [1, 2, 3, 4, 5], 7\n\n    Sample Output:\n    True\n    \"\"\"\n    complements = set()\n    for num in nums:\n        if num in complements:\n            return True\n        complements.add(target - num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 7\n\nassert f(*g()) == True\n",
        "idx_generation": 447,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int = 3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the given array, such that the sum of its elements is divisible by k.\"\"\"\n    for i in range(len(arr) - k + 1):\n        subarr = arr[i:i+k]\n        subarr_sum = sum(subarr)\n        if subarr_sum % k == 0:\n            return True\n    return False\n\ndef g(k: int = 3):\n    return [4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48]\n\nassert f(g()) == True\n",
        "idx_generation": 181,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"\n    Given a list of integers, find a pair of numbers that sums up to the target number.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums = [10, 15, 5, 8, 2, 12, 20]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 106,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(indices: List[int], nums=[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]) -> bool:\n    \"\"\"\n    Check if the square roots of the numbers in the given indices form an arithmetic sequence.\n\n    Example:\n    indices = [0, 2, 4] and nums = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    The square roots of the numbers at indices 0, 2, and 4 are [1, 3, 5].\n    These square roots form an arithmetic sequence with a common difference of 2.\n\n    Return True if the square roots of the numbers at the given indices form an arithmetic sequence, otherwise False.\n    \"\"\"\n    sqrt_nums = [nums[i] ** 0.5 for i in indices]\n    return all(sqrt_nums[i] - sqrt_nums[i - 1] == sqrt_nums[1] - sqrt_nums[0] for i in range(2, len(sqrt_nums)))\n    \ndef g(nums=[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]):\n    return [i for i in range(len(nums)) if i % 2 == 0]\n    \nassert f(g()) == True\n",
        "idx_generation": 114,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with each element being the product of all the elements in the original list except the one at that position.\n\n    Sample Input:\n    [1, 2, 3, 4, 5]\n\n    Sample Output:\n    [120, 60, 40, 30, 24]\n    \"\"\"\n    n = len(nums)\n    result = [1] * n\n\n    left_product = 1\n    for i in range(n):\n        result[i] *= left_product\n        left_product *= nums[i]\n\n    right_product = 1\n    for i in range(n - 1, -1, -1):\n        result[i] *= right_product\n        right_product *= nums[i]\n\n    return result\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == [120, 60, 40, 30, 24]\n\n",
        "idx_generation": 313,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(dictionary: Dict[str, int]) -> bool:\n    \"\"\"Check if the sum of all values in the dictionary is equal to the length of the keys.\"\"\"\n    return sum(dictionary.values()) == len(dictionary.keys())\n\ndef g():\n    dictionary = {'apple': 3, 'banana': 4, 'cherry': 5, 'date': 2, 'elderberry': 6}\n    return dictionary\n\nassert f(g()) == False\n",
        "idx_generation": 199,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if there exists a row and a column that have the same sum.\n\n    Sample Input:\n    arr = [[2, 4, 6], [8, 10, 12], [14, 16, 18]]\n\n    Sample Output:\n    True\n    \"\"\"\n    row_sum = [sum(row) for row in arr]\n    column_sum = [sum(column) for column in zip(*arr)]\n    return any(sum_value in column_sum for sum_value in row_sum)\n\ndef g(arr: List[List[int]]):\n    return arr\n\nassert f(g([[2, 4, 6], [8, 10, 12], [14, 16, 18]])) == True\n",
        "idx_generation": 418,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"\n    Given an integer n and a list of integers lst, check if there exists a pair of integers in the list whose sum is equal to n.\n\n    Sample input:\n    n = 10\n    lst = [1, 3, 5, 7, 9]\n\n    Sample output:\n    True\n\n    Explanation: The pair of integers [1, 9] in the list has a sum of 10.\n    \"\"\"\n    return any(n - num in lst for num in lst)\n\ndef g(n=10, lst=[1, 3, 5, 7, 9]):\n    return n, lst\n\nassert f(*g()) == True\n",
        "idx_generation": 115,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Find a row in the matrix that contains all the numbers from 1 to 9.\"\"\"\n    return any(set(row) == set(range(1, 10)) for row in matrix)\ndef g(target=15):\n    return [[1, 2, 3, 4, 5, 6, 7, 8, 9], [9, 8, 7, 6, 5, 4, 3, 2, 1], [5, 6, 7, 8, 9, 1, 2, 3, 4]]\nassert f(g()) == True\n",
        "idx_generation": 464,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: List[int], n=5, s=25) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 5, s = 25):\n    if n == 1:\n        return [s]\n    elif n == 2:\n        return [s - 1, 1]\n    elif n == 3:\n        return [s - 2, 1, 1]\n    elif n == 4:\n        return [s/4, s/4, s/4, s/4]\n    else:\n        return [s/5, s/5, s/5, s/5, s/5]\nassert f(g()) == True\n",
        "idx_generation": 86,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a perfect square.\n    A perfect square is a square grid where the number of rows is equal to the number of columns.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n    return rows == cols\n\ndef g(arr: List[List[int]]):\n    arr = np.array(arr)\n    return arr.tolist()\n\nassert f(g([[1, 2, 3], [4, 5, 6], [7, 8, 9]])) == True\n\n",
        "idx_generation": 255,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(s: str) -> str:\n    \"\"\"\n    Given a string, reverse the string and return the reversed version.\n\n    Sample input:\n    \"Hello, World!\"\n\n    Sample output:\n    \"!dlroW ,olleH\"\n    \"\"\"\n    return s[::-1]\n\ndef g():\n    return \"Hello, World!\"\n\nassert f(g()) == \"!dlroW ,olleH\"\n\n",
        "idx_generation": 445,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, n: int, k: int) -> bool:\n    \"\"\"\n    Determine if a given string is a palindrome after removing exactly n characters from it,\n    and replacing exactly k characters in it.\n\n    Sample input:\n    \"racecar\", 2, 1\n\n    Sample output:\n    True\n\n    Explanation:\n    By removing 'a' and 'e', and replacing 'r' with 't', the string \"racecar\" becomes a palindrome.\n    \"\"\"\n    if n < 0 or k < 0:\n        return False\n    if n == 0 and k == 0:\n        return s == s[::-1]\n    if len(s) <= 1:\n        return True\n    if s[0] == s[-1]:\n        return f(s[1:-1], n, k)\n    else:\n        return f(s[1:], n - 1, k) or f(s[:-1], n - 1, k) or f(s[1:-1], n, k - 1)\n\ndef g(s: str = \"racecar\", n: int = 2, k: int = 1):\n    return (s, n, k)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 215,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list where each element is the sum of all other elements in the original list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6]\n\n    Output:\n    [20, 19, 18, 17, 16, 15]\n\n    Explanation: The first element in the output is the sum of all other elements except 1, the second element is the sum of all other elements except 2, and so on.\n    \"\"\"\n    n = len(nums)\n    result = [0] * n\n\n    for i in range(n):\n        result[i] = sum(nums) - nums[i]\n\n    return result\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6], target: int = 9):\n    return (nums, target)\n\nassert f(*g()) == [20, 19, 18, 17, 16, 15]\n\n",
        "idx_generation": 448,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=14, b=50, c=47) -> bool:\n    \"\"\"Find n such that n + a is equal to the sum of the square roots of the first c integers, multiplied by b\"\"\"\n    return n + a == sum([b * math.sqrt(i) for i in range(1, c+1)])\ndef g(a = 14, b = 50, c = 47):\n    return -a + sum([b * math.sqrt(i) for i in range(1, c+1)])\nassert f(g()) == True\n",
        "idx_generation": 103,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of four people having the same birthday in a group of n is near 1/4.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 1/4) ** 2 <= year_len\ndef g(year_len = 365):\n    n = 1\n    distinct_prob = 1.0\n    best = (1/4, 1)  # (difference between probability and 1/4, n)\n    while distinct_prob > 1/4:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(1/4 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True\n",
        "idx_generation": 22,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum: int = 100) -> bool:\n    \"\"\"\n    Given a list of numbers, find a subset of numbers that sums up to the target_sum.\n    Return True if such a subset exists, False otherwise.\n    \"\"\"\n    def subset_sum(numbers, target_sum, memo={}):\n        if target_sum in memo:\n            return memo[target_sum]\n        if target_sum == 0:\n            return True\n        if target_sum < 0 or not numbers:\n            return False\n        include = subset_sum(numbers[1:], target_sum - numbers[0], memo)\n        exclude = subset_sum(numbers[1:], target_sum, memo)\n        memo[target_sum] = include or exclude\n        return memo[target_sum]\n\n    return subset_sum(numbers, target_sum)\n\ndef g(numbers=[10, 20, 30, 40, 50]):\n    return (numbers,)\n\nassert f(*g()) == True\n",
        "idx_generation": 126,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if the sum of each combination is equal to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False\n\ndef g(k=2, target_sum=7):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), k=2, target_sum=7) == True\n",
        "idx_generation": 346,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Rearrange the numbers in the given list such that all even numbers appear first, followed by all odd numbers.\n    \"\"\"\n    evens = []\n    odds = []\n    for num in nums:\n        if num % 2 == 0:\n            evens.append(num)\n        else:\n            odds.append(num)\n    return evens + odds\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == [2, 4, 6, 8, 10, 1, 3, 5, 7, 9]\n\n\n",
        "idx_generation": 417,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is an upper triangular matrix.\"\"\"\n    n = len(matrix)\n    \n    for i in range(n):\n        for j in range(i):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(matrix=[[1,2,3],[0,4,5],[0,0,6]]):\n    return matrix\n\nassert f(g()) == True\n",
        "idx_generation": 224,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=7, s=31) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 7, s = 31):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g())\n",
        "idx_generation": 313,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if the matrix is a symmetric matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    \"\"\"Generate a symmetric matrix.\"\"\"\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g()) == True\n\n",
        "idx_generation": 391,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are exactly 'count' numbers that sum up to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    target = 15\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(sum(nums[i] for i in indices) == target for indices in itertools.combinations(range(len(nums)), count))\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 15, count: int = 3):\n    return (nums, target, count)\n\nassert f(*g())\n",
        "idx_generation": 97,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\ndef f(squares: List[List[int]], m=4, n=10) -> bool:\n    \"\"\"Position min(m, n) <= 4 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 4, n = 10):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g()) == True\n",
        "idx_generation": 96,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target.\"\"\"\n    return any(target - num in numbers for num in numbers)\ndef g(numbers: List[int], target: int):\n    return (numbers, target)\nassert f(*g([1, 2, 3, 4, 5], 7)) == True\n",
        "idx_generation": 58,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exist two numbers in a given list that sum up to the target\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 459,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=4, s=20) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 4, s = 20):\n    x = [2, 4, 6, 8, 10]\n    return x[:n]\nassert f(g()) == True\n",
        "idx_generation": 267,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int = 3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the given array, such that the sum of its elements is greater than or equal to k.\"\"\"\n    for i in range(len(arr) - k + 1):\n        subarr = arr[i:i+k]\n        if sum(subarr) >= k:\n            return True\n    return False\n\ndef g(k: int = 3):\n    return [1] * k\n\nassert f(g()) == True\n",
        "idx_generation": 115,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given matrix whose product is equal to the target number.\n    \n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 60\n    The numbers 6 and 10 in the matrix have a product of 60.\n    \n    Return True if there exists a pair of numbers whose product is equal to the target, otherwise False.\n    \"\"\"\n    nums = set()\n    for row in matrix:\n        for num in row:\n            if target % num == 0 and target//num in nums:\n                return True\n            nums.add(num)\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == True\n",
        "idx_generation": 132,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=7, b=25, c=30) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])\ndef g(a = 7, b = 25, c = 30):\n    return -a + sum([b * i for i in range(c)])\nassert f(g())\n",
        "idx_generation": 341,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, determine if all the elements in the list are positive.\n    \"\"\"\n    return all(num > 0 for num in nums)\n\ndef g(nums = [1, 2, 3, 4, 5, 6]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 224,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n",
        "idx_generation": 422,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import *\nimport numpy as np\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a diagonal matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a diagonal matrix of the given size\n    \"\"\"\n    return [[1 if j == i else 0 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n",
        "idx_generation": 120,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, find the sum of all the elements in the matrix.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    45\n    \"\"\"\n    total_sum = 0\n    for row in matrix:\n        for num in row:\n            total_sum += num\n    return total_sum\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 45\n\n",
        "idx_generation": 465,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Find if there exists a subsequence of length k in an array that is strictly increasing\"\"\"\n    n = len(arr)\n    if k > n:\n        return False\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    return any(dp[i] >= k for i in range(n))\n\ndef g(k=3):\n    return [1, 2, 3, 4, 5, 6, 7]\n\nassert f(g()) == True\n",
        "idx_generation": 88,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a grid where the sum of each row, each column, and both diagonals are the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    target_sum = sum(arr[0])\n    for i in range(n):\n        if sum(arr[i]) != target_sum:\n            return False\n        if sum(arr[j][i] for j in range(n)) != target_sum:\n            return False\n    if sum(arr[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(arr[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 273,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, check if it is a palindrome.\n\n    Sample input:\n    s = \"racecar\"\n\n    Sample output:\n    True\n\n    Explanation: The string \"racecar\" is a palindrome.\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s: str = \"racecar\"):\n    return s\n\nassert f(g()) == True\n\n",
        "idx_generation": 446,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str = \"python\") -> bool:\n    \"\"\"Check if the given string contains all the letters of the target string in order.\"\"\"\n    target_index = 0\n    for char in s:\n        if char == target[target_index]:\n            target_index += 1\n        if target_index == len(target):\n            return True\n    return False\n\ndef g(target: str = \"python\"):\n    \"\"\"Generate a string that contains all the letters of the target string in order.\"\"\"\n    return \"\".join([char * (ord(char) - 96) for char in target])\n\nassert f(g())\n",
        "idx_generation": 274,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=8, b=3, c=10) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c odd integers)\"\"\"\n    odd_sum = sum([2*i + 1 for i in range(c)])\n    return n + a == b * odd_sum\n\ndef g(a=8, b=3, c=10):\n    odd_sum = sum([2*i + 1 for i in range(c)])\n    return -a + b * odd_sum\n\nassert f(g())\n",
        "idx_generation": 453,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_product: int) -> bool:\n    \"\"\"\n    Given a list of numbers, find a subset of numbers that multiplies to the target_product.\n    Return True if such a subset exists, False otherwise.\n    \"\"\"\n    def subset_product(numbers, target_product, memo={}):\n        if target_product in memo:\n            return memo[target_product]\n        if target_product == 1:\n            return True\n        if target_product < 1 or not numbers:\n            return False\n        include = subset_product(numbers[1:], target_product // numbers[0], memo)\n        exclude = subset_product(numbers[1:], target_product, memo)\n        memo[target_product] = include or exclude\n        return memo[target_product]\n\n    return subset_product(numbers, target_product)\n\ndef g(numbers=[2, 3, 4, 5, 6], target_product=120):\n    return (numbers, target_product)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 108,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, n=100) -> bool:\n    \"\"\"Find the number of occurrences of the letter 'a' in the string\"\"\"\n    return s.count('a') == n\ndef g(n=100):\n    return 'a' * n + 'b'\nassert f(g()) == True\n",
        "idx_generation": 34,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum: int = 10) -> bool:\n    \"\"\"\n    Given a list of numbers, find a subset of numbers that sums up to the target_sum.\n    Return True if such a subset exists, False otherwise.\n    \"\"\"\n    def subset_sum(numbers, target_sum, memo={}):\n        if target_sum in memo:\n            return memo[target_sum]\n        if target_sum == 0:\n            return True\n        if target_sum < 0 or not numbers:\n            return False\n        include = subset_sum(numbers[1:], target_sum - numbers[0], memo)\n        exclude = subset_sum(numbers[1:], target_sum, memo)\n        memo[target_sum] = include or exclude\n        return memo[target_sum]\n\n    return subset_sum(numbers, target_sum)\n\ndef g(numbers=[5, 10, 15, 20, 25]):\n    return (numbers[::-1],)\n\nassert f(*g()) == True\n",
        "idx_generation": 129,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=100, b=500, c=1000) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])\ndef g(a=100, b=500, c=1000):\n    return -a + sum([b * i for i in range(c)])\nassert f(g())\n",
        "idx_generation": 384,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], n: int) -> bool:\n    \"\"\"\n    Check if there are n consecutive numbers in the given list.\n    \"\"\"\n    for i in range(len(nums) - n + 1):\n        if all(nums[i+j] == nums[i+j+1] - 1 for j in range(n-1)):\n            return True\n    return False\n\ndef g(n=3):\n    return [4, 5, 6, 1, 2, 3, 7, 8, 9]\n\nassert f(g(), n=3) == True\n\n",
        "idx_generation": 417,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, find the minimum value in the matrix.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    output: 1\n    \"\"\"\n    min_val = float('inf')\n    for row in matrix:\n        for num in row:\n            if num < min_val:\n                min_val = num\n    return min_val\n\ndef g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\nassert f(g()) == 1\n",
        "idx_generation": 226,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, target='zyxwvutsrqponmlkjihgfedcba') -> bool:\n    \"\"\"Check if the characters of a string are in reverse alphabetical order\"\"\"\n    return s == target\ndef g(target='zyxwvutsrqponmlkjihgfedcba'):\n    return ''.join(sorted(target, reverse=True))\nassert f(g()) == True\n",
        "idx_generation": 3,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there exists three numbers in a list that sum up to a given target\"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g(), target=15) == True\n\n",
        "idx_generation": 323,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"Check if the given list of lists contains a symmetric matrix.\"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n    return all(len(row) == cols for row in arr) and all(arr[i][j] == arr[j][i] for i in range(rows) for j in range(cols))\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g()) == True\n\n",
        "idx_generation": 416,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(names: List[str], ages: List[int]) -> bool:\n    \"\"\"Check if all names in the list are unique and all ages are greater than 18.\"\"\"\n    if len(names) == len(set(names)) and all(age > 18 for age in ages):\n        return True\n    return False\n\ndef g():\n    return (['Alice', 'Bob', 'Charlie'], [25, 20, 30])\n\nassert f(*g()) == True\n",
        "idx_generation": 101,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a permutation of the numbers from 1 to n.\"\"\"\n    n = len(nums)\n    return set(nums) == set(range(1, n+1))\n\ndef g(nums=[1, 2, 3, 4, 5, 6]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 116,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of numbers, determine if it is possible to find a pair of numbers whose product is equal to the \n    target number.\n\n    Sample input:\n    [2, 4, 6, 8]\n\n    Sample output:\n    True\n\n    The pair of numbers (2, 8) has a product of 16, which is the target number.\n    \"\"\"\n    return any(num1 * num2 == target for i, num1 in enumerate(numbers) for num2 in numbers[i+1:])\n\ndef g(target=0):\n    return [2, 4, 6, target // 2]\n\nassert f(g()) == True\n",
        "idx_generation": 59,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of numbers `nums` and a target number `target`, find the number of pairs of numbers in `nums`\n    such that their sum is equal to the target number.\n\n    For example, if nums = [1, 2, 3, 4, 5] and target = 7, the pairs (2, 5) and (3, 4) sum up to the target number,\n    so the output should be 2.\n    \"\"\"\n    num_set = set()\n    count = 0\n    for num in nums:\n        if target - num in num_set:\n            count += 1\n        num_set.add(num)\n    return count\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return (nums, target)\n\nassert f(*g()) == 2\n\n",
        "idx_generation": 466,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], n=6) -> bool:\n    \"\"\"Check if there exists a subsequence of length n in the list that is strictly increasing\"\"\"\n    for i in range(len(nums)-n+1):\n        subsequence = nums[i:i+n]\n        if all(subsequence[j] < subsequence[j+1] for j in range(n-1)):\n            return True\n    return False\n\ndef g(n = 6):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 279,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=10):\n    return [1, 3, 5, 7, 9]\nassert f(g()) == True\n",
        "idx_generation": 134,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target.\"\"\"\n    prefix_sum = 0\n    sum_set = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target or prefix_sum - target in sum_set:\n            return True\n        sum_set.add(prefix_sum)\n    return False\n\ndef g(target=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 137,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subsequence of the list whose product is equal to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][1] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j // nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(nums=[2, 4, 6, 8], target=48):\n    return nums, target\n\nassert f(*g()) == True\n",
        "idx_generation": 356,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int = 2) -> List[int]:\n    \"\"\"Find all the subarrays of length k in the given array, such that the sum of its elements is divisible by k.\"\"\"\n    subarrays = []\n    for i in range(len(arr) - k + 1):\n        subarr = arr[i:i+k]\n        subarr_sum = sum(subarr)\n        if subarr_sum % k == 0:\n            subarrays.append(subarr)\n    return subarrays\n\ndef g(k: int = 2):\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\nassert f(g()) == [[2, 4], [4, 6], [6, 8], [8, 10], [10, 12], [12, 14], [14, 16], [16, 18], [18, 20]]\n",
        "idx_generation": 231,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n\n    A magic square is a square matrix where the sum of each row, each column, and both diagonals are equal.\n\n    Sample Input:\n    matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])  # Target sum for rows, columns, and diagonals\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for col in np.transpose(matrix):\n        if sum(col) != target_sum:\n            return False\n\n    # Check diagonal from top-left to bottom-right\n    diagonal1 = [matrix[i][i] for i in range(n)]\n    if sum(diagonal1) != target_sum:\n        return False\n\n    # Check diagonal from top-right to bottom-left\n    diagonal2 = [matrix[i][n-i-1] for i in range(n)]\n    if sum(diagonal2) != target_sum:\n        return False\n    \n    return True\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == False\n\n",
        "idx_generation": 480,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is not equal to the target.\"\"\"\n    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n        if curr_sum != target:\n            return True\n    return False\n\ndef g() -> Tuple[List[int], int]:\n    return ([2, 4, 6, 8, 10], 20)\n\nassert f(*g()) == True\n",
        "idx_generation": 129,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return a list containing the diagonal elements of the matrix.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    [1, 5, 9]\n    \"\"\"\n    n = len(matrix)\n    diagonal_elements = []\n    for i in range(n):\n        diagonal_elements.append(matrix[i][i])\n    return diagonal_elements\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [1, 5, 9]\n\n",
        "idx_generation": 465,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target number, determine if it is possible to find a subsequence of numbers that add up to the target number.\n\n    Sample input:\n    numbers = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample output:\n    True\n\n    The subsequence [1, 3, 5] adds up to 9, which is the target number.\n    \"\"\"\n    def subsequence_sum(numbers, target, index):\n        if target == 0:\n            return True\n        if index >= len(numbers) or target < 0:\n            return False\n        return subsequence_sum(numbers, target - numbers[index], index + 1) or subsequence_sum(numbers, target, index + 1)\n    return subsequence_sum(numbers, target, 0)\n\ndef g(numbers=[1, 2, 3, 4, 5], target=9):\n    return (numbers, target)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 91,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a square matrix.\n    A square matrix is a grid where the number of rows is equal to the number of columns.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    num_rows = len(arr)\n    num_cols = len(arr[0])\n    return num_rows == num_cols\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 292,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    \"\"\"\n\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g()) == True\n\n\n",
        "idx_generation": 450,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"\n    Determine if a given string is a palindrome after removing exactly n characters from it.\n\n    Sample input:\n    \"racecar\", 1\n\n    Sample output:\n    True\n\n    Explanation:\n    By removing 'e', the string \"racecar\" becomes a palindrome.\n    \"\"\"\n    if n < 0:\n        return False\n    if n == 0:\n        return s == s[::-1]\n    if len(s) <= 1:\n        return True\n    if s[0] == s[-1]:\n        return f(s[1:-1], n)\n    else:\n        return f(s[1:], n - 1) or f(s[:-1], n - 1)\ndef g(s: str = \"racecar\", n: int = 1):\n    return (s, n)\nassert f(*g())\n\n",
        "idx_generation": 291,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=14, b=50, c=47) -> bool:\n    \"\"\"Find n such that n + a == (b * c) - (the sum of the first c integers)\"\"\"\n    return n + a == (b * c) - sum([i for i in range(c)])\n\ndef g(a=14, b=50, c=47):\n    return -a + (b * c) - sum([i for i in range(c)])\n\nassert f(g())\n",
        "idx_generation": 457,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, k: int, target: int) -> bool:\n    \"\"\"Find the smallest number that can be expressed as the sum of k distinct positive integers, each raised to the power of n.\"\"\"\n    nums = [i**n for i in range(1, k+1)]\n    sums = [0] * (target + 1)\n    for i in range(k):\n        for j in range(target, nums[i]-1, -1):\n            if sums[j-nums[i]] + 1 > sums[j]:\n                sums[j] = sums[j-nums[i]] + 1\n    return sums[target] == k\ndef g(k = 3, n = 2, target = 30):\n    return k, n, target\nassert f(*g())\n",
        "idx_generation": 122,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, count: int) -> List[List[int]]:\n    \"\"\"Find all combinations of count numbers that add up to the target\"\"\"\n    combinations = []\n    for indices in itertools.combinations(range(len(nums)), count):\n        if sum(nums[i] for i in indices) == target:\n            combination = [nums[i] for i in indices]\n            combinations.append(combination)\n    return combinations\n\ndef g(target: int = 10, count: int = 2, nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return (nums, target, count)\n\nassert f(*g()) == [[1, 9], [2, 8], [3, 7], [4, 6]]\n",
        "idx_generation": 46,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum: int = 10) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that sums up to the target_sum.\n    \"\"\"\n    def find_combination(start, curr_sum):\n        if curr_sum == target_sum:\n            return True\n        if curr_sum > target_sum or start == len(nums):\n            return False\n        for i in range(start, len(nums)):\n            if find_combination(i + 1, curr_sum + nums[i]):\n                return True\n        return False\n\n    return find_combination(0, 0)\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is\n    \"\"\"\n    return nums\n\nassert f(g([1, 2, 3, 4, 5, 6, 7, 8, 9])) == True\n\n",
        "idx_generation": 132,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=10) -> bool:\n    \"\"\"What is the sum of the digits of n factorial?\"\"\"\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n    return sum(int(digit) for digit in str(factorial(n))) == int(s)\ndef g(n = 10):\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n    return str(sum(int(digit) for digit in str(factorial(n))))\nassert f(g())\n",
        "idx_generation": 446,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"Find two numbers in the list that add up to the given target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return [nums[i], nums[j]]\n    return []\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g(), target=10) == [1, 9]\n",
        "idx_generation": 418,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is sorted in non-decreasing order.\n    \"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\n\ndef g(nums: List[int] = [1, 3, 2, 4, 5]):\n    return nums\n\nassert f(g()) == False\n",
        "idx_generation": 227,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import random\nfrom typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a prime number\"\"\"\n    return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))\ndef g():\n    return random.randint(1, 100)\nassert f(g())\n",
        "idx_generation": 6,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the maximum difference between any two numbers in the list.\n    \"\"\"\n    min_num = float('inf')\n    max_diff = 0\n    for num in nums:\n        min_num = min(min_num, num)\n        max_diff = max(max_diff, num - min_num)\n    return max_diff\n\ndef g(nums: List[int] = [1, 6, 2, 9, 4]):\n    return nums\n\nassert f(g()) == 8\n\n",
        "idx_generation": 338,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix of integers, rotate it 90 degrees counter-clockwise.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    [[3, 6, 9],\n     [2, 5, 8],\n     [1, 4, 7]]\n    \"\"\"\n    n = len(matrix)\n    rotated_matrix = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            rotated_matrix[i][j] = matrix[j][n - i - 1]\n    return rotated_matrix\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [[3, 6, 9], [2, 5, 8], [1, 4, 7]]\n",
        "idx_generation": 438,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2) -> bool:\n    \"\"\"\n    Given a list of non-increasing integers and given an integer k, determine if there are exactly n positive integers in the list\n    that are at least as large as the kth.\n    \"\"\"\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return sum(s >= scores[k] and s > 0 for s in scores) == n\ndef g(scores = [20, 19, 17, 13, 12, 11, 10, 6], k = 2):\n    threshold = max(scores[k], 1)\n    return sum(s >= threshold for s in scores)\nassert f(g()) == True\n",
        "idx_generation": 104,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int = 3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the given array, such that the sum of its elements is divisible by k.\"\"\"\n    for i in range(len(arr) - k + 1):\n        subarr = arr[i:i+k]\n        subarr_sum = sum(subarr)\n        if subarr_sum % k == 0:\n            return True\n    return False\n\ndef g(k: int = 3):\n    return [k] * k\n\nassert f(g()) == True\n",
        "idx_generation": 119,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: List[str], n=3, s=15) -> bool:\n    \"\"\"Find a list of n strings with length s\"\"\"\n    return len(x) == n and all([len(a) == s for a in x])\ndef g(n = 3, s = 15):\n    return [\"a\" * s] * n\nassert f(g()) == True\n",
        "idx_generation": 62,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], n: int = 5) -> int:\n    \"\"\"\n    Given a list of integers and a target number n, count the number of occurrences of n in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num == n:\n            count += 1\n    return count\n\ndef g(n: int = 5):\n    return [1, 5, 2, 5, 3, 5, 4, 5, 5]\n\nassert f(g()) == 5\n\n",
        "idx_generation": 469,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums: List[int] = [1, 2, 3, 2, 1]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 284,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return ([2, 7, 11, 15], 9)\n\nassert f(*g()) == True\n",
        "idx_generation": 134,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sums up to zero\"\"\"\n    return any(arr[i] + arr[j] == 0 for i in range(len(arr)) for j in range(i+1, len(arr)))\n\ndef g(arr=[1, 2, 3, -1, -2, -3]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 144,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers `nums` and an integer `k`, find if there exists a subarray in the list that sums up to a multiple of k.\n    Return True if such a subarray exists, False otherwise.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    k = 6\n    Output: True\n    Explanation: The subarray [1, 2, 3] sums up to 6, which is a multiple of 6.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum % k == 0 or prefix_sum - k in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], k: int = 6):\n    return (nums, k)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 356,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Return the sum of all the elements in the given matrix.\n\n    Sample input:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample output:\n    45\n\n    Explanation: The sum of all the elements in the matrix is 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45.\n    \"\"\"\n    total_sum = 0\n    for row in matrix:\n        total_sum += sum(row)\n    return total_sum\n\ndef g() -> List[List[int]]:\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == 45\n",
        "idx_generation": 257,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(l: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a contiguous subarray whose sum is equal to zero.\n    \"\"\"\n    prefix_sum = set()\n    curr_sum = 0\n    for num in l:\n        curr_sum += num\n        if curr_sum == 0 or curr_sum in prefix_sum:\n            return True\n        prefix_sum.add(curr_sum)\n    return False\n\ndef g():\n    return [4, 2, -3, 1, 6]\n\nassert f(g()) == True\n",
        "idx_generation": 131,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that sums up to the target value.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g(), target=10) == True\n\n",
        "idx_generation": 465,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(t: Tuple[List[int], int]) -> bool:\n    \"\"\"\n    Given a tuple containing a list of numbers and a target number, determine if it is possible to find a subsequence of numbers that add up to the target number.\n\n    Sample input:\n    t = ([1, 2, 3, 4, 5], 7)\n\n    Sample output:\n    True\n\n    The subsequence [2, 5] adds up to 7, which is the target number.\n    \"\"\"\n    def subsequence_sum(numbers, target, index):\n        if target == 0:\n            return True\n        if index >= len(numbers) or target < 0:\n            return False\n        return subsequence_sum(numbers, target - numbers[index], index + 1) or subsequence_sum(numbers, target, index + 1)\n    return subsequence_sum(*t, 0)\n\ndef g(numbers=[1, 2, 3, 4, 5], target=7):\n    return (numbers, target)\n\nassert f(g()) == True\n",
        "idx_generation": 91,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a symmetric matrix.\n    A symmetric matrix is a grid where the transpose of the grid is equal to the original grid.\n\n    Sample Input:\n    arr = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    transpose = [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0]))]\n    return arr == transpose\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 292,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n\n    Example:\n    nums = [1, 2, 3, 2, 1]\n    output: True\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g()) == True\n",
        "idx_generation": 451,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n\n    Example:\n    nums = [1, 2, 3, 2, 1]\n    output: True\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g()) == True\n\n",
        "idx_generation": 305,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=3) -> bool:\n    \"\"\"Check if n is divisible by a or b\"\"\"\n    return n % a == 0 or n % b == 0\ndef g(a = 2, b = 3):\n    return a * b\nassert f(g()) == True\n",
        "idx_generation": 463,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum: int = 0) -> bool:\n    \"\"\"\n    Given a list of numbers, find a subset of numbers that sums up to the target_sum.\n    Return True if such a subset exists, False otherwise.\n    \"\"\"\n    def subset_sum(numbers, target_sum, memo={}):\n        if target_sum in memo:\n            return memo[target_sum]\n        if target_sum == 0:\n            return True\n        if target_sum < 0 or not numbers:\n            return False\n        include = subset_sum(numbers[1:], target_sum - numbers[0], memo)\n        exclude = subset_sum(numbers[1:], target_sum, memo)\n        memo[target_sum] = include or exclude\n        return memo[target_sum]\n\n    return subset_sum(numbers, target_sum)\n\ndef g(numbers=[1, 2, 3, 4, 5]):\n    return (numbers,)\n\nassert f(g()) == True\n",
        "idx_generation": 126,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import *\ndef f(numbers: List[int], k=3) -> bool:\n    \"\"\"\n    Determine if it is possible to find a subarray of k numbers in a list that sums up to zero.\n\n    Sample input:\n    [-1, 2, 1, -4, 3]\n\n    Sample output:\n    True\n\n    The subarray [-1, 2, -4] sums up to zero.\n    \"\"\"\n    from itertools import combinations\n    return any(sum(combination) == 0 for combination in combinations(numbers, k))\ndef g(k=3):\n    return [-1, 2, 1, -4, 3]\nassert f(g()) == True\n",
        "idx_generation": 49,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum: int = 20) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that sums up to the target_sum.\n    \"\"\"\n    def find_combination(start, curr_sum):\n        if curr_sum == target_sum:\n            return True\n        if curr_sum > target_sum or start == len(nums):\n            return False\n        for i in range(start, len(nums)):\n            if find_combination(i + 1, curr_sum + nums[i]):\n                return True\n        return False\n\n    return find_combination(0, 0)\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is\n    \"\"\"\n    return nums\n\nassert f(g([5, 10, 15, 20, 25, 30, 35, 40, 45])) == True\n",
        "idx_generation": 146,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target, find if there are count numbers that multiply to the target, but the numbers can be repeated.\n\n    Sample Input:\n    numbers = [2, 3, 4, 5, 6]\n    target = 120\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    from itertools import combinations_with_replacement\n\n    for combo in combinations_with_replacement(numbers, count):\n        product = 1\n        for num in combo:\n            product *= num\n        if product == target:\n            return True\n    return False\n\ndef g():\n    return [2, 3, 4, 5, 6], 120, 3\n\nassert f(*g()) == True\n",
        "idx_generation": 448,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains any duplicate elements.\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == False\n",
        "idx_generation": 418,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there exists three numbers in the given list whose sum is equal to the target number.\n    \"\"\"\n    nums.sort()\n    for i in range(len(nums) - 2):\n        left = i + 1\n        right = len(nums) - 1\n        while left < right:\n            curr_sum = nums[i] + nums[left] + nums[right]\n            if curr_sum == target:\n                return True\n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(nums: List[int] = [1, 4, 5, 2, 8, 3], target: int = 10):\n    return nums, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 254,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, substrings=['abc', 'def', 'ghi', 'jkl']) -> bool:\n    \"\"\"\n    Find the minimum number of operations required to make the string s contain all the substrings in the given order.\n    An operation can be either inserting a substring or deleting a substring.\n    \"\"\"\n    index = 0\n    operations = 0\n    for sub in substrings:\n        if sub not in s[index:]:\n            operations += 1\n        else:\n            index += s[index:].index(sub) + len(sub)\n    return operations\ndef g(substrings=['abc', 'def', 'ghi', 'jkl']):\n    return ''.join(substrings)\nassert f(g()) == 0\n",
        "idx_generation": 15,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> List[int]:\n    \"\"\"\n    Find two numbers in the list that add up to the target value and return them in a list.\n\n    Sample input:\n    nums = [2, 4, 6, 8]\n\n    Sample output:\n    [2, 8]\n\n    Explanation: The numbers 2 and 8 add up to the target value of 10.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return [num, complement]\n    return []\n\ndef g() -> List[int]:\n    return [2, 4, 6, 8]\n\nassert f(g()) == [2, 8]\n",
        "idx_generation": 348,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transpose the given matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    transposed = [[0 for _ in range(rows)] for _ in range(cols)]\n    for i in range(rows):\n        for j in range(cols):\n            transposed[j][i] = matrix[i][j]\n    return transposed\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g()) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n",
        "idx_generation": 442,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(li: List[int], target=15) -> bool:\n    \"\"\"Find a pair of integers in the list that sum up to the target value.\"\"\"\n    return any((li[i] + li[j] == target) for i in range(len(li)) for j in range(i+1, len(li)))\ndef g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g()) == True\n",
        "idx_generation": 128,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers can be partitioned into two subarrays with equal sum.\n\n    Example:\n    nums = [1, 5, 11, 5]\n\n    Output:\n    True\n\n    Explanation: The list can be partitioned into [1, 5, 5] and [11], both having a sum of 11.\n    \"\"\"\n    total_sum = sum(nums)\n    if total_sum % 2 != 0:\n        return False\n    target_sum = total_sum // 2\n    dp = [False] * (target_sum + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target_sum, num - 1, -1):\n            if dp[i - num]:\n                dp[i] = True\n    return dp[target_sum]\n\ndef g():\n    return [1, 5, 11, 5]\n\nassert f(g()) == True\n",
        "idx_generation": 123,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"Count the number of even numbers in the list.\"\"\"\n    return len([num for num in nums if num % 2 == 0])\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g()) == 4\n\n",
        "idx_generation": 80,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers and an integer k, check if there exists a subarray of length k such that all elements in the subarray are distinct.\n\n    Sample Input:\n    nums = [1, 2, 3, 1, 4, 5]\n    k = 4\n\n    Sample Output:\n    False\n    \"\"\"\n    num_set = set()\n    for i in range(len(nums) - k + 1):\n        subarray = nums[i:i+k]\n        if len(subarray) != len(set(subarray)):\n            return False\n    return True\n\ndef g():\n    return [1, 2, 3, 1, 4, 5], 4\n\nassert f(*g()) == False\n",
        "idx_generation": 473,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> List[int]:\n    \"\"\"\n    Given a list of numbers, find all the indices of occurrences of the target number.\n    If the target number is not in the list, return an empty list.\n    \"\"\"\n    indices = []\n    for i, num in enumerate(nums):\n        if num == target:\n            indices.append(i)\n    return indices\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]\n\nassert f(g()) == [9, 10, 11, 12]\n\n",
        "idx_generation": 288,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists two numbers in the given list nums whose sum is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g()) == True\n",
        "idx_generation": 140,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if all numbers in the list are divisible by the given number.\"\"\"\n    for num in lst:\n        if num % n != 0:\n            return False\n    return True\n\ndef g(lst: List[int] = [10, 20, 30, 40, 50], n: int = 5):\n    return (n, lst)\n\nassert f(*g()) == True\n",
        "idx_generation": 156,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if there exists a subsequence (not necessarily contiguous) whose sum is equal to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n\n    Explanation:\n    The subsequence (2, 3, 4) has a sum of 9.\n    \"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n    for i in range(1, n + 1):\n        dp[i][0] = True\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j - nums[i - 1]] or dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (nums, target)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 411,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Find the index of the first occurrence of the target number in the list.\n    If the target is not present, return -1.\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return i\n    return -1\n\ndef g() -> Tuple[List[int], int]:\n    return ([1, 2, 3, 4, 5, 6, 7, 8, 9], 5)\n\nassert f(*g()) == 4\n\n",
        "idx_generation": 266,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], n=5, target=10) -> bool:\n    \"\"\"Check if there exists a submatrix in the matrix whose sum is equal to the target.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            submatrix_sum = 0\n            for x in range(i, len(matrix)):\n                for y in range(j, len(matrix[0])):\n                    submatrix_sum += matrix[x][y]\n                    if submatrix_sum == target:\n                        return True\n                    if submatrix_sum > target:\n                        break\n    return False\n\ndef g(n=5, target=10):\n    return [[i] * n for i in range(target // n + 1)]\n\nassert f(g()) == True\n",
        "idx_generation": 137,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]\n\nassert f(g()) == True\n\n",
        "idx_generation": 465,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum: int = 10) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that sums up to the target_sum.\n    \"\"\"\n    def find_combination(start, curr_sum):\n        if curr_sum == target_sum:\n            return True\n        if curr_sum > target_sum or start == len(nums):\n            return False\n        for i in range(start, len(nums)):\n            if find_combination(i + 1, curr_sum + nums[i]):\n                return True\n        return False\n\n    return find_combination(0, 0)\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is\n    \"\"\"\n    return nums\n\nassert f(g([1, 2, 3, 4, 5, 6, 7, 8, 9])) == True\n",
        "idx_generation": 113,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a symmetric pattern.\n    A symmetric pattern is a grid where the elements mirror each other along the central axis.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 4], [3, 2, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if arr[i][j] != arr[len(arr)-1-i][len(arr[i])-1-j]:\n                return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 4], [3, 2, 1]]):\n    return arr\n\nassert f(g()) == True\n\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(s: str, target: str) -> bool:\n    \"\"\"\n    Check if the target string is a substring of the given string.\n    \"\"\"\n    if target in s:\n        return True\n    else:\n        return False\n\ndef g(s: str, target: str):\n    \"\"\"\n    This solution returns the input strings as is.\n    \"\"\"\n    return s, target\n\nassert f(*g(\"Hello, World!\", \"World!\")) == True\n\n",
        "idx_generation": 451,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Find a number whose square is equal to the sum of its digits.\"\"\"\n    return any([i**2 == sum([int(d) for d in str(i)]) for i in range(1, n)])\ndef g():\n    return 100\n\nassert f(g()) == True\n",
        "idx_generation": 312,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the prime numbers in the original list.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return [num for num in nums if is_prime(num)]\n\ndef g():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return (nums,)\n\nassert f(*g()) == [2, 3, 5, 7]\n",
        "idx_generation": 465,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum: int = 10) -> bool:\n    \"\"\"\n    Given a list of numbers, find a subset of numbers that sums up to the target_sum.\n    Return True if such a subset exists, False otherwise.\n    \"\"\"\n    def subset_sum(numbers, target_sum, memo={}):\n        if target_sum in memo:\n            return memo[target_sum]\n        if target_sum == 0:\n            return True\n        if target_sum < 0 or not numbers:\n            return False\n        include = subset_sum(numbers[1:], target_sum - numbers[0], memo)\n        exclude = subset_sum(numbers[1:], target_sum, memo)\n        memo[target_sum] = include or exclude\n        return memo[target_sum]\n\n    return subset_sum(numbers, target_sum)\n\ndef g(numbers=[1, 2, 3, 4, 5]):\n    return (numbers,)\n\nassert f(*g()) == True\n",
        "idx_generation": 129,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nimport itertools\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find if a subset of numbers from a list sums up to a target value\"\"\"\n    for r in range(1, len(nums)+1):\n        for subset in itertools.combinations(nums, r):\n            if sum(subset) == target:\n                return True\n    return False\n\ndef g(target=20):\n    return [5, 15, 3, 7, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 53,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import random\nfrom typing import*\ndef f(counts: List[int], target_prob=0.75) -> bool:\n    \"\"\"\n    Suppose a list of m 1's and n -1's are permuted at random.\n    What is the probability that all of the cumulative sums are positive?\n    The goal is to find counts = [m, n] that make the probability of the ballot problem close to target_prob.\n    \"\"\"\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06\ndef g(target_prob = 0.75):\n    for m in range(1, 100):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]\nassert f(g()) == True\n",
        "idx_generation": 147,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target, find if there are count numbers that sum up to the target, but the numbers cannot be repeated.\n\n    Sample Input:\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    target = 15\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    from itertools import combinations\n\n    for combo in combinations(numbers, count):\n        if sum(combo) == target:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 15, 3\n\nassert f(*g()) == True\n",
        "idx_generation": 448,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that have a difference of more than 10.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if abs(nums[i] - nums[j]) > 10:\n                return True\n    return False\n\ndef g(nums=[2, 12, 22, 32]):\n    return nums\n\nassert f(g()) == True\n\n",
        "idx_generation": 420,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subsequence in the list that sums up to the target value.\n    \"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        num = nums[i - 1]\n        for j in range(target + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j >= num:\n                dp[i][j] |= dp[i - 1][j - num]\n\n    return dp[n][target]\n\ndef g(nums: List[int] = [2, 4, 6, 8, 10], target: int = 14):\n    return nums, target\n\nassert f(*g()) == True\n",
        "idx_generation": 258,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, substrings=['abc', 'def', 'ghi', 'jkl']) -> bool:\n    \"\"\"\n    Find the length of the longest substring in s that contains all the substrings in the given order.\n    \"\"\"\n    index = 0\n    max_length = 0\n    current_length = 0\n    for sub in substrings:\n        if sub not in s[index:]:\n            current_length = 0\n        else:\n            index += s[index:].index(sub) + len(sub)\n            current_length += len(sub)\n            if current_length > max_length:\n                max_length = current_length\n    return max_length\ndef g(substrings=['abc', 'def', 'ghi', 'jkl']):\n    return ''.join(substrings)\nassert f(g()) == 12\n",
        "idx_generation": 15,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum product of any three numbers in the list.\n\n    Sample input:\n    arr = [1, 2, 3, 4, 5]\n\n    Sample output:\n    60\n\n    Explanation: The maximum product of three numbers is obtained by multiplying 4, 5, and 3, which gives 60.\n\n    \"\"\"\n    arr.sort()\n    n = len(arr)\n    return max(arr[n-1] * arr[n-2] * arr[n-3], arr[0] * arr[1] * arr[n-1])\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == 60\n",
        "idx_generation": 367,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if it is a Toeplitz matrix.\n    A matrix is Toeplitz if every diagonal from top-left to bottom-right has the same elements.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [4, 1, 2], [7, 4, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    for i in range(rows - 1):\n        for j in range(cols - 1):\n            if matrix[i][j] != matrix[i + 1][j + 1]:\n                return False\n    return True\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 1, 2], [7, 4, 1]]):\n    return matrix\n\nassert f(g()) == True\n\n",
        "idx_generation": 456,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: List[int], n=3) -> bool:\n    \"\"\"Check if there exists a subsequence of length n in the list whose elements are in increasing order.\"\"\"\n    for i in range(len(x) - n + 1):\n        if all([x[j] < x[j + 1] for j in range(i, i + n - 1)]):\n            return True\n    return False\ndef g(n=3):\n    return [1, 3, 2, 4, 6, 5]\nassert f(g()) == True\n",
        "idx_generation": 130,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int, k: int = 2) -> List[int]:\n    \"\"\"\n    Find k numbers in the given list nums that multiply to the target value.\n    \"\"\"\n    result = []\n    def backtrack(remain, start, path):\n        if remain == 1 and len(path) == k:\n            result.append(path)\n            return\n        for i in range(start, len(nums)):\n            if nums[i] > remain:\n                break\n            if remain % nums[i] == 0:\n                backtrack(remain // nums[i], i + 1, path + [nums[i]])\n\n    backtrack(target, 0, [])\n    return result\n\ndef g(nums=[2, 4, 6, 8], target=48, k=2):\n    return nums\n\nassert f(g(), target=48) == [[6, 8]]\n",
        "idx_generation": 135,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(words: List[str], target_length=5) -> bool:\n    \"\"\"Check if there is a word in the list that has a length equal to the target_length\"\"\"\n    return any(len(word) == target_length for word in words)\ndef g(target_length=5):\n    words = ['apple', 'banana', 'cherry', 'date', 'elderberry']\n    return words\nassert f(g()) == True\n",
        "idx_generation": 92,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\n\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there is a pair of numbers in the list lst whose difference is equal to the target.\n\n    Sample input:\n    lst = [1, 2, 3, 4, 5]\n    target = 2\n\n    Sample output:\n    True\n\n    Explanation: The pair of numbers (3, 5) have a difference of 2 and they are present in the list.\n    \"\"\"\n    assert len(lst) > 1, 'Hint: The list should have at least 2 numbers.'\n    return any(abs(i - j) == target for i in lst for j in lst if i != j)\n\ndef g(lst=[1, 2, 3, 4, 5], target=2):\n    return lst, target\n\nassert f(*g()) == True\n",
        "idx_generation": 310,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, char: str, index: int) -> bool:\n    \"\"\"\n    Check if the character at the given index in the string is equal to the given character.\n\n    Sample input:\n    s = \"hello\"\n    char = \"l\"\n    index = 2\n\n    Sample output:\n    True\n\n    Explanation: The character at index 2 in the string \"hello\" is \"l\".\n    \"\"\"\n    return s[index] == char\n\ndef g(s=\"hello\", char=\"l\", index=2):\n    return s, char, index\n\nassert f(*g()) == True\n",
        "idx_generation": 144,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> int:\n    \"\"\"\n    Given a list of lists of integers, find the maximum sum that can be obtained by selecting one number from each list.\n    \"\"\"\n    max_sum = float('-inf')\n    for i in range(len(nums[0])):\n        current_sum = 0\n        for j in range(len(nums)):\n            current_sum += nums[j][i]\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n\ndef g() -> List[List[int]]:\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == 18\n",
        "idx_generation": 172,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=3, s=15) -> bool:\n    \"\"\"Check if there exists a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a >= 0 for a in x])\n\ndef g(n = 3, s = 15):\n    \"\"\"\n    Generate a list of n non-negative integers that sum up to s\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if s == 0:\n        return [0] * n\n    res = [0] * n\n    for i in range(n - 1):\n        x = min(s, 9)\n        res[i] = x\n        s -= x\n    res[-1] = s\n    return res\n\nassert f(g()) == True\n",
        "idx_generation": 413,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list whose sum is equal to the target value.\n    Return True if such a subarray exists, False otherwise.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 20\n\n    Sample Output:\n    False\n    \"\"\"\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if prefix_sum[j] - prefix_sum[i] == target:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 20):\n    return arr, target\n\nassert f(*g()) == False\n",
        "idx_generation": 277,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=8) -> bool:\n    \"\"\"\n    Given a matrix of integers, determine if the target integer is present in the matrix.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == True\n",
        "idx_generation": 139,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target number, determine the number of subarrays whose sum is equal to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    2\n\n    Explanation:\n    The subarrays [2, 3, 4] and [4, 5] have a sum of 9.\n    \"\"\"\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if sum(nums[i:j+1]) == target:\n                count += 1\n    return count\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (nums, target)\n\nassert f(*g()) == 2\n",
        "idx_generation": 465,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nimport random\n\ndef f(li: List[int], target_sum: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target sum, determine if it is possible to select a subset of the list\n    elements such that their sum is equal to the target sum.\n\n    Sample input:\n    [1, 2, 3, 4, 5], 9\n\n    Sample output:\n    True\n    \"\"\"\n    def subset_sum(li, target_sum):\n        n = len(li)\n        dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n        for i in range(n + 1):\n            dp[i][0] = True\n        for i in range(1, n + 1):\n            for j in range(1, target_sum + 1):\n                if li[i - 1] > j:\n                    dp[i][j] = dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j] or dp[i - 1][j - li[i - 1]]\n        return dp[n][target_sum]\n    \n    random.shuffle(li)\n    return subset_sum(li, target_sum)\n\ndef g(li = [1, 2, 3, 4, 5], target_sum = 9):\n    return (li, target_sum)\n\nassert f(*g())\n",
        "idx_generation": 114,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return arr\n\nassert f(g()) == True\n\n",
        "idx_generation": 307,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given array is a palindrome.\n    A palindrome is a sequence that reads the same forwards and backwards.\n\n    Sample Input:\n    arr = [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return arr == arr[::-1]\n\ndef g(arr: List[int] = [1, 2, 3, 2, 1]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 452,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums: List[int] = [4, 7, 8, 9, 8, 7, 4]):\n    return nums\n\nassert f(g()) == True\n\n",
        "idx_generation": 354,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with the squares of all the numbers in the original list.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    [1, 4, 9, 16, 25]\n\n    Explanation: The squares of the numbers in the original list are [1, 4, 9, 16, 25].\n    \"\"\"\n    return [num ** 2 for num in nums]\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == [1, 4, 9, 16, 25]\n\n",
        "idx_generation": 468,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: int, a=-93252338) -> bool:\n    \"\"\"Solve an addition problem\"\"\"\n    return x + a == 0\ndef g(a=-93252338):\n    return -a\nassert f(g()) == True\n",
        "idx_generation": 139,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nimport itertools\nimport math\nfrom typing import List\n\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"Find if there are count numbers that sum up to the target\"\"\"\n    return any(sum(nums[i] for i in indices) == target for indices in itertools.combinations(range(len(nums)), count))\n    \ndef g(target: int = 15, count: int = 3, nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return (nums, target, count)\n    \nassert f(*g()) == True\n",
        "idx_generation": 61,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that sums up to the target value.\n    \"\"\"\n    def find_combination(start, curr_sum):\n        if curr_sum == target:\n            return True\n        if curr_sum > target or start == len(nums):\n            return False\n        if find_combination(start + 1, curr_sum + nums[start]):\n            return True\n        if find_combination(start + 1, curr_sum):\n            return True\n        return False\n\n    return find_combination(0, 0)\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is.\n    \"\"\"\n    return nums\n\nassert f(g([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]))\n",
        "idx_generation": 158,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subset of the list whose sum is divisible by 3.\n    Return True if such a subset exists, False otherwise.\n    \"\"\"\n    for r in range(1, len(arr) + 1):\n        for subset in itertools.combinations(arr, r):\n            if sum(subset) % 3 == 0:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5]):\n    return (arr,)\n\nassert f(*g()) == True\n",
        "idx_generation": 457,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if all the rows and columns have unique elements.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n    \n    # Check for duplicate elements in each row\n    for row in arr:\n        if len(set(row)) != cols:\n            return False\n    \n    # Check for duplicate elements in each column\n    for j in range(cols):\n        column = [arr[i][j] for i in range(rows)]\n        if len(set(column)) != rows:\n            return False\n    \n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 420,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Given a list of integers, find the two numbers that add up to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in nums_set and complement != num:\n            return False\n    return True\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums\n\nassert f(g()) == False\n\n",
        "idx_generation": 264,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, strings=['hunuvarufefikaq', 'xejegu', 'minoc', 'puthyvyc', 'xyzeryberi', 'tyl', 'thyvojyvijazetonowa', 'jahygywuchitho', 'quuvuvigy', 'zuhechywituthexe']) -> bool:\n    \"\"\"Find if the given string is the alphabetically second to last string in the list.\"\"\"\n    return s == sorted(strings)[-2]\n\ndef g(strings=['hunuvarufefikaq', 'xejegu', 'minoc', 'puthyvyc', 'xyzeryberi', 'tyl', 'thyvojyvijazetonowa', 'jahygywuchitho', 'quuvuvigy', 'zuhechywituthexe']):\n    return sorted(strings)[-2]\n\nassert f(g()) == True\n",
        "idx_generation": 33,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, check if it is a symmetric matrix.\n    If the matrix is symmetric, return True. Otherwise, return False.\n    \"\"\"\n    n = len(matrix)\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n\n    return True\n\ndef g():\n    \"\"\"Generate a symmetric matrix.\"\"\"\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g()) == True\n\n",
        "idx_generation": 376,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n: int) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose sum is divisible by n.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if (n - num % n) in num_set:\n            return True\n        num_set.add(num % n)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], n: int = 3):\n    return nums, n\n\nassert f(*g()) == True\n\n",
        "idx_generation": 464,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if any three numbers in the given list add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=0):\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g()) == False\n",
        "idx_generation": 143,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Determine whether a given 9x9 Sudoku board is valid.\n    The Sudoku board could be partially filled, where empty cells are filled with the character '.'.\n    A valid Sudoku board (partially filled) is not necessarily solvable.\n    \"\"\"\n    # Check rows\n    for row in matrix:\n        if not check_unique(row):\n            return False\n\n    # Check columns\n    for col in zip(*matrix):\n        if not check_unique(col):\n            return False\n\n    # Check sub-grids\n    for i in range(0, 9, 3):\n        for j in range(0, 9, 3):\n            sub_grid = [matrix[x][y] for x in range(i, i + 3) for y in range(j, j + 3)]\n            if not check_unique(sub_grid):\n                return False\n\n    return True\n\ndef check_unique(nums: List[int]) -> bool:\n    num_set = set()\n    for num in nums:\n        if num != '.' and num in num_set:\n            return False\n        num_set.add(num)\n    return True\n\ndef g(matrix: List[List[int]] = [\n    [5, 3, '.', '.', 7, '.', '.', '.', '.'],\n    [6, '.', '.', 1, 9, 5, '.', '.', '.'],\n    ['.', 9, 8, '.', '.', '.', '.', 6, '.'],\n    [8, '.', '.', '.', 6, '.', '.', '.', 3],\n    [4, '.', '.', 8, '.', 3, '.', '.', 1],\n    [7, '.', '.', '.', 2, '.', '.', '.', 6],\n    ['.', 6, '.', '.', '.', '.', 2, 8, '.'],\n    ['.', '.', '.', 4, 1, 9, '.', '.', 5],\n    ['.', '.', '.', '.', 8, '.', '.', 7, 9]\n]):\n    return (matrix,)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 151,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, word='nojapoxe') -> bool:\n    \"\"\"Check if a given word is a palindrome\"\"\"\n    return s == s[::-1]\n\ndef g(word = 'nojapoxe'):\n    return word\n\nassert f(g()) == False\n",
        "idx_generation": 92,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if the sum of each combination is equal to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False\n\ndef g(k=4, target_sum=18):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), k=4, target_sum=18) == True\n\n",
        "idx_generation": 338,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given array, such that the sum of its elements is equal to the target value.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(arr[i:j]) == target:\n                return True\n    return False\n\ndef g(target: int = 0):\n    return [1, 2, -3, 4, 5, -6, 7, 8, -9, 10, 11, -12, 13, 14, -15, 16, 17, -18, 19, 20]\n\nassert f(g()) == True\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int = 3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the given array, such that all its elements are prime numbers.\"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    for i in range(len(arr) - k + 1):\n        subarr = arr[i:i+k]\n        if all(is_prime(num) for num in subarr):\n            return True\n    return False\n\ndef g(k: int = 3):\n    return [2] * k\n\nassert f(g()) == True\n",
        "idx_generation": 176,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist four numbers in the list whose sum is equal to the target number.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            for k in range(j + 1, len(numbers)):\n                for l in range(k + 1, len(numbers)):\n                    if numbers[i] + numbers[j] + numbers[k] + numbers[l] == target:\n                        return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 26\n\nassert f(*g()) == True\n",
        "idx_generation": 459,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='thubonyna', reverse=True) -> bool:\n    \"\"\"Check if a given string is equal to the target string\"\"\"\n    return (s == target) == reverse\n\ndef g(target = 'thubonyna', reverse = True):\n    return target\n\nassert f(g()) == True\n\n",
        "idx_generation": 286,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if the target number is present in the given matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == False\n",
        "idx_generation": 141,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return a list containing the sum of each row.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    output: [6, 15, 24]\n    \"\"\"\n    row_sums = []\n    for row in matrix:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n    return row_sums\n\ndef g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\nassert f(g()) == [6, 15, 24]\n\n",
        "idx_generation": 467,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"\n    Given a list of numbers, find a subset of numbers that sums up to the target_sum.\n    Return True if such a subset exists, False otherwise.\n    \"\"\"\n    def subset_sum(numbers, target_sum, memo={}):\n        if target_sum in memo:\n            return memo[target_sum]\n        if target_sum == 0:\n            return True\n        if target_sum < 0 or not numbers:\n            return False\n        include = subset_sum(numbers[1:], target_sum - numbers[0], memo)\n        exclude = subset_sum(numbers[1:], target_sum, memo)\n        memo[target_sum] = include or exclude\n        return memo[target_sum]\n\n    return subset_sum(numbers, target_sum)\n\ndef g(numbers=[10, 20, 30, 40, 50]):\n    return (numbers,)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 124,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a symmetric matrix.\n    A symmetric matrix is a square matrix that is equal to its transpose.\n\n    Sample Input:\n    arr = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i, n):\n            if arr[i][j] != arr[j][i]:\n                return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 323,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> int:\n    \"\"\"\n    Given a string, return the number of vowels in the string.\n    \"\"\"\n    vowels = \"aeiou\"\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    return count\n\ndef g(s=\"Hello World\"):\n    \"\"\"\n    This solution counts the number of vowels in a given string.\n    \"\"\"\n    return s\n\nassert f(g()) == 3\n\n",
        "idx_generation": 452,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, determine if it is a palindrome.\n\n    Example:\n    s = \"racecar\"\n\n    Output:\n    True\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s: str = \"racecar\"):\n    return s\n\nassert f(g()) == True\n",
        "idx_generation": 355,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=5, c=3) -> bool:\n    \"\"\"\n    Find n such that n + a == b * (the sum of the first c integers)\n    \"\"\"\n    return n + a == b * sum([i for i in range(1, c+1)])\n\ndef g(a=10, b=5, c=3):\n    return -a + b * sum([i for i in range(1, c+1)])\n\nassert f(g())\n",
        "idx_generation": 477,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(dictionary: Dict[str, int]) -> bool:\n    \"\"\"\n    Check if all values in the dictionary are positive\n    \"\"\"\n    return all(value > 0 for value in dictionary.values())\n\ndef g(dictionary: Dict[str, int] = {'a': 1, 'b': 2, 'c': 3}):\n    return dictionary\n\nassert f(g()) == True\n",
        "idx_generation": 186,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"Find if there are count numbers that add up to the target, but the numbers cannot be repeated\"\"\"\n    return any(sum(nums[i] for i in indices) == target for indices in itertools.combinations(range(len(nums)), count))\ndef g(target: int = 15, count: int = 3, nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return (nums, target, count)\nassert f(*g()) == True\n",
        "idx_generation": 61,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that sums up to the target value.\n    \"\"\"\n    def find_combination(start, curr_sum):\n        if curr_sum == target:\n            return True\n        if curr_sum > target or start == len(nums):\n            return False\n        if find_combination(start + 1, curr_sum + nums[start]):\n            return True\n        if find_combination(start + 1, curr_sum):\n            return True\n        return False\n\n    return find_combination(0, 0)\n\ndef g(nums: List[int], target: int):\n    \"\"\"\n    This solution returns the input list reversed and the target value as is.\n    \"\"\"\n    return list(reversed(nums)), target\n\nassert f(*g([10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 100))\n",
        "idx_generation": 159,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"Given a list of integers and a value k, determine if there exists a subarray of the list with a sum greater than or equal to k.\"\"\"\n    for i in range(len(arr)):\n        curr_sum = 0\n        for j in range(i, len(arr)):\n            curr_sum += arr[j]\n            if curr_sum >= k:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], k: int = 9):\n    return arr, k\n\nassert f(*g()) == True\n",
        "idx_generation": 422,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 5) -> bool:\n    \"\"\"\n    Check if there exists a subarray of numbers in the list that sums up to the target value.\n    \"\"\"\n    curr_sum = nums[0]\n    start = 0\n    for i in range(1, len(nums)):\n        while curr_sum > target and start < i - 1:\n            curr_sum -= nums[start]\n            start += 1\n        if curr_sum == target:\n            return True\n        curr_sum += nums[i]\n    return False\n\ndef g(target: int = 5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 280,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, strings=['hunuvarufefikaq', 'xejegu', 'minoc', 'puthyvyc', 'xyzeryberi', 'tyl', 'thyvojyvijazetonowa', 'jahygywuchitho', 'quuvuvigy', 'zuhechywituthexe']) -> bool:\n    \"\"\"Find the alphabetically second to last last string in a list.\"\"\"\n    return s in strings and sum((t > s for t in strings)) == 1\ndef g(strings = ['hunuvarufefikaq', 'xejegu', 'minoc', 'puthyvyc', 'xyzeryberi', 'tyl', 'thyvojyvijazetonowa', 'jahygywuchitho', 'quuvuvigy', 'zuhechywituthexe']):\n    return sorted(strings)[-2]\nassert f(g()) == True\n",
        "idx_generation": 35,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List, Tuple\n\ndef f(nums: List[int], target: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    Given a list of integers, find all pairs of numbers that add up to the target.\n    Return a list of tuples, where each tuple contains the indices of the pair.\n    \"\"\"\n    indices = []\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                indices.append((i, j))\n    return indices\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return nums, target\n\nassert f(*g()) == [(1, 4), (2, 3)]\n",
        "idx_generation": 376,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Given a list of integers, find the two numbers that add up to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for i in range(len(nums)):\n        complement = target - nums[i]\n        if complement in nums_set and complement != nums[i]:\n            return True\n    return False\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8, 10]):\n    return nums\n\nassert f(g()) == False\n",
        "idx_generation": 478,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import random\nfrom typing import*\ndef f(arr: List[int], n=2) -> bool:\n    \"\"\"\n    Determine if there exists a subarray of length n in the given array such that the elements of the subarray are\n    in strictly increasing order.\n    \"\"\"\n    for i in range(len(arr) - n + 1):\n        subarray = arr[i:i+n]\n        if sorted(subarray) == subarray:\n            return True\n    return False\ndef g(n = 2):\n    arr = [random.randint(1, 10) for _ in range(10)]\n    return arr\nassert f(g()) == True\n",
        "idx_generation": 160,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Check if it is possible to obtain the target value by performing addition and subtraction operations on the given list of numbers, considering that each number can be used multiple times.\n\n    Sample Input:\n    [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 280\n\n    Sample Output:\n    True\n    \"\"\"\n    def find_combination(start, curr_sum):\n        if curr_sum == target:\n            return True\n        if curr_sum > target or start == len(nums):\n            return False\n        for i in range(start, len(nums)):\n            if find_combination(i, curr_sum + nums[i]) or find_combination(i, curr_sum - nums[i]):\n                return True\n        return False\n\n    return find_combination(0, 0)\n\ndef g():\n    return ([10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 280)\n\nassert f(*g()) == True\n",
        "idx_generation": 158,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\n\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if a given substring is a palindrome and appears in the string.\"\"\"\n    return substring == substring[::-1] and substring in s\n\ndef g(substring='abc'):\n    return substring\n\nassert f(g()) == False\n\n",
        "idx_generation": 107,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the array is a rotation of a palindrome.\"\"\"\n    def is_palindrome(s):\n        return s == s[::-1]\n\n    for i in range(len(arr)):\n        rotated_arr = arr[i:] + arr[:i]\n        if is_palindrome(rotated_arr):\n            return True\n    return False\n\ndef g(arr=[4,6,8,10,12]):\n    return arr\n\nassert f(g()) == False\n",
        "idx_generation": 357,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, check if there exists a subarray in the list whose sum is less than or equal to the target.\n\n    Sample Input:\n    [1, 4, 20, 3, 10, 5], 33\n\n    Sample Output:\n    True\n    \"\"\"\n    curr_sum = nums[0]\n    start = 0\n    for i in range(1, len(nums) + 1):\n        while curr_sum <= target and start < i-1:\n            curr_sum -= nums[start]\n            start += 1\n        if curr_sum <= target:\n            return True\n        if i < len(nums):\n            curr_sum += nums[i]\n    return False\n\ndef g() -> Tuple[List[int], int]:\n    return ([1, 4, 20, 3, 10, 5], 33)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 146,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are three numbers in the given list that multiply to the target number.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target % num == 0 and target // num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[2, 4, 6, 8], target=48):\n    return nums, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 180,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subarray with a sum equal to k.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    k = 7\n    output: True\n    \"\"\"\n    prefix_sum = 0\n    seen = set()\n    seen.add(0)\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum - k in seen:\n            return True\n        seen.add(prefix_sum)\n    return False\n\ndef g():\n    return [5, -2, 3, 4, 1], 6\n\nassert f(*g()) == True\n",
        "idx_generation": 484,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Given a list of numbers and a target number, check if there exists a pair of numbers in the list whose difference is equal to the target.\n\n    Sample Input:\n    [1, 5, 8, 12, 16], 4\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) == target:\n                return True\n    return False\n\ndef g(numbers: List[int] = [1, 5, 8, 12, 16], target: int = 4) -> Tuple[List[int], int]:\n    return (numbers, target)\n\nassert f(*g()) == True\n",
        "idx_generation": 298,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number is present in the given matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == False\n",
        "idx_generation": 147,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given array that sum up to the target number.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 7\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for num in arr:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(target: int = 7):\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), target=7) == True\n",
        "idx_generation": 467,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum: int = 10) -> bool:\n    \"\"\"\n    Given a list of numbers, find a subset of numbers that sums up to the target_sum.\n    Return True if such a subset exists, False otherwise.\n    \"\"\"\n    def subset_sum(numbers, target_sum, memo={}):\n        if target_sum in memo:\n            return memo[target_sum]\n        if target_sum == 0:\n            return True\n        if target_sum < 0 or not numbers:\n            return False\n        include = subset_sum(numbers[1:], target_sum - numbers[0], memo)\n        exclude = subset_sum(numbers[1:], target_sum, memo)\n        memo[target_sum] = include or exclude\n        return memo[target_sum]\n\n    return subset_sum(numbers, target_sum)\n\ndef g(numbers=[5, 10, 15, 20, 25]):\n    return (numbers,)\n\nassert f(*g()) == True\n",
        "idx_generation": 126,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size\n    \"\"\"\n    return [[1 if j <= i else 0 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n",
        "idx_generation": 332,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, check if it is a palindrome.\n    A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward.\n\n    Sample Input:\n    s = \"level\"\n\n    Sample Output:\n    True\n    \"\"\"\n    s = s.lower()\n    return s == s[::-1]\n\ndef g(s: str = \"level\"):\n    return s\n\nassert f(g()) == True\n\n",
        "idx_generation": 456,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(s: str) -> int:\n    \"\"\"\n    Count the number of vowels in a given string.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    return count\n\ndef g():\n    \"\"\"\n    This solution counts the number of vowels in the string \"Hello, World!\"\n    \"\"\"\n    return \"Hello, World!\"\n\nassert f(g()) == 3\n\n",
        "idx_generation": 384,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n\n    A magic square is a square matrix where the sum of each row, each column, and both diagonals are equal.\n\n    Sample Input:\n    matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])  # Target sum for rows, columns, and diagonals\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for col in np.transpose(matrix):\n        if sum(col) != target_sum:\n            return False\n\n    # Check diagonal from top-left to bottom-right\n    diagonal1 = [matrix[i][i] for i in range(n)]\n    if sum(diagonal1) != target_sum:\n        return False\n\n    # Check diagonal from top-right to bottom-left\n    diagonal2 = [matrix[i][n-i-1] for i in range(n)]\n    if sum(diagonal2) != target_sum:\n        return False\n    \n    return True\n\ndef g(matrix: List[List[int]] = [[3, 7, 5], [4, 5, 6], [9, 2, 1]]):\n    return matrix\n\nassert f(g()) == False\n\n",
        "idx_generation": 480,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the number n is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g()) == True\n",
        "idx_generation": 200,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(li: List[int], target_sum=100) -> bool:\n    \"\"\"\n    Find a sublist of li that adds up to the target sum.\n\n    Example:\n    li = [10, 20, 30, 40, 50]\n    output: True\n    \"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)+1):\n            if sum(li[i:j]) == target_sum:\n                return True\n    return False\n\ndef g(target_sum=100):\n    return list(range(1, target_sum+1))\n\nassert f(g()) == True\n",
        "idx_generation": 76,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import random\nfrom typing import*\ndef f(x: List[int], n=6, s=30) -> bool:\n    \"\"\"Find a list of n integers whose sum is equal to s\"\"\"\n    return len(x) == n and sum(x) == s\ndef g(n = 6, s = 30):\n    x = []\n    for i in range(n-1):\n        x.append(random.randint(1, s-n))\n    x.append(s - sum(x))\n    return x\nassert f(g()) == True\n",
        "idx_generation": 164,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n: int) -> bool:\n    \"\"\"Given a list of integers and a value n, determine if there exists a subsequence of the list with n elements in increasing order.\"\"\"\n    if n > len(arr):\n        return False\n    for i in range(len(arr) - n + 1):\n        subseq = arr[i:i+n]\n        if sorted(subseq) == subseq:\n            return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], n: int = 3):\n    return arr, n\n\nassert f(*g()) == True\n",
        "idx_generation": 422,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum: int = 0) -> bool:\n    \"\"\"\n    Given a list of numbers, find a subset of numbers that sums up to the target sum.\n    Return True if such a subset exists, False otherwise.\n    \"\"\"\n    def subset_sum(numbers, target_sum, memo={}):\n        if target_sum in memo:\n            return memo[target_sum]\n        if target_sum == 0:\n            return True\n        if target_sum < 0 or not numbers:\n            return False\n        include = subset_sum(numbers[1:], target_sum - numbers[0], memo)\n        exclude = subset_sum(numbers[1:], target_sum, memo)\n        memo[target_sum] = include or exclude\n        return memo[target_sum]\n\n    return subset_sum(numbers, target_sum)\n\ndef g(numbers=[1, 2, 3, 4, 5], target_sum=9):\n    return (numbers, target_sum)\n\nassert f(g()) == True\n",
        "idx_generation": 281,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if the given list contains a number that is a multiple of the target value.\"\"\"\n    return any(num % target == 0 for num in nums)\n\ndef g(target=100):\n    nums = [101, 202, 303, 404, 505]\n    return nums\n\nassert f(g()) == False\n\n",
        "idx_generation": 40,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an identity matrix.\n    An identity matrix is a square matrix in which all the elements of the principal diagonal are ones and all other elements are zeros.\n\n    Sample Input:\n    matrix = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    return all(matrix[i][j] == 1 if i == j else matrix[i][j] == 0 for i in range(n) for j in range(n))\n\ndef g(matrix: List[List[int]] = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]):\n    return matrix\n\nassert f(g()) == True\n",
        "idx_generation": 386,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size with diagonal elements as 1\n    \"\"\"\n    return [[1 if i >= j else 0 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n\n\n",
        "idx_generation": 480,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import random\nfrom typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a permutation of [1, 2, 3, ..., n].\"\"\"\n    nums_set = set(nums)\n    return len(nums_set) == len(nums) and all(num in nums_set for num in range(1, len(nums) + 1))\n\ndef g(n: int):\n    \"\"\"Generate a permutation of [1, 2, 3, ..., n].\"\"\"\n    import random\n    return random.sample(range(1, n + 1), n)\n\nassert f(g(5)) == True\n",
        "idx_generation": 175,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there is a subsequence of numbers that sums up to the target value\n    \"\"\"\n    num_elements = len(nums)\n    for i in range(1, 2**num_elements):\n        subset_sum = 0\n        for j in range(num_elements):\n            if (i >> j) & 1:\n                subset_sum += nums[j]\n        if subset_sum == target:\n            return True\n    return False\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g()) == True\n",
        "idx_generation": 168,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if all rows in the matrix have unique elements.\n\n    Sample input:\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample output:\n    True\n    \"\"\"\n    for row in matrix:\n        if len(row) != len(set(row)):\n            return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == True\n",
        "idx_generation": 112,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], target: str) -> int:\n    \"\"\"\n    Find the maximum number of words from the list whose concatenation is equal to the target string.\n    \"\"\"\n    n = len(words)\n    m = len(target)\n    dp = [-1] * (m + 1)\n    dp[0] = 0\n\n    for i in range(1, m + 1):\n        for j in range(n):\n            if i >= len(words[j]) and target[i - len(words[j]):i] == words[j]:\n                dp[i] = max(dp[i], dp[i - len(words[j])] + 1)\n\n    return dp[m]\n\ndef g(words=[\"apple\", \"pie\", \"is\", \"delicious\"], target=\"applepieisdelicious\"):\n    return words, target\n\nassert f(*g()) == 4\n",
        "idx_generation": 363,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=50, count=4) -> bool:\n    \"\"\"Find if there are count numbers that add up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(nums, count))\ndef g(target = 50, count = 4):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nassert f(g()) == False\n",
        "idx_generation": 147,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a subarray with a sum equal to the sum of all the numbers in the list.\n\n    Sample Input:\n    nums = [4, 2, -3, 1, 6]\n\n    Sample Output:\n    True\n    \"\"\"\n    total_sum = sum(nums)\n    prefix_sum = 0\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == total_sum:\n            return True\n    return False\n\ndef g():\n    return [4, 2, -3, 1, 6]\n\nassert f(g()) == True\n",
        "idx_generation": 192,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers contains any prime numbers.\n    Return True if the list contains primes, False otherwise.\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return any(is_prime(num) for num in nums)\n\ndef g(nums: List[int] = [4, 9, 7, 12, 15]):\n    return (nums,)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 488,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=4, s=10) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a >= 0 for a in x])\ndef g(n = 4, s = 10):\n    x = [0] * n\n    x[0] = s\n    return x\nassert f(g())\n",
        "idx_generation": 317,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target number, return True if the target number exists in the matrix,\n    otherwise return False.\n\n    Sample input:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    target = 10\n\n    Sample output:\n    False\n\n    Explanation: The target number 10 does not exist in the matrix.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=10):\n    return matrix, target\n\nassert f(*g()) == False\n",
        "idx_generation": 164,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of any contiguous subarray.\n\n    Sample Input:\n    arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\n    Sample Output:\n    6\n\n    Explanation: The contiguous subarray [4, -1, 2, 1] has the largest sum of 6.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in arr:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n\ndef g():\n    return [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\nassert f(g()) == 6\n",
        "idx_generation": 467,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum: int = 100) -> bool:\n    \"\"\"\n    Given a list of numbers, find a subset of numbers that sums up to the target_sum.\n    Return True if such a subset exists, False otherwise.\n    \"\"\"\n    def subset_sum(numbers, target_sum, memo={}):\n        if target_sum in memo:\n            return memo[target_sum]\n        if target_sum == 0:\n            return True\n        if target_sum < 0 or not numbers:\n            return False\n        include = subset_sum(numbers[1:], target_sum - numbers[0], memo)\n        exclude = subset_sum(numbers[1:], target_sum, memo)\n        memo[target_sum] = include or exclude\n        return memo[target_sum]\n\n    return subset_sum(numbers, target_sum)\n\ndef g(numbers=[15, 25, 35, 45, 55]):\n    return (numbers,)\n\nassert f(*g()) == True\n",
        "idx_generation": 133,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a diagonal matrix.\n    A diagonal matrix is a square grid where all the elements outside the main diagonal are zero.\n\n    Sample Input:\n    arr = [[1, 0, 0], [0, 5, 0], [0, 0, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if i != j and arr[i][j] != 0:\n                return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 0, 0], [0, 5, 0], [0, 0, 9]]):\n    return arr\n\nassert f(g()) == True\n\n",
        "idx_generation": 357,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list is a palindrome.\n\n    Sample Input:\n    [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n\n    The list is a palindrome as it reads the same forwards and backwards.\n    \"\"\"\n    reversed_nums = nums[::-1]\n    return nums == reversed_nums\n\ndef g(nums: List[int] = [1, 2, 3, 2, 1]):\n    return nums\n\nassert f(g()) == True\n\n",
        "idx_generation": 462,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of integers is a palindrome.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums: List[int] = [1, 2, 3, 4, 3, 2, 1]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 386,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if all integers in the list are prime numbers.\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return all(is_prime(num) for num in nums)\n\ndef g(nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return nums\n\nassert f(g()) == True\n\n",
        "idx_generation": 484,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum: int = 0) -> bool:\n    \"\"\"\n    Given a list of numbers, find a subset of numbers that sums up to zero.\n    Return True if such a subset exists, False otherwise.\n    \"\"\"\n    def subset_sum(numbers, target_sum, memo={}):\n        if target_sum in memo:\n            return memo[target_sum]\n        if target_sum == 0:\n            return True\n        if target_sum < 0 or not numbers:\n            return False\n        include = subset_sum(numbers[1:], target_sum - numbers[0], memo)\n        exclude = subset_sum(numbers[1:], target_sum, memo)\n        memo[target_sum] = include or exclude\n        return memo[target_sum]\n\n    return subset_sum(numbers, target_sum)\n\ndef g(numbers=[-1, 2, 3, -4, 5]):\n    return (numbers,)\n\nassert f(g()) == True\n",
        "idx_generation": 211,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"\n    Find a combination of numbers that adds up to the target value.\n    \"\"\"\n    from itertools import combinations\n    for r in range(1, len(numbers) + 1):\n        for combination in combinations(numbers, r):\n            if sum(combination) == target:\n                return True\n    return False\n\ndef g(target=100):\n    numbers = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return numbers\n\nassert f(g()) == True\n",
        "idx_generation": 83,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, k: int) -> bool:\n    \"\"\"\n    Given two positive integers n and k, find if it is possible to divide n into k positive integers such that\n    the sum of these integers is equal to n.\n\n    Sample Input:\n    n = 36\n    k = 4\n\n    Sample Output:\n    True\n    \"\"\"\n    if k == 1:\n        return True\n    if k > n:\n        return False\n    for i in range(1, n + 1):\n        if n % i == 0 and f(n - i, k - 1):\n            return True\n    return False\n\ndef g(n: int = 36, k: int = 4):\n    return (n, k)\n\nassert f(*g())\n",
        "idx_generation": 170,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find two numbers in the list such that their product is equal to the target number.\n    Return True if such a pair exists, otherwise return False.\n\n    Sample Input:\n    nums = [2, 5, 7, 9, 12]\n    target = 63\n\n    Sample Output:\n    True\n    \"\"\"\n    complements = set()\n    for num in nums:\n        if num in complements:\n            return True\n        if num != 0 and target % num == 0:\n            complements.add(target // num)\n    return False\n\ndef g(nums: List[int] = [2, 5, 7, 9, 12], target: int = 63):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 423,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find three numbers in the list that add up to the target.\n    If such a triplet exists, return True. Otherwise, return False.\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            total = nums[i] + nums[left] + nums[right]\n            if total == target:\n                return True\n            elif total < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g(), 15) == True\n",
        "idx_generation": 288,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"\n    Given a string `string` and a substring `substring`, check if the substring is present in the string.\n    \"\"\"\n    return substring in string\n\ndef g(substring='abc'):\n    return 'xyz' * 1000\n\nassert f(g()) == False\n",
        "idx_generation": 44,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target number,\n    check if the target number exists in the matrix.\n    \"\"\"\n    if not matrix:\n        return False\n\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    left = 0\n    right = rows * cols - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        row = mid // cols\n        col = mid % cols\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=5):\n    return matrix, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 395,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix, return the sum of the elements in the lower triangle (including the main diagonal).\n\n    Example:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    The lower triangle elements are: 1, 4, 5, 7, 8, 9\n    The sum of these elements is 34.\n    \"\"\"\n    lower_triangle = np.tril(matrix)\n    return np.sum(lower_triangle)\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == 34\n",
        "idx_generation": 481,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find any three numbers in the list that sum up to the target value.\"\"\"\n    from itertools import combinations\n    for triplet in combinations(nums, 3):\n        if sum(triplet) == target:\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g()) == True\n",
        "idx_generation": 193,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nimport numpy as np\nfrom typing import List\n\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target value.\"\"\"\n    n = len(nums)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i-1] + nums[i-1]\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if prefix_sum[j] - prefix_sum[i] == target:\n                return True\n    return False\n\ndef g(target=25):\n    nums = [10, 5, 7, 3, 2, 1]\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 180,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, nums: List[int], k=2) -> bool:\n    \"\"\"\n    Given a list of integers and an integer k, determine if there are exactly n numbers in the list that are strictly larger than or equal to the kth number.\n    \"\"\"\n    assert len(nums) > k, 'Hint: List should have at least k+1 numbers'\n    return sum(num >= nums[k] for num in nums) == n\n\ndef g(nums: List[int], k=2):\n    threshold = max(nums[k], 0)\n    return sum(num >= threshold for num in nums)\n\nassert f(g([1, 2, 3, 4, 5, 6], 2), [1, 2, 3, 4, 5, 6], 2) == True\n",
        "idx_generation": 130,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if the given list contains a number that is equal to the target value.\"\"\"\n    return any(num == target for num in nums)\n\ndef g(target=5):\n    nums = [1, 3, 5, 7, 9]\n    return nums\n\nassert f(g()) == True\n\n",
        "idx_generation": 386,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int = 3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the given array, such that the product of its elements is divisible by 10.\"\"\"\n    for i in range(len(arr) - k + 1):\n        subarr = arr[i:i+k]\n        product = 1\n        for num in subarr:\n            product *= num\n        if product % 10 == 0:\n            return True\n    return False\n\ndef g(k: int = 3):\n    return [2, 5, 3, 0, 1, 6, 8]\n\nassert f(g()) == True\n",
        "idx_generation": 156,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int = 3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the given array, such that the sum of its elements is less than or equal to k.\"\"\"\n    for i in range(len(arr) - k + 1):\n        subarr = arr[i:i+k]\n        subarr_sum = sum(subarr)\n        if subarr_sum <= k:\n            return True\n    return False\n\ndef g(k: int = 3):\n    return [1] * k\n\nassert f(g()) == True\n",
        "idx_generation": 199,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the list contains only even numbers.\"\"\"\n    return all(num % 2 == 0 for num in numbers)\n\ndef g(numbers: List[int] = [2, 4, 6, 8, 10]):\n    return numbers\n\nassert f(g()) == True\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a square matrix.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    num_rows = len(matrix)\n    for row in matrix:\n        if len(row) != num_rows:\n            return False\n    return True\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == True\n",
        "idx_generation": 166,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(nums: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"\n    Given a list of tuples, where each tuple contains two integers, return a new list with the sum of the integers in each tuple.\n\n    Sample Input:\n    nums = [(1, 2), (3, 4), (5, 6)]\n\n    Sample Output:\n    [3, 7, 11]\n\n    Explanation: The sum of (1, 2) is 3, the sum of (3, 4) is 7, and the sum of (5, 6) is 11.\n    \"\"\"\n    return [num1 + num2 for num1, num2 in nums]\n\ndef g():\n    return [(1, 2), (3, 4), (5, 6)]\n\nassert f(g()) == [3, 7, 11]\n\n",
        "idx_generation": 468,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: int, a=93252338) -> bool:\n    \"\"\"Check if x is divisible by a\"\"\"\n    return x % a == 0\ndef g(a=93252338):\n    return a*2\nassert f(g()) == True\n",
        "idx_generation": 139,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a checkerboard pattern.\n    A checkerboard pattern is a grid where the elements form a pattern of alternating black and white squares.\n\n    Sample Input:\n    arr = [[1, 2, 1], [2, 1, 2], [1, 2, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(n):\n        for j in range(m):\n            if (i+j) % 2 == 0:\n                if arr[i][j] != 1:\n                    return False\n            else:\n                if arr[i][j] != 2:\n                    return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 1], [2, 1, 2], [1, 2, 1]]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 361,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"Check if a string s can be formed by concatenating multiple occurrences of another string t.\"\"\"\n    if len(s) % len(t) != 0:\n        return False\n    n = len(t)\n    for i in range(0, len(s), n):\n        if s[i:i+n] != t:\n            return False\n    return True\n\ndef g():\n    return (\"abcabcabc\", \"abc\")\n\nassert f(*g()) == True\n\n",
        "idx_generation": 462,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['cat', 'dog', 'bird']) -> bool:\n    \"\"\"\n    Find a string that contains all the substrings reversed and forward\n    \"\"\"\n    return all((sub in s and sub[::-1] in s for sub in substrings))\n\ndef g(substrings = ['cat', 'dog', 'bird']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])\n\nassert f(g())\n",
        "idx_generation": 390,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a grid where the sum of each row, each column, and both diagonals are the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    target_sum = sum(arr[0])\n    for i in range(n):\n        if sum(arr[i]) != target_sum:\n            return False\n        if sum(arr[j][i] for j in range(n)) != target_sum:\n            return False\n    if sum(arr[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(arr[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n\n",
        "idx_generation": 485,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of numbers and a target number, determine the number of subsequences in the list whose sum\n    is equal to the target number.\n\n    Sample input:\n    [1, 2, 3, 4]\n\n    Sample output:\n    2\n\n    The subsequences [2, 3] and [4] both have a sum of 5, which is the target number.\n    \"\"\"\n    n = len(nums)\n    dp = [[0] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - nums[i - 1]]\n    return dp[n][target]\n\ndef g(target: int):\n    return [1, 2, 3, 4]\n\nassert f(g(5), 5) == 2\n",
        "idx_generation": 220,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers from the list that adds up to the target number\"\"\"\n    import itertools\n    for r in range(1, len(nums) + 1):\n        for combination in itertools.combinations(nums, r):\n            if sum(combination) == target:\n                return True\n    return False\n\ndef g(nums = [10, 20, 30, 40, 50]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 91,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=4, s=15) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\n\ndef g(n = 4, s = 15):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\n\nassert f(g())\n",
        "idx_generation": 229,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers sorted in non-decreasing order, check if the target value is present in the matrix.\n\n    Sample Input:\n    matrix = [\n        [1, 3, 5, 7],\n        [10, 11, 16, 20],\n        [23, 30, 34, 50]\n    ]\n    target = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    rows, cols = len(matrix), len(matrix[0])\n    left, right = 0, rows * cols - 1\n    while left <= right:\n        mid = (left + right) // 2\n        num = matrix[mid // cols][mid % cols]\n        if num == target:\n            return True\n        elif num < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\n\ndef g(matrix: List[List[int]] = [[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50]], target: int = 3):\n    return (matrix, target)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 424,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(a: str, b: str, target: str) -> bool:\n    \"\"\"Check if the target string can be formed by interleaving the characters of strings a and b\"\"\"\n    m, n = len(a), len(b)\n    if len(target) != m + n:\n        return False\n    dp = [[False] * (n + 1) for _ in range(m + 1)]\n    dp[0][0] = True\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i > 0 and a[i - 1] == target[i + j - 1]:\n                dp[i][j] |= dp[i - 1][j]\n            if j > 0 and b[j - 1] == target[i + j - 1]:\n                dp[i][j] |= dp[i][j - 1]\n    return dp[m][n]\n\ndef g(a='abc', b='def', target='adbecf'):\n    return a, b, target\n\nassert f(*g()) == True\n",
        "idx_generation": 289,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    \"\"\"\n    Generate a list of numbers in a palindrome pattern.\n    \"\"\"\n    nums = []\n    for i in range(1, 6):\n        nums.append(i)\n    for i in range(4, 0, -1):\n        nums.append(i)\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 50,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the maximum product of any three numbers in the given list.\n    \"\"\"\n    nums.sort()\n    return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])\n\ndef g(nums: List[int]):\n    return nums\n\nassert f(g([1, 2, 3, 4, 5])) == 60\n",
        "idx_generation": 408,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a grid where the sum of each row, each column, and both diagonals are the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    target_sum = sum(arr[0])\n    for i in range(n):\n        if sum(arr[i]) != target_sum:\n            return False\n        if sum(arr[j][i] for j in range(n)) != target_sum:\n            return False\n    if sum(arr[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(arr[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n\n",
        "idx_generation": 485,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the array is a permutation of the range from 0 to n-1.\"\"\"\n    n = len(arr)\n    return set(arr) == set(range(n))\n\ndef g(arr: List[int]):\n    return arr\n\nassert f(g([1, 2, 3, 0])) == True\n",
        "idx_generation": 197,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(l: List[int]) -> bool:\n    \"\"\"\n    Find a list of more than 980 distinct integers between 0 and 999, inclusive, such that each pair of integers\n    have squares that differ by at least 15.\n    \"\"\"\n    return all((i in range(1000) and abs(i * i - j * j) >= 15 for i in l for j in l if i != j)) and len(set(l)) > 980\ndef g():\n    return [0, 8] + list(range(18, 1000))\nassert f(g()) == True\n",
        "idx_generation": 181,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(string: str, pattern: str) -> bool:\n    \"\"\"\n    Given a string and a pattern, check if the pattern can be formed by rearranging the characters in the string.\n\n    Sample Input:\n    \"listen\", \"silent\"\n\n    Sample Output:\n    True\n    \"\"\"\n    if len(string) != len(pattern):\n        return False\n    count = [0] * 26\n    for char in string:\n        count[ord(char) - ord('a')] += 1\n    for char in pattern:\n        count[ord(char) - ord('a')] -= 1\n        if count[ord(char) - ord('a')] < 0:\n            return False\n    return True\n\ndef g() -> Tuple[str, str]:\n    return (\"listen\", \"silent\")\n\nassert f(*g()) == True\n\n",
        "idx_generation": 133,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, pattern='abba') -> bool:\n    \"\"\"Check if a given string follows a specific pattern.\"\"\"\n    words = s.split(' ')\n    if len(words) != len(pattern):\n        return False\n\n    word_map = {}\n    pattern_map = {}\n\n    for i in range(len(pattern)):\n        if pattern[i] not in pattern_map:\n            pattern_map[pattern[i]] = words[i]\n        else:\n            if pattern_map[pattern[i]] != words[i]:\n                return False\n\n        if words[i] not in word_map:\n            word_map[words[i]] = pattern[i]\n        else:\n            if word_map[words[i]] != pattern[i]:\n                return False\n\n    return True\n\ndef g(pattern='abba'):\n    return \"dog cat cat dog\"\n\nassert f(g())\n",
        "idx_generation": 403,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"\n    Find a pair of numbers in the given list that adds up to the target value.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=50):\n    return [10, 20, 30, 40, 50]\n\nassert f(g()) == True\n",
        "idx_generation": 157,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: int, y: int, z: int, total=100) -> bool:\n    \"\"\"Check if three numbers x, y, and z, multiply to the given total\"\"\"\n    return x * y * z == total\n\ndef g(total=100):\n    return (10, 2, 5)\n\nassert f(*g()) == True\n",
        "idx_generation": 214,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the given list contains a subarray that has a sum equal to a target value.\n\n    A subarray is a contiguous part of an array.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    target = 10\n\n    Sample output:\n    True\n\n    Explanation: The subarray [1, 2, 3, 4] has a sum of 10, which is equal to the target value.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            subarray = nums[i:j]\n            if sum(subarray) == target:\n                return True\n    \n    return False\n\ndef g(target: int) -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g(10), 10)\n",
        "idx_generation": 337,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if any number in the list is divisible by the target number\"\"\"\n    return any(num % target == 0 for num in nums)\n\ndef g(nums: List[int] = [3, 6, 9, 12, 15, 18], target: int = 3):\n    return (nums, target)\n\nassert f(*g()) == True\n",
        "idx_generation": 167,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    A magic square is an n x n matrix of distinct positive integers where the sum of each row, each column, and both diagonals is the same value.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        if sum(matrix[i][j] for i in range(n)) != target_sum:\n            return False\n\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(matrix[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n\n    return True\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\nassert f(g([[2, 7, 6], [9, 5, 1], [4, 3, 8]])) == True\n\n",
        "idx_generation": 468,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum: int = 10) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that sums up to the target_sum.\n    \"\"\"\n    def find_combination(start, curr_sum):\n        if curr_sum == target_sum:\n            return True\n        if curr_sum > target_sum or start == len(nums):\n            return False\n        for i in range(start, len(nums)):\n            if find_combination(i + 1, curr_sum + nums[i]):\n                return True\n        return False\n\n    return find_combination(0, 0)\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is\n    \"\"\"\n    return nums\n\nassert f(g([1, 2, 3, 4, 5, 6, 7, 8, 9])) == True\n",
        "idx_generation": 146,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Find the minimum sum of any hourglass shape in the given 2D matrix.\n\n    An hourglass shape is defined as follows:\n    a b c\n      d\n    e f g\n\n    Sample input:\n    matrix = [[1, 1, 1, 0, 0, 0],\n              [0, 1, 0, 0, 0, 0],\n              [1, 1, 1, 0, 0, 0],\n              [0, 0, 2, 4, 4, 0],\n              [0, 0, 0, 2, 0, 0],\n              [0, 0, 1, 2, 4, 0]]\n\n    Sample output:\n    0\n\n    Explanation: The hourglass shapes with minimum sums are:\n    0 0 0\n      0\n    0 0 0\n    and\n    0 0 0\n      0\n    0 0 0\n    Their sums are 0.\n\n    \"\"\"\n    min_sum = float('inf')\n    for i in range(len(matrix) - 2):\n        for j in range(len(matrix[0]) - 2):\n            hourglass_sum = (\n                matrix[i][j] + matrix[i][j+1] + matrix[i][j+2] +\n                matrix[i+1][j+1] +\n                matrix[i+2][j] + matrix[i+2][j+1] + matrix[i+2][j+2]\n            )\n            min_sum = min(min_sum, hourglass_sum)\n    return min_sum\n\ndef g():\n    return [[1, 1, 1, 0, 0, 0],\n            [0, 1, 0, 0, 0, 0],\n            [1, 1, 1, 0, 0, 0],\n            [0, 0, 2, 4, 4, 0],\n            [0, 0, 0, 2, 0, 0],\n            [0, 0, 1, 2, 4, 0]]\n\nassert f(g()) == 0\n\n",
        "idx_generation": 378,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n\n    A palindrome is a list that reads the same forwards and backwards.\n\n    Sample Input:\n    lst = [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return lst == lst[::-1]\n\ndef g(lst: List[int] = [1, 2, 3, 2, 1]):\n    return lst\n\nassert f(g()) == True\n",
        "idx_generation": 467,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a list of lists, check if each list is a palindrome.\n    Return True if all lists are palindromes, else return False.\n    \"\"\"\n    for sublist in arr:\n        if sublist != sublist[::-1]:\n            return False\n    return True\n\ndef g():\n    \"\"\"\n    Generate a list of lists where each sublist is a palindrome.\n    \"\"\"\n    return [[1, 2, 1], [3, 4, 4, 3], [5, 6, 7, 7, 6, 5]]\n\nassert f(g()) == True\n",
        "idx_generation": 402,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D matrix of integers, check if the matrix is an identity matrix.\n    An identity matrix is a square matrix where the diagonal elements are all 1s and the remaining elements are all 0s.\n\n    Sample Input:\n    matrix = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    \n    # Check diagonal elements\n    for i in range(n):\n        if matrix[i][i] != 1:\n            return False\n    \n    # Check non-diagonal elements\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n    \n    return True\n\ndef g(matrix: List[List[int]] = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]):\n    return matrix\n\nassert f(g()) == True\n\n",
        "idx_generation": 486,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m: int, k: int) -> bool:\n    \"\"\"\n    Given three integers n, m, and k, determine if there exists a pair of integers (a, b) such that a^2 + b^2 = n^m + k^m.\n    \"\"\"\n\n    for a in range(n+1):\n        for b in range(m+1):\n            if a**2 + b**2 == n**m + k**m:\n                return True\n\n    return False\n\ndef g(n=2, m=3, k=4):\n    return n, m, k\n\nassert f(*g()) == False\n",
        "idx_generation": 247,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=100, num_of_elements=3) -> bool:\n    \"\"\"Find a combination of num_of_elements numbers from the given list that adds up to the target value.\"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(numbers, num_of_elements))\ndef g(target=100, num_of_elements=3):\n    numbers = [10, 25, 30, 40, 50, 60, 70, 80, 90]\n    return numbers\nassert f(g()) == True\n",
        "idx_generation": 92,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a group of k numbers in the list whose sum is equal to the target value.\"\"\"\n    def backtrack(nums, target, cur_sum):\n        if cur_sum == target:\n            return True\n        for i in range(len(nums)):\n            if backtrack(nums[i+1:], target, cur_sum + nums[i]):\n                return True\n        return False\n    \n    return backtrack(nums, target, 0)\n\ndef g() -> Tuple[List[int], int]:\n    return ([2, 4, 6, 8], 14)\n\nassert f(*g()) == True\n",
        "idx_generation": 229,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the maximum value in a list of numbers.\n    \"\"\"\n    max_val = float('-inf')\n    for num in nums:\n        if num > max_val:\n            max_val = num\n    return max_val\n\ndef g():\n    return [2, 9, 5, 1, 7, 3, 6, 8, 4]\n\nassert f(g()) == 9\n",
        "idx_generation": 425,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size\n    \"\"\"\n    return [[0 if j > i else 1 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n\n",
        "idx_generation": 305,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"\n    Determine if it is possible to find a pair of numbers in a list that sums up to a target number. The pair of numbers\n    must be distinct and the order of the numbers in the pair does not matter.\n\n    Sample input:\n    [1, 2, 3, 4]\n\n    Sample output:\n    False\n\n    There is no pair of numbers that sums up to the target number.\n    \"\"\"\n    return any(target - num in numbers for num in numbers)\ndef g(target=0):\n    return [1, 2, 3, 4]\nassert f(g()) == False\n\n",
        "idx_generation": 51,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Find the largest element in a given list of integers.\n    \"\"\"\n    return max(arr)\n\ndef g(arr: List[int] = [1, 5, 3, 8, 2]):\n    return arr\n\nassert f(g()) == 8\n\n",
        "idx_generation": 414,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nimport itertools\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a triplet in the list whose sum is equal to zero.\"\"\"\n    for triplet in itertools.combinations(nums, 3):\n        if sum(triplet) == 0:\n            return True\n    return False\n\ndef g():\n    nums = [-1, 0, 1, 2, -1, -4]\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 225,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a subsequence in the given list that sums up to the target value.\n    \"\"\"\n    n = len(arr)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(target + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n",
        "idx_generation": 195,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, chars: str = 'aeiou') -> bool:\n    \"\"\"Check if the given string contains all the characters from the given set.\"\"\"\n    return all(char in s for char in chars)\n\ndef g(s = 'hello world', chars = 'aeiou'):\n    return (s, chars)\n\nassert f(*g()) == False\n",
        "idx_generation": 136,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a subarray of 'count' numbers that form a valid arithmetic progression with a common difference of 'target'.\n\n    Sample Input:\n    nums = [1, 3, 5, 7, 9]\n    target = 2\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(nums)-count+1):\n        subarray = nums[i:i+count]\n        if all(subarray[j] + target == subarray[j+1] for j in range(count-1)):\n            return True\n    return False\n\ndef g(nums: List[int] = [1, 3, 5, 7, 9], target: int = 2, count: int = 3):\n    return (nums, target, count)\n\nassert f(*g())\n",
        "idx_generation": 416,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import random\nfrom typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"\n    Determine if there exists a subarray of length k in the given array such that the sum of the subarray is even.\n    \"\"\"\n    for i in range(len(arr) - k + 1):\n        subarray = arr[i:i+k]\n        if sum(subarray) % 2 == 0:\n            return True\n    return False\ndef g(k = 3):\n    arr = [random.randint(1, 10) for _ in range(10)]\n    return arr\nassert f(g()) == True\n",
        "idx_generation": 160,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"\n    Check if a number is a prime number.\n\n    Sample Input:\n    7\n\n    Sample Output:\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(n=7):\n    return n\n\nassert f(g()) == True\n",
        "idx_generation": 218,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list that contains only the even numbers from the original list.\n    \"\"\"\n    return [num for num in nums if num % 2 == 0]\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6]):\n    return nums\n\nassert f(g()) == [2, 4, 6]\n\n",
        "idx_generation": 338,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> Tuple[int, int]:\n    \"\"\"\n    Given a matrix of integers and a target number, find the indices (row and column) of the first occurrence of the target number in the matrix.\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target:\n                return (i, j)\n    return (-1, -1)\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 5\n    return (matrix, target)\n\nassert f(*g()) == (1, 1)\n",
        "idx_generation": 168,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Find the sum of the elements in the main diagonal of the given matrix.\n    The main diagonal of a matrix consists of the elements that are located on the diagonal running from the top-left corner to the bottom-right corner.\n    \"\"\"\n    n = len(matrix)\n    diagonal_sum = 0\n\n    for i in range(n):\n        diagonal_sum += matrix[i][i]\n\n    return diagonal_sum\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\nassert f(g([[1, 2, 3], [4, 5, 6], [7, 8, 9]])) == 15\n\n",
        "idx_generation": 468,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum: int = 15) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that sums up to the target_sum.\n    \"\"\"\n    def find_combination(start, curr_sum):\n        if curr_sum == target_sum:\n            return True\n        if curr_sum > target_sum or start == len(nums):\n            return False\n        for i in range(start, len(nums)):\n            if find_combination(i + 1, curr_sum + nums[i]):\n                return True\n        return False\n\n    return find_combination(0, 0)\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is\n    \"\"\"\n    return nums\n\nassert f(g([2, 4, 6, 8, 10, 12, 14, 16, 18])) == False\n",
        "idx_generation": 146,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n\n",
        "idx_generation": 401,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], n: int) -> List[str]:\n    \"\"\"\n    Given a list of words, return a new list with the words that have length greater than or equal to n.\n\n    Sample Input:\n    [\"apple\", \"banana\", \"grape\", \"kiwi\", \"orange\"]\n\n    Sample Output:\n    [\"banana\", \"orange\"]\n    \"\"\"\n    return [word for word in words if len(word) >= n]\n\ndef g(words=[\"apple\", \"banana\", \"grape\", \"kiwi\", \"orange\"], n=6):\n    return (words, n)\n\nassert f(*g()) == [\"banana\", \"orange\"]\n",
        "idx_generation": 469,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[str], target = 'python', n = 5) -> bool:\n    \"\"\"Check if a given target string is present in the list n times consecutively\"\"\"\n    return ''.join(lst).count(target * n) > 0\n\ndef g(n = 5):\n    return ['python'] * n\n\nassert f(g())\n",
        "idx_generation": 406,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D matrix of integers, check if the matrix is a diagonal matrix.\n    A diagonal matrix is a square matrix where all non-diagonal elements are zero.\n\n    Sample Input:\n    matrix = [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    \n    # Check non-diagonal elements\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n    \n    return True\n\ndef g(matrix: List[List[int]] = [[1, 0, 0], [0, 2, 0], [0, 0, 3]]):\n    return matrix\n\nassert f(g()) == True\n\n",
        "idx_generation": 486,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m: int, k: int) -> bool:\n    \"\"\"\n    Given three integers n, m, and k, determine if there exists a pair of integers (a, b) such that a^3 + b^3 = n^m + k^m.\n    \"\"\"\n\n    for a in range(n+1):\n        for b in range(m+1):\n            if a**3 + b**3 == n**m + k**m:\n                return True\n\n    return False\n\ndef g(n=2, m=3, k=4):\n    return n, m, k\n\nassert f(*g()) == False\n\n",
        "idx_generation": 258,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom collections import Counter\n\ndef f(s: str, words=['apple', 'banana', 'cherry', 'apple', 'cherry', 'banana'], k=2) -> bool:\n    \"\"\"\n    Given a list of words and given an integer k, determine if there are exactly k occurrences of each word in the list.\n    \"\"\"\n    word_counts = Counter(words)\n    return all(count == k for count in word_counts.values())\n\ndef g(words=['apple', 'banana', 'cherry', 'apple', 'cherry', 'banana'], k=2):\n    word_counts = Counter(words)\n    return all(count == k for count in word_counts.values())\n\nassert f(g()) == True\n",
        "idx_generation": 98,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, k: int) -> bool:\n    \"\"\"Check if there exists a combination of k numbers in the list that sums up to the target value.\"\"\"\n    def backtrack(curr_sum, curr_index, curr_k):\n        if curr_sum == target and curr_k == k:\n            return True\n        if curr_sum > target or curr_index >= len(nums) or curr_k >= k:\n            return False\n        \n        for i in range(curr_index, len(nums)):\n            if backtrack(curr_sum + nums[i], i + 1, curr_k + 1):\n                return True\n        \n        return False\n    \n    return backtrack(0, 0, 0)\n\ndef g(nums: List[int], target: int, k: int):\n    return nums, target, k\n\nassert f(*g([2, 4, 6, 8], 18, 3)) == True\n",
        "idx_generation": 244,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, target='abc', num_replacements=3) -> bool:\n    \"\"\"\n    Given a string, find a new string that is equal to the target string after a certain number of replacements.\n    \"\"\"\n    return s.replace(s[0], target[0], num_replacements) == target\ndef g(target='abc', num_replacements=3):\n    return target.replace(target[0], 'a', num_replacements)\nassert f(g()) == True\n",
        "idx_generation": 4,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Find if there are two numbers in the list that add up to the target.\n    \"\"\"\n    return any(target - num in nums for num in nums)\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 15):\n    return (nums, target)\n\nassert f(*g()) == True\n",
        "idx_generation": 426,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if the target value is present in the matrix.\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    low = 0\n    high = m * n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        row = mid // n\n        col = mid % n\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g(), target=5) == True\n",
        "idx_generation": 308,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 4, 3, 2, 1]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 54,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if it is a magic square.\n    A magic square is a square matrix in which the sum of every row, every column, and both diagonals is the same.\n\n    Sample Input:\n    matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != target_sum:\n            return False\n\n    # Check diagonal 1\n    diagonal_1_sum = sum(matrix[i][i] for i in range(n))\n    if diagonal_1_sum != target_sum:\n        return False\n\n    # Check diagonal 2\n    diagonal_2_sum = sum(matrix[i][n - i - 1] for i in range(n))\n    if diagonal_2_sum != target_sum:\n        return False\n\n    return True\n\ndef g(matrix: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 421,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a triplet of numbers whose sum is equal to the target.\n    If such a triplet exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 233,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int = 5) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the given array, such that the sum of its elements is divisible by k.\"\"\"\n    for i in range(len(arr) - k + 1):\n        subarr = arr[i:i+k]\n        subarr_sum = sum(subarr)\n        if subarr_sum % k == 0:\n            return True\n    return False\n\ndef g(k: int = 5):\n    return [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33]\n\nassert f(g()) == True\n",
        "idx_generation": 205,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=15, count=3) -> bool:\n    \"\"\"Find if there are count numbers that add up to the target_sum\"\"\"\n    from itertools import combinations\n    return any(sum(c) == target_sum for c in combinations(nums, count))\n\ndef g(target_sum=15, count=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 144,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subsequence of length k in the list that is strictly increasing\"\"\"\n    for i in range(len(nums)-k+1):\n        subsequence = nums[i:i+k]\n        if all(subsequence[j] < subsequence[j+1] for j in range(k-1)):\n            return True\n    return False\n\ndef g(k=5):\n    return [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 428,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list such that the product of its elements is equal to the sum of its indices.\n\n    Example:\n    nums = [2, 1, 3, 4]\n    output: True\n    Explanation: The subarray [2, 1] has a product of 2 * 1 = 2, which is equal to the sum of its indices (0 + 1 = 1).\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            subarr = nums[i:j]\n            if sum(subarr) == i + j:\n                return True\n    return False\n\ndef g(nums: List[int]):\n    return nums\n\nassert f(g([2, 1, 3, 4])) == True\n\n",
        "idx_generation": 167,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a given number is a perfect square\"\"\"\n    return n ** 0.5 == int(n ** 0.5)\ndef g():\n    return 16\nassert f(g()) == True\n",
        "idx_generation": 219,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if the sum of three integers is equal to their product\"\"\"\n    return x + y + z == x * y * z\ndef g(x=2, y=3, z=4):\n    return x, y, z\nassert f(*g()) == False\n",
        "idx_generation": 344,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the given number is divisible by any element in the list\"\"\"\n    return any(n % num == 0 for num in lst)\ndef g(lst=[1, 2, 3, 4, 5]):\n    return lst[4]\nassert f(g()) == True\n",
        "idx_generation": 176,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    Given a matrix of integers and a target number, find the indices (row and column) of all occurrences of the target number in the matrix.\n    \"\"\"\n    indices = []\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target:\n                indices.append((i, j))\n    return indices\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 5\n    return (matrix, target)\n\nassert f(*g()) == [(1, 1)]\n\n",
        "idx_generation": 469,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Check if there exists a subset of numbers from a list such that the sum of the subset is equal to the target value.\n\n    Sample Input:\n    [1, 2, 3, 4, 5], 9\n\n    Sample Output:\n    True\n    \"\"\"\n    if target == 0:\n        return True\n    if len(nums) == 0:\n        return False\n    if nums[0] == target:\n        return True\n    return f(nums[1:], target) or f(nums[1:], target - nums[0])\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n",
        "idx_generation": 151,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if there exists a row and a column that have the same sum,\n    but the sum is not equal to zero.\n\n    Sample Input:\n    arr = [[2, 4, 6], [8, 10, 12], [14, 16, 18]]\n\n    Sample Output:\n    True\n    \"\"\"\n    row_sum = [sum(row) for row in arr]\n    column_sum = [sum(column) for column in zip(*arr)]\n    return any(sum_value in column_sum and sum_value != 0 for sum_value in row_sum)\n\ndef g(arr: List[List[int]]):\n    return arr\n\nassert f(g([[2, 4, 6], [8, 10, 12], [14, 16, 18]])) == True\n",
        "idx_generation": 418,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list contains a palindrome.\n    A palindrome is a word, number, phrase, or other sequence of characters that reads the same forward and backward.\n\n    Sample Input:\n    arr = [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return arr == arr[::-1]\n\ndef g(arr: List[int] = [1, 2, 3, 2, 1]):\n    return arr\n\nassert f(g()) == True\n\n",
        "idx_generation": 471,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s=\"racecar\"):\n    return s\n\nassert f(g()) == True\n",
        "idx_generation": 436,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return the maximum element in each row as a list.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    [3, 6, 9]\n    \"\"\"\n    max_elements = []\n    for row in matrix:\n        max_elements.append(max(row))\n    return max_elements\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [3, 6, 9]\n\n",
        "idx_generation": 487,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m: int, k: int) -> bool:\n    \"\"\"\n    Given three integers n, m, and k, determine if there exists a pair of integers (a, b) such that a^m + b^m = n^m + k^m.\n    \"\"\"\n\n    for a in range(n+1):\n        for b in range(m+1):\n            if a**m + b**m == n**m + k**m:\n                return True\n\n    return False\n\ndef g(n=2, m=3, k=4):\n    return n, m, k\n\nassert f(*g()) == False\n\n",
        "idx_generation": 258,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(word: str, target_word=\"python\") -> bool:\n    \"\"\"\n    Rearrange the letters of the word to form the target_word.\n    Return True if it is possible, False otherwise.\n    \"\"\"\n    perms = [''.join(p) for p in permutations(word)]\n    return target_word in perms\n\ndef g(word=\"tyohnp\"):\n    return (word,)\n\nassert f(*g()) == True\n",
        "idx_generation": 104,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that sums up to the target value.\"\"\"\n    def backtrack(curr_sum, curr_index):\n        if curr_sum == target:\n            return True\n        if curr_sum > target or curr_index >= len(nums):\n            return False\n        \n        for i in range(curr_index, len(nums)):\n            if backtrack(curr_sum + nums[i], i + 1):\n                return True\n        \n        return False\n    \n    return backtrack(0, 0)\n\ndef g(nums: List[int], target: int):\n    return nums, target\n\nassert f(*g([2, 4, 6, 8], 15)) == False\n",
        "idx_generation": 244,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import random\nfrom typing import*\ndef f(names: List[str], name_length=5, max_names=10) -> bool:\n    \"\"\"Check if the given list of names contains at least 'max_names' names with length equal to 'name_length'.\"\"\"\n    return sum(len(name) == name_length for name in names) >= max_names\ndef g(name_length=5, max_names=10):\n    import random\n    names = [''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(name_length)) for _ in range(max_names)]\n    return names\nassert f(g()) == True\n",
        "idx_generation": 12,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Find the number of occurrences of the target number in the list.\n    \"\"\"\n    return nums.count(target)\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 3):\n    return (nums, target)\n\nassert f(*g()) == 1\n",
        "idx_generation": 426,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a subsequence in the given list such that the sum of its elements is equal to the maximum element in the list.\n    \"\"\"\n    max_num = max(nums)\n    if max_num in nums:\n        return True\n    return False\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is.\n    \"\"\"\n    return nums\n\nassert f(g([1, 2, 3, 4, 5, 6])) == True\n\n",
        "idx_generation": 334,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the array is a rotation of a palindrome.\"\"\"\n    def is_palindrome(s):\n        return s == s[::-1]\n\n    for i in range(len(arr)):\n        rotated_arr = arr[i:] + arr[:i]\n        if is_palindrome(rotated_arr):\n            return True\n    return False\n\ndef g(arr=[1,2,3,4,5]):\n    return arr\n\nassert f(g()) == False\n",
        "idx_generation": 54,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers and a number k, find if there exists two distinct indices i and j in the list such that nums[i] and nums[j] are divisible by k.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if num % k == 0 and (k - num % k) % k in num_set:\n            return True\n        num_set.add(num % k)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=3):\n    return nums, k\n\nassert f(*g()) == True\n",
        "idx_generation": 424,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g()) == True\n\n",
        "idx_generation": 239,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Given a list of numbers and a target number, determine if there exists a subsequence of the list whose sum\n    is equal to the target number.\n\n    Sample input:\n    [1, 2, 3, 4]\n\n    Sample output:\n    True\n\n    The subsequence [2, 3] has a sum of 5, which is the target number.\n    \"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    return dp[n][target]\n\ndef g(target=0):\n    return [1, 2, 3, 4]\n\nassert f(g()) == True\n",
        "idx_generation": 211,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(string: str, sub: str) -> bool:\n    \"\"\"\n    Given a string and a substring, check if the substring is a palindrome and appears an odd number of times in the string.\n\n    Sample Input:\n    \"ababa\", \"aba\"\n\n    Sample Output:\n    True\n    \"\"\"\n    count = string.count(sub)\n    if count % 2 == 0:\n        return False\n    return sub == sub[::-1]\n\ndef g() -> Tuple[str, str]:\n    return (\"ababa\", \"aba\")\n\nassert f(*g()) == True\n\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k: int) -> str:\n    \"\"\"\n    Rotate String\n\n    Given a string and an integer k, rotate the string to the right by k steps.\n\n    Example:\n    s = \"abcdefg\"\n    k = 3\n\n    Output: \"efgabcd\"\n\n    Explanation: The string is rotated right by 3 steps.\n    \"\"\"\n    k %= len(s)\n    return s[-k:] + s[:-k]\n\ndef g(s: str = \"abcdefg\", k: int = 3):\n    return (s, k)\n\nassert f(*g()) == \"efgabcd\"\n",
        "idx_generation": 466,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in a list that sum up to a target number.\"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(arr: List[int], target: int):\n    \"\"\"Generate a list of numbers and a target number.\"\"\"\n    return arr, target\n\nassert f(*g([1, 2, 3, 4, 5], 9)) == True\n",
        "idx_generation": 172,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of integers is a permutation of [1, 2, 3, ..., n].\"\"\"\n    n = len(nums)\n    if set(nums) != set(range(1, n+1)):\n        return False\n    return True\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 239,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find if there exists a subarray whose average equals the target number.\n    If such a subarray exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(nums)):\n        total = nums[i]\n        if total == target:\n            return True\n        for j in range(i + 1, len(nums)):\n            total += nums[j]\n            if total / (j - i + 1) == target:\n                return True\n    return False\n\ndef g(nums: List[int] = [4, 2, -3, 1, 6], target: int = 0):\n    return nums\n\nassert f(g()) == True\n\n",
        "idx_generation": 351,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, check if the target number is present in the list.\n    \"\"\"\n    return target in nums\ndef g():\n    nums = [1, 4, 7, 9, 12, 15]\n    target = 9\n    return (nums, target)\nassert f(*g()) == True\n\n",
        "idx_generation": 179,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the positive numbers in the same order as the original list.\n    \"\"\"\n    return [num for num in lst if num > 0]\n\ndef g():\n    return [1, -2, 3, -4, 5, -6]\n\nassert f(g()) == [1, 3, 5]\n\n",
        "idx_generation": 469,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that sums up to the target value.\n    \"\"\"\n    def find_combination(start, curr_sum):\n        if curr_sum == target:\n            return True\n        if curr_sum > target or start == len(nums):\n            return False\n        for i in range(start, len(nums)):\n            if find_combination(i + 1, curr_sum + nums[i]):\n                return True\n        return False\n\n    return find_combination(0, 0)\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is.\n    \"\"\"\n    return nums\n\nassert f(g([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]))\n",
        "idx_generation": 157,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n",
        "idx_generation": 422,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], n: int) -> bool:\n    \"\"\"\n    Given a list of words and an integer n, check if there exists two words in the list that have a common prefix of length n.\n\n    Sample Input:\n    words = [\"apple\", \"application\", \"banana\", \"cat\"]\n    n = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    prefix_set = set()\n    for word in words:\n        prefix = word[:n]\n        if prefix in prefix_set:\n            return True\n        prefix_set.add(prefix)\n    return False\n\ndef g():\n    return [\"apple\", \"application\", \"banana\", \"cat\"], 3\n\nassert f(*g()) == True\n",
        "idx_generation": 473,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=3, length=12) -> bool:\n    \"\"\"Check if the substring appears exactly 'count' number of times in the given string.\"\"\"\n    return string.count(substring) == count\n\ndef g(substring = 'abc', count = 3):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + c\n\nassert f(g()) == True\n\n",
        "idx_generation": 437,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains at least one number that is a prime number.\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return any(is_prime(num) for num in nums)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 488,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subarray with a sum divisible by k.\n\n    Example:\n    nums = [4, 7, 3, 8, 1]\n    k = 6\n    output: True\n    \"\"\"\n    prefix_sum = 0\n    seen = set()\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in seen:\n            return True\n        seen.add(prefix_sum)\n    return False\n\ndef g():\n    return [4, 7, 3, 8, 1], 6\n\nassert f(*g()) == True\n",
        "idx_generation": 283,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int], n=5) -> bool:\n    \"\"\"\n    Given a list of integers, find a subset of n numbers that sum up to 0.\n\n    Sample input:\n    [1, -2, 3, 4, -1, -6, 7]\n\n    Sample output:\n    True\n\n    Explanation: The subset (-2, 1, -1, -6, 7) sums up to 0.\n    \"\"\"\n    from itertools import combinations\n    for subset in combinations(arr, n):\n        if sum(subset) == 0:\n            return True\n    return False\n\ndef g(n=5):\n    return [1, -2, 3, 4, -1, -6, 7]\n\nassert f(g()) == True\n",
        "idx_generation": 111,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that forms a subsequence with a sum equal to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        num = nums[i - 1]\n        for j in range(target + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j >= num:\n                dp[i][j] = dp[i][j] or dp[i - 1][j - num]\n\n    return dp[n][target]\n\ndef g(nums: List[int], target: int):\n    return nums, target\n\nassert f(*g([2, 4, 6, 8], 10)) == True\n",
        "idx_generation": 249,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import random\nfrom typing import*\ndef f(words: List[str], length=7, count=3) -> bool:\n    \"\"\"Find a list of count words with length characters\"\"\"\n    return len(words) == count and all(len(word) == length for word in words)\ndef g(length = 7, count = 3):\n    from random import choice\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    return [\"\".join(choice(alphabet) for _ in range(length)) for _ in range(count)]\nassert f(g()) == True\n",
        "idx_generation": 18,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n    return matrix\n\nassert f(g()) == True\n",
        "idx_generation": 427,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, find the maximum element in each row and return a list of those maximum values.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Output:\n    [3, 6, 9]\n\n    Explanation: The maximum elements in each row are 3, 6, and 9 respectively.\n    \"\"\"\n    return [max(row) for row in matrix]\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [3, 6, 9]\n",
        "idx_generation": 345,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Check if the target number exists in the given matrix.\"\"\"\n    return any(target in row for row in matrix)\n    \ndef g(target=5):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    \nassert f(g()) == True\n",
        "idx_generation": 54,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum product of any three numbers in the list.\n\n    Example:\n    nums = [-10, -3, 5, 2, -2, 0]\n\n    Output:\n    150\n\n    Explanation: The maximum product can be obtained by multiplying -10, -3, and 5.\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    return max(nums[0] * nums[1] * nums[n-1], nums[n-1] * nums[n-2] * nums[n-3])\n\ndef g(nums: List[int] = [-10, -3, 5, 2, -2, 0]):\n    return (nums,)\n\nassert f(*g()) == 150\n\n",
        "idx_generation": 443,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 9) == True\n",
        "idx_generation": 251,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of numbers and a target number, determine the maximum number of elements in a subsequence of the\n    list whose sum is less than or equal to the target number.\n\n    Sample input:\n    [1, 2, 3, 4]\n\n    Sample output:\n    3\n\n    The subsequence [1, 2, 3] has a sum of 6, which is the maximum sum less than or equal to the target number.\n    \"\"\"\n    n = len(nums)\n    dp = [0] * (target + 1)\n    for i in range(1, n + 1):\n        for j in range(target, nums[i - 1] - 1, -1):\n            dp[j] = max(dp[j], dp[j - nums[i - 1]] + 1)\n    return dp[target]\n\ndef g(target: int):\n    return [1, 2, 3, 4]\n\nassert f(g(6), 6) == 3\n",
        "idx_generation": 220,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    \"\"\"\n    Check if the given list of words contains any duplicates.\n\n    Sample Input:\n    ['apple', 'banana', 'cherry', 'apple']\n\n    Sample Output:\n    True\n    \"\"\"\n    return len(words) != len(set(words))\n\ndef g() -> List[str]:\n    return ['apple', 'banana', 'cherry', 'apple']\n\nassert f(g()) == True\n",
        "idx_generation": 155,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[List[int]]:\n    \"\"\"\n    Given a list of integers, find all unique quadruplets that sum up to the target.\n    Return a list of the quadruplets.\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    result = []\n    for i in range(n-3):\n        if i > 0 and nums[i] == nums[i-1]:\n            continue\n        for j in range(i+1, n-2):\n            if j > i+1 and nums[j] == nums[j-1]:\n                continue\n            left = j + 1\n            right = n - 1\n            while left < right:\n                total = nums[i] + nums[j] + nums[left] + nums[right]\n                if total < target:\n                    left += 1\n                elif total > target:\n                    right -= 1\n                else:\n                    result.append([nums[i], nums[j], nums[left], nums[right]])\n                    while left < right and nums[left] == nums[left+1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right-1]:\n                        right -= 1\n                    left += 1\n                    right -= 1\n    return result\n\ndef g(nums: List[int] = [1, 0, -1, 0, -2, 2], target: int = 0):\n    return nums, target\n\nassert f(*g()) == [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]]\n",
        "idx_generation": 495,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int = 3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the given array, such that the sum of its elements is divisible by k.\"\"\"\n    for i in range(len(arr) - k + 1):\n        subarr = arr[i:i+k]\n        subarr_sum = sum(subarr)\n        if subarr_sum % k == 0:\n            return True\n    return False\n\ndef g(k: int = 3):\n    return [k] * k\n\nassert f(g()) == True\n",
        "idx_generation": 176,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n    n = len(matrix)\n\n    # Calculate the sum of the first row\n    target_sum = sum(matrix[0])\n\n    # Check if all rows have the same sum\n    if not all(sum(row) == target_sum for row in matrix):\n        return False\n\n    # Check if all columns have the same sum\n    if not all(sum(row[i] for row in matrix) == target_sum for i in range(n)):\n        return False\n\n    # Check if the sum of the diagonal is the same as the target sum\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n\n    # Check if the sum of the anti-diagonal is the same as the target sum\n    if sum(matrix[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n\n    return True\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g()) == True\n\n",
        "idx_generation": 239,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of numbers, return the sum of all the positive numbers.\n    \"\"\"\n    total = 0\n    for num in nums:\n        if num > 0:\n            total += num\n    return total\n\ndef g(nums: List[int] = [1, -2, 3, -4, 5]):\n    return nums\n\nassert f(g()) == 9\n\n\n",
        "idx_generation": 352,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist two numbers in a list whose sum is equal to a target value.\n\n    Sample Input:\n    [4, 7, 2, 9, 5], 11\n\n    Sample Output:\n    True\n    \"\"\"\n    complements = set()\n    for num in numbers:\n        complement = target - num\n        if complement in complements:\n            return True\n        complements.add(num)\n    return False\n\ndef g(numbers: List[int] = [4, 7, 2, 9, 5], target: int = 11) -> Tuple[List[int], int]:\n    return (numbers, target)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 183,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, check if it is a symmetric matrix.\n    A matrix is symmetric if it is equal to its transpose.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    transpose = [[matrix[j][i] for j in range(len(matrix[i]))] for i in range(len(matrix))]\n    return matrix == transpose\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g()) == True\n\n",
        "idx_generation": 470,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"\n    Check if there exists a subsequence of the given list that sums up to the target value.\n    \"\"\"\n    def find_subsequence(start, curr_sum):\n        if curr_sum == target:\n            return True\n        if curr_sum > target or start == len(lst):\n            return False\n        if find_subsequence(start + 1, curr_sum + lst[start]):\n            return True\n        if find_subsequence(start + 1, curr_sum):\n            return True\n        return False\n\n    return find_subsequence(0, 0)\n\ndef g(lst: List[int]):\n    \"\"\"\n    This solution returns the input list as is.\n    \"\"\"\n    return lst\n\nassert f(g([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]))\n",
        "idx_generation": 158,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D matrix of integers, check if the matrix is a Toeplitz matrix.\n    A Toeplitz matrix is a matrix where each descending diagonal from left to right is constant.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [4, 1, 2], [7, 4, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    \n    # Check if matrix is a square matrix\n    if len(matrix[0]) != n:\n        return False\n    \n    # Check if matrix is a Toeplitz matrix\n    for i in range(1, n):\n        for j in range(1, n):\n            if matrix[i][j] != matrix[i-1][j-1]:\n                return False\n    \n    return True\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 1, 2], [7, 4, 1]]):\n    return matrix\n\nassert f(g()) == True\n",
        "idx_generation": 423,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome, considering only alphanumeric characters and ignoring cases.\n\n    Sample Input:\n    s = \"A man, a plan, a canal: Panama\"\n\n    Sample Output:\n    True\n    \"\"\"\n    s = ''.join(ch.lower() for ch in s if ch.isalnum())\n    return s == s[::-1]\n\ndef g():\n    return \"A man, a plan, a canal: Panama\"\n\nassert f(g()) == True\n",
        "idx_generation": 473,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=[\"apple\", \"banana\", \"cherry\"]) -> bool:\n    \"\"\"Check if a string can be formed by concatenating words from a given list\"\"\"\n    n = len(s)\n    if n == 0:\n        return True\n    dp = [False] * (n + 1)\n    dp[0] = True\n    for i in range(1, n + 1):\n        for j in range(i):\n            if dp[j] and s[j:i] in words:\n                dp[i] = True\n                break\n    return dp[n]\n\ndef g(words=[\"apple\", \"banana\", \"cherry\"]):\n    return \"applebanana\"\n\nassert f(g())\n",
        "idx_generation": 459,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=5, c=10) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the cubes of the first c integers)\"\"\"\n    return n + a == sum([b * i**3 for i in range(c)])\ndef g(a = 2, b = 5, c = 10):\n    return -a + sum([b * i**3 for i in range(c)])\nassert f(g()) == True\n",
        "idx_generation": 491,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Find a subset of numbers in the list that sum up to the target value.\n    \"\"\"\n    def subsetSum(numbers, target):\n        if target == 0:\n            return True\n        if not numbers or target < 0:\n            return False\n        return subsetSum(numbers[1:], target) or subsetSum(numbers[1:], target - numbers[0])\n\n    return subsetSum(x, target)\ndef g(target = 0):\n    return [-1, 2, 3, 5, 8, 10]\nassert f(g())\n",
        "idx_generation": 314,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], n=4, s=20) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\n\ndef g(n = 4, s = 20):\n    if n == 1:\n        return [s]\n    elif n == 2:\n        return [s - 1, 1]\n    elif n == 3:\n        return [s - 2, 1, 1]\n    elif n == 4:\n        return [s/4, s/4, s/4, s/4]\n    else:\n        return [s/5, s/5, s/5, s/5, s/5]\n\nassert f(g()) == True\n",
        "idx_generation": 119,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_length=10) -> bool:\n    \"\"\"\n    Check if there is a combination of words that has a total length equal to the target length.\n    \"\"\"\n    def combination_length(words, target_length):\n        if target_length == 0:\n            return True\n        if not words or target_length < 0:\n            return False\n        return combination_length(words[1:], target_length - len(words[0])) or combination_length(words[1:], target_length)\n    return combination_length(words, target_length)\n\ndef g(target_length=10):\n    return [\"apple\", \"banana\", \"grape\", \"kiwi\", \"orange\"]\n\nassert f(g()) == True\n\n",
        "idx_generation": 258,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, substrings=['abc', 'def', 'ghi', 'jkl'], k=2) -> bool:\n    \"\"\"\n    Find the length of the longest substring in s that contains at least k of the substrings in the given order.\n    \"\"\"\n    index = 0\n    max_length = 0\n    current_length = 0\n    count = 0\n    for sub in substrings:\n        if sub not in s[index:]:\n            if count >= k:\n                current_length += count * len(sub)\n                if current_length > max_length:\n                    max_length = current_length\n                current_length = 0\n                count = 0\n            else:\n                current_length = 0\n                count = 0\n        else:\n            index += s[index:].index(sub) + len(sub)\n            current_length += len(sub)\n            count += 1\n    if count >= k:\n        current_length += count * len(sub)\n        if current_length > max_length:\n            max_length = current_length\n    return max_length\ndef g(substrings=['abc', 'def', 'ghi', 'jkl'], k=2):\n    return ''.join(substrings)\nassert f(g()) == 24\n",
        "idx_generation": 19,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if a list is a sorted in non-decreasing order.\"\"\"\n    return arr == sorted(arr)\n\ndef g(start: int, length: int):\n    \"\"\"Generate a list of numbers in non-decreasing order.\"\"\"\n    return list(range(start, start+length))\n\nassert f(g(1, 5)) == True\n\n",
        "idx_generation": 427,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"Find the minimum number of elements from the list whose sum is equal to the target value.\"\"\"\n    n = len(nums)\n    dp = [[float('inf')] * (target + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - nums[i - 1]] + 1)\n\n    return dp[n][target]\n\ndef g(nums=[2, 4, 6, 8], target=10):\n    return nums, target\n\nassert f(*g()) == 2\n",
        "idx_generation": 356,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target: int, divisor: int) -> bool:\n    \"\"\"Check if the target number exists in the list and is divisible by the given divisor.\"\"\"\n    return any(num == target and num % divisor == 0 for num in lst)\n\ndef g(divisor: int = 3):\n    return [3, 6, 9, 12, 15]\n\nassert f(g(), 12, 3) == True\n",
        "idx_generation": 83,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if each row and column has a prime sum.\n\n    Sample Input:\n    arr = [[2, 4, 6], [8, 10, 12], [14, 16, 18]]\n\n    Sample Output:\n    False\n    \"\"\"\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    row_sum = [sum(row) for row in arr]\n    column_sum = [sum(column) for column in zip(*arr)]\n    return all(is_prime(sum_value) for sum_value in row_sum + column_sum)\n\ndef g(arr: List[List[int]] = [[2, 4, 6], [8, 10, 12], [14, 16, 18]]):\n    return arr\n\nassert f(g()) == False\n",
        "idx_generation": 456,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], s=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list whose sum is equal to a specific value.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        if s - num in num_set:\n            return True\n    return False\n\ndef g(s=100):\n    return [20, 30, 40, 50, 60]\n\nassert f(g())\n",
        "idx_generation": 253,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a subsequence in the list that sums up to the target value.\n    \"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j - nums[i - 1]] or dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    return dp[n][target]\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is.\n    \"\"\"\n    return nums\n\nassert f(g([2, 4, 6, 8, 10]), 14)\n",
        "idx_generation": 226,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import *\ndef f(words: List[str], target_word: str) -> bool:\n    \"\"\"\n    Check if there are two words in the given list that can be concatenated to form the target word.\n    \"\"\"\n    word_set = set(words)\n    for i in range(1, len(target_word)):\n        prefix = target_word[:i]\n        suffix = target_word[i:]\n        if prefix in word_set and suffix in word_set:\n            return True\n    return False\n\ndef g(words: List[str], target_word: str):\n    \"\"\"\n    This solution returns the input list and target word as is\n    \"\"\"\n    return words, target_word\n\nassert f(*g([\"cat\", \"dog\", \"apple\", \"banana\"], \"catdog\")) == True\n",
        "idx_generation": 163,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int = 5) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the given array, such that the product of its elements is divisible by k.\"\"\"\n    for i in range(len(arr) - k + 1):\n        subarr = arr[i:i+k]\n        subarr_product = 1\n        for num in subarr:\n            subarr_product *= num\n        if subarr_product % k == 0:\n            return True\n    return False\n\ndef g(k: int = 5):\n    return [k] * k\n\nassert f(g()) == True\n",
        "idx_generation": 204,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains only prime numbers\"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]  # List of prime numbers\n    for num in nums:\n        if num not in primes:\n            return False\n    return True\n\ndef g(nums=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 248,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if there exists a pair of numbers in the list that subtract to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] - arr[j] == target or arr[j] - arr[i] == target:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 1):\n    return arr, target\n\nassert f(*g()) == True\n",
        "idx_generation": 354,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of elements in the array whose sum is equal to 10.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == 10:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 187,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the sum of all elements in each row is less than the sum of all elements in each column.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    False\n    \"\"\"\n    row_sums = [sum(row) for row in arr]\n    col_sums = [sum(col) for col in zip(*arr)]\n    return all(row_sum < col_sum for row_sum, col_sum in zip(row_sums, col_sums))\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n",
        "idx_generation": 470,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that sums up to the target value.\n    \"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j - nums[i - 1]] or dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    return dp[n][target]\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is.\n    \"\"\"\n    return nums\n\nassert f(g([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]))\n",
        "idx_generation": 158,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n",
        "idx_generation": 443,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Given a string, check if it is a palindrome.\n\n    Sample Input:\n    string = \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return string == string[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 473,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, check if it is a palindrome.\n\n    Example:\n    s = \"racecar\"\n    The string is a palindrome, so the function should return True.\n    \"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g()) == True\n",
        "idx_generation": 460,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a symmetric matrix of the given size\n    \"\"\"\n    return [[1 if i == j else 0 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n\n",
        "idx_generation": 383,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subsequence of the list whose sum is equal to the target value and the subsequence has at least 2 elements.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target] and sum(nums) >= target\n\ndef g(nums=[2, 4, 6, 8], target=10):\n    return nums, target\n\nassert f(*g()) == True\n",
        "idx_generation": 356,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: List[int], n=2, s=8) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 2, s = 8):\n    x = [4, 4, 4, 4]\n    return x[:n]\nassert f(g()) == True\n",
        "idx_generation": 121,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subset of k numbers from the list whose sum is divisible by k.\"\"\"\n\n    def subsets_sum_divisible(nums, k, subset=[], index=0):\n        if len(subset) == k:\n            return sum(subset) % k == 0\n        if index >= len(nums):\n            return False\n        with_num = subsets_sum_divisible(nums, k, subset + [nums[index]], index + 1)\n        without_num = subsets_sum_divisible(nums, k, subset, index + 1)\n        return with_num or without_num\n\n    return subsets_sum_divisible(lst, k)\n    \ndef g(k = 3):\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\nassert f(g()) == True\n",
        "idx_generation": 266,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(string: str, n=3) -> bool:\n    \"\"\"\n    Find if the given string contains exactly n vowels.\n\n    Sample Input:\n    string = \"Hello, World!\"\n    n = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in string.lower():\n        if char in vowels:\n            count += 1\n    return count == n\n\ndef g(string = \"Hello, World!\", n = 3):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in string.lower():\n        if char in vowels:\n            count += 1\n    if count < n:\n        string += 'a' * (n - count)\n    elif count > n:\n        string = string.replace('a', '', count - n)\n    return string.swapcase()\n\nassert f(g()) == True\n",
        "idx_generation": 28,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the target number is present in the list\"\"\"\n    return target in nums\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 3):\n    return (nums, target)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 429,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are any three numbers that add up to the target.\n    If such a triplet exists, return True. Otherwise, return False.\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums, 12\n\nassert f(*g()) == True\n",
        "idx_generation": 363,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(numbers: List[int], target: int, operation: str) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that, when combined using the given operation, results in the target value.\n    \"\"\"\n    if operation == '+':\n        for i in range(len(numbers)):\n            for j in range(i + 1, len(numbers)):\n                if numbers[i] + numbers[j] == target:\n                    return True\n    elif operation == '-':\n        for i in range(len(numbers)):\n            for j in range(i + 1, len(numbers)):\n                if numbers[i] - numbers[j] == target:\n                    return True\n    elif operation == '*':\n        for i in range(len(numbers)):\n            for j in range(i + 1, len(numbers)):\n                if numbers[i] * numbers[j] == target:\n                    return True\n    elif operation == '/':\n        for i in range(len(numbers)):\n            for j in range(i + 1, len(numbers)):\n                if numbers[i] / numbers[j] == target:\n                    return True\n    return False\n\ndef g(numbers: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 16, operation: str = '+'):\n    return (numbers, target, operation)\n\nassert f(*g()) == True\n",
        "idx_generation": 106,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=10) -> bool:\n    \"\"\"Check if the given number is divisible by a and b\"\"\"\n    return n % a == 0 and n % b == 0\n\ndef g(a=5, b=10):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 458,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target value, find the index of the first occurrence of the target value in the list.\n    If the target value is not present in the list, return -1.\n    \"\"\"\n    for i, num in enumerate(nums):\n        if num == target:\n            return i\n    return -1\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 5):\n    return (nums, target)\n\nassert f(*g()) == 4\n",
        "idx_generation": 261,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=4, s=20) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a >= 0 for a in x])\ndef g(n = 4, s = 20):\n    if n == 1:\n        return [s]\n    elif n == 2:\n        return [s - 1, 1]\n    elif n == 3:\n        return [s - 2, 1, 1]\n    else:\n        return [s/4, s/4, s/4, s/4]\nassert f(g()) == True\n\n",
        "idx_generation": 230,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums1: List[int], nums2: List[int], k: int) -> bool:\n    \"\"\"\n    Given two lists of integers, nums1 and nums2, and an integer k, find if there exists a pair of numbers, one from each list, such that their sum is equal to k.\n\n    Sample Input:\n    nums1 = [1, 2, 4, 5]\n    nums2 = [3, 6, 7, 8]\n    k = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    nums1_set = set(nums1)\n    for num in nums2:\n        complement = k - num\n        if complement in nums1_set:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 4, 5], [3, 6, 7, 8], 9\n\nassert f(*g())\n",
        "idx_generation": 178,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int = 4) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the given array, such that the sum of its elements is divisible by k.\"\"\"\n    for i in range(len(arr) - k + 1):\n        subarr = arr[i:i+k]\n        subarr_sum = sum(subarr)\n        if subarr_sum % k == 0:\n            return True\n    return False\n\ndef g(k: int = 4):\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\nassert f(g()) == True\n",
        "idx_generation": 205,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=5, s=25) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 5, s = 25):\n    x = [5, 5, 5, 5, 5]\n    return x[:n]\nassert f(g()) == True\n",
        "idx_generation": 267,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int]) -> List[int]:\n    \"\"\"\n    Return a new list with only the even numbers from the original list\n    \"\"\"\n    even_nums = [num for num in lst if num % 2 == 0]\n    return even_nums\n\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return lst\n\nassert f(g()) == [2, 4, 6, 8, 10]\n\n",
        "idx_generation": 360,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, return True if all elements in the matrix are the same, False otherwise.\n    \"\"\"\n    return all(all(element == matrix[0][0] for element in row) for row in matrix)\n\ndef g(matrix: List[List[int]] = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]):\n    return matrix\n\nassert f(g()) == True\n",
        "idx_generation": 188,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=5) -> int:\n    \"\"\"\n    Given a list of integers and a target number, find the sum of all numbers in the list that are divisible by the target.\n    Return the sum if there are any such numbers, otherwise return 0.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 2\n\n    Sample Output:\n    6\n    \"\"\"\n    divisible_sum = 0\n    for num in nums:\n        if num % target == 0:\n            divisible_sum += num\n    return divisible_sum\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 2):\n    return nums, target\n\nassert f(*g()) == 6\n",
        "idx_generation": 470,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that sums up to the target value, considering that each number can only be used once.\n\n    Sample Input:\n    [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 180\n\n    Sample Output:\n    True\n    \"\"\"\n    def find_combination(start, curr_sum):\n        if curr_sum == target:\n            return True\n        if curr_sum > target or start == len(nums):\n            return False\n        for i in range(start, len(nums)):\n            if find_combination(i + 1, curr_sum + nums[i]):\n                return True\n        return False\n\n    return find_combination(0, 0)\n\ndef g():\n    return ([10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 180)\n\nassert f(*g()) == True\n",
        "idx_generation": 158,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n",
        "idx_generation": 444,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string s, determine if it is a palindrome.\n\n    Sample Input:\n    s = \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s: str = \"racecar\"):\n    return s\n\nassert f(g())\n\n",
        "idx_generation": 474,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int, replacement: int) -> List[int]:\n    \"\"\"\n    Given a list of integers, a target number, and a replacement number, return a new list with all occurrences of the target number replaced by the replacement number.\n\n    Example:\n    arr = [1, 2, 3, 4, 2, 5]\n    target = 2\n    replacement = 0\n    output: [1, 0, 3, 4, 0, 5]\n    \"\"\"\n    return [replacement if num == target else num for num in arr]\n\ndef g():\n    return [1, 2, 3, 4, 2, 5], 2, 0\n\nassert f(*g()) == [1, 0, 3, 4, 0, 5]\n",
        "idx_generation": 490,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    n = rows\n    magic_sum = n * (n**2 + 1) // 2\n    # Check rows\n    for i in range(n):\n        if sum(matrix[i]) != magic_sum:\n            return False\n    # Check columns\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != magic_sum:\n            return False\n    # Check diagonals\n    diag_sum1 = sum(matrix[i][i] for i in range(n))\n    if diag_sum1 != magic_sum:\n        return False\n    diag_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    if diag_sum2 != magic_sum:\n        return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a magic square of the given size\n    \"\"\"\n    matrix = [[0 for _ in range(size)] for _ in range(size)]\n    row = size - 1\n    col = size // 2\n    for num in range(1, size**2 + 1):\n        matrix[row][col] = num\n        row = (row + 1) % size\n        col = (col + 1) % size\n        if matrix[row][col] != 0:\n            row = (row - 1) % size\n            col = (col - 1) % size\n            row = (row - 1) % size\n    return matrix\n\nassert f(g()) == True\n\n",
        "idx_generation": 383,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"\n    Check if the sum of the digits of 3^n is equal to the given digit s.\n    \"\"\"\n    digits_sum = sum(int(digit) for digit in str(3 ** n))\n    return digits_sum == int(s)\n\ndef g(n = 3):\n    return (\"2\" if n == 0 else \"3\" if n == 1 else \"9\")\n\nassert f(g()) == True\n",
        "idx_generation": 357,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Find the number of times the target number appears in the list.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num == target:\n            count += 1\n    return count\n\ndef g(nums=[1, 2, 2, 3, 2, 4, 2], target=2):\n    return (nums, target)\n\nassert f(*g()) == 4\n",
        "idx_generation": 124,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k: int = 5) -> bool:\n    \"\"\"\n    Check if there exists a subarray of length k in the given array, such that the product of its elements is divisible by k.\n    \"\"\"\n    for i in range(len(arr) - k + 1):\n        subarr = arr[i:i+k]\n        subarr_product = 1\n        for num in subarr:\n            subarr_product *= num\n        if subarr_product % k == 0:\n            return True\n    return False\n\ndef g(k: int = 5):\n    return [k] * k\n\nassert f(g()) == True\n",
        "idx_generation": 304,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, k: int) -> bool:\n    \"\"\"\n    Find if there exists a substring of length k in the given string s which contains\n    all unique characters.\n    \"\"\"\n    for i in range(len(s) - k + 1):\n        if len(set(s[i:i+k])) == k:\n            return True\n    return False\n\ndef g(s=\"abcabc\", k=3):\n    return s\n\nassert f(g(), k=3) == True\n",
        "idx_generation": 29,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that sum up to the target value.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n    output: True\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 7) == True\n\n",
        "idx_generation": 430,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], n=6) -> bool:\n    \"\"\"Check if there exists a subsequence of length n in the list that is strictly decreasing\"\"\"\n    for i in range(len(nums)-n+1):\n        subsequence = nums[i:i+n]\n        if all(subsequence[j] > subsequence[j+1] for j in range(n-1)):\n            return True\n    return False\n\ndef g(n = 6):\n    return [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n\nassert f(g()) == True\n\n",
        "idx_generation": 365,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\n\ndef f(k: int, s: str, lst: List[str]) -> bool:\n    \"\"\"\n    Check if there is a substring in the list lst of length k that is an anagram of the string s.\n\n    Sample input:\n    k = 3\n    s = \"cat\"\n    lst = [\"act\", \"dog\", \"tac\", \"rat\"]\n\n    Sample output:\n    True\n\n    Explanation: The substring \"tac\" is an anagram of \"cat\" and it appears in the list.\n    \"\"\"\n    assert k > 0, 'Hint: k should be a positive integer.'\n    assert len(s) > 0, 'Hint: The string s should not be empty.'\n    assert all(len(x) == len(s) for x in lst), 'Hint: All strings in the list should have the same length as s.'\n    return any(sorted(x) == sorted(s) for x in lst)\n\ndef g(k=3, s=\"cat\", lst=[\"act\", \"dog\", \"tac\", \"rat\"]):\n    return k, s, lst\n\nassert f(*g()) == True\n\n\n",
        "idx_generation": 111,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n\n    A magic square is a square matrix where the sum of each row, each column, and both diagonals are equal.\n\n    Sample Input:\n    matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])  # Target sum for rows, columns, and diagonals\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for col in np.transpose(matrix):\n        if sum(col) != target_sum:\n            return False\n\n    # Check diagonal from top-left to bottom-right\n    diagonal1 = [matrix[i][i] for i in range(n)]\n    if sum(diagonal1) != target_sum:\n        return False\n\n    # Check diagonal from top-right to bottom-left\n    diagonal2 = [matrix[i][n-i-1] for i in range(n)]\n    if sum(diagonal2) != target_sum:\n        return False\n    \n    return True\n\ndef g(matrix: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix\n\nassert f(g()) == True\n",
        "idx_generation": 467,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target value, find two numbers in the list that add up to the target.\n    Return the indices of the two numbers.\n\n    Example:\n    nums = [2, 7, 11, 15]\n    target = 9\n    output: [0, 1]\n    \"\"\"\n    num_dict = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_dict:\n            return [num_dict[complement], i]\n        num_dict[num] = i\n    return []\n\ndef g():\n    return [2, 7, 11, 15], 9\n\nassert f(*g()) == [0, 1]\n",
        "idx_generation": 272,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list whose sum is equal to the target value.\n    Return True if such a subarray exists, False otherwise.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if prefix_sum[j] - prefix_sum[i] == target:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return arr, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 257,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, n: int = 5) -> bool:\n    \"\"\"Check if a string contains exactly n vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = sum([1 for char in s if char.lower() in vowels])\n    return count == n\ndef g(s: str = \"hello world\"):\n    return s\nassert f(g()) == False\n\n",
        "idx_generation": 184,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target value.\"\"\"\n    return any((num_list[i] + num_list[j] == target for i in range(len(num_list)) for j in range(i+1, len(num_list))))\n\ndef g():\n    num_list = [1, 3, 5, 7, 9]\n    target = 10\n    return num_list, target\n\nassert f(*g()) == True\n",
        "idx_generation": 236,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum != target_sum:\n            return False\n\n    # Check diagonals\n    diagonal_sum_1 = 0\n    diagonal_sum_2 = 0\n    for i in range(n):\n        diagonal_sum_1 += matrix[i][i]\n        diagonal_sum_2 += matrix[i][n-1-i]\n    if diagonal_sum_1 != target_sum or diagonal_sum_2 != target_sum:\n        return False\n\n    return True\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g()) == False\n\n",
        "idx_generation": 270,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(n: int) -> int:\n    \"\"\"\n    Find the sum of all the multiples of 3 or 5 below a given number n.\n\n    Sample Input:\n    n = 10\n\n    Sample Output:\n    23\n\n    Explanation:\n    The multiples of 3 or 5 below 10 are: 3, 5, 6, and 9.\n    Their sum is 3 + 5 + 6 + 9 = 23.\n    \"\"\"\n    total_sum = 0\n    for i in range(n):\n        if i % 3 == 0 or i % 5 == 0:\n            total_sum += i\n    return total_sum\n\ndef g(n: int = 10):\n    return n\n\nassert f(g()) == 23\n\n",
        "idx_generation": 384,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target=7) -> bool:\n    \"\"\"\n    Check if there are two numbers in the list that multiply to the target value\n    \"\"\"\n    num_elements = len(nums)\n    for i in range(num_elements):\n        for j in range(i + 1, num_elements):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g()) == True\n",
        "idx_generation": 189,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is sorted in non-decreasing order.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    output: True\n    \"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n\n",
        "idx_generation": 471,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that sums up to the target value, considering that each number can be used multiple times.\n\n    Sample Input:\n    [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 250\n\n    Sample Output:\n    True\n    \"\"\"\n    def find_combination(start, curr_sum):\n        if curr_sum == target:\n            return True\n        if curr_sum > target or start == len(nums):\n            return False\n        for i in range(start, len(nums)):\n            if find_combination(i, curr_sum + nums[i]):\n                return True\n        return False\n\n    return find_combination(0, 0)\n\ndef g():\n    return ([10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 250)\n\nassert f(*g()) == True\n",
        "idx_generation": 158,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a 2D grid of integers, rotate the grid by 90 degrees clockwise.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    \"\"\"\n    n = len(arr)\n    rotated_arr = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            rotated_arr[j][n - i - 1] = arr[i][j]\n    return rotated_arr\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n",
        "idx_generation": 444,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g(s=\"racecar\"):\n    return s\n\nassert f(g()) == True\n",
        "idx_generation": 474,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, return the sum of the diagonal elements of the matrix.\n    \"\"\"\n    diagonal_sum = 0\n    \n    for i in range(len(matrix)):\n        diagonal_sum += matrix[i][i]\n        \n    return diagonal_sum\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 15\n\n",
        "idx_generation": 383,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(inds: List[int], vecs=[169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]) -> bool:\n    \"\"\"\n    Parity learning: Given binary vectors in a subspace, find the secret set S of indices such that:\n    $\\\\sum_{i \\\\in S} x_i = 1 (mod 2)$\n    \"\"\"\n    return sum((sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs))\n\ndef g(vecs = [169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]\nassert f(g()) == 17\n\n",
        "idx_generation": 362,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, k: int) -> bool:\n    \"\"\"\n    Given a string s, check if there are k consecutive repeating characters in s.\n    \"\"\"\n    count = 1\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            count += 1\n            if count == k:\n                return True\n        else:\n            count = 1\n    return False\n\ndef g():\n    return \"aabbbbccccddddddeee\", 4\n\nassert f(*g()) == True\n\n",
        "idx_generation": 124,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[List[int]]:\n    \"\"\"\n    Given a list of integers and a target value, return all unique combinations of numbers that add up to the target.\n\n    Sample input:\n    nums = [2, 3, 6, 7]\n    target = 7\n\n    Sample output:\n    [[2, 2, 3], [7]]\n\n    Explanation:\n    The unique combinations that add up to 7 are [2, 2, 3] and [7].\n    \"\"\"\n    def backtrack(start, curr_sum, combination):\n        if curr_sum == target:\n            return [combination]\n        if curr_sum > target or start == len(nums):\n            return []\n        \n        result = []\n        for i in range(start, len(nums)):\n            result += backtrack(i, curr_sum + nums[i], combination + [nums[i]])\n        \n        return result\n    \n    nums.sort()\n    return backtrack(0, 0, [])\n\ndef g(nums: List[int] = [2, 3, 6, 7], target: int = 7):\n    return (nums, target)\n\nassert f(*g()) == [[2, 2, 3], [7]]\n",
        "idx_generation": 305,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(words: List[str], length=5) -> bool:\n    \"\"\"Check if there is a word in the list that has the given length and contains at least one vowel\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return any(len(word) == length and any(vowel in word for vowel in vowels) for word in words)\ndef g(length=5):\n    return ['apple', 'banana', 'cherry', 'peach']\nassert f(g()) == True\n",
        "idx_generation": 37,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, determine if there exist three numbers in the list whose sum is equal to the target value.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            curr_sum = nums[i] + nums[left] + nums[right]\n            if curr_sum == target:\n                return True\n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 9\n\nassert f(*g()) == True\n\n",
        "idx_generation": 431,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are any two numbers that add up to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums.sort()\n    left = 0\n    right = len(nums) - 1\n    while left < right:\n        current_sum = nums[left] + nums[right]\n        if current_sum == target:\n            return True\n        elif current_sum < target:\n            left += 1\n        else:\n            right -= 1\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums, 9\n\nassert f(*g()) == True\n",
        "idx_generation": 370,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import *\n\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g()) == True\n",
        "idx_generation": 118,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Find if there are three numbers in the given list that sum up to the target.\n    \"\"\"\n    combinations = list(itertools.combinations(nums, 3))\n    \n    for combo in combinations:\n        if sum(combo) == target:\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g(), 15) == True\n\n",
        "idx_generation": 358,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that sums up to the target value.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 8):\n    return nums, target\n\nassert f(*g()) == True\n",
        "idx_generation": 258,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(string: str, char_count: Dict[str, int]) -> bool:\n    \"\"\"\n    Check if the given string contains all the characters present in the char_count dictionary\n    \"\"\"\n    for char in char_count:\n        if char not in string or string.count(char) < char_count[char]:\n            return False\n    return True\n\ndef g() -> Tuple[str, Dict[str, int]]:\n    return (\"abracadabra\", {\"a\": 5, \"b\": 2, \"c\": 1})\n\nassert f(*g()) == True\n\n",
        "idx_generation": 186,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a sparse matrix\n    \"\"\"\n    n = len(matrix)\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != 0:\n                count += 1\n    return count <= n\n\ndef g(size=3):\n    \"\"\"\n    Generate a sparse matrix of the given size\n    \"\"\"\n    sparse_matrix = [[0 for _ in range(size)] for _ in range(size)]\n    for i in range(size):\n        for j in range(size):\n            if i == j:\n                sparse_matrix[i][j] = i + j\n    return sparse_matrix\n\nassert f(g()) == True\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum != target_sum:\n            return False\n\n    # Check diagonals\n    diagonal_sum_1 = 0\n    diagonal_sum_2 = 0\n    for i in range(n):\n        diagonal_sum_1 += matrix[i][i]\n        diagonal_sum_2 += matrix[i][n-1-i]\n    if diagonal_sum_1 != target_sum or diagonal_sum_2 != target_sum:\n        return False\n\n    return True\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 9], [7, 8, 6]]\n    return matrix\n\nassert f(g()) == False\n\n",
        "idx_generation": 270,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the even numbers in the original list.\n    \"\"\"\n    return [num for num in nums if num % 2 == 0]\n\ndef g():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return (nums,)\n\nassert f(*g()) == [2, 4, 6, 8, 10]\n",
        "idx_generation": 402,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers and an integer k, find if there exists two distinct indices i and j in the list such that nums[i] = nums[j] and abs(i - j) <= k.\n\n    Sample Input:\n    nums = [1, 2, 3, 1]\n    k = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    num_dict = {}\n    for i, num in enumerate(nums):\n        if num in num_dict and abs(i - num_dict[num]) <= k:\n            return True\n        num_dict[num] = i\n    return False\n\ndef g():\n    return [1, 2, 3, 1], 3\n\nassert f(*g()) == True\n",
        "idx_generation": 191,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target: int) -> bool:\n    \"\"\"\n    Given a number n and a target, check if the number n is divisible by 2 and 3, and the sum of its digits is equal to the target value.\n    If both conditions are met, return True. Otherwise, return False.\n    \"\"\"\n    if target == 0:\n        return False\n    \n    return n % 2 == 0 and n % 3 == 0 and sum([int(i) for i in str(n)]) == target\n\ndef g():\n    return 36, 9\n\nassert f(*g()) == True\n\n",
        "idx_generation": 472,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that sums up to the target value.\n    \"\"\"\n    def find_combination(start, curr_sum):\n        if curr_sum == target:\n            return True\n        if curr_sum > target or start == len(nums):\n            return False\n        if find_combination(start + 1, curr_sum + nums[start]):\n            return True\n        if find_combination(start + 1, curr_sum):\n            return True\n        return False\n\n    return find_combination(0, 0)\n\ndef g(nums: List[int], target: int):\n    \"\"\"\n    This solution returns the input list and target value as is.\n    \"\"\"\n    return nums, target\n\nassert f(*g([10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 150))\n",
        "idx_generation": 159,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the sum of the first column is equal to the sum of the last row.\n\n    Sample Input:\n    arr = [[2, 4, 6], [8, 10, 12], [14, 16, 18]]\n\n    Sample Output:\n    False\n    \"\"\"\n    first_column_sum = sum(row[0] for row in arr)\n    last_row_sum = sum(arr[-1])\n    return first_column_sum == last_row_sum\n\ndef g(arr: List[List[int]] = [[2, 4, 6], [8, 10, 12], [14, 16, 18]]):\n    return arr\n\nassert f(g()) == False\n",
        "idx_generation": 456,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(s: str) -> str:\n    \"\"\"\n    Given a string, reverse the order of words in the string.\n\n    Sample Input:\n    \"Hello World\"\n\n    Sample Output:\n    \"World Hello\"\n    \"\"\"\n    words = s.split()\n    reversed_words = \" \".join(reversed(words))\n    return reversed_words\n\ndef g(s: str = \"Hello World\"):\n    return s\n\nassert f(g()) == \"World Hello\"\n",
        "idx_generation": 475,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=10, c=15) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])\ndef g(a=5, b=10, c=15):\n    return -a + sum([b * i for i in range(c)])\nassert f(g())\n",
        "idx_generation": 384,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 3, 5, 7, 11], target=2310) -> bool:\n    \"\"\"Check if the target number is divisible by all the numbers in the list.\"\"\"\n    return target % n == 0 and all((target % i == 0 for i in nums))\n\ndef g(nums=[2, 3, 5, 7, 11], target=2310):\n    ans = target\n    for i in nums:\n        while ans % i != 0:\n            ans += target\n    return ans\n\nassert f(g())\n",
        "idx_generation": 403,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, nums: List[int], k=0) -> bool:\n    \"\"\"\n    Given a list of integers and an integer k, determine if there are exactly n numbers in the list that are strictly smaller than the kth number.\n    \"\"\"\n    assert len(nums) > k, 'Hint: List should have at least k+1 numbers'\n    return sum(num < nums[k] for num in nums) == n\n\ndef g(nums: List[int], k=0):\n    threshold = min(nums[k], 0)\n    return sum(num < threshold for num in nums)\n\nassert f(g([1, 2, 3, 4, 5, 6], 0), [1, 2, 3, 4, 5, 6], 0) == True\n",
        "idx_generation": 130,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n: int, target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, determine if there exists a combination of n numbers in the list that sums up to the target value.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    n = 3\n    target = 6\n    output: True\n    \"\"\"\n    def find_combination(curr_sum, count):\n        if count == n and curr_sum == target:\n            return True\n        if count > n or curr_sum > target:\n            return False\n        for i in range(len(nums)):\n            if find_combination(curr_sum + nums[i], count + 1):\n                return True\n        return False\n\n    return find_combination(0, 0)\n\n\ndef g(nums = [1, 2, 3, 4, 5], n = 3, target = 6):\n    return (nums, n, target)\n\n\nassert f(*g()) == True\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(lst: List[int], target_count=3) -> bool:\n    \"\"\"\n    Check if there exists a sublist of length target_count in the list that has unique elements.\n    \"\"\"\n    for i in range(len(lst)-target_count+1):\n        sublist = lst[i:i+target_count]\n        if len(set(sublist)) == target_count:\n            return True\n    return False\n\ndef g(target_count=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g()) == True\n",
        "idx_generation": 40,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it is a palindrome list.\n    A palindrome list is a list that reads the same forwards and backwards.\n\n    Example:\n    nums = [1, 2, 3, 2, 1]\n    output: True\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g()) == True\n\n",
        "idx_generation": 431,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, divisor: int) -> bool:\n    \"\"\"Check if the given number is divisible by the given divisor\"\"\"\n    return num % divisor == 0\n\ndef g(num=100, divisor=5):\n    return num\n\nassert f(g(), g(20, 4)) == True\n\n",
        "idx_generation": 378,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, nums=[3, 5, 7, 9, 11, 13], k=4) -> bool:\n    \"\"\"\n    Given a list of non-decreasing integers and given an integer k, determine if there are exactly n numbers in the list\n    that are strictly smaller than the kth number.\n    \"\"\"\n    assert all((nums[i] <= nums[i + 1] for i in range(len(nums) - 1))), 'Hint: nums are non-decreasing'\n    return sum(x < nums[k] for x in nums) == n\ndef g(nums=[3, 5, 7, 9, 11, 13], k=4):\n    threshold = min(nums[k], 100)\n    return sum(x < threshold for x in nums)\nassert f(g()) == True\n",
        "idx_generation": 131,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target: int = 10) -> int:\n    \"\"\"\n    Given a list of integers, find the number of pairs that add up to the target.\n    Return the count of such pairs.\n    \"\"\"\n    nums_set = set(nums)\n    count = 0\n    for num in nums:\n        complement = target - num\n        if complement in nums_set and complement != num:\n            count += 1\n    return count\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums\n\nassert f(g()) == 2\n\n",
        "idx_generation": 385,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> List[int]:\n    \"\"\"Find all prime numbers in the given list and return them in ascending order.\"\"\"\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return sorted(num for num in lst if is_prime(num))\n\ndef g():\n    return [2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == [2, 3, 5, 7]\n",
        "idx_generation": 261,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"Return a list of numbers that are greater than the target\"\"\"\n    return [num for num in nums if num > target]\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 0):\n    return (nums, target)\n\nassert f(*g()) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
        "idx_generation": 211,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains any duplicate elements.\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == False\n",
        "idx_generation": 252,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a grid where the sum of each row, each column, and both diagonals are the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    target_sum = sum(arr[0])\n    for i in range(n):\n        if sum(arr[i]) != target_sum:\n            return False\n        if sum(arr[j][i] for j in range(n)) != target_sum:\n            return False\n    if sum(arr[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(arr[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return arr\n\nassert f(g()) == True\n\n",
        "idx_generation": 273,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose product is equal to 20.\n    \"\"\"\n\n    num_set = set()\n    for num in nums:\n        if num != 0 and 20 % num == 0 and 20 // num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return [1, 4, 5, 2, 10]\n\nassert f(g()) == True\n\n",
        "idx_generation": 404,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sum of each row, each column, and each diagonal is the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    target_sum = sum(arr[0])\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        if row_sum != target_sum:\n            return False\n    for j in range(len(arr[0])):\n        col_sum = sum(arr[i][j] for i in range(len(arr)))\n        if col_sum != target_sum:\n            return False\n    diagonal_sum = sum(arr[i][i] for i in range(len(arr)))\n    if diagonal_sum != target_sum:\n        return False\n    reverse_diagonal_sum = sum(arr[i][len(arr) - i - 1] for i in range(len(arr)))\n    if reverse_diagonal_sum != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 194,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(numbers: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of numbers and a target number, return the number of pairs in the list whose sum is equal to the target.\n\n    Sample Input:\n    numbers = [1, 2, 3, 4, 5]\n    target = 6\n\n    Sample Output:\n    2\n    \"\"\"\n    count = 0\n    seen = set()\n    for num in numbers:\n        complement = target - num\n        if complement in seen:\n            count += 1\n        seen.add(num)\n    return count\n\ndef g(numbers: List[int] = [1, 2, 3, 4, 5], target: int = 6):\n    return (numbers, target)\n\nassert f(*g()) == 2\n\n",
        "idx_generation": 472,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that sums up to the target value.\n    \"\"\"\n    def find_combination(start, curr_sum):\n        if curr_sum == target:\n            return True\n        if curr_sum > target or start == len(nums):\n            return False\n        if find_combination(start + 1, curr_sum + nums[start]):\n            return True\n        if find_combination(start + 1, curr_sum):\n            return True\n        return False\n\n    return find_combination(0, 0)\n\ndef g(nums: List[int], target: int):\n    \"\"\"\n    This solution returns the input list with all negative numbers replaced with their absolute values and the target value as is.\n    \"\"\"\n    return [abs(num) for num in nums], target\n\nassert f(*g([10, -20, 30, -40, 50, -60, 70, -80, 90, 100], 100))\n",
        "idx_generation": 159,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if there is a row or column where all the numbers are equal.\n\n    Sample Input:\n    arr = [[2, 4, 6], [8, 10, 12], [14, 16, 18]]\n\n    Sample Output:\n    False\n    \"\"\"\n    for row in arr:\n        if len(set(row)) == 1:\n            return True\n    for column in zip(*arr):\n        if len(set(column)) == 1:\n            return True\n    return False\n\ndef g(arr: List[List[int]] = [[2, 4, 6], [8, 10, 12], [14, 16, 18]]):\n    return arr\n\nassert f(g()) == False\n",
        "idx_generation": 456,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n    \"\"\"\n    return s == s[::-1]\ndef g():\n    s = \"racecar\"\n    return s\nassert f(g()) == True\n\n",
        "idx_generation": 478,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=4, c=6) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])\ndef g(a=2, b=4, c=6):\n    return -a + sum([b * i for i in range(c)])\nassert f(g())\n",
        "idx_generation": 384,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=100, b=500, c=1000) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])\ndef g(a=100, b=500, c=1000):\n    return -a + sum([b * i for i in range(c)])\nassert f(g())\n\n",
        "idx_generation": 425,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0, count=2) -> bool:\n    \"\"\"Find if there are count numbers that add up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(nums, count))\n\ndef g(target=0, count=2):\n    return [-1, -2, 0, 2, 4, 6, 8, 10, 12, 14]\n\nassert f(g()) == True\n",
        "idx_generation": 144,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n: int, target: int) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if there exists a combination of n numbers in the list that sums up to the target value.\"\"\"\n    def find_combination(curr_sum, count):\n        if count == n and curr_sum == target:\n            return True\n        if count > n or curr_sum > target:\n            return False\n        for i in range(len(nums)):\n            if find_combination(curr_sum + nums[i], count + 1):\n                return True\n        return False\n\n    return find_combination(0, 0)\n\n\ndef g(nums = [1, 2, 3, 4, 5], n = 3, target = 6):\n    return (nums, n, target)\n\n\nassert f(*g()) == True\n\n",
        "idx_generation": 321,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, n=10) -> bool:\n    \"\"\"Check if the string s has n consecutive vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return any(all(s[i+j] in vowels for j in range(n)) for i in range(len(s)-n+1))\ndef g(n = 10):\n    return 'a' + 'e' * (n-2) + 'i' + 'o' + 'u'\nassert f(g()) == True\n",
        "idx_generation": 40,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the maximum product of any three numbers in the given list.\n    \"\"\"\n    nums.sort()\n    return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])\n\ndef g():\n    return [1, -2, 3, -4, 5]\n\nassert f(g()) == 40\n\n",
        "idx_generation": 432,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subsequence of the list whose sum is less than the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return any(dp[n][j] for j in range(target + 1) if j < target)\n\ndef g(nums=[2, 4, 6, 8], target=10):\n    return nums, target\n\nassert f(*g()) == True\n",
        "idx_generation": 393,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"\n    Given two strings s1 and s2, return True if they are anagrams of each other, otherwise return False.\n\n    Sample input:\n    s1 = \"listen\"\n    s2 = \"silent\"\n\n    Sample output:\n    True\n\n    Explanation: The strings \"listen\" and \"silent\" are anagrams of each other.\n    \"\"\"\n    return sorted(s1) == sorted(s2)\n\ndef g(s1=\"listen\", s2=\"silent\"):\n    return s1, s2\n\nassert f(*g()) == True\n",
        "idx_generation": 138,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target value, check if there exists a triplet of numbers in the list\n    that adds up to the target value. If such a triplet exists, return True. Otherwise, return False.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n\n    return False\n\ndef g(target=10):\n    \"\"\"Generate a list of numbers.\"\"\"\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 10) == True\n\n",
        "idx_generation": 393,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list whose sum is equal to the length of the array.\n    Return True if such a subarray exists, False otherwise.\n    \"\"\"\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if prefix_sum[j] - prefix_sum[i] == n:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g()) == True\n\n",
        "idx_generation": 262,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a palindrome.\n\n    Sample Input:\n    nums = [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums: List[int] = [1, 2, 3, 2, 1]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 233,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose sum is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in x:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(x: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return x, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 254,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list whose sum is less than or equal to the target value.\n    Return True if such a subarray exists, False otherwise.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 10\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if prefix_sum[j] - prefix_sum[i] <= target:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 10):\n    return arr, target\n\nassert f(*g()) == True\n",
        "idx_generation": 280,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target: int) -> bool:\n    \"\"\"\n    Given a number n, check if the sum of the digits of n is equal to the target number.\n    If the sum is equal to the target, return True. Otherwise, return False.\n    \"\"\"\n    digit_sum = sum([int(digit) for digit in str(n)])\n    return digit_sum == target\n\ndef g(n: int = 12345):\n    return n\n\nassert f(g(), 15) == True\n",
        "idx_generation": 406,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains any duplicate elements.\n\n    Sample Input:\n    nums = [1, 2, 3, 2]\n\n    Sample Output:\n    True\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g(nums: List[int] = [1, 2, 3, 2]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 200,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], n: int = 1) -> int:\n    \"\"\"\n    Given a list of integers and a target number n, count the number of occurrences of n in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num == n:\n            count += 1\n    return count\n\ndef g(n: int = 1):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g()) == 1\n\n\n",
        "idx_generation": 473,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=50) -> bool:\n    \"\"\"\n    Given a list of numbers, find a subset of numbers that sums up to the target_sum.\n    Return True if such a subset exists, False otherwise.\n    \"\"\"\n    def subset_sum(numbers, target_sum, memo={}):\n        if target_sum in memo:\n            return memo[target_sum]\n        if target_sum == 0:\n            return True\n        if target_sum < 0 or not numbers:\n            return False\n        include = subset_sum(numbers[1:], target_sum - numbers[0], memo)\n        exclude = subset_sum(numbers[1:], target_sum, memo)\n        memo[target_sum] = include or exclude\n        return memo[target_sum]\n\n    return subset_sum(numbers, target_sum)\n\ndef g(numbers=[5, 10, 15, 20, 25]):\n    return (numbers,)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 159,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a checkerboard pattern.\n    A checkerboard pattern is a grid where the elements form a pattern that alternates between odd and even numbers.\n\n    Sample Input:\n    arr = [[1, 2, 1], [2, 1, 2], [1, 2, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(n):\n        for j in range(m):\n            if (i + j) % 2 == 0:\n                if arr[i][j] % 2 != 1:\n                    return False\n            else:\n                if arr[i][j] % 2 != 0:\n                    return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 1], [2, 1, 2], [1, 2, 1]]):\n    return arr\n\nassert f(g()) == True\n\n",
        "idx_generation": 481,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['abc', 'def', 'ghi', 'jkl']) -> bool:\n    \"\"\"\n    Check if the given string contains all the substrings in any order, ignoring case.\n    \"\"\"\n    s = s.lower()\n    sub_count = {sub.lower(): 0 for sub in substrings}\n    for sub in substrings:\n        if sub.lower() in s:\n            sub_count[sub.lower()] += 1\n    return all(count > 0 for count in sub_count.values())\n\ndef g(substrings=['ABC', 'DEF', 'GHI', 'JKL']):\n    return ''.join(substrings)\n\nassert f(g()) == True\n\n",
        "idx_generation": 479,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"Return the sum of each row in a given matrix.\"\"\"\n    row_sums = []\n    for row in matrix:\n        row_sums.append(sum(row))\n    return row_sums\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == [6, 15, 24]\n\n",
        "idx_generation": 384,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"Check if a given number can be expressed as the sum of k primes\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n + 1) if is_prime(i)]\n    dp = [False] * (n + 1)\n    dp[0] = True\n    for i in range(k):\n        for j in range(n + 1):\n            if primes[i] <= j and dp[j - primes[i]]:\n                dp[j] = True\n    return dp[n]\n\ndef g():\n    return (10,)\n\nassert f(*g())\n",
        "idx_generation": 459,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0, count=3) -> bool:\n    \"\"\"\n    Find if there are count numbers that add up to the target.\n    \"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(nums, count))\n\ndef g(target=0, count=3):\n    return [-1, -2, 3, 4, 5, 6, 7, 8]\n\nassert f(g()) == True\n",
        "idx_generation": 148,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n: int, target: int) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if there exists a combination of n numbers in the list that sums up to the target value.\"\"\"\n    def find_combination(curr_sum, count):\n        if count == n and curr_sum == target:\n            return True\n        if count > n or curr_sum > target:\n            return False\n        for i in range(len(nums)):\n            if find_combination(curr_sum + nums[i], count + 1):\n                return True\n        return False\n\n    return find_combination(0, 0)\n\n\ndef g(nums = [1, 2, 3, 4, 5], n = 2, target = 6):\n    return (nums, n, target)\n\n\nassert f(*g()) == True\n\n",
        "idx_generation": 321,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[str], target_length=5) -> bool:\n    \"\"\"\n    Find a list of strings where the length of every string is equal to the target_length.\n    \"\"\"\n    return all([len(s) == target_length for s in arr])\n\ndef g(target_length = 5):\n    from itertools import product\n    import string\n\n    arr = []\n    for p in product(string.ascii_lowercase, repeat=target_length):\n        arr.append(''.join(p))\n        if len(arr) >= 10:\n            return arr\n\nassert f(g()) == True\n",
        "idx_generation": 45,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the sum of all the even numbers.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    output: 6 (2 + 4)\n    \"\"\"\n    return sum(num for num in nums if num % 2 == 0)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == 6\n",
        "idx_generation": 434,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False\n\ndef g(nums: List[int] = [2, 4, 6, 8, 10]):\n    \"\"\"\n    This solution returns the input list after sorting it.\n    \"\"\"\n    nums.sort()\n    return nums\n\nassert f(g(), 12) == True\n\n",
        "idx_generation": 397,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if all numbers in the list are divisible by the target.\"\"\"\n    return all((num % target == 0 for num in nums))\n\ndef g(nums=[12, 24, 36, 48, 60], target=6):\n    return (nums, target)\n\nassert f(*g()) == True\n",
        "idx_generation": 139,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Find the number of times the target value appears in the list.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num == target:\n            count += 1\n    return count\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list after sorting it in ascending order.\n    \"\"\"\n    nums.sort()\n    return nums\n\nassert f(g([1, 2, 3, 4, 5, 5, 5, 6, 7]), 5) == 3\n",
        "idx_generation": 394,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    Find all pairs of numbers in the list that sum up to the target value.\n    \"\"\"\n    pairs = []\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                pairs.append((arr[i], arr[j]))\n\n    return pairs\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7], target: int = 8):\n    return arr, target\n\nassert f(*g()) == [(1, 7), (2, 6), (3, 5)]\n",
        "idx_generation": 266,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"\n    Given a string s and a target string, check if the target string can be formed by rearranging the characters of s.\n\n    Sample Input:\n    s = \"listen\"\n    target = \"silent\"\n\n    Sample Output:\n    True\n    \"\"\"\n    if len(s) != len(target):\n        return False\n    count_s = {}\n    count_target = {}\n    for char in s:\n        count_s[char] = count_s.get(char, 0) + 1\n    for char in target:\n        count_target[char] = count_target.get(char, 0) + 1\n    return count_s == count_target\n\ndef g():\n    s = \"listen\"\n    target = \"silent\"\n    return (s, target)\n\nassert f(*g()) == True\n",
        "idx_generation": 242,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import *\n\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there is a pair of numbers in the list lst that add up to the target.\n\n    Sample input:\n    lst = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample output:\n    True\n\n    Explanation: The pair of numbers (4, 5) add up to 9 and they are present in the list.\n    \"\"\"\n    assert len(lst) > 1, 'Hint: The list should have at least 2 numbers.'\n    return any(i + j == target for i in lst for j in lst if i != j)\n\ndef g(lst = [1, 2, 3, 4, 5], target = 9):\n    return lst, target\n\nassert f(*g()) == True\n\n\n",
        "idx_generation": 255,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Calculate the sum of all prime numbers in the given list of integers.\n\n    Sample Input:\n    [2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Sample Output:\n    17\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return sum(num for num in nums if is_prime(num))\n\ndef g():\n    return [2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 17\n",
        "idx_generation": 301,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Calculate the sum of all even numbers in the given list of integers.\n\n    Sample Input:\n    [1, 2, 3, 4, 5, 6]\n\n    Sample Output:\n    12\n    \"\"\"\n    return sum([x for x in nums if x % 2 == 0])\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6]):\n    return nums\n\nassert f(g()) == 12\n",
        "idx_generation": 408,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, return True if the target number exists in the list,\n    otherwise return False.\n\n    Sample input:\n    numbers = [1, 2, 3, 4, 5]\n    target = 6\n\n    Sample output:\n    False\n\n    Explanation: The target number 6 does not exist in the list.\n    \"\"\"\n    return target in numbers\n\ndef g(numbers=[1, 2, 3, 4, 5], target=6):\n    return numbers, target\n\nassert f(*g()) == False\n\n",
        "idx_generation": 201,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target integer, determine whether any two numbers from the list add up to the target.\n\n    Sample Input:\n    numbers = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    complements = set()\n    for num in numbers:\n        if num in complements:\n            return True\n        complements.add(target - num)\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 9)\n\nassert f(*g())\n",
        "idx_generation": 473,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=1000) -> bool:\n    \"\"\"\n    Given a list of numbers, find a subset of numbers that sums up to the target_sum.\n    Return True if such a subset exists, False otherwise.\n    \"\"\"\n    def subset_sum(numbers, target_sum, memo={}):\n        if target_sum in memo:\n            return memo[target_sum]\n        if target_sum == 0:\n            return True\n        if target_sum < 0 or not numbers:\n            return False\n        include = subset_sum(numbers[1:], target_sum - numbers[0], memo)\n        exclude = subset_sum(numbers[1:], target_sum, memo)\n        memo[target_sum] = include or exclude\n        return memo[target_sum]\n\n    return subset_sum(numbers, target_sum)\n\ndef g(numbers=[100, 200, 300, 400, 500]):\n    return (numbers,)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 159,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a lower triangular matrix.\n    A lower triangular matrix has all elements above the main diagonal equal to zero.\n\n    Sample Input:\n    arr = [[1, 0, 0], [2, 3, 0], [4, 5, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    for i in range(n):\n        for j in range(i + 1, m):\n            if arr[i][j] != 0:\n                return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[1, 0, 0], [2, 3, 0], [4, 5, 6]]):\n    return arr\n\nassert f(g()) == True\n\n",
        "idx_generation": 483,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target: str) -> bool:\n    \"\"\"\n    Given a string and a target, check if the string contains the target as a substring and the length of the string is divisible by the length of the target.\n    If both conditions are met, return True. Otherwise, return False.\n    \"\"\"\n    if target == \"\":\n        return False\n    \n    return target in string and len(string) % len(target) == 0\n\ndef g(string: str = \"abababab\", target: str = \"ab\"):\n    return string, target\n\nassert f(*g()) == True\n",
        "idx_generation": 482,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if all numbers in the list are divisible by the target\"\"\"\n    return all(num % target == 0 for num in nums)\n\ndef g(nums: List[int] = [12, 24, 36, 48, 60], target: int = 6):\n    return (nums, target)\n\nassert f(*g()) == True\n",
        "idx_generation": 492,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"Find if there are k numbers in the given list that sum up to zero.\"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any combination sums up to zero\n    for combo in combinations:\n        if sum(combo) == 0:\n            return True\n\n    return False\n\ndef g(k=3):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, -2, 3, -4, 5, -6]\n\nassert f(g(), k=3) == True\n",
        "idx_generation": 173,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(counts: List[int], target_prob=0.75) -> bool:\n    \"\"\"\n    Suppose a list of m 1's and n -1's are permuted at random.\n    What is the probability that all of the cumulative sums are positive?\n    The goal is to find counts = [m, n] that make the probability of the ballot problem close to target_prob.\n    \"\"\"\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06\ndef g(target_prob = 0.75):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]\nassert f(g())\n",
        "idx_generation": 352,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], target: str) -> bool:\n    \"\"\"\n    Given a list of words, check if the target word is a concatenation of two other words from the list.\n\n    Example:\n    words = [\"apple\", \"banana\", \"pineapple\", \"orange\", \"watermelon\"]\n    target = \"applebanana\"\n    output: True\n    \"\"\"\n    for i in range(len(words)):\n        for j in range(len(words)):\n            if i != j and words[i] + words[j] == target:\n                return True\n    return False\n\ndef g():\n    return [\"apple\", \"banana\", \"pineapple\", \"orange\", \"watermelon\"], \"applebanana\"\n\nassert f(*g()) == True\n",
        "idx_generation": 50,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n    Find all the subsets of the given list that have a sum equal to the target value.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    target = 5\n    \n    Sample output:\n    [[1, 4], [2, 3], [5]]\n    \"\"\"\n    def backtrack(start, path, target):\n        if target == 0:\n            result.append(path)\n            return\n        if target < 0:\n            return\n        for i in range(start, len(nums)):\n            if i > start and nums[i] == nums[i - 1]:\n                continue\n            backtrack(i + 1, path + [nums[i]], target - nums[i])\n    \n    nums.sort()\n    result = []\n    backtrack(0, [], k)\n    return result\n\ndef g() -> Tuple[List[int], int]:\n    return ([1, 2, 3, 4, 5], 5)\n\nassert f(*g()) == [[1, 4], [2, 3], [5]]\n",
        "idx_generation": 436,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of a subarray.\n\n    Sample Input:\n    arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\n    Sample Output:\n    6\n    \"\"\"\n    if not arr:\n        return 0\n\n    max_sum = arr[0]\n    cur_sum = arr[0]\n\n    for i in range(1, len(arr)):\n        cur_sum = max(arr[i], cur_sum + arr[i])\n        max_sum = max(max_sum, cur_sum)\n\n    return max_sum\n\ndef g(arr: List[int] = [-2, 1, -3, 4, -1, 2, 1, -5, 4]):\n    return arr\n\nassert f(g()) == 6\n\n",
        "idx_generation": 423,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given an array nums, write a function to move all 0's to the end of it\n    while maintaining the relative order of the non-zero elements.\n    \"\"\"\n    zero_count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero_count += 1\n        else:\n            nums[i - zero_count] = nums[i]\n    \n    for i in range(len(nums) - zero_count, len(nums)):\n        nums[i] = 0\n    \n    return nums\n\ndef g(nums: List[int] = [0, 1, 0, 3, 12]):\n    return (nums,)\n\nassert f(*g()) == [1, 3, 12, 0, 0]\n",
        "idx_generation": 151,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Find if there exists a subsequence of length k in the given list that is in strictly increasing order.\n    \"\"\"\n\n    # Generate all possible subsequences of length k from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any subsequence is in strictly increasing order\n    for combo in combinations:\n        if sorted(combo) == list(combo):\n            return True\n\n    return False\n\ndef g(k=3):\n    \"\"\"Generate a list of numbers.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), k=3) == True\n\n",
        "idx_generation": 397,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the longest increasing subsequence (not necessarily contiguous)\n    and return the length of that subsequence.\n    \"\"\"\n    if not nums:\n        return 0\n    dp = [1] * len(nums)\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\ndef g():\n    nums = [10, 9, 2, 5, 3, 7, 101, 18]\n    return nums\n\nassert f(g()) == 4\n\n",
        "idx_generation": 269,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[str]) -> bool:\n    \"\"\"\n    Given a list of strings, check if all the strings have the same length.\n\n    Sample Input:\n    arr = [\"hello\", \"world\", \"python\"]\n\n    Sample Output:\n    False\n    \"\"\"\n    return all(len(s) == len(arr[0]) for s in arr)\n\ndef g(arr: List[str] = [\"hello\", \"world\", \"python\"]):\n    return arr\n\nassert f(g()) == False\n\n",
        "idx_generation": 245,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n\n    A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward.\n\n    Sample input:\n    nums = [1, 2, 3, 2, 1]\n\n    Sample output:\n    True\n\n    Explanation: The list is a palindrome as it reads the same forward and backward.\n    \"\"\"\n    reversed_nums = nums[::-1]\n    return nums == reversed_nums\n\ndef g() -> List[int]:\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 257,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the matrix is a magic square.\n\n    A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n\n    Sample Input:\n    [[16, 3, 2, 13], [5, 10, 11, 8], [9, 6, 7, 12], [4, 15, 14, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    size = len(lst)\n    target_sum = size * (size**2 + 1) // 2\n\n    # Check rows\n    for row in lst:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for col in range(size):\n        if sum(lst[row][col] for row in range(size)) != target_sum:\n            return False\n\n    # Check diagonals\n    if sum(lst[i][i] for i in range(size)) != target_sum:\n        return False\n\n    if sum(lst[i][size-i-1] for i in range(size)) != target_sum:\n        return False\n\n    return True\n\ndef g(lst: List[List[int]] = [[16, 3, 2, 13], [5, 10, 11, 8], [9, 6, 7, 12], [4, 15, 14, 1]]):\n    return lst\n\nassert f(g()) == True\n",
        "idx_generation": 308,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> int:\n    \"\"\"\n    Calculate the sum of all the numbers in the given nested list.\n    \"\"\"\n    total_sum = 0\n    for lst in nums:\n        for num in lst:\n            total_sum += num\n    return total_sum\n\ndef g(nums: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums\n\nassert f(g()) == 45\n",
        "idx_generation": 442,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"\n    Given a matrix of integers, determine if the target integer is present in the matrix.\n    \"\"\"\n    return any(target in row for row in matrix)\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == False\n\n",
        "idx_generation": 207,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int) -> int:\n    \"\"\"\n    Given an integer n, find the sum of all the prime numbers less than or equal to n.\n\n    Sample Input:\n    n = 10\n\n    Sample Output:\n    17 (2 + 3 + 5 + 7 = 17)\n    \"\"\"\n    sum_primes = 0\n\n    for num in range(2, n+1):\n        is_prime = True\n\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                is_prime = False\n                break\n\n        if is_prime:\n            sum_primes += num\n\n    return sum_primes\n\ndef g(n: int = 10):\n    return n\n\nassert f(g()) == 17\n\n",
        "idx_generation": 474,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"\n    Given a list of numbers, find a subset of numbers that sums up to the target_sum.\n    Return True if such a subset exists, False otherwise.\n    \"\"\"\n    def subset_sum(numbers, target_sum, memo={}):\n        if target_sum in memo:\n            return memo[target_sum]\n        if target_sum == 0:\n            return True\n        if target_sum < 0 or not numbers:\n            return False\n        include = subset_sum(numbers[1:], target_sum - numbers[0], memo)\n        exclude = subset_sum(numbers[1:], target_sum, memo)\n        memo[target_sum] = include or exclude\n        return memo[target_sum]\n\n    return subset_sum(numbers, target_sum)\n\ndef g(numbers=[15, 25, 35, 45, 55]):\n    return (numbers,)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 159,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a grid where the sum of every row, column, and diagonal is the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    target_sum = sum(arr[0])\n\n    for i in range(1, n):\n        if sum(arr[i]) != target_sum:\n            return False\n\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += arr[i][j]\n        if col_sum != target_sum:\n            return False\n\n    diagonal_sum1 = 0\n    diagonal_sum2 = 0\n    for i in range(n):\n        diagonal_sum1 += arr[i][i]\n        diagonal_sum2 += arr[i][n-i-1]\n    if diagonal_sum1 != target_sum or diagonal_sum2 != target_sum:\n        return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return arr\n\nassert f(g()) == True\n\n",
        "idx_generation": 490,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_length=10) -> bool:\n    \"\"\"\n    Given a string s, find the shortest substring that contains all the vowels (a, e, i, o, u)\n    and has a length greater than or equal to target_length.\n    Return True if such a substring exists, False otherwise.\n    \"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    min_length = float('inf')\n    for i in range(len(s)):\n        for j in range(i+target_length, len(s)+1):\n            substring = s[i:j]\n            if all(v in substring for v in vowels):\n                min_length = min(min_length, len(substring))\n    return min_length < float('inf')\n\ndef g():\n    return \"thequickbrownfoxjumpsoverthelazydog\"\n\nassert f(g()) == True\n",
        "idx_generation": 484,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a combination of k numbers from the list that sums up to zero.\"\"\"\n    for combo in combinations(nums, k):\n        if sum(combo) == 0:\n            return True\n    return False\n\ndef g(k=3):\n    return [-1, 2, 3, -4, 5, -6]\n\nassert f(g()) == True\n",
        "idx_generation": 179,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that sums up to the target value.\n    \"\"\"\n    def find_combination(start, curr_sum):\n        if curr_sum == target:\n            return True\n        if curr_sum > target or start == len(nums):\n            return False\n        if find_combination(start + 1, curr_sum + nums[start]):\n            return True\n        if find_combination(start + 1, curr_sum):\n            return True\n        return False\n\n    return find_combination(0, 0)\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is.\n    \"\"\"\n    return nums\n\nassert f(g([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]))\n",
        "idx_generation": 354,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, substring='abc', count=3) -> bool:\n    \"\"\"Check if the given string contains exactly count occurrences of the given substring.\"\"\"\n    return s.count(substring) == count\ndef g(substring='abc', count=3):\n    return substring * count\nassert f(g()) == True\n",
        "idx_generation": 58,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is sorted in ascending order.\n    \"\"\"\n    return li == sorted(li)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 438,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if the given matrix is an identity matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            if (i == j and matrix[i][j] != 1) or (i != j and matrix[i][j] != 0):\n                return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n\nassert f(g()) == True\n",
        "idx_generation": 425,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(names: List[str], search_name: str) -> bool:\n    \"\"\"\n    Check if a given name exists in a list of names.\n\n    Sample Input:\n    ['John', 'Emma', 'Michael', 'Sophia'], 'Emma'\n\n    Sample Output:\n    True\n    \"\"\"\n    return search_name in names\n\ndef g() -> Tuple[List[str], str]:\n    return (['John', 'Emma', 'Michael', 'Sophia'], 'Emma')\n\nassert f(*g()) == True\n\n",
        "idx_generation": 154,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of elements in the list whose sum is equal to the target value.\n    Return True if such a pair exists, False otherwise.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return arr, target\n\nassert f(*g()) == True\n",
        "idx_generation": 410,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list whose sum is greater than or equal to the target value.\n    Return True if such a subarray exists, False otherwise.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 10\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if prefix_sum[j] - prefix_sum[i] >= target:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 10):\n    return arr, target\n\nassert f(*g()) == True\n",
        "idx_generation": 277,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], n: int = 5) -> bool:\n    \"\"\"Check if the list contains at least n numbers divisible by 3.\"\"\"\n    div_by_3 = [num for num in lst if num % 3 == 0]\n    return len(div_by_3) >= n\ndef g(n: int = 5):\n    return [3, 6, 9, 12, 15, 18]\nassert f(g()) == True\n\n",
        "idx_generation": 247,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list whose sum is equal to the target.\n    \"\"\"\n    return any(target - num in nums for num in nums)\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return (nums, target)\n\nassert f(*g()) == True\n",
        "idx_generation": 261,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, find the sum of all elements in the matrix.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    output: 45\n    \"\"\"\n    total_sum = 0\n    for row in matrix:\n        for num in row:\n            total_sum += num\n    return total_sum\n\ndef g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\nassert f(g()) == 45\n",
        "idx_generation": 322,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=20, c=30) -> bool:\n    \"\"\"Check if the given number is the sum of a, b, and c\"\"\"\n    return n == a + b + c\n\ndef g(a=10, b=20, c=30):\n    return a + b + c\n\nassert f(g())\n",
        "idx_generation": 458,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(lst: List[List[int]]) -> List[int]:\n    \"\"\"Flatten the given list of lists into a single list.\"\"\"\n    return [num for sublst in lst for num in sublst]\n\ndef g(lst=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return lst\n\nassert f(g()) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n",
        "idx_generation": 213,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"Remove duplicates from a list of integers while preserving the order.\"\"\"\n    return list(dict.fromkeys(nums))\n\ndef g(nums=[1, 2, 2, 3, 4, 4, 5]):\n    return nums\n\nassert f(g()) == [1, 2, 3, 4, 5]\n",
        "idx_generation": 474,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"Find the maximum sum of a subarray in the given list of integers.\"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    for num in nums:\n        curr_sum = max(num, curr_sum + num)\n        max_sum = max(max_sum, curr_sum)\n    \n    return max_sum\n\ndef g(nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]):\n    return nums\n\nassert f(g()) == 6\n\n",
        "idx_generation": 162,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a lower triangular matrix.\n    A lower triangular matrix has all elements above the main diagonal equal to zero.\n\n    Sample Input:\n    arr = [[1, 0, 0], [2, 3, 0], [4, 5, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i][j] != 0:\n                return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[1, 0, 0], [2, 3, 0], [4, 5, 6]]):\n    return arr\n\nassert f(g()) == True\n\n",
        "idx_generation": 498,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> str:\n    \"\"\"\n    Reverse the given string and return the result.\n    \"\"\"\n    return string[::-1]\n\ndef g():\n    return \"Hello, World!\"\n\nassert f(g()) == \"!dlroW ,olleH\"\n",
        "idx_generation": 488,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: List[int], n=5, s=50) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a >= 0 for a in x])\ndef g(n = 5, s = 50):\n    if n == 1:\n        return [s]\n    elif n == 2:\n        return [s - 1, 1]\n    elif n == 3:\n        return [s - 2, 1, 1]\n    elif n == 4:\n        return [s/4, s/4, s/4, s/4]\n    else:\n        return [s/5, s/5, s/5, s/5, s/5]\nassert f(g()) == True\n",
        "idx_generation": 181,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target, check if there exists a combination of numbers from the list\n    that adds up to the target value. If such a combination exists, return True. Otherwise, return False.\n    \"\"\"\n    def backtrack(curr_sum: int, index: int) -> bool:\n        if curr_sum == target:\n            return True\n        if curr_sum > target or index >= len(numbers):\n            return False\n\n        for i in range(index, len(numbers)):\n            if backtrack(curr_sum + numbers[i], i + 1):\n                return True\n\n        return False\n\n    return backtrack(0, 0)\n\ndef g(target=10):\n    \"\"\"Generate a list of numbers.\"\"\"\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 10) == True\n\n",
        "idx_generation": 376,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], target='apple') -> bool:\n    \"\"\"Check if any word in the list contains the target word\"\"\"\n    return any(target in word for word in words)\n\ndef g(target='apple'):\n    return ['banana', 'orange', 'apple', 'grape']\n\nassert f(g()) == True\n",
        "idx_generation": 74,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix.\n    \"\"\"\n    n = len(matrix)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(matrix: List[List[int]] = [[1, 0, 0], [2, 3, 0], [4, 5, 6]]):\n    return matrix\n\nassert f(g()) == True\n\n",
        "idx_generation": 440,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the maximum product of any two numbers in the list.\n    \"\"\"\n    nums.sort()\n    return max(nums[-1] * nums[-2], nums[0] * nums[1])\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == 20\n\n",
        "idx_generation": 429,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[str]], target: str) -> bool:\n    \"\"\"\n    Given a matrix of strings and a target string, return True if the target string exists in the matrix,\n    otherwise return False.\n\n    Sample input:\n    matrix = [['a', 'b', 'c'],\n              ['d', 'e', 'f'],\n              ['g', 'h', 'i']]\n    target = 'e'\n\n    Sample output:\n    True\n\n    Explanation: The target string 'e' exists in the matrix.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix=[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']], target='e'):\n    return matrix, target\n\nassert f(*g()) == True\n",
        "idx_generation": 164,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> List[int]:\n    \"\"\"\n    Given an array of integers nums and an integer k, return the k most frequent elements and their frequencies in the array.\n\n    Example:\n    nums = [1, 1, 1, 2, 2, 3]\n    k = 2\n\n    Output: [(1, 3), (2, 2)]\n\n    Explanation: The two most frequent elements are 1 and 2, with frequencies 3 and 2 respectively.\n    \"\"\"\n    freq_dict = {}\n    for num in nums:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n    sorted_nums = sorted(freq_dict, key=lambda x: freq_dict[x], reverse=True)\n    return [(num, freq_dict[num]) for num in sorted_nums[:k]]\n\ndef g(nums=[1, 1, 1, 2, 2, 3], k=2):\n    return nums, k\n\nassert f(*g()) == [(1, 3), (2, 2)]\n",
        "idx_generation": 410,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subsequence in the list x whose sum is equal to the target\"\"\"\n    n = len(x)\n    dp = [[False for _ in range(target+1)] for _ in range(n+1)]\n    dp[0][0] = True\n\n    for i in range(1, n+1):\n        for j in range(target+1):\n            if j < x[i-1]:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-x[i-1]]\n\n    return dp[n][target]\n\ndef g(x=[1, 2, 3, 4, 5], target=9):\n    return (x, target)\n\nassert f(*g())\n",
        "idx_generation": 284,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst1: List[int], lst2: List[int]) -> bool:\n    \"\"\"Check if the two lists have the same length and contain at least one common element.\"\"\"\n    return len(lst1) == len(lst2) and any(num in lst2 for num in lst1)\ndef g():\n    return ([1, 2, 3, 4, 5], [6, 7, 8, 9, 10])\nassert f(*g()) == False\n\n",
        "idx_generation": 247,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists two numbers in the list that sum up to the target value.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return ([1, 2, 3, 4, 5], 7)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 262,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find if there exists a subarray whose sum equals the target number.\n    If such a subarray exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(nums)):\n        total = nums[i]\n        if total == target:\n            return True\n        for j in range(i + 1, len(nums)):\n            total += nums[j]\n            if total == target:\n                return True\n    return False\n\ndef g(nums: List[int] = [4, 2, -3, 1, 6], target: int = 0):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 334,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Calculate the product of all numbers in the given list of integers.\n\n    Sample Input:\n    [1, 2, 3, 4, 5, 6]\n\n    Sample Output:\n    720\n    \"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n    return product\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6]):\n    return nums\n\nassert f(g()) == 720\n\n",
        "idx_generation": 459,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if a given list contains two numbers that add up to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return nums, target\n\nassert f(*g()) == True\n",
        "idx_generation": 217,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers and an integer n, find the sum of all elements in the matrix that are divisible by n.\n\n    Sample Input:\n    n = 3\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n\n    Sample Output:\n    18\n\n    Explanation: The elements in the matrix that are divisible by 3 are: 3, 6, 9. Their sum is 18.\n    \"\"\"\n    return sum([matrix[i][j] for i in range(len(matrix)) for j in range(len(matrix[0])) if matrix[i][j] % n == 0])\n\ndef g() -> Tuple[int, List[List[int]]]:\n    return 3, [[1, 2, 3],\n               [4, 5, 6],\n               [7, 8, 9]]\n\nassert f(*g()) == 18\n\n",
        "idx_generation": 474,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum: int) -> bool:\n    \"\"\"\n    Given a list of numbers, find a subset of numbers that sums up to the target_sum.\n    Return True if such a subset exists, False otherwise.\n    \"\"\"\n    def subset_sum(numbers, target_sum, memo={}):\n        if target_sum in memo:\n            return memo[target_sum]\n        if target_sum == 0:\n            return True\n        if target_sum < 0 or not numbers:\n            return False\n        include = subset_sum(numbers[1:], target_sum - numbers[0], memo)\n        exclude = subset_sum(numbers[1:], target_sum, memo)\n        memo[target_sum] = include or exclude\n        return memo[target_sum]\n\n    return subset_sum(numbers, target_sum)\n\ndef g(numbers=[1, 2, 3, 4, 5, 6], target_sum=12):\n    return (numbers, target_sum)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 165,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a perfect square grid.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n\n    for row in arr:\n        if len(row) != n:\n            return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 498,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n    Return True if the string is palindrome, False otherwise.\n    \"\"\"\n    return string == string[::-1]\n\ndef g(string: str = \"racecar\"):\n    return string\n\nassert f(g()) == True\n\n",
        "idx_generation": 488,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int, k=2) -> bool:\n    \"\"\"\n    Given a list of numbers, check if there exists a combination of k numbers whose sum is equal to the target number.\n\n    Example:\n    numbers = [2, 5, 8, 11, 9, 4]\n    target = 15\n    k = 3\n    output: True\n    \"\"\"\n    from itertools import combinations\n\n    for combo in combinations(numbers, k):\n        if sum(combo) == target:\n            return True\n    return False\n\ndef g():\n    return [2, 5, 8, 11, 9, 4], 15, 3\n\nassert f(*g()) == True\n\n",
        "idx_generation": 184,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100, k=3) -> bool:\n    \"\"\"Check if there are k distinct numbers in the list that sum up to the target value\"\"\"\n    def k_sum(nums, target, k):\n        if k == 0 and target == 0:\n            return True\n        if k <= 0 or target <= 0 or not nums:\n            return False\n        return k_sum(nums[1:], target - nums[0], k - 1) or k_sum(nums[1:], target, k)\n    return k_sum(nums, target, k)\n\ndef g(target=100, k=3):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g()) == True\n",
        "idx_generation": 428,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(s: str, substring_length=3) -> bool:\n    \"\"\"\n    Check if the given string contains all possible substrings of length substring_length.\n\n    Example:\n    s = \"abcd\"\n    substring_length = 2\n    output: True\n    \"\"\"\n    all_substrings = [''.join(sub) for sub in permutations(s, substring_length)]\n    return set(all_substrings).issubset(set(s))\n\ndef g(substring_length=3):\n    return 'abcd', substring_length\nassert f(g()) == True\n",
        "idx_generation": 83,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list whose sum is equal to the target.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 440,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a sorted list of integers in ascending order and a target integer, determine if there exist two distinct\n    indices i and j in the list such that arr[i] + arr[j] == target.\n\n    Example:\n    arr = [1, 3, 5, 7, 9]\n    target = 10\n\n    The sum of arr[0] and arr[4] is equal to the target.\n    Therefore, f(arr, target) returns True.\n    \"\"\"\n    i, j = 0, len(arr) - 1\n    while i < j:\n        if arr[i] + arr[j] == target:\n            return True\n        elif arr[i] + arr[j] < target:\n            i += 1\n        else:\n            j -= 1\n    return False\n\ndef g(arr: List[int] = [1, 3, 5, 7, 9], target: int = 10):\n    return arr, target\n\nassert f(*g())\n",
        "idx_generation": 442,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target integer, return True if the target integer exists in the matrix,\n    otherwise return False.\n\n    Sample input:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    target = 5\n\n    Sample output:\n    True\n\n    Explanation: The target integer 5 exists in the matrix.\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], target=5):\n    return matrix, target\n\nassert f(*g()) == True\n",
        "idx_generation": 165,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> List[int]:\n    \"\"\"\n    Given an array of integers nums and an integer k, return the k least frequent elements and their frequencies in the array.\n\n    Example:\n    nums = [1, 1, 1, 2, 2, 3]\n    k = 2\n\n    Output: [(3, 1), (2, 2)]\n\n    Explanation: The two least frequent elements are 3 and 2, with frequencies 1 and 2 respectively.\n    \"\"\"\n    freq_dict = {}\n    for num in nums:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n    sorted_nums = sorted(freq_dict, key=lambda x: freq_dict[x])\n    return [(num, freq_dict[num]) for num in sorted_nums[:k]]\n\ndef g(nums=[1, 1, 1, 2, 2, 3], k=2):\n    return nums, k\n\nassert f(*g()) == [(3, 1), (2, 2)]\n\n",
        "idx_generation": 414,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list with all even numbers removed.\n    \"\"\"\n    return [num for num in nums if num % 2 != 0]\n\nassert f(g([3, 4, -7, 2, 1, 3, 1]), 4)\n",
        "idx_generation": 286,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_product=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiply to the target product\"\"\"\n    seen = set()\n    for num in nums:\n        if target_product % num == 0 and target_product // num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target_product=100):\n    return [1, 2, 4, 5, 10, 20, 25, target_product // 25]\n\nassert f(g()) == True\n",
        "idx_generation": 265,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a pair of numbers whose sum is equal to the target.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    nums = [2, 4, 6, 8, 10]\n    target = 14\n    return nums, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 269,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square\n    \"\"\"\n    n = len(matrix)\n    target_sum = n * (n**2 + 1) // 2\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != target_sum:\n            return False\n    # Check diagonals\n    main_diag_sum = sum(matrix[i][i] for i in range(n))\n    anti_diag_sum = sum(matrix[i][n-i-1] for i in range(n))\n    if main_diag_sum != target_sum or anti_diag_sum != target_sum:\n        return False\n    return True\n\ndef g(size=5):\n    \"\"\"\n    Generate a magic square of the given size\n    \"\"\"\n    magic_square = [[0 for _ in range(size)] for _ in range(size)]\n    i, j = 0, size // 2\n    for num in range(1, size**2 + 1):\n        magic_square[i][j] = num\n        i -= 1\n        j += 1\n        if num % size == 0:\n            i += 2\n            j -= 1\n        elif i < 0:\n            i = size - 1\n        elif j == size:\n            j = 0\n    return magic_square\n\nassert f(g()) == True\n\n",
        "idx_generation": 351,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Calculate the sum of all even numbers in the given list of integers.\n    \"\"\"\n    return sum(num for num in nums if num % 2 == 0)\n\ndef g(nums: List[int]):\n    return nums\n\nassert f(g([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) == 30\n\n",
        "idx_generation": 468,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target integer, find two numbers in the list that add up to the target.\n    Return the indices of the two numbers in a list.\n    \"\"\"\n    complements = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in complements:\n            return [complements[complement], i]\n        complements[num] = i\n    return []\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g()) == [3, 4]\n",
        "idx_generation": 225,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of any contiguous subarray.\n\n    Example:\n    arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\n    The contiguous subarray with the maximum sum is [4, -1, 2, 1], and the sum is 6.\n    Therefore, f(arr) returns 6.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for num in arr:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n\ndef g(arr: List[int] = [-2, 1, -3, 4, -1, 2, 1, -5, 4]):\n    return arr\n\nassert f(g()) == 6\n\n",
        "idx_generation": 475,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import *\ndef f(numbers: List[int], target_sum: int = 20) -> bool:\n    \"\"\"\n    Given a list of numbers, find a subset of numbers that sums up to the target_sum.\n    Return True if such a subset exists, False otherwise.\n    \"\"\"\n    def subset_sum(numbers, target_sum, memo={}):\n        if target_sum in memo:\n            return memo[target_sum]\n        if target_sum == 0:\n            return True\n        if target_sum < 0 or not numbers:\n            return False\n        include = subset_sum(numbers[1:], target_sum - numbers[0], memo)\n        exclude = subset_sum(numbers[1:], target_sum, memo)\n        memo[target_sum] = include or exclude\n        return memo[target_sum]\n\n    return subset_sum(numbers, target_sum)\n\ndef g(numbers=[5, 10, 15, 20, 25]):\n    return (numbers,)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 168,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are exactly 'count' numbers that form a valid geometric progression with a common ratio of 'target'.\n\n    Sample Input:\n    arr = [1, 3, 9, 27, 81]\n    target = 3\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(arr[i] * target == arr[i+1] and arr[i+1] * target == arr[i+2] for i in range(len(arr)-2))\n\ndef g(arr: List[int] = [1, 3, 9, 27, 81], target: int = 3, count: int = 3):\n    return (arr, target, count)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 498,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> str:\n    \"\"\"\n    Given a string, return a new string where the first and last characters have been exchanged.\n\n    Sample Input:\n    s = \"hello\"\n\n    Sample Output:\n    \"oellh\"\n    \"\"\"\n    if len(s) <= 1:\n        return s\n    return s[-1] + s[1:-1] + s[0]\n\ndef g():\n    return \"hello\"\n\nassert f(g()) == \"oellh\"\n\n",
        "idx_generation": 491,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nimport itertools\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there is a combination of numbers in the list that sums up to the target value\n    \"\"\"\n    for r in range(1, len(nums) + 1):\n        for combination in itertools.combinations(nums, r):\n            if sum(combination) == target:\n                return True\n    return False\n\ndef g() -> Tuple[List[int], int]:\n    return ([1, 2, 3, 4, 5, 6, 7, 8, 9], 10)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 186,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], n=18) -> bool:\n    \"\"\"\n    Given n, find n integers such that li[i] * li[i+1] + 1 == li[i+2], for i = 0, 1, ..., n-1\n    where indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\n    that are multiples of 3 (as proven in the IMO problem).\n\n    Sample input:\n    6\n\n    Sample output:\n    [_, _, _, _, _, _]\n\n    (Sample output hidden because showing sample output would give away too much information.)\n    \"\"\"\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n = 18):\n    return [-1, -1, 2] * (n // 3)\nassert f(g())\n",
        "idx_generation": 441,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=3, length=12) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'abc', count = 3, length = 12):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g()) == True\n",
        "idx_generation": 111,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n\n    A magic square is a square matrix where the sum of each row, each column, and both diagonals are equal.\n\n    Sample input:\n    matrix = [\n        [2, 7, 6],\n        [9, 5, 1],\n        [4, 3, 8]\n    ]\n    \n    Sample output:\n    True\n    \n    Explanation: The sum of each row, column, and diagonal is 15.\n    \"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Checking rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Checking columns\n    for j in range(n):\n        column_sum = 0\n        for i in range(n):\n            column_sum += matrix[i][j]\n        if column_sum != target_sum:\n            return False\n    \n    # Checking diagonal\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += matrix[i][i]\n    if diagonal_sum != target_sum:\n        return False\n    \n    # Checking anti-diagonal\n    anti_diagonal_sum = 0\n    for i in range(n):\n        anti_diagonal_sum += matrix[i][n-i-1]\n    if anti_diagonal_sum != target_sum:\n        return False\n    \n    return True\n\ndef g() -> List[List[int]]:\n    return [\n        [2, 7, 6],\n        [9, 5, 1],\n        [4, 3, 8]\n    ]\n\nassert f(g())\n",
        "idx_generation": 441,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subsequence of length k in the list that is strictly decreasing\"\"\"\n    for i in range(len(nums)-k+1):\n        subsequence = nums[i:i+k]\n        if all(subsequence[j] > subsequence[j+1] for j in range(k-1)):\n            return True\n    return False\n\ndef g(k=3):\n    return [10, 8, 6, 4, 2, 9, 7, 5, 3, 1]\n\nassert f(g()) == True\n",
        "idx_generation": 447,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"Check if two strings are anagrams of each other.\"\"\"\n    return sorted(s) == sorted(t)\n\ndef g(s: str, t: str):\n    \"\"\"Generate two anagram strings.\"\"\"\n    return s, t[::-1]\n\nassert f(*g(\"listen\", \"silent\")) == True\n",
        "idx_generation": 172,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Find if there exists a triplet in the given list whose sum is equal to the target value.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            for k in range(j + 1, len(lst)):\n                if lst[i] + lst[j] + lst[k] == target:\n                    return True\n    return False\ndef g(lst=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return lst\nassert f(g()) == True\n",
        "idx_generation": 430,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subarray with a sum divisible by k.\n\n    Example:\n    nums = [2, 4, 6, 8, 10]\n    k = 5\n    output: True\n    \"\"\"\n    prefix_sum = 0\n    seen = set()\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in seen:\n            return True\n        seen.add(prefix_sum)\n    return False\n\ndef g():\n    return [2, 4, 6, 8, 10], 5\n\nassert f(*g()) == True\n",
        "idx_generation": 294,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a palindrome.\n    A list is considered a palindrome if it reads the same forwards and backwards.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g() -> List[int]:\n    return [1, 2, 3, 2, 1]\n\nassert f(g()) == True\n\n",
        "idx_generation": 266,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\n\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there is a pair of numbers in the list lst that multiply to the target.\n\n    Sample input:\n    lst = [1, 2, 3, 4, 5]\n    target = 8\n\n    Sample output:\n    True\n\n    Explanation: The pair of numbers (2, 4) multiply to 8 and they are present in the list.\n    \"\"\"\n    assert len(lst) > 1, 'Hint: The list should have at least 2 numbers.'\n    return any(i * j == target for i in lst for j in lst if i != j)\n\ndef g(lst=[1, 2, 3, 4, 5], target=8):\n    return lst, target\n\nassert f(*g()) == True\n",
        "idx_generation": 273,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target number, find and return a list of indices of the two numbers that add up to the target number.\n    \"\"\"\n    num_dict = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_dict:\n            return [num_dict[complement], i]\n        num_dict[num] = i\n    return []\n\ndef g(nums: List[int] = [2, 7, 11, 15], target: int = 9):\n    return (nums, target)\n\nassert f(*g()) == [0, 1]\n",
        "idx_generation": 362,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the product of all the elements in the list.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g()) == 120\n\n",
        "idx_generation": 470,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers, find two numbers such that they add up to the target.\n    Return the indices of the two numbers in a list.\n    \"\"\"\n    num_dict = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_dict:\n            return [num_dict[complement], i]\n        num_dict[num] = i\n    return []\n\ndef g(nums=[2, 7, 11, 15], target=9):\n    return (nums, target)\n\nassert f(*g()) == [0, 1]\n",
        "idx_generation": 228,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum product of any two distinct numbers in the list.\n\n    Sample Input:\n    [1, 2, 3, 4, 5]\n\n    Sample Output:\n    20\n    \"\"\"\n    max_product = float('-inf')\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n    \n    return max_product\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == 20\n",
        "idx_generation": 475,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(t: Tuple[List[int], int]) -> bool:\n    \"\"\"\n    Given a tuple containing a list of numbers and a target number, determine if it is possible to find a subsequence of numbers that add up to the target number.\n\n    Sample input:\n    t = ([1, 2, 3, 4, 5], 7)\n\n    Sample output:\n    True\n\n    The subsequence [2, 5] adds up to 7, which is the target number.\n    \"\"\"\n    def subsequence_sum(numbers, target, index):\n        if target == 0:\n            return True\n        if index >= len(numbers) or target < 0:\n            return False\n        return subsequence_sum(numbers, target - numbers[index], index + 1) or subsequence_sum(numbers, target, index + 1)\n    return subsequence_sum(*t, 0)\n\ndef g(numbers=[1, 2, 3, 4, 5], target=7):\n    return (numbers, target)\n\nassert f(g()) == True\n",
        "idx_generation": 168,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if a given string is a palindrome.\n    \"\"\"\n    return string == string[::-1]\n\ndef g(string=\"racecar\"):\n    return string\n\nassert f(g()) == True\n\n",
        "idx_generation": 493,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: List[int], n=4, s=10) -> bool:\n    \"\"\"Find a list of n positive integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 4, s = 10):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True\n",
        "idx_generation": 210,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there is a subset of numbers that sums up to the target value\n    \"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\n\ndef g(target=0):\n    return [1, 2, 4, 5, 7, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 477,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a given string is a palindrome or can be rearranged to form a palindrome.\"\"\"\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n    odd_count = 0\n    for count in char_count.values():\n        if count % 2 != 0:\n            odd_count += 1\n            if odd_count > 1:\n                return False\n    return True\n\ndef g(s=\"aabbaa\"):\n    return s\n\nassert f(g()) == True\n",
        "idx_generation": 119,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given number n is present in the list of integers.\n    \"\"\"\n    return n in nums\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(3, g()) == True\n",
        "idx_generation": 442,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there exists four numbers in the given list whose sum is equal to the target number.\n    \"\"\"\n    nums.sort()\n    for i in range(len(nums) - 3):\n        for j in range(i + 1, len(nums) - 2):\n            left = j + 1\n            right = len(nums) - 1\n            while left < right:\n                curr_sum = nums[i] + nums[j] + nums[left] + nums[right]\n                if curr_sum == target:\n                    return True\n                elif curr_sum < target:\n                    left += 1\n                else:\n                    right -= 1\n    return False\n\ndef g(nums: List[int] = [1, 4, 5, 2, 8, 3], target: int = 20):\n    return nums, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 450,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"Check if two strings are anagrams of each other.\"\"\"\n\n    # Convert strings to lowercase and remove whitespace\n    s = s.lower().replace(\" \", \"\")\n    t = t.lower().replace(\" \", \"\")\n\n    # Check if the sorted characters of both strings are equal\n    return sorted(s) == sorted(t)\n\ndef g():\n    \"\"\"Generate two anagram strings.\"\"\"\n    return (\"Listen\", \"Silent\")\n\nassert f(*g()) == True\n",
        "idx_generation": 173,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist four numbers in the list whose sum is equal to the target number.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                for l in range(k+1, len(numbers)):\n                    if numbers[i] + numbers[j] + numbers[k] + numbers[l] == target:\n                        return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 20\n\nassert f(*g()) == True\n\n",
        "idx_generation": 455,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subarray with a sum divisible by k.\n\n    Example:\n    nums = [7, 14, 21, 28, 35]\n    k = 3\n    output: True\n    \"\"\"\n    prefix_sum = 0\n    seen = set()\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in seen:\n            return True\n        seen.add(prefix_sum)\n    return False\n\ndef g():\n    return [7, 14, 21, 28, 35], 3\n\nassert f(*g()) == True\n",
        "idx_generation": 294,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist three numbers in a list whose sum is equal to a target value.\n\n    Sample Input:\n    [3, 5, 1, 8, 2], 10\n\n    Sample Output:\n    True\n    \"\"\"\n    for combination in itertools.combinations(numbers, 3):\n        if sum(combination) == target:\n            return True\n    return False\n\ndef g(numbers: List[int] = [3, 5, 1, 8, 2], target: int = 10) -> Tuple[List[int], int]:\n    return (numbers, target)\n\nassert f(*g()) == True\n",
        "idx_generation": 269,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum: int = 10) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a pair of numbers that add up to the target_sum.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        complement = target_sum - num\n        if complement in nums_set and complement != num:\n            return True\n    return False\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 275,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers contains any prime numbers.\n\n    Sample Input:\n    [1, 4, 6, 8, 10, 13]\n\n    Sample Output:\n    True\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return any(is_prime(num) for num in nums)\n\ndef g():\n    return [1, 4, 6, 8, 10, 13]\n\nassert f(g()) == True\n",
        "idx_generation": 368,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Calculate the sum of all the even numbers in the given list.\n    \"\"\"\n    return sum(num for num in nums if num % 2 == 0)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 30\n\n",
        "idx_generation": 472,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int = 2) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the given array, such that the product of its elements is divisible by k.\"\"\"\n    for i in range(len(arr) - k + 1):\n        subarr = arr[i:i+k]\n        subarr_product = 1\n        for num in subarr:\n            subarr_product *= num\n        if subarr_product % k == 0:\n            return True\n    return False\n\ndef g(k: int = 2):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n\n",
        "idx_generation": 230,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target number, find two numbers in the list that sum up to the target.\n\n    Sample Input:\n    nums = [2, 7, 11, 15]\n    target = 9\n\n    Sample Output:\n    [2, 7]\n    \"\"\"\n    num_dict = {}\n    \n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_dict:\n            return [nums[num_dict[complement]], num]\n        num_dict[num] = i\n    \n    return []\n\ndef g(nums: List[int] = [2, 7, 11, 15], target: int = 9):\n    return nums, target\n\nassert f(*g()) == [2, 7]\n",
        "idx_generation": 475,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int) -> List[int]:\n    \"\"\"Return a list of the first n Fibonacci numbers.\"\"\"\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        fibonacci = [0, 1]\n        for i in range(2, n):\n            fibonacci.append(fibonacci[i-1] + fibonacci[i-2])\n        return fibonacci\n\ndef g(n: int = 5):\n    return n\n\nassert f(g()) == [0, 1, 1, 2, 3]\n\n",
        "idx_generation": 172,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], target: str) -> bool:\n    \"\"\"\n    Check if there exists a string in the list that, when concatenated with the target, forms a palindrome.\n    \"\"\"\n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    for string in strings:\n        if is_palindrome(string + target):\n            return True\n    return False\n\ndef g(strings: List[str] = [\"ab\", \"cd\", \"ef\"], target: str = \"ba\"):\n    return (strings, target)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 494,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring: str) -> bool:\n    \"\"\"\n    Check if the given substring occurs exactly twice in the given string.\n    \"\"\"\n    count = string.count(substring)\n    return count == 2\n\ndef g(string=\"Hello, World!\", substring=\"o\"):\n    return string, substring\n\nassert f(*g()) == True\n",
        "idx_generation": 252,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum: int = 10) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that sums up to the target_sum.\n    \"\"\"\n    def find_combination(start, curr_sum):\n        if curr_sum == target_sum:\n            return True\n        if curr_sum > target_sum or start == len(nums):\n            return False\n        for i in range(start, len(nums)):\n            if find_combination(i + 1, curr_sum + nums[i]):\n                return True\n        return False\n\n    return find_combination(0, 0)\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is\n    \"\"\"\n    return nums\n\nassert f(g([2, 4, 6, 8, 10])) == True\n",
        "idx_generation": 489,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, target_char='a') -> bool:\n    \"\"\"Check if the target_char appears an odd number of times in the string s.\"\"\"\n    count = 0\n    for char in s:\n        if char == target_char:\n            count += 1\n    return count % 2 == 1\ndef g(target_char = 'a'):\n    return target_char * 5\n\nassert f(g()) == True\n",
        "idx_generation": 130,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums: List[int]) -> List[int]:\n    \"\"\"\n    Return a list of numbers greater than n from the given list of integers.\n    \"\"\"\n    return [num for num in nums if num > n]\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(2, g()) == [3, 4, 5]\n",
        "idx_generation": 442,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a sorted list of integers, find the index of the target value using binary search.\n\n    Example:\n    nums = [1, 3, 5, 7, 9]\n    target = 7\n    output: 3\n    \"\"\"\n    left = 0\n    right = len(nums) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1\n\ndef g():\n    return [1, 3, 5, 7, 9], 7\n\nassert f(*g()) == 3\n\n",
        "idx_generation": 471,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: str, y: str, z: str, size=3) -> bool:\n    \"\"\"Check if all strings are of the same size and contain the same characters\"\"\"\n    return len(x) == len(y) == len(z) == size and sorted(list(x)) == sorted(list(y)) == sorted(list(z))\ndef g(size=3):\n    return (\"abc\", \"bca\", \"cab\")\nassert f(*g()) == True\n\n",
        "idx_generation": 174,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are three distinct indices i, j, and k in the list such that the sum of nums[i], nums[j], and nums[k] is equal to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(nums)\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (nums, target)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 464,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k: int = 3) -> bool:\n    \"\"\"\n    Check if n can be expressed as a sum of k consecutive positive integers.\n    \"\"\"\n    for i in range(1, n):\n        total = 0\n        for j in range(i, i+k):\n            total += j\n        if total == n:\n            return True\n    return False\n\ndef g(n: int = 15, k: int = 3):\n    return (n, k)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 295,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_product: int = 24) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a pair of numbers that multiply to the target_product.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        if target_product % num == 0:\n            complement = target_product // num\n            if complement in nums_set and complement != num:\n                return True\n    return False\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 275,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, find all the numbers that appear more than once.\n    Return a list of the duplicate numbers.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 2, 5]\n\n    Sample Output:\n    [2]\n    \"\"\"\n    count = {}\n    duplicates = []\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    for num, freq in count.items():\n        if freq > 1:\n            duplicates.append(num)\n    return duplicates\n\ndef g(nums: List[int] = [1, 2, 3, 4, 2, 5]):\n    return nums\n\nassert f(g()) == [2]\n\n",
        "idx_generation": 276,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the given list contains two numbers that multiply to the target number.\n    \"\"\"\n    n = len(nums)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[2, 4, 6, 8], target=48):\n    return nums, target\n\nassert f(*g()) == True\n",
        "idx_generation": 370,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the maximum sum of a subarray in the given list of numbers.\n    \"\"\"\n\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n\ndef g(nums=[-2, 1, -3, 4, -1, 2, 1, -5, 4]):\n    return nums\n\nassert f(g()) == 6\n",
        "idx_generation": 231,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given array contains a pair of numbers whose product is a perfect square.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > 0 and int(product ** 0.5) ** 2 == product:\n                return True\n    return False\n\ndef g(arr=[2, 4, 6, 8, 10]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 475,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a subsequence of numbers in a list that sums up to a given target\"\"\"\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target, num - 1, -1):\n            if dp[i - num]:\n                dp[i] = True\n    return dp[target]\n\ndef g(target=10):\n    return [2, 4, 6, 8]\n\nassert f(g()) == True\n",
        "idx_generation": 176,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char: str) -> bool:\n    \"\"\"Check if the given character is the last character of each word in the string\"\"\"\n    words = s.split()\n    return all(word[-1] == char for word in words)\ndef g(s: str = \"Python Programming Puzzles\", char: str = \"s\"):\n    return (s, char)\nassert f(*g()) == False\n",
        "idx_generation": 494,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m: int, s=20) -> bool:\n    \"\"\"Check if two numbers can be multiplied to get a specific value.\"\"\"\n    return n * m == s\n\ndef g(s=20):\n    for i in range(1, s + 1):\n        if s % i == 0:\n            return i, s // i\n\nassert f(*g())\n",
        "idx_generation": 253,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int, target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target sum, find if there are k non-negative integers in the list that sum up to the target.\n    \"\"\"\n    if k == 0 and target == 0:\n        return True\n    elif k == 0 or target <= 0 or len(nums) == 0:\n        return False\n    else:\n        return f(nums[1:], k-1, target-nums[0]) or f(nums[1:], k, target)\n\ndef g(nums=[2, 4, 6, 8, 10], k=3, target=18):\n    return nums\n\nassert f(g(), k=3, target=18)\n",
        "idx_generation": 493,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(string: str, pattern: str) -> bool:\n    \"\"\"\n    Given a string and a pattern, check if the pattern can be formed by rearranging the characters in the string.\n\n    Sample Input:\n    \"listen\", \"silent\"\n\n    Sample Output:\n    True\n    \"\"\"\n    if len(string) != len(pattern):\n        return False\n    count = [0] * 26\n    for char in string:\n        count[ord(char) - ord('a')] += 1\n    for char in pattern:\n        count[ord(char) - ord('a')] -= 1\n        if count[ord(char) - ord('a')] < 0:\n            return False\n    return True\n\ndef g() -> Tuple[str, str]:\n    return (\"listen\", \"silent\")\n\nassert f(*g()) == True\n\n\n",
        "idx_generation": 135,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find and return the maximum difference between any two numbers in the list.\n    \"\"\"\n    min_num = min(nums)\n    max_num = max(nums)\n    return max_num - min_num\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 9\n\n",
        "idx_generation": 443,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find and return the maximum sum of any contiguous subarray.\n\n    Example:\n    arr = [1, -2, 3, -1, 2, -3, 4, -1, 5, -4]\n\n    The contiguous subarray with the maximum sum is [3, -1, 2, -3, 4, -1, 5], so the function should return 9.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in arr:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n\ndef g():\n    arr = [1, -2, 3, -1, 2, -3, 4, -1, 5, -4]\n    return (arr,)\n\nassert f(*g()) == 9\n",
        "idx_generation": 471,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import random\nfrom typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g(length: int):\n    \"\"\"Generate a palindrome list of given length.\"\"\"\n    import random\n    half_length = length // 2\n    nums = [random.randint(0, 9) for _ in range(half_length)]\n    nums.extend(nums[::-1] if length % 2 == 0 else nums[:-1][::-1])\n    return nums\n\nassert f(g(7)) == True\n",
        "idx_generation": 175,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if the target value exists in the matrix.\n\n    Example:\n    matrix = [\n        [1, 3, 5],\n        [7, 9, 11],\n        [13, 15, 17]\n    ]\n    target = 11\n\n    Output:\n    True\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return False\n    \n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    left = 0\n    right = rows * cols - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        row = mid // cols\n        col = mid % cols\n        \n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return False\n\ndef g(target: int = 11):\n    return [\n        [1, 3, 5],\n        [7, 9, 11],\n        [13, 15, 17]\n    ]\n\nassert f(g(), target=11) == True\n",
        "idx_generation": 466,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find the maximum subarray sum that is less than or equal to the target.\n    If such a subarray exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr) + 1):\n            if sum(arr[i:j]) <= target:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g(), 10) == True\n",
        "idx_generation": 316,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Find the number of occurrences of the target number in the given list.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num == target:\n            count += 1\n    \n    return count\n\ndef g(nums: List[int], target: int):\n    return nums, target\n\nassert f(*g([1, 2, 3, 4, 2, 5, 2], 2)) == 3\n\n",
        "idx_generation": 279,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose difference is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if num - target in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 2):\n    return nums, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 286,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"Calculate the sum of all even numbers in the list\"\"\"\n    return sum(num for num in arr if num % 2 == 0)\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr\n\nassert f(g()) == 30\n",
        "idx_generation": 372,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"Find all indices of the target number in the list.\"\"\"\n    indices = []\n    for i in range(len(nums)):\n        if nums[i] == target:\n            indices.append(i)\n    return indices\n\ndef g():\n    nums = [1, 2, 3, 4, 5, 5, 6, 7, 5, 8, 9]\n    target = 5\n    return (nums, target)\n\nassert f(*g()) == [4, 5, 8]\n",
        "idx_generation": 235,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with all the duplicates removed and the remaining elements in the same order.\n\n    Sample input:\n    [1, 2, 3, 3, 4, 4, 5]\n\n    Sample output:\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    return list(dict.fromkeys(nums))\n\ndef g(nums: List[int] = [1, 2, 3, 3, 4, 4, 5]):\n    return (nums,)\n\nassert f(*g()) == [1, 2, 3, 4, 5]\n",
        "idx_generation": 476,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, nums, and an integer target, find if there exists a subsequence of the list that adds up to the target.\n\n    Sample Input:\n    nums = [1, 3, 5, 7, 9]\n    target = 12\n\n    Sample Output:\n    True\n    \"\"\"\n    def helper(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        if helper(nums[1:], target - nums[0]):\n            return True\n        if helper(nums[1:], target):\n            return True\n        return False\n\n    return helper(nums, target)\n\ndef g():\n    return [1, 3, 5, 7, 9], 12\n\nassert f(*g())\n",
        "idx_generation": 180,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[str], target: str) -> bool:\n    \"\"\"\n    Check if a given string target can be formed by concatenating the strings in the list arr.\n\n    Sample Input:\n    arr = ['abc', 'def', 'ghi']\n    target = 'abcdefghi'\n\n    Sample Output:\n    True\n    \"\"\"\n    concat_str = ''.join(arr)\n    return concat_str == target\n\ndef g(arr: List[str] = ['abc', 'def', 'ghi'], target: str = 'abcdefghi'):\n    return (arr, target)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 498,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of integers in the array whose sum is equal to 10\"\"\"\n    return any((arr[i] + arr[j] == 10) for i in range(len(arr)) for j in range(i+1, len(arr)))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g()) == True\n",
        "idx_generation": 279,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, k: int) -> bool:\n    \"\"\"\n    Given a string s, check if there are exactly k consecutive repeating characters in s.\n    \"\"\"\n    count = 1\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            count += 1\n            if count == k:\n                return True\n        else:\n            count = 1\n    return False\n\ndef g():\n    return \"aabbbbccccddddddeee\", 3\n\nassert f(*g()) == True\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"Sort a list of numbers in ascending order.\"\"\"\n    return sorted(nums)\n\ndef g(nums=[3, 1, 4, 1, 5, 9, 2, 6, 5, 3]):\n    return nums\n\nassert f(g()) == [1, 1, 2, 3, 3, 4, 5, 5, 6, 9]\n",
        "idx_generation": 444,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the length of the longest increasing subsequence.\n\n    Example:\n    arr = [10, 9, 2, 5, 3, 7, 101, 18]\n\n    The longest increasing subsequence is [2, 3, 7, 101], and the length is 4.\n    Therefore, f(arr) returns 4.\n    \"\"\"\n    if not arr:\n        return 0\n\n    dp = [1] * len(arr)\n\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)\n\ndef g(arr: List[int] = [10, 9, 2, 5, 3, 7, 101, 18]):\n    return arr\n\nassert f(g()) == 4\n\n",
        "idx_generation": 475,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if a list is a palindrome.\"\"\"\n    return arr == arr[::-1]\n\ndef g(word: str):\n    \"\"\"Generate a palindrome list.\"\"\"\n    return list(word) + list(word[::-1])\n\nassert f(g('hello')) == True\n",
        "idx_generation": 182,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find the minimum subarray sum that is greater than or equal to the target.\n    If such a subarray exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr) + 1):\n            if sum(arr[i:j]) >= target:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g(), 10) == True\n\n",
        "idx_generation": 320,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains any duplicate elements.\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g(nums: List[int] = [1, 2, 3, 2, 4, 5]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 284,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains consecutive elements.\n    A consecutive list is a list where each element is one greater than the previous element.\n    \"\"\"\n    return all(nums[i] == nums[i-1] + 1 for i in range(1, len(nums)))\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 287,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a subsequence that is a prime number.\n\n    A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n    Sample input:\n    nums = [2, 5, 3, 8, 9]\n    \n    Sample output:\n    True\n    \n    Explanation: The subsequence [2, 5] is a prime number.\n    \"\"\"\n    primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29}\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            subsequence = nums[i:j]\n            if any(num in primes for num in subsequence):\n                return True\n    \n    return False\n\ndef g() -> List[int]:\n    return [2, 5, 3, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 373,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"Find the sum of the elements in each column and return the maximum sum.\"\"\"\n    max_sum = 0\n    for j in range(len(matrix[0])):\n        column_sum = sum(row[j] for row in matrix)\n        max_sum = max(max_sum, column_sum)\n    return max_sum\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == 18\n\n",
        "idx_generation": 239,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the sum of all even numbers in the list.\n\n    Sample input:\n    [1, 2, 3, 4, 5, 6]\n\n    Sample output:\n    12\n    \"\"\"\n    return sum(num for num in nums if num % 2 == 0)\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6]):\n    return (nums,)\n\nassert f(*g()) == 12\n",
        "idx_generation": 476,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int, k=3) -> bool:\n    \"\"\"Check if there exists a subsequence of the given list that sums up to the target value, with exactly k numbers.\"\"\"\n    def find_subsequence(start, curr_sum, count):\n        if curr_sum == target and count == k:\n            return True\n        if curr_sum > target or start == len(nums) or count > k:\n            return False\n        if find_subsequence(start + 1, curr_sum + nums[start], count + 1):\n            return True\n        if find_subsequence(start + 1, curr_sum, count):\n            return True\n        return False\n\n    return find_subsequence(0, 0, 0)\n\ndef g(nums: List[int] = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target: int = 150):\n    return (nums, target)\n\nassert f(*g())\n",
        "idx_generation": 190,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring: str = 'abc') -> bool:\n    \"\"\"\n    Given a string and a substring, check if the substring appears in the string.\n    Return True if the substring exists, False otherwise.\n    \"\"\"\n    return substring in string\n\ndef g(substring: str = 'abc'):\n    string = 'abcdefg'\n    return string\n\nassert f(g())\n",
        "idx_generation": 389,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> int:\n    \"\"\"\n    Given a list of numbers, count the number of occurrences of the target number.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num == target:\n            count += 1\n    return count\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]\n\nassert f(g()) == 4\n\n",
        "idx_generation": 288,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: List[str], n=3, s=\"abc\") -> bool:\n    \"\"\"Find a list of n strings whose concatenation is equal to s\"\"\"\n    return len(x) == n and \"\".join(x) == s\ndef g(n = 3, s = \"abc\"):\n    x = []\n    for i in range(n):\n        x.append(s[i])\n    return x\nassert f(g()) == True\n",
        "idx_generation": 164,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> int:\n    \"\"\"\n    Given a square matrix of integers, find the sum of the diagonal elements.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    15\n    \"\"\"\n    n = len(arr)\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += arr[i][i]\n    return diagonal_sum\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == 15\n",
        "idx_generation": 444,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum value in the list.\n    \"\"\"\n    return max(nums)\n\ndef g(nums=[1, 5, 3, 9, 2]):\n    return nums\n\nassert f(g()) == 9\n",
        "idx_generation": 482,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, n: int) -> bool:\n    \"\"\"Check if a string has a length equal to a specific number.\"\"\"\n    return len(s) == n\n\ndef g():\n    return (\"Hello\", 5)\n\nassert f(*g()) == True\n",
        "idx_generation": 183,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n: int, target: int) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if there exists a combination of n numbers in the list that sums up to the target value.\"\"\"\n    def find_combination(curr_sum, count):\n        if count == n and curr_sum == target:\n            return True\n        if count > n or curr_sum > target:\n            return False\n        for i in range(len(nums)):\n            if find_combination(curr_sum + nums[i], count + 1):\n                return True\n        return False\n\n    return find_combination(0, 0)\n\n\ndef g(nums = [1, 2, 3, 4, 5], n = 3, target = 9):\n    return (nums, n, target)\n\n\nassert f(*g()) == True\n\n",
        "idx_generation": 321,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the sum of all the numbers that have a digit 9 in the list.\n    \"\"\"\n    digit_sum = 0\n    for num in nums:\n        if '9' in str(num):\n            digit_sum += num\n    return digit_sum\n\ndef g():\n    return [9, 19, 29, 39, 49]\n\nassert f(g()) == 145\n\n",
        "idx_generation": 290,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains any repeated elements.\n    \"\"\"\n    return len(set(nums)) < len(nums)\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    \"\"\"\n    This solution returns the input list as is\n    \"\"\"\n    return nums\n\nassert f(g()) == False\n\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(dictionary: Dict[str, int], target: int) -> Tuple[str, str]:\n    \"\"\"\n    Find the pair of values in the dictionary whose sum is closest to the target value.\n    Return a tuple containing the pair.\n    \"\"\"\n    values = list(dictionary.values())\n    closest_sum = float('inf')\n    closest_pair = None\n    for i in range(len(values)):\n        for j in range(i+1, len(values)):\n            current_sum = values[i] + values[j]\n            if abs(current_sum - target) < abs(closest_sum - target):\n                closest_sum = current_sum\n                closest_pair = (values[i], values[j])\n    return closest_pair\n\ndef g(dictionary={\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}, target=7):\n    return (dictionary, target)\n\nassert f(*g()) == (2, 5)\n",
        "idx_generation": 374,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the sum of all the positive numbers in the given list.\n    \"\"\"\n    return sum(num for num in nums if num > 0)\n\ndef g():\n    nums = [-2, 4, -6, 8, -10]\n    return nums\n\nassert f(g()) == 12\n\n",
        "idx_generation": 244,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if any two numbers in the list add up to the target number.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 7\n    output: True\n\n    Explanation: The numbers 2 and 5 add up to 7.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 7\n\nassert f(*g()) == True\n\n\n",
        "idx_generation": 476,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the length of the longest increasing subsequence in the given list of numbers.\n    \"\"\"\n    n = len(nums)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\ndef g(nums: List[int] = [4, 2, 9, 7, 5, 8, 10]):\n    return nums\n\nassert f(g()) == 4\n",
        "idx_generation": 195,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Given a string, check if it is a palindrome.\n\n    Sample Input:\n    \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return string == string[::-1]\n\ndef g(string=\"racecar\"):\n    return string\n\nassert f(g()) == True\n",
        "idx_generation": 394,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python', length=4) -> bool:\n    \"\"\"Check if the given string is a substring with length length of the target string\"\"\"\n    return s in target and len(s) == length\ndef g(target='python', length=4):\n    return target[1:5]\nassert f(g())\n",
        "idx_generation": 311,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, substrings=['abc', 'def', 'ghi', 'jkl']) -> bool:\n    \"\"\"\n    Find the number of times each substring appears in a string\n    \"\"\"\n    counts = {}\n    for sub in substrings:\n        counts[sub] = s.count(sub)\n    return counts\n\ndef g(substrings=['abc', 'def', 'ghi', 'jkl']):\n    return ''.join(substrings)\nassert f(g()) == {'abc': 1, 'def': 1, 'ghi': 1, 'jkl': 1}\n",
        "idx_generation": 167,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum number in the list.\n\n    Sample input:\n    [1, 5, 3, 2, 4]\n\n    Sample output:\n    5\n    \"\"\"\n    return max(nums)\n\ndef g():\n    return [1, 5, 3, 2, 4]\n\nassert f(g()) == 5\n\n",
        "idx_generation": 445,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> int:\n    \"\"\"\n    Given a list of lists of integers, find the minimum sum of a subarray within each list and return the sum of the minimum subarray sums.\n\n    Example:\n    nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    The minimum subarray sums are [1, 4, 7].\n    The sum of the minimum subarray sums is 1 + 4 + 7 = 12.\n\n    Therefore, f(nums) returns 12.\n    \"\"\"\n    result = 0\n    for sublist in nums:\n        min_sum = float('inf')\n        curr_sum = 0\n        for num in sublist:\n            curr_sum += num\n            min_sum = min(min_sum, curr_sum)\n            if curr_sum > 0:\n                curr_sum = 0\n        result += min_sum\n    return result\n\ndef g(nums: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums\n\nassert f(g()) == 12\n",
        "idx_generation": 485,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, determine if it is an anagram of a palindrome.\n\n    Sample Input:\n    \"tacocat\"\n\n    Sample Output:\n    True\n    \"\"\"\n    char_counts = {}\n    for char in s:\n        char_counts[char] = char_counts.get(char, 0) + 1\n    odd_count = 0\n    for count in char_counts.values():\n        if count % 2 != 0:\n            odd_count += 1\n    return odd_count <= 1\n\ndef g():\n    return \"tacocat\"\n\nassert f(g()) == True\n",
        "idx_generation": 192,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains any negative numbers.\"\"\"\n    return any(num < 0 for num in nums)\n\ndef g(nums: List[int] = [1, -2, 3, -4, 5]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"Find if there are count numbers that multiply to the target, but the numbers can be repeated\"\"\"\n    return any(nums[i] ** count == target for i in range(len(nums)))\ndef g(target: int = 100, count: int = 2, nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return (nums, target, count)\nassert f(*g()) == True\n\n",
        "idx_generation": 293,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains at least one duplicate element.\n    \"\"\"\n    return len(set(nums)) != len(nums)\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 1]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 310,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if the list contains any perfect squares, otherwise return False.\n\n    Sample Input:\n    nums = [4, 6, 8, 9, 10]\n\n    Sample Output:\n    True\n    \"\"\"\n    def is_perfect_square(n):\n        if n < 0:\n            return False\n        sqrt = int(math.sqrt(n))\n        return sqrt * sqrt == n\n\n    return any(is_perfect_square(num) for num in nums)\n\ndef g():\n    return [4, 6, 8, 9, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 375,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if it is a palindrome.\n\n    Sample Input:\n    arr = [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return arr == arr[::-1]\n\ndef g(arr: List[int] = [1, 2, 3, 2, 1]):\n    return arr\n\nassert f(g()) == True\n\n",
        "idx_generation": 245,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with only the even numbers.\n\n    Example:\n    arr = [1, 2, 3, 4, 5]\n    output: [2, 4]\n    \"\"\"\n    return [num for num in arr if num % 2 == 0]\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == [2, 4]\n\n\n",
        "idx_generation": 476,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(num: int, target_sum=15) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sums up to the target sum.\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    \n    return subset_sum(num, target_sum)\n\ndef g(target_sum=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 200,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[str], target: str) -> bool:\n    \"\"\"\n    Check if the target string is a subsequence of the given list of strings.\n    Return True if it is, else False.\n    \"\"\"\n    for s in lst:\n        if target in s:\n            return True\n    return False\n\ndef g(lst: List[str] = ['apple', 'banana', 'cherry'], target: str = 'ban'):\n    return lst, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 395,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of ten people having the same birthday in a group of n is near 1/10.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 1/10) ** 2 <= year_len\ndef g(year_len = 365):\n    n = 1\n    distinct_prob = 1.0\n    best = (1/10, 1)  # (difference between probability and 1/10, n)\n    while distinct_prob > 1/10:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(1/10 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True\n",
        "idx_generation": 328,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(big_str: str, sub_str='python', index=0) -> bool:\n    \"\"\"Find a string whose *first* index of sub_str is index\"\"\"\n    return big_str.index(sub_str) == index\n\ndef g(sub_str = 'python', index = 0):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str\n\nassert f(g()) == True\n",
        "idx_generation": 178,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], k: int) -> List[int]:\n    \"\"\"\n    Given a list of integers, return the top k elements from the list in descending order.\n\n    Sample input:\n    [5, 3, 8, 2, 9], 3\n\n    Sample output:\n    [9, 8, 5]\n    \"\"\"\n    return sorted(nums, reverse=True)[:k]\n\ndef g():\n    return [5, 3, 8, 2, 9], 3\n\nassert f(*g()) == [9, 8, 5]\n\n",
        "idx_generation": 445,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Find the number of unique pairs in the list that sum up to the target value.\n    \"\"\"\n    count = 0\n    nums.sort()\n    left = 0\n    right = len(nums) - 1\n    \n    while left < right:\n        curr_sum = nums[left] + nums[right]\n        if curr_sum == target:\n            count += 1\n            left += 1\n            right -= 1\n        elif curr_sum < target:\n            left += 1\n        else:\n            right -= 1\n    \n    return count\n\ndef g(nums: List[int], target: int):\n    return nums, target\n\nassert f(*g([1, 2, 3, 4, 5, 6, 7], 8)) == 3\n\n",
        "idx_generation": 487,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(lst: List[int], target=50) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to the target.\"\"\"\n    return any(lst[i] + lst[j] == target for i in range(len(lst)) for j in range(i+1, len(lst)))\ndef g(target=50):\n    return [10, 20, 30, 40, 50]\nassert f(g()) == True\n",
        "idx_generation": 208,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list whose product is equal to the target value.\n\n    Sample Input:\n    [2, 4, 6, 8], 16\n\n    Sample Output:\n    True\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if target % num == 0 and target // num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g() -> List[int]:\n    return [2, 4, 6, 8]\n\nassert f(g(), 16) == True\n",
        "idx_generation": 342,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given nested list whose product is equal to 20.\n    \"\"\"\n\n    num_set = set()\n    for lst in nums:\n        for num in lst:\n            if num != 0 and 20 % num == 0 and 20 // num in num_set:\n                return True\n            num_set.add(num)\n    return False\n\ndef g(nums: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 300,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import *\nimport random\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subsequence with a sum equal to the target.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n    output: True\n    \"\"\"\n    for r in range(len(nums) + 1):\n        for combination in itertools.combinations(nums, r):\n            if sum(combination) == target:\n                return True\n    return False\n\ndef g(target: int):\n    nums = [random.randint(1, 10) for _ in range(6)]\n    return nums, target\n\nassert f(*g(15)) == True\n",
        "idx_generation": 324,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a pair of elements such that their product is equal to 24.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] == 24:\n                return True\n    return False\n\ndef g():\n    \"\"\"Generate a list of integers.\"\"\"\n    return [2, 3, 4, 6, 8]\n\nassert f(g()) == True\n\n",
        "idx_generation": 377,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose sum is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return nums, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 246,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the product of all the elements in the list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n\n    The product of all the elements in the list is 1 * 2 * 3 * 4 * 5 = 120.\n    Therefore, f(nums) returns 120.\n    \"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n    return product\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == 120\n",
        "idx_generation": 476,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, k: int) -> int:\n    \"\"\"\n    Given two integers n and k, find the kth digit from the right in the binary representation of n.\n    Assume n is a positive integer.\n    \"\"\"\n    assert k > 0, 'Hint: k is a positive integer'\n    binary = bin(n)[2:]\n    if len(binary) < k:\n        return -1\n    return int(binary[-k])\n\ndef g(n=10, k=3):\n    return n\n\nassert f(g(), 2)\n",
        "idx_generation": 201,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, char: str) -> bool:\n    \"\"\"\n    Given a word and a character, return True if the character exists in the word,\n    otherwise return False.\n\n    Sample input:\n    word = \"hello\"\n    char = \"o\"\n\n    Sample output:\n    True\n\n    Explanation: The character 'o' exists in the word \"hello\".\n    \"\"\"\n    return char in word\n\ndef g(word=\"hello\", char=\"o\"):\n    return word, char\n\nassert f(*g()) == True\n",
        "idx_generation": 396,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if the maximum element of each combination is equal to the target_sum\n    for combo in combinations:\n        if max(combo) == target_sum:\n            return True\n\n    return False\n\ndef g(k=2, target_sum=8):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), k=2, target_sum=8) == True\n",
        "idx_generation": 335,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, k: int) -> bool:\n    \"\"\"\n    Given a string s and an integer k, check if it is possible to rearrange the characters of s such that no two adjacent characters are the same and the resulting string has exactly k distinct characters.\n\n    Sample Input:\n    s = \"aabbc\"\n    k = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    freq = {}\n    for char in s:\n        freq[char] = freq.get(char, 0) + 1\n\n    max_freq = max(freq.values())\n    if max_freq > (len(s) + 1) // 2:\n        return False\n\n    return len(freq) >= k\n\ndef g():\n    return \"aabbc\", 3\n\nassert f(*g())\n",
        "idx_generation": 178,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a Latin square.\n    A Latin square is a grid where each element appears exactly once in each row and each column.\n\n    Sample Input:\n    arr = [[1, 2, 3], [2, 3, 1], [3, 1, 2]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    nums = set(range(1, n+1))\n\n    # Check rows\n    for row in arr:\n        if set(row) != nums:\n            return False\n\n    # Check columns\n    for col in range(n):\n        if set(arr[row][col] for row in range(n)) != nums:\n            return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [2, 3, 1], [3, 1, 2]]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 445,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\nimport random\n\ndef f(li: List[int], target_sum: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target sum, determine if it is possible to select a subset of the list\n    elements such that their sum is greater than or equal to the target sum.\n\n    Sample input:\n    [1, 2, 3, 4, 5], 9\n\n    Sample output:\n    True\n    \"\"\"\n    def subset_sum(li, target_sum):\n        n = len(li)\n        dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n        for i in range(n + 1):\n            dp[i][0] = True\n        for i in range(1, n + 1):\n            for j in range(1, target_sum + 1):\n                if li[i - 1] > j:\n                    dp[i][j] = dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j] or dp[i - 1][j - li[i - 1]]\n        return dp[n][target_sum]\n    \n    random.shuffle(li)\n    return subset_sum(li, target_sum)\n\ndef g(li: List[int] = [1, 2, 3, 4, 5], target_sum: int = 9):\n    return (li, target_sum)\n\nassert f(*g())\n",
        "idx_generation": 492,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(text: str, substr='hello') -> bool:\n    \"\"\"\n    Determine if a given substring is present in the given text.\n\n    Sample input:\n    'Hello, world!'\n\n    Sample output:\n    True\n\n    The substring 'Hello' is present in the text.\n    \"\"\"\n    return substr.lower() in text.lower()\n\ndef g(substr='hello'):\n    return 'Hello, world!'\n\nassert f(g()) == True\n",
        "idx_generation": 211,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that add up to the target sum\"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target_sum:\n                return True\n            elif current_sum < target_sum:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(target_sum=100):\n    return [1, 2, 4, 5, 10, 20, 25, target_sum - 25]\n\nassert f(g()) == True\n",
        "idx_generation": 348,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"\n    Given a string s and a target substring, check if the target substring appears at least twice consecutively in s.\n\n    Sample Input:\n    s = \"hellohello\"\n    target = \"hello\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return target * 2 in s\n\ndef g(s: str = \"hellohello\", target: str = \"hello\"):\n    return s, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 303,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list contains any duplicate numbers.\"\"\"\n    return len(numbers) != len(set(numbers))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == False\n\n",
        "idx_generation": 329,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"\n    Determine if it is possible to find a pair of numbers in a list that sums up to a target number. The pair of numbers\n    must be distinct and the order of the numbers in the pair does not matter.\n\n    Sample input:\n    [5, 10, 15, 20]\n\n    Sample output:\n    True\n\n    The pair of numbers (10, 15) sums up to 25, which is the target number.\n    \"\"\"\n    return any(num1 + num2 == target for i, num1 in enumerate(numbers) for num2 in numbers[i+1:])\n\ndef g(target=0):\n    return [5, 10, 15, target - 10]\n\nassert f(g()) == True\n",
        "idx_generation": 379,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of numbers, find the maximum difference between any two numbers in the list.\n\n    Example:\n    nums = [2, 5, 8, 10]\n    output: 8 (8 - 2 = 6)\n    \"\"\"\n    if len(nums) < 2:\n        return 0\n    max_diff = 0\n    min_num = nums[0]\n    for num in nums[1:]:\n        max_diff = max(max_diff, num - min_num)\n        min_num = min(min_num, num)\n    return max_diff\n\ndef g():\n    return [2, 5, 8, 10]\n\nassert f(g()) == 8\n\n",
        "idx_generation": 248,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find two numbers in the list that add up to the given target.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return [nums[i], nums[j]]\n    return []\n\ndef g(target=12):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g(), target=12) == [3, 9]\n",
        "idx_generation": 477,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that sums up to the target value, considering that each number can be used multiple times.\n\n    Sample Input:\n    [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 180\n\n    Sample Output:\n    True\n    \"\"\"\n    def find_combination(curr_sum):\n        if curr_sum == target:\n            return True\n        if curr_sum > target:\n            return False\n        for num in nums:\n            if find_combination(curr_sum + num):\n                return True\n        return False\n\n    return find_combination(0)\n\ndef g():\n    return ([10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 180)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 202,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['p', 'a', 'l', 'i', 'n', 'd', 'r', 'o', 'm', 'e']) -> bool:\n    \"\"\"\n    Check if a string is a palindrome and contains all the given substrings\n    \"\"\"\n    return s == s[::-1] and all(sub in s for sub in substrings)\n\ndef g(substrings = ['p', 'a', 'l', 'i', 'n', 'd', 'r', 'o', 'm', 'e']):\n    return \"\".join(substrings + substrings[::-1])\n    \nassert f(g())\n",
        "idx_generation": 396,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if the product of each combination is equal to the target_sum\n    for combo in combinations:\n        product = 1\n        for num in combo:\n            product *= num\n        if product == target_sum:\n            return True\n\n    return False\n\ndef g(k=3, target_sum=24):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), k=3, target_sum=24) == True\n",
        "idx_generation": 335,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(word: str, anagram: str = 'llohe') -> bool:\n    \"\"\"Check if the given word has an anagram that matches the provided anagram.\"\"\"\n    word_permutations = [''.join(p) for p in permutations(word)]\n    return any(w == anagram for w in word_permutations)\n\ndef g(anagram: str = 'llohe'):\n    return 'hello'\n\nassert f(g()) == True\n",
        "idx_generation": 200,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a sorted list of integers in ascending order and a target integer, find two distinct\n    indices i and j in the list such that arr[i] + arr[j] == target.\n\n    Example:\n    arr = [1, 3, 5, 7, 9]\n    target = 10\n\n    The sum of arr[0] and arr[4] is equal to the target.\n    Therefore, f(arr, target) returns [0, 4].\n    \"\"\"\n    i, j = 0, len(arr) - 1\n    while i < j:\n        if arr[i] + arr[j] == target:\n            return [i, j]\n        elif arr[i] + arr[j] < target:\n            i += 1\n        else:\n            j -= 1\n    return []\n\ndef g(arr: List[int] = [1, 3, 5, 7, 9], target: int = 10):\n    return arr, target\n\nassert f(*g()) == [0, 4]\n",
        "idx_generation": 446,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a triplet of numbers that sum up to the target.\n    If such a triplet exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            complement = target - nums[i] - nums[j]\n            if complement in nums_set and complement != nums[i] and complement != nums[j]:\n                return True\n    return False\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8], target: int = 11):\n    return nums, target\n\nassert f(*g()) == True\n",
        "idx_generation": 495,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sentence: str, word='python') -> bool:\n    \"\"\"\n    Check if the given word is present in the sentence.\n    \"\"\"\n    words = sentence.split()\n    return word in words\n\ndef g(sentence = 'I love programming in python'):\n    return sentence\n\nassert f(g()) == True\n\n",
        "idx_generation": 228,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a subsequence where the product of its elements is a prime number.\n\n    A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    \n    Sample output:\n    True\n    \n    Explanation: The subsequence [2, 3, 5] has a product of 30, which is a prime number.\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            subsequence = nums[i:j]\n            product = 1\n            for num in subsequence:\n                product *= num\n            if is_prime(product):\n                return True\n    \n    return False\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 350,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if a given string is a palindrome.\n    \"\"\"\n    return string == string[::-1]\n\ndef g(string: str):\n    \"\"\"\n    This solution returns the input string as is.\n    \"\"\"\n    return string\n\nassert f(g(\"racecar\"))\n",
        "idx_generation": 304,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a subarray that has a product equal to a target value.\n\n    A subarray is a contiguous part of an array.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample output:\n    True\n\n    Explanation: The subarray [2, 3] has a product of 6, which is equal to the target value.\n    \"\"\"\n    target = 6\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            subarray = nums[i:j]\n            product = 1\n            for num in subarray:\n                product *= num\n            if product == target:\n                return True\n    \n    return False\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 337,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[List[int]]:\n    \"\"\"\n    Given a list of integers and a target value, find all pairs of numbers that sum up to the target.\n    \"\"\"\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                pairs.append([nums[i], nums[j]])\n    return pairs\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 6):\n    \"\"\"\n    This solution returns the input list and target value as is.\n    \"\"\"\n    return nums, target\n\nassert f(*g()) == [[1, 5], [2, 4]]\n\n",
        "idx_generation": 381,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix, transpose it by swapping its rows and columns.\n\n    Sample Input:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\n    Sample Output:\n    [\n        [1, 4, 7],\n        [2, 5, 8],\n        [3, 6, 9]\n    ]\n    \"\"\"\n    return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n\n",
        "idx_generation": 254,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the sum of all the even elements in the list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n\n    The sum of all the even elements in the list is 2 + 4 = 6.\n    Therefore, f(nums) returns 6.\n    \"\"\"\n    even_sum = 0\n    for num in nums:\n        if num % 2 == 0:\n            even_sum += num\n    return even_sum\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == 6\n",
        "idx_generation": 477,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find and return the length of the longest increasing subsequence.\n\n    Example:\n    arr = [10, 9, 2, 5, 3, 7, 101, 18]\n\n    Output:\n    4\n\n    Explanation: The longest increasing subsequence is [2, 3, 7, 101].\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\ndef g():\n    return [10, 9, 2, 5, 3, 7, 101, 18]\n\nassert f(g()) == 4\n\n",
        "idx_generation": 207,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[str]) -> bool:\n    \"\"\"\n    Given a list of strings, check if there is a string that starts and ends with the same letter.\n\n    Sample Input:\n    arr = ['hello', 'world', 'python', 'wow']\n\n    Sample Output:\n    True\n    \"\"\"\n    for string in arr:\n        if string[0] == string[-1]:\n            return True\n\n    return False\n\ndef g(arr: List[str] = ['hello', 'world', 'python', 'wow']):\n    return arr\n\nassert f(g()) == True\n\n",
        "idx_generation": 397,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to a target sum greater than or equal to target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if the sum of each combination is greater than or equal to the target_sum\n    for combo in combinations:\n        if sum(combo) >= target_sum:\n            return True\n\n    return False\n\ndef g(k=5, target_sum=30):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n\nassert f(g(), k=5, target_sum=30) == True\n",
        "idx_generation": 339,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(strings: List[str], substring: str) -> bool:\n    \"\"\"\n    Check if a given substring is present in any of the strings in the list.\n    \"\"\"\n    for s in strings:\n        if substring in s:\n            return True\n    return False\n\ndef g(strings: List[str] = ['apple', 'banana', 'cherry'], substring: str = 'ana'):\n    return strings, substring\n\nassert f(*g()) == True\n\n",
        "idx_generation": 203,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Rearrange the elements in the given list such that all even numbers appear before odd numbers.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Sample Output:\n    [2, 4, 6, 8, 10, 1, 3, 5, 7, 9]\n    \"\"\"\n    even_nums = [num for num in arr if num % 2 == 0]\n    odd_nums = [num for num in arr if num % 2 != 0]\n    return even_nums + odd_nums\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == [2, 4, 6, 8, 10, 1, 3, 5, 7, 9]\n\n",
        "idx_generation": 448,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    A palindrome is a word, phrase, number, or other sequence of characters that reads the same backward as forward.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 4, 3, 2, 1]\n\nassert f(g()) == True\n",
        "idx_generation": 229,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if there exists a subsequence of the list that sums up to 0, otherwise return False.\n\n    Sample Input:\n    lst = [1, -2, 3, 4, -5]\n\n    Sample Output:\n    True\n    \"\"\"\n    for r in range(1, len(lst) + 1):\n        for subset in itertools.combinations(lst, r):\n            if sum(subset) == 0:\n                return True\n    return False\n\ndef g():\n    return [1, -2, 3, 4, -5]\n\nassert f(g()) == True\n\n",
        "idx_generation": 373,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are exactly 'count' numbers that form a valid fibonacci sequence with a common difference of 'target'.\n\n    Sample Input:\n    nums = [1, 2, 3, 5, 8]\n    target = 1\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(nums[i] + target == nums[i+1] and nums[i+1] + target == nums[i+2] for i in range(len(nums)-2))\n\ndef g(nums: List[int] = [1, 2, 3, 5, 8], target: int = 1, count: int = 3):\n    return (nums, target, count)\n\nassert f(*g())\n",
        "idx_generation": 313,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given nested list whose difference is equal to 3.\n    \"\"\"\n\n    num_set = set()\n    for lst in nums:\n        for num in lst:\n            if num - 3 in num_set:\n                return True\n            num_set.add(num)\n    return False\n\ndef g(nums: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums\n\nassert f(g()) == True\n\n",
        "idx_generation": 342,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers `nums` and a target number `target`, find the two numbers that add up to the target.\n    Return the product of the two numbers.\n\n    For example, if nums = [2, 4, 6, 8] and target = 10, the pair (2, 8) adds up to the target and the product is 16.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return num * complement\n    return -1\n\ndef g(nums: List[int] = [2, 4, 6, 8], target: int = 10):\n    return (nums, target)\n\nassert f(*g()) == 16\n\n",
        "idx_generation": 384,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that sum up to the target value.\n    \"\"\"\n    seen = set()\n\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n\n    return False\n\ndef g(arr: List[int] = [2, 4, 6, 8, 10], target: int = 14):\n    return arr, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 263,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"\n    Return True if there exists a pair of numbers in the list whose product is equal to the target value.\n    \"\"\"\n    return any(arr[i] * arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr)))\ndef g(target=0):\n    arr = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n    return arr\nassert f(g()) == False\n\n",
        "idx_generation": 478,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subsequence of numbers in a list that sums up to a given target\"\"\"\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target, num - 1, -1):\n            if dp[i - num]:\n                dp[i] = True\n    return dp[target]\n\ndef g(nums=[1, 2, 3, 4, 5], target=15):\n    return nums, target\n\nassert f(g()[0], g()[1])\n",
        "idx_generation": 213,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> str:\n    \"\"\"\n    Given a string, reverse the order of the words in the string.\n\n    Example:\n    string = \"Hello World\"\n    Output: \"World Hello\"\n    \"\"\"\n    words = string.split()\n    reversed_string = \" \".join(words[::-1])\n    return reversed_string\n\ndef g(string: str = \"Hello World\"):\n    return string\n\nassert f(g()) == \"World Hello\"\n",
        "idx_generation": 398,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are exactly k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any combination sums up to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False\n\ndef g(k=3, target_sum=15):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), k=3, target_sum=15) == True\n\n",
        "idx_generation": 344,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import permutations\n\ndef f(string: str) -> bool:\n    \"\"\"Check if the given string is a palindrome permutation.\"\"\"\n    string = string.lower().replace(\" \", \"\")\n    char_count = {}\n\n    for char in string:\n        char_count[char] = char_count.get(char, 0) + 1\n\n    odd_count = 0\n    for count in char_count.values():\n        if count % 2 != 0:\n            odd_count += 1\n\n    return odd_count <= 1\n\ndef g():\n    string = \"Tact Coa\"\n    return string\n\nassert f(g()) == True\n",
        "idx_generation": 236,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int, k: int) -> bool:\n    \"\"\"\n    Determine if there exists k consecutive elements in the given list whose sum is equal to the target number.\n    \"\"\"\n    for i in range(len(arr) - k + 1):\n        if sum(arr[i:i+k]) == target:\n            return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7], target: int = 12, k: int = 3):\n    return arr, target, k\n\nassert f(*g()) == True\n",
        "idx_generation": 449,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix, transpose the matrix (rows become columns and columns become rows).\n    Return the transposed matrix.\n    \"\"\"\n    return np.transpose(matrix).tolist()\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return (matrix,)\n\nassert f(*g()) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n",
        "idx_generation": 230,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subset of numbers in the given list that add up to the target value.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n    \n    Sample output:\n    True\n    \n    Explanation: The subset [2, 3, 4] adds up to the target value of 9.\n    \"\"\"\n    dp = [[False] * (target + 1) for _ in range(len(nums) + 1)]\n    \n    for i in range(len(nums) + 1):\n        dp[i][0] = True\n    \n    for i in range(1, len(nums) + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    \n    return dp[-1][-1]\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 9)\n",
        "idx_generation": 378,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a sparse matrix.\n    A sparse matrix is a matrix in which most of the elements are zero.\n\n    Sample Input:\n    arr = [[1, 0, 0], [0, 0, 0], [0, 0, 2]]\n\n    Sample Output:\n    True\n    \"\"\"\n    count = 0\n    total = 0\n\n    for row in arr:\n        for num in row:\n            total += 1\n            if num == 0:\n                count += 1\n\n    return count / total >= 0.5\n\ndef g(arr: List[List[int]] = [[1, 0, 0], [0, 0, 0], [0, 0, 2]]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 323,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers `nums` and a target number `target`, find if there exists a pair of numbers in `nums`\n    such that their difference is equal to the target number.\n\n    For example, if nums = [1, 2, 3, 4, 5] and target = 2, the pair (3, 1) has a difference of the target number.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        if num - target in num_set:\n            return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 2):\n    return (nums, target)\n\nassert f(*g()) == True\n",
        "idx_generation": 347,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given nested list whose product is equal to 24.\n    \"\"\"\n\n    num_set = set()\n    for lst in nums:\n        for num in lst:\n            if 24 % num == 0 and 24 // num in num_set:\n                return True\n            num_set.add(num)\n    return False\n\ndef g(nums: List[List[int]] = [[1, 2, 3], [4, 6, 8], [9, 10, 12]]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 391,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the sum of all prime numbers in the given list.\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return sum(num for num in nums if is_prime(num))\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g()) == 17\n\n",
        "idx_generation": 266,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a square matrix.\n    \"\"\"\n    return all(len(row) == len(matrix) for row in matrix)\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g()) == True\n\n",
        "idx_generation": 478,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given an array of integers, check if the array can be divided into two subarrays of equal sum.\n\n    Sample Input:\n    arr = [5, 2, 6, 1, 4, 1, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    total_sum = sum(arr)\n    if total_sum % 2 != 0:\n        return False\n    target_sum = total_sum // 2\n    current_sum = 0\n    visited = set()\n    for num in arr:\n        current_sum += num\n        if current_sum == target_sum:\n            return True\n        if current_sum - target_sum in visited:\n            return True\n        visited.add(current_sum)\n    return False\n\ndef g():\n    return [5, 2, 6, 1, 4, 1, 5]\n\nassert f(g()) == True\n",
        "idx_generation": 236,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 4, 3, 2, 1]\n\nassert f(g()) == True\n",
        "idx_generation": 398,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are more than k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any combination sums up to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False\n\ndef g(k=5, target_sum=40):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), k=5, target_sum=40) == True\n\n",
        "idx_generation": 344,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target value, count the number of occurrences of the target value in the list.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num == target:\n            count += 1\n    return count\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 5):\n    return (nums, target)\n\nassert f(*g()) == 1\n",
        "idx_generation": 260,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose sum is equal to the target number.\n    \"\"\"\n    nums.sort()\n    left = 0\n    right = len(nums) - 1\n    while left < right:\n        curr_sum = nums[left] + nums[right]\n        if curr_sum == target:\n            return True\n        elif curr_sum < target:\n            left += 1\n        else:\n            right -= 1\n    return False\n\ndef g(nums: List[int] = [1, 4, 5, 2, 8, 3], target: int = 9):\n    return nums, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 450,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"Check if s1 is an anagram of s2.\"\"\"\n    return sorted(s1) == sorted(s2)\n\ndef g():\n    s1 = \"listen\"\n    s2 = \"silent\"\n    return (s1, s2)\n\nassert f(*g()) == True\n",
        "idx_generation": 235,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subsequence of the list whose sum is greater than the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return any(dp[n][j] for j in range(target + 1) if j > target)\n\ndef g(nums=[2, 4, 6, 8], target=10):\n    return nums, target\n\nassert f(*g()) == False\n",
        "idx_generation": 393,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a subsequence that is a perfect square.\n\n    A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n    Sample input:\n    nums = [1, 4, 3, 8, 9]\n    \n    Sample output:\n    True\n    \n    Explanation: The subsequence [1, 4, 9] is a perfect square.\n    \"\"\"\n    squares = {1, 4, 9, 16, 25, 36, 49, 64, 81, 100}\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            subsequence = nums[i:j]\n            if any(num in squares for num in subsequence):\n                return True\n    \n    return False\n\ndef g() -> List[int]:\n    return [1, 4, 3, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 350,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers `nums` and a target number `target`, find if there exists a pair of numbers in `nums`\n    such that their sum is equal to the target number.\n\n    For example, if nums = [1, 2, 3, 4, 5] and target = 9, the pair (4, 5) has a sum of the target number.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        if target - num in num_set:\n            return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (nums, target)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 349,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiply to give an odd product.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] % 2 != 0:\n                return True\n    return False\n\ndef g(nums=[2, 4, 6, 8]):\n    return nums\n\nassert f(g()) == False\n",
        "idx_generation": 394,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers arr, check if the target number is present in the list.\n    \"\"\"\n    return target in arr\n\ndef g(arr=[1, 2, 3, 4, 5], target=3):\n    return (arr, target)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 267,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, find the sum of all the elements in the matrix.\n    \"\"\"\n    return sum(sum(row) for row in matrix)\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 45\n",
        "idx_generation": 479,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int, k: int = 2) -> List[int]:\n    \"\"\"\n    Find k numbers in the given list nums that sum up to the target value.\n    \"\"\"\n    result = []\n    def backtrack(remain, start, path):\n        if remain == 0 and len(path) == k:\n            result.append(path)\n            return\n        for i in range(start, len(nums)):\n            if nums[i] > remain:\n                break\n            backtrack(remain - nums[i], i + 1, path + [nums[i]])\n\n    backtrack(target, 0, [])\n    return result\n\ndef g(nums=[1, 2, 3, 4, 5], target=5, k=2):\n    return nums\n\nassert f(g(), target=5) == [[1, 4], [2, 3]]\n\n",
        "idx_generation": 237,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(string: str, substring='def') -> bool:\n    \"\"\"\n    Check if a given string contains a specific substring.\n    \"\"\"\n    return substring in string\ndef g(substring = 'def'):\n    return substring + 'abc'\nassert f(g()) == True\n",
        "idx_generation": 224,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nimport math\nfrom typing import*\ndef f(nums: List[int], target=100, count=3) -> bool:\n    \"\"\"Find if there are count numbers that multiply to the target\"\"\"\n    from itertools import combinations\n    return any(math.prod(c) == target for c in combinations(nums, count))\n\ndef g(target = 100, count = 3):\n    return [2, 5, 10, 20, 25, 40, 50, 80, 90, 100]\n\nassert f(g()) == True\n",
        "idx_generation": 359,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom collections import Counter\n\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is an anagram of a palindrome\"\"\"\n    char_count = Counter(s)\n    odd_count = 0\n    for count in char_count.values():\n        if count % 2 != 0:\n            odd_count += 1\n    return odd_count <= 1\n\ndef g(s: str = \"racecar\"):\n    return s\n\nassert f(g()) == True\n",
        "idx_generation": 281,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that add up to the target value.\n    \"\"\"\n\n    num_set = set()\n\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=7):\n    return nums, target\n\nassert f(*g()) == True\n\n\n",
        "idx_generation": 450,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"\n    Given two strings, check if they are anagrams of each other.\n    \"\"\"\n\n    return sorted(s1) == sorted(s2)\n\ndef g(s1='listen', s2='silent'):\n    return s1, s2\n\nassert f(*g()) == True\n",
        "idx_generation": 247,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subset of numbers in the given list that add up to the target value.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n    \n    Sample output:\n    True\n    \n    Explanation: The subset [2, 3, 4] adds up to the target value of 9.\n    \"\"\"\n    dp = [[False] * (target + 1) for _ in range(len(nums) + 1)]\n    \n    for i in range(len(nums) + 1):\n        dp[i][0] = True\n    \n    for i in range(1, len(nums) + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    \n    return dp[-1][-1]\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 9)\n",
        "idx_generation": 393,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(names: List[str], ages: List[int]) -> List[str]:\n    \"\"\"\n    Given a list of names and a list of ages, return the names of people who are above 18 years old.\n    \"\"\"\n    return [name for name, age in zip(names, ages) if age > 18]\n\ndef g(names=[\"Alice\", \"Bob\", \"Charlie\", \"David\"], ages=[20, 15, 25, 30]):\n    return names, ages\n\nassert f(*g()) == [\"Alice\", \"Charlie\", \"David\"]\n\n",
        "idx_generation": 382,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], n=4, s=20) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s and have at least one even number\"\"\"\n    return len(x) == n and sum(x) == s and any([a % 2 == 0 for a in x])\n\ndef g(n=4, s=20):\n    x = [2] * n\n    x[0] = s - (2 * (n - 1))\n    return x\n\nassert f(g()) == True\n",
        "idx_generation": 356,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of integers contains any prime numbers.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return any(is_prime(num) for num in nums)\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == True\n\n",
        "idx_generation": 401,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, find the maximum element in the matrix.\n    \"\"\"\n    result = float('-inf')\n    \n    for row in matrix:\n        for element in row:\n            if element > result:\n                result = element\n        \n    return result\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 9\n",
        "idx_generation": 271,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list x whose sum is equal to the target\"\"\"\n    n = len(x)\n    for i in range(n):\n        for j in range(i+1, n):\n            if x[i] + x[j] == target:\n                return True\n    return False\n\ndef g(x=[1, 2, 3, 4, 5], target=8):\n    return (x, target)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 479,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target: str) -> bool:\n    \"\"\"\n    Given a list of words and a target word, check if the target word can be formed by concatenating\n    any number of words from the list (words can be used more than once).\n\n    Sample Input:\n    words = [\"apple\", \"banana\", \"pear\", \"orange\"]\n    target = \"appleorange\"\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(words)\n    dp = [False] * (len(target) + 1)\n    dp[0] = True\n\n    for i in range(1, len(target) + 1):\n        for j in range(n):\n            if i >= len(words[j]) and dp[i - len(words[j])]:\n                if target[i - len(words[j]):i] == words[j]:\n                    dp[i] = True\n                    break\n\n    return dp[-1]\n\ndef g(words: List[str] = [\"apple\", \"banana\", \"pear\", \"orange\"], target: str = \"appleorange\"):\n    return (words, target)\n\nassert f(*g()) == True\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(names: List[str], letters: List[str]) -> bool:\n    \"\"\"\n    Check if all the names in the list 'names' start with any of the letters in the list 'letters'.\n    \"\"\"\n    return all(name[0] in letters for name in names)\n\ndef g(names = ['John', 'Jane', 'Jack'], letters = ['J', 'L', 'M']):\n    return names, letters\n\nassert f(*g()) == True\n",
        "idx_generation": 224,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target number, find the count of all occurrences of the target number in the list.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num == target:\n            count += 1\n    return count\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 5, 6, 7, 5], target: int = 5) -> List[int]:\n    return (nums, target)\n\nassert f(*g()) == 3\n",
        "idx_generation": 362,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target: int, n: int) -> bool:\n    \"\"\"\n    Check if there is a sequence of n consecutive numbers in the list lst that add up to the target.\n\n    Sample input:\n    lst = [1, 2, 3, 4, 5]\n    target = 9\n    n = 3\n\n    Sample output:\n    True\n\n    Explanation: The sequence of numbers (2, 3, 4) add up to 9 and they are present in the list.\n    \"\"\"\n    assert len(lst) >= n, 'Hint: The list should have at least n numbers.'\n    return any(sum(lst[i:i+n]) == target for i in range(len(lst)-n+1))\n\ndef g(lst=[1, 2, 3, 4, 5], target=9, n=3):\n    return lst, target, n\n\nassert f(*g()) == True\n",
        "idx_generation": 285,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Find the product of the main diagonal elements in a given matrix.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]]\n    output: 45\n    \"\"\"\n    product = 1\n    for i in range(len(matrix)):\n        product *= matrix[i][i]\n    return product\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == 45\n",
        "idx_generation": 451,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if any two elements in the list sum up to a given target.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    target = 9\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g()) == True\n\n",
        "idx_generation": 248,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subsequence of the list whose sum is greater than the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return any(dp[n][j] for j in range(target + 1) if j > target)\n\ndef g(nums=[2, 4, 6, 8], target=10):\n    return nums, target\n\nassert f(*g()) == False\n\n",
        "idx_generation": 395,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=10) -> bool:\n    \"\"\"\n    Find a list of integers that contains exactly three distinct values, such that the product of the values is equal to the target.\n    \"\"\"\n    return len(set(li)) == 3 and li[0] * li[1] * li[2] == target\n\ndef g(target=10):\n    return [1, 2, 5]\n\nassert f(g()) == True\n\n",
        "idx_generation": 382,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains any duplicate numbers.\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == False\n",
        "idx_generation": 373,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the prime numbers in the original list.\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return [num for num in nums if is_prime(num)]\n\ndef g():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return (nums,)\n\nassert f(*g()) == [2, 3, 5, 7]\n",
        "idx_generation": 402,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> List[int]:\n    \"\"\"\n    Find the coordinates of the target value in the given matrix.\n\n    Example:\n    matrix = [[1, 3, 5], [7, 9, 11], [13, 15, 17]]\n    target = 9\n    output: [1, 1]\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] == target:\n                return [i, j]\n\n    return []\n\ndef g(matrix: List[List[int]] = [[1, 3, 5], [7, 9, 11], [13, 15, 17]], target: int = 9):\n    return matrix, target\n\nassert f(*g()) == [1, 1]\n\n",
        "idx_generation": 273,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing the elements in reverse order.\n\n    Example:\n    nums = [2, 4, 2, 1, 2, 3, 2]\n\n    The reverse of the list is [2, 3, 2, 1, 2, 4, 2].\n    Therefore, f(nums) returns [2, 3, 2, 1, 2, 4, 2].\n    \"\"\"\n    return nums[::-1]\n\ndef g(nums: List[int] = [2, 4, 2, 1, 2, 3, 2]):\n    return nums\n\nassert f(g()) == [2, 3, 2, 1, 2, 4, 2]\n",
        "idx_generation": 479,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100, k=2) -> bool:\n    \"\"\"Check if there exists a group of k numbers in the list whose sum is equal to the target value.\"\"\"\n    def backtrack(nums, target, k, start, cur_sum):\n        if k == 0:\n            return cur_sum == target\n        for i in range(start, len(nums)):\n            if backtrack(nums, target, k - 1, i + 1, cur_sum + nums[i]):\n                return True\n        return False\n    \n    return backtrack(nums, target, k, 0, 0)\n\ndef g(target=100, k=2):\n    return list(range(1, target // k + 1))\n\nassert f(g()) == False\n\n",
        "idx_generation": 239,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if a string is a palindrome.\n\n    Sample Input:\n    string = \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return string == string[::-1]\n\ndef g(string: str = \"racecar\"):\n    return (string,)\n\nassert f(g()) == True\n",
        "idx_generation": 224,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any combination sums up to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False\n\ndef g(k=2, target_sum=7):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n\nassert f(g(), k=2, target_sum=7) == False\n\n",
        "idx_generation": 380,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is an anagram of a palindrome.\"\"\"\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    odd_count = 0\n    for count in char_count.values():\n        if count % 2 == 1:\n            odd_count += 1\n    \n    return odd_count <= 1\n\ndef g() -> str:\n    return \"racecar\"\n\nassert f(g()) == True\n",
        "idx_generation": 294,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target number, return the number of pairs of numbers in the list that add up to the target.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Output:\n    2\n\n    Explanation: There are 2 pairs of numbers ([4, 5], [3, 6]) in the list that add up to the target number 9.\n    \"\"\"\n    count = 0\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            count += 1\n    return count\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (nums, target)\n\nassert f(*g()) == 2\n",
        "idx_generation": 451,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str) -> bool:\n    \"\"\"Check if x is a palindrome.\"\"\"\n    return x == x[::-1]\ndef g():\n    return 'racecar'\nassert f(g()) == True\n\n",
        "idx_generation": 252,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are exactly 'count' numbers that form a valid arithmetic progression with a common difference of 'target'.\n\n    Sample Input:\n    nums = [1, 3, 5, 7, 9]\n    target = 2\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(nums[i] + target == nums[i+1] and nums[i+1] + target == nums[i+2] for i in range(len(nums)-2))\n\ndef g(nums: List[int] = [0, 2, 4, 6, 8], target: int = 2, count: int = 3):\n    return (nums, target, count)\n\nassert f(*g())\n",
        "idx_generation": 399,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'orange']) -> bool:\n    \"\"\"\n    Find a string that contains all the substrings reversed and forward\n    \"\"\"\n    return all((sub in s and sub[::-1] in s for sub in substrings))\n\ndef g(substrings = ['apple', 'banana', 'orange']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])\n\nassert f(g())\n",
        "idx_generation": 390,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Remove all duplicate elements from the given list and return a new list with unique elements.\n    The order of elements should be preserved.\n    \"\"\"\n    return list(set(arr))\n\ndef g():\n    return [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n\nassert f(g()) == [1, 2, 3, 4]\n\n",
        "idx_generation": 374,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> List[int]:\n    \"\"\"\n    Given an array of integers nums and an integer k, return the k most frequent elements in the array.\n\n    Example:\n    nums = [1, 1, 1, 2, 2, 3]\n    k = 2\n\n    Output: [1, 2]\n\n    Explanation: The two most frequent elements are 1 and 2.\n    \"\"\"\n    freq_dict = {}\n    for num in nums:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n    sorted_nums = sorted(freq_dict, key=lambda x: freq_dict[x], reverse=True)\n    return sorted_nums[:k]\n\ndef g(nums=[1, 1, 1, 2, 2, 3], k=2):\n    return nums, k\n\nassert f(*g()) == [1, 2]\n",
        "idx_generation": 405,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subarray with a sum divisible by k.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    k = 9\n    output: True\n    \"\"\"\n    prefix_sum = 0\n    seen = set()\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in seen:\n            return True\n        seen.add(prefix_sum)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 9\n\nassert f(*g()) == True\n\n",
        "idx_generation": 284,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Find if there exist three numbers in the list whose product is equal to the target number.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] * nums[j] * nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g(), 120) == True\n\n",
        "idx_generation": 479,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that sums up to the target value.\"\"\"\n    dp = [False] * (target + 1)\n    dp[0] = True\n\n    for num in nums:\n        for i in range(target, num - 1, -1):\n            if dp[i - num]:\n                dp[i] = True\n\n    return dp[target]\n\ndef g(nums: List[int], target: int):\n    return nums, target\n\nassert f(*g([2, 4, 6, 8], 10)) == True\n",
        "idx_generation": 240,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a palindrome.\n    A palindrome is a sequence of characters that reads the same forward and backward.\n\n    Sample Input:\n    nums = [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    start = 0\n    end = len(nums) - 1\n\n    while start < end:\n        if nums[start] != nums[end]:\n            return False\n        start += 1\n        end -= 1\n\n    return True\n\ndef g(nums: List[int] = [1, 2, 3, 2, 1]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 225,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> Tuple[int, int]:\n    \"\"\"\n    Given a matrix of integers and a target number, find the indices (row and column) of all occurrences of the target number in the matrix.\n    \"\"\"\n    indices = []\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target:\n                indices.append((i, j))\n    return indices\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 5\n    return (matrix, target)\n\nassert f(*g()) == [(1, 1)]\n",
        "idx_generation": 385,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(words: List[str], target_length=10) -> bool:\n    \"\"\"\n    Check if there is a combination of words that has a total length equal to the target length.\n\n    Sample Input:\n    words = [\"apple\", \"banana\", \"grape\", \"kiwi\", \"orange\"]\n    target_length = 15\n\n    Sample Output:\n    True\n    \"\"\"\n    def combination_length(words, target_length):\n        if target_length == 0:\n            return True\n        if not words or target_length < 0:\n            return False\n        return combination_length(words[1:], target_length - len(words[0])) or combination_length(words[1:], target_length)\n    return combination_length(words, target_length)\n\ndef g(words: List[str] = [\"apple\", \"banana\", \"grape\", \"kiwi\", \"orange\"], target_length = 15):\n    return words\n\nassert f(g()) == True\n",
        "idx_generation": 296,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given array is sorted in non-decreasing order.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 452,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], char='a') -> bool:\n    \"\"\"Check if there exists a word in the list that starts with the given character.\"\"\"\n    return any(word.startswith(char) for word in words)\n\ndef g(words = ['apple', 'banana', 'cherry', 'date'], char = 'a'):\n    return words\n\nassert f(g()) == True\n",
        "idx_generation": 253,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there are exactly 'count' numbers that form a valid arithmetic progression with a common difference of 'target'.\n\n    Sample Input:\n    nums = [1, 3, 5, 7, 9]\n    target = 2\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(nums[i] + target == nums[i+1] and nums[i+1] + target == nums[i+2] for i in range(len(nums)-2))\n\ndef g(nums: List[int] = [1, 3, 5, 7, 9], target: int = 2, count: int = 3):\n    return (nums, target, count)\n\nassert f(*g())\n",
        "idx_generation": 416,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given nested list whose difference is equal to 5.\n    \"\"\"\n\n    num_set = set()\n    for lst in nums:\n        for num in lst:\n            if num - 5 in num_set or num + 5 in num_set:\n                return True\n            num_set.add(num)\n    return False\n\ndef g(nums: List[List[int]] = [[1, 7, 3], [4, 2, 9], [6, 10, 8]]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 391,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list after sorting it in ascending order.\n    \"\"\"\n    nums.sort()\n    return nums\n\nassert f(g([3, 4, -7, 2, 1, 3, 1]), 4)\n",
        "idx_generation": 375,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if there exists a subarray (contiguous elements) whose sum is equal to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n\n    Explanation:\n    The subarray [2, 3, 4] has a sum of 9.\n    \"\"\"\n    n = len(nums)\n    prefix_sum = 0\n    prefix_sums = {0}\n    for i in range(n):\n        prefix_sum += nums[i]\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (nums, target)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 413,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import numpy as np\nfrom typing import*\n\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Check if there exists a submatrix in the given matrix that has a sum equal to the target.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    prefix_sum = np.zeros((rows + 1, cols + 1))\n    for i in range(1, rows + 1):\n        for j in range(1, cols + 1):\n            prefix_sum[i][j] = prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1] + matrix[i - 1][j - 1]\n\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i + 1, rows + 1):\n                for l in range(j + 1, cols + 1):\n                    submatrix_sum = prefix_sum[k][l] - prefix_sum[i][l] - prefix_sum[k][j] + prefix_sum[i][j]\n                    if submatrix_sum == target:\n                        return True\n    \n    return False\n\ndef g(matrix: List[List[int]]):\n    \"\"\"\n    This solution returns the input matrix as is.\n    \"\"\"\n    return matrix\n\nassert f(g([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), 12) == True\n\n",
        "idx_generation": 291,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> int:\n    \"\"\"\n    Find the sum of all numbers in the given list that are divisible by the target value.\n    \"\"\"\n    total = 0\n    for num in arr:\n        if num % target == 0:\n            total += num\n    return total\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 2):\n    return arr, target\n\nassert f(*g()) == 30\n\n",
        "idx_generation": 480,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that forms a subsequence with a sum equal to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        num = nums[i - 1]\n        for j in range(target + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j >= num:\n                dp[i][j] = dp[i][j] or dp[i - 1][j - num]\n\n    return dp[n][target]\n\ndef g(nums: List[int], target: int):\n    return nums, target\n\nassert f(*g([2, 4, 6, 8], 10)) == True\n",
        "idx_generation": 255,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any combination sums up to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False\n\ndef g(k=3, target_sum=15):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g(), k=3, target_sum=15) == True\n",
        "idx_generation": 426,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_length=10) -> bool:\n    \"\"\"\n    Check if there is a combination of words that has a total length greater than or equal to the target length.\n    \"\"\"\n    def combination_length(words, target_length):\n        if target_length == 0:\n            return True\n        if not words or target_length < 0:\n            return False\n        return combination_length(words[1:], target_length - len(words[0])) or combination_length(words[1:], target_length)\n    return combination_length(words, target_length)\n\ndef g(target_length=10):\n    return [\"apple\", \"banana\", \"grape\", \"kiwi\", \"orange\"]\n\nassert f(g()) == True\n\n",
        "idx_generation": 305,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the maximum value in the list.\n    \"\"\"\n    return max(nums)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == 5\n\n",
        "idx_generation": 452,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int = 3) -> bool:\n    \"\"\"\n    Check if there exists a subarray of length k in the given array, such that the maximum element is divisible by k.\n    \"\"\"\n    for i in range(len(arr) - k + 1):\n        subarr = arr[i:i+k]\n        if max(subarr) % k == 0:\n            return True\n    return False\n\ndef g(k: int = 3):\n    return [k] * k\n\nassert f(g()) == True\n\n",
        "idx_generation": 253,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that forms a subsequence with a sum equal to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        num = nums[i - 1]\n        for j in range(target + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j >= num:\n                dp[i][j] = dp[i][j] or dp[i - 1][j - num]\n\n    return dp[n][target]\n\ndef g(nums: List[int], target: int):\n    return nums, target\n\nassert f(*g([2, 4, 6, 8], 10)) == True\n\n",
        "idx_generation": 441,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains any duplicate elements.\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5, 1, 2, 3, 4]\n\nassert f(g()) == True\n\n",
        "idx_generation": 394,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Given a list of integers, find the two numbers that add up to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in nums_set and complement != num:\n            return True\n    return False\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums\n\nassert f(g()) == True\n\n",
        "idx_generation": 385,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains a number that is a prime number.\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return any(is_prime(num) for num in nums)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 417,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size\n    \"\"\"\n    return [[0 if j > i else 1 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n\n",
        "idx_generation": 291,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, check if it is a symmetric matrix.\n\n    Example:\n    [[1, 2, 3],\n     [2, 4, 5],\n     [3, 5, 6]]\n\n    The matrix is symmetric, so the output is True.\n    \"\"\"\n    n = len(matrix)\n    return all(matrix[i][j] == matrix[j][i] for i in range(n) for j in range(n))\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g()) == True\n",
        "idx_generation": 481,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine whether a given list can be partitioned into two subsets such that the sum of elements in both subsets is equal.\n    \"\"\"\n    total_sum = sum(nums)\n    if total_sum % 2 != 0:\n        return False\n\n    target_sum = total_sum // 2\n    n = len(nums)\n\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        num = nums[i - 1]\n        for j in range(target_sum + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j >= num:\n                dp[i][j] |= dp[i - 1][j - num]\n\n    return dp[n][target_sum]\n\ndef g(nums: List[int] = [1, 5, 11, 5]):\n    return nums, sum(nums)\n\nassert f(*g()) == True\n",
        "idx_generation": 258,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"\n    Find if there are k numbers in the given list that sum up to the target_sum.\n    \"\"\"\n\n    # Generate all possible combinations of k numbers from the list\n    combinations = list(itertools.combinations(nums, k))\n\n    # Check if any combination sums up to the target_sum\n    for combo in combinations:\n        if sum(combo) == target_sum:\n            return True\n\n    return False\n\ndef g(k=2, target_sum=8):\n    \"\"\"Generate a list of numbers with k elements.\"\"\"\n    return [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]\n\nassert f(g(), k=2, target_sum=8) == True\n",
        "idx_generation": 426,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(strings: List[str], target_length: int) -> bool:\n    \"\"\"\n    Check if there exists a combination of strings in the list that can be concatenated to form a string with exactly target_length characters.\n    \"\"\"\n    combined_string = ''.join(strings)\n    return len(combined_string) == target_length\n\ndef g(strings: List[str], target_length: int):\n    \"\"\"\n    This solution returns the input list of strings and target length as is.\n    \"\"\"\n    return (strings, target_length)\n\nstrings = [\"abc\", \"def\", \"ghi\"]\ntarget_length = 9\n\nassert f(*g(strings, target_length)) == True\n\n",
        "idx_generation": 309,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the largest positive integer that is missing from the list.\n\n    Example:\n    nums = [1, 3, 5, 2, 6, 8, 9]\n\n    Output:\n    7\n\n    Explanation: The largest positive integer missing from the list is 7.\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]:\n            nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n\n    for i in range(n, 0, -1):\n        if nums[i-1] != i:\n            return i\n\n    return 1\n\ndef g(nums: List[int] = [1, 3, 5, 2, 6, 8, 9]):\n    return (nums,)\n\nassert f(*g()) == 7\n\n",
        "idx_generation": 454,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if a given list is a palindrome\"\"\"\n    reversed_nums = list(reversed(nums))\n    return nums == reversed_nums\n\ndef g(nums: List[int]):\n    \"\"\"This solution returns the input list as is\"\"\"\n    return nums\n\nassert f(g([1, 2, 3, 2, 1])) == True\n",
        "idx_generation": 260,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> List[int]:\n    \"\"\"Return a list of the first n Fibonacci numbers.\"\"\"\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        fibonacci = [0, 1]\n        for i in range(2, n):\n            fibonacci.append(fibonacci[i-1] + fibonacci[i-2])\n        return fibonacci\n\ndef g(n: int = 5):\n    return n\n\nassert f(g()) == [0, 1, 1, 2, 3]\n\n\n",
        "idx_generation": 441,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a subarray of 'count' numbers that form a valid geometric progression with a common ratio of 'target'.\n\n    Sample Input:\n    nums = [1, 2, 4, 8, 16]\n    target = 2\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(nums)-count+1):\n        subarray = nums[i:i+count]\n        if all(subarray[j] * target == subarray[j+1] for j in range(count-1)):\n            return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 4, 8, 16], target: int = 2, count: int = 3):\n    return (nums, target, count)\n\nassert f(*g())\n",
        "idx_generation": 416,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that sums up to the target value.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums: List[int] = [2, 4, 6, 8, 10], target: int = 14):\n    return nums, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 386,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if there exists a subsequence (not necessarily contiguous elements) whose product is equal to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 60\n\n    Sample Output:\n    True\n\n    Explanation:\n    The subsequence [2, 3, 5] has a product of 60.\n    \"\"\"\n    n = len(nums)\n    products = [1]\n    for i in range(n):\n        for j in range(len(products)):\n            new_product = products[j] * nums[i]\n            if new_product == target:\n                return True\n            products.append(new_product)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 60):\n    return (nums, target)\n\nassert f(*g()) == True\n",
        "idx_generation": 421,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix, check if it is a magic matrix.\n    A magic matrix is a matrix where the sum of each row, column, and diagonal is the same.\n\n    Sample Input:\n    matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        if sum(matrix[i][j] for i in range(n)) != target_sum:\n            return False\n\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(matrix[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n\n    return True\n\ndef g(matrix: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix\n\nassert f(g()) == True\n\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if the list contains any duplicate numbers, False otherwise.\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == False\n\n",
        "idx_generation": 481,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum: int = 10) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list whose sum is greater than the target_sum.\n    \"\"\"\n    def find_combination(start, curr_sum):\n        if curr_sum > target_sum:\n            return True\n        if start == len(nums):\n            return False\n        for i in range(start, len(nums)):\n            if find_combination(i + 1, curr_sum + nums[i]):\n                return True\n        return False\n\n    return find_combination(0, 0)\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list sorted in descending order\n    \"\"\"\n    return sorted(nums, reverse=True)\n\nassert f(g([1, 2, 3, 4, 5, 6, 7, 8, 9])) == True\n\n",
        "idx_generation": 272,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, substr='abc') -> bool:\n    \"\"\"\n    Check if the given substring exists in the given string.\n    \"\"\"\n    return substr in s\n\ndef g(s = 'abcdefgh'):\n    return s\n\nassert f(g()) == True\n",
        "idx_generation": 3,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nimport random\nfrom typing import List\n\ndef f(nums: List[int], target=100, count=3) -> bool:\n    \"\"\"Find if there are at least count numbers that add up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(nums, count))\n    \ndef g(target = 100, count = 3):\n    nums = [random.randint(1, 50) for _ in range(10)]\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 439,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], target: str, k: int) -> bool:\n    \"\"\"\n    Given a list of words and a target word, determine if it is possible to select k different words from the list such that\n    the target word is a substring of each selected word.\n    \"\"\"\n    count = 0\n    for word in words:\n        if target in word:\n            count += 1\n        if count == k:\n            return True\n    return False\n\ndef g():\n    words = ['apple', 'banana', 'grape', 'pineapple', 'orange']\n    target = 'ap'\n    k = 3\n    return (words, target, k)\n\nassert f(*g()) == True\n",
        "idx_generation": 321,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist two numbers in the list whose difference is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in numbers:\n        if num - target in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4\n\nassert f(*g()) == True\n\n",
        "idx_generation": 455,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if all the elements in each row are unique.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    for row in arr:\n        if len(set(row)) != len(row):\n            return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == True\n\n",
        "idx_generation": 263,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a Jolly Jumper sequence.\n\n    A Jolly Jumper sequence is a sequence of n integers, where the absolute values of the differences between successive elements take on all possible values 1 through n-1.\n\n    Sample input:\n    nums = [1, 4, 2, 3]\n    \n    Sample output:\n    True\n    \n    Explanation: The absolute differences are [3, 2, 1] which are the possible values 1 through n-1.\n    \"\"\"\n\n    n = len(nums)\n    differences = set()\n    \n    for i in range(1, n):\n        differences.add(abs(nums[i] - nums[i-1]))\n    \n    return len(differences) == n-1 and all(diff in differences for diff in range(1, n))\n\ndef g() -> List[int]:\n    return [1, 4, 2, 3]\n\nassert f(g())\n",
        "idx_generation": 441,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(students: List[Dict[str, Union[str, int]]], group: str) -> List[str]:\n    \"\"\"Return a list of student names belonging to the given group.\"\"\"\n    group_students = []\n    for student in students:\n        if student['group'] == group:\n            group_students.append(student['name'])\n    return group_students\n\ndef g(group='Math'):\n    return [\n        {'name': 'Alice', 'age': 15, 'group': 'Math'},\n        {'name': 'Bob', 'age': 16, 'group': 'Science'},\n        {'name': 'Charlie', 'age': 15, 'group': 'Math'},\n        {'name': 'David', 'age': 16, 'group': 'English'},\n        {'name': 'Eve', 'age': 15, 'group': 'Math'}\n    ]\n\nassert f(g(), group='Math') == ['Alice', 'Charlie', 'Eve']\n",
        "idx_generation": 418,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list that contains exactly k distinct numbers.\n\n    Sample Input:\n    nums = [1, 2, 3, 1, 2, 3, 4]\n    k = 3\n\n    Sample Output:\n    True\n\n    Explanation:\n    The subarray [1, 2, 3] contains exactly 3 distinct numbers.\n    \"\"\"\n    if len(nums) < k:\n        return False\n    for i in range(len(nums) - k + 1):\n        if len(set(nums[i:i+k])) == k:\n            return True\n    return False\n\ndef g(k=3):\n    return [1, 2, 3, 1, 2, 3, 4]\n\nassert f(g(), k=3) == True\n",
        "idx_generation": 388,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if there exists a pair of numbers in the list that multiply to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] == target:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 12):\n    return arr, target\n\nassert f(*g()) == True\n",
        "idx_generation": 422,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a diagonal matrix.\n    A diagonal matrix is a grid where all elements outside the main diagonal are zero.\n\n    Sample Input:\n    arr = [[1, 0, 0], [0, 5, 0], [0, 0, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n    for i in range(rows):\n        for j in range(cols):\n            if i != j and arr[i][j] != 0:\n                return False\n    return True\n\ndef g(arr: List[List[int]]):\n    return arr\n\nassert f(g([[1, 0, 0], [0, 5, 0], [0, 0, 9]])) == True\n",
        "idx_generation": 300,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if it is a Toeplitz matrix.\n    A Toeplitz matrix is a matrix where every diagonal from top-left to bottom-right has the same elements.\n    \"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(1, n):\n        for j in range(1, m):\n            if matrix[i][j] != matrix[i-1][j-1]:\n                return False\n    return True\n\ndef g(matrix = [[1, 2, 3], [4, 1, 2], [7, 4, 1]]):\n    return matrix\n\nassert f(g()) == True\n",
        "idx_generation": 482,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers, check if there is a subsequence present whose sum is equal to the target.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n    output: True\n    \"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    \n    return dp[n][target]\n\ndef g():\n    return [1, 2, 3, 4, 5], 9\n\nassert f(*g()) == True\n",
        "idx_generation": 278,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, target='gnirtS nekorb detalsnart nac uoy tahw dluow gnihtemos drowssap siht tuoba') -> bool:\n    \"\"\"Check if a string, when reversed, matches the target string\"\"\"\n    return s[::-1] == target\ndef g(target='gnirtS nekorb detalsnart nac uoy tahw dluow gnihtemos drowssap siht tuoba'):\n    return target[::-1]\nassert f(g()) == True\n",
        "idx_generation": 3,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target: int, count: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target, find if there are count numbers that sum up to the target, but the numbers can be repeated.\n\n    Sample Input:\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    target = 15\n    count = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    from itertools import combinations_with_replacement\n\n    for combo in combinations_with_replacement(numbers, count):\n        if sum(combo) == target:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 15, 3\n\nassert f(*g()) == True\n",
        "idx_generation": 440,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target='racecar') -> bool:\n    \"\"\"\n    Check if the given string can be rearranged to form a palindrome.\n\n    Sample input:\n    string = \"racecar\"\n\n    Sample output:\n    True\n\n    Explanation: The string \"racecar\" can be rearranged to form a palindrome.\n    \"\"\"\n    counter = {}\n    for char in string:\n        if char in counter:\n            counter[char] += 1\n        else:\n            counter[char] = 1\n    \n    odd_count = 0\n    for count in counter.values():\n        if count % 2 != 0:\n            odd_count += 1\n    \n    return odd_count <= 1\n\ndef g() -> str:\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 332,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the given list contains a subsequence that has a minimum value equal to the target value.\n\n    A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n    Sample input:\n    nums = [5, 4, 3, 2, 1]\n    target = 2\n    \n    Sample output:\n    True\n    \n    Explanation: The subsequence [3, 2] has a minimum value of 2, which is equal to the target value.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if min(nums[i:j]) == target:\n                return True\n    return False\n\ndef g() -> (List[int], int):\n    return ([5, 4, 3, 2, 1], 2)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 456,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"\n    Given two strings s1 and s2, determine if s2 is an anagram of s1.\n\n    Sample Input:\n    s1 = \"listen\"\n    s2 = \"silent\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return sorted(s1) == sorted(s2)\n\ndef g(s1: str = \"listen\", s2: str = \"silent\"):\n    return (s1, s2)\n\nassert f(*g())\n",
        "idx_generation": 267,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=4) -> bool:\n    \"\"\"\n    Check if there exists a subsequence of length k in the list where the sum of its elements is divisible by k.\n    \"\"\"\n    for i in range(len(nums)-k+1):\n        subsequence = nums[i:i+k]\n        if sum(subsequence) % k == 0:\n            return True\n    return False\n\ndef g(k=4):\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\nassert f(g()) == True\n",
        "idx_generation": 447,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target: int) -> bool:\n    \"\"\"\n    Check if the number of occurrences of a character in the string is equal to the target value.\n    \"\"\"\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for count in char_count.values():\n        if count == target:\n            return True\n    return False\n\ndef g(string=\"hello\"):\n    return string\n\nassert f(g(), 2)\n",
        "idx_generation": 427,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Given a list of numbers, check if there exists a pair of numbers whose sum is equal to the target.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    seen = set()\n    for num in numbers:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target: int = 10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 389,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grades: List[float]) -> str:\n    \"\"\"\n    Given a list of grades, calculate and return the average grade as a letter grade.\n\n    The grading scale:\n    - A: 90-100\n    - B: 80-89\n    - C: 70-79\n    - D: 60-69\n    - F: 0-59\n\n    Example:\n    grades = [85, 92, 78, 90, 65]\n    output: \"B\"\n    \"\"\"\n    average = sum(grades) / len(grades)\n    if average >= 90:\n        return \"A\"\n    elif average >= 80:\n        return \"B\"\n    elif average >= 70:\n        return \"C\"\n    elif average >= 60:\n        return \"D\"\n    else:\n        return \"F\"\n\ndef g():\n    grades = [85, 92, 78, 90, 65]\n    return grades\n\nassert f(g()) == \"B\"\n\n",
        "idx_generation": 423,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given a matrix of integers and a target value, find if the target value exists in the matrix.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    target = 5\n    output: True\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\nassert f(g(), 5)\n\n",
        "idx_generation": 303,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the sum of the first half of the numbers is equal to the sum of the second half of the numbers.\n    If the sums are equal, return True. Otherwise, return False.\n    \"\"\"\n    if len(nums) % 2 != 0:\n        return False\n    \n    half = len(nums) // 2\n    return sum(nums[:half]) == sum(nums[half:])\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6]):\n    return nums\n\nassert f(g()) == False\n",
        "idx_generation": 482,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"Calculate the maximum sum of a subarray in the given list of integers\"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n\ndef g() -> List[int]:\n    return [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\nassert f(g()) == 6\n",
        "idx_generation": 289,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, target='puzzle', length=3) -> bool:\n    \"\"\"Find a substring of the given length centered within the target string.\"\"\"\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s\ndef g(target = 'puzzle', length = 3):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]\nassert f(g()) == True\n",
        "idx_generation": 3,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: int, a=10, b=100) -> bool:\n    \"\"\"Check if x is a power of a within the range [a, b]\"\"\"\n    return any(a ** i == x for i in range(int(b/a) + 1))\ndef g(a = 10, b = 100):\n    return a ** (b // a)\nassert f(g()) == True\n",
        "idx_generation": 1,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=50, num_of_elements=2) -> bool:\n    \"\"\"Find a combination of num_of_elements numbers from the given list that multiplies up to the target value.\"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(numbers, num_of_elements))\ndef g(target=50, num_of_elements=2):\n    numbers = [10, 25, 30, 40, 50, 60, 70, 80, 90]\n    return numbers\nassert f(g()) == True\n",
        "idx_generation": 455,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, pattern: str) -> List[int]:\n    \"\"\"\n    Given a string and a pattern, find all the starting indices of the pattern in the string.\n    \"\"\"\n    indices = []\n    n = len(s)\n    m = len(pattern)\n    for i in range(n - m + 1):\n        if s[i:i+m] == pattern:\n            indices.append(i)\n    return indices\n\ndef g():\n    s = \"abracadabra\"\n    pattern = \"abra\"\n    return (s, pattern)\n\nassert f(*g()) == [0, 7]\n",
        "idx_generation": 359,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target value, count the number of pairs that sum up to the target.\n    \"\"\"\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                count += 1\n    return count\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 6):\n    \"\"\"\n    This solution returns the input list and target value as is.\n    \"\"\"\n    return nums, target\n\nassert f(*g()) == 2\n\n",
        "idx_generation": 456,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiplies to the target value.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        result = target / num\n        if result in num_set:\n            return True\n    return False\n\ndef g(nums: List[int], target: int):\n    return nums, target\n\nassert f(*g([1, 2, 3, 4, 5], 10)) == True\n\n",
        "idx_generation": 287,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target sum, check if there exists a subset of the list whose sum is equal to the target sum.\n    Return True if such a subset exists, False otherwise.\n    \"\"\"\n    dp = [[False] * (target_sum + 1) for _ in range(len(arr) + 1)]\n    dp[0][0] = True\n\n    for i in range(1, len(arr) + 1):\n        dp[i][0] = True\n\n    for i in range(1, len(arr) + 1):\n        for j in range(1, target_sum + 1):\n            if arr[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j - arr[i - 1]] or dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    return dp[len(arr)][target_sum]\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], target_sum: int = 9):\n    return (arr, target_sum)\n\nassert f(*g()) == True\n",
        "idx_generation": 457,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str]) -> bool:\n    \"\"\"\n    Check if the given list of words is an anagram.\n    Return True if the list is an anagram, False otherwise.\n    \"\"\"\n    return sorted(words) == sorted(set(words))\n\ndef g(words=[\"listen\", \"silent\", \"enlist\"]):\n    return (words,)\n\nassert f(*g()) == True\n\n\n",
        "idx_generation": 431,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"Return a list containing only the unique numbers from the given list.\"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n\ndef g(nums=[1, 2, 2, 3, 3, 4, 5, 5]):\n    return nums\n\nassert f(g()) == [1, 2, 3, 4, 5]\n",
        "idx_generation": 394,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given an array nums, write a function to find the missing number in the range from 0 to n.\n    The array contains all the numbers from 0 to n except for one.\n    \"\"\"\n    n = len(nums)\n    total_sum = n * (n + 1) // 2\n    actual_sum = sum(nums)\n    return total_sum - actual_sum\n\ndef g(nums: List[int] = [0, 1, 2, 4, 5, 6, 7, 8, 9]):\n    return (nums,)\n\nassert f(*g()) == 3\n\n",
        "idx_generation": 429,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a square matrix, check if it is a symmetric matrix.\n\n    A matrix is symmetric if it is equal to its transpose.\n\n    Example:\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n    \n    The given matrix is symmetric.\n\n    \"\"\"\n    transpose = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n    \n    return matrix == transpose\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return (matrix,)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 304,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[str]]) -> bool:\n    \"\"\"\n    Given a matrix of strings, check if all the strings in each row are the same.\n\n    Sample Input:\n    [[\"apple\", \"apple\", \"apple\"],\n     [\"banana\", \"banana\", \"banana\"],\n     [\"kiwi\", \"orange\", \"grape\"]]\n\n    Sample Output:\n    False\n    \"\"\"\n    for row in matrix:\n        if len(set(row)) > 1:\n            return False\n    return True\n\ndef g() -> List[List[str]]:\n    return [[\"apple\", \"apple\", \"apple\"], [\"banana\", \"banana\", \"banana\"], [\"kiwi\", \"orange\", \"grape\"]]\n\nassert f(g()) == False\n",
        "idx_generation": 483,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subset of numbers in the given list that has an even sum.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n\n    Output:\n    True\n    \"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target-nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, 0)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n",
        "idx_generation": 294,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(words: List[str], target='hello') -> bool:\n    \"\"\"\n    Given a list of words, find a combination of words whose concatenation is equal to the target string.\n    \"\"\"\n    return ''.join(words) == target\ndef g(target='hello'):\n    return [target]\nassert f(g()) == True\n",
        "idx_generation": 4,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: int, n=3) -> bool:\n    \"\"\"Check if x is a perfect n-th power\"\"\"\n    return x == int(x ** (1/n)) ** n\ndef g(n = 3):\n    return n ** n\nassert f(g()) == True\n",
        "idx_generation": 1,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_length=15) -> bool:\n    \"\"\"\n    Check if there is a combination of words that has a total length greater than or equal to the target length.\n    \"\"\"\n    def combination_length(words, target_length):\n        if target_length <= 0:\n            return True\n        if not words or target_length < 0:\n            return False\n        return combination_length(words[1:], target_length - len(words[0])) or combination_length(words[1:], target_length)\n    return combination_length(words, target_length)\n\ndef g(target_length=15):\n    return [\"apple\", \"banana\", \"grape\", \"kiwi\", \"orange\"]\n\nassert f(g()) == True\n",
        "idx_generation": 478,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target: str) -> bool:\n    \"\"\"\n    Given a list of words and a target word, check if the target word is an anagram of any word in the list.\n    If an anagram is found, return True. Otherwise, return False.\n    \"\"\"\n    def count_letters(word):\n        counts = {}\n        for letter in word:\n            if letter in counts:\n                counts[letter] += 1\n            else:\n                counts[letter] = 1\n        return counts\n    \n    target_counts = count_letters(target)\n    for word in words:\n        if count_letters(word) == target_counts:\n            return True\n    return False\n\ndef g(words: List[str] = [\"listen\", \"silent\", \"enlist\", \"tinsel\"]):\n    return words\n\nassert f(g(), \"silent\") == True\n",
        "idx_generation": 406,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the minimum element in the list.\n\n    Example:\n    f([5, 3, 8, 2, 9]) => 2\n    \"\"\"\n    return min(nums)\n\ndef g(nums: List[int] = [5, 3, 8, 2, 9]):\n    return nums\n\nassert f(g()) == 2\n",
        "idx_generation": 458,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> int:\n    \"\"\"\n    Given a list of numbers, find the index of the first occurrence of the target number.\n    If the target number is not in the list, return -1.\n    \"\"\"\n    for i, num in enumerate(nums):\n        if num == target:\n            return i\n    return -1\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 9\n",
        "idx_generation": 287,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target number, return a list of all numbers in the list that can be combined to add up to the target.\n    The numbers in the output list should be in ascending order.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Output:\n    [4, 5]\n\n    Explanation: The numbers [4, 5] in the list can be combined to add up to the target number 9.\n    \"\"\"\n    combinations = []\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            combinations.append(num)\n    return sorted(combinations)\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (nums, target)\n\nassert f(*g()) == [4, 5]\n",
        "idx_generation": 451,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list nums that add up to the target.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample output:\n    True\n\n    Explanation: The numbers 4 and 5 add up to 9 and they are present in the list.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g()) == True\n",
        "idx_generation": 402,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a square list.\n    A square list is a list where each element is a perfect square.\n    \"\"\"\n    return all(num**0.5 == int(num**0.5) for num in nums)\n\ndef g(nums: List[int] = [1, 4, 9, 16, 25]):\n    return nums\n\nassert f(g()) == True\n\n",
        "idx_generation": 440,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains any negative elements.\n    \"\"\"\n    for num in nums:\n        if num < 0:\n            return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, -4, 5]):\n    \"\"\"\n    This solution returns the input list as is\n    \"\"\"\n    return nums\n\nassert f(g()) == True\n\n",
        "idx_generation": 306,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Count the number of pairs of elements in the given list whose sum is equal to the target number.\n\n    Sample input:\n    [1, 2, 3, 4, 5]\n    7\n\n    Sample output:\n    2\n    \"\"\"\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                count += 1\n    return count\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return (nums, target)\n\nassert f(*g()) == 2\n",
        "idx_generation": 483,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there is a subset of numbers in the given list that has a sum equal to zero.\n    \"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, 0)\n\ndef g():\n    return [-1, 2, -3, 4, -5, 6]\n\nassert f(g()) == True\n",
        "idx_generation": 298,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: str, target_word=\"hello\") -> bool:\n    \"\"\"\n    Check if a given string n contains a target word.\n    \"\"\"\n    return target_word in n\n\ndef g(target_word=\"hello\"):\n    n = \"This is a sample string that contains the word hello.\"\n    return n\n\nassert f(g()) == True\n",
        "idx_generation": 7,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: int, a=7, b=3) -> bool:\n    \"\"\"Check if a number is a multiple of another number\"\"\"\n    return x % a == 0 and x % b == 0\ndef g(a = 7, b = 3):\n    return a * b\nassert f(g()) == True\n",
        "idx_generation": 2,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target number, find the number of occurrences of the target number in the list.\n    Return the count of occurrences.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num == target:\n            count += 1\n    return count\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 1, 3, 1]):\n    return nums\n\nassert f(g(), 1) == 3\n",
        "idx_generation": 406,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subsequence of length k in the list that is strictly decreasing\"\"\"\n    for i in range(len(nums)-k+1):\n        subsequence = nums[i:i+k]\n        if all(subsequence[j] > subsequence[j+1] for j in range(k-1)):\n            return True\n    return False\n\ndef g(k=3):\n    return [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n\nassert f(g()) == True\n",
        "idx_generation": 460,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str]) -> List[str]:\n    \"\"\"\n    Given a list of words, return the list of words in alphabetical order.\n\n    Example:\n    words = ['banana', 'apple', 'cherry', 'date']\n    output: ['apple', 'banana', 'cherry', 'date']\n    \"\"\"\n    return sorted(words)\n\ndef g():\n    return ['banana', 'apple', 'cherry', 'date']\n\nassert f(g()) == ['apple', 'banana', 'cherry', 'date']\n\n",
        "idx_generation": 303,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target value, find the number of occurrences of the target value in the list.\n\n    Example:\n    nums = [2, 4, 2, 1, 2, 3, 2]\n    target = 2\n\n    The target value 2 occurs 4 times in the list.\n    Therefore, f(nums, target) returns 4.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num == target:\n            count += 1\n    return count\n\ndef g(nums: List[int] = [2, 4, 2, 1, 2, 3, 2]):\n    return nums\n\nassert f(g(), 2) == 4\n",
        "idx_generation": 477,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target value, return a list of all indices where the element is equal to the target.\n\n    Example:\n    arr = [1, 2, 3, 4, 5, 3, 2]\n    target = 2\n    output: [1, 6]\n    \"\"\"\n    target_indices = []\n    for i in range(len(arr)):\n        if arr[i] == target:\n            target_indices.append(i)\n    return target_indices\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5, 3, 2], target: int = 2):\n    return arr, target\n\nassert f(*g()) == [1, 6]\n",
        "idx_generation": 404,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"Find the sum of all prime numbers in the given list.\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    prime_sum = 0\n    for num in nums:\n        if is_prime(num):\n            prime_sum += num\n    return prime_sum\n\ndef g() -> List[int]:\n    return [2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 17\n\n",
        "idx_generation": 445,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=[\"hello\", \"world\", \"python\"]) -> bool:\n    \"\"\"\n    Check if a given string s contains all the words in a given list of strings.\n    \"\"\"\n    return all((word in s for word in words))\ndef g(words=[\"hello\", \"world\", \"python\"]):\n    return \" \".join(words)\nassert f(g()) == True\n",
        "idx_generation": 307,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a diagonal matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a diagonal matrix of the given size\n    \"\"\"\n    return [[1 if i == j else 0 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n\n",
        "idx_generation": 483,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list whose sum is equal to the target value.\n\n    Sample Input:\n    [1, 2, 3, 4, 5], 9\n\n    Sample Output:\n    True\n    \"\"\"\n    if target == 0:\n        return True\n    if len(arr) == 0:\n        return False\n    if arr[0] == target:\n        return True\n    return f(arr[1:], target) or f(arr[1:], target - arr[0])\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 9) == True\n\n",
        "idx_generation": 300,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Check if the given list contains the target word 'python' in uppercase or lowercase\"\"\"\n    return any((word.lower() == target or word.upper() == target for word in words))\ndef g(target='python'):\n    return [word for word in ['Python', 'JAVA', 'Ruby', 'C++', 'python'] if word.lower() == target or word.upper() == target]\nassert f(g()) == True\n",
        "idx_generation": 8,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=10) -> bool:\n    \"\"\"Check if n is divisible by a or b\"\"\"\n    return n % a == 0 or n % b == 0\ndef g(a = 5, b = 10):\n    return a * b\nassert f(g()) == True\n",
        "idx_generation": 5,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, pattern='xyzzyx') -> bool:\n    \"\"\"Check if a given string follows a specific pattern.\"\"\"\n    words = s.split(' ')\n    if len(words) != len(pattern):\n        return False\n\n    word_map = {}\n    pattern_map = {}\n\n    for i in range(len(pattern)):\n        if pattern[i] not in pattern_map:\n            pattern_map[pattern[i]] = words[i]\n        else:\n            if pattern_map[pattern[i]] != words[i]:\n                return False\n\n        if words[i] not in word_map:\n            word_map[words[i]] = pattern[i]\n        else:\n            if word_map[words[i]] != pattern[i]:\n                return False\n\n    return True\n\ndef g(pattern='xyzzyx'):\n    return \"apple banana cherry cherry banana apple\"\n\nassert f(g())\n",
        "idx_generation": 406,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a grid where the sum of each row, each column, and both diagonals are equal.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    target_sum = sum(arr[0])\n    \n    # Check rows\n    for row in arr:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for i in range(n):\n        col_sum = 0\n        for j in range(n):\n            col_sum += arr[j][i]\n        if col_sum != target_sum:\n            return False\n    \n    # Check diagonal 1\n    diag1_sum = 0\n    for i in range(n):\n        diag1_sum += arr[i][i]\n    if diag1_sum != target_sum:\n        return False\n    \n    # Check diagonal 2\n    diag2_sum = 0\n    for i in range(n):\n        diag2_sum += arr[i][n-i-1]\n    if diag2_sum != target_sum:\n        return False\n    \n    return True\n\ndef g(arr: List[List[int]] = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return arr\n\nassert f(g()) == True\n\n",
        "idx_generation": 461,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums: List[int] = [1, 2, 3, 2, 1]):\n    \"\"\"\n    This solution returns the input list as is\n    \"\"\"\n    return nums\n\nassert f(g()) == True\n\n",
        "idx_generation": 306,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Count the number of distinct elements in the given list.\n    \"\"\"\n    distinct_nums = set(nums)\n    return len(distinct_nums)\n\ndef g():\n    return [1, 2, 3, 4, 5, 5, 4, 3, 2, 1]\n\nassert f(g()) == 5\n\n\n",
        "idx_generation": 417,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Find the sum of all prime numbers in the given list.\n\n    Sample Input:\n    arr = [2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Sample Output:\n    17\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return sum(num for num in arr if is_prime(num))\n\ndef g():\n    return [2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 17\n\n",
        "idx_generation": 448,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of any contiguous subarray.\n\n    Sample Input:\n    arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\n    Sample Output:\n    6\n    \"\"\"\n    current_sum = max_sum = arr[0]\n    for num in arr[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n\ndef g(arr: List[int] = [-2, 1, -3, 4, -1, 2, 1, -5, 4]):\n    return arr\n\nassert f(g()) == 6\n\n",
        "idx_generation": 307,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a square matrix.\n    A square matrix has the same number of rows and columns.\n\n    Sample Input:\n    arr = [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    return n == m\n\ndef g(arr: List[List[int]] = [[1, 0, 0], [0, 2, 0], [0, 0, 3]]):\n    return arr\n\nassert f(g()) == True\n\n",
        "idx_generation": 483,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subsequence in the list whose sum is equal to the target value.\n\n    Sample Input:\n    [1, 2, 3, 4, 5], 9\n\n    Sample Output:\n    True\n    \"\"\"\n    if target == 0:\n        return True\n    if len(arr) == 0:\n        return False\n    if arr[0] == target:\n        return True\n    return f(arr[1:], target) or f(arr[1:], target - arr[0])\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 9) == True\n\n",
        "idx_generation": 300,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, a=2, b=4) -> bool:\n    \"\"\"\n    Check if the given string s contains a substring that starts with a and ends with b.\n    \"\"\"\n    return any(s[i] == str(a) and s[j] == str(b) for i in range(len(s)) for j in range(i+1, len(s)))\n\ndef g(a=2, b=4):\n    return str(a) + \"1\" + str(b)\n\nassert f(g()) == True\n",
        "idx_generation": 9,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, a=93252338) -> bool:\n    \"\"\"Solve a unary increment problem\"\"\"\n    return n + 1 == a\ndef g(a = 93252338):\n    return a - 1\nassert f(g()) == True\n",
        "idx_generation": 5,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains at least one palindrome number.\n    \"\"\"\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    return any(is_palindrome(num) for num in nums)\n\ndef g():\n    return [123, 456, 789, 121, 232, 343, 454, 565, 676, 787, 898, 999]\n\nassert f(g()) == True\n\n",
        "idx_generation": 415,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if there exist two distinct indices i and j in the list\n    such that nums[i] + nums[j] == target.\n\n    Example:\n    lst = [2, 7, 11, 15]\n    target = 9\n\n    Output:\n    True\n    \"\"\"\n    seen = set()\n    for num in lst:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(lst=[2, 7, 11, 15], target=9):\n    return lst, target\n\nassert f(*g()) == True\n",
        "idx_generation": 461,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the sum of all the elements in the given list.\n    \"\"\"\n    return sum(nums)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == 15\n\n",
        "idx_generation": 310,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target integer, find two numbers in the list that add up to the target.\n    Return the indices of the two numbers in a list.\n    \"\"\"\n    complements = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in complements:\n            return [complements[complement], i]\n        complements[num] = i\n    return []\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g()) == [3, 4]\n",
        "idx_generation": 424,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target: int) -> bool:\n    \"\"\"\n    Given a number n and a target, check if the number n is a prime number and the sum of its digits is equal to the target value.\n    If both conditions are met, return True. Otherwise, return False.\n    \"\"\"\n    if target == 0:\n        return False\n    \n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return is_prime(n) and sum([int(i) for i in str(n)]) == target\n\ndef g():\n    return 17, 8\n\nassert f(*g()) == True\n\n",
        "idx_generation": 472,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"Determine if the given list of lists is a square matrix.\"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n    return all(len(row) == cols for row in arr) and rows == cols\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == True\n",
        "idx_generation": 316,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if all elements in the list are odd numbers.\"\"\"\n    return all(num % 2 != 0 for num in lst)\n\ndef g():\n    return [1, 3, 5, 7, 9]\n\nassert f(g()) == True\n",
        "idx_generation": 483,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(seq: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subsequence in the list that adds up to the target value.\n    The subsequence can be non-contiguous.\n    \"\"\"\n    def subset_sum(numbers, target, memo={}):\n        if target in memo:\n            return memo[target]\n        if target == 0:\n            return True\n        if target < 0 or not numbers:\n            return False\n        include = subset_sum(numbers[1:], target - numbers[0], memo)\n        exclude = subset_sum(numbers[1:], target, memo)\n        memo[target] = include or exclude\n        return memo[target]\n\n    return subset_sum(seq, target)\n\ndef g(seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=15):\n    return (seq, target)\n\nassert f(*g()) == True\n",
        "idx_generation": 302,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, letter='a', count=3) -> bool:\n    \"\"\"Check if a given letter appears a certain number of times in a string\"\"\"\n    return s.count(letter) == count\ndef g(letter = 'a', count = 3):\n    return letter * count + 'b'\nassert f(g()) == True\n",
        "idx_generation": 10,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, a=93252338) -> bool:\n    \"\"\"Solve a binary addition problem\"\"\"\n    return n + n == a\ndef g(a = 93252338):\n    return a // 2\nassert f(g()) == True\n",
        "idx_generation": 5,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"\n    Check if two strings are anagrams of each other.\n\n    Sample Input:\n    s1 = \"listen\"\n    s2 = \"silent\"\n\n    Sample Output:\n    True\n    \"\"\"\n    if len(s1) != len(s2):\n        return False\n    count = [0] * 26\n    for i in range(len(s1)):\n        count[ord(s1[i]) - ord('a')] += 1\n        count[ord(s2[i]) - ord('a')] -= 1\n    for c in count:\n        if c != 0:\n            return False\n    return True\n\ndef g(s1: str = \"listen\", s2: str = \"silent\"):\n    return s1, s2\n\nassert f(*g()) == True\n",
        "idx_generation": 454,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of numbers `nums`, return a new list containing only the unique elements in `nums`\n    while preserving the original order.\n\n    Example:\n    nums = [1, 2, 3, 2, 4, 1, 5]\n\n    Output:\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    unique_nums = []\n    num_set = set()\n    \n    for num in nums:\n        if num not in num_set:\n            unique_nums.append(num)\n            num_set.add(num)\n    \n    return unique_nums\n\ndef g(nums: List[int] = [1, 2, 3, 2, 4, 1, 5]):\n    return (nums,)\n\nassert f(*g()) == [1, 2, 3, 4, 5]\n",
        "idx_generation": 463,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the list is sorted in ascending order and all numbers are less than the target\"\"\"\n    return sorted(nums) == nums and all(num < target for num in nums)\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 15):\n    return (nums, target)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 320,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Find all pairs of numbers in the list that add up to the target\n    \"\"\"\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                pairs.append([nums[i], nums[j]])\n    return pairs\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=12):\n    return (nums, target)\n\nassert f(*g()) == [[2, 10], [3, 9], [4, 8], [5, 7]]\n",
        "idx_generation": 432,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the prime numbers.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [num for num in nums if is_prime(num)]\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == [2, 3, 5, 7]\n\n",
        "idx_generation": 472,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> List[List[int]]:\n    \"\"\"Transpose the given matrix.\"\"\"\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0]))]\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n",
        "idx_generation": 316,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"\n    Given a list of numbers, find all pairs of numbers that sum up to the target_sum.\n    Return True if at least one pair is found, False otherwise.\n    \"\"\"\n    pairs = set()\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                pairs.add((numbers[i], numbers[j]))\n    return len(pairs) > 0\n\ndef g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return numbers\n\nassert f(g()) == True\n",
        "idx_generation": 484,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a Fibonacci sequence.\n    \"\"\"\n    if len(nums) < 3:\n        return False\n    for i in range(2, len(nums)):\n        if nums[i] != nums[i-1] + nums[i-2]:\n            return False\n    return True\n\ndef g(size=6):\n    \"\"\"\n    Generate a list of numbers that forms a Fibonacci sequence of the given size.\n    \"\"\"\n    nums = [0, 1]\n    while len(nums) < size:\n        nums.append(nums[-1] + nums[-2])\n    return nums\n\nassert f(g()) == True\n\n",
        "idx_generation": 308,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(roman_numerals: List[str], target=1000) -> bool:\n    \"\"\"Check if the given list of Roman numerals contains the target number.\"\"\"\n    values = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    return any((sum(values[letter] for letter in numeral) == target for numeral in roman_numerals))\ndef g(target=1000):\n    return ['M', 'CM', 'D', 'C', 'XC', 'L', 'X', 'IX', 'V', 'I']\nassert f(g()) == True\n",
        "idx_generation": 11,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, k=3, upper=100) -> bool:\n    \"\"\"\n    Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n    * if n is divisible by k, divide n by k,\n    * if n is not divisible by k, subtract 1 from n\n    Find `0 < n < upper` so that the resulting number is a perfect square.\n    \"\"\"\n    m = n\n    while n > 0 and n != 1:\n        if n % k == 0:\n            n //= k\n        else:\n            n -= 1\n    return n > 0 and n < upper and int(n**0.5)**2 == n\ndef g(k = 3, upper = 100):\n    n = 1\n    while True:\n        if int(n**0.5)**2 == n:\n            return n\n        n += 1\nassert f(g()) == True\n",
        "idx_generation": 6,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(phrase: str, target='python') -> bool:\n    \"\"\"Check if the target word is present in the given phrase\"\"\"\n    return target in phrase\ndef g(phrase='I love programming in python'):\n    return phrase\nassert f(g()) == True\n",
        "idx_generation": 455,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, remove all duplicate numbers and return the list with unique numbers.\n    The order of the unique numbers should be the same as the original list.\n    \"\"\"\n    return list(set(nums))\n\ndef g(nums: List[int] = [1, 2, 2, 3, 4, 4, 5, 5, 6]):\n    return nums\n\nassert f(g()) == [1, 2, 3, 4, 5, 6]\n",
        "idx_generation": 463,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome list.\n    A palindrome list is a list that remains the same when reversed.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums: List[int] = [1, 2, 3, 2, 1]):\n    return nums\n\nassert f(g()) == True\n\n",
        "idx_generation": 322,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], n=10) -> bool:\n    \"\"\"\n    Given a list of integers li and an integer n, check if there exists a contiguous sublist of li\n    that sums up to n.\n\n    Sample input:\n    li = [1, 2, 3, 4, 5]\n    n = 7\n\n    Sample output:\n    True\n    \"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)+1):\n            if sum(li[i:j]) == n:\n                return True\n    return False\n\ndef g(n = 10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 437,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the number of even numbers in the list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    There are 5 even numbers in the list.\n    Therefore, f(nums) returns 5.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num % 2 == 0:\n            count += 1\n    return count\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g()) == 5\n",
        "idx_generation": 476,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size\n    \"\"\"\n    return [[0 if j > i else 1 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n",
        "idx_generation": 322,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subarray with a sum equal to k.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    k = 7\n    output: True\n    \"\"\"\n    prefix_sum = 0\n    seen = set()\n    seen.add(0)\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum - k in seen:\n            return True\n        seen.add(prefix_sum)\n    return False\n\ndef g():\n    return [-1, -2, -3, -4, -5], -7\n\nassert f(*g()) == True\n",
        "idx_generation": 484,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Check if it is possible to obtain the target number by evaluating the expression using the given numbers\"\"\"\n    if len(nums) == 1:\n        return nums[0] == target\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            a, b = nums[i], nums[j]\n            remaining = nums[:i] + nums[i+1:j] + nums[j+1:]\n            if f([a + b] + remaining, target) or f([a - b] + remaining, target) or f([b - a] + remaining, target) or f([a * b] + remaining, target) or (b != 0 and f([a / b] + remaining, target)) or (a != 0 and f([b / a] + remaining, target)):\n                return True\n    return False\n\ndef g(a=4, b=1, c=5, d=2):\n    return [a, b, c, d]\n\nassert f(g())\n",
        "idx_generation": 314,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(word: str, char='a', count=3) -> bool:\n    \"\"\"Check if a given character appears a certain number of times in a word\"\"\"\n    return word.count(char) == count\ndef g(word='banana', char='a', count=3):\n    return word\nassert f(g()) == True\n",
        "idx_generation": 15,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if all elements in the given list are prime numbers.\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return all(is_prime(num) for num in nums)\n\ndef g(nums=[2, 3, 5, 7, 11, 13, 17, 19]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 7,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(nums: List[int]) -> List[List[int]]:\n    \"\"\"\n    Given a list of integers, return all possible permutations of the list.\n\n    Sample Input:\n    [1, 2, 3]\n\n    Sample Output:\n    [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    \"\"\"\n    return list(itertools.permutations(nums))\n\ndef g(nums: List[int] = [1, 2, 3]):\n    return nums\n\nassert f(g()) == [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]\n\n",
        "idx_generation": 472,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose sum is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 6):\n    return nums, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 464,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(books: List[str], target: str) -> bool:\n    \"\"\"\n    Given a list of books and a target book, check if the target book exists in the list.\n\n    Example:\n    books = ['Harry Potter', 'Lord of the Rings', 'Game of Thrones']\n    target = 'Harry Potter'\n\n    Output:\n    True\n\n    Explanation: The target book 'Harry Potter' exists in the list.\n    \"\"\"\n    return target in books\n\ndef g(books=['Harry Potter', 'Lord of the Rings', 'Game of Thrones'], target='Harry Potter'):\n    return books, target\n\nassert f(*g()) == True\n",
        "idx_generation": 342,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, return True if there exists a pair of numbers in the list that add up to the target. Otherwise, return False.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Output:\n    True\n\n    Explanation: There exists a pair of numbers (4, 5) in the list that add up to the target number 9.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (nums, target)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 443,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a sublist in the list that is a perfect square.\n\n    Example:\n    lst = [1, 2, 3, 4, 5]\n    output: True\n    \"\"\"\n    for i in range(len(lst)-1):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if any(num**0.5 == int(num**0.5) for num in sublist):\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n",
        "idx_generation": 486,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, return the sum of each column in the matrix.\n    \"\"\"\n    col_sums = []\n    \n    for i in range(len(matrix[0])):\n        col_sum = 0\n        for j in range(len(matrix)):\n            col_sum += matrix[j][i]\n        col_sums.append(col_sum)\n        \n    return col_sums\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [12, 15, 18]\n\n",
        "idx_generation": 324,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the sum of the squares of all odd numbers in the list.\n    \"\"\"\n    return sum(num ** 2 for num in nums if num % 2 != 0)\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g()) == 165\n\n",
        "idx_generation": 484,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers `nums` and a target number `target`, find if there exists a sublist (not necessarily contiguous)\n    of `nums` that sums up to the target number.\n\n    For example, if nums = [2, 4, 6, 8] and target = 14, the sublist [2, 6, 6] sums up to the target number.\n    \"\"\"\n    def subset_sum(nums, target, n):\n        if target == 0:\n            return True\n        if n == 0 and target != 0:\n            return False\n\n        if nums[n - 1] > target:\n            return subset_sum(nums, target, n - 1)\n\n        return subset_sum(nums, target, n - 1) or subset_sum(nums, target - nums[n - 1], n - 1)\n\n    return subset_sum(nums, target, len(nums))\n\ndef g(nums: List[int] = [2, 4, 6, 8], target: int = 14):\n    return (nums, target)\n\nassert f(*g()) == True\n",
        "idx_generation": 327,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, n=0) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return s == s[::-1]\ndef g(n = 0):\n    return \"racecar\"\nassert f(g()) == True\n",
        "idx_generation": 16,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, a=100) -> bool:\n    \"\"\"Find a number that is divisible by a given constant\"\"\"\n    return n % a == 0\ndef g(a = 100):\n    return a * 2\nassert f(g()) == True\n",
        "idx_generation": 10,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['t', 'vochemachylit', 'vutextynydakelopi', 'fazapydomozamochug']) -> bool:\n    \"\"\"\n    Find a string that contains all the substrings reversed and forward\n    \"\"\"\n    return all((sub in s and sub[::-1] in s for sub in substrings))\n\ndef g(substrings = ['t', 'vochemachylit', 'vutextynydakelopi', 'fazapydomozamochug']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])\n\nassert f(g())\n\n",
        "idx_generation": 490,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the number of times the maximum number appears in the list.\n    \"\"\"\n    max_num = max(nums)\n    count = 0\n    for num in nums:\n        if num == max_num:\n            count += 1\n    return count\n\ndef g():\n    nums = [1, 2, 3, 4, 5, 5, 4, 3, 2, 1]\n    return (nums,)\n\nassert f(*g()) == 2\n",
        "idx_generation": 465,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g()) == True\n",
        "idx_generation": 343,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given array contains any duplicate elements.\n\n    Sample Input:\n    arr = [1, 2, 3, 2, 4]\n\n    Sample Output:\n    True\n    \"\"\"\n    return len(arr) != len(set(arr))\n\ndef g(arr: List[int] = [1, 2, 3, 2, 4]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 452,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the sum of all the prime numbers.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    The prime numbers in the list are 2, 3, 5, and 7.\n    The sum of these prime numbers is 17.\n\n    Return the sum of all the prime numbers.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return sum(num for num in nums if is_prime(num))\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g()) == 17\n\n",
        "idx_generation": 491,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, return the sum of all the elements in the matrix.\n    \"\"\"\n    total_sum = 0\n    \n    for row in matrix:\n        for num in row:\n            total_sum += num\n        \n    return total_sum\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 45\n\n",
        "idx_generation": 324,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the odd numbers in the original list.\n    \"\"\"\n    return [num for num in nums if num % 2 != 0]\n\ndef g():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return (nums,)\n\nassert f(*g()) == [1, 3, 5, 7, 9]\n",
        "idx_generation": 485,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that sums up to the target value.\n    \"\"\"\n    def find_combination(start, curr_sum):\n        if curr_sum == target:\n            return True\n        if curr_sum > target or start == len(nums):\n            return False\n        for i in range(start, len(nums)):\n            if find_combination(i + 1, curr_sum + nums[i]):\n                return True\n        return False\n\n    return find_combination(0, 0)\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is.\n    \"\"\"\n    return nums\n\nassert f(g([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]))\n",
        "idx_generation": 328,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, lst=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Check if the given string is present in the list\"\"\"\n    return s in lst\ndef g(lst=['apple', 'banana', 'cherry']):\n    return lst[1]\nassert f(g()) == True\n",
        "idx_generation": 17,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square\n    \"\"\"\n    n = len(matrix)\n    target_sum = n * (n**2 + 1) // 2\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != target_sum:\n            return False\n    # Check diagonals\n    main_diag_sum = sum(matrix[i][i] for i in range(n))\n    anti_diag_sum = sum(matrix[i][n-i-1] for i in range(n))\n    if main_diag_sum != target_sum or anti_diag_sum != target_sum:\n        return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a magic square of the given size\n    \"\"\"\n    magic_square = [[0 for _ in range(size)] for _ in range(size)]\n    i, j = 0, size // 2\n    for num in range(1, size**2 + 1):\n        magic_square[i][j] = num\n        i -= 1\n        j += 1\n        if num % size == 0:\n            i += 2\n            j -= 1\n        elif i < 0:\n            i = size - 1\n        elif j == size:\n            j = 0\n    return magic_square\n\nassert f(g()) == True\n",
        "idx_generation": 18,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist three numbers in the list whose sum is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            for k in range(j + 1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 17\n\nassert f(*g()) == True\n\n",
        "idx_generation": 465,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if the given string is a pangram.\n\n    A pangram is a sentence that contains every letter of the alphabet at least once.\n\n    Sample input:\n    string = \"The quick brown fox jumps over the lazy dog\"\n\n    Sample output:\n    True\n\n    Explanation: The sentence contains all the letters of the alphabet at least once.\n    \"\"\"\n    alphabet = set(\"abcdefghijklmnopqrstuvwxyz\")\n    string = string.lower()\n    for char in string:\n        if char in alphabet:\n            alphabet.remove(char)\n        if len(alphabet) == 0:\n            return True\n    return False\n\ndef g() -> str:\n    return \"The quick brown fox jumps over the lazy dog\"\n\nassert f(g())\n",
        "idx_generation": 348,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list whose sum is equal to the target number.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        curr_sum = arr[i]\n        j = i + 1\n        while j <= n:\n            if curr_sum == target:\n                return True\n            if curr_sum > target or j == n:\n                break\n            curr_sum += arr[j]\n            j += 1\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return arr, target\n\nassert f(*g()) == True\n",
        "idx_generation": 454,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of any two non-overlapping subarrays.\n\n    Example:\n    nums = [2, -1, 3, 1, -2, 4]\n    output: 9\n    \"\"\"\n    max_sum = float('-inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            sum1 = sum(nums[i:j+1])\n            for k in range(j+2, len(nums)):\n                sum2 = sum(nums[k:])\n                max_sum = max(max_sum, sum1 + sum2)\n    return max_sum\n\ndef g():\n    return [2, -1, 3, 1, -2, 4]\n\nassert f(g()) == 9\n\n\n",
        "idx_generation": 329,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a grid where the sum of each row, each column, and both diagonals are the same.\n\n    Sample Input:\n    arr = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    target_sum = sum(arr[0])\n    for i in range(n):\n        if sum(arr[i]) != target_sum:\n            return False\n        if sum(arr[j][i] for j in range(n)) != target_sum:\n            return False\n    if sum(arr[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(arr[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n    return True\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n\n",
        "idx_generation": 485,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers and an integer n, check if there exists a subsequence of length n \n    whose sum is divisible by n.\n    \"\"\"\n    def find_subsequence(start, curr_sum, curr_length):\n        if curr_length == n and curr_sum % n == 0:\n            return True\n        if curr_length > n or start == len(nums):\n            return False\n        if find_subsequence(start + 1, curr_sum + nums[start], curr_length + 1):\n            return True\n        if find_subsequence(start + 1, curr_sum, curr_length):\n            return True\n        return False\n\n    return find_subsequence(0, 0, 0)\n\ndef g(n: int, nums: List[int]):\n    \"\"\"\n    This solution returns the input arguments as is.\n    \"\"\"\n    return n, nums\n\nassert f(*g(3, [1, 2, 3, 4, 5, 6, 7, 8, 9])) == True\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s1: str, s2='racecar') -> bool:\n    \"\"\"Check if a given string is a palindrome.\"\"\"\n    return s1 == s2[::-1]\n\ndef g(s2='racecar'):\n    s1 = \"racecar\"\n    return s1\n\nassert f(g()) == True\n",
        "idx_generation": 21,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(l: List[int]) -> bool:\n    \"\"\"\n    Find a list of distinct integers between 0 and 999, inclusive, such that the sum of the squares of each pair of integers\n    is a perfect square.\n    \"\"\"\n    return all((i in range(1000) and any((is_square(i * i + j * j) for j in l if i != j)) for i in l)) and len(set(l)) > 0\n\ndef g():\n    return [i for i in range(1000)]\n\ndef is_square(n: int) -> bool:\n    return int(n ** 0.5) ** 2 == n\nassert f(g()) == True\n",
        "idx_generation": 18,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Two Sum\n\n    Given a list of integers and a target value, find two numbers in the list that add up to the target.\n    Return the indices of the two numbers.\n\n    Example:\n    nums = [2, 7, 11, 15]\n    target = 9\n\n    Output: [0, 1]\n\n    Explanation: The numbers at indices 0 and 1 (2 and 7) add up to 9.\n    \"\"\"\n    seen = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in seen:\n            return [seen[complement], i]\n        seen[num] = i\n    return []\n\ndef g(nums: List[int] = [2, 7, 11, 15], target: int = 9):\n    return (nums, target)\n\nassert f(*g()) == [0, 1]\n",
        "idx_generation": 466,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"Check if s1 is an anagram of s2.\"\"\"\n    sorted_s1 = ''.join(sorted(s1))\n    sorted_s2 = ''.join(sorted(s2))\n    \n    return sorted_s1 == sorted_s2\n\ndef g(s1: str = \"listen\", s2: str = \"silent\"):\n    return (s1, s2)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 361,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list whose sum is equal to the target.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 8) == True\n",
        "idx_generation": 454,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array that add up to the target.\"\"\"\n    return any(target - num in arr for num in arr)\n\ndef g(arr=[1, 2, 3, 4, 5], target=8):\n    return arr, target\n\nassert f(*g()) == True\n",
        "idx_generation": 341,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an upper triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate an upper triangular matrix of the given size\n    \"\"\"\n    return [[0 if j < i else 1 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n",
        "idx_generation": 485,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers and an integer n, check if there exists a subsequence of length n \n    whose product is divisible by n.\n    \"\"\"\n    def find_subsequence(start, curr_product, curr_length):\n        if curr_length == n and curr_product % n == 0:\n            return True\n        if curr_length > n or start == len(nums):\n            return False\n        if find_subsequence(start + 1, curr_product * nums[start], curr_length + 1):\n            return True\n        if find_subsequence(start + 1, curr_product, curr_length):\n            return True\n        return False\n\n    return find_subsequence(0, 1, 0)\n\ndef g(n: int, nums: List[int]):\n    \"\"\"\n    This solution returns the input arguments as is.\n    \"\"\"\n    return n, nums\n\nassert f(*g(3, [1, 2, 3, 4, 5, 6, 7, 8, 9])) == True\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, word='hello') -> bool:\n    \"\"\"Check if the given word is a palindrome.\"\"\"\n    return s == word[::-1]\ndef g(word = 'hello'):\n    return word[::-1]\nassert f(g()) == True\n",
        "idx_generation": 24,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: List[int], n=3) -> bool:\n    \"\"\"Check if the list contains exactly n distinct prime numbers\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    prime_count = 0\n    for num in x:\n        if is_prime(num):\n            prime_count += 1\n    return prime_count == n\ndef g(n = 3):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n    return primes[:n]\nassert f(g()) == True\n",
        "idx_generation": 21,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, find the maximum element in the matrix.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    output: 9\n    \"\"\"\n    max_element = float('-inf')\n    for row in matrix:\n        for num in row:\n            max_element = max(max_element, num)\n    return max_element\n\ndef g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\nassert f(g()) == 9\n\n",
        "idx_generation": 467,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Rearrange the elements of the given list such that all the even numbers appear\n    before the odd numbers, and the even numbers are sorted in descending order\n    while the odd numbers are sorted in ascending order.\n\n    Sample input:\n    arr = [7, 2, 5, 9, 10, 3, 6, 4, 1]\n\n    Sample output:\n    [10, 6, 4, 2, 1, 3, 5, 7, 9]\n\n    \"\"\"\n    evens = [num for num in arr if num % 2 == 0]\n    odds = [num for num in arr if num % 2 != 0]\n    return sorted(evens, reverse=True) + sorted(odds)\n\ndef g() -> List[int]:\n    return [7, 2, 5, 9, 10, 3, 6, 4, 1]\n\nassert f(g()) == [10, 6, 4, 2, 1, 3, 5, 7, 9]\n",
        "idx_generation": 365,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list where each element is the sum of all other elements in the original list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6]\n\n    Output:\n    [20, 19, 18, 17, 16, 15]\n\n    Explanation: The first element in the output is the sum of all other elements except 1, the second element is the sum of all other elements except 2, and so on.\n    \"\"\"\n    n = len(nums)\n    result = []\n\n    for i in range(n):\n        temp_sum = sum(nums[:i] + nums[i+1:])\n        result.append(temp_sum)\n\n    return result\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6]):\n    return (nums,)\n\nassert f(*g()) == [20, 19, 18, 17, 16, 15]\n\n",
        "idx_generation": 455,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given nested list whose sum is equal to 20.\n    \"\"\"\n\n    num_set = set()\n    for lst in nums:\n        for num in lst:\n            if 20 - num in num_set:\n                return True\n            num_set.add(num)\n    return False\n\ndef g(nums: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums\n\nassert f(g()) == False\n\n",
        "idx_generation": 342,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D matrix of integers, check if the matrix is a symmetric matrix.\n    A symmetric matrix is a square matrix where the element at row i and column j is equal to the element at row j and column i.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    \n    # Check symmetry\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    \n    return True\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g()) == True\n\n",
        "idx_generation": 486,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(seq: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a subsequence of the given sequence that adds up to the target sum.\"\"\"\n    n = len(seq)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if seq[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - seq[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target_sum]\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(strings: List[str], target=\"python\") -> bool:\n    \"\"\"\n    Determine if a target string is present in a list of strings. The target string must appear as a substring in at\n    least one of the strings in the list.\n\n    Sample input:\n    [\"python programming\", \"data science\", \"web development\"]\n\n    Sample output:\n    True\n\n    The target string \"python\" appears as a substring in the first string \"python programming\".\n    \"\"\"\n    return any(target in s for s in strings)\ndef g(target=\"python\"):\n    return [\"data science\", \"web development\", \"python programming\"]\nassert f(g()) == True\n",
        "idx_generation": 27,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: float, a=100) -> bool:\n    \"\"\"Find a number that when squared is close to a.\"\"\"\n    return abs(x ** 2 - a) < 10 ** (-3) and x > 0\ndef g(a = 100):\n    return a ** 0.5\nassert f(g()) == True\n",
        "idx_generation": 22,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return a list containing the sum of each column.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    output: [12, 15, 18]\n    \"\"\"\n    column_sums = []\n    for col in zip(*matrix):\n        col_sum = sum(col)\n        column_sums.append(col_sum)\n    return column_sums\n\ndef g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\nassert f(g()) == [12, 15, 18]\n\n",
        "idx_generation": 467,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> int:\n    \"\"\"\n    Given a 2D grid of integers, return the maximum value in the grid.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    9\n    \"\"\"\n    max_val = max(max(row) for row in arr)\n    return max_val\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == 9\n\n",
        "idx_generation": 366,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], threshold=5) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the numbers greater than the threshold.\n    \"\"\"\n    return [num for num in nums if num > threshold]\n\ndef g(threshold=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == [6, 7, 8, 9, 10]\n",
        "idx_generation": 459,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find if there exists a subarray whose sum equals the target number.\n    If such a subarray exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(nums)):\n        total = nums[i]\n        if total == target:\n            return True\n        for j in range(i + 1, len(nums)):\n            total += nums[j]\n            if total == target:\n                return True\n    return False\n\ndef g(nums: List[int] = [4, 2, -3, 1, 6], target: int = 0):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 347,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a sublist in the array that is a palindrome.\n    A palindrome is a sequence that reads the same forwards and backwards.\n\n    Example:\n    arr = [1, 2, 3, 2, 1]\n    output: True\n    \"\"\"\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            sublist = arr[i:j+1]\n            if sublist == sublist[::-1]:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 2, 1]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 486,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum: int = 15) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that sums up to the target_sum.\"\"\"\n    def find_combination(start, curr_sum):\n        if curr_sum == target_sum:\n            return True\n        if curr_sum > target_sum or start == len(nums):\n            return False\n        for i in range(start, len(nums)):\n            if find_combination(i + 1, curr_sum + nums[i]):\n                return True\n        return False\n\n    return find_combination(0, 0)\n\ndef g(nums: List[int]):\n    \"\"\"This solution returns the input list as is\"\"\"\n    return nums\n\nassert f(g([2, 4, 6, 8, 10, 12, 14, 16, 18])) == False\n",
        "idx_generation": 341,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome, considering only alphanumeric characters and ignoring case.\n    \"\"\"\n    clean_s = ''.join(char.lower() for char in s if char.isalnum())\n    return clean_s == clean_s[::-1]\ndef g():\n    return \"A man, a plan, a canal: Panama!\"\nassert f(g()) == True\n",
        "idx_generation": 27,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date_str: str, year=2022) -> bool:\n    \"\"\"Check if the given date is in the future with respect to the specified year.\"\"\"\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    return date.year > year\n\ndef g(year=2022):\n    current_date = datetime.now()\n    future_date = current_date.replace(year=year + 1)\n    return future_date.strftime(\"%Y-%m-%d\")\n\nassert f(g()) == True\n",
        "idx_generation": 24,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[str]) -> bool:\n    \"\"\"\n    Check if the given list of strings is sorted in lexicographical order.\n\n    Sample Input:\n    lst = ['apple', 'banana', 'cherry', 'date']\n\n    Sample Output:\n    True\n    \"\"\"\n    return sorted(lst) == lst\n\ndef g(lst: List[str] = ['apple', 'banana', 'cherry', 'date']):\n    return lst\n\nassert f(g()) == True\n",
        "idx_generation": 467,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    nums = [1, 2, 3, 2, 1]\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 369,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose product is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target % num == 0 and target // num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 6):\n    return nums, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 464,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: List[int], k: int) -> List[int]:\n    \"\"\"\n    Shuffle the elements in the given list k times.\n    \"\"\"\n    for _ in range(k):\n        random.shuffle(lst)\n    return lst\n\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=3):\n    return (lst, k)\n\nassert f(*g()) != [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n",
        "idx_generation": 351,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst1: List[int], lst2: List[int]) -> bool:\n    \"\"\"\n    Check if there exists a pair of elements, one from each list, that sums up to a perfect square.\n\n    Example:\n    lst1 = [1, 2, 3]\n    lst2 = [4, 5, 6]\n    output: True\n    \"\"\"\n    for num1 in lst1:\n        for num2 in lst2:\n            if (num1 + num2)**0.5 == int((num1 + num2)**0.5):\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3], [4, 5, 6]\n\nassert f(*g()) == True\n",
        "idx_generation": 486,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Given a list of integers, find the maximum sum of a subset that is less than or equal to the target.\n    If such a subset exists, return True. Otherwise, return False.\n    \"\"\"\n    subset_sums = set()\n    subset_sums.add(0)\n    for num in nums:\n        new_sums = set()\n        for subset_sum in subset_sums:\n            new_sum = subset_sum + num\n            if new_sum <= target:\n                new_sums.add(new_sum)\n        subset_sums.update(new_sums)\n    return max(subset_sums) == target\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 345,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(string: str, n=3) -> bool:\n    \"\"\"\n    Find if the given string contains exactly n vowels.\n\n    Sample Input:\n    string = \"Hello, World!\"\n    n = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in string.lower():\n        if char in vowels:\n            count += 1\n    return count == n\n\ndef g(string = \"Hello, World!\", n = 3):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in string.lower():\n        if char in vowels:\n            count += 1\n    if count < n:\n        string += 'a' * (n - count)\n    elif count > n:\n        string = string.replace('a', '', count - n)\n    return string[::-1]\n\nassert f(g()) == True\n",
        "idx_generation": 28,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if x, y, and z are Pythagorean triplets.\"\"\"\n    return x**2 + y**2 == z**2\ndef g(x=3, y=4, z=5):\n    return (x, y, z)\nassert f(*g())\n",
        "idx_generation": 24,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target number, return a list of all numbers in the list that are divisible by the target.\n    The numbers in the output list should be in ascending order.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 2\n\n    Output:\n    [2, 4]\n\n    Explanation: The numbers [2, 4] in the list are divisible by the target number 2.\n    \"\"\"\n    divisible_nums = []\n    for num in nums:\n        if num % target == 0:\n            divisible_nums.append(num)\n    return sorted(divisible_nums)\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 2):\n    return (nums, target)\n\nassert f(*g()) == [2, 4]\n",
        "idx_generation": 468,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a pangram\"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    return set(alphabet) <= set(s.lower())\n\ndef g(s: str = \"The quick brown fox jumps over the lazy dog\"):\n    return s\n\nassert f(g()) == True\n",
        "idx_generation": 372,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains duplicate elements.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 1]\n\nassert f(g()) == True\n\n",
        "idx_generation": 465,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the list that sums up to the target value.\n    \"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target:\n            return True\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n\n    return False\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list in reversed order.\n    \"\"\"\n    return nums[::-1]\n\nassert f(g([3, 4, -7, 2, 1, 3, 1]), 4)\n",
        "idx_generation": 353,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of numbers, check if the sum of all the numbers is a prime number.\n    \"\"\"\n    total = sum(nums)\n    if total < 2:\n        return False\n    for i in range(2, int(total**0.5) + 1):\n        if total % i == 0:\n            return False\n    return True\ndef g():\n    return [2, 4, 6, 8, 10]\nassert f(g()) == False\n\n",
        "idx_generation": 486,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that sums up to the target value.\n    \"\"\"\n    def find_combination(start, curr_sum):\n        if curr_sum == target:\n            return True\n        if curr_sum > target or start == len(nums):\n            return False\n        if find_combination(start + 1, curr_sum + nums[start]):\n            return True\n        if find_combination(start + 1, curr_sum):\n            return True\n        return False\n\n    return find_combination(0, 0)\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is.\n    \"\"\"\n    return nums\n\nassert f(g([1, 2, 3, 4, 5]), target=10)\n",
        "idx_generation": 354,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(string: str, n=3) -> bool:\n    \"\"\"\n    Find if the given string contains exactly n vowels.\n\n    Sample Input:\n    string = \"Hello, World!\"\n    n = 3\n\n    Sample Output:\n    True\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in string.lower():\n        if char in vowels:\n            count += 1\n    return count == n\n\ndef g(string = \"Hello, World!\", n = 3):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in string.lower():\n        if char in vowels:\n            count += 1\n    if count < n:\n        string += 'a' * (n - count)\n    elif count > n:\n        string = string.replace('a', '', count - n)\n    return string.replace(' ', '')\n\nassert f(g()) == True\n",
        "idx_generation": 28,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers are all divisible by their greatest common divisor\"\"\"\n    common_divisor = gcd(*numbers)\n    return all(num % common_divisor == 0 for num in numbers)\n\ndef g(numbers=[12, 24, 36, 48]):\n    return numbers\n\nassert f(g()) == True\n",
        "idx_generation": 36,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list contains any duplicate elements.\n\n    Sample Input:\n    nums = [1, 2, 3, 2, 4]\n\n    Sample Output:\n    True\n\n    Explanation: The list contains duplicate elements (2).\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 2, 4]\n\nassert f(g()) == True\n\n",
        "idx_generation": 468,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there exists a pair of distinct numbers in the given list whose difference is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if num - target in num_set or num + target in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 2):\n    return nums, target\n\nassert f(*g()) == True\n",
        "idx_generation": 377,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, calculate the sum of all the elements in the matrix.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    45\n    \"\"\"\n    return sum(sum(row) for row in matrix)\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return (matrix,)\n\nassert f(*g()) == 45\n",
        "idx_generation": 469,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=93252338) -> bool:\n    \"\"\"Check if the number is a power of a\"\"\"\n    return x != 0 and (x == 1 or x % a == 0 and f(x // a))\n\ndef g(a = 93252338):\n    return a ** 3\n\nassert f(g()) == True\n",
        "idx_generation": 358,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, return the sum of all the elements in the matrix.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    45\n    \"\"\"\n    total_sum = 0\n    for row in matrix:\n        for num in row:\n            total_sum += num\n    return total_sum\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 45\n\n",
        "idx_generation": 487,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> int:\n    \"\"\"\n    Find the maximum sum of any contiguous subarray in the given list.\n\n    Example:\n    lst = [1, -2, 3, -4, 5]\n\n    Output:\n    5 (sum of [3, -4, 5])\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    for num in lst:\n        curr_sum = max(num, curr_sum + num)\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n\ndef g():\n    return [1, -2, 3, -4, 5]\n\nassert f(g()) == 5\n",
        "idx_generation": 355,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, target='abc') -> bool:\n    \"\"\"Check if the target substring is present in the given string.\"\"\"\n    return target in s\ndef g(s='abcdefg'):\n    return s\nassert f(g()) == True\n",
        "idx_generation": 28,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: float, a=1357924680) -> bool:\n    \"\"\"Find a number that when cubed is close to a.\"\"\"\n    return abs(x ** 3 - a) < 10 ** (-3)\ndef g(a = 1357924680):\n    return a ** (1/3)\nassert f(g()) == True\n",
        "idx_generation": 43,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the length of the longest increasing subarray.\n    \"\"\"\n    max_length = 1\n    curr_length = 1\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            curr_length += 1\n        else:\n            max_length = max(max_length, curr_length)\n            curr_length = 1\n    return max(max_length, curr_length)\n\ndef g():\n    arr = [1, 2, 3, 2, 4, 5, 6, 3, 2, 1]\n    return arr\n\nassert f(g()) == 4\n",
        "idx_generation": 469,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, digits=[2, 4, 6, 8]) -> bool:\n    \"\"\"Check if the given number contains only even digits\"\"\"\n    return all(int(d) % 2 == 0 for d in str(num))\n\ndef g():\n    return 2468\n\nassert f(g()) == True\n\n",
        "idx_generation": 378,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], k: int) -> int:\n    \"\"\"\n    Given a list of integers `nums` and an integer `k`, find the maximum sum of any subarray of size `k` in `nums`.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    start = 0\n    for end, num in enumerate(nums):\n        curr_sum += num\n        if end >= k - 1:\n            max_sum = max(max_sum, curr_sum)\n            curr_sum -= nums[start]\n            start += 1\n    return max_sum\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], k: int = 3):\n    return nums, k\n\nassert f(*g()) == 12\n\n",
        "idx_generation": 477,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Find the sum of all elements in the matrix\n    \"\"\"\n    total_sum = 0\n    for row in matrix:\n        for num in row:\n            total_sum += num\n    return total_sum\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 45\n\n",
        "idx_generation": 360,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, return the sum of elements in each column as a list.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    [12, 15, 18]\n    \"\"\"\n    column_sums = [0] * len(matrix[0])\n    for row in matrix:\n        for i, num in enumerate(row):\n            column_sums[i] += num\n    return column_sums\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [12, 15, 18]\n\n",
        "idx_generation": 487,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of any non-adjacent numbers.\n\n    Sample input:\n    nums = [2, 4, 6, 8, 10]\n\n    Sample output:\n    18\n\n    Explanation: The maximum sum can be achieved by selecting the numbers 2, 6, and 10.\n    \"\"\"\n\n    if len(nums) == 0:\n        return 0\n\n    n = len(nums)\n    dp = [0] * n\n\n    dp[0] = nums[0]\n\n    for i in range(1, n):\n        dp[i] = max(dp[i-1], dp[i-2] + nums[i])\n\n    return dp[-1]\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g()) == 18\n\n",
        "idx_generation": 358,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, substring='python') -> bool:\n    \"\"\"Check if the given substring is present in the string\"\"\"\n    return substring in s\ndef g(substring = 'python'):\n    return 'I love programming in ' + substring\nassert f(g()) == True\n",
        "idx_generation": 29,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import Optional\ndef f(num: int, divisor: int, remainder: Optional[int] = None) -> bool:\n    \"\"\"\n    Determine if a given number is divisible by a divisor and leaves the specified remainder.\n\n    Sample input:\n    20, 4, 0\n\n    Sample output:\n    True\n\n    Explanation:\n    The number 20 is divisible by 4 and leaves a remainder of 0.\n    \"\"\"\n    if remainder is not None:\n        return num % divisor == remainder\n    return num % divisor == 0\n\ndef g(num: int = 20, divisor: int = 4, remainder: Optional[int] = None):\n    return (num, divisor, remainder)\nassert f(*g())\n",
        "idx_generation": 48,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with the elements in reverse order.\n\n    Sample Input:\n    [1, 2, 3, 4, 5]\n\n    Sample Output:\n    [5, 4, 3, 2, 1]\n    \"\"\"\n    return nums[::-1]\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return (nums,)\n\nassert f(*g()) == [5, 4, 3, 2, 1]\n",
        "idx_generation": 469,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]\n\nassert f(g()) == True\n",
        "idx_generation": 393,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the unique elements in the original list, in the same order.\n\n    Example:\n    nums = [2, 4, 2, 1, 2, 3, 2]\n\n    The unique elements in the list are [2, 4, 1, 3].\n    Therefore, f(nums) returns [2, 4, 1, 3].\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n\ndef g(nums: List[int] = [2, 4, 2, 1, 2, 3, 2]):\n    return nums\n\nassert f(g()) == [2, 4, 1, 3]\n",
        "idx_generation": 479,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there is a subarray in the given list whose sum is equal to 0.\n    \"\"\"\n    prefix_sum = 0\n    seen = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == 0 or prefix_sum in seen:\n            return True\n        seen.add(prefix_sum)\n    return False\n\ndef g(nums=[4, 2, -3, 1, 6]):\n    return nums\n\nassert f(g()) == True\n\n",
        "idx_generation": 366,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Return a list with the duplicates removed while preserving the original order of elements.\n\n    Sample Input:\n    nums = [1, 2, 3, 2, 4, 5, 6, 5, 4]\n\n    Sample Output:\n    [1, 2, 3, 4, 5, 6]\n    \"\"\"\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result\n\ndef g(nums: List[int] = [1, 2, 3, 2, 4, 5, 6, 5, 4]):\n    return nums\n\nassert f(g()) == [1, 2, 3, 4, 5, 6]\n\n",
        "idx_generation": 487,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], n: int) -> bool:\n    \"\"\"\n    Given a list of numbers `nums` and an integer `n`, find if there exists a subsequence in `nums`\n    such that the sum of the subsequence is divisible by `n`.\n\n    For example, if nums = [1, 2, 3, 4, 5] and n = 6, the subsequence [1, 5] has a sum of 6, which is divisible by n.\n    \"\"\"\n    def subset_sum(nums, target_sum, memo={}):\n        if target_sum in memo:\n            return memo[target_sum]\n        if target_sum == 0:\n            return True\n        if target_sum < 0 or not nums:\n            return False\n        include = subset_sum(nums[1:], target_sum - nums[0], memo)\n        exclude = subset_sum(nums[1:], target_sum, memo)\n        memo[target_sum] = include or exclude\n        return memo[target_sum]\n\n    return subset_sum(nums, n)\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], n: int = 6):\n    return (nums, n)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 360,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, s='python', t='PYTHON') -> bool:\n    \"\"\"Check if the string s is equal to string t when ignoring case. Output True if they are equal, False otherwise.\"\"\"\n    return s.lower() == t.lower()\ndef g(s = 'python', t = 'PYTHON'):\n    return s.lower()\nassert f(g()) == True\n",
        "idx_generation": 31,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nimport math\n\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"\n    Check if there are at least k prime numbers in the given list of integers.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for num in nums:\n        if is_prime(num):\n            count += 1\n    return count >= k\n\ndef g(k=3):\n    return [2, 3, 5, 7, 9, 11, 13, 17] * (k-1) + [19, 23]\n\nassert f(g()) == True\n",
        "idx_generation": 52,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list is sorted in non-decreasing order.\n\n    Sample Input:\n    arr = [1, 2, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return arr == sorted(arr)\n\ndef g(arr: List[int] = [1, 2, 2, 3, 4, 5]):\n    return arr\n\nassert f(g()) == True\n\n",
        "idx_generation": 470,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[str]) -> bool:\n    \"\"\"\n    Check if all strings in the given list have the same length.\n    \"\"\"\n\n    return all(len(s) == len(lst[0]) for s in lst)\n\ndef g():\n    return ['apple', 'banana', 'cherry', 'date']\n\nassert f(g()) == False\n\n",
        "idx_generation": 404,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find two numbers in the list that sum up to the target value and return their indices.\n\n    Sample Input:\n    nums = [2, 7, 11, 15]\n    target = 9\n\n    Sample Output:\n    [0, 1]\n    \"\"\"\n    num_dict = {}\n    for i, num in enumerate(nums):\n        if target - num in num_dict:\n            return [num_dict[target - num], i]\n        num_dict[num] = i\n    return []\n\ndef g():\n    return ([2, 7, 11, 15], 9)\n\nassert f(*g()) == [0, 1]\n",
        "idx_generation": 484,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target value, find two integers in the list such that their sum is equal to the target value.\n    Return the indices of the two integers in a list.\n    \"\"\"\n    num_dict = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_dict:\n            return [num_dict[complement], i]\n        num_dict[num] = i\n    return []\n\ndef g(nums = [1, 6, 4, 2, 3]):\n    return nums\n\nassert f(g()) == [1, 2]\n",
        "idx_generation": 367,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix.\n\n    Sample Input:\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n\n",
        "idx_generation": 488,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there is a subsequence in the given list whose sum is equal to the target number.\n    \"\"\"\n    def subsetSum(numbers, target):\n        if target == 0:\n            return True\n        if not numbers or target < 0:\n            return False\n        return subsetSum(numbers[1:], target) or subsetSum(numbers[1:], target - numbers[0])\n\n    return subsetSum(nums, target)\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 366,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(string: str, substr: str) -> bool:\n    \"\"\"Check if the given substring is present in the string.\"\"\"\n    return substr in string\n\ndef g(string=\"Hello, World!\", substr=\"World\"):\n    return (string, substr)\n\nassert f(*g()) == True\n",
        "idx_generation": 32,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, m: int) -> bool:\n    \"\"\"Find the greatest common divisor (GCD) of two numbers.\"\"\"\n    assert n > 0 and m > 0, 'Hint: n and m should be positive integers.'\n    return math.gcd(n, m)\ndef g(n = 24, m = 36):\n    return n, m\nassert f(*g()) == 12\n",
        "idx_generation": 55,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, sort the list in non-decreasing order using the bubble sort algorithm and return the sorted list.\n\n    Example:\n    arr = [5, 2, 8, 12, 3]\n\n    After sorting, the list becomes [2, 3, 5, 8, 12], so the function should return [2, 3, 5, 8, 12].\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\ndef g():\n    arr = [5, 2, 8, 12, 3]\n    return (arr,)\n\nassert f(*g()) == [2, 3, 5, 8, 12]\n",
        "idx_generation": 471,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with the even numbers in ascending order followed by the odd numbers in descending order.\n    \"\"\"\n    even_nums = sorted([num for num in nums if num % 2 == 0])\n    odd_nums = sorted([num for num in nums if num % 2 != 0], reverse=True)\n    return even_nums + odd_nums\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g()) == [2, 4, 6, 8, 10, 9, 7, 5, 3, 1]\n",
        "idx_generation": 417,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find if there exists a subset of numbers from the list that sums up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n    for i in range(1, n + 1):\n        for j in range(target + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j >= nums[i - 1]:\n                dp[i][j] = dp[i][j] or dp[i - 1][j - nums[i - 1]]\n    return dp[n][target]\n\ndef g(target=20):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 495,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> int:\n    \"\"\"\n    Find the maximum sum of any column in the given 2D array.\n\n    Sample input:\n    arr = [[1, 2, 3],\n           [4, 5, 6],\n           [7, 8, 9]]\n\n    Sample output:\n    18\n\n    Explanation: The columns with maximum sums are:\n    1 4 7 (sum = 12)\n    2 5 8 (sum = 15)\n    3 6 9 (sum = 18)\n    Their maximum sum is 18.\n\n    \"\"\"\n    max_sum = float('-inf')\n    for j in range(len(arr[0])):\n        column_sum = sum([arr[i][j] for i in range(len(arr))])\n        max_sum = max(max_sum, column_sum)\n    return max_sum\n\ndef g() -> List[List[int]]:\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]\n\nassert f(g()) == 18\n",
        "idx_generation": 374,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an identity matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if i == j and matrix[i][j] != 1:\n                return False\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate an identity matrix of the given size.\n    \"\"\"\n    return [[1 if i == j else 0 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n\n",
        "idx_generation": 488,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], target=50) -> bool:\n    \"\"\"\n    Find if there exists a subset of numbers in the list that multiply to the target value.\n    \"\"\"\n    n = len(x)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][1] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < x[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j // x[i - 1]]\n    return dp[n][target]\n\ndef g(target=50):\n    return [2, 5, 10]\n\nassert f(g()) == True\n\n",
        "idx_generation": 381,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(string: str, substr: str) -> bool:\n    \"\"\"Check if a substring is present in the given string.\"\"\"\n    return substr in string\ndef g(string='Hello, World!', substr='World'):\n    return string, substr\nassert f(g()[0], g()[1])\n",
        "idx_generation": 34,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nimport math\ndef f(radius: float, area: float) -> bool:\n    \"\"\"Check if the given area is greater than the area of a circle with the given radius.\"\"\"\n    return area > math.pi * radius * radius\ndef g(radius: float = 5, area: float = 100):\n    return (radius, area)\nassert f(*g()) == True\n",
        "idx_generation": 56,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if any row or column has all elements equal.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 4, 4], [7, 8, 9]]\n\n    Sample Output:\n    True\n    \"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n\n    # Check if any row has all elements equal\n    for row in arr:\n        if len(set(row)) == 1:\n            return True\n    \n    # Check if any column has all elements equal\n    for j in range(cols):\n        column = [arr[i][j] for i in range(rows)]\n        if len(set(column)) == 1:\n            return True\n    \n    return False\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == False\n\n",
        "idx_generation": 471,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    nums = [1, 2, 3, 2, 1]\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 427,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=5) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose sum is equal to k\"\"\"\n    return any(arr[i] + arr[j] == k for i in range(len(arr)) for j in range(i+1, len(arr)))\ndef g(k=5):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 496,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> int:\n    \"\"\"\n    Find the maximum sum of any row in the given 2D array.\n\n    Sample input:\n    arr = [[1, 2, 3],\n           [4, 5, 6],\n           [7, 8, 9]]\n\n    Sample output:\n    24\n\n    Explanation: The rows with maximum sums are:\n    1 2 3 (sum = 6)\n    4 5 6 (sum = 15)\n    7 8 9 (sum = 24)\n    Their maximum sum is 24.\n\n    \"\"\"\n    max_sum = float('-inf')\n    for i in range(len(arr)):\n        row_sum = sum(arr[i])\n        max_sum = max(max_sum, row_sum)\n    return max_sum\n\ndef g() -> List[List[int]]:\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]\n\nassert f(g()) == 24\n",
        "idx_generation": 374,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target value, check if there are two numbers in the list whose sum is equal to the target value.\n    If such numbers exist, return True. Otherwise, return False.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 14\n\nassert f(*g()) == True\n\n",
        "idx_generation": 489,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers 'nums', check if there exists a subsequence of 'nums' such that the sum of its elements is divisible by 10.\n\n    Example:\n    nums = [2, 4, 6, 8, 10]\n\n    The subsequence (2, 6, 8) satisfies the condition since 2 + 6 + 8 = 16 which is divisible by 10.\n\n    Therefore, the output will be True.\n    \"\"\"\n    def subset_sum(arr, n, sum):\n        if sum == 0:\n            return True\n        if n == 0 and sum != 0:\n            return False\n        if arr[n-1] > sum:\n            return subset_sum(arr, n-1, sum)\n        return subset_sum(arr, n-1, sum) or subset_sum(arr, n-1, sum-arr[n-1])\n\n    return subset_sum(nums, len(nums), sum(nums) // 10)\n\ndef g(nums):\n    \"\"\"\n    This solution returns the input list with all even numbers removed.\n\n    Example:\n    g([1, 2, 3, 4, 5, 6])\n    The output will be [1, 3, 5]\n    \"\"\"\n    return [num for num in nums if num % 2 != 0]\n\nassert f(g([1, 2, 3, 4, 5, 6]))\n",
        "idx_generation": 395,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(strings: List[str], target='python') -> bool:\n    \"\"\"Check if the target string is present in the list\"\"\"\n    return target in strings\ndef g(strings = ['java', 'python', 'c++']):\n    return strings\nassert f(g()) == True\n",
        "idx_generation": 34,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, check if there exists a pair of numbers in the list that sum up to the target.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g()) == True\n",
        "idx_generation": 61,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\n\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the sum of all even numbers in the list.\n    \"\"\"\n    total = 0\n    for num in arr:\n        if num % 2 == 0:\n            total += num\n    return total\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr\n\nassert f(g()) == 30\n\n",
        "idx_generation": 471,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str]) -> bool:\n    \"\"\"\n    Check if the given list of names is in alphabetical order.\n    Return True if the list is in alphabetical order, False otherwise.\n    \"\"\"\n    return names == sorted(names)\n\ndef g(names=[\"Alice\", \"Bob\", \"Charlie\", \"David\"]):\n    return (names,)\n    \nassert f(*g()) == True\n",
        "idx_generation": 446,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a pair of numbers that multiply to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        if target % num == 0 and target // num in nums_set and target // num != num:\n            return True\n    return False\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8], target: int = 15):\n    return nums, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 499,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of integers in the list whose sum is equal to the target\"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(arr: List[int], target: int):\n    return (arr, target)\n\nassert f(*g([2, 7, 11, 15], 9)) == True\n",
        "idx_generation": 374,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum that can be obtained by adding any two numbers in the list.\n    \"\"\"\n    max_sum = float('-inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            max_sum = max(max_sum, nums[i] + nums[j])\n    return max_sum\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 19\n\n",
        "idx_generation": 489,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subsequence of the list whose sum is greater than or equal to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(nums=[1, 3, 5, 7], target=8):\n    return nums, target\n\nassert f(*g()) == True\n",
        "idx_generation": 401,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(sentence: str) -> bool:\n    \"\"\"\n    Check if a sentence is a pangram.\n    A pangram is a sentence that contains every letter of the alphabet at least once.\n    \"\"\"\n    alphabet = set('abcdefghijklmnopqrstuvwxyz')\n    sentence = sentence.lower()\n    for char in sentence:\n        if char.isalpha():\n            alphabet.discard(char)\n    return not alphabet\n\ndef g(sentence=\"The quick brown fox jumps over the lazy dog\"):\n    return sentence\n\nassert f(g()) == True\n",
        "idx_generation": 35,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: List[int], n=5, s=25) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 5, s = 25):\n    if n == 1:\n        return [s]\n    elif n == 2:\n        return [s - 1, 1]\n    elif n == 3:\n        return [s - 2, 1, 1]\n    elif n == 4:\n        return [s/4, s/4, s/4, s/4]\n    else:\n        return [s/5, s/5, s/5, s/5, s/5]\nassert f(g()) == True\n",
        "idx_generation": 73,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"\n    Given an n x m matrix and a target integer, determine whether the target integer is present in the matrix.\n\n    Sample Input:\n    matrix = [\n        [1, 3, 5],\n        [7, 9, 11],\n        [13, 15, 17]\n    ]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g():\n    return ([\n        [1, 3, 5],\n        [7, 9, 11],\n        [13, 15, 17]\n    ], 9)\n\nassert f(*g())\n",
        "idx_generation": 473,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is a palindrome.\n    Return True if the list is a palindrome, False otherwise.\n    \"\"\"\n    return numbers == numbers[::-1]\n\ndef g(numbers=[1, 2, 3, 2, 1]):\n    return (numbers,)\n    \nassert f(*g()) == True\n",
        "idx_generation": 446,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a matrix of integers, return the sum of each diagonal in the matrix.\n    \"\"\"\n    n = len(matrix)\n    diagonal_sums = []\n    \n    # Calculate sum of the main diagonal\n    main_diagonal_sum = sum(matrix[i][i] for i in range(n))\n    diagonal_sums.append(main_diagonal_sum)\n    \n    # Calculate sum of the secondary diagonal\n    secondary_diagonal_sum = sum(matrix[i][n - i - 1] for i in range(n))\n    diagonal_sums.append(secondary_diagonal_sum)\n        \n    return diagonal_sums\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [15, 15]\n",
        "idx_generation": 375,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the numbers that are divisible by 3 but not divisible by 2.\n    \"\"\"\n    return [num for num in nums if num % 3 == 0 and num % 2 != 0]\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == [3, 9]\n\n",
        "idx_generation": 489,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int = 10, k: int = 2) -> bool:\n    \"\"\"Check if there are k numbers in the list that sum up to the target value\"\"\"\n    def helper(nums, target, k, curr_sum, curr_index):\n        if k == 0:\n            return curr_sum == target\n        if curr_index == len(nums):\n            return False\n        return helper(nums, target, k, curr_sum + nums[curr_index], curr_index + 1) or helper(nums, target, k - 1, nums[curr_index], curr_index + 1)\n    \n    return helper(nums, target, k, 0, 0)\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 10, k: int = 2):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 408,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(strings: List[str], char='a') -> bool:\n    \"\"\"Check if all strings in the list contain the given character.\"\"\"\n    return all(char in string for string in strings)\ndef g(char='a'):\n    return ['apple', 'banana', 'pear', 'grape']\nassert f(g()) == True\n",
        "idx_generation": 36,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, a=14302, b=5) -> bool:\n    \"\"\"\n    Given an integer n, check if n is a perfect square number.\n\n    Sample input:\n    25\n\n    Sample output:\n    True\n\n    Explanation: 25 is a perfect square because 5 * 5 = 25.\n    \"\"\"\n    assert n >= 0, 'Hint: n should be a non-negative integer.'\n    return n == int(n ** 0.5) ** 2\ndef g(n = 25, a = 14302, b = 5):\n    return n\nassert f(g()) == True\n",
        "idx_generation": 73,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the list contains any negative numbers.\"\"\"\n    return any(num < 0 for num in lst)\ndef g():\n    return [1, -2, 3, 4, -5]\nassert f(g()) == True\n",
        "idx_generation": 473,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> str:\n    \"\"\"\n    Reverse the order of words in a given string.\n\n    Sample Input:\n    \"Hello World\"\n\n    Sample Output:\n    \"World Hello\"\n    \"\"\"\n    words = s.split()\n    reversed_words = words[::-1]\n    return ' '.join(reversed_words)\n\ndef g():\n    return \"Hello World\"\n\nassert f(g()) == \"World Hello\"\n",
        "idx_generation": 447,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target number, find the index of the first occurrence of the target number in the list.\n    If the target is not found, return -1.\n    \"\"\"\n    for i, num in enumerate(nums):\n        if num == target:\n            return i\n    return -1\n\ndef g():\n    nums = [1, 2, 3, 4, 5, 6, 7]\n    target = 4\n    return (nums, target)\n\nassert f(*g()) == 3\n",
        "idx_generation": 376,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\nfrom typing import List\n\ndef f(dates: List[datetime.date]) -> bool:\n    \"\"\"\n    Given a list of dates, check if all dates are in the past (before today's date).\n\n    Example:\n    dates = [datetime.date(2022, 1, 1), datetime.date(2022, 6, 30), datetime.date(2023, 12, 31)]\n    The date today is 2022-12-15, so the function should return False.\n\n    Return True if all dates are in the past, otherwise False.\n    \"\"\"\n    today = datetime.date.today()\n    return all(date < today for date in dates)\n\ndef g(dates: List[datetime.date] = [datetime.date(2022, 1, 1), datetime.date(2022, 6, 30), datetime.date(2023, 12, 31)]):\n    return dates\n\nassert f(g()) == False\n\n",
        "idx_generation": 491,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, k: int = 2) -> List[int]:\n    \"\"\"\n    Find k numbers in the given list nums that multiply to the target value.\n    \"\"\"\n    result = []\n    def backtrack(remain, start, path):\n        if remain == 1 and len(path) == k:\n            result.append(path)\n            return\n        for i in range(start, len(nums)):\n            if nums[i] > remain:\n                break\n            if remain % nums[i] == 0:\n                backtrack(remain // nums[i], i + 1, path + [nums[i]])\n\n    backtrack(target, 0, [])\n    return result\n\ndef g(nums=[1, 2, 3, 4, 5], target=10, k=2):\n    return nums\n\nassert f(g(), target=10) == [[2, 5]]\n",
        "idx_generation": 414,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(ls: str) -> bool:\n    \"\"\"\n    Find if the given string is a palindrome.\n    \"\"\"\n    return ls == ls[::-1]\n\ndef g():\n    return \"madam\"\n\nassert f(g()) == True\n",
        "idx_generation": 37,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target: int, divisor: int) -> bool:\n    \"\"\"Check if the target number exists in the list and is divisible by the given divisor.\"\"\"\n    return any(target % num == 0 and num % divisor == 0 for num in lst)\n\ndef g(divisor: int = 3):\n    return [3, 6, 9, 12, 15]\n\nassert f(g(), 18, 3) == True\n",
        "idx_generation": 74,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int]) -> int:\n    \"\"\"Find the maximum element in a list of integers.\"\"\"\n    return max(num_list)\n\ndef g(num_list=[1, 5, 2, 9, 7]):\n    return num_list\n\nassert f(g()) == 9\n",
        "idx_generation": 474,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[str]) -> List[str]:\n    \"\"\"\n    Sort the given list of strings in descending order of their lengths.\n\n    Sample Input:\n    arr = ['apple', 'banana', 'cherry', 'date', 'elderberry']\n\n    Sample Output:\n    ['elderberry', 'banana', 'cherry', 'apple', 'date']\n    \"\"\"\n    return sorted(arr, key=lambda x: len(x), reverse=True)\n\ndef g():\n    return ['apple', 'banana', 'cherry', 'date', 'elderberry']\n\nassert f(g()) == ['elderberry', 'banana', 'cherry', 'apple', 'date']\n\n",
        "idx_generation": 448,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> Tuple[int, int]:\n    \"\"\"\n    Given a matrix of integers and a target number, find the indices (row and column) of the first occurrence of the target number in the matrix.\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target:\n                return (i, j)\n    return (-1, -1)\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 5\n    return (matrix, target)\n\nassert f(*g()) == (1, 1)\n",
        "idx_generation": 385,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the even numbers.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    The function should return [2, 4, 6, 8, 10].\n\n    Return a list of even numbers.\n    \"\"\"\n    return [num for num in nums if num % 2 == 0]\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g()) == [2, 4, 6, 8, 10]\n\n",
        "idx_generation": 491,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target, check if there exists a combination of exactly 3 numbers from the list\n    that adds up to the target value. If such a combination exists, return True. Otherwise, return False.\n    \"\"\"\n    def backtrack(curr_sum: int, index: int, count: int) -> bool:\n        if curr_sum == target and count == 3:\n            return True\n        if curr_sum > target or index >= len(numbers) or count > 3:\n            return False\n\n        for i in range(index, len(numbers)):\n            if backtrack(curr_sum + numbers[i], i + 1, count + 1):\n                return True\n\n        return False\n\n    return backtrack(0, 0, 0)\n\ndef g(target=10):\n    \"\"\"Generate a list of numbers.\"\"\"\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 10) == True\n\n\n",
        "idx_generation": 421,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, k: int, target_substring: str) -> bool:\n    \"\"\"\n    Find if there exists a substring of length k in the given string s which matches the target_substring.\n    \"\"\"\n    for i in range(len(s) - k + 1):\n        if s[i:i+k] == target_substring:\n            return True\n    return False\n\ndef g(s=\"abcabc\", k=3, target_substring=\"cab\"):\n    return s\n\nassert f(g(), k=3, target_substring=\"cab\") == True\n",
        "idx_generation": 37,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, n=1) -> bool:\n    \"\"\"Check if the last digit of 2^n is equal to the given digit s\"\"\"\n    return str(2 ** n)[-1] == s\n\ndef g(n = 1):\n    return (\"2\" if n == 0 else \"2\" if n == 1 else \"4\")\n\nassert f(g()) == True\n",
        "idx_generation": 75,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers and an integer n, return a new list with all elements from the original list that are divisible by n.\n\n    Sample Input:\n    n = 3\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n    Sample Output:\n    [3, 6, 9]\n    \"\"\"\n    return [num for num in lst if num % n == 0]\n\ndef g() -> Tuple[int, List[int]]:\n    return 3, [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(*g()) == [3, 6, 9]\n\n",
        "idx_generation": 474,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list is a strictly increasing sequence.\n\n    Sample Input:\n    [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return all(nums[i] < nums[i+1] for i in range(len(nums)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n\n",
        "idx_generation": 452,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> List[List[int]]:\n    \"\"\"\n    Given a matrix of integers and a target number, replace all occurrences of the target number in the matrix with the value -1.\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target:\n                matrix[i][j] = -1\n    return matrix\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    target = 5\n    return (matrix, target)\n\nassert f(*g()) == [[1, 2, 3], [4, -1, 6], [7, 8, 9]]\n",
        "idx_generation": 385,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix of integers, rotate the matrix 90 degrees clockwise and return the rotated matrix.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    output: [\n        [7, 4, 1],\n        [8, 5, 2],\n        [9, 6, 3]\n    ]\n    \"\"\"\n    rotated_matrix = [[matrix[j][i] for j in range(len(matrix)-1, -1, -1)] for i in range(len(matrix[0]))]\n    return rotated_matrix\n\ndef g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\nassert f(g()) == [\n    [7, 4, 1],\n    [8, 5, 2],\n    [9, 6, 3]\n]\n",
        "idx_generation": 492,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Calculate the product of all even numbers in the given list of integers.\n\n    Sample Input:\n    [2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Sample Output:\n    3840\n    \"\"\"\n    return 1 if len(nums) == 0 else (nums[0] * f(nums[1:])) if nums[0] % 2 == 0 else f(nums[1:])\n\ndef g():\n    return [2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 3840\n",
        "idx_generation": 431,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(strings: List[str], target_char='a') -> bool:\n    \"\"\"Check if there is a string in the list that contains the target_char at least twice\"\"\"\n    return any(string.count(target_char) >= 2 for string in strings)\n\ndef g(target_char='a'):\n    return ['apple', 'banana', 'cherry', 'peach']\n\nassert f(g()) == True\n",
        "idx_generation": 39,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: List[int], n=8, s=50) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 8, s = 50):\n    if n == 1:\n        return [s]\n    elif n == 2:\n        return [s - 1, 1]\n    elif n == 3:\n        return [s - 2, 1, 1]\n    elif n == 4:\n        return [s/4, s/4, s/4, s/4]\n    elif n == 5:\n        return [s/5, s/5, s/5, s/5, s/5]\n    elif n == 6:\n        return [s/6, s/6, s/6, s/6, s/6, s/6]\n    elif n == 7:\n        return [s/7, s/7, s/7, s/7, s/7, s/7, s/7]\n    else:\n        return [s/8, s/8, s/8, s/8, s/8, s/8, s/8, s/8]\nassert f(g()) == True\n",
        "idx_generation": 78,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list is sorted in non-decreasing order.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return arr == sorted(arr)\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g()) == True\n\n\n",
        "idx_generation": 475,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of integers is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g()) == True\n",
        "idx_generation": 453,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import numpy as np\nfrom typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a diagonal matrix.\"\"\"\n    n = len(matrix)\n\n    # Check if the non-diagonal elements are all zero\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n\n    return True\n\ndef g(n=3):\n    \"\"\"Generate a diagonal matrix of size n x n.\"\"\"\n    diagonal_matrix = np.zeros((n, n), dtype=int)\n    for i in range(n):\n        diagonal_matrix[i, i] = i+1\n\n    return diagonal_matrix.tolist()\n\nassert f(g()) == True\n",
        "idx_generation": 388,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, return the sum of each column in the matrix.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    The sum of each column in the matrix is [12, 15, 18].\n    Therefore, f(matrix) returns [12, 15, 18].\n    \"\"\"\n    column_sums = []\n    \n    for j in range(len(matrix[0])):\n        column_sum = sum(row[j] for row in matrix)\n        column_sums.append(column_sum)\n        \n    return column_sums\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [12, 15, 18]\n",
        "idx_generation": 492,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a Fibonacci sequence.\"\"\"\n    if len(nums) < 3:\n        return False\n    for i in range(2, len(nums)):\n        if nums[i] != nums[i-1] + nums[i-2]:\n            return False\n    return True\n\ndef g(n: int):\n    \"\"\"Generate a Fibonacci sequence of length n.\"\"\"\n    sequence = [0, 1]\n    while len(sequence) < n:\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence\n\nassert f(g(8)) == True\n",
        "idx_generation": 433,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, substrings=['python', 'programming', 'puzzle', 'interesting']) -> bool:\n    \"\"\"\n    Find if s contains all the substrings in any order, regardless of case.\n    \"\"\"\n    s = s.lower()\n    substrings = [sub.lower() for sub in substrings]\n    return all((sub in s for sub in substrings))\n\ndef g(substrings=['python', 'programming', 'puzzle', 'interesting']):\n    return \"\".join(substrings)\n\nassert f(g()) == True\n",
        "idx_generation": 41,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\ndef f(x: List[int], n=5, s=100) -> bool:\n    \"\"\"Find a list of n integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 5, s = 100):\n    x = [s // n] * n\n    remainder = s % n\n    for i in range(remainder):\n        x[i] += 1\n    return x\nassert f(g()) == True\n",
        "idx_generation": 81,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there are three numbers in the given list that add up to the target number.\n\n    Sample input:\n    [1, 2, 3, 4, 5], 9\n\n    Sample output:\n    True\n\n    Explanation:\n    The numbers 2, 4, and 3 add up to 9.\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            total = nums[i] + nums[left] + nums[right]\n            if total == target:\n                return True\n            elif total < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (nums, target)\n\nassert f(*g())\n",
        "idx_generation": 476,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Find the index of the target word in the list of words\"\"\"\n    return words.index(target)\ndef g(words = ['java', 'python', 'ruby', 'javascript']):\n    return words\nassert f(g()) == True\n",
        "idx_generation": 455,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['python', 'programming', 'puzzles']) -> bool:\n    \"\"\"\n    Find a string that contains all the substrings reversed and forward\n    \"\"\"\n    return all((sub in s and sub[::-1] in s for sub in substrings))\n\ndef g(substrings = ['python', 'programming', 'puzzles']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])\n\nassert f(g())\n",
        "idx_generation": 390,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=14302, b=5) -> bool:\n    \"\"\"\n    Given an integer n, find the n-th Fibonacci number.\n\n    Sample input:\n    6\n\n    Sample output:\n    8\n\n    Explanation: The 6th Fibonacci number is 8.\n    \"\"\"\n    assert n >= 0, 'Hint: n should be a non-negative integer.'\n    fib = [0, 1]\n    while len(fib) <= n:\n        fib.append(fib[-1] + fib[-2])\n    return fib[n]\ndef g(n = 6, a = 14302, b = 5):\n    return n\nassert f(g()) == 8\n\n",
        "idx_generation": 495,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the minimum number of jumps required to reach the end of the given list.\n\n    Sample input:\n    nums = [2, 3, 1, 1, 4]\n    \n    Sample output:\n    2\n    \n    Explanation: The minimum jumps are [2, 3].\n    \"\"\"\n    if len(nums) <= 1:\n        return 0\n    if nums[0] == 0:\n        return float('inf')\n    \n    max_reach = nums[0]\n    steps = nums[0]\n    jumps = 1\n    \n    for i in range(1, len(nums)):\n        if i == len(nums) - 1:\n            return jumps\n        max_reach = max(max_reach, i + nums[i])\n        steps -= 1\n        \n        if steps == 0:\n            jumps += 1\n            if i >= max_reach:\n                return -1\n            steps = max_reach - i\n    \n    return -1\n\ndef g() -> List[int]:\n    return [2, 3, 1, 1, 4]\n\nassert f(g()) == 2\n",
        "idx_generation": 436,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, word='hello') -> bool:\n    \"\"\"Check if the given string starts with the word 'hello'\"\"\"\n    return s.startswith(word)\ndef g(word = 'hello'):\n    return word + ' world'\nassert f(g()) == True\n",
        "idx_generation": 43,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(lst: List[int], target: int) -> bool:\n    \"\"\"Check if the target number exists in the list and is divisible by 2.\"\"\"\n    return any(num == target and num % 2 == 0 for num in lst)\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g(), 8) == True\n",
        "idx_generation": 83,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list is sorted in ascending order.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n\n    The list is sorted in ascending order.\n    Therefore, f(nums) returns True.\n    \"\"\"\n    for i in range(len(nums) - 1):\n        if nums[i] > nums[i + 1]:\n            return False\n    return True\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 476,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Find the index of the first occurrence of the target value in the list.\n    Return -1 if the target value is not found.\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return i\n    return -1\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 5):\n    return (nums, target)\n\nassert f(*g()) == 4\n",
        "idx_generation": 458,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> int:\n    \"\"\"\n    Find the maximum sum of any column in the given 2D array.\n\n    Sample input:\n    arr = [[1, 2, 3],\n           [4, 5, 6],\n           [7, 8, 9]]\n\n    Sample output:\n    18\n\n    Explanation: The columns with maximum sums are:\n    1 4 7 (sum = 12)\n    2 5 8 (sum = 15)\n    3 6 9 (sum = 18)\n    Their maximum sum is 18.\n\n    \"\"\"\n    max_sum = float('-inf')\n    for j in range(len(arr[0])):\n        column_sum = sum([arr[i][j] for i in range(len(arr))])\n        max_sum = max(max_sum, column_sum)\n    return max_sum\n\ndef g() -> List[List[int]]:\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]\n\nassert f(g()) == 18\n",
        "idx_generation": 393,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if the target value is present in the given list.\n    Return True if present, else False.\n    \"\"\"\n    for num in nums:\n        if num == target:\n            return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 5):\n    return nums, target\n\nassert f(*g()) == True\n",
        "idx_generation": 497,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of any contiguous subarray.\n\n    Example:\n    nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n    \n    The contiguous subarray with the maximum sum is [4, -1, 2, 1], which sums up to 6.\n    Therefore, f(nums) returns 6.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    for num in nums:\n        curr_sum = max(num, curr_sum + num)\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum\n\ndef g(nums: List[int] = [-2, 1, -3, 4, -1, 2, 1, -5, 4]):\n    return nums\n\nassert f(g()) == 6\n",
        "idx_generation": 442,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"\n    Check if a given string contains a specific substring.\n    \"\"\"\n    return substring in string\ndef g(substring = 'abc'):\n    return substring + 'def'\nassert f(g()) == True\n",
        "idx_generation": 43,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], num_rows=3, num_cols=3) -> bool:\n    \"\"\"Check if a given matrix is a diagonal matrix\"\"\"\n    for i in range(num_rows):\n        for j in range(num_cols):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\ndef g(matrix=[[1, 0, 0], [0, 2, 0], [0, 0, 3]], num_rows=3, num_cols=3):\n    return matrix\nassert f(g()) == True\n",
        "idx_generation": 85,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, return True if the list is in strictly increasing order, otherwise return False.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return all(arr[i] < arr[i+1] for i in range(len(arr)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n",
        "idx_generation": 476,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=0) -> bool:\n    \"\"\"Check if the difference of any two numbers in the list is equal to the target.\"\"\"\n    return any(lst[i] - lst[j] == target for i in range(len(lst)) for j in range(i+1, len(lst)))\ndef g(target=0):\n    return [10, 20, 30, 40, 50]\nassert f(g()) == False\n\n",
        "idx_generation": 462,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find all the indices where the target value occurs in the given list.\n    Return a list of indices.\n    \"\"\"\n    indices = []\n    for i in range(len(arr)):\n        if arr[i] == target:\n            indices.append(i)\n    return indices\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 5):\n    return arr, target\n\nassert f(*g()) == [4]\n\n",
        "idx_generation": 395,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a pair of numbers that sum up to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for i in range(len(nums)-1):\n        complement = target - nums[i]\n        if complement in nums_set and complement != nums[i]:\n            return True\n    return False\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8], target: int = 11):\n    return nums, target\n\nassert f(*g()) == True\n",
        "idx_generation": 497,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of any contiguous subarray.\n\n    Example:\n    nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\n    The contiguous subarray with the maximum sum is [4, -1, 2, 1], and the sum is 6.\n    Therefore, f(nums) returns 6.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n\ndef g(nums: List[int] = [-2, 1, -3, 4, -1, 2, 1, -5, 4]):\n    return nums\n\nassert f(g()) == 6\n\n",
        "idx_generation": 450,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"\n    Check if a given string starts with a specific substring.\n    \"\"\"\n    return string.startswith(substring)\ndef g(substring = 'abc'):\n    return substring + 'xyz'\nassert f(g()) == True\n",
        "idx_generation": 48,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a diagonal matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a diagonal matrix of the given size\n    \"\"\"\n    return [[1 if i == j else 0 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n",
        "idx_generation": 90,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the difference between the maximum and minimum elements in the list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n\n    The maximum element in the list is 5 and the minimum element is 1.\n    Therefore, f(nums) returns 5 - 1 = 4.\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    max_num = min_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    return max_num - min_num\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == 4\n",
        "idx_generation": 477,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list is palindrome.\n    Return True if the list is palindrome, False otherwise.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 4, 3, 2, 1]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 463,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target number, return the index of the first occurrence of the target number in the list.\n    If the target number is not found, return -1.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n    target = 3\n\n    Sample output:\n    2\n\n    Explanation: The target number 3 is found at index 2 in the list.\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return i\n    return -1\n\ndef g(nums=[1, 2, 3, 4, 5], target=3):\n    return nums, target\n\nassert f(*g()) == 2\n",
        "idx_generation": 396,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix, rotate it 90 degrees counter-clockwise.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    The matrix after rotating 90 degrees counter-clockwise is:\n    [[3, 6, 9], [2, 5, 8], [1, 4, 7]]\n    Therefore, f(matrix) returns [[3, 6, 9], [2, 5, 8], [1, 4, 7]].\n    \"\"\"\n    n = len(matrix)\n    rotated_matrix = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        for j in range(n):\n            rotated_matrix[i][j] = matrix[j][n - i - 1]\n\n    return rotated_matrix\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [[3, 6, 9], [2, 5, 8], [1, 4, 7]]\n\n",
        "idx_generation": 497,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the length of the longest increasing subsequence.\n\n    Example:\n    nums = [10, 9, 2, 5, 3, 7, 101, 18]\n\n    The longest increasing subsequence is [2, 3, 7, 101], and its length is 4.\n    Therefore, f(nums) returns 4.\n    \"\"\"\n    dp = [1] * len(nums)\n\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)\n\ndef g(nums: List[int] = [10, 9, 2, 5, 3, 7, 101, 18]):\n    return nums\n\nassert f(g()) == 4\n\n",
        "idx_generation": 450,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(string: str, substring: str) -> bool:\n    \"\"\"Check if the given substring is present in the string in the same order as it appears.\"\"\"\n    i = 0\n    for char in string:\n        if char == substring[i]:\n            i += 1\n        if i == len(substring):\n            return True\n    return False\n\ndef g(string=\"abcdefghij\", substring=\"def\"):\n    return (string, substring)\n\nassert f(*g()) == True\n",
        "idx_generation": 52,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, k=5) -> bool:\n    \"\"\"\n    Check if a given number can be expressed as the sum of k consecutive positive integers.\n\n    Sample input:\n    30\n\n    Sample output:\n    True\n\n    Explanation: 30 can be expressed as 6 + 7 + 8 + 9.\n    \"\"\"\n    return any(n % i == 0 and n // i - k // 2 >= 0 for i in range(1, int(n ** 0.5) + 1))\ndef g(k=5):\n    return sum(range(k))\nassert f(g()) == True\n",
        "idx_generation": 93,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains exactly four consecutive numbers in decreasing order.\n    \"\"\"\n    for i in range(len(nums) - 3):\n        if nums[i] == nums[i+1] + 1 == nums[i+2] + 2 == nums[i+3] + 3:\n            return True\n    return False\n\ndef g():\n    return [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n\nassert f(g()) == True\n",
        "idx_generation": 477,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given array is a palindrome.\n\n    Sample Input:\n    arr = [1, 2, 3, 2, 1]\n\n    Sample Output:\n    True\n    \"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g()) == True\n",
        "idx_generation": 467,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a pair of numbers whose sum is equal to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        if target - num in nums_set:\n            return True\n    return False\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 399,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix, flip it horizontally.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    The matrix after flipping horizontally is:\n    [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\n    Therefore, f(matrix) returns [[3, 2, 1], [6, 5, 4], [9, 8, 7]].\n    \"\"\"\n    n = len(matrix)\n    flipped_matrix = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        for j in range(n):\n            flipped_matrix[i][j] = matrix[i][n - j - 1]\n\n    return flipped_matrix\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\n\n",
        "idx_generation": 497,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the maximum sum of any contiguous subarray within the given list.\n\n    A subarray is a contiguous part of an array.\n    \n    Sample input:\n    nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n    \n    Sample output:\n    6\n    \n    Explanation: The contiguous subarray [4, -1, 2, 1] has the maximum sum of 6.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n\ndef g() -> List[int]:\n    return [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\nassert f(g()) == 6\n\n",
        "idx_generation": 456,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\n\ndef f(string: str, substring1: str, substring2: str) -> bool:\n    \"\"\"Check if both substrings are present in the string in the same order as they appear and are adjacent to each other.\"\"\"\n    i = 0\n    for char in string:\n        if char == substring1[i]:\n            i += 1\n        if i == len(substring1):\n            j = 0\n            for char2 in string[i:]:\n                if char2 == substring2[j]:\n                    j += 1\n                if j == len(substring2):\n                    return True\n    return False\n\ndef g(string=\"abcdefghij\", substring1=\"def\", substring2=\"ghi\"):\n    return (string, substring1, substring2)\n\nassert f(*g()) == True\n",
        "idx_generation": 54,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import *\ndef f(n: int, k=4) -> bool:\n    \"\"\"\n    Check if a given number can be expressed as the product of k consecutive positive integers.\n\n    Sample input:\n    n = 120\n\n    Sample output:\n    True\n\n    Explanation: 120 can be expressed as 4 * 5 * 6.\n    \"\"\"\n    return any(n % i == 0 and n // i - k // 2 >= 0 for i in range(1, int(n ** 0.5) + 1))\ndef g(k=4):\n    prod = 1\n    for i in range(1, k + 1):\n        prod *= i\n    return prod\nassert f(g()) == True\n",
        "idx_generation": 95,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains any duplicate elements.\n    \"\"\"\n    return len(set(nums)) < len(nums)\n\ndef g(nums: List[int] = [1, 1, 1, 2, 2, 3, 4]):\n    \"\"\"\n    This solution returns the input list as is\n    \"\"\"\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 478,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, check if there exists a pair of numbers in the list whose sum is equal to the target.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Output:\n    True\n\n    Explanation: The numbers [4, 5] in the list can be combined to add up to the target number 9.\n    \"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (nums, target)\n\nassert f(*g()) == True\n",
        "idx_generation": 468,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix of integers, return the maximum value in the matrix.\n\n    Sample Input:\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    9\n    \"\"\"\n    max_value = float('-inf')\n    for row in arr:\n        for num in row:\n            if num > max_value:\n                max_value = num\n    return max_value\n\ndef g(arr: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return arr\n\nassert f(g()) == 9\n\n",
        "idx_generation": 402,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix, multiply each element by 2.\n\n    Example:\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    The matrix after multiplying each element by 2 is:\n    [[2, 4, 6], [8, 10, 12], [14, 16, 18]]\n    Therefore, f(matrix) returns [[2, 4, 6], [8, 10, 12], [14, 16, 18]].\n    \"\"\"\n    n = len(matrix)\n    multiplied_matrix = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        for j in range(n):\n            multiplied_matrix[i][j] = matrix[i][j] * 2\n\n    return multiplied_matrix\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [[2, 4, 6], [8, 10, 12], [14, 16, 18]]\n\n",
        "idx_generation": 497,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50, k=2) -> bool:\n    \"\"\"Check if there are k distinct numbers in the list that sum up to the target value\"\"\"\n    def k_sum(nums, target, k):\n        if k == 0 and target == 0:\n            return True\n        if k <= 0 or target <= 0 or not nums:\n            return False\n        return k_sum(nums[1:], target - nums[0], k - 1) or k_sum(nums[1:], target, k)\n    return k_sum(nums, target, k)\n\ndef g(target=50, k=2):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g()) == True\n",
        "idx_generation": 463,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, substr: str) -> bool:\n    \"\"\"Check if a given substring is present in the given string.\"\"\"\n    return substr in s\ndef g(s: str = 'Hello, world!', substr: str = 'world'):\n    return (s, substr)\nassert f(*g()) == True\n",
        "idx_generation": 56,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=20, c=30) -> bool:\n    \"\"\"Find n such that n - a == b * (the sum of the first c integers)\"\"\"\n    return n - a == sum([b * i for i in range(c)])\ndef g(a=10, b=20, c=30):\n    return a + sum([b * i for i in range(c)])\nassert f(g()) == True\n",
        "idx_generation": 101,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is sorted in non-decreasing order.\n    \"\"\"\n    return nums == sorted(nums)\n\ndef g():\n    return [4, 3, 2, 1]\n\nassert f(g()) == False\n\n",
        "idx_generation": 479,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\n\ndef f(lst: List[int], n: int) -> int:\n    \"\"\"\n    Given a list of integers and a target number n, find the index of the first occurrence of n in the list.\n    If n is not present in the list, return -1.\n    \"\"\"\n    for i in range(len(lst)):\n        if lst[i] == n:\n            return i\n    return -1\n\ndef g(lst: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: int = 5):\n    return lst, n\n\nassert f(*g()) == 4\n\n",
        "idx_generation": 471,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is symmetric.\n\n    Example:\n    matrix = [\n        [1, 2, 3],\n        [2, 4, 5],\n        [3, 5, 6]\n    ]\n    output: True\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(i+1, len(matrix)):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [\n        [1, 2, 3],\n        [2, 4, 5],\n        [3, 5, 6]\n    ]\n\nassert f(g()) == True\n",
        "idx_generation": 403,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a given number is a prime number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 13\n\nassert f(g()) == True\n",
        "idx_generation": 499,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Maximum Subarray Sum\n\n    Given an integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\n\n    Example:\n    nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\n    Output: 6\n\n    Explanation: The subarray [4, -1, 2, 1] has the largest sum of 6.\n    \"\"\"\n    curr_sum = max_sum = nums[0]\n    for num in nums[1:]:\n        curr_sum = max(num, curr_sum + num)\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n\ndef g(nums: List[int] = [-2, 1, -3, 4, -1, 2, 1, -5, 4]):\n    return (nums,)\n\nassert f(*g()) == 6\n",
        "idx_generation": 466,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, char: str) -> bool:\n    \"\"\"Check if the given character is the first character of each word in the string\"\"\"\n    words = s.split()\n    return all(word[0] == char for word in words)\ndef g(s: str = \"Python Programming Puzzles\", char: str = \"P\"):\n    return (s, char)\nassert f(*g()) == True\n",
        "idx_generation": 58,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import numpy as np\nfrom typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n    n = len(matrix)\n    target_sum = n * (n**2 + 1) // 2\n\n    # Check rows\n    row_sums = [sum(row) for row in matrix]\n    if not all(sum == target_sum for sum in row_sums):\n        return False\n\n    # Check columns\n    col_sums = [sum(col) for col in zip(*matrix)]\n    if not all(sum == target_sum for sum in col_sums):\n        return False\n\n    # Check diagonals\n    diag_sum1 = sum(matrix[i][i] for i in range(n))\n    diag_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    if diag_sum1 != target_sum or diag_sum2 != target_sum:\n        return False\n\n    return True\n\ndef g(n=3):\n    \"\"\"Generate a magic square of size n x n.\"\"\"\n    magic_square = np.zeros((n, n), dtype=int)\n    num = 1\n    i, j = 0, n // 2\n\n    while num <= n**2:\n        magic_square[i, j] = num\n        num += 1\n        new_i = (i + 2) % n\n        new_j = (j + 1) % n\n        if magic_square[new_i, new_j]:\n            i += 1\n        else:\n            i = new_i\n            j = new_j\n\n    return magic_square.tolist()\n\nassert f(g()) == True\n",
        "idx_generation": 102,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> int:\n    \"\"\"\n    Find the index of the first occurrence of the target value in the given list.\n    Return -1 if the target value is not found.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 5):\n    return arr, target\n\nassert f(*g()) == 4\n\n",
        "idx_generation": 480,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g()) == True\n\n",
        "idx_generation": 472,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains duplicate elements.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 2]\n\n    Sample Output:\n    True\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    \"\"\"\n    Generate a list of integers with duplicate elements.\n    \"\"\"\n    return [1, 2, 3, 4, 2]\n\nassert f(g()) == True\n",
        "idx_generation": 405,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number k, determine if there exists a subarray (contiguous elements) whose product is equal to k.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    k = 24\n\n    Sample Output:\n    True\n\n    Explanation:\n    The subarray [3, 4] has a product of 12, which is equal to k.\n    \"\"\"\n    n = len(nums)\n    prefix_product = 1\n    prefix_products = {1}\n    for i in range(n):\n        prefix_product *= nums[i]\n        if prefix_product == k or k % prefix_product == 0 and k // prefix_product in prefix_products:\n            return True\n        prefix_products.add(prefix_product)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], k: int = 24):\n    return (nums, k)\n\nassert f(*g()) == True\n",
        "idx_generation": 499,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], target: int, n = 3) -> bool:\n    \"\"\"Check if there exists a subsequence of the given list that sums up to the target value, with at most n numbers.\"\"\"\n    def find_subsequence(start, curr_sum, count):\n        if curr_sum == target:\n            return True\n        if curr_sum > target or start == len(x) or count > n:\n            return False\n        if find_subsequence(start + 1, curr_sum + x[start], count + 1):\n            return True\n        if find_subsequence(start + 1, curr_sum, count):\n            return True\n        return False\n\n    return find_subsequence(0, 0, 0)\n\ndef g(x: List[int] = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target: int = 150):\n    return (x, target)\n\nassert f(*g())\n\n",
        "idx_generation": 472,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return string == string[::-1]\ndef g(string: str):\n    return string\nassert f(g(\"madam\")) == True\n",
        "idx_generation": 58,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given n x n matrix is a magic square\n    \"\"\"\n    n = len(arr)\n    target_sum = n * (n**2 + 1) // 2\n\n    # Check rows\n    for i in range(n):\n        if sum(arr[i]) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        col_sum = sum(arr[i][j] for i in range(n))\n        if col_sum != target_sum:\n            return False\n\n    # Check diagonals\n    main_diag_sum = sum(arr[i][i] for i in range(n))\n    anti_diag_sum = sum(arr[i][n-i-1] for i in range(n))\n    if main_diag_sum != target_sum or anti_diag_sum != target_sum:\n        return False\n\n    return True\n\ndef g(n=3):\n    \"\"\"\n    Generate a magic square of the given size\n    \"\"\"\n    magic_square = [[0 for _ in range(n)] for _ in range(n)]\n    i, j = 0, n // 2\n    for num in range(1, n**2 + 1):\n        magic_square[i][j] = num\n        i -= 1\n        j += 1\n        if num % n == 0:\n            i += 2\n            j -= 1\n        elif i < 0:\n            i = n - 1\n        elif j == n:\n            j = 0\n    return magic_square\n\nassert f(g()) == True\n",
        "idx_generation": 104,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Remove all occurrences of the target value from the given list.\n    Return the modified list.\n    \"\"\"\n    return [num for num in arr if num != target]\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 5):\n    return arr, target\n\nassert f(*g()) == [1, 2, 3, 4, 6, 7, 8, 9, 10]\n\n",
        "idx_generation": 480,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Given a matrix, return the sum of all the elements in the matrix.\n    \"\"\"\n    return sum(sum(row) for row in matrix)\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == 45\n\n",
        "idx_generation": 481,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, determine if there exists a pair of numbers in the list that add up to the target.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    nums = [1, 2, 3, 4, 5, 6]\n    target = 9\n    return (nums, target)\n\nassert f(*g())\n\n",
        "idx_generation": 411,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number k, determine if there exists a subarray (contiguous elements) whose sum is a multiple of k.\n\n    Sample Input:\n    nums = [4, 5, 6, 7, 8, 9]\n    k = 6\n\n    Sample Output:\n    True\n\n    Explanation:\n    The subarray [6, 7, 8] has a sum of 21, which is a multiple of k.\n    \"\"\"\n    n = len(nums)\n    prefix_sum = 0\n    prefix_sums = {0}\n    for i in range(n):\n        prefix_sum = (prefix_sum + nums[i]) % k\n        if prefix_sum in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\n\ndef g(nums: List[int] = [4, 5, 6, 7, 8, 9], k: int = 6):\n    return (nums, k)\n\nassert f(*g()) == True\n",
        "idx_generation": 499,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], target: int, n = 2) -> bool:\n    \"\"\"Check if there exists a subsequence of the given list that sums up to the target value, with exactly n numbers.\"\"\"\n    def find_subsequence(start, curr_sum, count):\n        if curr_sum == target and count == n:\n            return True\n        if curr_sum > target or start == len(x) or count > n:\n            return False\n        if find_subsequence(start + 1, curr_sum + x[start], count + 1):\n            return True\n        if find_subsequence(start + 1, curr_sum, count):\n            return True\n        return False\n\n    return find_subsequence(0, 0, 0)\n\ndef g(x: List[int] = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target: int = 90):\n    return (x, target)\n\nassert f(*g())\n",
        "idx_generation": 480,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if a given string is a palindrome.\n\n    Sample Input:\n    \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == s[::-1]\ndef g():\n    return \"racecar\"\nassert f(g()) == True\n",
        "idx_generation": 61,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import math\nfrom typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a number in the list that, when multiplied by the target, gives a perfect square.\n    \"\"\"\n    for num in numbers:\n        if math.isqrt(num * target) ** 2 == num * target:\n            return True\n    return False\n\ndef g(numbers: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 2):\n    return (numbers, target)\n\nassert f(*g()) == True\n",
        "idx_generation": 106,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose sum is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 6):\n    return nums, target\n\nassert f(*g()) == True\n",
        "idx_generation": 485,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a diagonal matrix.\n    A diagonal matrix is a grid where all off-diagonal elements are zero.\n\n    Sample Input:\n    arr = [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n    m = len(arr[0])\n\n    # Check off-diagonal elements\n    for i in range(n):\n        for j in range(m):\n            if i != j and arr[i][j] != 0:\n                return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[1, 0, 0], [0, 2, 0], [0, 0, 3]]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 482,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"Check if the given list of lists contains a diagonal matrix.\"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n    return all(len(row) == cols for row in arr) and all(arr[i][j] == 0 for i in range(rows) for j in range(cols) if i != j)\n\ndef g():\n    return [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\nassert f(g()) == True\n",
        "idx_generation": 414,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to the target value.\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g()) == True\n",
        "idx_generation": 444,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], target: int, n = 3) -> bool:\n    \"\"\"Check if there exists a subsequence of the given list that sums up to the target value, with at most n numbers, and the subsequence is in non-decreasing order.\"\"\"\n    def find_subsequence(start, curr_sum, count, last_num):\n        if curr_sum == target:\n            return True\n        if curr_sum > target or start == len(x) or count > n:\n            return False\n        if x[start] >= last_num and find_subsequence(start + 1, curr_sum + x[start], count + 1, x[start]):\n            return True\n        if find_subsequence(start + 1, curr_sum, count, last_num):\n            return True\n        return False\n\n    return find_subsequence(0, 0, 0, float('-inf'))\n\ndef g(x: List[int] = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target: int = 150):\n    return (x, target)\n\nassert f(*g())\n",
        "idx_generation": 480,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Given a string, determine if it is a palindrome.\n\n    Sample Input:\n    string = \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return string == string[::-1]\n\ndef g(string: str):\n    return string\n\nassert f(g(\"racecar\"))\n",
        "idx_generation": 63,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nimport math\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a number in the list that, when divided by the target, gives a perfect square.\n    \"\"\"\n    for num in numbers:\n        if target % num == 0 and math.isqrt(target // num) ** 2 == target // num:\n            return True\n    return False\n\ndef g(numbers: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 2):\n    return (numbers, target)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 109,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the sum of all the odd numbers in the list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    The sum of all the odd numbers in the list is 25.\n    Therefore, f(nums) returns 25.\n    \"\"\"\n    total_sum = 0\n    for num in nums:\n        if num % 2 != 0:\n            total_sum += num\n    return total_sum\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g()) == 25\n",
        "idx_generation": 485,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a lower triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a lower triangular matrix of the given size\n    \"\"\"\n    return [[0 if j > i else 1 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n\n",
        "idx_generation": 483,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"Check if the given list of lists contains a diagonal matrix.\"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n    return all(len(row) == cols for row in arr) and all(arr[i][j] == 0 for i in range(rows) for j in range(cols) if i != j)\n\ndef g():\n    return [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\nassert f(g()) == True\n\n",
        "idx_generation": 416,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> int:\n    \"\"\"\n    Find the maximum product of any row in the given 2D array.\n\n    Sample input:\n    arr = [[1, 2, 3],\n           [4, 5, 6],\n           [7, 8, 9]]\n\n    Sample output:\n    504\n\n    Explanation: The rows with maximum products are:\n    1 2 3 (product = 6)\n    4 5 6 (product = 120)\n    7 8 9 (product = 504)\n    Their maximum product is 504.\n\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(arr)):\n        row_product = 1\n        for j in range(len(arr[i])):\n            row_product *= arr[i][j]\n        max_product = max(max_product, row_product)\n    return max_product\n\ndef g() -> List[List[int]]:\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]\n\nassert f(g()) == 504\n\n",
        "idx_generation": 445,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum: int = 30) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that sums up to the target_sum.\n    \"\"\"\n    def find_combination(start, curr_sum):\n        if curr_sum == target_sum:\n            return True\n        if curr_sum > target_sum or start == len(nums):\n            return False\n        for i in range(start, len(nums)):\n            if find_combination(i + 1, curr_sum + nums[i]):\n                return True\n        return False\n\n    return find_combination(0, 0)\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is\n    \"\"\"\n    return nums\n\nassert f(g([5, 10, 15, 20, 25, 30, 35])) == True\n",
        "idx_generation": 489,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Determine if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g()) == True\n",
        "idx_generation": 63,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\n\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"\n    Given an integer n and a list of integers lst, check if n is a prime number and appears in the list.\n\n    Sample input:\n    n = 7\n    lst = [2, 3, 5, 7, 11]\n\n    Sample output:\n    True\n\n    Explanation: 7 is a prime number and it appears in the list.\n    \"\"\"\n    assert n >= 0, 'Hint: n should be a non-negative integer.'\n    assert all(x >= 0 for x in lst), 'Hint: All elements in the list should be non-negative integers.'\n    return n in lst and all(n % i != 0 for i in range(2, int(n ** 0.5) + 1))\n\ndef g(n=7, lst=[2, 3, 5, 7, 11]):\n    return n, lst\n\nassert f(*g()) == True\n\n\n",
        "idx_generation": 111,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the second largest number in the list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    The second largest number in the list is 9.\n    Therefore, f(nums) returns 9.\n    \"\"\"\n    largest = float('-inf')\n    second_largest = float('-inf')\n    for num in nums:\n        if num > largest:\n            second_largest = largest\n            largest = num\n        elif num > second_largest and num < largest:\n            second_largest = num\n    return second_largest\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g()) == 9\n",
        "idx_generation": 485,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the list is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g(nums=[1, 2, 3, 2, 1]):\n    return nums\n\nassert f(g()) == True\n\n",
        "idx_generation": 484,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Given a matrix (2D list of integers), transpose the matrix.\n    The transpose of a matrix is obtained by turning its rows into columns and vice versa.\n    \"\"\"\n    return [list(row) for row in zip(*matrix)]\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n",
        "idx_generation": 417,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if all the elements in the matrix are equal.\"\"\"\n    element = matrix[0][0]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] != element:\n                return False\n    return True\n\ndef g() -> List[List[int]]:\n    return [[1, 1, 1],\n            [1, 1, 1],\n            [1, 1, 1]]\n\nassert f(g()) == True\n\n",
        "idx_generation": 445,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subsequence with a sum equal to k.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    k = 9\n    output: True\n    \"\"\"\n    if k == 0:\n        return True\n    if not nums:\n        return False\n    return f(nums[1:], k) or f(nums[1:], k - nums[0])\n\ndef g():\n    return [1, 2, 3, 4, 5], 9\n\nassert f(*g()) == True\n\n",
        "idx_generation": 492,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry', 'durian']) -> bool:\n    \"\"\"\n    Find a string that contains each string in substrings in the given order, e.g., 'applebanana' for 'apple' and 'banana'\n    \"\"\"\n    return all((sub in s for sub in substrings))\ndef g(substrings = ['apple', 'banana', 'cherry', 'durian']):\n    return \"\".join(substrings)\nassert f(g()) == True\n",
        "idx_generation": 65,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import random\nfrom typing import*\nimport math\n\ndef f(num: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"\n    Check if the given number is a perfect power of any prime number.\n    \n    Example:\n    num = 625 and primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    The number 625 is a perfect power of 5 (5^4 = 625).\n    \n    Return True if the number is a perfect power of any prime number, otherwise False.\n    \"\"\"\n    return any(math.isclose(prime**(1/num), num**(1/num), rel_tol=1e-9) for prime in primes)\n    \ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return random.choice(primes)\n    \nassert f(g()) == True\n",
        "idx_generation": 114,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with all the duplicate elements removed.\n\n    Example:\n    nums = [1, 2, 3, 2, 4, 5, 6, 4]\n\n    The list with duplicate elements removed is [1, 2, 3, 4, 5, 6].\n    Therefore, f(nums) returns [1, 2, 3, 4, 5, 6].\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n\ndef g(nums: List[int] = [1, 2, 3, 2, 4, 5, 6, 4]):\n    return nums\n\nassert f(g()) == [1, 2, 3, 4, 5, 6]\n",
        "idx_generation": 485,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target number, find the index of the first occurrence of the target number in the list.\n    If the target number is not found, return -1.\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return i\n    return -1\n\ndef g():\n    nums = [1, 3, 5, 7, 9]\n    target = 5\n    return (nums, target)\n\nassert f(*g()) == 2\n\n",
        "idx_generation": 493,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if the given target exists in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=5):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g(), target=5) == True\n",
        "idx_generation": 418,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a staircase pattern.\n    A staircase pattern is a grid where the elements form a pattern that resembles a staircase.\n\n    Sample Input:\n    arr = [[1, 0, 0], [1, 1, 0], [1, 1, 1]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i][j] != 0:\n                return False\n\n    return True\n\ndef g(arr: List[List[int]] = [[1, 0, 0], [1, 1, 0], [1, 1, 1]]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 445,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subsequence with a sum divisible by k.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    k = 3\n    output: True\n    \"\"\"\n    def helper(i, cur_sum):\n        if i == len(nums):\n            return cur_sum % k == 0\n        return helper(i + 1, cur_sum + nums[i]) or helper(i + 1, cur_sum)\n\n    return helper(0, 0)\n\ndef g():\n    return [1, 2, 3, 4, 5], 3\n\nassert f(*g()) == True\n\n",
        "idx_generation": 492,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n    \"\"\"\n    return string == string[::-1]\n\ndef g():\n    string = \"racecar\"\n    return string\n\nassert f(g()) == True\n",
        "idx_generation": 65,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k: int = 3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the given array, such that the product of its elements is greater than or equal to k.\"\"\"\n    for i in range(len(arr) - k + 1):\n        subarr = arr[i:i+k]\n        product = 1\n        for num in subarr:\n            product *= num\n        if product >= k:\n            return True\n    return False\n\ndef g(k: int = 3):\n    return [2] * k\n\nassert f(g()) == True\n",
        "idx_generation": 117,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of numbers is sorted in non-decreasing order.\n    Return True if the list is sorted, False otherwise.\n    \"\"\"\n    return numbers == sorted(numbers)\n\ndef g(numbers: List[int] = [4, 2, 6, 1, 9]):\n    return (numbers,)\n\nassert f(*g()) == False\n\n",
        "idx_generation": 488,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of integers is a palindrome.\n    \"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    \"\"\"\n    Generate a list of integers that forms a palindrome.\n    \"\"\"\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]\n\nassert f(g()) == True\n\n",
        "idx_generation": 499,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an upper triangular matrix.\n    \"\"\"\n    n = len(matrix)\n    \n    for i in range(1, n):\n        for j in range(i):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [0, 4, 5], [0, 0, 6]]):\n    return matrix\n\nassert f(g()) == True\n\n",
        "idx_generation": 430,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=4) -> bool:\n    \"\"\"Find the sum of all numbers between 1 and n (inclusive) that are divisible by 3 or 5.\"\"\"\n    return sum(num for num in range(1, n+1) if num % 3 == 0 or num % 5 == 0) == int(s)\ndef g(n = 4):\n    return str(sum(num for num in range(1, n+1) if num % 3 == 0 or num % 5 == 0))\nassert f(g())\n",
        "idx_generation": 446,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int) -> bool:\n    \"\"\"\n    Given a list of integers, check if there exists a subsequence with a sum greater than or equal to k.\n\n    Example:\n    nums = [1, 2, 3, 4, 5]\n    k = 10\n    output: True\n    \"\"\"\n    def helper(i, cur_sum):\n        if i == len(nums):\n            return cur_sum >= k\n        return helper(i + 1, cur_sum + nums[i]) or helper(i + 1, cur_sum)\n\n    return helper(0, 0)\n\ndef g():\n    return [1, 2, 3, 4, 5], 10\n\nassert f(*g()) == True\n\n",
        "idx_generation": 492,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return string == string[::-1]\n\ndef g():\n    return (\"racecar\",)\n\nassert f(g()) == True\n",
        "idx_generation": 66,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nimport math\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a number in the list that, when multiplied with the target, gives a perfect square.\n    \"\"\"\n    for num in numbers:\n        if math.isqrt(num * target) ** 2 == num * target:\n            return True\n    return False\n\ndef g(numbers: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 2):\n    return (numbers, target)\n\nassert f(*g()) == True\n",
        "idx_generation": 124,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the number of distinct elements in the list.\n    \"\"\"\n    return len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 10\n\n\n",
        "idx_generation": 490,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"\n    Check if s1 is an anagram of s2.\n    \"\"\"\n    return sorted(s1) == sorted(s2)\n\ndef g():\n    \"\"\"\n    Generate two strings that are anagrams of each other.\n    \"\"\"\n    return \"listen\", \"silent\"\n\nassert f(*g()) == True\n\n",
        "idx_generation": 499,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Find the sum of all the elements in a given matrix.\n\n    Sample Input:\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n\n    Sample Output:\n    45\n    \"\"\"\n    total_sum = 0\n    for row in matrix:\n        total_sum += sum(row)\n    return total_sum\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g()) == 45\n",
        "idx_generation": 447,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum product of any two numbers in the list.\n\n    Sample input:\n    nums = [1, 2, 3, 4, 5]\n\n    Sample output:\n    20\n\n    Explanation: The maximum product is obtained by multiplying 4 and 5, which gives 20.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(nums)-1):\n        for j in range(i+1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == 20\n\n",
        "idx_generation": 446,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int, target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target sum, find if there are k non-negative integers in the list that sum up to the target.\n    \"\"\"\n    if k == 0 and target == 0:\n        return True\n    elif k == 0 or target <= 0 or len(nums) == 0:\n        return False\n    else:\n        return f(nums[1:], k-1, target-nums[0]) or f(nums[1:], k, target)\n\ndef g(nums=[2, 4, 6, 8, 10], k=3, target=18):\n    return nums\n\nassert f(g(), k=3, target=18)\n",
        "idx_generation": 493,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"madam\"\n\nassert f(g()) == True\n",
        "idx_generation": 66,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(grid: List[List[int]]) -> bool:\n    \"\"\"\n    Given a 2D grid of integers, check if the grid is a magic square.\n    A magic square is a square grid where the sums of the rows, columns, and diagonals are all equal.\n\n    Sample Input:\n    grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    Sample Output:\n    False\n    \"\"\"\n    n = len(grid)\n    target_sum = sum(grid[0])\n\n    # Check rows\n    for row in grid:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        if sum(grid[i][j] for i in range(n)) != target_sum:\n            return False\n\n    # Check diagonals\n    if sum(grid[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(grid[i][n - i - 1] for i in range(n)) != target_sum:\n        return False\n\n    return True\n\ndef g(grid: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return grid\n\nassert f(g()) == False\n\n",
        "idx_generation": 125,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with all duplicates removed.\n\n    Sample Input:\n    nums = [1, 1, 2, 2, 3, 4, 5, 5]\n\n    Sample Output:\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    return list(set(nums))\n\ndef g():\n    return [1, 1, 2, 2, 3, 4, 5, 5]\n\nassert f(g()) == [1, 2, 3, 4, 5]\n\n",
        "idx_generation": 491,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum subarray sum.\n    A subarray is a contiguous part of the array.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum = max(num, curr_sum + num)\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n\ndef g(nums: List[int] = [-2, 1, -3, 4, -1, 2, 1, -5, 4]):\n    return nums\n\nassert f(g()) == 6\n",
        "idx_generation": 452,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k: int) -> bool:\n    \"\"\"Given a list of integers and a value k, determine if there exists a subarray of the list with a product greater than or equal to k.\"\"\"\n    for i in range(len(arr)):\n        curr_product = 1\n        for j in range(i, len(arr)):\n            curr_product *= arr[j]\n            if curr_product >= k:\n                return True\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], k: int = 20):\n    return arr, k\n\nassert f(*g()) == True\n\n",
        "idx_generation": 446,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k: int, target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target sum, find if there are k non-negative integers in the list that sum up to the target.\n    \"\"\"\n    if k == 0 and target == 0:\n        return True\n    elif k == 0 or target <= 0 or len(nums) == 0:\n        return False\n    else:\n        return f(nums[1:], k-1, target-nums[0]) or f(nums[1:], k, target)\n\ndef g(nums=[2, 4, 6, 8, 10], k=3, target=18):\n    return nums\n\nassert f(g(), k=3, target=18)\n",
        "idx_generation": 493,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n\n    Sample Input:\n    s = \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == s[::-1]\n\ndef g(s=\"racecar\"):\n    return s\n\nassert f(g()) == True\n",
        "idx_generation": 67,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is symmetric\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i + 1, cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate a symmetric matrix of the given size\n    \"\"\"\n    return [[1 if j == i else 0 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n",
        "idx_generation": 125,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Determine if there exists a pair of numbers in the given list whose difference is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if num - target in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 2):\n    return nums, target\n\nassert f(*g()) == True\n",
        "idx_generation": 491,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list contains a subarray of length 3 in increasing order.\n    \"\"\"\n    for i in range(len(arr) - 2):\n        if arr[i] < arr[i+1] < arr[i+2]:\n            return True\n    return False\n\ndef g():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 454,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that add up to the target number.\n    The pair of numbers can be the same or different.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g()) == True\n",
        "idx_generation": 447,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum: int = 10) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that sums up to the target_sum.\n    \"\"\"\n    def find_combination(start, curr_sum):\n        if curr_sum == target_sum:\n            return True\n        if curr_sum > target_sum or start == len(nums):\n            return False\n        for i in range(start, len(nums)):\n            if find_combination(i + 1, curr_sum + nums[i]):\n                return True\n        return False\n\n    return find_combination(0, 0)\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is\n    \"\"\"\n    return nums\n\nassert f(g([1, 2, 3, 4, 5, 6]), 10) == True\n\n",
        "idx_generation": 493,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Given a string, determine if it is a palindrome.\n\n    Sample Input:\n    \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g()) == True\n",
        "idx_generation": 68,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2) -> bool:\n    \"\"\"\n    Given a list of non-increasing integers and given an integer k, determine if there are exactly n positive integers in the list\n    that are strictly larger than the kth.\n    \"\"\"\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return sum(s > scores[k] and s > 0 for s in scores) == n\ndef g(scores = [20, 19, 17, 13, 12, 11, 10, 6], k = 2):\n    threshold = max(scores[k], 1)\n    return sum(s > threshold for s in scores)\nassert f(g()) == True\n",
        "idx_generation": 128,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, check if there exists a pair of numbers in the list whose sum is equal to the target number.\n    Return True if such a pair exists, False otherwise.\n    \"\"\"\n    num_set = set()\n    for num in arr:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return (arr, target)\n\nassert f(*g()) == True\n",
        "idx_generation": 494,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the maximum sum of any contiguous subarray.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    for num in arr:\n        curr_sum = max(num, curr_sum + num)\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n\ndef g():\n    arr = [-2, -3, 4, -1, -2, 1, 5, -3]\n    return arr\n\nassert f(g()) == 7\n",
        "idx_generation": 454,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exist four numbers in the list whose sum is equal to the target number.\n\n    Sample Input:\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    target = 20\n\n    Sample Output:\n    True\n    \"\"\"\n    num_set = set()\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                complement = target - numbers[i] - numbers[j] - numbers[k]\n                if complement in num_set:\n                    return True\n                num_set.add(numbers[i])\n                num_set.add(numbers[j])\n                num_set.add(numbers[k])\n    return False\n\ndef g(numbers: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 20):\n    return (numbers, target)\n\nassert f(*g()) == True\n",
        "idx_generation": 447,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum: int = 10) -> bool:\n    \"\"\"\n    Check if there exists a combination of numbers in the list that sums up to the target_sum.\n    \"\"\"\n    def find_combination(start, curr_sum):\n        if curr_sum == target_sum:\n            return True\n        if curr_sum > target_sum or start == len(nums):\n            return False\n        for i in range(start, len(nums)):\n            if find_combination(i + 1, curr_sum + nums[i]):\n                return True\n        return False\n\n    return find_combination(0, 0)\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is\n    \"\"\"\n    return nums\n\nassert f(g([2, 3, 5, 7]), 15) == True\n\n",
        "idx_generation": 493,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, substrings=['abc', 'def', 'ghi', 'jkl', 'mno']) -> bool:\n    \"\"\"Check if the given string contains any of the specified substrings.\"\"\"\n    return any(substring in s for substring in substrings)\n\ndef g(substrings = ['abc', 'def', 'ghi', 'jkl', 'mno']):\n    return substrings\n\nassert f(g()) == True\n",
        "idx_generation": 69,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nimport math\nfrom typing import List\n\ndef f(l: List[int]) -> bool:\n    \"\"\"\n    Determine if a given list of integers contains a pair of numbers whose product is a perfect square.\n    \"\"\"\n    return any((math.isqrt(x) ** 2 == x for x in [a * b for a in l for b in l if a != b]))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n",
        "idx_generation": 131,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target number, find the index of the first occurrence of the target number in the list.\n    If the target number is not in the list, return -1.\n    \"\"\"\n    for i, num in enumerate(arr):\n        if num == target:\n            return i\n    return -1\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 3):\n    return (arr, target)\n\nassert f(*g()) == 2\n",
        "idx_generation": 494,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list contains any duplicate elements.\n\n    Example:\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    The list does not contain any duplicate elements.\n    Therefore, f(arr) returns False.\n    \"\"\"\n    seen = set()\n\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr\n\nassert f(g()) == False\n\n",
        "idx_generation": 475,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subsequence of length k in the list that is strictly increasing\"\"\"\n    for i in range(len(nums)-k+1):\n        subsequence = nums[i:i+k]\n        if all(subsequence[j] < subsequence[j+1] for j in range(k-1)):\n            return True\n    return False\n\ndef g(k=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n\n",
        "idx_generation": 447,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, a='hello', b='world') -> bool:\n    \"\"\"\n    Check if the given string s contains both substring a and b.\n\n    Sample input:\n    \"hello world\"\n\n    Sample output:\n    True\n\n    The string \"hello world\" contains both \"hello\" and \"world\" substrings.\n    \"\"\"\n    return a in s and b in s\ndef g(a='hello', b='world'):\n    return a + ' ' + b\nassert f(g()) == True\n",
        "idx_generation": 70,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a number in the list that, when subtracted from the target, gives a prime number.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    for num in numbers:\n        if is_prime(target - num):\n            return True\n    return False\n\ndef g(numbers: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 2):\n    return (numbers, target)\n\nassert f(*g()) == False\n",
        "idx_generation": 135,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the given list whose product is equal to the target number.\n    \"\"\"\n    num_set = set()\n    for num in nums:\n        if target % num == 0 and target // num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 10):\n    return (nums, target)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 494,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int = 10) -> bool:\n    \"\"\"\n    Given a matrix of integers, find if there exists a row or column whose sum is equal to the target.\n    If such a row or column exists, return True. Otherwise, return False.\n    \"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    \n    for i in range(n):\n        row_sum = sum(matrix[i])\n        if row_sum == target:\n            return True\n\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum == target:\n            return True\n\n    return False\n\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g()) == False\n",
        "idx_generation": 478,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there exists a pair of elements in the given list that add up to the target value.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6], target: int = 9):\n    return (nums, target)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 448,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(string: str, substr: str) -> bool:\n    \"\"\"Check if all occurrences of a substring in the given string are consecutive.\"\"\"\n    indices = [i for i in range(len(string)) if string.startswith(substr, i)]\n    return all((indices[i]+len(substr) == indices[i+1] for i in range(len(indices)-1)))\ndef g(string='Hello, World!', substr='o'):\n    return string, substr\nassert f(g()[0], g()[1]) == False\n\n",
        "idx_generation": 72,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(x: int, a=93252338) -> bool:\n    \"\"\"Solve a multiplication problem\"\"\"\n    return x * a == a**2\ndef g(a=93252338):\n    return a\nassert f(g()) == True\n",
        "idx_generation": 139,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(strings: List[str]) -> bool:\n    \"\"\"\n    Check if all strings in the list are anagrams of each other.\n\n    Sample Input:\n    strings = ['race', 'acre', 'care']\n\n    Sample Output:\n    True\n    \"\"\"\n    sorted_strings = [\"\".join(sorted(s)) for s in strings]\n    return len(set(sorted_strings)) == 1\n\ndef g(strings: List[str] = ['race', 'acre', 'care']):\n    return strings\n\nassert f(g()) == True\n\n",
        "idx_generation": 496,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of numbers and a target, find if there are three numbers whose sum is equal to the target, but the numbers cannot be repeated.\n\n    Sample Input:\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    target = 15\n\n    Sample Output:\n    True\n    \"\"\"\n    from itertools import combinations\n\n    for combo in combinations(numbers, 3):\n        if sum(combo) == target:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 15\n\nassert f(*g()) == True\n",
        "idx_generation": 448,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[str], target: str) -> bool:\n    \"\"\"Check if the target string exists in the list and is a substring of any element in the list.\"\"\"\n    return any(target in string for string in lst)\n\ndef g():\n    return ['apple', 'banana', 'cherry', 'date', 'elderberry']\n\nassert f(g(), 'an') == True\n",
        "idx_generation": 74,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if it is a Magic Square.\n\n    Sample Input:\n    [[2, 7, 6],\n     [9, 5, 1],\n     [4, 3, 8]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    magic_sum = sum(matrix[0])\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    if rows != cols:\n        return False\n    diagonal_1 = sum(matrix[i][i] for i in range(n))\n    diagonal_2 = sum(matrix[i][n-i-1] for i in range(n))\n    if diagonal_1 != diagonal_2 or diagonal_1 != magic_sum:\n        return False\n    return True\n\ndef g() -> List[List[int]]:\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g()) == True\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the second largest element in the list.\n\n    Example:\n    nums = [5, 2, 9, 6, 1]\n\n    The second largest element in the list is 6.\n    Therefore, f(nums) returns 6.\n    \"\"\"\n    max_num = float('-inf')\n    second_max_num = float('-inf')\n    for num in nums:\n        if num > max_num:\n            second_max_num = max_num\n            max_num = num\n        elif num > second_max_num and num < max_num:\n            second_max_num = num\n    return second_max_num\n\ndef g(nums: List[int] = [5, 2, 9, 6, 1]):\n    return nums\n\nassert f(g()) == 6\n\n",
        "idx_generation": 496,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst1: List[int], lst2: List[int]) -> int:\n    \"\"\"\n    Given two lists of integers, find the maximum sum of any pair of elements where one element is from lst1 and the other element is from lst2.\n\n    Sample Input:\n    lst1 = [1, 2, 3]\n    lst2 = [4, 5, 6]\n\n    Sample Output:\n    9\n    \"\"\"\n    return max(x + y for x in lst1 for y in lst2)\n\ndef g():\n    return [1, 2, 3], [4, 5, 6]\n\nassert f(*g()) == 9\n\n",
        "idx_generation": 448,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[str], target: str) -> bool:\n    \"\"\"Check if the target string exists in the list and is a prefix of any element in the list.\"\"\"\n    return any(string.startswith(target) for string in lst)\n\ndef g():\n    return ['apple', 'banana', 'cherry', 'date', 'elderberry']\n\nassert f(g(), 'ban') == True\n",
        "idx_generation": 74,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is an upper triangular matrix\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(size=3):\n    \"\"\"\n    Generate an upper triangular matrix of the given size\n    \"\"\"\n    return [[0 if j < i else 1 for j in range(size)] for i in range(size)]\n\nassert f(g()) == True\n",
        "idx_generation": 150,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find if there exists a pair of numbers in the list that add up to the target.\n\n    Sample Input:\n    nums = [2, 4, 6, 8, 10]\n    target = 12\n\n    Sample Output:\n    True\n    \"\"\"\n    complements = set()\n    for num in nums:\n        complement = target - num\n        if complement in complements:\n            return True\n        complements.add(num)\n    return False\n\ndef g():\n    return [2, 4, 6, 8, 10], 12\n\nassert f(*g())\n\n",
        "idx_generation": 496,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of numbers, return the product of all the positive numbers in the list.\n    \"\"\"\n    product = 1\n    for num in nums:\n        if num > 0:\n            product *= num\n    return product\n\ndef g(nums: List[int] = [1, -2, 3, 4, -5]):\n    return nums\n\nassert f(g()) == 12\n",
        "idx_generation": 449,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g()) == True\n",
        "idx_generation": 75,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list is a prime number.\n\n    Sample Input:\n    [2, 3, 5, 7, 11]\n\n    Sample Output:\n    True\n    \"\"\"\n    if len(nums) != 1:\n        return False\n    num = nums[0]\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g() -> List[int]:\n    return [7]\n\nassert f(g()) == True\n",
        "idx_generation": 154,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Find all the indices where the target value occurs in the given list.\n    Return a list of indices.\n    \"\"\"\n    indices = []\n    for i in range(len(nums)):\n        if nums[i] == target:\n            indices.append(i)\n    return indices\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 5):\n    return nums, target\n\nassert f(*g()) == [4]\n",
        "idx_generation": 497,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of numbers, return a new list containing only the even numbers from the original list.\n    \"\"\"\n    even_nums = []\n    for num in nums:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6]):\n    return nums\n\nassert f(g()) == [2, 4, 6]\n",
        "idx_generation": 449,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, target: str) -> bool:\n    \"\"\"Check if the target string is a substring of the given string\"\"\"\n    return target in s\n\ndef g(s: str, target: str):\n    return (s, target)\n\nassert f(*g(\"Hello, World!\", \"World\")) == True\n",
        "idx_generation": 75,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "import random\nimport math\nfrom typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"\n    Determine if n is a power of m\n    \"\"\"\n    return n > 0 and (m ** int(math.log(n, m))) == n\ndef g(m = 10):\n    return m ** random.randint(1, 10)\nassert f(g()) == True\n",
        "idx_generation": 160,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers, find a pair of numbers that sum up to the target.\n    If such a pair exists, return the pair. Otherwise, return an empty list.\n    \"\"\"\n    nums_set = set(nums)\n    for i in range(len(nums)-1):\n        complement = target - nums[i]\n        if complement in nums_set and complement != nums[i]:\n            return [nums[i], complement]\n    return []\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8], target: int = 11):\n    return nums, target\n\nassert f(*g()) == [3, 8]\n",
        "idx_generation": 497,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if the given matrix is a symmetric matrix.\n    \"\"\"\n\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g()) == True\n\n\n",
        "idx_generation": 450,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return s == s[::-1]\n\ndef g(s: str):\n    return s\n\nassert f(g(\"racecar\")) == True\n",
        "idx_generation": 75,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if the list contains three consecutive even numbers.\n    \"\"\"\n    for i in range(len(nums)-2):\n        if nums[i] % 2 == 0 and nums[i+1] % 2 == 0 and nums[i+2] % 2 == 0:\n            return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return (nums,)\n\nassert f(*g()) == False\n",
        "idx_generation": 160,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers `arr` and an integer `target`, find if there exists a pair of numbers in the list that sums up to the target.\n    Return True if such a pair exists, False otherwise.\n\n    Example:\n    arr = [1, 2, 3, 4, 5]\n    target = 7\n    Output: True\n    Explanation: The pair (2, 5) sums up to 7.\n    \"\"\"\n    num_set = set()\n    for num in arr:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(arr: List[int] = [1, 2, 3, 4, 5], target: int = 7):\n    return (arr, target)\n\nassert f(*g()) == True\n",
        "idx_generation": 497,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Find the sum of all the even numbers in the given list.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6]\n    output: 12\n    \"\"\"\n    return sum(num for num in nums if num % 2 == 0)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g()) == 12\n",
        "idx_generation": 451,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, target: str=\"abc\") -> bool:\n    \"\"\"\n    Check if all the characters in the target string are present in the given string.\n\n    Example:\n    s = \"abcdefg\"\n    target = \"abc\"\n\n    Output:\n    True\n    \"\"\"\n    return all(char in s for char in target)\n\ndef g(target: str=\"abc\"):\n    return \"abcdefg\"\n\nassert f(g()) == True\n",
        "idx_generation": 85,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the sum of all the even numbers in the list.\n    \"\"\"\n    even_sum = 0\n    for num in nums:\n        if num % 2 == 0:\n            even_sum += num\n    return even_sum\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g()) == 30\n\n",
        "idx_generation": 161,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"\n    Check if there is a duplicate element in the given list of integers.\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    \"\"\"\n    Generate a list of integers with duplicate elements.\n    \"\"\"\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]\n\nassert f(g()) == True\n\n",
        "idx_generation": 499,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"\n    Check if there exists a pair of numbers in the list that sums up to the target value.\n    \"\"\"\n    nums_set = set(nums)\n\n    for num in nums:\n        complement = target - num\n        if complement in nums_set:\n            return True\n    \n    return False\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is.\n    \"\"\"\n    return nums\n\nassert f(g([1, 2, 3, 4, 5]), 7) == True\n\n",
        "idx_generation": 451,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, a=\"hello\", b=\"world\") -> bool:\n    \"\"\"Check if the given string s contains both a and b as separate substrings.\"\"\"\n    return a in s and b in s\n\ndef g(a=\"hello\", b=\"world\"):\n    return a + \" \" + b\n\nassert f(g()) == True\n",
        "idx_generation": 85,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import Union\n\ndef f(num: Union[int, float]) -> bool:\n    \"\"\"\n    Determine if the given number is a perfect square.\n\n    Sample Input:\n    num = 16\n\n    Sample Output:\n    True\n    \"\"\"\n    if num < 0:\n        return False\n    sqrt = num ** 0.5\n    return sqrt == int(sqrt)\n\ndef g(num: Union[int, float] = 16):\n    return num\n\nassert f(g()) == True\n",
        "idx_generation": 162,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, find if there exists a pair of numbers whose difference is equal to the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        if num - target in nums_set:\n            return True\n    return False\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums, 3\n\nassert f(*g()) == True\n",
        "idx_generation": 399,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are three numbers in the array that sum up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5], target=9):\n    return arr, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 451,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, substrings=['abc', 'def', 'ghi', 'jkl']) -> bool:\n    \"\"\"\n    Find a string that contains all the substrings in any order\n    \"\"\"\n    sub_count = {sub: 0 for sub in substrings}\n    for sub in substrings:\n        if sub in s:\n            sub_count[sub] += 1\n    return all(count > 0 for count in sub_count.values())\ndef g(substrings=['abc', 'def', 'ghi', 'jkl']):\n    return ''.join(substrings)\nassert f(g()) == True\n",
        "idx_generation": 85,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], k: int = 3) -> bool:\n    \"\"\"\n    Check if there exists a subarray in the given list whose sum is divisible by k.\n    \"\"\"\n    prefix_sum = 0\n    remainder_dict = {0: -1}\n    for i, num in enumerate(nums):\n        prefix_sum += num\n        remainder = prefix_sum % k\n        if remainder in remainder_dict and i - remainder_dict[remainder] > 1:\n            return True\n        if remainder not in remainder_dict:\n            remainder_dict[remainder] = i\n    return False\n\ndef g(nums: List[int]):\n    \"\"\"\n    This solution returns the input list as is\n    \"\"\"\n    return nums\n\nassert f(g([4, 5, 12, 3, 1, 2, 9])) == True\n",
        "idx_generation": 163,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"\n    Given a list of integers, find if there exists a pair of numbers whose product is less than the target.\n    If such a pair exists, return True. Otherwise, return False.\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] < target:\n                return True\n    return False\n\ndef g(nums: List[int] = [2, 5, 3, 4, 8]):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 399,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with only the even numbers from the original list.\n    \"\"\"\n    return [num for num in nums if num % 2 == 0]\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == [2, 4]\n\n",
        "idx_generation": 452,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Check if the given array is a palindrome.\n    \"\"\"\n    return arr == arr[::-1]\n\ndef g(arr=[1, 2, 3, 2, 1]):\n    return arr\n\nassert f(g()) == True\n",
        "idx_generation": 87,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a symmetric matrix\n    \"\"\"\n    n = len(matrix)\n    return all(matrix[i][j] == matrix[j][i] for i in range(n) for j in range(i + 1, n))\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    \"\"\"\n    This solution creates a 3x3 symmetric matrix\n    \"\"\"\n    return matrix\n\nassert f(g()) == True\n",
        "idx_generation": 173,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"\n    Given a list of integers, check if the list is sorted in non-decreasing order.\n\n    Sample Input:\n    arr = [1, 2, 3, 4, 5]\n\n    Sample Output:\n    True\n    \"\"\"\n    return arr == sorted(arr)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n",
        "idx_generation": 150,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"\n    Given a list of integers and a target value, find two numbers in the list that add up to the target value.\n    Return the indices of the two numbers in a list.\n    \"\"\"\n    num_dict = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_dict:\n            return [num_dict[complement], i]\n        num_dict[num] = i\n    return []\n\ndef g(nums: List[int] = [2, 7, 11, 15], target: int = 9):\n    return nums, target\n\nassert f(*g()) == [0, 1]\n",
        "idx_generation": 452,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"\n    Check if the given string is a palindrome.\n\n    Sample Input:\n    \"racecar\"\n\n    Sample Output:\n    True\n    \"\"\"\n    return s == s[::-1]\n\ndef g() -> str:\n    return \"racecar\"\n\nassert f(g()) == True\n",
        "idx_generation": 88,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Given a matrix of integers, check if it is a diagonal matrix.\n\n    Sample Input:\n    [[1, 0, 0],\n     [0, 2, 0],\n     [0, 0, 3]]\n\n    Sample Output:\n    True\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g() -> List[List[int]]:\n    return [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\nassert f(g()) == True\n",
        "idx_generation": 175,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"\n    Given a list of numbers and a target number, find the index of the target number in the list.\n\n    Example:\n    nums = [10, 20, 30, 40, 50]\n    target = 30\n    output: 2\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return i\n    return -1\n\ndef g():\n    return [10, 20, 30, 40, 50], 30\n\nassert f(*g()) == 2\n",
        "idx_generation": 152,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transpose the given matrix.\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    transposed = [[0 for _ in range(rows)] for _ in range(cols)]\n    for i in range(rows):\n        for j in range(cols):\n            transposed[j][i] = matrix[i][j]\n    return transposed\n\ndef g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\nassert f(g()) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n",
        "idx_generation": 453,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\ndef g():\n    return \"radar\"\nassert f(g()) == True\n",
        "idx_generation": 88,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=10, c=15) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c odd integers)\"\"\"\n    return n + a == sum([b * (2*i + 1) for i in range(c)])\ndef g(a=3, b=10, c=15):\n    return -a + sum([b * (2*i + 1) for i in range(c)])\nassert f(g()) == True\n",
        "idx_generation": 175,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of numbers, remove all duplicates and return a new list with unique numbers.\n\n    Example:\n    nums = [1, 2, 2, 3, 4, 4, 5]\n    output: [1, 2, 3, 4, 5]\n    \"\"\"\n    return list(set(nums))\n\ndef g():\n    return [1, 2, 2, 3, 4, 4, 5]\n\nassert f(g()) == [1, 2, 3, 4, 5]\n",
        "idx_generation": 152,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Count the number of zeros in the given matrix.\n    \"\"\"\n    count = 0\n    for row in matrix:\n        for num in row:\n            if num == 0:\n                count += 1\n    return count\n\ndef g():\n    return [\n        [1, 2, 0],\n        [4, 0, 6],\n        [0, 8, 9]\n    ]\n\nassert f(g()) == 3\n",
        "idx_generation": 453,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(words: List[str], prefix=\"pre\") -> bool:\n    \"\"\"Check if any word in the list starts with the given prefix\"\"\"\n    return any(word.startswith(prefix) for word in words)\n\ndef g(words = [\"prefix\", \"preference\", \"precaution\", \"postfix\"]):\n    return words\n\nassert f(g()) == True\n",
        "idx_generation": 91,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=5, c=12) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the squares of the first c integers)\"\"\"\n    return n + a == sum([b * (i**2) for i in range(1, c+1)])\ndef g(a=2, b=5, c=12):\n    return -a + sum([b * (i**2) for i in range(1, c+1)])\nassert f(g()) == True\n",
        "idx_generation": 175,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(s: str, k=2) -> bool:\n    \"\"\"\n    Given a string and a number k, check if it is possible to rearrange the characters\n    in the string such that no two adjacent characters are the same.\n    \"\"\"\n    if k <= 1:\n        return True\n    char_counts = {}\n    for char in s:\n        char_counts[char] = char_counts.get(char, 0) + 1\n        if char_counts[char] > k:\n            return False\n    return True\n\ndef g(k=2):\n    s = \"aabbc\"\n    return s\n\nassert f(g()) == True\n",
        "idx_generation": 152,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Check if there are three numbers in the given list that add up to the target number.\n\n    Sample Input:\n    nums = [1, 2, 3, 4, 5]\n    target = 9\n\n    Sample Output:\n    True\n    \"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5], target: int = 9):\n    return nums, target\n\nassert f(*g()) == True\n",
        "idx_generation": 454,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(word: str, sub: str = 'is', count: int = 2) -> bool:\n    \"\"\"\n    Check if a given word contains a specific substring a certain number of times.\n\n    Sample input:\n    \"Mississippi\"\n\n    Sample output:\n    True\n\n    Explanation: The word \"Mississippi\" contains the substring \"is\" twice.\n    \"\"\"\n    return word.count(sub) == count\ndef g(sub='is', count=2):\n    return sub * count\nassert f(g()) == True\n",
        "idx_generation": 93,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if a list is a prime sequence.\"\"\"\n    if len(arr) < 2:\n        return False\n    for num in arr:\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n    return True\n\ndef g(start: int, length: int):\n    \"\"\"Generate a prime sequence.\"\"\"\n    prime_seq = []\n    num = start\n    while len(prime_seq) < length:\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_seq.append(num)\n        num += 1\n    return prime_seq\n\nassert f(g(2, 5)) == True\n",
        "idx_generation": 182,
        "target_skills": null
    },
    {
        "fitness": null,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"\n    Given a list of integers and a target number, check if there exists a pair of numbers in the list that sums up to the target.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return (nums, target)\n\nassert f(*g()) == True\n\n",
        "idx_generation": 153,
        "target_skills": null
    }
]