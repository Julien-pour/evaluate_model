[
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, c='!') -> bool:\n    \"\"\"Find a string that when reversed and concatenated onto 'Hello ' gives 'Hello world' with an additional character at the end.\"\"\"\n    return 'Hello ' + s[::-1] + c == 'Hello world'\ndef g(c='!'):\n    return 'world'[::-1]\nassert f(g(), c)\n",
        "emb": null,
        "idx_generation": 0,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, c='!') -> bool:\n    \"\"\"Find a string that when reversed and concatenated onto 'Hello ' gives 'Hello world' with an additional character at the end.\"\"\"\n    return 'Hello ' + s[::-1] + c == 'Hello world'",
        "solution_func": "def g(c='!'):\n    return 'world'[::-1]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Find a string that when reversed and concatenated onto 'Hello ' gives 'Hello world' with an additional character at the end, and it must have a length greater than n.\"\"\"\n    return 'Hello ' + s[::-1] + '!' == 'Hello world' and len(s) > n\ndef g(n=3):\n    return 'world'[::-1]\nassert f(g(), n)\n",
        "emb": null,
        "idx_generation": 0,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Find a string that when reversed and concatenated onto 'Hello ' gives 'Hello world' with an additional character at the end, and it must have a length greater than n.\"\"\"\n    return 'Hello ' + s[::-1] + '!' == 'Hello world' and len(s) > n",
        "solution_func": "def g(n=3):\n    return 'world'[::-1]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Find a string that when reversed and concatenated onto 'Hello ' gives 'Hello world' with an additional character at the end, and it must have a length greater than n. Also, the string must contain at least one digit.\"\"\"\n    return 'Hello ' + s[::-1] + '!' == 'Hello world' and len(s) > n and any(char.isdigit() for char in s)\ndef g(n=3):\n    return 'world'[::-1]\nassert f(g(), n)\n",
        "emb": null,
        "idx_generation": 0,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Find a string that when reversed and concatenated onto 'Hello ' gives 'Hello world' with an additional character at the end, and it must have a length greater than n. Also, the string must contain at least one digit.\"\"\"\n    return 'Hello ' + s[::-1] + '!' == 'Hello world' and len(s) > n and any(char.isdigit() for char in s)",
        "solution_func": "def g(n=3):\n    return 'world'[::-1]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers from the list that sum up to the target value\"\"\"\n    return any((numbers[i] + numbers[j] == target for i in range(len(numbers)) for j in range(i + 1, len(numbers))))\ndef g(numbers=[2, 4, 6, 8]):\n    return numbers\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 0,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers from the list that sum up to the target value\"\"\"\n    return any((numbers[i] + numbers[j] == target for i in range(len(numbers)) for j in range(i + 1, len(numbers))))",
        "solution_func": "def g(numbers=[2, 4, 6, 8]):\n    return numbers",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find a row in the matrix that contains the target value\"\"\"\n    return any((target in row for row in matrix))\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 0,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find a row in the matrix that contains the target value\"\"\"\n    return any((target in row for row in matrix))",
        "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], target='Alice') -> bool:\n    \"\"\"Check if the target name is present in the list of names\"\"\"\n    return target in names\ndef g(names=['Alice', 'Bob', 'Charlie']):\n    return names\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 0,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(names: List[str], target='Alice') -> bool:\n    \"\"\"Check if the target name is present in the list of names\"\"\"\n    return target in names",
        "solution_func": "def g(names=['Alice', 'Bob', 'Charlie']):\n    return names",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[5, 10, 15, 7, 3]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 0,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums=[5, 10, 15, 7, 3]):\n    return nums",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, start='hello', end='world') -> bool:\n    \"\"\"Check if the start and end strings are present in the given string\"\"\"\n    return s.startswith(start) and s.endswith(end)\n\ndef g(s='hello, how are you world?'):\n    return s\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 0,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, start='hello', end='world') -> bool:\n    \"\"\"Check if the start and end strings are present in the given string\"\"\"\n    return s.startswith(start) and s.endswith(end)",
        "solution_func": "def g(s='hello, how are you world?'):\n    return s",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=7) -> bool:\n    \"\"\"Check if the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 0,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=7) -> bool:\n    \"\"\"Check if the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(indices: List[int], string='the quick brown fox jumps over the lazy dog') -> bool:\n    \"\"\"Find the increasing indices that spell out the word 'fox'\"\"\"\n    return indices == sorted(indices) and ''.join((string[i] for i in indices)) == 'fox'\ndef g(string='the quick brown fox jumps over the lazy dog'):\n    target = 'fox'\n    j = 0\n    ans = []\n    for i in range(len(string)):\n        if string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 0,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(indices: List[int], string='the quick brown fox jumps over the lazy dog') -> bool:\n    \"\"\"Find the increasing indices that spell out the word 'fox'\"\"\"\n    return indices == sorted(indices) and ''.join((string[i] for i in indices)) == 'fox'",
        "solution_func": "def g(string='the quick brown fox jumps over the lazy dog'):\n    target = 'fox'\n    j = 0\n    ans = []\n    for i in range(len(string)):\n        if string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers in the list x that sum up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for r in range(1, len(x) + 1) for c in combinations(x, r))\ndef g(target=100):\n    return [10, 20, 30, 40]\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 1,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers in the list x that sum up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for r in range(1, len(x) + 1) for c in combinations(x, r))",
        "solution_func": "def g(target=100):\n    return [10, 20, 30, 40]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=3) -> bool:\n    \"\"\"Find the n smallest numbers in the list x\"\"\"\n    return sorted(x)[:n] == [1, 2, 3]\ndef g(n=3):\n    return [5, 1, 3, 2, 4]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 1,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=3) -> bool:\n    \"\"\"Find the n smallest numbers in the list x\"\"\"\n    return sorted(x)[:n] == [1, 2, 3]",
        "solution_func": "def g(n=3):\n    return [5, 1, 3, 2, 4]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(x: List[int], target=25) -> bool:\n    \"\"\"Find a pair of numbers in the list x that sum up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(x, 2))\ndef g(target=25):\n    return [10, 5, 15, 20]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 1,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(x: List[int], target=25) -> bool:\n    \"\"\"Find a pair of numbers in the list x that sum up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(x, 2))",
        "solution_func": "def g(target=25):\n    return [10, 5, 15, 20]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Find a combination of 4 numbers from the given list that can be used to obtain the target number using addition, subtraction, multiplication, and division.\"\"\"\n    def evaluate(expression) -> float:\n        stack = []\n        for token in expression:\n            if token in \"+-*/\":\n                b = stack.pop()\n                a = stack.pop()\n                if token == '+':\n                    stack.append(a + b)\n                elif token == '-':\n                    stack.append(a - b)\n                elif token == '*':\n                    stack.append(a * b)\n                elif token == '/':\n                    stack.append(a / b)\n            else:\n                stack.append(float(token))\n        return stack[0]\n    operators = ['+', '-', '*', '/']\n    expressions = []\n    for a in range(len(nums)):\n        for b in range(len(nums)):\n            if b != a:\n                for c in range(len(nums)):\n                    if c != a and c != b:\n                        for d in range(len(nums)):\n                            if d != a and d != b and d != c:\n                                for op1 in operators:\n                                    for op2 in operators:\n                                        for op3 in operators:\n                                            expression = [nums[a], op1, nums[b], op2, nums[c], op3, nums[d]]\n                                            try:\n                                                if evaluate(expression) == target:\n                                                    return True\n                                            except ZeroDivisionError:\n                                                continue\n    return False\n\ndef g(nums=[3, 8, 2, 1, 6, 4]):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 1,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Find a combination of 4 numbers from the given list that can be used to obtain the target number using addition, subtraction, multiplication, and division.\"\"\"\n    def evaluate(expression) -> float:\n        stack = []\n        for token in expression:\n            if token in \"+-*/\":\n                b = stack.pop()\n                a = stack.pop()\n                if token == '+':\n                    stack.append(a + b)\n                elif token == '-':\n                    stack.append(a - b)\n                elif token == '*':\n                    stack.append(a * b)\n                elif token == '/':\n                    stack.append(a / b)\n            else:\n                stack.append(float(token))\n        return stack[0]\n    operators = ['+', '-', '*', '/']\n    expressions = []\n    for a in range(len(nums)):\n        for b in range(len(nums)):\n            if b != a:\n                for c in range(len(nums)):\n                    if c != a and c != b:\n                        for d in range(len(nums)):\n                            if d != a and d != b and d != c:\n                                for op1 in operators:\n                                    for op2 in operators:\n                                        for op3 in operators:\n                                            expression = [nums[a], op1, nums[b], op2, nums[c], op3, nums[d]]\n                                            try:\n                                                if evaluate(expression) == target:\n                                                    return True\n                                            except ZeroDivisionError:\n                                                continue\n    return False",
        "solution_func": "def g(nums=[3, 8, 2, 1, 6, 4]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a given number is a product of any two prime numbers from the given list.\"\"\"\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            if primes[i] * primes[j] == n:\n                return True\n    return False\n\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return primes\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 1,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a given number is a product of any two prime numbers from the given list.\"\"\"\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            if primes[i] * primes[j] == n:\n                return True\n    return False",
        "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return primes",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substrings=['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']) -> bool:\n    \"\"\"Check if a given string contains all the substrings from the given list.\"\"\"\n    return all(substring in string for substring in substrings)\n\ndef g(substrings=['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']):\n    return ''.join(substrings)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 1,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substrings=['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']) -> bool:\n    \"\"\"Check if a given string contains all the substrings from the given list.\"\"\"\n    return all(substring in string for substring in substrings)",
        "solution_func": "def g(substrings=['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']):\n    return ''.join(substrings)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: int, a=7, b=23) -> bool:\n    \"\"\"Check if x multiplied by a is equal to b\"\"\"\n    return x * a == b\ndef g(a=7, b=23):\n    return b // a\nassert f(g())\n",
        "emb": null,
        "idx_generation": 1,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=7, b=23) -> bool:\n    \"\"\"Check if x multiplied by a is equal to b\"\"\"\n    return x * a == b",
        "solution_func": "def g(a=7, b=23):\n    return b // a",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=100, b=20) -> bool:\n    \"\"\"Check if the sum of n and a is divisible by b\"\"\"\n    return (n + a) % b == 0\ndef g(a=100, b=20):\n    return b - a\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 1,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=100, b=20) -> bool:\n    \"\"\"Check if the sum of n and a is divisible by b\"\"\"\n    return (n + a) % b == 0",
        "solution_func": "def g(a=100, b=20):\n    return b - a",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(tri: List[int], edges=[[1, 2], [2, 3], [3, 1]]) -> bool:\n    \"\"\"Check if the given triangle exists in the directed graph.\"\"\"\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and [c, a] in edges\ndef g(edges=[[1, 2], [2, 3], [3, 1]]):\n    return [1, 2, 3]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 1,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(tri: List[int], edges=[[1, 2], [2, 3], [3, 1]]) -> bool:\n    \"\"\"Check if the given triangle exists in the directed graph.\"\"\"\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and [c, a] in edges",
        "solution_func": "def g(edges=[[1, 2], [2, 3], [3, 1]]):\n    return [1, 2, 3]",
        "map_ix": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, m: int, a=2, b=3) -> bool:\n    \"\"\"Check if the sum of two numbers is a perfect square\"\"\"\n    return sqrt(n + m).is_integer() and (n % a == b or m % a == b)\n    \ndef g(a=2, b=3):\n    return (a**2 - b**2) // 2, (a**2 + b**2) // 2\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 1,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, m: int, a=2, b=3) -> bool:\n    \"\"\"Check if the sum of two numbers is a perfect square\"\"\"\n    return sqrt(n + m).is_integer() and (n % a == b or m % a == b)",
        "solution_func": "def g(a=2, b=3):\n    return (a**2 - b**2) // 2, (a**2 + b**2) // 2",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100, count=5) -> bool:\n    \"\"\"Find a list of count numbers that sum up to target_sum\"\"\"\n    return sum(nums) == target_sum and len(nums) == count\n\ndef g(target_sum=100, count=5):\n    return [target_sum // count] * count\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 2,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=100, count=5) -> bool:\n    \"\"\"Find a list of count numbers that sum up to target_sum\"\"\"\n    return sum(nums) == target_sum and len(nums) == count",
        "solution_func": "def g(target_sum=100, count=5):\n    return [target_sum // count] * count",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_row_sum=10) -> bool:\n    \"\"\"Check if the sum of each row in the matrix is equal to target_row_sum\"\"\"\n    return all(sum(row) == target_row_sum for row in matrix)\n\ndef g(target_row_sum=10):\n    return [[target_row_sum] * 3] * 3\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 2,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_row_sum=10) -> bool:\n    \"\"\"Check if the sum of each row in the matrix is equal to target_row_sum\"\"\"\n    return all(sum(row) == target_row_sum for row in matrix)",
        "solution_func": "def g(target_row_sum=10):\n    return [[target_row_sum] * 3] * 3",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_diff=10) -> bool:\n    \"\"\"Check if the difference between any two numbers in the list is equal to target_diff\"\"\"\n    return any(abs(nums[i] - nums[j]) == target_diff for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_diff=10):\n    return [n for n in range(target_diff+1)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 2,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_diff=10) -> bool:\n    \"\"\"Check if the difference between any two numbers in the list is equal to target_diff\"\"\"\n    return any(abs(nums[i] - nums[j]) == target_diff for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target_diff=10):\n    return [n for n in range(target_diff+1)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Find four distinct positive integers from the given list that sum up to the target value.\"\"\"\n    return len(nums) == len(set(nums)) == 4 and sum(nums) == target\ndef g(target=24):\n    return [1, 2, 3, target-6]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 2,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Find four distinct positive integers from the given list that sum up to the target value.\"\"\"\n    return len(nums) == len(set(nums)) == 4 and sum(nums) == target",
        "solution_func": "def g(target=24):\n    return [1, 2, 3, target-6]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[32, 18, 24, 42], limit=3) -> bool:\n    \"\"\"Check if the given list of integers contains at least `limit` numbers that are divisible by `n`.\"\"\"\n    return sum((i % n == 0 for i in nums)) >= limit\ndef g(nums=[32, 18, 24, 42], limit=3):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 2,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[32, 18, 24, 42], limit=3) -> bool:\n    \"\"\"Check if the given list of integers contains at least `limit` numbers that are divisible by `n`.\"\"\"\n    return sum((i % n == 0 for i in nums)) >= limit",
        "solution_func": "def g(nums=[32, 18, 24, 42], limit=3):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape'], vowels=2) -> bool:\n    \"\"\"Check if the given string `s` has exactly `vowels` number of vowels and it is lexicographically greater than all the strings in the list.\"\"\"\n    vowels_count = sum((c.lower() in 'aeiou' for c in s))\n    return vowels_count == vowels and all((s > t for t in strings))\ndef g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape'], vowels=2):\n    return 'z' * vowels\nassert f(g())\n",
        "emb": null,
        "idx_generation": 2,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape'], vowels=2) -> bool:\n    \"\"\"Check if the given string `s` has exactly `vowels` number of vowels and it is lexicographically greater than all the strings in the list.\"\"\"\n    vowels_count = sum((c.lower() in 'aeiou' for c in s))\n    return vowels_count == vowels and all((s > t for t in strings))",
        "solution_func": "def g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape'], vowels=2):\n    return 'z' * vowels",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m=3) -> bool:\n    \"\"\"Given n, find n integers such that li[i] + li[i+1] + li[i+2] == m, for i = 0, 1, ..., n-1\nwhere indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\nthat are multiples of 3.\nSample input:\n6\nSample output:\n[_, _, _, _, _, _]\n(Sample output hidden because showing sample output would give away too much information.)\"\"\"\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == m - li[(i + 1) % n] - li[i] for i in range(n)))\ndef g(n=6, m=3):\n    return [m-2, m-1, 2] * (n // 3)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 2,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=3) -> bool:\n    \"\"\"Given n, find n integers such that li[i] + li[i+1] + li[i+2] == m, for i = 0, 1, ..., n-1\nwhere indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\nthat are multiples of 3.\nSample input:\n6\nSample output:\n[_, _, _, _, _, _]\n(Sample output hidden because showing sample output would give away too much information.)\"\"\"\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == m - li[(i + 1) % n] - li[i] for i in range(n)))",
        "solution_func": "def g(n=6, m=3):\n    return [m-2, m-1, 2] * (n // 3)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=3) -> bool:\n    \"\"\"Solve an equation problem\"\"\"\n    return (a ** n) % b == (a ** (n % b)) % b\ndef g(a=2, b=3):\n    return a\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 2,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=2, b=3) -> bool:\n    \"\"\"Solve an equation problem\"\"\"\n    return (a ** n) % b == (a ** (n % b)) % b",
        "solution_func": "def g(a=2, b=3):\n    return a",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 3]) -> bool:\n    \"\"\"Find a common divisor of two numbers.\"\"\"\n    return all((n % i == 0 for i in nums)) and n > 0\ndef g(nums=[2, 3]):\n    ans = 1\n    for i in nums:\n        (m, n) = (min(i, ans), max(i, ans))\n        while m > 0:\n            (m, n) = (n % m, m)\n        ans = n\n    return ans\nassert f(g())\n",
        "emb": null,
        "idx_generation": 2,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[2, 3]) -> bool:\n    \"\"\"Find a common divisor of two numbers.\"\"\"\n    return all((n % i == 0 for i in nums)) and n > 0",
        "solution_func": "def g(nums=[2, 3]):\n    ans = 1\n    for i in nums:\n        (m, n) = (min(i, ans), max(i, ans))\n        while m > 0:\n            (m, n) = (n % m, m)\n        ans = n\n    return ans",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=14302, b=5) -> bool:\n    \"\"\"Check if a number is divisible by another number\"\"\"\n    return n % a == 0 and a % b == 0\ndef g(a=14302, b=5):\n    return a * b\nassert f(g())\n",
        "emb": null,
        "idx_generation": 2,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=14302, b=5) -> bool:\n    \"\"\"Check if a number is divisible by another number\"\"\"\n    return n % a == 0 and a % b == 0",
        "solution_func": "def g(a=14302, b=5):\n    return a * b",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=16) -> bool:\n    \"\"\"Given a list of integers, find two numbers such that their sum is equal to the target number.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))\ndef g(target=16):\n    return [2, 7, 11, 15]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 3,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=16) -> bool:\n    \"\"\"Given a list of integers, find two numbers such that their sum is equal to the target number.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))",
        "solution_func": "def g(target=16):\n    return [2, 7, 11, 15]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=21) -> bool:\n    \"\"\"Given a matrix of integers, find whether a target number exists in the matrix.\"\"\"\n    return any((target in row for row in matrix))\ndef g(target=21):\n    return [[1, 3, 5], [7, 9, 11], [13, 15, 17]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 3,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=21) -> bool:\n    \"\"\"Given a matrix of integers, find whether a target number exists in the matrix.\"\"\"\n    return any((target in row for row in matrix))",
        "solution_func": "def g(target=21):\n    return [[1, 3, 5], [7, 9, 11], [13, 15, 17]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=8) -> bool:\n    \"\"\"Given a list of integers, find three numbers such that their sum is equal to the target number.\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i + 1, len(nums)) for k in range(j + 1, len(nums))))\ndef g(target=8):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 3,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=8) -> bool:\n    \"\"\"Given a list of integers, find three numbers such that their sum is equal to the target number.\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i + 1, len(nums)) for k in range(j + 1, len(nums))))",
        "solution_func": "def g(target=8):\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Given a list of integers and a target number, find any pair of numbers in the list that add up to the target.\nSample Input:\n[1, 2, 3, 4]\nSample Output:\n(1, 4)\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(target=5):\n    return [1, 4]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 3,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Given a list of integers and a target number, find any pair of numbers in the list that add up to the target.\nSample Input:\n[1, 2, 3, 4]\nSample Output:\n(1, 4)\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i + 1, len(nums)))",
        "solution_func": "def g(target=5):\n    return [1, 4]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Given a list of integers and a number k, find any sublist of length k whose sum is divisible by k.\nSample Input:\n[1, 2, 3, 4, 5]\nSample Output:\n[2, 3, 4]\"\"\"\n    return any((sum(nums[i:i+k]) % k == 0) for i in range(len(nums) - k + 1))\ndef g(k=3):\n    return [2, 3, 4]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 3,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Given a list of integers and a number k, find any sublist of length k whose sum is divisible by k.\nSample Input:\n[1, 2, 3, 4, 5]\nSample Output:\n[2, 3, 4]\"\"\"\n    return any((sum(nums[i:i+k]) % k == 0) for i in range(len(nums) - k + 1))",
        "solution_func": "def g(k=3):\n    return [2, 3, 4]",
        "map_ix": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], x=10, y=20) -> bool:\n    \"\"\"Given a list of integers and two numbers x and y, find any pair of numbers in the list whose sum is between x and y (inclusive).\nSample Input:\n[1, 2, 3, 4, 5]\nSample Output:\n(3, 4)\"\"\"\n    return any((x <= nums[i] + nums[j] <= y) for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(x=10, y=20):\n    return [3, 4]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 3,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], x=10, y=20) -> bool:\n    \"\"\"Given a list of integers and two numbers x and y, find any pair of numbers in the list whose sum is between x and y (inclusive).\nSample Input:\n[1, 2, 3, 4, 5]\nSample Output:\n(3, 4)\"\"\"\n    return any((x <= nums[i] + nums[j] <= y) for i in range(len(nums)) for j in range(i + 1, len(nums)))",
        "solution_func": "def g(x=10, y=20):\n    return [3, 4]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='Python') -> bool:\n    \"\"\"Check if a given word is present in a string.\"\"\"\n    return word in s\ndef g(word='Python'):\n    return 'Hello ' + word\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 3,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, word='Python') -> bool:\n    \"\"\"Check if a given word is present in a string.\"\"\"\n    return word in s",
        "solution_func": "def g(word='Python'):\n    return 'Hello ' + word",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a perfect square.\"\"\"\n    return n >= 0 and int(n**0.5)**2 == n\ndef g():\n    return 81\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 3,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a perfect square.\"\"\"\n    return n >= 0 and int(n**0.5)**2 == n",
        "solution_func": "def g():\n    return 81",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if a list of numbers is sorted in ascending order.\"\"\"\n    return nums == sorted(nums)\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 3,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if a list of numbers is sorted in ascending order.\"\"\"\n    return nums == sorted(nums)",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) -> bool:\n    \"\"\"Check if a given number is divisible by all elements in a list.\"\"\"\n    return all((n % i == 0 for i in nums))\ndef g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]):\n    return max(nums)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 3,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) -> bool:\n    \"\"\"Check if a given number is divisible by all elements in a list.\"\"\"\n    return all((n % i == 0 for i in nums))",
        "solution_func": "def g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]):\n    return max(nums)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, x=1, y=10) -> bool:\n    \"\"\"Find n such that the sum of all numbers from x to n (inclusive) is equal to y.\"\"\"\n    return (n * (n + 1)) / 2 == y - ((x * (x - 1)) / 2)\ndef g(x=1, y=10):\n    n = (2 * y - x**2 + x) ** 0.5 - x + 1\n    return int(n)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 4,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, x=1, y=10) -> bool:\n    \"\"\"Find n such that the sum of all numbers from x to n (inclusive) is equal to y.\"\"\"\n    return (n * (n + 1)) / 2 == y - ((x * (x - 1)) / 2)",
        "solution_func": "def g(x=1, y=10):\n    n = (2 * y - x**2 + x) ** 0.5 - x + 1\n    return int(n)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(phrase: str, n=4) -> bool:\n    \"\"\"Find the n-th most common word in the given phrase.\"\"\"\n    from collections import Counter\n    words = phrase.split()\n    counter = Counter(words)\n    most_common = counter.most_common(n)\n    return most_common[n - 1][0]\ndef g(phrase='I love to code in Python. Python is the best programming language.'):\n    return phrase\nassert f(g())\n",
        "emb": null,
        "idx_generation": 4,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(phrase: str, n=4) -> bool:\n    \"\"\"Find the n-th most common word in the given phrase.\"\"\"\n    from collections import Counter\n    words = phrase.split()\n    counter = Counter(words)\n    most_common = counter.most_common(n)\n    return most_common[n - 1][0]",
        "solution_func": "def g(phrase='I love to code in Python. Python is the best programming language.'):\n    return phrase",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three distinct numbers from the given list such that their product is equal to the target value.\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, 3):\n        if combo[0] * combo[1] * combo[2] == target:\n            return combo\n    return []\ndef g(target=100):\n    return [1, 10, target // 10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 4,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three distinct numbers from the given list such that their product is equal to the target value.\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, 3):\n        if combo[0] * combo[1] * combo[2] == target:\n            return combo\n    return []",
        "solution_func": "def g(target=100):\n    return [1, 10, target // 10]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100, count=5) -> bool:\n    \"\"\"Check if there exists a subset of numbers in the list that sum up to the target_sum\"\"\"\n    return any(sum(subset) == target_sum for subset in powerset(nums)) and len(nums) == count\n\ndef g(target_sum=100, count=5):\n    return [target_sum // count] * count\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 4,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=100, count=5) -> bool:\n    \"\"\"Check if there exists a subset of numbers in the list that sum up to the target_sum\"\"\"\n    return any(sum(subset) == target_sum for subset in powerset(nums)) and len(nums) == count",
        "solution_func": "def g(target_sum=100, count=5):\n    return [target_sum // count] * count",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100, count=5) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that sum up to the target_sum\"\"\"\n    return any(sum(combination) == target_sum for r in range(1, len(nums) + 1) for combination in combinations(nums, r)) and len(nums) == count\n\ndef g(target_sum=100, count=5):\n    return [target_sum // count] * count\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 4,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=100, count=5) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that sum up to the target_sum\"\"\"\n    return any(sum(combination) == target_sum for r in range(1, len(nums) + 1) for combination in combinations(nums, r)) and len(nums) == count",
        "solution_func": "def g(target_sum=100, count=5):\n    return [target_sum // count] * count",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100, count=5) -> bool:\n    \"\"\"Find the count numbers from the list that have the maximum sum without exceeding the target_sum\"\"\"\n    subsets = sorted(powerset(nums), key=sum, reverse=True)\n    for subset in subsets:\n        if count == 0:\n            break\n        if sum(subset) <= target_sum:\n            count -= 1\n    return count == 0\n\ndef g(target_sum=100, count=5):\n    return sorted(range(count), key=lambda x: target_sum // count, reverse=True)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 4,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=100, count=5) -> bool:\n    \"\"\"Find the count numbers from the list that have the maximum sum without exceeding the target_sum\"\"\"\n    subsets = sorted(powerset(nums), key=sum, reverse=True)\n    for subset in subsets:\n        if count == 0:\n            break\n        if sum(subset) <= target_sum:\n            count -= 1\n    return count == 0",
        "solution_func": "def g(target_sum=100, count=5):\n    return sorted(range(count), key=lambda x: target_sum // count, reverse=True)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, words=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Given a string and a list of words, determine if the string can be formed by concatenating the words in the list.\n    Each word in the list can be used only once.\"\"\"\n    word_count = {}\n    for word in words:\n        if word not in word_count:\n            word_count[word] = 0\n        word_count[word] += 1\n\n    i = 0\n    while i < len(string):\n        found_word = False\n        for word in word_count:\n            if string[i:i+len(word)] == word:\n                if word_count[word] > 0:\n                    word_count[word] -= 1\n                    i += len(word)\n                    found_word = True\n                    break\n        if not found_word:\n            return False\n\n    for count in word_count.values():\n        if count > 0:\n            return False\n\n    return True\n\ndef g(words=['apple', 'banana', 'cherry', 'date']):\n    return ''.join(words)\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 4,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, words=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Given a string and a list of words, determine if the string can be formed by concatenating the words in the list.\n    Each word in the list can be used only once.\"\"\"\n    word_count = {}\n    for word in words:\n        if word not in word_count:\n            word_count[word] = 0\n        word_count[word] += 1\n\n    i = 0\n    while i < len(string):\n        found_word = False\n        for word in word_count:\n            if string[i:i+len(word)] == word:\n                if word_count[word] > 0:\n                    word_count[word] -= 1\n                    i += len(word)\n                    found_word = True\n                    break\n        if not found_word:\n            return False\n\n    for count in word_count.values():\n        if count > 0:\n            return False\n\n    return True",
        "solution_func": "def g(words=['apple', 'banana', 'cherry', 'date']):\n    return ''.join(words)",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19]) -> bool:\n    \"\"\"Given a number n and a list of primes, determine if n is divisible by all the primes in the list.\"\"\"\n    for prime in primes:\n        if n % prime != 0:\n            return False\n    return True\n\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19]):\n    multiple = 1\n    for prime in primes:\n        multiple *= prime\n    return multiple\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 4,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19]) -> bool:\n    \"\"\"Given a number n and a list of primes, determine if n is divisible by all the primes in the list.\"\"\"\n    for prime in primes:\n        if n % prime != 0:\n            return False\n    return True",
        "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19]):\n    multiple = 1\n    for prime in primes:\n        multiple *= prime\n    return multiple",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_row_sum=10) -> bool:\n    \"\"\"Given a matrix of integers and a target row sum, determine if there exists a row in the matrix whose sum equals the target row sum.\"\"\"\n    for row in matrix:\n        if sum(row) == target_row_sum:\n            return True\n    return False\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 4,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_row_sum=10) -> bool:\n    \"\"\"Given a matrix of integers and a target row sum, determine if there exists a row in the matrix whose sum equals the target row sum.\"\"\"\n    for row in matrix:\n        if sum(row) == target_row_sum:\n            return True\n    return False",
        "solution_func": "def g(matrix: List[List[int]]):\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Find a pair of numbers from the list that sums up to the target sum\"\"\"\n    for i, num1 in enumerate(nums):\n        for num2 in nums[i+1:]:\n            if num1 + num2 == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  # A list of numbers\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 4,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Find a pair of numbers from the list that sums up to the target sum\"\"\"\n    for i, num1 in enumerate(nums):\n        for num2 in nums[i+1:]:\n            if num1 + num2 == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  # A list of numbers",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target_sum=100, count=5) -> bool:\n    \"\"\"Find a list of count numbers that sum up to target_sum\"\"\"\n    return sum(nums) == target_sum and len(nums) == count\n\ndef g(target_sum=100, count=5):\n    nums = []\n    while len(nums) < count:\n        num = random.randint(1, target_sum)\n        if num not in nums:\n            nums.append(num)\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 5,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(nums: List[int], target_sum=100, count=5) -> bool:\n    \"\"\"Find a list of count numbers that sum up to target_sum\"\"\"\n    return sum(nums) == target_sum and len(nums) == count",
        "solution_func": "def g(target_sum=100, count=5):\n    nums = []\n    while len(nums) < count:\n        num = random.randint(1, target_sum)\n        if num not in nums:\n            nums.append(num)\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport itertools\n\ndef f(nums: List[int], target_sum=100, count=5) -> bool:\n    \"\"\"Find a list of count numbers that sum up to target_sum\"\"\"\n    return sum(nums) == target_sum and len(nums) == count\n\ndef g(target_sum=100, count=5):\n    nums = list(itertools.combinations(range(1, target_sum), count))\n    for num in nums:\n        if sum(num) == target_sum:\n            return list(num)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 5,
        "target_skills": null,
        "problem_func": "from typing import*\nimport itertools\n\ndef f(nums: List[int], target_sum=100, count=5) -> bool:\n    \"\"\"Find a list of count numbers that sum up to target_sum\"\"\"\n    return sum(nums) == target_sum and len(nums) == count",
        "solution_func": "def g(target_sum=100, count=5):\n    nums = list(itertools.combinations(range(1, target_sum), count))\n    for num in nums:\n        if sum(num) == target_sum:\n            return list(num)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(nums: List[int], target_sum=100, count=5) -> bool:\n    \"\"\"Find a list of count numbers that sum up to target_sum\"\"\"\n    return sum(nums) == target_sum and len(nums) == count\n\ndef g(target_sum=100, count=5):\n    nums = []\n    for i in range(1, count+1):\n        num = int(math.ceil(target_sum / count))\n        nums.append(num)\n        target_sum -= num\n        count -= 1\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 5,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(nums: List[int], target_sum=100, count=5) -> bool:\n    \"\"\"Find a list of count numbers that sum up to target_sum\"\"\"\n    return sum(nums) == target_sum and len(nums) == count",
        "solution_func": "def g(target_sum=100, count=5):\n    nums = []\n    for i in range(1, count+1):\n        num = int(math.ceil(target_sum / count))\n        nums.append(num)\n        target_sum -= num\n        count -= 1\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: int, target=100) -> bool:\n    \"\"\"Find a list of numbers whose sum is equal to the target value.\"\"\"\n    return sum(x) == target\ndef g(target=100):\n    return [i for i in range(target)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 5,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, target=100) -> bool:\n    \"\"\"Find a list of numbers whose sum is equal to the target value.\"\"\"\n    return sum(x) == target",
        "solution_func": "def g(target=100):\n    return [i for i in range(target)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, substr='apple') -> bool:\n    \"\"\"Check if a string contains a specific substring.\"\"\"\n    return substr in x\ndef g(substr='apple'):\n    return \"I like to eat \" + substr\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 5,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, substr='apple') -> bool:\n    \"\"\"Check if a string contains a specific substring.\"\"\"\n    return substr in x",
        "solution_func": "def g(substr='apple'):\n    return \"I like to eat \" + substr",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=100) -> bool:\n    \"\"\"Check if a given list contains a number that is divisible by n.\"\"\"\n    return any(num % n == 0 for num in x)\ndef g(n=100):\n    return [i for i in range(1, n+1)]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 5,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=100) -> bool:\n    \"\"\"Check if a given list contains a number that is divisible by n.\"\"\"\n    return any(num % n == 0 for num in x)",
        "solution_func": "def g(n=100):\n    return [i for i in range(1, n+1)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100, n=10) -> bool:\n    \"\"\"Find the combination of n distinct positive integers that sum to target\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target\ndef g(target=100, n=10):\n    return list(range(1, n+1))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 5,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100, n=10) -> bool:\n    \"\"\"Find the combination of n distinct positive integers that sum to target\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target",
        "solution_func": "def g(target=100, n=10):\n    return list(range(1, n+1))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(s: str, target='abcdefg', length=4) -> bool:\n    \"\"\"Check if the given string is a substring of the target string, starting at the center\"\"\"\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s\ndef g(target='abcdefg', length=4):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 5,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(s: str, target='abcdefg', length=4) -> bool:\n    \"\"\"Check if the given string is a substring of the target string, starting at the center\"\"\"\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s",
        "solution_func": "def g(target='abcdefg', length=4):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: int, a=5, b=10) -> bool:\n    \"\"\"Check if the given integer satisfies the equation\"\"\"\n    return x + a == b\ndef g(a=5, b=10):\n    return b - a\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 5,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: int, a=5, b=10) -> bool:\n    \"\"\"Check if the given integer satisfies the equation\"\"\"\n    return x + a == b",
        "solution_func": "def g(a=5, b=10):\n    return b - a",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: str, s=12345) -> bool:\n    \"\"\"Check if the digits of a number are in non-decreasing order.\"\"\"\n    return list(x) == sorted(x)\ndef g(s=12345):\n    return ''.join(str(i) for i in range(1, s+1))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 5,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, s=12345) -> bool:\n    \"\"\"Check if the digits of a number are in non-decreasing order.\"\"\"\n    return list(x) == sorted(x)",
        "solution_func": "def g(s=12345):\n    return ''.join(str(i) for i in range(1, s+1))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=14302, b=5) -> bool:\n    \"\"\"Check if a number is divisible by another number\"\"\"\n    return a % n == 0\ndef g(a=14302, b=5):\n    return a // b\nassert f(g())\n",
        "emb": null,
        "idx_generation": 6,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=14302, b=5) -> bool:\n    \"\"\"Check if a number is divisible by another number\"\"\"\n    return a % n == 0",
        "solution_func": "def g(a=14302, b=5):\n    return a // b",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=14302, b=5) -> bool:\n    \"\"\"Check if a number is a perfect square\"\"\"\n    return n * n == a\ndef g(a=14302, b=5):\n    return int(a ** 0.5)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 6,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=14302, b=5) -> bool:\n    \"\"\"Check if a number is a perfect square\"\"\"\n    return n * n == a",
        "solution_func": "def g(a=14302, b=5):\n    return int(a ** 0.5)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=14302, b=5) -> bool:\n    \"\"\"Find a number that when multiplied by b and added with a is divisible by b\"\"\"\n    return (n * b + a) % b == 0\ndef g(a=14302, b=5):\n    return a // b\nassert f(g())\n",
        "emb": null,
        "idx_generation": 6,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=14302, b=5) -> bool:\n    \"\"\"Find a number that when multiplied by b and added with a is divisible by b\"\"\"\n    return (n * b + a) % b == 0",
        "solution_func": "def g(a=14302, b=5):\n    return a // b",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], x=10, y=5, z=3) -> bool:\n    \"\"\"Given a list of integers, check if there are at least x numbers greater than y and at least z numbers smaller than y.\"\"\"\n    greater = sum((num > y for num in nums))\n    smaller = sum((num < y for num in nums))\n    return greater >= x and smaller >= z\ndef g(x=10, y=5, z=3):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 6,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], x=10, y=5, z=3) -> bool:\n    \"\"\"Given a list of integers, check if there are at least x numbers greater than y and at least z numbers smaller than y.\"\"\"\n    greater = sum((num > y for num in nums))\n    smaller = sum((num < y for num in nums))\n    return greater >= x and smaller >= z",
        "solution_func": "def g(x=10, y=5, z=3):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    return nums",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str], letter='a', length=5, count=3) -> bool:\n    \"\"\"Given a list of words, check if there are at least count words that start with letter and have a length of length.\"\"\"\n    matching_words = [word for word in words if word.startswith(letter) and len(word) == length]\n    return len(matching_words) >= count\ndef g(letter='a', length=5, count=3):\n    words = ['apple', 'banana', 'avocado', 'apricot', 'cherry', 'almond']\n    return words\nassert f(g())\n",
        "emb": null,
        "idx_generation": 6,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], letter='a', length=5, count=3) -> bool:\n    \"\"\"Given a list of words, check if there are at least count words that start with letter and have a length of length.\"\"\"\n    matching_words = [word for word in words if word.startswith(letter) and len(word) == length]\n    return len(matching_words) >= count",
        "solution_func": "def g(letter='a', length=5, count=3):\n    words = ['apple', 'banana', 'avocado', 'apricot', 'cherry', 'almond']\n    return words",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], row_sum=10, col_sum=5) -> bool:\n    \"\"\"Given a matrix, check if the sum of each row is at least row_sum and the sum of each column is at least col_sum.\"\"\"\n    row_sums = [sum(row) >= row_sum for row in matrix]\n    col_sums = [sum(col) >= col_sum for col in zip(*matrix)]\n    return all(row_sums) and all(col_sums)\ndef g(row_sum=10, col_sum=5):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 6,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], row_sum=10, col_sum=5) -> bool:\n    \"\"\"Given a matrix, check if the sum of each row is at least row_sum and the sum of each column is at least col_sum.\"\"\"\n    row_sums = [sum(row) >= row_sum for row in matrix]\n    col_sums = [sum(col) >= col_sum for col in zip(*matrix)]\n    return all(row_sums) and all(col_sums)",
        "solution_func": "def g(row_sum=10, col_sum=5):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], tot=10000, n=20) -> bool:\n    \"\"\"Find n distinct positive even integers that sum to tot\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 == 0 for i in nums))\ndef g(tot=10000, n=20):\n    return list(range(2, 2 * n + 2, 2)) + [tot - sum(range(2, 2 * n + 2, 2))]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 6,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], tot=10000, n=20) -> bool:\n    \"\"\"Find n distinct positive even integers that sum to tot\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 == 0 for i in nums))",
        "solution_func": "def g(tot=10000, n=20):\n    return list(range(2, 2 * n + 2, 2)) + [tot - sum(range(2, 2 * n + 2, 2))]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], tot=500, n=10) -> bool:\n    \"\"\"Find n distinct positive integers that sum to tot\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot\ndef g(tot=500, n=10):\n    return list(range(1, n+1))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 6,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], tot=500, n=10) -> bool:\n    \"\"\"Find n distinct positive integers that sum to tot\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot",
        "solution_func": "def g(tot=500, n=10):\n    return list(range(1, n+1))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], target=20, n=5) -> bool:\n    \"\"\"Given a list of integers, find n distinct numbers that sum to target\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target\ndef g(target=20, n=5):\n    import random\n    nums = []\n    while len(nums) < n:\n        num = random.randint(1, 10)\n        if num not in nums:\n            nums.append(num)\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 6,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(nums: List[int], target=20, n=5) -> bool:\n    \"\"\"Given a list of integers, find n distinct numbers that sum to target\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target",
        "solution_func": "def g(target=20, n=5):\n    import random\n    nums = []\n    while len(nums) < n:\n        num = random.randint(1, 10)\n        if num not in nums:\n            nums.append(num)\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(li: List[int], target_len=15) -> bool:\n    \"\"\"Find a list of integers containing exactly two distinct values, such that the length of the list is equal to target_len.\"\"\"\n    return len(set(li)) == 2 and len(li) == target_len\ndef g(target_len=15):\n    return [0, 1] * (target_len // 2)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 6,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[int], target_len=15) -> bool:\n    \"\"\"Find a list of integers containing exactly two distinct values, such that the length of the list is equal to target_len.\"\"\"\n    return len(set(li)) == 2 and len(li) == target_len",
        "solution_func": "def g(target_len=15):\n    return [0, 1] * (target_len // 2)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"Find a triplet of numbers in the list x that sum up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(x, 3))\ndef g(target=100):\n    return [10, 20, 30, 40, 50]\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 7,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"Find a triplet of numbers in the list x that sum up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(x, 3))",
        "solution_func": "def g(target=100):\n    return [10, 20, 30, 40, 50]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(x: List[int], target=0) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list x that multiply to the target\"\"\"\n    from itertools import combinations\n    return any(a * b == target for a, b in combinations(x, 2))\ndef g(target=0):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 7,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(x: List[int], target=0) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list x that multiply to the target\"\"\"\n    from itertools import combinations\n    return any(a * b == target for a, b in combinations(x, 2))",
        "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(x: List[int], target=50) -> bool:\n    \"\"\"Find a subsequence of numbers in the list x that sum up to the target\"\"\"\n    n = len(x)\n    dp = [False]*(target+1)\n    dp[0] = True\n    for i in range(1, n+1):\n        for j in range(target, x[i-1]-1, -1):\n            if dp[j] or (j-x[i-1] >= 0 and dp[j-x[i-1]]):\n                dp[j] = True\n    return dp[target]\ndef g(target=50):\n    return [10, 20, 30, 40, 50]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 7,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(x: List[int], target=50) -> bool:\n    \"\"\"Find a subsequence of numbers in the list x that sum up to the target\"\"\"\n    n = len(x)\n    dp = [False]*(target+1)\n    dp[0] = True\n    for i in range(1, n+1):\n        for j in range(target, x[i-1]-1, -1):\n            if dp[j] or (j-x[i-1] >= 0 and dp[j-x[i-1]]):\n                dp[j] = True\n    return dp[target]",
        "solution_func": "def g(target=50):\n    return [10, 20, 30, 40, 50]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, n=7) -> bool:\n    \"\"\"Check if a number is divisible by n.\"\"\"\n    return x % n == 0\ndef g(n=7):\n    return n * 9\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 7,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, n=7) -> bool:\n    \"\"\"Check if a number is divisible by n.\"\"\"\n    return x % n == 0",
        "solution_func": "def g(n=7):\n    return n * 9",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: float, a=3.14, b=6.28) -> bool:\n    \"\"\"Check if a number is within a specific range.\"\"\"\n    return a <= x <= b\ndef g(a=3.14, b=6.28):\n    return (a + b) / 2\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 7,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: float, a=3.14, b=6.28) -> bool:\n    \"\"\"Check if a number is within a specific range.\"\"\"\n    return a <= x <= b",
        "solution_func": "def g(a=3.14, b=6.28):\n    return (a + b) / 2",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, s='Python') -> bool:\n    \"\"\"Check if a string contains a specific substring.\"\"\"\n    return s in x\ndef g(s='Python'):\n    return \"Hello \" + s\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 7,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, s='Python') -> bool:\n    \"\"\"Check if a string contains a specific substring.\"\"\"\n    return s in x",
        "solution_func": "def g(s='Python'):\n    return \"Hello \" + s",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: str, s=569) -> bool:\n    \"\"\"Check if the sum of the ASCII values of the characters in a string is equal to a given value.\"\"\"\n    return s == sum(ord(c) for c in x)\ndef g(s=569):\n    return ''.join(chr((s // 10) + 97) for _ in range(s % 10))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 7,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, s=569) -> bool:\n    \"\"\"Check if the sum of the ASCII values of the characters in a string is equal to a given value.\"\"\"\n    return s == sum(ord(c) for c in x)",
        "solution_func": "def g(s=569):\n    return ''.join(chr((s // 10) + 97) for _ in range(s % 10))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: List[int], n=10, m=100) -> bool:\n    \"\"\"Check if a list of integers contains all the numbers from 1 to n (inclusive) and the sum of the numbers is equal to m.\"\"\"\n    return len(x) == n and sum(x) == m and set(x) == set(range(1, n + 1))\ndef g(n=10, m=100):\n    return [i for i in range(1, n + 1)] + [m - sum(range(1, n + 1))]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 7,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=10, m=100) -> bool:\n    \"\"\"Check if a list of integers contains all the numbers from 1 to n (inclusive) and the sum of the numbers is equal to m.\"\"\"\n    return len(x) == n and sum(x) == m and set(x) == set(range(1, n + 1))",
        "solution_func": "def g(n=10, m=100):\n    return [i for i in range(1, n + 1)] + [m - sum(range(1, n + 1))]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: List[int], target=42) -> bool:\n    \"\"\"Check if there exist three integers in a list that sum up to a given target value.\"\"\"\n    return any(sum(x[i] + x[j] + x[k] == target for i in range(len(x))) for j in range(i + 1, len(x))) for k in range(j + 1, len(x)))\ndef g(target=42):\n    return list(range(1, 10))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 7,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], target=42) -> bool:\n    \"\"\"Check if there exist three integers in a list that sum up to a given target value.\"\"\"\n    return any(sum(x[i] + x[j] + x[k] == target for i in range(len(x))) for j in range(i + 1, len(x))) for k in range(j + 1, len(x)))",
        "solution_func": "def g(target=42):\n    return list(range(1, 10))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[str], target='python', count=3) -> bool:\n    \"\"\"Find a list with a certain number of target strings\"\"\"\n    return li.count(target) == count and len(li) >= count\ndef g(target='python', count=3):\n    return [target] * count\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 7,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[str], target='python', count=3) -> bool:\n    \"\"\"Find a list with a certain number of target strings\"\"\"\n    return li.count(target) == count and len(li) >= count",
        "solution_func": "def g(target='python', count=3):\n    return [target] * count",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find two numbers in a list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=100):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 8,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find two numbers in a list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=100):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=16) -> bool:\n    \"\"\"Find the position of a target number in a matrix.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target:\n                return True\n    return False\ndef g(target=16):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 8,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=16) -> bool:\n    \"\"\"Find the position of a target number in a matrix.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=16):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"Check if a given string contains a target substring.\"\"\"\n    return target in s\ndef g(target='hello'):\n    s = \"This is a hello world program.\"\n    return s\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 8,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"Check if a given string contains a target substring.\"\"\"\n    return target in s",
        "solution_func": "def g(target='hello'):\n    s = \"This is a hello world program.\"\n    return s",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=8) -> bool:\n    \"\"\"Given a list of integers and a target number, find any pair of numbers in the list that multiply to the target.\nSample Input:\n[2, 4, 3, 5]\nSample Output:\n(2, 4)\"\"\"\n    return any((nums[i] * nums[j] == target) for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(target=8):\n    return [2, 4]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 8,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=8) -> bool:\n    \"\"\"Given a list of integers and a target number, find any pair of numbers in the list that multiply to the target.\nSample Input:\n[2, 4, 3, 5]\nSample Output:\n(2, 4)\"\"\"\n    return any((nums[i] * nums[j] == target) for i in range(len(nums)) for j in range(i + 1, len(nums)))",
        "solution_func": "def g(target=8):\n    return [2, 4]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(rectangles: List[List[int]], m=5, n=10, target=25) -> bool:\n    \"\"\"Place rectangles on an m x n grid. Each rectangle is represented as a list [i, j, w, h], where (i, j) is the\ncoordinates of its upper-left corner, and w and h are its width and height. The solution is a list of fourtuples [i1, j1, i2, j2] with\ni2 == i1 + h - 1 and j2 == j1 + w - 1, with no overlap.\"\"\"\n    covered = []\n    for (i, j, w, h) in rectangles:\n        assert 0 <= i < m and 0 <= j < n and 0 < w <= n and 0 < h <= m and i + h <= m and j + w <= n\n        covered += [(x, y) for x in range(i, i + h) for y in range(j, j + w)]\n    return len(set(covered)) == len(covered) == target\ndef g(m=5, n=10, target=25):\n    ans = [[i, j, 2, 3] for i in range(m - 1) for j in range(n - 2)]\n    return ans\nassert f(g())\n",
        "emb": null,
        "idx_generation": 8,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(rectangles: List[List[int]], m=5, n=10, target=25) -> bool:\n    \"\"\"Place rectangles on an m x n grid. Each rectangle is represented as a list [i, j, w, h], where (i, j) is the\ncoordinates of its upper-left corner, and w and h are its width and height. The solution is a list of fourtuples [i1, j1, i2, j2] with\ni2 == i1 + h - 1 and j2 == j1 + w - 1, with no overlap.\"\"\"\n    covered = []\n    for (i, j, w, h) in rectangles:\n        assert 0 <= i < m and 0 <= j < n and 0 < w <= n and 0 < h <= m and i + h <= m and j + w <= n\n        covered += [(x, y) for x in range(i, i + h) for y in range(j, j + w)]\n    return len(set(covered)) == len(covered) == target",
        "solution_func": "def g(m=5, n=10, target=25):\n    ans = [[i, j, 2, 3] for i in range(m - 1) for j in range(n - 2)]\n    return ans",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, a='python', b='programming', length=7) -> bool:\n    \"\"\"Find a string of length length that is in both strings a and b\"\"\"\n    return len(s) == length and s in a and (s in b)\ndef g(a='python', b='programming', length=7):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 8,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, a='python', b='programming', length=7) -> bool:\n    \"\"\"Find a string of length length that is in both strings a and b\"\"\"\n    return len(s) == length and s in a and (s in b)",
        "solution_func": "def g(a='python', b='programming', length=7):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=987654321) -> bool:\n    \"\"\"Find a positive number that when squared is close to a.\"\"\"\n    return abs(x ** 2 - a) < 10 ** (-4) and x > 0\ndef g(a=987654321):\n    return a ** 0.5\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 8,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=987654321) -> bool:\n    \"\"\"Find a positive number that when squared is close to a.\"\"\"\n    return abs(x ** 2 - a) < 10 ** (-4) and x > 0",
        "solution_func": "def g(a=987654321):\n    return a ** 0.5",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=123456789) -> bool:\n    \"\"\"Find a number that when cubed is close to a.\"\"\"\n    return abs(x ** 3 - a) < 10 ** (-6)\ndef g(a=123456789):\n    return a ** (1/3)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 8,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=123456789) -> bool:\n    \"\"\"Find a number that when cubed is close to a.\"\"\"\n    return abs(x ** 3 - a) < 10 ** (-6)",
        "solution_func": "def g(a=123456789):\n    return a ** (1/3)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=55555555) -> bool:\n    \"\"\"Find a number that when squared is close to a and x is non-negative.\"\"\"\n    return abs(x ** 2 - a) < 10 ** (-5) and x >= 0\ndef g(a=55555555):\n    return a ** 0.5\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 8,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=55555555) -> bool:\n    \"\"\"Find a number that when squared is close to a and x is non-negative.\"\"\"\n    return abs(x ** 2 - a) < 10 ** (-5) and x >= 0",
        "solution_func": "def g(a=55555555):\n    return a ** 0.5",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if the sum of any two elements in the array equals the target value\"\"\"\n    return any((arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i + 1, len(arr))))\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 8,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if the sum of any two elements in the array equals the target value\"\"\"\n    return any((arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i + 1, len(arr))))",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, a='apple', b='banana', length=3) -> bool:\n    \"\"\"Find a string of length length that is in both strings a and b\"\"\"\n    return len(s) == length and s in a and (s in b)\ndef g(a='apple', b='banana', length=3):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 9,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, a='apple', b='banana', length=3) -> bool:\n    \"\"\"Find a string of length length that is in both strings a and b\"\"\"\n    return len(s) == length and s in a and (s in b)",
        "solution_func": "def g(a='apple', b='banana', length=3):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=5, b=10) -> bool:\n    \"\"\"Find a number x that is divisible by a and b\"\"\"\n    return x % a == 0 and x % b == 0\ndef g(a=5, b=10):\n    return a * b\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 9,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=5, b=10) -> bool:\n    \"\"\"Find a number x that is divisible by a and b\"\"\"\n    return x % a == 0 and x % b == 0",
        "solution_func": "def g(a=5, b=10):\n    return a * b",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n=5) -> bool:\n    \"\"\"Find a list arr containing exactly n distinct values\"\"\"\n    return len(set(arr)) == n\ndef g(n=5):\n    return list(range(n))\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 9,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], n=5) -> bool:\n    \"\"\"Find a list arr containing exactly n distinct values\"\"\"\n    return len(set(arr)) == n",
        "solution_func": "def g(n=5):\n    return list(range(n))",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=10) -> bool:\n    \"\"\"Check if the sum of two numbers is equal to a given number\"\"\"\n    return n + a == b\ndef g(a=3, b=10):\n    return b - a\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 9,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=3, b=10) -> bool:\n    \"\"\"Check if the sum of two numbers is equal to a given number\"\"\"\n    return n + a == b",
        "solution_func": "def g(a=3, b=10):\n    return b - a",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, a='hello', b='world') -> bool:\n    \"\"\"Check if a string contains a given substring\"\"\"\n    return a in x or b in x\ndef g(a='hello', b='world'):\n    return a + ' ' + b\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 9,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, a='hello', b='world') -> bool:\n    \"\"\"Check if a string contains a given substring\"\"\"\n    return a in x or b in x",
        "solution_func": "def g(a='hello', b='world'):\n    return a + ' ' + b",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=5) -> bool:\n    \"\"\"Check if all numbers in the list are greater than a given number\"\"\"\n    return all(num > n for num in x)\ndef g(n=5):\n    return [i for i in range(n+1, 2*n+1)]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 9,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=5) -> bool:\n    \"\"\"Check if all numbers in the list are greater than a given number\"\"\"\n    return all(num > n for num in x)",
        "solution_func": "def g(n=5):\n    return [i for i in range(n+1, 2*n+1)]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_word='python') -> bool:\n    \"\"\"Check if it is possible to form the target_word using the given list of words.\n    A word can be formed by concatenating multiple words from the given list.\n    - words: list of words\n    - target_word: word to be formed\"\"\"\n    def is_word_formed(word):\n        if word == '':\n            return True\n        for i in range(1, len(word) + 1):\n            if word[:i] in words and is_word_formed(word[i:]):\n                return True\n        return False\n    return is_word_formed(target_word)\ndef g(words=['py', 'th', 'on']):\n    return words\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 9,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], target_word='python') -> bool:\n    \"\"\"Check if it is possible to form the target_word using the given list of words.\n    A word can be formed by concatenating multiple words from the given list.\n    - words: list of words\n    - target_word: word to be formed\"\"\"\n    def is_word_formed(word):\n        if word == '':\n            return True\n        for i in range(1, len(word) + 1):\n            if word[:i] in words and is_word_formed(word[i:]):\n                return True\n        return False\n    return is_word_formed(target_word)",
        "solution_func": "def g(words=['py', 'th', 'on']):\n    return words",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(grid: List[List[int]]) -> bool:\n    \"\"\"Check if the given grid forms a valid Sudoku solution.\n    - grid: 9x9 grid containing numbers from 1 to 9\"\"\"\n    def is_valid_row(row):\n        return len(row) == len(set(row)) and sorted(row) == list(range(1, 10))\n    \n    def is_valid_column(col):\n        return len(col) == len(set(col)) and sorted(col) == list(range(1, 10))\n    \n    def is_valid_subgrid(subgrid):\n        flattened_subgrid = [num for row in subgrid for num in row]\n        return len(flattened_subgrid) == len(set(flattened_subgrid)) and sorted(flattened_subgrid) == list(range(1, 10))\n    \n    for i in range(9):\n        if not is_valid_row(grid[i]):\n            return False\n        \n        column = [grid[j][i] for j in range(9)]\n        if not is_valid_column(column):\n            return False\n        \n    for i in range(0, 9, 3):\n        for j in range(0, 9, 3):\n            subgrid = [grid[x][y] for x in range(i, i+3) for y in range(j, j+3)]\n            if not is_valid_subgrid(subgrid):\n                return False\n    \n    return True\ndef g():\n    return [[5, 3, 4, 6, 7, 8, 9, 1, 2],\n            [6, 7, 2, 1, 9, 5, 3, 4, 8],\n            [1, 9, 8, 3, 4, 2, 5, 6, 7],\n            [8, 5, 9, 7, 6, 1, 4, 2, 3],\n            [4, 2, 6, 8, 5, 3, 7, 9, 1],\n            [7, 1, 3, 9, 2, 4, 8, 5, 6],\n            [9, 6, 1, 5, 3, 7, 2, 8, 4],\n            [2, 8, 7, 4, 1, 9, 6, 3, 5],\n            [3, 4, 5, 2, 8, 6, 1, 7, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 9,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(grid: List[List[int]]) -> bool:\n    \"\"\"Check if the given grid forms a valid Sudoku solution.\n    - grid: 9x9 grid containing numbers from 1 to 9\"\"\"\n    def is_valid_row(row):\n        return len(row) == len(set(row)) and sorted(row) == list(range(1, 10))\n    \n    def is_valid_column(col):\n        return len(col) == len(set(col)) and sorted(col) == list(range(1, 10))\n    \n    def is_valid_subgrid(subgrid):\n        flattened_subgrid = [num for row in subgrid for num in row]\n        return len(flattened_subgrid) == len(set(flattened_subgrid)) and sorted(flattened_subgrid) == list(range(1, 10))\n    \n    for i in range(9):\n        if not is_valid_row(grid[i]):\n            return False\n        \n        column = [grid[j][i] for j in range(9)]\n        if not is_valid_column(column):\n            return False\n        \n    for i in range(0, 9, 3):\n        for j in range(0, 9, 3):\n            subgrid = [grid[x][y] for x in range(i, i+3) for y in range(j, j+3)]\n            if not is_valid_subgrid(subgrid):\n                return False\n    \n    return True",
        "solution_func": "def g():\n    return [[5, 3, 4, 6, 7, 8, 9, 1, 2],\n            [6, 7, 2, 1, 9, 5, 3, 4, 8],\n            [1, 9, 8, 3, 4, 2, 5, 6, 7],\n            [8, 5, 9, 7, 6, 1, 4, 2, 3],\n            [4, 2, 6, 8, 5, 3, 7, 9, 1],\n            [7, 1, 3, 9, 2, 4, 8, 5, 6],\n            [9, 6, 1, 5, 3, 7, 2, 8, 4],\n            [2, 8, 7, 4, 1, 9, 6, 3, 5],\n            [3, 4, 5, 2, 8, 6, 1, 7, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(password: str) -> bool:\n    \"\"\"Check if the given password meets the specified criteria.\n    - password: string containing the password\"\"\"\n\n    def has_lowercase_letter(password):\n        return any(char.islower() for char in password)\n\n    def has_uppercase_letter(password):\n        return any(char.isupper() for char in password)\n\n    def has_digit(password):\n        return any(char.isdigit() for char in password)\n\n    def has_special_char(password):\n        special_chars = \"!@#$%^&*()_+-=[]{}|\\\\;':\\\",./<>?\"\n        return any(char in special_chars for char in password)\n\n    def is_valid_length(password):\n        return len(password) >= 8\n\n    return (has_lowercase_letter(password) and\n            has_uppercase_letter(password) and\n            has_digit(password) and\n            has_special_char(password) and\n            is_valid_length(password))\n\ndef g():\n    return \"Passw0rd!\"\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 9,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(password: str) -> bool:\n    \"\"\"Check if the given password meets the specified criteria.\n    - password: string containing the password\"\"\"\n\n    def has_lowercase_letter(password):\n        return any(char.islower() for char in password)\n\n    def has_uppercase_letter(password):\n        return any(char.isupper() for char in password)\n\n    def has_digit(password):\n        return any(char.isdigit() for char in password)\n\n    def has_special_char(password):\n        special_chars = \"!@#$%^&*()_+-=[]{}|\\\\;':\\\",./<>?\"\n        return any(char in special_chars for char in password)\n\n    def is_valid_length(password):\n        return len(password) >= 8\n\n    return (has_lowercase_letter(password) and\n            has_uppercase_letter(password) and\n            has_digit(password) and\n            has_special_char(password) and\n            is_valid_length(password))",
        "solution_func": "def g():\n    return \"Passw0rd!\"",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=-2, c=10) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])\ndef g(a=5, b=-2, c=10):\n    return -a + sum([b * i for i in range(c)])\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 9,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=5, b=-2, c=10) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])",
        "solution_func": "def g(a=5, b=-2, c=10):\n    return -a + sum([b * i for i in range(c)])",
        "map_ix": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))\ndef g(target=10):\n    return [i for i in range(target - 1)] + [2 * target - 1]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 10,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))",
        "solution_func": "def g(target=10):\n    return [i for i in range(target - 1)] + [2 * target - 1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_row=2) -> bool:\n    \"\"\"Check if the sum of all numbers in the target row of the matrix is equal to the product of all numbers in the other rows.\"\"\"\n    target_sum = sum(matrix[target_row])\n    product = 1\n    for i, row in enumerate(matrix):\n        if i != target_row:\n            for num in row:\n                product *= num\n    return target_sum == product\ndef g(target_row=2):\n    matrix = [[i for i in range(1, target_row + 2)] for _ in range(target_row + 1)]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 10,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_row=2) -> bool:\n    \"\"\"Check if the sum of all numbers in the target row of the matrix is equal to the product of all numbers in the other rows.\"\"\"\n    target_sum = sum(matrix[target_row])\n    product = 1\n    for i, row in enumerate(matrix):\n        if i != target_row:\n            for num in row:\n                product *= num\n    return target_sum == product",
        "solution_func": "def g(target_row=2):\n    matrix = [[i for i in range(1, target_row + 2)] for _ in range(target_row + 1)]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose sum is equal to the target.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    return dp[n][target]\ndef g(target=5):\n    return [i for i in range(1, target + 1)]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 10,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose sum is equal to the target.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    return dp[n][target]",
        "solution_func": "def g(target=5):\n    return [i for i in range(1, target + 1)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, k=3) -> bool:\n    \"\"\"Check if a string contains exactly k occurrences of a specific character.\"\"\"\n    return string.count('a') == k\ndef g(k=3):\n    return 'a' * k\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 10,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, k=3) -> bool:\n    \"\"\"Check if a string contains exactly k occurrences of a specific character.\"\"\"\n    return string.count('a') == k",
        "solution_func": "def g(k=3):\n    return 'a' * k",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst=[3, 6, 9, 12, 15]) -> bool:\n    \"\"\"Check if a number is divisible by all elements in a list.\"\"\"\n    return all(n % x == 0 for x in lst)\ndef g(lst=[3, 6, 9, 12, 15]):\n    return max(lst)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 10,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[3, 6, 9, 12, 15]) -> bool:\n    \"\"\"Check if a number is divisible by all elements in a list.\"\"\"\n    return all(n % x == 0 for x in lst)",
        "solution_func": "def g(lst=[3, 6, 9, 12, 15]):\n    return max(lst)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if a number is a multiple of any element in a list.\"\"\"\n    return any(n % x == 0 for x in lst)\ndef g(lst=[2, 4, 6, 8, 10]):\n    return min(lst)\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 10,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if a number is a multiple of any element in a list.\"\"\"\n    return any(n % x == 0 for x in lst)",
        "solution_func": "def g(lst=[2, 4, 6, 8, 10]):\n    return min(lst)",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=3) -> bool:\n    \"\"\"Check if the sum of the list elements is greater than a given number\"\"\"\n    return sum(x) > n\ndef g(n=3):\n    return [i**2 for i in range(n+1)]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 10,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=3) -> bool:\n    \"\"\"Check if the sum of the list elements is greater than a given number\"\"\"\n    return sum(x) > n",
        "solution_func": "def g(n=3):\n    return [i**2 for i in range(n+1)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=10) -> bool:\n    \"\"\"Check if any number in the list is divisible by a given number\"\"\"\n    return any(num % n == 0 for num in x)\ndef g(n=10):\n    return [i for i in range(1, n+1)]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 10,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=10) -> bool:\n    \"\"\"Check if any number in the list is divisible by a given number\"\"\"\n    return any(num % n == 0 for num in x)",
        "solution_func": "def g(n=10):\n    return [i for i in range(1, n+1)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: List[int], n=-100) -> bool:\n    \"\"\"Check if the product of the list elements is less than a given number\"\"\"\n    product = 1\n    for num in x:\n        product *= num\n    return product < n\ndef g(n=-100):\n    return [i for i in range(1, abs(n)+1)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 10,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=-100) -> bool:\n    \"\"\"Check if the product of the list elements is less than a given number\"\"\"\n    product = 1\n    for num in x:\n        product *= num\n    return product < n",
        "solution_func": "def g(n=-100):\n    return [i for i in range(1, abs(n)+1)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: int, a=100, b=200) -> bool:\n    \"\"\"Check if a number is divisible by another number within a specific range.\"\"\"\n    return all(x % i == 0 for i in range(a, b+1))\ndef g(a=100, b=200):\n    return a * b\nassert f(g())\n",
        "emb": null,
        "idx_generation": 10,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=100, b=200) -> bool:\n    \"\"\"Check if a number is divisible by another number within a specific range.\"\"\"\n    return all(x % i == 0 for i in range(a, b+1))",
        "solution_func": "def g(a=100, b=200):\n    return a * b",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose sum is equal to the target value.\"\"\"\n    return any(target - x in arr for x in arr)\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 11,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose sum is equal to the target value.\"\"\"\n    return any(target - x in arr for x in arr)",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s1: str, s2: str, s3: str) -> bool:\n    \"\"\"Check if a string is a valid shuffle of two other strings.\"\"\"\n    if len(s1) + len(s2) != len(s3):\n        return False\n    i, j, k = 0, 0, 0\n    while k < len(s3):\n        if i < len(s1) and s1[i] == s3[k]:\n            i += 1\n        elif j < len(s2) and s2[j] == s3[k]:\n            j += 1\n        else:\n            return False\n        k += 1\n    return True\ndef g(s1='abc', s2='def', s3='adbecf'):\n    return s3\nassert f(g())\n",
        "emb": null,
        "idx_generation": 11,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s1: str, s2: str, s3: str) -> bool:\n    \"\"\"Check if a string is a valid shuffle of two other strings.\"\"\"\n    if len(s1) + len(s2) != len(s3):\n        return False\n    i, j, k = 0, 0, 0\n    while k < len(s3):\n        if i < len(s1) and s1[i] == s3[k]:\n            i += 1\n        elif j < len(s2) and s2[j] == s3[k]:\n            j += 1\n        else:\n            return False\n        k += 1\n    return True",
        "solution_func": "def g(s1='abc', s2='def', s3='adbecf'):\n    return s3",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, k: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if there exist k numbers in the list whose sum is equal to the given number n.\"\"\"\n    if k == 0 and n != 0:\n        return False\n    if n == 0 and k != 0:\n        return False\n    if k == 1:\n        return n in nums\n    for i in range(len(nums)):\n        if f(n - nums[i], k - 1, nums[i+1:]):\n            return True\n    return False\ndef g(n=15, k=3):\n    return n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 11,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, k: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if there exist k numbers in the list whose sum is equal to the given number n.\"\"\"\n    if k == 0 and n != 0:\n        return False\n    if n == 0 and k != 0:\n        return False\n    if k == 1:\n        return n in nums\n    for i in range(len(nums)):\n        if f(n - nums[i], k - 1, nums[i+1:]):\n            return True\n    return False",
        "solution_func": "def g(n=15, k=3):\n    return n",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=15) -> bool:\n    \"\"\"Find two numbers in the given list whose sum is equal to the target.\"\"\"\n    return any(arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i + 1, len(arr)))\ndef g(target=15):\n    return [5, 10]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 11,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=15) -> bool:\n    \"\"\"Find two numbers in the given list whose sum is equal to the target.\"\"\"\n    return any(arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i + 1, len(arr)))",
        "solution_func": "def g(target=15):\n    return [5, 10]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_length=5) -> bool:\n    \"\"\"Find a word in the list of words whose length is equal to the target_length.\"\"\"\n    return any(len(word) == target_length for word in words)\ndef g(target_length=5):\n    return [\"apple\", \"orange\", \"banana\", \"grape\"]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 11,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], target_length=5) -> bool:\n    \"\"\"Find a word in the list of words whose length is equal to the target_length.\"\"\"\n    return any(len(word) == target_length for word in words)",
        "solution_func": "def g(target_length=5):\n    return [\"apple\", \"orange\", \"banana\", \"grape\"]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=15) -> bool:\n    \"\"\"Find a row or column in the matrix whose sum is equal to the target_sum.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        row_sum = sum(matrix[i])\n        if row_sum == target_sum:\n            return True\n    for j in range(cols):\n        col_sum = sum(matrix[i][j] for i in range(rows))\n        if col_sum == target_sum:\n            return True\n    return False\ndef g(target_sum=15):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 11,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_sum=15) -> bool:\n    \"\"\"Find a row or column in the matrix whose sum is equal to the target_sum.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        row_sum = sum(matrix[i])\n        if row_sum == target_sum:\n            return True\n    for j in range(cols):\n        col_sum = sum(matrix[i][j] for i in range(rows))\n        if col_sum == target_sum:\n            return True\n    return False",
        "solution_func": "def g(target_sum=15):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], n=3, target=15) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2])\ndef g(n=3, target=15):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix\n    assert False, f\"No magic square found for n={n}\"\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 11,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], n=3, target=15) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2])",
        "solution_func": "def g(n=3, target=15):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(grid: List[List[int]], target=16) -> bool:\n    \"\"\"Determine if a given grid can be solved by filling in the missing numbers.\n    The grid is solved if the sum of each row, column, and diagonal is equal to the target value.\"\"\"\n    n = len(grid)\n    missing_nums = [x for row in grid for x in row if x == 0]\n    for perm in permutations(missing_nums):\n        k = 0\n        grid_copy = [row[:] for row in grid]\n        for i in range(n):\n            for j in range(n):\n                if grid_copy[i][j] == 0:\n                    grid_copy[i][j] = perm[k]\n                    k += 1\n        rows = [sum(row) for row in grid_copy]\n        cols = [sum(col) for col in zip(*grid_copy)]\n        diag1 = sum(grid_copy[i][i] for i in range(n))\n        diag2 = sum(grid_copy[i][n-i-1] for i in range(n))\n        if all(sum_val == target for sum_val in rows + cols + [diag1, diag2]):\n            return True\n    return False\ndef g(grid: List[List[int]], target=16):\n    return grid\nassert f(g([[2, 7, 6], [9, 5, 1], [4, 3, 8]]))\n",
        "emb": null,
        "idx_generation": 11,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(grid: List[List[int]], target=16) -> bool:\n    \"\"\"Determine if a given grid can be solved by filling in the missing numbers.\n    The grid is solved if the sum of each row, column, and diagonal is equal to the target value.\"\"\"\n    n = len(grid)\n    missing_nums = [x for row in grid for x in row if x == 0]\n    for perm in permutations(missing_nums):\n        k = 0\n        grid_copy = [row[:] for row in grid]\n        for i in range(n):\n            for j in range(n):\n                if grid_copy[i][j] == 0:\n                    grid_copy[i][j] = perm[k]\n                    k += 1\n        rows = [sum(row) for row in grid_copy]\n        cols = [sum(col) for col in zip(*grid_copy)]\n        diag1 = sum(grid_copy[i][i] for i in range(n))\n        diag2 = sum(grid_copy[i][n-i-1] for i in range(n))\n        if all(sum_val == target for sum_val in rows + cols + [diag1, diag2]):\n            return True\n    return False",
        "solution_func": "def g(grid: List[List[int]], target=16):\n    return grid",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if a given word can be formed by concatenating two words from a list.\"\"\"\n    for i in range(1, len(word)):\n        if word[:i] in words and word[i:] in words:\n            return True\n    return False\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return words[1] + words[2]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 11,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(word: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if a given word can be formed by concatenating two words from a list.\"\"\"\n    for i in range(1, len(word)):\n        if word[:i] in words and word[i:] in words:\n            return True\n    return False",
        "solution_func": "def g(words=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return words[1] + words[2]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=16) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list whose sum is equal to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[2, 4, 6, 8, 10, 12, 14, 16]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 11,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=16) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list whose sum is equal to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(nums=[2, 4, 6, 8, 10, 12, 14, 16]):\n    return nums",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=21) -> bool:\n    \"\"\"Find two numbers from the list that add up to the target\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums=[3, 5, 8, 13, 2, 10]):\n    return nums\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 12,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=21) -> bool:\n    \"\"\"Find two numbers from the list that add up to the target\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(nums=[3, 5, 8, 13, 2, 10]):\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Find a pair of numbers from the matrix that add up to the target\"\"\"\n    return any((matrix[i][j] + matrix[k][l] == target) for i in range(len(matrix)) for j in range(len(matrix[i])) for k in range(len(matrix)) for l in range(len(matrix[k])) if (i != k) or (j != l))\ndef g(matrix=[[1, 6, 3], [2, 8, 5], [4, 7, 9]]):\n    return matrix\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 12,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Find a pair of numbers from the matrix that add up to the target\"\"\"\n    return any((matrix[i][j] + matrix[k][l] == target) for i in range(len(matrix)) for j in range(len(matrix[i])) for k in range(len(matrix)) for l in range(len(matrix[k])) if (i != k) or (j != l))",
        "solution_func": "def g(matrix=[[1, 6, 3], [2, 8, 5], [4, 7, 9]]):\n    return matrix",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(chars: List[str], target='hello') -> bool:\n    \"\"\"Find the indices of the characters in the list to spell out the target word\"\"\"\n    return ''.join((chars[i] for i in range(len(chars)))) == target\ndef g(chars=['h', 'e', 'l', 'l', 'o']):\n    return chars\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 12,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(chars: List[str], target='hello') -> bool:\n    \"\"\"Find the indices of the characters in the list to spell out the target word\"\"\"\n    return ''.join((chars[i] for i in range(len(chars)))) == target",
        "solution_func": "def g(chars=['h', 'e', 'l', 'l', 'o']):\n    return chars",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[11, 23, 35, 47, 59, 71, 83, 95, 107, 119], target_sum=330) -> bool:\n    \"\"\"Find if there exists a combination of numbers from the list that adds up to the target sum\"\"\"\n    def subset_sum(nums, n, target_sum):\n        if target_sum == 0:\n            return True\n        if n == 0 and target_sum != 0:\n            return False\n        if nums[n-1] > target_sum:\n            return subset_sum(nums, n-1, target_sum)\n        return subset_sum(nums, n-1, target_sum) or subset_sum(nums, n-1, target_sum-nums[n-1])\n    return subset_sum(nums, len(nums), target_sum)\ndef g(nums=[11, 23, 35, 47, 59, 71, 83, 95, 107, 119], target_sum=330):\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums)))\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 12,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[11, 23, 35, 47, 59, 71, 83, 95, 107, 119], target_sum=330) -> bool:\n    \"\"\"Find if there exists a combination of numbers from the list that adds up to the target sum\"\"\"\n    def subset_sum(nums, n, target_sum):\n        if target_sum == 0:\n            return True\n        if n == 0 and target_sum != 0:\n            return False\n        if nums[n-1] > target_sum:\n            return subset_sum(nums, n-1, target_sum)\n        return subset_sum(nums, n-1, target_sum) or subset_sum(nums, n-1, target_sum-nums[n-1])\n    return subset_sum(nums, len(nums), target_sum)",
        "solution_func": "def g(nums=[11, 23, 35, 47, 59, 71, 83, 95, 107, 119], target_sum=330):\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums)))",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, nums=[3, 5, 7, 11, 13, 17, 19, 23, 29, 31]) -> bool:\n    \"\"\"Check if all the characters in the string are prime numbers\"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return all(is_prime(ord(c)) for c in s)\ndef g(nums=[3, 5, 7, 11, 13, 17, 19, 23, 29, 31]):\n    return ''.join(chr(n) for n in nums)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 12,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, nums=[3, 5, 7, 11, 13, 17, 19, 23, 29, 31]) -> bool:\n    \"\"\"Check if all the characters in the string are prime numbers\"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return all(is_prime(ord(c)) for c in s)",
        "solution_func": "def g(nums=[3, 5, 7, 11, 13, 17, 19, 23, 29, 31]):\n    return ''.join(chr(n) for n in nums)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"Check if there exists a row in the matrix where the sum of its elements is equal to the target sum\"\"\"\n    return any(sum(row) == target_sum for row in matrix)\ndef g(target_sum=100):\n    return [[target_sum - i - j for i in range(5)] for j in range(5)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 12,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"Check if there exists a row in the matrix where the sum of its elements is equal to the target sum\"\"\"\n    return any(sum(row) == target_sum for row in matrix)",
        "solution_func": "def g(target_sum=100):\n    return [[target_sum - i - j for i in range(5)] for j in range(5)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target number, find any two numbers from the list that add up to the target.\nSample Input:\n[2, 4, 6, 8]\nSample Output:\n[2, 8]\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [2, 8]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 12,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target number, find any two numbers from the list that add up to the target.\nSample Input:\n[2, 4, 6, 8]\nSample Output:\n[2, 8]\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [2, 8]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Given a list of integers and a target number, find any three numbers from the list that multiply to the target.\nSample Input:\n[2, 4, 5, 10]\nSample Output:\n[2, 4, 5]\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] * nums[j] * nums[k] == target:\n                    return True\n    return False\n\ndef g(target=20):\n    return [2, 4, 5]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 12,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Given a list of integers and a target number, find any three numbers from the list that multiply to the target.\nSample Input:\n[2, 4, 5, 10]\nSample Output:\n[2, 4, 5]\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] * nums[j] * nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=20):\n    return [2, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Given a list of integers and a target number, find any four numbers from the list that subtract to the target.\nSample Input:\n[50, 30, 20, 10, 5]\nSample Output:\n[50, 30, 10, 5]\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                for l in range(k + 1, len(nums)):\n                    if nums[i] - nums[j] - nums[k] - nums[l] == target:\n                        return True\n    return False\n\ndef g(target=100):\n    return [50, 30, 10, 5]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 12,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Given a list of integers and a target number, find any four numbers from the list that subtract to the target.\nSample Input:\n[50, 30, 20, 10, 5]\nSample Output:\n[50, 30, 10, 5]\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                for l in range(k + 1, len(nums)):\n                    if nums[i] - nums[j] - nums[k] - nums[l] == target:\n                        return True\n    return False",
        "solution_func": "def g(target=100):\n    return [50, 30, 10, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, year_len=365, num_trials=1000) -> bool:\n    \"\"\"Find n such that the probability of at least two people having the same birthday in a group of n reaches a certain threshold.\"\"\"\n    import random\n    random.seed(0)\n    success_count = 0\n    for _ in range(num_trials):\n        birthdays = [random.randrange(year_len) for _ in range(n)]\n        if len(set(birthdays)) < n:\n            success_count += 1\n    prob = success_count / num_trials\n    return prob >= 0.8\ndef g(year_len=365):\n    n = 1\n    distinct_prob = 1.0\n    while distinct_prob >= 0.8:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n    return n - 1\nassert f(g())\n",
        "emb": null,
        "idx_generation": 12,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(n: int, year_len=365, num_trials=1000) -> bool:\n    \"\"\"Find n such that the probability of at least two people having the same birthday in a group of n reaches a certain threshold.\"\"\"\n    import random\n    random.seed(0)\n    success_count = 0\n    for _ in range(num_trials):\n        birthdays = [random.randrange(year_len) for _ in range(n)]\n        if len(set(birthdays)) < n:\n            success_count += 1\n    prob = success_count / num_trials\n    return prob >= 0.8",
        "solution_func": "def g(year_len=365):\n    n = 1\n    distinct_prob = 1.0\n    while distinct_prob >= 0.8:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n    return n - 1",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=6, n=6) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=6, n=6):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 13,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=6, n=6) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]",
        "solution_func": "def g(m=6, n=6):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 13,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]",
        "solution_func": "def g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])",
        "map_ix": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=7, n=7) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=7, n=7):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 13,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=7, n=7) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]",
        "solution_func": "def g(m=7, n=7):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers that sum up to the target value.\"\"\"\n    return any(((x + y) == target for x in numbers for y in numbers if x != y))\ndef g(target=100):\n    return [50, 60]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 13,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers that sum up to the target value.\"\"\"\n    return any(((x + y) == target for x in numbers for y in numbers if x != y))",
        "solution_func": "def g(target=100):\n    return [50, 60]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str], letter='a') -> bool:\n    \"\"\"Check if all words in the list contain a specific letter.\"\"\"\n    return all((letter in word for word in words))\ndef g(letter='a'):\n    return ['apple', 'banana', 'cherry']\nassert f(g())\n",
        "emb": null,
        "idx_generation": 13,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], letter='a') -> bool:\n    \"\"\"Check if all words in the list contain a specific letter.\"\"\"\n    return all((letter in word for word in words))",
        "solution_func": "def g(letter='a'):\n    return ['apple', 'banana', 'cherry']",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers that multiply to the target value.\"\"\"\n    return any(((x * y) == target for x in numbers for y in numbers if x != y))\ndef g(target=100):\n    return [10, 20]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 13,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers that multiply to the target value.\"\"\"\n    return any(((x * y) == target for x in numbers for y in numbers if x != y))",
        "solution_func": "def g(target=100):\n    return [10, 20]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_word='python') -> bool:\n    \"\"\"Check if it is possible to form the target_word using the given list of words.\n    A word can be formed by concatenating multiple words from the given list.\n    - words: list of words\n    - target_word: word to be formed\"\"\"\n    def is_word_formed(word):\n        if word == '':\n            return True\n        for i in range(1, len(word) + 1):\n            if word[:i] in words and is_word_formed(word[i:]):\n                return True\n        return False\n    return is_word_formed(target_word)\ndef g(words=['py', 'th', 'on']):\n    return words[::-1]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 13,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], target_word='python') -> bool:\n    \"\"\"Check if it is possible to form the target_word using the given list of words.\n    A word can be formed by concatenating multiple words from the given list.\n    - words: list of words\n    - target_word: word to be formed\"\"\"\n    def is_word_formed(word):\n        if word == '':\n            return True\n        for i in range(1, len(word) + 1):\n            if word[:i] in words and is_word_formed(word[i:]):\n                return True\n        return False\n    return is_word_formed(target_word)",
        "solution_func": "def g(words=['py', 'th', 'on']):\n    return words[::-1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Check if it is possible to find two numbers in the list whose sum is equal to the target number.\n    - numbers: list of integers\n    - target: target sum\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\ndef g():\n    return [-2, 3, 1, 5, -1]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 13,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Check if it is possible to find two numbers in the list whose sum is equal to the target number.\n    - numbers: list of integers\n    - target: target sum\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False",
        "solution_func": "def g():\n    return [-2, 3, 1, 5, -1]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to find three numbers in the list whose product is equal to the target number.\n    - numbers: list of integers\n    - target: target product\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            for k in range(j + 1, len(numbers)):\n                if numbers[i] * numbers[j] * numbers[k] == target:\n                    return True\n    return False\ndef g():\n    return [2, 5, -10, 4, -1, 20]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 13,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to find three numbers in the list whose product is equal to the target number.\n    - numbers: list of integers\n    - target: target product\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            for k in range(j + 1, len(numbers)):\n                if numbers[i] * numbers[j] * numbers[k] == target:\n                    return True\n    return False",
        "solution_func": "def g():\n    return [2, 5, -10, 4, -1, 20]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, max_val=100) -> bool:\n    \"\"\"Check if there exists a list of n integers such that the maximum value is equal to max_val.\"\"\"\n    import random\n    random.seed(0)\n    arr = [random.randint(1, max_val) for _ in range(n)]\n    return max(arr) == max_val\ndef g(max_val=100):\n    return max_val\nassert f(g())\n",
        "emb": null,
        "idx_generation": 13,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(n: int, max_val=100) -> bool:\n    \"\"\"Check if there exists a list of n integers such that the maximum value is equal to max_val.\"\"\"\n    import random\n    random.seed(0)\n    arr = [random.randint(1, max_val) for _ in range(n)]\n    return max(arr) == max_val",
        "solution_func": "def g(max_val=100):\n    return max_val",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=6, lower=-1000, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is greater than or equal to the lower threshold\"\"\"\n    total = sum(seq[start:start+k])\n    return total >= lower\ndef g(k=6, lower=-1000, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    max_sum = float('-inf')\n    max_start = None\n    for i in range(len(seq)-k+1):\n        curr_sum = sum(seq[i:i+k])\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_start = i\n    return max_start\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 14,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(start: int, k=6, lower=-1000, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is greater than or equal to the lower threshold\"\"\"\n    total = sum(seq[start:start+k])\n    return total >= lower",
        "solution_func": "def g(k=6, lower=-1000, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    max_sum = float('-inf')\n    max_start = None\n    for i in range(len(seq)-k+1):\n        curr_sum = sum(seq[i:i+k])\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_start = i\n    return max_start",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(start: int, k=5, lower=0, seq=[-1, 2, -3, 4, -5, 6, -7, 8, -9, 10]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum of absolute values is less than the lower threshold\"\"\"\n    total = sum(abs(num) for num in seq[start:start+k])\n    return total < lower\ndef g(k=5, lower=0, seq=[-1, 2, -3, 4, -5, 6, -7, 8, -9, 10]):\n    min_sum = float('inf')\n    min_start = None\n    for i in range(len(seq)-k+1):\n        curr_sum = sum(abs(seq[j]) for j in range(i, i+k))\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n            min_start = i\n    return min_start\nassert f(g())\n",
        "emb": null,
        "idx_generation": 14,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(start: int, k=5, lower=0, seq=[-1, 2, -3, 4, -5, 6, -7, 8, -9, 10]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum of absolute values is less than the lower threshold\"\"\"\n    total = sum(abs(num) for num in seq[start:start+k])\n    return total < lower",
        "solution_func": "def g(k=5, lower=0, seq=[-1, 2, -3, 4, -5, 6, -7, 8, -9, 10]):\n    min_sum = float('inf')\n    min_start = None\n    for i in range(len(seq)-k+1):\n        curr_sum = sum(abs(seq[j]) for j in range(i, i+k))\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n            min_start = i\n    return min_start",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=4, lower=-100, seq=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose average is greater than or equal to the lower threshold\"\"\"\n    avg = sum(seq[start:start+k]) / k\n    return avg >= lower\ndef g(k=4, lower=-100, seq=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]):\n    max_avg = float('-inf')\n    max_start = None\n    for i in range(len(seq)-k+1):\n        curr_avg = sum(seq[i:i+k]) / k\n        if curr_avg > max_avg:\n            max_avg = curr_avg\n            max_start = i\n    return max_start\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 14,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(start: int, k=4, lower=-100, seq=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose average is greater than or equal to the lower threshold\"\"\"\n    avg = sum(seq[start:start+k]) / k\n    return avg >= lower",
        "solution_func": "def g(k=4, lower=-100, seq=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]):\n    max_avg = float('-inf')\n    max_start = None\n    for i in range(len(seq)-k+1):\n        curr_avg = sum(seq[i:i+k]) / k\n        if curr_avg > max_avg:\n            max_avg = curr_avg\n            max_start = i\n    return max_start",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=8, n=8) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=8, n=8):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 14,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=8, n=8) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]",
        "solution_func": "def g(m=8, n=8):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])",
        "map_ix": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=6, n=6) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=6, n=6):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 14,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=6, n=6) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]",
        "solution_func": "def g(m=6, n=6):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])",
        "map_ix": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=7, n=7) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=7, n=7):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 14,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=7, n=7) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]",
        "solution_func": "def g(m=7, n=7):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])",
        "map_ix": [
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(grid: List[List[int]]) -> bool:\n    \"\"\"Check if a given Sudoku grid is a valid solution.\"\"\"\n\n    def is_valid_row(grid, row):\n        nums = set()\n        for num in grid[row]:\n            if num in nums:\n                return False\n            if num != 0:\n                nums.add(num)\n        return True\n\n    def is_valid_col(grid, col):\n        nums = set()\n        for row in range(9):\n            num = grid[row][col]\n            if num in nums:\n                return False\n            if num != 0:\n                nums.add(num)\n        return True\n\n    def is_valid_box(grid, start_row, start_col):\n        nums = set()\n        for row in range(3):\n            for col in range(3):\n                num = grid[start_row + row][start_col + col]\n                if num in nums:\n                    return False\n                if num != 0:\n                    nums.add(num)\n        return True\n\n    for row in range(9):\n        if not is_valid_row(grid, row):\n            return False\n\n    for col in range(9):\n        if not is_valid_col(grid, col):\n            return False\n\n    for row in range(0, 9, 3):\n        for col in range(0, 9, 3):\n            if not is_valid_box(grid, row, col):\n                return False\n\n    return True\n\ndef g():\n    \"\"\"\n    Generate a valid Sudoku grid.\n    \"\"\"\n    import random\n    grid = [[0] * 9 for _ in range(9)]\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for row in range(9):\n        random.shuffle(nums)\n        for col in range(9):\n            grid[row][col] = nums[col]\n    return grid\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 14,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(grid: List[List[int]]) -> bool:\n    \"\"\"Check if a given Sudoku grid is a valid solution.\"\"\"\n\n    def is_valid_row(grid, row):\n        nums = set()\n        for num in grid[row]:\n            if num in nums:\n                return False\n            if num != 0:\n                nums.add(num)\n        return True\n\n    def is_valid_col(grid, col):\n        nums = set()\n        for row in range(9):\n            num = grid[row][col]\n            if num in nums:\n                return False\n            if num != 0:\n                nums.add(num)\n        return True\n\n    def is_valid_box(grid, start_row, start_col):\n        nums = set()\n        for row in range(3):\n            for col in range(3):\n                num = grid[start_row + row][start_col + col]\n                if num in nums:\n                    return False\n                if num != 0:\n                    nums.add(num)\n        return True\n\n    for row in range(9):\n        if not is_valid_row(grid, row):\n            return False\n\n    for col in range(9):\n        if not is_valid_col(grid, col):\n            return False\n\n    for row in range(0, 9, 3):\n        for col in range(0, 9, 3):\n            if not is_valid_box(grid, row, col):\n                return False\n\n    return True",
        "solution_func": "def g():\n    \"\"\"\n    Generate a valid Sudoku grid.\n    \"\"\"\n    import random\n    grid = [[0] * 9 for _ in range(9)]\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for row in range(9):\n        random.shuffle(nums)\n        for col in range(9):\n            grid[row][col] = nums[col]\n    return grid",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a given number is a prime number.\"\"\"\n\n    if n < 2:\n        return False\n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n\n    return True\n\ndef g():\n    \"\"\"\n    Generate a random prime number.\n    \"\"\"\n    import random\n    while True:\n        num = random.randint(2, 100)\n        if f(num):\n            return num\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 14,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a given number is a prime number.\"\"\"\n\n    if n < 2:\n        return False\n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n\n    return True",
        "solution_func": "def g():\n    \"\"\"\n    Generate a random prime number.\n    \"\"\"\n    import random\n    while True:\n        num = random.randint(2, 100)\n        if f(num):\n            return num",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value.\"\"\"\n\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n\n    return False\n\ndef g():\n    \"\"\"\n    Generate a list of random integers and a target value.\n    \"\"\"\n    import random\n    nums = random.sample(range(1, 101), 10)\n    target = random.randint(1, 100)\n    return nums, target\n\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 14,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value.\"\"\"\n\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n\n    return False",
        "solution_func": "def g():\n    \"\"\"\n    Generate a list of random integers and a target value.\n    \"\"\"\n    import random\n    nums = random.sample(range(1, 101), 10)\n    target = random.randint(1, 100)\n    return nums, target",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=7, threshold=10) -> bool:\n    \"\"\"Find a sublist of `nums` whose sum is equal to `target` and the sum is greater than `threshold`.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            sublist = nums[i:j+1]\n            if sum(sublist) == target and sum(sublist) > threshold:\n                return True\n    return False\n\ndef g(target=7, threshold=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 14,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=7, threshold=10) -> bool:\n    \"\"\"Find a sublist of `nums` whose sum is equal to `target` and the sum is greater than `threshold`.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            sublist = nums[i:j+1]\n            if sum(sublist) == target and sum(sublist) > threshold:\n                return True\n    return False",
        "solution_func": "def g(target=7, threshold=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, string='abababababababab') -> bool:\n    \"\"\"Find the number of occurrences of 'ab' in the given string.\"\"\"\n    return n == string.count('ab')\ndef g(string='abababababababab'):\n    return string.count('ab')\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 15,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, string='abababababababab') -> bool:\n    \"\"\"Find the number of occurrences of 'ab' in the given string.\"\"\"\n    return n == string.count('ab')",
        "solution_func": "def g(string='abababababababab'):\n    return string.count('ab')",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Find the sum of all elements in the given list that are divisible by n.\"\"\"\n    return n == sum(x for x in lst if x % n == 0)\ndef g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return sum(x for x in lst if x % 3 == 0)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 15,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Find the sum of all elements in the given list that are divisible by n.\"\"\"\n    return n == sum(x for x in lst if x % n == 0)",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return sum(x for x in lst if x % 3 == 0)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Find the number of substrings of length n that start with a vowel in the given string.\"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return n == sum(1 for i in range(len(s) - n + 1) if s[i] in vowels)\ndef g(s='appleorangebanana'):\n    return sum(1 for i in range(len(s) - 2) if s[i] in {'a', 'e', 'i', 'o', 'u'})\nassert f(g())\n",
        "emb": null,
        "idx_generation": 15,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Find the number of substrings of length n that start with a vowel in the given string.\"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return n == sum(1 for i in range(len(s) - n + 1) if s[i] in vowels)",
        "solution_func": "def g(s='appleorangebanana'):\n    return sum(1 for i in range(len(s) - 2) if s[i] in {'a', 'e', 'i', 'o', 'u'})",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=5, b=10) -> bool:\n    \"\"\"Check if the sum of x, a, and b is divisible by x\"\"\"\n    return (x + a + b) % x == 0\n\ndef g(a=5, b=10):\n    return a + b\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 15,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=5, b=10) -> bool:\n    \"\"\"Check if the sum of x, a, and b is divisible by x\"\"\"\n    return (x + a + b) % x == 0",
        "solution_func": "def g(a=5, b=10):\n    return a + b",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if the product of all elements in lst is equal to the target\"\"\"\n    product = 1\n    for num in lst:\n        product *= num\n    return product == target\n\ndef g(target=100):\n    return [10, 5, 2]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 15,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if the product of all elements in lst is equal to the target\"\"\"\n    product = 1\n    for num in lst:\n        product *= num\n    return product == target",
        "solution_func": "def g(target=100):\n    return [10, 5, 2]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, substrings=['hello', 'world', 'python', 'programming']) -> bool:\n    \"\"\"Check if all substrings are present in s in both lowercase and uppercase\"\"\"\n    for sub in substrings:\n        if sub.lower() not in s or sub.upper() not in s:\n            return False\n    return True\n\ndef g(substrings=['hello', 'world', 'python', 'programming']):\n    return 'Hello World! Python Programming!'\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 15,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substrings=['hello', 'world', 'python', 'programming']) -> bool:\n    \"\"\"Check if all substrings are present in s in both lowercase and uppercase\"\"\"\n    for sub in substrings:\n        if sub.lower() not in s or sub.upper() not in s:\n            return False\n    return True",
        "solution_func": "def g(substrings=['hello', 'world', 'python', 'programming']):\n    return 'Hello World! Python Programming!'",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\n    - s: string to check for palindrome\"\"\"\n\n    def is_palindrome(s):\n        return s == s[::-1]\n\n    def has_digit(s):\n        return any(char.isdigit() for char in s)\n\n    def has_special_char(s):\n        special_chars = \"!@#$%^&*()_+-=[]{}|\\\\;':\\\",./<>?\"\n        return any(char in special_chars for char in s)\n\n    def is_valid_length(s):\n        return len(s) >= 5\n\n    return (is_palindrome(s) and\n            has_digit(s) and\n            has_special_char(s) and\n            is_valid_length(s))\n\ndef g():\n    return \"madam123!madam\"\nassert f(g())\n",
        "emb": null,
        "idx_generation": 15,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\n    - s: string to check for palindrome\"\"\"\n\n    def is_palindrome(s):\n        return s == s[::-1]\n\n    def has_digit(s):\n        return any(char.isdigit() for char in s)\n\n    def has_special_char(s):\n        special_chars = \"!@#$%^&*()_+-=[]{}|\\\\;':\\\",./<>?\"\n        return any(char in special_chars for char in s)\n\n    def is_valid_length(s):\n        return len(s) >= 5\n\n    return (is_palindrome(s) and\n            has_digit(s) and\n            has_special_char(s) and\n            is_valid_length(s))",
        "solution_func": "def g():\n    return \"madam123!madam\"",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a prime number.\n    - n: number to check for primality\"\"\"\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def has_digit(n):\n        return any(char.isdigit() for char in str(n))\n\n    def is_even(n):\n        return n % 2 == 0\n\n    def is_valid_range(n):\n        return n >= 2 and n <= 1000\n\n    return (is_prime(n) and\n            has_digit(n) and\n            not is_even(n) and\n            is_valid_range(n))\n\ndef g():\n    return 17\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 15,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a prime number.\n    - n: number to check for primality\"\"\"\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def has_digit(n):\n        return any(char.isdigit() for char in str(n))\n\n    def is_even(n):\n        return n % 2 == 0\n\n    def is_valid_range(n):\n        return n >= 2 and n <= 1000\n\n    return (is_prime(n) and\n            has_digit(n) and\n            not is_even(n) and\n            is_valid_range(n))",
        "solution_func": "def g():\n    return 17",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list contains only positive integers and their sum is a multiple of 10.\n    - arr: list of integers to check\"\"\"\n\n    def all_positive_integers(arr):\n        return all(num > 0 for num in arr)\n\n    def sum_multiple_of_10(arr):\n        return sum(arr) % 10 == 0\n\n    def has_odd_length(arr):\n        return len(arr) % 2 != 0\n\n    def has_unique_elements(arr):\n        return len(set(arr)) == len(arr)\n\n    return (all_positive_integers(arr) and\n            sum_multiple_of_10(arr) and\n            has_odd_length(arr) and\n            has_unique_elements(arr))\n\ndef g():\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 15,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list contains only positive integers and their sum is a multiple of 10.\n    - arr: list of integers to check\"\"\"\n\n    def all_positive_integers(arr):\n        return all(num > 0 for num in arr)\n\n    def sum_multiple_of_10(arr):\n        return sum(arr) % 10 == 0\n\n    def has_odd_length(arr):\n        return len(arr) % 2 != 0\n\n    def has_unique_elements(arr):\n        return len(set(arr)) == len(arr)\n\n    return (all_positive_integers(arr) and\n            sum_multiple_of_10(arr) and\n            has_odd_length(arr) and\n            has_unique_elements(arr))",
        "solution_func": "def g():\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if a given matrix is a magic square of size n x n.\"\"\"\n    target_sum = n * (n ** 2 + 1) // 2\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    for j in range(n):\n        if sum(matrix[i][j] for i in range(n)) != target_sum:\n            return False\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(matrix[i][n-i-1] for i in range(n)) != target_sum:\n        return False\n    return True\n\ndef g(n=3):\n    import random\n    numbers = list(range(1, n ** 2 + 1))\n    random.shuffle(numbers)\n    matrix = [[numbers[i * n + j] for j in range(n)] for i in range(n)]\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 15,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if a given matrix is a magic square of size n x n.\"\"\"\n    target_sum = n * (n ** 2 + 1) // 2\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    for j in range(n):\n        if sum(matrix[i][j] for i in range(n)) != target_sum:\n            return False\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(matrix[i][n-i-1] for i in range(n)) != target_sum:\n        return False\n    return True",
        "solution_func": "def g(n=3):\n    import random\n    numbers = list(range(1, n ** 2 + 1))\n    random.shuffle(numbers)\n    matrix = [[numbers[i * n + j] for j in range(n)] for i in range(n)]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import *\ndef f(s: str, target='a') -> bool:\n    \"\"\"Check if the target character is present in the string\"\"\"\n    return target in s\n\ndef g(s='Hello World!', target='a'):\n    return s\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 16,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import *\ndef f(s: str, target='a') -> bool:\n    \"\"\"Check if the target character is present in the string\"\"\"\n    return target in s",
        "solution_func": "def g(s='Hello World!', target='a'):\n    return s",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if two numbers in the list add up to the target number\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5], target=9):\n    return arr\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 16,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if two numbers in the list add up to the target number\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5], target=9):\n    return arr",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a subset of the given list whose elements add up to the target number\"\"\"\n    def subset_sum(nums, target, n):\n        if target == 0:\n            return True\n        if n == 0:\n            return False\n        if nums[n-1] > target:\n            return subset_sum(nums, target, n-1)\n        return subset_sum(nums, target, n-1) or subset_sum(nums, target-nums[n-1], n-1)\n    return subset_sum(nums, target, len(nums))\n\ndef g(nums=[10, 5, 15, 20], target=20):\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 16,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a subset of the given list whose elements add up to the target number\"\"\"\n    def subset_sum(nums, target, n):\n        if target == 0:\n            return True\n        if n == 0:\n            return False\n        if nums[n-1] > target:\n            return subset_sum(nums, target, n-1)\n        return subset_sum(nums, target, n-1) or subset_sum(nums, target-nums[n-1], n-1)\n    return subset_sum(nums, target, len(nums))",
        "solution_func": "def g(nums=[10, 5, 15, 20], target=20):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=42) -> bool:\n    \"\"\"Given a list of numbers, find a pair of numbers that add up to the target value. Return True if such a pair exists, otherwise return False.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(numbers=[10, 20, 30, 40, 50]):\n    return numbers\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 16,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=42) -> bool:\n    \"\"\"Given a list of numbers, find a pair of numbers that add up to the target value. Return True if such a pair exists, otherwise return False.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False",
        "solution_func": "def g(numbers=[10, 20, 30, 40, 50]):\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is a symmetric matrix. Return True if it is, otherwise return False.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 16,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is a symmetric matrix. Return True if it is, otherwise return False.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True",
        "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list is a sorted list in non-decreasing order. Return True if it is, otherwise return False.\"\"\"\n    for i in range(len(numbers)-1):\n        if numbers[i] > numbers[i+1]:\n            return False\n    return True\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 16,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list is a sorted list in non-decreasing order. Return True if it is, otherwise return False.\"\"\"\n    for i in range(len(numbers)-1):\n        if numbers[i] > numbers[i+1]:\n            return False\n    return True",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0, lower=0) -> bool:\n    \"\"\"Given a list of numbers and a target number, find a pair of numbers whose sum is equal to the target.\n    The pair of numbers must have a sum greater than or equal to the lower bound.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target and nums[i] + nums[j] >= lower:\n                return True\n    return False\n\ndef g(nums: List[int], target=0, lower=0):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target and nums[i] + nums[j] >= lower:\n                return [nums[i], nums[j]]\n    return []\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 16,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0, lower=0) -> bool:\n    \"\"\"Given a list of numbers and a target number, find a pair of numbers whose sum is equal to the target.\n    The pair of numbers must have a sum greater than or equal to the lower bound.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target and nums[i] + nums[j] >= lower:\n                return True\n    return False",
        "solution_func": "def g(nums: List[int], target=0, lower=0):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target and nums[i] + nums[j] >= lower:\n                return [nums[i], nums[j]]\n    return []",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str], target='hello') -> bool:\n    \"\"\"Given a list of words and a target word, find the index of the target word in the list.\n    If the target word is not in the list, return -1.\"\"\"\n    for i, word in enumerate(words):\n        if word == target:\n            return i\n    return -1\n\ndef g(words: List[str], target='hello'):\n    if target in words:\n        return words.index(target)\n    else:\n        return -1\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 16,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], target='hello') -> bool:\n    \"\"\"Given a list of words and a target word, find the index of the target word in the list.\n    If the target word is not in the list, return -1.\"\"\"\n    for i, word in enumerate(words):\n        if word == target:\n            return i\n    return -1",
        "solution_func": "def g(words: List[str], target='hello'):\n    if target in words:\n        return words.index(target)\n    else:\n        return -1",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0, threshold=100) -> bool:\n    \"\"\"Given a list of numbers and a target number, find a pair of numbers whose product is equal to the target.\n    The product of the pair of numbers must be greater than or equal to the threshold.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target and nums[i] * nums[j] >= threshold:\n                return True\n    return False\n\ndef g(nums: List[int], target=0, threshold=100):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target and nums[i] * nums[j] >= threshold:\n                return [nums[i], nums[j]]\n    return []\n\nassert f(g())",
        "emb": null,
        "idx_generation": 16,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0, threshold=100) -> bool:\n    \"\"\"Given a list of numbers and a target number, find a pair of numbers whose product is equal to the target.\n    The product of the pair of numbers must be greater than or equal to the threshold.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target and nums[i] * nums[j] >= threshold:\n                return True\n    return False",
        "solution_func": "def g(nums: List[int], target=0, threshold=100):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target and nums[i] * nums[j] >= threshold:\n                return [nums[i], nums[j]]\n    return []",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(words: List[str], target='programming', max_len=10) -> bool:\n    \"\"\"Given a target word and a list of words, check if the target word can be formed by concatenating two or more words from the list.\n    Each word in the list can be used only once.\"\"\"\n    return target in [''.join(x) for x in itertools.permutations(words, r=2)] and all((len(word) <= max_len for word in words))\ndef g(target='programming', max_len=10):\n    words = ['pro', 'gram', 'ming']\n    return words\nassert f(g())\n",
        "emb": null,
        "idx_generation": 16,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(words: List[str], target='programming', max_len=10) -> bool:\n    \"\"\"Given a target word and a list of words, check if the target word can be formed by concatenating two or more words from the list.\n    Each word in the list can be used only once.\"\"\"\n    return target in [''.join(x) for x in itertools.permutations(words, r=2)] and all((len(word) <= max_len for word in words))",
        "solution_func": "def g(target='programming', max_len=10):\n    words = ['pro', 'gram', 'ming']\n    return words",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=100) -> bool:\n    \"\"\"Determine if the absolute value of x is equal to a\"\"\"\n    return abs(x) == a\ndef g(a=100):\n    return a\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 17,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=100) -> bool:\n    \"\"\"Determine if the absolute value of x is equal to a\"\"\"\n    return abs(x) == a",
        "solution_func": "def g(a=100):\n    return a",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, a=\"racecar\") -> bool:\n    \"\"\"Check if x is a palindrome\"\"\"\n    return x == x[::-1]\ndef g(a=\"racecar\"):\n    return a\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 17,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, a=\"racecar\") -> bool:\n    \"\"\"Check if x is a palindrome\"\"\"\n    return x == x[::-1]",
        "solution_func": "def g(a=\"racecar\"):\n    return a",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=10) -> bool:\n    \"\"\"Determine if x is greater than a\"\"\"\n    return x > a\ndef g(a=10):\n    return a + 1\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 17,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=10) -> bool:\n    \"\"\"Determine if x is greater than a\"\"\"\n    return x > a",
        "solution_func": "def g(a=10):\n    return a + 1",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, word='hello') -> bool:\n    \"\"\"Check if the word is spelled correctly\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(word)):\n        if word[i] in vowels:\n            if s[i] != word[i].upper():\n                return False\n        elif s[i] != word[i]:\n            return False\n    return True\ndef g(word='hello'):\n    return word\nassert f(g())\n",
        "emb": null,
        "idx_generation": 17,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, word='hello') -> bool:\n    \"\"\"Check if the word is spelled correctly\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(word)):\n        if word[i] in vowels:\n            if s[i] != word[i].upper():\n                return False\n        elif s[i] != word[i]:\n            return False\n    return True",
        "solution_func": "def g(word='hello'):\n    return word",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False\ndef g(target=100):\n    return [1, target-1]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 17,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=100):\n    return [1, target-1]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, word='python') -> bool:\n    \"\"\"Check if the word is a palindrome\"\"\"\n    return s == s[::-1]\ndef g(word='python'):\n    return word[::-1]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 17,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, word='python') -> bool:\n    \"\"\"Check if the word is a palindrome\"\"\"\n    return s == s[::-1]",
        "solution_func": "def g(word='python'):\n    return word[::-1]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find four numbers in the list such that their sum is equal to the target.\"\"\"\n    return any(sum(comb) == target for comb in combinations(nums, 4))\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 17,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find four numbers in the list such that their sum is equal to the target.\"\"\"\n    return any(sum(comb) == target for comb in combinations(nums, 4))",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str], n=5) -> bool:\n    \"\"\"Find n words in the list that contain the letter 'z'.\"\"\"\n    return len([word for word in words if 'z' in word]) == n\ndef g(n=5):\n    return ['zebra', 'lion', 'elephant', 'giraffe', 'zealot', 'tiger', 'monkey', 'zeppelin']\nassert f(g())\n",
        "emb": null,
        "idx_generation": 17,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], n=5) -> bool:\n    \"\"\"Find n words in the list that contain the letter 'z'.\"\"\"\n    return len([word for word in words if 'z' in word]) == n",
        "solution_func": "def g(n=5):\n    return ['zebra', 'lion', 'elephant', 'giraffe', 'zealot', 'tiger', 'monkey', 'zeppelin']",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\ndef f(matrix: List[List[int]], target=24) -> bool:\n    \"\"\"Find four numbers in the matrix such that their product is equal to the target.\"\"\"\n    return any(math.prod(comb) == target for comb in combinations([num for row in matrix for num in row], 4))\ndef g(target=24):\n    return [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 17,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\ndef f(matrix: List[List[int]], target=24) -> bool:\n    \"\"\"Find four numbers in the matrix such that their product is equal to the target.\"\"\"\n    return any(math.prod(comb) == target for comb in combinations([num for row in matrix for num in row], 4))",
        "solution_func": "def g(target=24):\n    return [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: int, numbers=[1, 3, 5, 7, 9]) -> bool:\n    \"\"\"Check if x is a prime number and the sum of all numbers in the list is greater than x\"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return is_prime(x) and sum(numbers) > x\ndef g(numbers=[1, 3, 5, 7, 9]):\n    return sum(numbers) + 1\nassert f(g())\n",
        "emb": null,
        "idx_generation": 17,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, numbers=[1, 3, 5, 7, 9]) -> bool:\n    \"\"\"Check if x is a prime number and the sum of all numbers in the list is greater than x\"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return is_prime(x) and sum(numbers) > x",
        "solution_func": "def g(numbers=[1, 3, 5, 7, 9]):\n    return sum(numbers) + 1",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(points: List[Tuple[int,int]], target=5) -> bool:\n    \"\"\"Given a list of points (x, y), determine if there are exactly 'target' number of points that lie on the same vertical line.\"\"\"\n    vertical_lines = {}\n    for point in points:\n        x = point[0]\n        if x in vertical_lines:\n            vertical_lines[x] += 1\n        else:\n            vertical_lines[x] = 1\n    return any(count == target for count in vertical_lines.values())\ndef g(points: List[Tuple[int,int]]):\n    return points\nassert f(g())\n",
        "emb": null,
        "idx_generation": 18,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(points: List[Tuple[int,int]], target=5) -> bool:\n    \"\"\"Given a list of points (x, y), determine if there are exactly 'target' number of points that lie on the same vertical line.\"\"\"\n    vertical_lines = {}\n    for point in points:\n        x = point[0]\n        if x in vertical_lines:\n            vertical_lines[x] += 1\n        else:\n            vertical_lines[x] = 1\n    return any(count == target for count in vertical_lines.values())",
        "solution_func": "def g(points: List[Tuple[int,int]]):\n    return points",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=6) -> bool:\n    \"\"\"Given a matrix of integers, determine if there exists a row that contains exactly 'target' number of even numbers.\"\"\"\n    for row in matrix:\n        even_count = sum(num % 2 == 0 for num in row)\n        if even_count == target:\n            return True\n    return False\ndef g(matrix: List[List[int]]):\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 18,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=6) -> bool:\n    \"\"\"Given a matrix of integers, determine if there exists a row that contains exactly 'target' number of even numbers.\"\"\"\n    for row in matrix:\n        even_count = sum(num % 2 == 0 for num in row)\n        if even_count == target:\n            return True\n    return False",
        "solution_func": "def g(matrix: List[List[int]]):\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(string: str, target_count=4) -> bool:\n    \"\"\"Given a string, determine if there are exactly 'target_count' number of unique characters in the string.\"\"\"\n    unique_chars = set(string)\n    return len(unique_chars) == target_count\ndef g(string: str):\n    return string\nassert f(g())\n",
        "emb": null,
        "idx_generation": 18,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, target_count=4) -> bool:\n    \"\"\"Given a string, determine if there are exactly 'target_count' number of unique characters in the string.\"\"\"\n    unique_chars = set(string)\n    return len(unique_chars) == target_count",
        "solution_func": "def g(string: str):\n    return string",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19]) -> bool:\n    \"\"\"Check if n is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19]):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return next((n for n in range(max(primes)+1, 10**6) if is_prime(n)))\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 18,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19]) -> bool:\n    \"\"\"Check if n is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19]):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return next((n for n in range(max(primes)+1, 10**6) if is_prime(n)))",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there are three numbers in nums that sum up to target.\"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=50):\n    nums = [14, 23, 19, 8, 6, 11, 27, 32, 17, 9, 21, 5, 13, 7, 10, 25, 16, 4, 29, 24]\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 18,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there are three numbers in nums that sum up to target.\"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=50):\n    nums = [14, 23, 19, 8, 6, 11, 27, 32, 17, 9, 21, 5, 13, 7, 10, 25, 16, 4, 29, 24]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target='Python') -> bool:\n    \"\"\"Check if the target string is a substring of the given string.\"\"\"\n    return target in string\ndef g(target='Python'):\n    string = 'Hello, I love Python programming!'\n    return string\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 18,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, target='Python') -> bool:\n    \"\"\"Check if the target string is a substring of the given string.\"\"\"\n    return target in string",
        "solution_func": "def g(target='Python'):\n    string = 'Hello, I love Python programming!'\n    return string",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Find a subset of numbers from the given list that adds up to the target sum.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    return dp[n][target_sum]\ndef g(target_sum=100):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 18,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Find a subset of numbers from the given list that adds up to the target sum.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    return dp[n][target_sum]",
        "solution_func": "def g(target_sum=100):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, target_char='a') -> bool:\n    \"\"\"Count the number of occurrences of a specific character in the given string.\"\"\"\n    count = 0\n    for char in s:\n        if char == target_char:\n            count += 1\n    return count\ndef g(target_char='a'):\n    s = \"banana\"\n    return s\nassert f(g())\n",
        "emb": null,
        "idx_generation": 18,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target_char='a') -> bool:\n    \"\"\"Count the number of occurrences of a specific character in the given string.\"\"\"\n    count = 0\n    for char in s:\n        if char == target_char:\n            count += 1\n    return count",
        "solution_func": "def g(target_char='a'):\n    s = \"banana\"\n    return s",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=50) -> bool:\n    \"\"\"Find a pair of numbers in the given matrix that adds up to the target sum.\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    num_set = set()\n    for i in range(n):\n        for j in range(m):\n            if target_sum - matrix[i][j] in num_set:\n                return True\n            num_set.add(matrix[i][j])\n    return False\ndef g(target_sum=50):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 18,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_sum=50) -> bool:\n    \"\"\"Find a pair of numbers in the given matrix that adds up to the target sum.\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    num_set = set()\n    for i in range(n):\n        for j in range(m):\n            if target_sum - matrix[i][j] in num_set:\n                return True\n            num_set.add(matrix[i][j])\n    return False",
        "solution_func": "def g(target_sum=50):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Check if the given tour is a valid Hamiltonian cycle on an m x n grid graph.\"\"\"\n    visited = set()\n    for i in range(1, len(tour)):\n        if tour[i] in visited or abs(tour[i][0] - tour[i-1][0]) + abs(tour[i][1] - tour[i-1][1]) != 1:\n            return False\n        visited.add(tour[i])\n    return len(visited) == m * n - 1\ndef g(m=5, n=5):\n    import random\n    tour = [(0, 0)]\n    free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n    while free:\n        candidates = [(x, y) for (x, y) in [(tour[-1][0] + dx, tour[-1][1] + dy) for dx in [-1, 1] for dy in [-1, 1]] if (x, y) in free]\n        if not candidates:\n            break\n        next_move = random.choice(candidates)\n        free.remove(next_move)\n        tour.append(next_move)\n    return tour\nassert f(g())\n",
        "emb": null,
        "idx_generation": 18,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Check if the given tour is a valid Hamiltonian cycle on an m x n grid graph.\"\"\"\n    visited = set()\n    for i in range(1, len(tour)):\n        if tour[i] in visited or abs(tour[i][0] - tour[i-1][0]) + abs(tour[i][1] - tour[i-1][1]) != 1:\n            return False\n        visited.add(tour[i])\n    return len(visited) == m * n - 1",
        "solution_func": "def g(m=5, n=5):\n    import random\n    tour = [(0, 0)]\n    free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n    while free:\n        candidates = [(x, y) for (x, y) in [(tour[-1][0] + dx, tour[-1][1] + dy) for dx in [-1, 1] for dy in [-1, 1]] if (x, y) in free]\n        if not candidates:\n            break\n        next_move = random.choice(candidates)\n        free.remove(next_move)\n        tour.append(next_move)\n    return tour",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s='apple', t='banana') -> bool:\n    \"\"\"Ignoring case, compare s, t lexicographically. Output 0 if they are =, -1 if s < t, 1 if s > t.\"\"\"\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False\ndef g(s='apple', t='banana'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 19,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, s='apple', t='banana') -> bool:\n    \"\"\"Ignoring case, compare s, t lexicographically. Output 0 if they are =, -1 if s < t, 1 if s > t.\"\"\"\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False",
        "solution_func": "def g(s='apple', t='banana'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\nfrom typing import List\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Find a pair of numbers in the list that adds up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=12):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 19,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\nfrom typing import List\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Find a pair of numbers in the list that adds up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=12):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"Check if s is an anagram of t.\"\"\"\n    return sorted(s) == sorted(t)\ndef g(s=\"listen\", t=\"silent\"):\n    return s, t\nassert f(g())\n",
        "emb": null,
        "idx_generation": 19,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"Check if s is an anagram of t.\"\"\"\n    return sorted(s) == sorted(t)",
        "solution_func": "def g(s=\"listen\", t=\"silent\"):\n    return s, t",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, words=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Given a string and a list of words, determine if the string can be formed by concatenating the words in the list.\n    Each word in the list can be used only once.\"\"\"\n    word_count = {}\n    for word in words:\n        if word not in word_count:\n            word_count[word] = 0\n        word_count[word] += 1\n\n    i = 0\n    while i < len(string):\n        found_word = False\n        for word in word_count:\n            if string[i:i+len(word)] == word:\n                if word_count[word] > 0:\n                    word_count[word] -= 1\n                    i += len(word)\n                    found_word = True\n                    break\n        if not found_word:\n            return False\n\n    for count in word_count.values():\n        if count > 0:\n            return False\n\n    return True\n\ndef g(words=['apple', 'banana', 'cherry', 'date']):\n    return ''.join(words)\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 19,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, words=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Given a string and a list of words, determine if the string can be formed by concatenating the words in the list.\n    Each word in the list can be used only once.\"\"\"\n    word_count = {}\n    for word in words:\n        if word not in word_count:\n            word_count[word] = 0\n        word_count[word] += 1\n\n    i = 0\n    while i < len(string):\n        found_word = False\n        for word in word_count:\n            if string[i:i+len(word)] == word:\n                if word_count[word] > 0:\n                    word_count[word] -= 1\n                    i += len(word)\n                    found_word = True\n                    break\n        if not found_word:\n            return False\n\n    for count in word_count.values():\n        if count > 0:\n            return False\n\n    return True",
        "solution_func": "def g(words=['apple', 'banana', 'cherry', 'date']):\n    return ''.join(words)",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, words=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Given a string and a list of words, determine if the string can be formed by concatenating the words in the list.\n    Each word in the list can be used only once.\"\"\"\n    word_count = {}\n    for word in words:\n        if word not in word_count:\n            word_count[word] = 0\n        word_count[word] += 1\n\n    i = 0\n    while i < len(string):\n        found_word = False\n        for word in word_count:\n            if string[i:i+len(word)] == word:\n                if word_count[word] > 0:\n                    word_count[word] -= 1\n                    i += len(word)\n                    found_word = True\n                    break\n        if not found_word:\n            return False\n\n    for count in word_count.values():\n        if count > 0:\n            return False\n\n    return True\n\ndef g(words=['apple', 'banana', 'cherry', 'date']):\n    return ''.join(words)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 19,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, words=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Given a string and a list of words, determine if the string can be formed by concatenating the words in the list.\n    Each word in the list can be used only once.\"\"\"\n    word_count = {}\n    for word in words:\n        if word not in word_count:\n            word_count[word] = 0\n        word_count[word] += 1\n\n    i = 0\n    while i < len(string):\n        found_word = False\n        for word in word_count:\n            if string[i:i+len(word)] == word:\n                if word_count[word] > 0:\n                    word_count[word] -= 1\n                    i += len(word)\n                    found_word = True\n                    break\n        if not found_word:\n            return False\n\n    for count in word_count.values():\n        if count > 0:\n            return False\n\n    return True",
        "solution_func": "def g(words=['apple', 'banana', 'cherry', 'date']):\n    return ''.join(words)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, words=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Given a string and a list of words, determine if the string can be formed by concatenating the words in the list.\n    Each word in the list can be used only once.\"\"\"\n    word_count = {}\n    for word in words:\n        if word not in word_count:\n            word_count[word] = 0\n        word_count[word] += 1\n\n    i = 0\n    while i < len(string):\n        found_word = False\n        for word in word_count:\n            if string[i:i+len(word)] == word:\n                if word_count[word] > 0:\n                    word_count[word] -= 1\n                    i += len(word)\n                    found_word = True\n                    break\n        if not found_word:\n            return False\n\n    for count in word_count.values():\n        if count > 0:\n            return False\n\n    return True\n\ndef g(words=['apple', 'banana', 'cherry', 'date']):\n    return ''.join(words)\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 19,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, words=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Given a string and a list of words, determine if the string can be formed by concatenating the words in the list.\n    Each word in the list can be used only once.\"\"\"\n    word_count = {}\n    for word in words:\n        if word not in word_count:\n            word_count[word] = 0\n        word_count[word] += 1\n\n    i = 0\n    while i < len(string):\n        found_word = False\n        for word in word_count:\n            if string[i:i+len(word)] == word:\n                if word_count[word] > 0:\n                    word_count[word] -= 1\n                    i += len(word)\n                    found_word = True\n                    break\n        if not found_word:\n            return False\n\n    for count in word_count.values():\n        if count > 0:\n            return False\n\n    return True",
        "solution_func": "def g(words=['apple', 'banana', 'cherry', 'date']):\n    return ''.join(words)",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(x: List[int], n=5, s=10) -> bool:\n    \"\"\"Find a subset of n distinct integers from the list x that sum up to s\"\"\"\n    from itertools import combinations\n    subsets = list(combinations(x, n))\n    return any(sum(subset) == s for subset in subsets)\n\ndef g(n=5, s=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 19,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(x: List[int], n=5, s=10) -> bool:\n    \"\"\"Find a subset of n distinct integers from the list x that sum up to s\"\"\"\n    from itertools import combinations\n    subsets = list(combinations(x, n))\n    return any(sum(subset) == s for subset in subsets)",
        "solution_func": "def g(n=5, s=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: str, y: str) -> bool:\n    \"\"\"Check if x and y are anagrams of each other\"\"\"\n    return sorted(x) == sorted(y)\n\ndef g(y=\"race\", x=\"care\"):\n    return x\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 19,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, y: str) -> bool:\n    \"\"\"Check if x and y are anagrams of each other\"\"\"\n    return sorted(x) == sorted(y)",
        "solution_func": "def g(y=\"race\", x=\"care\"):\n    return x",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: List[int], n=3) -> bool:\n    \"\"\"Check if the list x contains n consecutive numbers\"\"\"\n    return any(x[i] + 1 == x[i+1] == x[i+2] for i in range(len(x)-2))\n\ndef g(n=3):\n    return [1, 2, 3, 5, 6, 7, 9, 10, 11]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 19,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=3) -> bool:\n    \"\"\"Check if the list x contains n consecutive numbers\"\"\"\n    return any(x[i] + 1 == x[i+1] == x[i+2] for i in range(len(x)-2))",
        "solution_func": "def g(n=3):\n    return [1, 2, 3, 5, 6, 7, 9, 10, 11]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 5, 8, 11, 14, 17, 20, 23, 26, 29], target_sum=87) -> bool:\n    \"\"\"Find if there exists a combination of numbers from the list that adds up to the target sum\"\"\"\n    def subset_sum(nums, n, target_sum):\n        if target_sum == 0:\n            return True\n        if n == 0 and target_sum != 0:\n            return False\n        if nums[n-1] > target_sum:\n            return subset_sum(nums, n-1, target_sum)\n        return subset_sum(nums, n-1, target_sum) or subset_sum(nums, n-1, target_sum-nums[n-1])\n    return subset_sum(nums, len(nums), target_sum)\ndef g(nums=[2, 5, 8, 11, 14, 17, 20, 23, 26, 29], target_sum=87):\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums)))\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 19,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[2, 5, 8, 11, 14, 17, 20, 23, 26, 29], target_sum=87) -> bool:\n    \"\"\"Find if there exists a combination of numbers from the list that adds up to the target sum\"\"\"\n    def subset_sum(nums, n, target_sum):\n        if target_sum == 0:\n            return True\n        if n == 0 and target_sum != 0:\n            return False\n        if nums[n-1] > target_sum:\n            return subset_sum(nums, n-1, target_sum)\n        return subset_sum(nums, n-1, target_sum) or subset_sum(nums, n-1, target_sum-nums[n-1])\n    return subset_sum(nums, len(nums), target_sum)",
        "solution_func": "def g(nums=[2, 5, 8, 11, 14, 17, 20, 23, 26, 29], target_sum=87):\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums)))",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target_sum=20) -> bool:\n    \"\"\"Find if there exists a combination of numbers from the list that adds up to the target sum\"\"\"\n    def subset_sum(nums, n, target_sum):\n        if target_sum == 0:\n            return True\n        if n == 0 and target_sum != 0:\n            return False\n        if nums[n-1] > target_sum:\n            return subset_sum(nums, n-1, target_sum)\n        return subset_sum(nums, n-1, target_sum) or subset_sum(nums, n-1, target_sum-nums[n-1])\n    return subset_sum(nums, len(nums), target_sum)\ndef g(nums=[5, 10, 15, 20, 25, 30, 35, 40, 45, 50], target_sum=20):\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums)))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 20,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target_sum=20) -> bool:\n    \"\"\"Find if there exists a combination of numbers from the list that adds up to the target sum\"\"\"\n    def subset_sum(nums, n, target_sum):\n        if target_sum == 0:\n            return True\n        if n == 0 and target_sum != 0:\n            return False\n        if nums[n-1] > target_sum:\n            return subset_sum(nums, n-1, target_sum)\n        return subset_sum(nums, n-1, target_sum) or subset_sum(nums, n-1, target_sum-nums[n-1])\n    return subset_sum(nums, len(nums), target_sum)",
        "solution_func": "def g(nums=[5, 10, 15, 20, 25, 30, 35, 40, 45, 50], target_sum=20):\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums)))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target_sum=0) -> bool:\n    \"\"\"Find if there exists a combination of numbers from the list that adds up to the target sum\"\"\"\n    def subset_sum(nums, n, target_sum):\n        if target_sum == 0:\n            return True\n        if n == 0 and target_sum != 0:\n            return False\n        if nums[n-1] > target_sum:\n            return subset_sum(nums, n-1, target_sum)\n        return subset_sum(nums, n-1, target_sum) or subset_sum(nums, n-1, target_sum-nums[n-1])\n    return subset_sum(nums, len(nums), target_sum)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target_sum=0):\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums)))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 20,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target_sum=0) -> bool:\n    \"\"\"Find if there exists a combination of numbers from the list that adds up to the target sum\"\"\"\n    def subset_sum(nums, n, target_sum):\n        if target_sum == 0:\n            return True\n        if n == 0 and target_sum != 0:\n            return False\n        if nums[n-1] > target_sum:\n            return subset_sum(nums, n-1, target_sum)\n        return subset_sum(nums, n-1, target_sum) or subset_sum(nums, n-1, target_sum-nums[n-1])\n    return subset_sum(nums, len(nums), target_sum)",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target_sum=0):\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums)))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target_sum=50) -> bool:\n    \"\"\"Find if there exists a combination of numbers from the list that adds up to the target sum\"\"\"\n    def subset_sum(nums, n, target_sum):\n        if target_sum == 0:\n            return True\n        if n == 0 and target_sum != 0:\n            return False\n        if nums[n-1] > target_sum:\n            return subset_sum(nums, n-1, target_sum)\n        return subset_sum(nums, n-1, target_sum) or subset_sum(nums, n-1, target_sum-nums[n-1])\n    return subset_sum(nums, len(nums), target_sum)\ndef g(nums=[15, 10, 5, 20, 25, 30, 35, 40, 45, 50], target_sum=50):\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums)))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 20,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target_sum=50) -> bool:\n    \"\"\"Find if there exists a combination of numbers from the list that adds up to the target sum\"\"\"\n    def subset_sum(nums, n, target_sum):\n        if target_sum == 0:\n            return True\n        if n == 0 and target_sum != 0:\n            return False\n        if nums[n-1] > target_sum:\n            return subset_sum(nums, n-1, target_sum)\n        return subset_sum(nums, n-1, target_sum) or subset_sum(nums, n-1, target_sum-nums[n-1])\n    return subset_sum(nums, len(nums), target_sum)",
        "solution_func": "def g(nums=[15, 10, 5, 20, 25, 30, 35, 40, 45, 50], target_sum=50):\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums)))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='gogomafokuchicowejegothemeralic', b='kybyjifidoquifwejegothemelihitextodeju', length=10) -> bool:\n    \"\"\"Check if a string of length length is a substring of both strings a and b\"\"\"\n    return len(s) == length and s in a and (s in b)\ndef g(a='gogomafokuchicowejegothemeralic', b='kybyjifidoquifwejegothemelihitextodeju', length=10):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 20,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, a='gogomafokuchicowejegothemeralic', b='kybyjifidoquifwejegothemelihitextodeju', length=10) -> bool:\n    \"\"\"Check if a string of length length is a substring of both strings a and b\"\"\"\n    return len(s) == length and s in a and (s in b)",
        "solution_func": "def g(a='gogomafokuchicowejegothemeralic', b='kybyjifidoquifwejegothemelihitextodeju', length=10):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, a='zifolagodunijoginorakacanit', b='xyxytijifidomafokanit', length=8) -> bool:\n    \"\"\"Check if a string of length length is a substring of either string a or string b\"\"\"\n    return len(s) == length and (s in a or s in b)\ndef g(a='zifolagodunijoginorakacanit', b='xyxytijifidomafokanit', length=8):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 20,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, a='zifolagodunijoginorakacanit', b='xyxytijifidomafokanit', length=8) -> bool:\n    \"\"\"Check if a string of length length is a substring of either string a or string b\"\"\"\n    return len(s) == length and (s in a or s in b)",
        "solution_func": "def g(a='zifolagodunijoginorakacanit', b='xyxytijifidomafokanit', length=8):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    \"\"\"Check if a number n is a common divisor of both a and b, and is greater than or equal to the lower_bound\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a=247586288427023352, b=372021520735824432, lower_bound=1709054537):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 20,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    \"\"\"Check if a number n is a common divisor of both a and b, and is greater than or equal to the lower_bound\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)",
        "solution_func": "def g(a=247586288427023352, b=372021520735824432, lower_bound=1709054537):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Find a subset of numbers in the list whose sum is equal to the target_sum\"\"\"\n    n = len(arr)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[n][target_sum]\ndef g(target_sum=100):\n    return list(range(1, target_sum+1))\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 20,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Find a subset of numbers in the list whose sum is equal to the target_sum\"\"\"\n    n = len(arr)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[n][target_sum]",
        "solution_func": "def g(target_sum=100):\n    return list(range(1, target_sum+1))",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom collections import Counter\ndef f(s1: str, s2: str, threshold=0.8) -> bool:\n    \"\"\"Check if the similarity between two strings is above the given threshold\"\"\"\n    c1, c2 = Counter(s1), Counter(s2)\n    intersection = sum((c1 & c2).values())\n    union = sum((c1 | c2).values())\n    similarity = intersection / union\n    return similarity > threshold\ndef g(threshold=0.8):\n    return \"hello\", \"hola\"\nassert f(g())\n",
        "emb": null,
        "idx_generation": 20,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom collections import Counter\ndef f(s1: str, s2: str, threshold=0.8) -> bool:\n    \"\"\"Check if the similarity between two strings is above the given threshold\"\"\"\n    c1, c2 = Counter(s1), Counter(s2)\n    intersection = sum((c1 & c2).values())\n    union = sum((c1 | c2).values())\n    similarity = intersection / union\n    return similarity > threshold",
        "solution_func": "def g(threshold=0.8):\n    return \"hello\", \"hola\"",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, target_sum=100) -> bool:\n    \"\"\"Find a combination of n non-negative integers whose sum is equal to the target_sum\"\"\"\n    dp = [[0] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = 1\n    for i in range(1, n + 1):\n        for j in range(target_sum + 1):\n            if j >= i:\n                dp[i][j] = dp[i - 1][j] + dp[i][j - i]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target_sum]\ndef g(target_sum=100):\n    return 10\nassert f(g())\n",
        "emb": null,
        "idx_generation": 20,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, target_sum=100) -> bool:\n    \"\"\"Find a combination of n non-negative integers whose sum is equal to the target_sum\"\"\"\n    dp = [[0] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = 1\n    for i in range(1, n + 1):\n        for j in range(target_sum + 1):\n            if j >= i:\n                dp[i][j] = dp[i - 1][j] + dp[i][j - i]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target_sum]",
        "solution_func": "def g(target_sum=100):\n    return 10",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(words: List[str], length=5) -> bool:\n    \"\"\"Find words that have a specific length.\"\"\"\n    return all((len(word) == length for word in words))\ndef g(length=5):\n    import random\n    words = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape']\n    return random.sample(words, length)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 20,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(words: List[str], length=5) -> bool:\n    \"\"\"Find words that have a specific length.\"\"\"\n    return all((len(word) == length for word in words))",
        "solution_func": "def g(length=5):\n    import random\n    words = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape']\n    return random.sample(words, length)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(p: List[int], edges=[[1, 6], [2, 3], [2, 7], [0, 8], [7, 8], [7, 2], [1, 5], [8, 7], [7, 0], [0, 0], [8, 1], [5, 7], [4, 7], [6, 1], [4, 4], [7, 4]]) -> bool:\n    \"\"\"Find a path with a prime number of nodes from nodes 0 to n in the given digraph on vertices 0, 1,..., n.\"\"\"\n    return p[0] == 0 and p[-1] == len(p) - 1 and len(p) % 2 != 0 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges=[[1, 6], [2, 3], [2, 7], [0, 8], [7, 8], [7, 2], [1, 5], [8, 7], [7, 0], [0, 0], [8, 1], [5, 7], [4, 7], [6, 1], [4, 4], [7, 4]]):\n    prime_paths = {}\n    n = max((max(e) for e in edges))\n    for i in range(n + 1):\n        if is_prime(i):\n            prime_paths[i] = [0]\n    for _ in range(n + 1):\n        for (i, j) in edges:\n            if i in prime_paths and j not in prime_paths:\n                prime_paths[j] = prime_paths[i] + [j]\n    return prime_paths.get(n)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 21,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(p: List[int], edges=[[1, 6], [2, 3], [2, 7], [0, 8], [7, 8], [7, 2], [1, 5], [8, 7], [7, 0], [0, 0], [8, 1], [5, 7], [4, 7], [6, 1], [4, 4], [7, 4]]) -> bool:\n    \"\"\"Find a path with a prime number of nodes from nodes 0 to n in the given digraph on vertices 0, 1,..., n.\"\"\"\n    return p[0] == 0 and p[-1] == len(p) - 1 and len(p) % 2 != 0 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])",
        "solution_func": "def g(edges=[[1, 6], [2, 3], [2, 7], [0, 8], [7, 8], [7, 2], [1, 5], [8, 7], [7, 0], [0, 0], [8, 1], [5, 7], [4, 7], [6, 1], [4, 4], [7, 4]]):\n    prime_paths = {}\n    n = max((max(e) for e in edges))\n    for i in range(n + 1):\n        if is_prime(i):\n            prime_paths[i] = [0]\n    for _ in range(n + 1):\n        for (i, j) in edges:\n            if i in prime_paths and j not in prime_paths:\n                prime_paths[j] = prime_paths[i] + [j]\n    return prime_paths.get(n)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(p: List[int], edges=[[1, 6], [2, 3], [2, 7], [0, 8], [7, 8], [7, 2], [1, 5], [8, 7], [7, 0], [0, 0], [8, 1], [5, 7], [4, 7], [6, 1], [4, 4], [7, 4]]) -> bool:\n    \"\"\"Find a path with a maximum length from nodes 0 to n in the given digraph on vertices 0, 1,..., n.\"\"\"\n    return p[0] == 0 and p[-1] == len(p) - 1 and len(p) == max((len(path) for path in all_paths)) and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges=[[1, 6], [2, 3], [2, 7], [0, 8], [7, 8], [7, 2], [1, 5], [8, 7], [7, 0], [0, 0], [8, 1], [5, 7], [4, 7], [6, 1], [4, 4], [7, 4]]):\n    all_paths = []\n    n = max((max(e) for e in edges))\n    for i in range(n + 1):\n        paths = [[i] for _ in range(i + 1)]\n        for _ in range(n + 1):\n            new_paths = []\n            for path in paths:\n                for (x, y) in edges:\n                    if path[-1] == x:\n                        new_paths.append(path + [y])\n            paths = new_paths\n        all_paths.extend(paths)\n    return max(all_paths, key=len)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 21,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(p: List[int], edges=[[1, 6], [2, 3], [2, 7], [0, 8], [7, 8], [7, 2], [1, 5], [8, 7], [7, 0], [0, 0], [8, 1], [5, 7], [4, 7], [6, 1], [4, 4], [7, 4]]) -> bool:\n    \"\"\"Find a path with a maximum length from nodes 0 to n in the given digraph on vertices 0, 1,..., n.\"\"\"\n    return p[0] == 0 and p[-1] == len(p) - 1 and len(p) == max((len(path) for path in all_paths)) and all([[a, b] in edges for (a, b) in zip(p, p[1:])])",
        "solution_func": "def g(edges=[[1, 6], [2, 3], [2, 7], [0, 8], [7, 8], [7, 2], [1, 5], [8, 7], [7, 0], [0, 0], [8, 1], [5, 7], [4, 7], [6, 1], [4, 4], [7, 4]]):\n    all_paths = []\n    n = max((max(e) for e in edges))\n    for i in range(n + 1):\n        paths = [[i] for _ in range(i + 1)]\n        for _ in range(n + 1):\n            new_paths = []\n            for path in paths:\n                for (x, y) in edges:\n                    if path[-1] == x:\n                        new_paths.append(path + [y])\n            paths = new_paths\n        all_paths.extend(paths)\n    return max(all_paths, key=len)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(p: List[int], edges=[[1, 6], [2, 3], [2, 7], [0, 8], [7, 8], [7, 2], [1, 5], [8, 7], [7, 0], [0, 0], [8, 1], [5, 7], [4, 7], [6, 1], [4, 4], [7, 4]]) -> bool:\n    \"\"\"Find a path with an odd number of nodes from nodes 0 to n in the given digraph on vertices 0, 1,..., n.\"\"\"\n    return p[0] == 0 and p[-1] == len(p) - 1 and len(p) % 2 != 0 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges=[[1, 6], [2, 3], [2, 7], [0, 8], [7, 8], [7, 2], [1, 5], [8, 7], [7, 0], [0, 0], [8, 1], [5, 7], [4, 7], [6, 1], [4, 4], [7, 4]]):\n    odd_paths = {}\n    n = max((max(e) for e in edges))\n    for i in range(n + 1):\n        if i % 2 != 0:\n            odd_paths[i] = [0]\n    for _ in range(n + 1):\n        for (i, j) in edges:\n            if i in odd_paths and j not in odd_paths:\n                odd_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 21,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(p: List[int], edges=[[1, 6], [2, 3], [2, 7], [0, 8], [7, 8], [7, 2], [1, 5], [8, 7], [7, 0], [0, 0], [8, 1], [5, 7], [4, 7], [6, 1], [4, 4], [7, 4]]) -> bool:\n    \"\"\"Find a path with an odd number of nodes from nodes 0 to n in the given digraph on vertices 0, 1,..., n.\"\"\"\n    return p[0] == 0 and p[-1] == len(p) - 1 and len(p) % 2 != 0 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])",
        "solution_func": "def g(edges=[[1, 6], [2, 3], [2, 7], [0, 8], [7, 8], [7, 2], [1, 5], [8, 7], [7, 0], [0, 0], [8, 1], [5, 7], [4, 7], [6, 1], [4, 4], [7, 4]]):\n    odd_paths = {}\n    n = max((max(e) for e in edges))\n    for i in range(n + 1):\n        if i % 2 != 0:\n            odd_paths[i] = [0]\n    for _ in range(n + 1):\n        for (i, j) in edges:\n            if i in odd_paths and j not in odd_paths:\n                odd_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\nfrom typing import List, Tuple\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    n = len(arr)\n    target_sum = sum(arr[0])\n    # Check rows\n    if any(sum(row) != target_sum for row in arr):\n        return False\n    # Check columns\n    if any(sum(col) != target_sum for col in zip(*arr)):\n        return False\n    # Check diagonal\n    diag1 = sum(arr[i][i] for i in range(n))\n    diag2 = sum(arr[i][n-i-1] for i in range(n))\n    if diag1 != target_sum or diag2 != target_sum:\n        return False\n    return True\n\ndef g(n: int) -> List[List[int]]:\n    matrix = [[random.randint(1, n**2) for _ in range(n)] for _ in range(n)]\n    return matrix\n\nassert f(g(3))\n",
        "emb": null,
        "idx_generation": 21,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\nfrom typing import List, Tuple\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    n = len(arr)\n    target_sum = sum(arr[0])\n    # Check rows\n    if any(sum(row) != target_sum for row in arr):\n        return False\n    # Check columns\n    if any(sum(col) != target_sum for col in zip(*arr)):\n        return False\n    # Check diagonal\n    diag1 = sum(arr[i][i] for i in range(n))\n    diag2 = sum(arr[i][n-i-1] for i in range(n))\n    if diag1 != target_sum or diag2 != target_sum:\n        return False\n    return True",
        "solution_func": "def g(n: int) -> List[List[int]]:\n    matrix = [[random.randint(1, n**2) for _ in range(n)] for _ in range(n)]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\nfrom typing import List\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Determine if there are three numbers in the list whose sum is equal to the target.\"\"\"\n    n = len(nums)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(n: int, target: int) -> List[int]:\n    nums = [random.randint(1, 10) for _ in range(n)]\n    return nums\n\nassert f(g(5, 15), 15)\n",
        "emb": null,
        "idx_generation": 21,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\nfrom typing import List\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Determine if there are three numbers in the list whose sum is equal to the target.\"\"\"\n    n = len(nums)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(n: int, target: int) -> List[int]:\n    nums = [random.randint(1, 10) for _ in range(n)]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    \"\"\"Determine if there are any duplicate elements in the given list.\"\"\"\n    return len(nums) != len(set(nums))\n\ndef g(n: int) -> List[int]:\n    nums = [random.randint(1, 10) for _ in range(n)]\n    return nums\n\nassert f(g(5))\n",
        "emb": null,
        "idx_generation": 21,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    \"\"\"Determine if there are any duplicate elements in the given list.\"\"\"\n    return len(nums) != len(set(nums))",
        "solution_func": "def g(n: int) -> List[int]:\n    nums = [random.randint(1, 10) for _ in range(n)]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=8) -> bool:\n    \"\"\"Given a list of integers, find if there exists a pair of numbers that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=8):\n    return [1, 3, 5, 2, 4, 6]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 21,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=8) -> bool:\n    \"\"\"Given a list of integers, find if there exists a pair of numbers that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=8):\n    return [1, 3, 5, 2, 4, 6]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if a given number n is divisible by m without using the division operator.\"\"\"\n    if m == 0:\n        return False\n    while n >= m:\n        n = n - m\n    return n == 0\ndef g(m=3):\n    return 15\nassert f(g())\n",
        "emb": null,
        "idx_generation": 21,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if a given number n is divisible by m without using the division operator.\"\"\"\n    if m == 0:\n        return False\n    while n >= m:\n        n = n - m\n    return n == 0",
        "solution_func": "def g(m=3):\n    return 15",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Determine if a given string is a palindrome.\"\"\"\n    return s == s[::-1]\ndef g():\n    return \"racecar\"\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 21,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Determine if a given string is a palindrome.\"\"\"\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"racecar\"",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], sentence='The quick brown fox jumps over the lazy dog.') -> bool:\n    \"\"\"Check if all words are present in the given sentence\"\"\"\n    return all(word in sentence for word in words)\ndef g(sentence='The quick brown fox jumps over the lazy dog.'):\n    words = sentence.split()\n    return words\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 21,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], sentence='The quick brown fox jumps over the lazy dog.') -> bool:\n    \"\"\"Check if all words are present in the given sentence\"\"\"\n    return all(word in sentence for word in words)",
        "solution_func": "def g(sentence='The quick brown fox jumps over the lazy dog.'):\n    words = sentence.split()\n    return words",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: List[int], n=4, s=12) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=4, s=12):\n    x = [2] * n\n    x[0] = s - n + 2\n    return x\nassert f(g())\n",
        "emb": null,
        "idx_generation": 22,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=4, s=12) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])",
        "solution_func": "def g(n=4, s=12):\n    x = [2] * n\n    x[0] = s - n + 2\n    return x",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: List[int], n=3, s=15) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=3, s=15):\n    x = [5] * n\n    x[0] = s - n + 5\n    return x\nassert f(g())\n",
        "emb": null,
        "idx_generation": 22,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=3, s=15) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])",
        "solution_func": "def g(n=3, s=15):\n    x = [5] * n\n    x[0] = s - n + 5\n    return x",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: List[int], n=6, s=25) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=6, s=25):\n    x = [4] * n\n    x[0] = s - n + 4\n    return x\nassert f(g())\n",
        "emb": null,
        "idx_generation": 22,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=6, s=25) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])",
        "solution_func": "def g(n=6, s=25):\n    x = [4] * n\n    x[0] = s - n + 4\n    return x",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(names: List[str], min_length=5, max_length=10) -> bool:\n    \"\"\"Check if all names in a list satisfy the length criteria.\"\"\"\n    return all([min_length <= len(name) <= max_length for name in names])\ndef g(min_length=5, max_length=10):\n    return ['Alice', 'Bob', 'Charlie', 'Dave', 'Eve']\nassert f(g())\n",
        "emb": null,
        "idx_generation": 22,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(names: List[str], min_length=5, max_length=10) -> bool:\n    \"\"\"Check if all names in a list satisfy the length criteria.\"\"\"\n    return all([min_length <= len(name) <= max_length for name in names])",
        "solution_func": "def g(min_length=5, max_length=10):\n    return ['Alice', 'Bob', 'Charlie', 'Dave', 'Eve']",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there are three numbers in a list that add up to the target sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target_sum:\n                    return True\n    return False\ndef g(target_sum=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 22,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there are three numbers in a list that add up to the target sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target_sum:\n                    return True\n    return False",
        "solution_func": "def g(target_sum=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there is a pair of numbers in a matrix that adds up to the target value.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            for m in range(i, len(matrix)):\n                for n in range(len(matrix[0])):\n                    if i == m and j == n:\n                        continue\n                    if matrix[i][j] + matrix[m][n] == target:\n                        return True\n    return False\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 22,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there is a pair of numbers in a matrix that adds up to the target value.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            for m in range(i, len(matrix)):\n                for n in range(len(matrix[0])):\n                    if i == m and j == n:\n                        continue\n                    if matrix[i][j] + matrix[m][n] == target:\n                        return True\n    return False",
        "solution_func": "def g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(l: List[int]) -> bool:\n    \"\"\"Find a list of more than 1000 distinct integers between 0 and 10000, inclusive, such that each pair of integers\n    have cubes that differ by at least 1000.\"\"\"\n    return all((i in range(10001) and abs(i ** 3 - j ** 3) >= 1000 for i in l for j in l if i != j)) and len(set(l)) > 1000\n\ndef g():\n    return [0, 5] + list(range(7, 10001, 3))\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 22,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(l: List[int]) -> bool:\n    \"\"\"Find a list of more than 1000 distinct integers between 0 and 10000, inclusive, such that each pair of integers\n    have cubes that differ by at least 1000.\"\"\"\n    return all((i in range(10001) and abs(i ** 3 - j ** 3) >= 1000 for i in l for j in l if i != j)) and len(set(l)) > 1000",
        "solution_func": "def g():\n    return [0, 5] + list(range(7, 10001, 3))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='hello', length=1) -> bool:\n    \"\"\"Find a substring of the given length centered within the target string.\"\"\"\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s\n\ndef g(target='hello', length=1):\n    return target[(len(target) - length) // 2 + 1:(len(target) + length) // 2 + 1]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 22,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='hello', length=1) -> bool:\n    \"\"\"Find a substring of the given length centered within the target string.\"\"\"\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s",
        "solution_func": "def g(target='hello', length=1):\n    return target[(len(target) - length) // 2 + 1:(len(target) + length) // 2 + 1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=3, b=7) -> bool:\n    \"\"\"Check if the difference between x and the product of a and b is divisible by x\"\"\"\n    return (x - (a * b)) % x == 0\n\ndef g(a=3, b=7):\n    return a * b\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 22,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=3, b=7) -> bool:\n    \"\"\"Check if the difference between x and the product of a and b is divisible by x\"\"\"\n    return (x - (a * b)) % x == 0",
        "solution_func": "def g(a=3, b=7):\n    return a * b",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=93252338, b=20) -> bool:\n    \"\"\"Solve a multiplication problem\"\"\"\n    return x * a == b\ndef g(a=93252338, b=20):\n    return b / a\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 22,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=93252338, b=20) -> bool:\n    \"\"\"Solve a multiplication problem\"\"\"\n    return x * a == b",
        "solution_func": "def g(a=93252338, b=20):\n    return b / a",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=4, c=6) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])\ndef g(a=3, b=4, c=6):\n    return -a + sum([b * i for i in range(c)])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 23,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=3, b=4, c=6) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])",
        "solution_func": "def g(a=3, b=4, c=6):\n    return -a + sum([b * i for i in range(c)])",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=2, c=7) -> bool:\n    \"\"\"Check if n multiplied by a is equal to the sum of the first c multiples of b\"\"\"\n    return n * a == sum([b * i for i in range(1, c+1)])\ndef g(a=10, b=2, c=7):\n    return sum([b * i for i in range(1, c+1)]) // a\nassert f(g())\n",
        "emb": null,
        "idx_generation": 23,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=10, b=2, c=7) -> bool:\n    \"\"\"Check if n multiplied by a is equal to the sum of the first c multiples of b\"\"\"\n    return n * a == sum([b * i for i in range(1, c+1)])",
        "solution_func": "def g(a=10, b=2, c=7):\n    return sum([b * i for i in range(1, c+1)]) // a",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=5, c=8) -> bool:\n    \"\"\"Check if n modulo a is equal to the sum of the first c modulo b\"\"\"\n    return n % a == sum([i % b for i in range(c+1)])\ndef g(a=2, b=5, c=8):\n    return sum([i % b for i in range(c+1)]) % a\nassert f(g())\n",
        "emb": null,
        "idx_generation": 23,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=2, b=5, c=8) -> bool:\n    \"\"\"Check if n modulo a is equal to the sum of the first c modulo b\"\"\"\n    return n % a == sum([i % b for i in range(c+1)])",
        "solution_func": "def g(a=2, b=5, c=8):\n    return sum([i % b for i in range(c+1)]) % a",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(w: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if a given word w is a substring of any word in a list\"\"\"\n    return any((w in word for word in words))\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return words[0]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 23,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(w: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if a given word w is a substring of any word in a list\"\"\"\n    return any((w in word for word in words))",
        "solution_func": "def g(words=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return words[0]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if a given string s contains all vowels\"\"\"\n    return all((vowel in s for vowel in vowels))\ndef g(vowels=['a', 'e', 'i', 'o', 'u']):\n    return ''.join(vowels)\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 23,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if a given string s contains all vowels\"\"\"\n    return all((vowel in s for vowel in vowels))",
        "solution_func": "def g(vowels=['a', 'e', 'i', 'o', 'u']):\n    return ''.join(vowels)",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], n=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that sums up to a given number n\"\"\"\n    return any((n - x in lst for x in lst))\ndef g(n=10):\n    return [n - 1, 1]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 23,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], n=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that sums up to a given number n\"\"\"\n    return any((n - x in lst for x in lst))",
        "solution_func": "def g(n=10):\n    return [n - 1, 1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=12345, b=98765, lower_bound=10) -> bool:\n    \"\"\"Find the smallest common multiple of two integers.\"\"\"\n    return n % a == 0 and n % b == 0 and (n >= lower_bound)\ndef g(a=12345, b=98765, lower_bound=10):\n    (m, n) = (min(a, b), max(a, b))\n    lcm = (a * b) // g\n    return lcm\nassert f(g())\n",
        "emb": null,
        "idx_generation": 23,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=12345, b=98765, lower_bound=10) -> bool:\n    \"\"\"Find the smallest common multiple of two integers.\"\"\"\n    return n % a == 0 and n % b == 0 and (n >= lower_bound)",
        "solution_func": "def g(a=12345, b=98765, lower_bound=10):\n    (m, n) = (min(a, b), max(a, b))\n    lcm = (a * b) // g\n    return lcm",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=899, b=9999, lower_bound=50) -> bool:\n    \"\"\"Find the largest common factor of two integers.\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a=899, b=9999, lower_bound=50):\n    (m, n) = (min(a, b), max(a, b))\n    factors = []\n    for i in range(1, m+1):\n        if m % i == 0 and n % i == 0:\n            factors.append(i)\n    return max(factors)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 23,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=899, b=9999, lower_bound=50) -> bool:\n    \"\"\"Find the largest common factor of two integers.\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)",
        "solution_func": "def g(a=899, b=9999, lower_bound=50):\n    (m, n) = (min(a, b), max(a, b))\n    factors = []\n    for i in range(1, m+1):\n        if m % i == 0 and n % i == 0:\n            factors.append(i)\n    return max(factors)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=54321, b=87654, lower_bound=100) -> bool:\n    \"\"\"Find the sum of all common divisors of two integers.\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a=54321, b=87654, lower_bound=100):\n    (m, n) = (min(a, b), max(a, b))\n    factors = []\n    for i in range(1, m+1):\n        if m % i == 0 and n % i == 0:\n            factors.append(i)\n    return sum(factors)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 23,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=54321, b=87654, lower_bound=100) -> bool:\n    \"\"\"Find the sum of all common divisors of two integers.\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)",
        "solution_func": "def g(a=54321, b=87654, lower_bound=100):\n    (m, n) = (min(a, b), max(a, b))\n    factors = []\n    for i in range(1, m+1):\n        if m % i == 0 and n % i == 0:\n            factors.append(i)\n    return sum(factors)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, numbers: List[int]) -> bool:\n    \"\"\"Check if n is divisible by all the numbers in the list.\"\"\"\n    for number in numbers:\n        if n % number != 0:\n            return False\n    return True\n\ndef g(numbers: List[int]):\n    n = max(numbers) + 1\n    while True:\n        if f(n, numbers):\n            return n\n        n += 1\n\nassert f(g([2, 3, 5, 7, 11, 13, 17, 19]), [2, 3, 5, 7, 11, 13, 17, 19])\n\n",
        "emb": null,
        "idx_generation": 23,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(n: int, numbers: List[int]) -> bool:\n    \"\"\"Check if n is divisible by all the numbers in the list.\"\"\"\n    for number in numbers:\n        if n % number != 0:\n            return False\n    return True",
        "solution_func": "def g(numbers: List[int]):\n    n = max(numbers) + 1\n    while True:\n        if f(n, numbers):\n            return n\n        n += 1",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=2, b=5) -> bool:\n    \"\"\"Check if the sum of x and the product of a and b is divisible by x\"\"\"\n    return (x + (a * b)) % x == 0\n\ndef g(a=2, b=5):\n    return a * b\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 24,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=2, b=5) -> bool:\n    \"\"\"Check if the sum of x and the product of a and b is divisible by x\"\"\"\n    return (x + (a * b)) % x == 0",
        "solution_func": "def g(a=2, b=5):\n    return a * b",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], num=7) -> bool:\n    \"\"\"Check if the sum of the elements in arr is equal to num\"\"\"\n    return sum(arr) == num\n\ndef g(num=7):\n    return [1, 2, 4]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 24,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], num=7) -> bool:\n    \"\"\"Check if the sum of the elements in arr is equal to num\"\"\"\n    return sum(arr) == num",
        "solution_func": "def g(num=7):\n    return [1, 2, 4]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the length of s is greater than n\"\"\"\n    return len(s) > n\n\ndef g(n=3):\n    return \"Hello World\"\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 24,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the length of s is greater than n\"\"\"\n    return len(s) > n",
        "solution_func": "def g(n=3):\n    return \"Hello World\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list is a sorted list in non-increasing order. Return True if it is, otherwise return False.\"\"\"\n    for i in range(len(numbers)-1):\n        if numbers[i] < numbers[i+1]:\n            return False\n    return True\n\ndef g():\n    return [5, 4, 3, 2, 1]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 24,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list is a sorted list in non-increasing order. Return True if it is, otherwise return False.\"\"\"\n    for i in range(len(numbers)-1):\n        if numbers[i] < numbers[i+1]:\n            return False\n    return True",
        "solution_func": "def g():\n    return [5, 4, 3, 2, 1]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome. Return True if it is, otherwise return False.\"\"\"\n    return numbers == numbers[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 24,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome. Return True if it is, otherwise return False.\"\"\"\n    return numbers == numbers[::-1]",
        "solution_func": "def g():\n    return [1, 2, 3, 2, 1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list contains only even numbers. Return True if it does, otherwise return False.\"\"\"\n    for num in numbers:\n        if num % 2 != 0:\n            return False\n    return True\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 24,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list contains only even numbers. Return True if it does, otherwise return False.\"\"\"\n    for num in numbers:\n        if num % 2 != 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return [2, 4, 6, 8, 10]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, word='sp') -> bool:\n    \"\"\"Check if the word is a palindrome\"\"\"\n    return word == word[::-1]\ndef g(word='sp'):\n    return word\nassert f(g())\n",
        "emb": null,
        "idx_generation": 24,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, word='sp') -> bool:\n    \"\"\"Check if the word is a palindrome\"\"\"\n    return word == word[::-1]",
        "solution_func": "def g(word='sp'):\n    return word",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='ho') -> bool:\n    \"\"\"Check if the word is a substring of s\"\"\"\n    return word in s\ndef g(word='ho'):\n    return word\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 24,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, word='ho') -> bool:\n    \"\"\"Check if the word is a substring of s\"\"\"\n    return word in s",
        "solution_func": "def g(word='ho'):\n    return word",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='pl') -> bool:\n    \"\"\"Check if the word is a prefix of s\"\"\"\n    return s.startswith(word)\ndef g(word='pl'):\n    return word\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 24,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, word='pl') -> bool:\n    \"\"\"Check if the word is a prefix of s\"\"\"\n    return s.startswith(word)",
        "solution_func": "def g(word='pl'):\n    return word",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find two numbers from the list that add up to the target\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums=[2, 7, 4, 5, 11, 9]):\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 24,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find two numbers from the list that add up to the target\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(nums=[2, 7, 4, 5, 11, 9]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, k=3) -> bool:\n    \"\"\"Check if a string contains exactly k occurrences of a specific character.\"\"\"\n    return string.count('a') == k\ndef g(k=3):\n    return 'a' * k\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 25,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, k=3) -> bool:\n    \"\"\"Check if a string contains exactly k occurrences of a specific character.\"\"\"\n    return string.count('a') == k",
        "solution_func": "def g(k=3):\n    return 'a' * k",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, k=3) -> bool:\n    \"\"\"Check if a string contains at least k occurrences of a specific character.\"\"\"\n    return string.count('a') >= k\ndef g(k=3):\n    return 'a' * k\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 25,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, k=3) -> bool:\n    \"\"\"Check if a string contains at least k occurrences of a specific character.\"\"\"\n    return string.count('a') >= k",
        "solution_func": "def g(k=3):\n    return 'a' * k",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(string: str, k=3) -> bool:\n    \"\"\"Check if a string contains less than k occurrences of a specific character.\"\"\"\n    return string.count('a') < k\ndef g(k=3):\n    return 'a' * k\nassert f(g())\n",
        "emb": null,
        "idx_generation": 25,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, k=3) -> bool:\n    \"\"\"Check if a string contains less than k occurrences of a specific character.\"\"\"\n    return string.count('a') < k",
        "solution_func": "def g(k=3):\n    return 'a' * k",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=20) -> bool:\n    \"\"\"Find a pair of numbers in the list nums that sum up to the target_sum\"\"\"\n    return any(x + y == target_sum for x in nums for y in nums if x != y)\ndef g(target_sum=20):\n    return [2, 4, 6, 8, 10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 25,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=20) -> bool:\n    \"\"\"Find a pair of numbers in the list nums that sum up to the target_sum\"\"\"\n    return any(x + y == target_sum for x in nums for y in nums if x != y)",
        "solution_func": "def g(target_sum=20):\n    return [2, 4, 6, 8, 10]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_length=6) -> bool:\n    \"\"\"Find a word in the list words that has a length equal to the target_length\"\"\"\n    return any(len(word) == target_length for word in words)\ndef g(target_length=6):\n    return ['apple', 'banana', 'cherry', 'date']\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 25,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], target_length=6) -> bool:\n    \"\"\"Find a word in the list words that has a length equal to the target_length\"\"\"\n    return any(len(word) == target_length for word in words)",
        "solution_func": "def g(target_length=6):\n    return ['apple', 'banana', 'cherry', 'date']",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\ndef f(radius: float, volume=100) -> bool:\n    \"\"\"Check if the volume of a sphere with the given radius is equal to the target volume\"\"\"\n    return abs((4/3) * math.pi * (radius**3) - volume) < 1e-06\ndef g(volume=100):\n    return 4.64159\nassert f(g())\n",
        "emb": null,
        "idx_generation": 25,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\ndef f(radius: float, volume=100) -> bool:\n    \"\"\"Check if the volume of a sphere with the given radius is equal to the target volume\"\"\"\n    return abs((4/3) * math.pi * (radius**3) - volume) < 1e-06",
        "solution_func": "def g(volume=100):\n    return 4.64159",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, x=3, y=5) -> bool:\n    \"\"\"Check if a number is a multiple of either x or y\"\"\"\n    return num % x == 0 or num % y == 0\ndef g(x=3, y=5):\n    num = 15\n    return num\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 25,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num: int, x=3, y=5) -> bool:\n    \"\"\"Check if a number is a multiple of either x or y\"\"\"\n    return num % x == 0 or num % y == 0",
        "solution_func": "def g(x=3, y=5):\n    num = 15\n    return num",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if a target number exists in the given matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(matrix: List[List[int]], target=0):\n    for row in matrix:\n        for num in row:\n            if num == target:\n                return True\n    return False\nassert f(g())\n",
        "emb": null,
        "idx_generation": 25,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if a target number exists in the given matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(matrix: List[List[int]], target=0):\n    for row in matrix:\n        for num in row:\n            if num == target:\n                return True\n    return False",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, x=2) -> bool:\n    \"\"\"Check if a string contains a substring that appears exactly x times\"\"\"\n    substrings = []\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            substring = s[i:j]\n            if substring not in substrings:\n                substrings.append(substring)\n            else:\n                substrings.remove(substring)\n    return len(substrings) == x\ndef g(x=2):\n    return 'aba' * (x - 1) + 'abc'\nassert f(g())\n",
        "emb": null,
        "idx_generation": 25,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, x=2) -> bool:\n    \"\"\"Check if a string contains a substring that appears exactly x times\"\"\"\n    substrings = []\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            substring = s[i:j]\n            if substring not in substrings:\n                substrings.append(substring)\n            else:\n                substrings.remove(substring)\n    return len(substrings) == x",
        "solution_func": "def g(x=2):\n    return 'aba' * (x - 1) + 'abc'",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(x: List[int], target=24) -> bool:\n    \"\"\"Find a quadruplet of numbers in the list x that multiply up to the target\"\"\"\n    from itertools import combinations\n    return any((a * b * c * d == target) for (a, b, c, d) in combinations(x, 4))\ndef g(target=24):\n    return [2, 3, 4, 6, 8]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 25,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(x: List[int], target=24) -> bool:\n    \"\"\"Find a quadruplet of numbers in the list x that multiply up to the target\"\"\"\n    from itertools import combinations\n    return any((a * b * c * d == target) for (a, b, c, d) in combinations(x, 4))",
        "solution_func": "def g(target=24):\n    return [2, 3, 4, 6, 8]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Find a pair of numbers in the list numbers that sum up to the target_sum.\"\"\"\n    return any((x + y) == target_sum for x in numbers for y in numbers)\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 26,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import *\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Find a pair of numbers in the list numbers that sum up to the target_sum.\"\"\"\n    return any((x + y) == target_sum for x in numbers for y in numbers)",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(points: List[Tuple[int, int]]) -> bool:\n    \"\"\"Find a pair of points in the list points that have the same x-coordinate and y-coordinate.\"\"\"\n    return any(points.count(point) > 1 for point in points)\ndef g():\n    return [(1, 2), (3, 4), (2, 3), (1, 2)]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 26,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import *\ndef f(points: List[Tuple[int, int]]) -> bool:\n    \"\"\"Find a pair of points in the list points that have the same x-coordinate and y-coordinate.\"\"\"\n    return any(points.count(point) > 1 for point in points)",
        "solution_func": "def g():\n    return [(1, 2), (3, 4), (2, 3), (1, 2)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import *\ndef f(matrix: List[List[int]], target_sum=10) -> bool:\n    \"\"\"Find a row in the matrix where the sum of the elements is equal to the target_sum.\"\"\"\n    return any(sum(row) == target_sum for row in matrix)\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 26,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import *\ndef f(matrix: List[List[int]], target_sum=10) -> bool:\n    \"\"\"Find a row in the matrix where the sum of the elements is equal to the target_sum.\"\"\"\n    return any(sum(row) == target_sum for row in matrix)",
        "solution_func": "def g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are exactly k numbers that sum up to the target value.\"\"\"\n    return sum(nums) == target\ndef g(target=10):\n    return [1, 2, 3, 4]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 26,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are exactly k numbers that sum up to the target value.\"\"\"\n    return sum(nums) == target",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], row=2, col=2) -> bool:\n    \"\"\"Check if a specific element is the maximum in its row and column.\"\"\"\n    return matrix[row][col] == max(matrix[row]) and matrix[row][col] == max([row[col] for row in matrix])\ndef g(row=2, col=2):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 26,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], row=2, col=2) -> bool:\n    \"\"\"Check if a specific element is the maximum in its row and column.\"\"\"\n    return matrix[row][col] == max(matrix[row]) and matrix[row][col] == max([row[col] for row in matrix])",
        "solution_func": "def g(row=2, col=2):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], n=3) -> bool:\n    \"\"\"Check if there are exactly n numbers in the list that are divisible by 2 and 3.\"\"\"\n    return len([num for num in nums if num % 2 == 0 and num % 3 == 0]) == n\ndef g(n=3):\n    return [6, 12, 18, 24, 30, 36]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 26,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], n=3) -> bool:\n    \"\"\"Check if there are exactly n numbers in the list that are divisible by 2 and 3.\"\"\"\n    return len([num for num in nums if num % 2 == 0 and num % 3 == 0]) == n",
        "solution_func": "def g(n=3):\n    return [6, 12, 18, 24, 30, 36]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find a list of numbers where each element is divisible by the sum of the remaining elements.\"\"\"\n    return all(num % sum(nums[:i] + nums[i+1:]) == 0 for i, num in enumerate(nums))\ndef g():\n    return [10, 5, 20, 15]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 26,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find a list of numbers where each element is divisible by the sum of the remaining elements.\"\"\"\n    return all(num % sum(nums[:i] + nums[i+1:]) == 0 for i, num in enumerate(nums))",
        "solution_func": "def g():\n    return [10, 5, 20, 15]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find a matrix where the sum of each row is equal to the target value.\"\"\"\n    return all(sum(row) == target for row in matrix)\ndef g(target=10):\n    return [[1, 2, 3], [4, 5, 1], [2, 2, 6]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 26,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find a matrix where the sum of each row is equal to the target value.\"\"\"\n    return all(sum(row) == target for row in matrix)",
        "solution_func": "def g(target=10):\n    return [[1, 2, 3], [4, 5, 1], [2, 2, 6]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Find a string where the number of uppercase letters is equal to the number of lowercase letters.\"\"\"\n    return sum(1 for char in s if char.isupper()) == sum(1 for char in s if char.islower())\ndef g():\n    return \"HeLLoWOrlD\"\nassert f(g())\n",
        "emb": null,
        "idx_generation": 26,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Find a string where the number of uppercase letters is equal to the number of lowercase letters.\"\"\"\n    return sum(1 for char in s if char.isupper()) == sum(1 for char in s if char.islower())",
        "solution_func": "def g():\n    return \"HeLLoWOrlD\"",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list whose product is equal to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[2, 4, 6, 8, 10, 12, 14, 16]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 26,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list whose product is equal to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums=[2, 4, 6, 8, 10, 12, 14, 16]):\n    return nums",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array whose sum is equal to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=10):\n    return arr\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 27,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array whose sum is equal to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=10):\n    return arr",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the string has consecutive numbers from 1 to n.\"\"\"\n    for i in range(1, n+1):\n        if str(i) not in s:\n            return False\n    return True\ndef g(n=3):\n    return ''.join(str(i) for i in range(1, n+1))\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 27,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the string has consecutive numbers from 1 to n.\"\"\"\n    for i in range(1, n+1):\n        if str(i) not in s:\n            return False\n    return True",
        "solution_func": "def g(n=3):\n    return ''.join(str(i) for i in range(1, n+1))",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a number in the array that is greater than the target value.\"\"\"\n    for num in arr:\n        if num > target:\n            return True\n    return False\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=5):\n    return arr\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 27,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a number in the array that is greater than the target value.\"\"\"\n    for num in arr:\n        if num > target:\n            return True\n    return False",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=5):\n    return arr",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=100) -> int:\n    \"\"\"Count the number of ways to form the target_sum using numbers from the list\"\"\"\n    n = len(arr)\n    dp = [[0] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - arr[i - 1]]\n    return dp[n][target_sum]\ndef g(target_sum=100):\n    return list(range(1, target_sum+1))\nassert f(g()) == 190\n",
        "emb": null,
        "idx_generation": 27,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target_sum=100) -> int:\n    \"\"\"Count the number of ways to form the target_sum using numbers from the list\"\"\"\n    n = len(arr)\n    dp = [[0] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - arr[i - 1]]\n    return dp[n][target_sum]",
        "solution_func": "def g(target_sum=100):\n    return list(range(1, target_sum+1))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a subset of numbers from the list whose sum is greater than or equal to the target_sum\"\"\"\n    n = len(arr)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[n][target_sum]\ndef g(target_sum=100):\n    return list(range(1, target_sum+1))\nassert f(g()) == True\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 27,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a subset of numbers from the list whose sum is greater than or equal to the target_sum\"\"\"\n    n = len(arr)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[n][target_sum]",
        "solution_func": "def g(target_sum=100):\n    return list(range(1, target_sum+1))",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=100) -> int:\n    \"\"\"Find the minimum number of elements required from the list to form the target_sum\"\"\"\n    n = len(arr)\n    dp = [[float('inf')] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = 0\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - arr[i - 1]] + 1)\n    return dp[n][target_sum]\ndef g(target_sum=100):\n    return list(range(1, target_sum+1))\nassert f(g()) == 100\n",
        "emb": null,
        "idx_generation": 27,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target_sum=100) -> int:\n    \"\"\"Find the minimum number of elements required from the list to form the target_sum\"\"\"\n    n = len(arr)\n    dp = [[float('inf')] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = 0\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - arr[i - 1]] + 1)\n    return dp[n][target_sum]",
        "solution_func": "def g(target_sum=100):\n    return list(range(1, target_sum+1))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: float, a=1234567) -> bool:\n    \"\"\"Find a positive number that when squared is close to a.\"\"\"\n    return abs(x ** 2 - a) < 10 ** (-3) and x > 0\ndef g(a=1234567):\n    return a ** 0.5\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 27,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: float, a=1234567) -> bool:\n    \"\"\"Find a positive number that when squared is close to a.\"\"\"\n    return abs(x ** 2 - a) < 10 ** (-3) and x > 0",
        "solution_func": "def g(a=1234567):\n    return a ** 0.5",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(li: List[int], sum_val=100) -> bool:\n    \"\"\"Find a list of integers that sum up to a certain value.\"\"\"\n    return sum(li) == sum_val\ndef g(sum_val=100):\n    return [i for i in range(1, sum_val+1)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 27,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[int], sum_val=100) -> bool:\n    \"\"\"Find a list of integers that sum up to a certain value.\"\"\"\n    return sum(li) == sum_val",
        "solution_func": "def g(sum_val=100):\n    return [i for i in range(1, sum_val+1)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, word='python', max_len=5) -> bool:\n    \"\"\"Check if a string has the first and last characters the same as a given word and length not exceeding a certain value.\"\"\"\n    return s[0] == word[0] and s[-1] == word[-1] and len(s) <= max_len\ndef g(word='python', max_len=5):\n    return word\nassert f(g())\n",
        "emb": null,
        "idx_generation": 27,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, word='python', max_len=5) -> bool:\n    \"\"\"Check if a string has the first and last characters the same as a given word and length not exceeding a certain value.\"\"\"\n    return s[0] == word[0] and s[-1] == word[-1] and len(s) <= max_len",
        "solution_func": "def g(word='python', max_len=5):\n    return word",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[452452, 111673658096, 83221402264, 5027670648, 61177116, 154154, 116116, 1508784124848, 17036343324, 29091062, 100726626], upper_bound=1000000) -> bool:\n    \"\"\"Find a large common divisor of the list of integers that is less than or equal to the upper bound.\"\"\"\n    return all((i % n == 0 for i in nums)) and n <= upper_bound\ndef g(nums=[452452, 111673658096, 83221402264, 5027670648, 61177116, 154154, 116116, 1508784124848, 17036343324, 29091062, 100726626], upper_bound=1000000):\n    n = 0\n    for i in nums:\n        (m, n) = (min(i, n), max(i, n))\n        while m > 0:\n            (m, n) = (n % m, m)\n    return n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 27,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[452452, 111673658096, 83221402264, 5027670648, 61177116, 154154, 116116, 1508784124848, 17036343324, 29091062, 100726626], upper_bound=1000000) -> bool:\n    \"\"\"Find a large common divisor of the list of integers that is less than or equal to the upper bound.\"\"\"\n    return all((i % n == 0 for i in nums)) and n <= upper_bound",
        "solution_func": "def g(nums=[452452, 111673658096, 83221402264, 5027670648, 61177116, 154154, 116116, 1508784124848, 17036343324, 29091062, 100726626], upper_bound=1000000):\n    n = 0\n    for i in nums:\n        (m, n) = (min(i, n), max(i, n))\n        while m > 0:\n            (m, n) = (n % m, m)\n    return n",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], target_sum=40) -> bool:\n    \"\"\"Find if there exists a combination of numbers from the list that adds up to the target sum\"\"\"\n    def subset_sum(nums, n, target_sum):\n        if target_sum == 0:\n            return True\n        if n == 0 and target_sum != 0:\n            return False\n        if nums[n-1] > target_sum:\n            return subset_sum(nums, n-1, target_sum)\n        return subset_sum(nums, n-1, target_sum) or subset_sum(nums, n-1, target_sum-nums[n-1])\n    return subset_sum(nums, len(nums), target_sum)\ndef g(nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], target_sum=40):\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums)))\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 28,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], target_sum=40) -> bool:\n    \"\"\"Find if there exists a combination of numbers from the list that adds up to the target sum\"\"\"\n    def subset_sum(nums, n, target_sum):\n        if target_sum == 0:\n            return True\n        if n == 0 and target_sum != 0:\n            return False\n        if nums[n-1] > target_sum:\n            return subset_sum(nums, n-1, target_sum)\n        return subset_sum(nums, n-1, target_sum) or subset_sum(nums, n-1, target_sum-nums[n-1])\n    return subset_sum(nums, len(nums), target_sum)",
        "solution_func": "def g(nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], target_sum=40):\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums)))",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['python', 'programming']) -> bool:\n    \"\"\"Find a string that contains each string in substrings alternating, e.g., 'pytroming' for 'python' and 'programming'\"\"\"\n    return all((sub in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))\ndef g(substrings=['python', 'programming']):\n    m = max((len(s) for s in substrings))\n    return ''.join([s[i] if i < len(s) else ' ' for i in range(m) for s in substrings])\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 28,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substrings=['python', 'programming']) -> bool:\n    \"\"\"Find a string that contains each string in substrings alternating, e.g., 'pytroming' for 'python' and 'programming'\"\"\"\n    return all((sub in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))",
        "solution_func": "def g(substrings=['python', 'programming']):\n    m = max((len(s) for s in substrings))\n    return ''.join([s[i] if i < len(s) else ' ' for i in range(m) for s in substrings])",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=6, n=6) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=6, n=6):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 28,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=6, n=6) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]",
        "solution_func": "def g(m=6, n=6):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])",
        "map_ix": [
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target_sum=45) -> bool:\n    \"\"\"Given a list of numbers, find a subset whose sum is equal to the target sum\"\"\"\n    return any(sum(subset) == target_sum for subset in itertools.combinations(numbers, len(numbers)//2))\ndef g(target_sum=45):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 28,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target_sum=45) -> bool:\n    \"\"\"Given a list of numbers, find a subset whose sum is equal to the target sum\"\"\"\n    return any(sum(subset) == target_sum for subset in itertools.combinations(numbers, len(numbers)//2))",
        "solution_func": "def g(target_sum=45):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_value=50) -> bool:\n    \"\"\"Given a matrix, find a row where the sum of its elements is equal to the target value\"\"\"\n    return any(sum(row) == target_value for row in matrix)\ndef g(target_value=50):\n    return [[10, 20, 30], [40, 50, 60], [70, 80, 90]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 28,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_value=50) -> bool:\n    \"\"\"Given a matrix, find a row where the sum of its elements is equal to the target value\"\"\"\n    return any(sum(row) == target_value for row in matrix)",
        "solution_func": "def g(target_value=50):\n    return [[10, 20, 30], [40, 50, 60], [70, 80, 90]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target_product=100) -> bool:\n    \"\"\"Given a list of numbers, find a pair whose product is equal to the target product\"\"\"\n    return any(x * y == target_product for x, y in itertools.combinations(numbers, 2))\ndef g(target_product=100):\n    return [10, 20, 30, 40, 50]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 28,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target_product=100) -> bool:\n    \"\"\"Given a list of numbers, find a pair whose product is equal to the target product\"\"\"\n    return any(x * y == target_product for x, y in itertools.combinations(numbers, 2))",
        "solution_func": "def g(target_product=100):\n    return [10, 20, 30, 40, 50]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g(s: str):\n    return s + s[::-1]\n\nassert f(g(\"racecar\"))\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 28,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]",
        "solution_func": "def g(s: str):\n    return s + s[::-1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 28,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target: int):\n    return [i for i in range(1, target + 1)]\n\nassert f(g(10))\n",
        "emb": null,
        "idx_generation": 28,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target: int):\n    return [i for i in range(1, target + 1)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(counts: List[int], target_prob=0.75) -> bool:\n    \"\"\"Suppose a list of m 1's and n -1's are permuted at random.\nWhat is the probability that the difference between the number of 1's and -1's is less than or equal to 2?\nThe goal is to find counts = [m, n] that make the probability of the difference condition close to target_prob.\"\"\"\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06\ndef g(target_prob=0.75):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-06:\n            return [m, n]\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 28,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(counts: List[int], target_prob=0.75) -> bool:\n    \"\"\"Suppose a list of m 1's and n -1's are permuted at random.\nWhat is the probability that the difference between the number of 1's and -1's is less than or equal to 2?\nThe goal is to find counts = [m, n] that make the probability of the difference condition close to target_prob.\"\"\"\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06",
        "solution_func": "def g(target_prob=0.75):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-06:\n            return [m, n]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=12) -> bool:\n    \"\"\"Check if there exist three numbers in the list whose sum is equal to the target value.\"\"\"\n    return any(target - x - y in arr for x in arr for y in arr)\ndef g(target=12):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 29,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=12) -> bool:\n    \"\"\"Check if there exist three numbers in the list whose sum is equal to the target value.\"\"\"\n    return any(target - x - y in arr for x in arr for y in arr)",
        "solution_func": "def g(target=12):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two adjacent numbers in the list whose sum is equal to the target value.\"\"\"\n    return any(arr[i] + arr[i+1] == target for i in range(len(arr)-1))\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 29,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two adjacent numbers in the list whose sum is equal to the target value.\"\"\"\n    return any(arr[i] + arr[i+1] == target for i in range(len(arr)-1))",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose difference is equal to the target value.\"\"\"\n    return any(x - y == target for x in arr for y in arr)\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 29,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose difference is equal to the target value.\"\"\"\n    return any(x - y == target for x in arr for y in arr)",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the given array that add up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(arr: List[int], target=10):\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return [arr[i], arr[j]]\n    return []\nassert f(g())\n",
        "emb": null,
        "idx_generation": 29,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the given array that add up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(arr: List[int], target=10):\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return [arr[i], arr[j]]\n    return []",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, k=2) -> bool:\n    \"\"\"Check if the given string is a palindrome when every k-th character is removed.\"\"\"\n    new_s = ''\n    for i in range(len(s)):\n        if (i + 1) % k != 0:\n            new_s += s[i]\n    return new_s == new_s[::-1]\ndef g(s: str, k=2):\n    new_s = ''\n    for i in range(len(s)):\n        if (i + 1) % k != 0:\n            new_s += s[i]\n    return new_s\nassert f(g())\n",
        "emb": null,
        "idx_generation": 29,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, k=2) -> bool:\n    \"\"\"Check if the given string is a palindrome when every k-th character is removed.\"\"\"\n    new_s = ''\n    for i in range(len(s)):\n        if (i + 1) % k != 0:\n            new_s += s[i]\n    return new_s == new_s[::-1]",
        "solution_func": "def g(s: str, k=2):\n    new_s = ''\n    for i in range(len(s)):\n        if (i + 1) % k != 0:\n            new_s += s[i]\n    return new_s",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subarray in the given array that sums up to the target value.\"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum == target or prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\ndef g(arr: List[int], target=0):\n    prefix_sum = 0\n    prefix_sums = set()\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum == target or prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\nassert f(g())\n",
        "emb": null,
        "idx_generation": 29,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subarray in the given array that sums up to the target value.\"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum == target or prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False",
        "solution_func": "def g(arr: List[int], target=0):\n    prefix_sum = 0\n    prefix_sums = set()\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum == target or prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0, k=2) -> bool:\n    \"\"\"Find if there exists a pair of k consecutive numbers in the list which sums up to the target\"\"\"\n    return any(sum(nums[i:i+k]) == target for i in range(len(nums)-k+1))\ndef g(target=0, k=2):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 29,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0, k=2) -> bool:\n    \"\"\"Find if there exists a pair of k consecutive numbers in the list which sums up to the target\"\"\"\n    return any(sum(nums[i:i+k]) == target for i in range(len(nums)-k+1))",
        "solution_func": "def g(target=0, k=2):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], count=3) -> bool:\n    \"\"\"Check if there are at least count number of names that contain the letter 'a'\"\"\"\n    return sum(name.count('a') for name in names) >= count\ndef g(count=3):\n    names = ['Alice', 'Bob', 'Charlie', 'David', 'Eva']\n    return names\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 29,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(names: List[str], count=3) -> bool:\n    \"\"\"Check if there are at least count number of names that contain the letter 'a'\"\"\"\n    return sum(name.count('a') for name in names) >= count",
        "solution_func": "def g(count=3):\n    names = ['Alice', 'Bob', 'Charlie', 'David', 'Eva']\n    return names",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(grid: List[List[int]], target=0) -> bool:\n    \"\"\"Find if there exists a row or column in the grid whose sum is equal to the target\"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n    row_sums = [sum(row) for row in grid]\n    col_sums = [sum(col) for col in zip(*grid)]\n    return target in row_sums or target in col_sums\ndef g():\n    grid = [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]\n    return grid\nassert f(g())\n",
        "emb": null,
        "idx_generation": 29,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(grid: List[List[int]], target=0) -> bool:\n    \"\"\"Find if there exists a row or column in the grid whose sum is equal to the target\"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n    row_sums = [sum(row) for row in grid]\n    col_sums = [sum(col) for col in zip(*grid)]\n    return target in row_sums or target in col_sums",
        "solution_func": "def g():\n    grid = [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]\n    return grid",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 29,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[11, 23, 35, 47, 59, 71, 83, 95, 107, 119], target_sum=330) -> bool:\n    \"\"\"Find the maximum possible sum of a subset of numbers from the list that is less than or equal to the target sum\"\"\"\n    def subset_sum(nums, n, target_sum):\n        if target_sum == 0:\n            return 0\n        if n == 0 and target_sum != 0:\n            return float('-inf')\n        if nums[n-1] > target_sum:\n            return subset_sum(nums, n-1, target_sum)\n        return max(subset_sum(nums, n-1, target_sum), nums[n-1] + subset_sum(nums, n-1, target_sum-nums[n-1]))\n    return subset_sum(nums, len(nums), target_sum)\ndef g(nums=[11, 23, 35, 47, 59, 71, 83, 95, 107, 119], target_sum=330):\n    max_sum = 0\n    for i in range(len(nums)):\n        if nums[i] <= target_sum:\n            max_sum = max(max_sum, nums[i])\n    return max_sum\nassert f(g())\n",
        "emb": null,
        "idx_generation": 30,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[11, 23, 35, 47, 59, 71, 83, 95, 107, 119], target_sum=330) -> bool:\n    \"\"\"Find the maximum possible sum of a subset of numbers from the list that is less than or equal to the target sum\"\"\"\n    def subset_sum(nums, n, target_sum):\n        if target_sum == 0:\n            return 0\n        if n == 0 and target_sum != 0:\n            return float('-inf')\n        if nums[n-1] > target_sum:\n            return subset_sum(nums, n-1, target_sum)\n        return max(subset_sum(nums, n-1, target_sum), nums[n-1] + subset_sum(nums, n-1, target_sum-nums[n-1]))\n    return subset_sum(nums, len(nums), target_sum)",
        "solution_func": "def g(nums=[11, 23, 35, 47, 59, 71, 83, 95, 107, 119], target_sum=330):\n    max_sum = 0\n    for i in range(len(nums)):\n        if nums[i] <= target_sum:\n            max_sum = max(max_sum, nums[i])\n    return max_sum",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport itertools\n\ndef f(n: int, nums=[11, 23, 35, 47, 59, 71, 83, 95, 107, 119], target_sum=330) -> bool:\n    \"\"\"Find the number of combinations of numbers from the list that add up to the target sum\"\"\"\n    def subset_sum(nums, n, target_sum):\n        if target_sum == 0:\n            return 1\n        if n == 0 and target_sum != 0:\n            return 0\n        if nums[n-1] > target_sum:\n            return subset_sum(nums, n-1, target_sum)\n        return subset_sum(nums, n-1, target_sum) + subset_sum(nums, n-1, target_sum-nums[n-1])\n    return subset_sum(nums, len(nums), target_sum)\ndef g(nums=[11, 23, 35, 47, 59, 71, 83, 95, 107, 119], target_sum=330):\n    count = 0\n    for r in range(1, len(nums) + 1):\n        combinations = itertools.combinations(nums, r)\n        for comb in combinations:\n            if sum(comb) == target_sum:\n                count += 1\n    return count\nassert f(g())\n",
        "emb": null,
        "idx_generation": 30,
        "target_skills": null,
        "problem_func": "from typing import*\nimport itertools\n\ndef f(n: int, nums=[11, 23, 35, 47, 59, 71, 83, 95, 107, 119], target_sum=330) -> bool:\n    \"\"\"Find the number of combinations of numbers from the list that add up to the target sum\"\"\"\n    def subset_sum(nums, n, target_sum):\n        if target_sum == 0:\n            return 1\n        if n == 0 and target_sum != 0:\n            return 0\n        if nums[n-1] > target_sum:\n            return subset_sum(nums, n-1, target_sum)\n        return subset_sum(nums, n-1, target_sum) + subset_sum(nums, n-1, target_sum-nums[n-1])\n    return subset_sum(nums, len(nums), target_sum)",
        "solution_func": "def g(nums=[11, 23, 35, 47, 59, 71, 83, 95, 107, 119], target_sum=330):\n    count = 0\n    for r in range(1, len(nums) + 1):\n        combinations = itertools.combinations(nums, r)\n        for comb in combinations:\n            if sum(comb) == target_sum:\n                count += 1\n    return count",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, nums=[11, 23, 35, 47, 59, 71, 83, 95, 107, 119], target_sum=330) -> bool:\n    \"\"\"Find the smallest subset of numbers from the list that add up to the target sum\"\"\"\n    def subset_sum(nums, n, target_sum):\n        if target_sum == 0:\n            return []\n        if n == 0 and target_sum != 0:\n            return None\n        if nums[n-1] > target_sum:\n            return subset_sum(nums, n-1, target_sum)\n        subset1 = subset_sum(nums, n-1, target_sum)\n        subset2 = subset_sum(nums, n-1, target_sum-nums[n-1])\n        if subset1 is None and subset2 is None:\n            return None\n        if subset1 is None:\n            return [nums[n-1]] + subset2\n        if subset2 is None:\n            return subset1\n        if sum(subset1) < sum(subset2):\n            return subset1\n        else:\n            return [nums[n-1]] + subset2\n    return subset_sum(nums, len(nums), target_sum)\ndef g(nums=[11, 23, 35, 47, 59, 71, 83, 95, 107, 119], target_sum=330):\n    smallest_subset = None\n    for r in range(1, len(nums) + 1):\n        combinations = itertools.combinations(nums, r)\n        for comb in combinations:\n            if sum(comb) == target_sum:\n                if smallest_subset is None or sum(comb) < sum(smallest_subset):\n                    smallest_subset = comb\n    return list(smallest_subset)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 30,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, nums=[11, 23, 35, 47, 59, 71, 83, 95, 107, 119], target_sum=330) -> bool:\n    \"\"\"Find the smallest subset of numbers from the list that add up to the target sum\"\"\"\n    def subset_sum(nums, n, target_sum):\n        if target_sum == 0:\n            return []\n        if n == 0 and target_sum != 0:\n            return None\n        if nums[n-1] > target_sum:\n            return subset_sum(nums, n-1, target_sum)\n        subset1 = subset_sum(nums, n-1, target_sum)\n        subset2 = subset_sum(nums, n-1, target_sum-nums[n-1])\n        if subset1 is None and subset2 is None:\n            return None\n        if subset1 is None:\n            return [nums[n-1]] + subset2\n        if subset2 is None:\n            return subset1\n        if sum(subset1) < sum(subset2):\n            return subset1\n        else:\n            return [nums[n-1]] + subset2\n    return subset_sum(nums, len(nums), target_sum)",
        "solution_func": "def g(nums=[11, 23, 35, 47, 59, 71, 83, 95, 107, 119], target_sum=330):\n    smallest_subset = None\n    for r in range(1, len(nums) + 1):\n        combinations = itertools.combinations(nums, r)\n        for comb in combinations:\n            if sum(comb) == target_sum:\n                if smallest_subset is None or sum(comb) < sum(smallest_subset):\n                    smallest_subset = comb\n    return list(smallest_subset)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the list that multiply to the target value\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] * li[j] == target:\n                return True\n    return False\ndef g(target=100):\n    return [10, target//10]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 30,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the list that multiply to the target value\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] * li[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=100):\n    return [10, target//10]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target value and are divisible by 5\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if (li[i] + li[j]) % 5 == 0 and li[i] + li[j] == target:\n                return True\n    return False\ndef g(target=100):\n    return [50, target-50]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 30,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target value and are divisible by 5\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if (li[i] + li[j]) % 5 == 0 and li[i] + li[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=100):\n    return [50, target-50]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target value and have a difference of at least 10\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if abs(li[i] - li[j]) >= 10 and li[i] + li[j] == target:\n                return True\n    return False\ndef g(target=100):\n    return [45, target-45]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 30,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target value and have a difference of at least 10\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if abs(li[i] - li[j]) >= 10 and li[i] + li[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=100):\n    return [45, target-45]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, nums=[287260676668, 33263981357337, 47314720, 295717, 2957170], lower_bound=98647) -> bool:\n    \"\"\"Check if x is a common divisor of the list of integers.\"\"\"\n    return all((i % x == 0 for i in nums)) and x >= lower_bound\ndef g(nums=[287260676668, 33263981357337, 47314720, 295717, 2957170], lower_bound=98647):\n    x = min(nums)\n    for i in nums:\n        while i % x != 0:\n            x -= 1\n    return x\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 30,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, nums=[287260676668, 33263981357337, 47314720, 295717, 2957170], lower_bound=98647) -> bool:\n    \"\"\"Check if x is a common divisor of the list of integers.\"\"\"\n    return all((i % x == 0 for i in nums)) and x >= lower_bound",
        "solution_func": "def g(nums=[287260676668, 33263981357337, 47314720, 295717, 2957170], lower_bound=98647):\n    x = min(nums)\n    for i in nums:\n        while i % x != 0:\n            x -= 1\n    return x",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=10) -> bool:\n    \"\"\"Check if the target value is present in the matrix.\"\"\"\n    return np.any(matrix == target)\n    \ndef g(target=10):\n    matrix = np.random.randint(1, 20, size=(4, 4))\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 30,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target=10) -> bool:\n    \"\"\"Check if the target value is present in the matrix.\"\"\"\n    return np.any(matrix == target)",
        "solution_func": "def g(target=10):\n    matrix = np.random.randint(1, 20, size=(4, 4))\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport itertools\n\ndef f(n: int, nums=[287260676668, 33263981357337, 47314720, 295717, 2957170], lower_bound=98647) -> bool:\n    \"\"\"Check if n is a divisor of the list of integers.\"\"\"\n    return all((n % i == 0 for i in nums)) and n >= lower_bound\n\ndef g(nums=[287260676668, 33263981357337, 47314720, 295717, 2957170], lower_bound=98647):\n    combinations = list(itertools.combinations(nums, 2))\n    divisors = []\n    for a, b in combinations:\n        if a > b:\n            x, y = b, a\n        else:\n            x, y = a, b\n        while y % x != 0:\n            x, y = y % x, x\n        divisors.append(x)\n    return max(divisors)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 30,
        "target_skills": null,
        "problem_func": "from typing import*\nimport itertools\n\ndef f(n: int, nums=[287260676668, 33263981357337, 47314720, 295717, 2957170], lower_bound=98647) -> bool:\n    \"\"\"Check if n is a divisor of the list of integers.\"\"\"\n    return all((n % i == 0 for i in nums)) and n >= lower_bound",
        "solution_func": "def g(nums=[287260676668, 33263981357337, 47314720, 295717, 2957170], lower_bound=98647):\n    combinations = list(itertools.combinations(nums, 2))\n    divisors = []\n    for a, b in combinations:\n        if a > b:\n            x, y = b, a\n        else:\n            x, y = a, b\n        while y % x != 0:\n            x, y = y % x, x\n        divisors.append(x)\n    return max(divisors)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, s='apple') -> bool:\n    \"\"\"Check if a string contains a specific substring and is equal to a given word.\"\"\"\n    return s in x and x == s\ndef g(s='apple'):\n    return s\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 30,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, s='apple') -> bool:\n    \"\"\"Check if a string contains a specific substring and is equal to a given word.\"\"\"\n    return s in x and x == s",
        "solution_func": "def g(s='apple'):\n    return s",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, digit=1) -> bool:\n    \"\"\"Find an integer whose perfect square begins with a specific digit in its decimal representation.\"\"\"\n    return str(n * n).startswith(str(digit))\ndef g(digit=1):\n    return int(int(str(digit) + '0' * 9) ** 0.5) + 1\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 31,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, digit=1) -> bool:\n    \"\"\"Find an integer whose perfect square begins with a specific digit in its decimal representation.\"\"\"\n    return str(n * n).startswith(str(digit))",
        "solution_func": "def g(digit=1):\n    return int(int(str(digit) + '0' * 9) ** 0.5) + 1",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, num_digits=5) -> bool:\n    \"\"\"Find an integer whose perfect square has a specific number of digits in its decimal representation.\"\"\"\n    return len(str(n * n)) == num_digits\ndef g(num_digits=5):\n    return int('1' + '0' * (num_digits - 1) + '0') ** 0.5 + 1\nassert f(g())\n",
        "emb": null,
        "idx_generation": 31,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, num_digits=5) -> bool:\n    \"\"\"Find an integer whose perfect square has a specific number of digits in its decimal representation.\"\"\"\n    return len(str(n * n)) == num_digits",
        "solution_func": "def g(num_digits=5):\n    return int('1' + '0' * (num_digits - 1) + '0') ** 0.5 + 1",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, last_digit=9) -> bool:\n    \"\"\"Find an integer whose perfect square ends with a specific digit in its decimal representation.\"\"\"\n    return str(n * n).endswith(str(last_digit))\ndef g(last_digit=9):\n    return int('1' + '0' * 9) ** 0.5 + int(str(last_digit)[0])\nassert f(g())\n",
        "emb": null,
        "idx_generation": 31,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, last_digit=9) -> bool:\n    \"\"\"Find an integer whose perfect square ends with a specific digit in its decimal representation.\"\"\"\n    return str(n * n).endswith(str(last_digit))",
        "solution_func": "def g(last_digit=9):\n    return int('1' + '0' * 9) ** 0.5 + int(str(last_digit)[0])",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, limit=1000) -> bool:\n    \"\"\"Find an integer whose perfect square is less than or equal to the limit.\"\"\"\n    return n * n <= limit\n\ndef g(limit=1000):\n    return int(limit ** 0.5)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 31,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, limit=1000) -> bool:\n    \"\"\"Find an integer whose perfect square is less than or equal to the limit.\"\"\"\n    return n * n <= limit",
        "solution_func": "def g(limit=1000):\n    return int(limit ** 0.5)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if the sum of all elements in lst is equal to the target\"\"\"\n    return sum(lst) == target\n\ndef g(target=100):\n    return [20, 30, 50]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 31,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if the sum of all elements in lst is equal to the target\"\"\"\n    return sum(lst) == target",
        "solution_func": "def g(target=100):\n    return [20, 30, 50]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import Any\n\ndef f(x: Any, y: Any) -> bool:\n    \"\"\"Check if x is an instance of the same type as y\"\"\"\n    return type(x) == type(y)\n\ndef g():\n    return 'hello', 123\n\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 31,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import Any\n\ndef f(x: Any, y: Any) -> bool:\n    \"\"\"Check if x is an instance of the same type as y\"\"\"\n    return type(x) == type(y)",
        "solution_func": "def g():\n    return 'hello', 123",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: List[int], n=3, s=12) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=3, s=12):\n    x = [2] * n\n    x[0] = s - n + 2\n    return x\nassert f(g())\n",
        "emb": null,
        "idx_generation": 31,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=3, s=12) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])",
        "solution_func": "def g(n=3, s=12):\n    x = [2] * n\n    x[0] = s - n + 2\n    return x",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: List[int], n=4, s=30) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=4, s=30):\n    x = [s // n] * n\n    return x\nassert f(g())\n",
        "emb": null,
        "idx_generation": 31,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=4, s=30) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])",
        "solution_func": "def g(n=4, s=30):\n    x = [s // n] * n\n    return x",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=2, s=10) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=2, s=10):\n    x = [s - n + 1, 1]\n    return x\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 31,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=2, s=10) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])",
        "solution_func": "def g(n=2, s=10):\n    x = [s - n + 1, 1]\n    return x",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=5) -> bool:\n    \"\"\"Determine if a number is divisible by both a and b\"\"\"\n    return n % a == 0 and n % b == 0\ndef g(a=3, b=5):\n    return a * b\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 31,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=3, b=5) -> bool:\n    \"\"\"Determine if a number is divisible by both a and b\"\"\"\n    return n % a == 0 and n % b == 0",
        "solution_func": "def g(a=3, b=5):\n    return a * b",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Find a list of numbers where the product is equal to the target\"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n    return product == target\n\ndef g(target=5):\n    return [1, target]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 32,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Find a list of numbers where the product is equal to the target\"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n    return product == target",
        "solution_func": "def g(target=5):\n    return [1, target]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=10) -> bool:\n    \"\"\"Find a number that when multiplied by itself is approximately equal to a\"\"\"\n    return math.isclose(x * x, a, rel_tol=1e-3) and x > 0\n\ndef g(a=10):\n    return math.sqrt(a)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 32,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: float, a=10) -> bool:\n    \"\"\"Find a number that when multiplied by itself is approximately equal to a\"\"\"\n    return math.isclose(x * x, a, rel_tol=1e-3) and x > 0",
        "solution_func": "def g(a=10):\n    return math.sqrt(a)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a list of numbers where the sum of the squares is equal to the target\"\"\"\n    sum_of_squares = sum([num ** 2 for num in nums])\n    return sum_of_squares == target\n\ndef g(target=100):\n    return [int((target / 2) ** 0.5)] * 2\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 32,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a list of numbers where the sum of the squares is equal to the target\"\"\"\n    sum_of_squares = sum([num ** 2 for num in nums])\n    return sum_of_squares == target",
        "solution_func": "def g(target=100):\n    return [int((target / 2) ** 0.5)] * 2",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=1000000000) -> bool:\n    \"\"\"Check if x is greater than or equal to a\"\"\"\n    return x >= a\ndef g(a=1000000000):\n    return a\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 32,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=1000000000) -> bool:\n    \"\"\"Check if x is greater than or equal to a\"\"\"\n    return x >= a",
        "solution_func": "def g(a=1000000000):\n    return a",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: int, a=5) -> bool:\n    \"\"\"Check if the absolute value of x is less than a\"\"\"\n    return abs(x) < a\ndef g(a=5):\n    return -a\nassert f(g())\n",
        "emb": null,
        "idx_generation": 32,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=5) -> bool:\n    \"\"\"Check if the absolute value of x is less than a\"\"\"\n    return abs(x) < a",
        "solution_func": "def g(a=5):\n    return -a",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=100) -> bool:\n    \"\"\"Check if x is divisible by a\"\"\"\n    return x % a == 0\ndef g(a=100):\n    return a\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 32,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=100) -> bool:\n    \"\"\"Check if x is divisible by a\"\"\"\n    return x % a == 0",
        "solution_func": "def g(a=100):\n    return a",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0, n=2) -> bool:\n    \"\"\"Find a pair of numbers in a list whose sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums: List[int], target=0, n=2):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 32,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0, n=2) -> bool:\n    \"\"\"Find a pair of numbers in a list whose sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums: List[int], target=0, n=2):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0, n=3) -> bool:\n    \"\"\"Find a triplet of numbers in a list whose sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums: List[int], target=0, n=3):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 32,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0, n=3) -> bool:\n    \"\"\"Find a triplet of numbers in a list whose sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(nums: List[int], target=0, n=3):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0, n=4) -> bool:\n    \"\"\"Find a quadruplet of numbers in a list whose sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                for l in range(k+1, len(nums)):\n                    if nums[i] + nums[j] + nums[k] + nums[l] == target:\n                        return True\n    return False\n\ndef g(nums: List[int], target=0, n=4):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 32,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0, n=4) -> bool:\n    \"\"\"Find a quadruplet of numbers in a list whose sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                for l in range(k+1, len(nums)):\n                    if nums[i] + nums[j] + nums[k] + nums[l] == target:\n                        return True\n    return False",
        "solution_func": "def g(nums: List[int], target=0, n=4):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=100, b=50) -> bool:\n    \"\"\"Determine if the absolute value of x is equal to the sum of a and b\"\"\"\n    return abs(x) == a + b\ndef g(a=100, b=50):\n    return a + b\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 32,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=100, b=50) -> bool:\n    \"\"\"Determine if the absolute value of x is equal to the sum of a and b\"\"\"\n    return abs(x) == a + b",
        "solution_func": "def g(a=100, b=50):\n    return a + b",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3, target=7) -> bool:\n    \"\"\"Find if there exists a sublist of length k whose sum is equal to the target.\"\"\"\n    return any(sum(nums[i:i+k]) == target for i in range(len(nums) - k + 1))\ndef g(k=3, target=7):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 33,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], k=3, target=7) -> bool:\n    \"\"\"Find if there exists a sublist of length k whose sum is equal to the target.\"\"\"\n    return any(sum(nums[i:i+k]) == target for i in range(len(nums) - k + 1))",
        "solution_func": "def g(k=3, target=7):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\"\"\"\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[0])))\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 33,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\"\"\"\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[0])))",
        "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 33,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], tot=243, n=9) -> bool:\n    \"\"\"Find n distinct positive even integers that sum to tot\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 == 0 for i in nums))\ndef g(tot=243, n=9):\n    return list(range(2, 2 * n + 1, 2)) + [tot - sum(range(2, 2 * n + 1, 2))]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 33,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], tot=243, n=9) -> bool:\n    \"\"\"Find n distinct positive even integers that sum to tot\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 == 0 for i in nums))",
        "solution_func": "def g(tot=243, n=9):\n    return list(range(2, 2 * n + 1, 2)) + [tot - sum(range(2, 2 * n + 1, 2))]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], tot=64, n=8) -> bool:\n    \"\"\"Find n distinct positive integers that sum to tot and are perfect squares\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((int(i ** 0.5) ** 2 == i for i in nums))\ndef g(tot=64, n=8):\n    return [i ** 2 for i in range(1, n + 1)] + [tot - sum(i ** 2 for i in range(1, n + 1))]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 33,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], tot=64, n=8) -> bool:\n    \"\"\"Find n distinct positive integers that sum to tot and are perfect squares\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((int(i ** 0.5) ** 2 == i for i in nums))",
        "solution_func": "def g(tot=64, n=8):\n    return [i ** 2 for i in range(1, n + 1)] + [tot - sum(i ** 2 for i in range(1, n + 1))]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], tot=50, n=10) -> bool:\n    \"\"\"Find n distinct positive integers that sum to tot and are prime numbers\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((is_prime(i) for i in nums))\ndef g(tot=50, n=10):\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n    return primes + [tot - sum(primes)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 33,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], tot=50, n=10) -> bool:\n    \"\"\"Find n distinct positive integers that sum to tot and are prime numbers\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((is_prime(i) for i in nums))",
        "solution_func": "def g(tot=50, n=10):\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n    return primes + [tot - sum(primes)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, s1='apple', s2='orange', count1=3, count2=5) -> bool:\n    \"\"\"Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and starts and ends with the same 5 characters\"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[:5] == s[-5:])\ndef g(s1='apple', s2='orange', count1=3, count2=5):\n    if s1 == s2:\n        ans = (s1 + '?') * count1\n    elif s1.count(s2):\n        ans = (s1 + '?') * count1\n        ans += (s2 + '?') * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + '?') * count2\n        ans += (s1 + '?') * (count1 - ans.count(s1))\n    return '?' * 5 + ans + '?' * 5\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 33,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, s1='apple', s2='orange', count1=3, count2=5) -> bool:\n    \"\"\"Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and starts and ends with the same 5 characters\"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[:5] == s[-5:])",
        "solution_func": "def g(s1='apple', s2='orange', count1=3, count2=5):\n    if s1 == s2:\n        ans = (s1 + '?') * count1\n    elif s1.count(s2):\n        ans = (s1 + '?') * count1\n        ans += (s2 + '?') * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + '?') * count2\n        ans += (s1 + '?') * (count1 - ans.count(s1))\n    return '?' * 5 + ans + '?' * 5",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=100, s=5050) -> bool:\n    \"\"\"Construct a list of n distinct integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n=100, s=5050):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n    x = x + [s - sum(x)]\n    return x\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 33,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=100, s=5050) -> bool:\n    \"\"\"Construct a list of n distinct integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)",
        "solution_func": "def g(n=100, s=5050):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n    x = x + [s - sum(x)]\n    return x",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: float, coeffs=[3.5, 2.1, -1.0]) -> bool:\n    \"\"\"Find any (real) solution to:  a x^2 + b x + c where coeffs = [a, b, c].\n\"\"\"\n    (a, b, c) = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-06\ndef g(coeffs=[3.5, 2.1, -1.0]):\n    (a, b, c) = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 33,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: float, coeffs=[3.5, 2.1, -1.0]) -> bool:\n    \"\"\"Find any (real) solution to:  a x^2 + b x + c where coeffs = [a, b, c].\n\"\"\"\n    (a, b, c) = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-06",
        "solution_func": "def g(coeffs=[3.5, 2.1, -1.0]):\n    (a, b, c) = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the list that multiply to the target value\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] * li[j] == target:\n                return True\n    return False\ndef g(target=100):\n    return [target//2, 2]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 33,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the list that multiply to the target value\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] * li[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=100):\n    return [target//2, 2]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(lst: List[int], target=48) -> bool:\n    \"\"\"Find a pair of numbers from the list that add up to the target value\"\"\"\n    return any((lst[i] + lst[j] == target for i in range(len(lst)) for j in range(i+1, len(lst))))\ndef g(target=48):\n    return [5, 20, 10, 18, 15, 25]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 34,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], target=48) -> bool:\n    \"\"\"Find a pair of numbers from the list that add up to the target value\"\"\"\n    return any((lst[i] + lst[j] == target for i in range(len(lst)) for j in range(i+1, len(lst))))",
        "solution_func": "def g(target=48):\n    return [5, 20, 10, 18, 15, 25]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Find a path in the matrix that adds up to the target value\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    def dfs(i, j, total):\n        if total == target:\n            return True\n        if i < 0 or i >= rows or j < 0 or j >= cols:\n            return False\n        return dfs(i+1, j, total + matrix[i][j]) or dfs(i, j+1, total + matrix[i][j])\n    return dfs(0, 0, 0)\ndef g(target=100):\n    return [[5, 7, 10], [4, 2, 8], [15, 3, 6], [9, 12, 1]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 34,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Find a path in the matrix that adds up to the target value\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    def dfs(i, j, total):\n        if total == target:\n            return True\n        if i < 0 or i >= rows or j < 0 or j >= cols:\n            return False\n        return dfs(i+1, j, total + matrix[i][j]) or dfs(i, j+1, total + matrix[i][j])\n    return dfs(0, 0, 0)",
        "solution_func": "def g(target=100):\n    return [[5, 7, 10], [4, 2, 8], [15, 3, 6], [9, 12, 1]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Find a combination of numbers that can be used with arithmetic operations to achieve the target value\"\"\"\n    operators = ['+', '-', '*', '/']\n    def dfs(idx, total):\n        if idx == len(nums):\n            return total == target\n        for op in operators:\n            if op == '+':\n                if dfs(idx + 1, total + nums[idx]):\n                    return True\n            elif op == '-':\n                if dfs(idx + 1, total - nums[idx]):\n                    return True\n            elif op == '*':\n                if dfs(idx + 1, total * nums[idx]):\n                    return True\n            elif op == '/':\n                if nums[idx] != 0 and total % nums[idx] == 0 and dfs(idx + 1, total // nums[idx]):\n                    return True\n        return False\n    return dfs(1, nums[0])\ndef g(target=24):\n    return [5, 7, 2, 4]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 34,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Find a combination of numbers that can be used with arithmetic operations to achieve the target value\"\"\"\n    operators = ['+', '-', '*', '/']\n    def dfs(idx, total):\n        if idx == len(nums):\n            return total == target\n        for op in operators:\n            if op == '+':\n                if dfs(idx + 1, total + nums[idx]):\n                    return True\n            elif op == '-':\n                if dfs(idx + 1, total - nums[idx]):\n                    return True\n            elif op == '*':\n                if dfs(idx + 1, total * nums[idx]):\n                    return True\n            elif op == '/':\n                if nums[idx] != 0 and total % nums[idx] == 0 and dfs(idx + 1, total // nums[idx]):\n                    return True\n        return False\n    return dfs(1, nums[0])",
        "solution_func": "def g(target=24):\n    return [5, 7, 2, 4]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains any duplicate elements. Return True if it does, otherwise return False.\"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 34,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains any duplicate elements. Return True if it does, otherwise return False.\"\"\"\n    return len(nums) != len(set(nums))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if the given string is a palindrome. Return True if it is, otherwise return False.\"\"\"\n    return string == string[::-1]\n\ndef g():\n    return \"madam\"\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 34,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if the given string is a palindrome. Return True if it is, otherwise return False.\"\"\"\n    return string == string[::-1]",
        "solution_func": "def g():\n    return \"madam\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric. Return True if it is, otherwise return False.\"\"\"\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[i])))\n\ndef g():\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 34,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric. Return True if it is, otherwise return False.\"\"\"\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[i])))",
        "solution_func": "def g():\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5], target=8) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose sum is equal to the target number.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(nums=[1, 2, 3, 4, 5], target=8):\n    return [3, 5]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 34,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5], target=8) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose sum is equal to the target number.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i + 1, len(nums)))",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5], target=8):\n    return [3, 5]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Given a list of integers and a target number, find any three numbers in the list that sum up to the target.\nSample Input:\n[4, 5, 7, 11, 9]\nSample Output:\n(4, 5, 6)\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target) for i in range(len(nums)) for j in range(i + 1, len(nums)) for k in range(j + 1, len(nums)))\ndef g(target=15):\n    return [4, 5, 6]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 34,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Given a list of integers and a target number, find any three numbers in the list that sum up to the target.\nSample Input:\n[4, 5, 7, 11, 9]\nSample Output:\n(4, 5, 6)\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target) for i in range(len(nums)) for j in range(i + 1, len(nums)) for k in range(j + 1, len(nums)))",
        "solution_func": "def g(target=15):\n    return [4, 5, 6]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='racecar') -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\ndef g(target='racecar'):\n    return target\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 34,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='racecar') -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]",
        "solution_func": "def g(target='racecar'):\n    return target",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, s='aaabbbccc') -> bool:\n    \"\"\"Given a string s, find a split dividing the string in half at n such that each piece has an equal number of\nletters 'a', 'b', and 'c'.\"\"\"\n    sub = s[n:n + len(s) // 2]\n    return n >= 0 and s.count('a') == 2 * sub.count('a') and s.count('b') == 2 * sub.count('b') and s.count('c') == 2 * sub.count('c')\ndef g(s='aaabbbccc'):\n    if s == '':\n        return 0\n    return next((n for n in range(len(s) // 2) if s[n:n + len(s) // 2].count('a') == len(s) // 6))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 34,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, s='aaabbbccc') -> bool:\n    \"\"\"Given a string s, find a split dividing the string in half at n such that each piece has an equal number of\nletters 'a', 'b', and 'c'.\"\"\"\n    sub = s[n:n + len(s) // 2]\n    return n >= 0 and s.count('a') == 2 * sub.count('a') and s.count('b') == 2 * sub.count('b') and s.count('c') == 2 * sub.count('c')",
        "solution_func": "def g(s='aaabbbccc'):\n    if s == '':\n        return 0\n    return next((n for n in range(len(s) // 2) if s[n:n + len(s) // 2].count('a') == len(s) // 6))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], target_name=\"Alice\") -> bool:\n    \"\"\"Find if the target_name is present in the list of names\"\"\"\n    return target_name in names\ndef g(target_name=\"Alice\"):\n    return [\"John\", \"Bob\", \"Alice\", \"Emily\"]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 35,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(names: List[str], target_name=\"Alice\") -> bool:\n    \"\"\"Find if the target_name is present in the list of names\"\"\"\n    return target_name in names",
        "solution_func": "def g(target_name=\"Alice\"):\n    return [\"John\", \"Bob\", \"Alice\", \"Emily\"]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix=\"pre\") -> bool:\n    \"\"\"Check if all words start with the given prefix\"\"\"\n    return all((word.startswith(prefix) for word in words))\ndef g(prefix=\"pre\"):\n    return [\"prefix\", \"prehistoric\", \"preparation\", \"pretzel\"]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 35,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], prefix=\"pre\") -> bool:\n    \"\"\"Check if all words start with the given prefix\"\"\"\n    return all((word.startswith(prefix) for word in words))",
        "solution_func": "def g(prefix=\"pre\"):\n    return [\"prefix\", \"prehistoric\", \"preparation\", \"pretzel\"]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Check if any two numbers in the list add up to the target_sum\"\"\"\n    return any((numbers[i] + numbers[j] == target_sum for i in range(len(numbers)) for j in range(i+1, len(numbers))))\ndef g(target_sum=100):\n    return [10, 20, 30, 40, 50, 60]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 35,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Check if any two numbers in the list add up to the target_sum\"\"\"\n    return any((numbers[i] + numbers[j] == target_sum for i in range(len(numbers)) for j in range(i+1, len(numbers))))",
        "solution_func": "def g(target_sum=100):\n    return [10, 20, 30, 40, 50, 60]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(e: List[int], a=3, b=-2, c=2, d=2022) -> bool:\n    \"\"\"Find the point of intersection between a line and a quadratic curve.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fifth decimal digit is required.\"\"\"\n    x = e[0] / e[1]\n    y = a * x ** 2 + b * x + c\n    return abs(y - d) < 10 ** (-5)\ndef g(a=3, b=-2, c=2, d=2022):\n    return [-(b + (b ** 2 - 4 * a * (c - d)) ** 0.5) / (2 * a), a * x ** 2 + b * x + c]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 35,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(e: List[int], a=3, b=-2, c=2, d=2022) -> bool:\n    \"\"\"Find the point of intersection between a line and a quadratic curve.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fifth decimal digit is required.\"\"\"\n    x = e[0] / e[1]\n    y = a * x ** 2 + b * x + c\n    return abs(y - d) < 10 ** (-5)",
        "solution_func": "def g(a=3, b=-2, c=2, d=2022):\n    return [-(b + (b ** 2 - 4 * a * (c - d)) ** 0.5) / (2 * a), a * x ** 2 + b * x + c]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(e: List[int], a=4, b=-3, c=3, d=2023) -> bool:\n    \"\"\"Check if a point lies inside a circle.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fifth decimal digit is required.\"\"\"\n    x, y = e\n    return (x - a) ** 2 + (y - b) ** 2 < c ** 2 and (x - a) ** 2 + (y - b) ** 2 > d ** 2\ndef g(a=4, b=-3, c=3, d=2023):\n    return [a, b]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 35,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(e: List[int], a=4, b=-3, c=3, d=2023) -> bool:\n    \"\"\"Check if a point lies inside a circle.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fifth decimal digit is required.\"\"\"\n    x, y = e\n    return (x - a) ** 2 + (y - b) ** 2 < c ** 2 and (x - a) ** 2 + (y - b) ** 2 > d ** 2",
        "solution_func": "def g(a=4, b=-3, c=3, d=2023):\n    return [a, b]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: List[int], a=5, b=-4, c=4, d=2024) -> bool:\n    \"\"\"Check if a point lies inside an ellipse.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fifth decimal digit is required.\"\"\"\n    x, y = e\n    return ((x - a) ** 2) / (c ** 2) + ((y - b) ** 2) / (d ** 2) < 1\ndef g(a=5, b=-4, c=4, d=2024):\n    return [a, b]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 35,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(e: List[int], a=5, b=-4, c=4, d=2024) -> bool:\n    \"\"\"Check if a point lies inside an ellipse.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fifth decimal digit is required.\"\"\"\n    x, y = e\n    return ((x - a) ** 2) / (c ** 2) + ((y - b) ** 2) / (d ** 2) < 1",
        "solution_func": "def g(a=5, b=-4, c=4, d=2024):\n    return [a, b]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=15) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any((numbers[i] + numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target=15):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return numbers\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 35,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=15) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any((numbers[i] + numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))",
        "solution_func": "def g(target=15):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return numbers",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str], char='e', count=5) -> bool:\n    \"\"\"Check if there are at least count number of words in the list that contain the specified character.\"\"\"\n    return sum((char in word) for word in words) >= count\ndef g(char='e', count=5):\n    words = ['apple', 'banana', 'pear', 'grape', 'kiwi', 'mango', 'melon']\n    return words\nassert f(g())\n",
        "emb": null,
        "idx_generation": 35,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], char='e', count=5) -> bool:\n    \"\"\"Check if there are at least count number of words in the list that contain the specified character.\"\"\"\n    return sum((char in word) for word in words) >= count",
        "solution_func": "def g(char='e', count=5):\n    words = ['apple', 'banana', 'pear', 'grape', 'kiwi', 'mango', 'melon']\n    return words",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the given matrix is an n x n identity matrix.\"\"\"\n    return all((matrix[i][j] == 1 if i == j else matrix[i][j] == 0) for i in range(n) for j in range(n))\ndef g(n=3):\n    matrix = [[1 if i == j else 0 for j in range(n)] for i in range(n)]\n    return matrix\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 35,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the given matrix is an n x n identity matrix.\"\"\"\n    return all((matrix[i][j] == 1 if i == j else matrix[i][j] == 0) for i in range(n) for j in range(n))",
        "solution_func": "def g(n=3):\n    matrix = [[1 if i == j else 0 for j in range(n)] for i in range(n)]\n    return matrix",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    n = len(arr)\n    visited = set()\n    for i in range(n):\n        complement = target - arr[i]\n        if complement in visited:\n            return True\n        visited.add(arr[i])\n    return False\n\ndef g(target=10):\n    return [i for i in range(1, target + 1)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 35,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    n = len(arr)\n    visited = set()\n    for i in range(n):\n        complement = target - arr[i]\n        if complement in visited:\n            return True\n        visited.add(arr[i])\n    return False",
        "solution_func": "def g(target=10):\n    return [i for i in range(1, target + 1)]",
        "map_ix": [
            1,
            1,
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=987654321) -> bool:\n    \"\"\"Determine if a number is a multiple of a given factor.\"\"\"\n    return n % a == 0\ndef g(a=987654321):\n    return a * 2\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 36,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=987654321) -> bool:\n    \"\"\"Determine if a number is a multiple of a given factor.\"\"\"\n    return n % a == 0",
        "solution_func": "def g(a=987654321):\n    return a * 2",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]\ndef g():\n    return \"racecar\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 36,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"racecar\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=5) -> bool:\n    \"\"\"Check if a number is between two given values.\"\"\"\n    return a < n < b\ndef g(a=10, b=5):\n    return a - b\nassert f(g())\n",
        "emb": null,
        "idx_generation": 36,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=10, b=5) -> bool:\n    \"\"\"Check if a number is between two given values.\"\"\"\n    return a < n < b",
        "solution_func": "def g(a=10, b=5):\n    return a - b",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str], target=3) -> bool:\n    \"\"\"Find a list of words where the number of words with length greater than or equal to target is equal to target.\"\"\"\n    count = 0\n    for word in words:\n        if len(word) >= target:\n            count += 1\n    return count == target\ndef g(target=3):\n    return [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\"]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 36,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], target=3) -> bool:\n    \"\"\"Find a list of words where the number of words with length greater than or equal to target is equal to target.\"\"\"\n    count = 0\n    for word in words:\n        if len(word) >= target:\n            count += 1\n    return count == target",
        "solution_func": "def g(target=3):\n    return [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\"]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find a list of numbers where the sum of the square roots of the numbers is equal to the target.\"\"\"\n    total = sum([sqrt(num) for num in nums])\n    return total == target\ndef g(target=20):\n    return [16, 4, 1]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 36,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find a list of numbers where the sum of the square roots of the numbers is equal to the target.\"\"\"\n    total = sum([sqrt(num) for num in nums])\n    return total == target",
        "solution_func": "def g(target=20):\n    return [16, 4, 1]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[float]], target=0.5) -> bool:\n    \"\"\"Find a matrix where the average value of all the elements is equal to the target.\"\"\"\n    total_sum = 0\n    num_elements = 0\n    for row in matrix:\n        for element in row:\n            total_sum += element\n            num_elements += 1\n    average = total_sum / num_elements\n    return average == target\ndef g(target=0.5):\n    return [[0.5, 0.5], [0.5, 0.5]]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 36,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[float]], target=0.5) -> bool:\n    \"\"\"Find a matrix where the average value of all the elements is equal to the target.\"\"\"\n    total_sum = 0\n    num_elements = 0\n    for row in matrix:\n        for element in row:\n            total_sum += element\n            num_elements += 1\n    average = total_sum / num_elements\n    return average == target",
        "solution_func": "def g(target=0.5):\n    return [[0.5, 0.5], [0.5, 0.5]]",
        "map_ix": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Given a list of numbers nums and a target number, find three numbers in nums such that the sum is equal to the target.\n    Return True if such triplets exist, otherwise return False.\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))\ndef g(target=12):\n    return [1, 2, 3, 4, 5, 6]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 36,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Given a list of numbers nums and a target number, find three numbers in nums such that the sum is equal to the target.\n    Return True if such triplets exist, otherwise return False.\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))",
        "solution_func": "def g(target=12):\n    return [1, 2, 3, 4, 5, 6]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str], n=5) -> bool:\n    \"\"\"Given a list of words, find n words such that the concatenation of these words forms a palindrome.\n    Return True if such words exist, otherwise return False.\"\"\"\n    def is_palindrome(word):\n        return word == word[::-1]\n    return any((is_palindrome(''.join(words[i:j])) for i in range(len(words)) for j in range(i+n, len(words)+1)))\ndef g(n=5):\n    return ['race', 'car', 'madam', 'level', 'python']\nassert f(g())\n",
        "emb": null,
        "idx_generation": 36,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], n=5) -> bool:\n    \"\"\"Given a list of words, find n words such that the concatenation of these words forms a palindrome.\n    Return True if such words exist, otherwise return False.\"\"\"\n    def is_palindrome(word):\n        return word == word[::-1]\n    return any((is_palindrome(''.join(words[i:j])) for i in range(len(words)) for j in range(i+n, len(words)+1)))",
        "solution_func": "def g(n=5):\n    return ['race', 'car', 'madam', 'level', 'python']",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Given a list of numbers nums and a target number, find two numbers in nums such that their sum is equal to the target.\n    Return True if such pair exists, otherwise return False.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=5):\n    return [1, 2, 3, 4, 5, 6]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 36,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Given a list of numbers nums and a target number, find two numbers in nums such that their sum is equal to the target.\n    Return True if such pair exists, otherwise return False.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))",
        "solution_func": "def g(target=5):\n    return [1, 2, 3, 4, 5, 6]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: int, target=100) -> bool:\n    \"\"\"Find a pair of numbers in the range from 1 to x (inclusive) that sum up to the target value\"\"\"\n    for i in range(1, x+1):\n        for j in range(i+1, x+1):\n            if i + j == target:\n                return True\n    return False\ndef g(target=100):\n    return target-1, 1\nassert f(g())\n",
        "emb": null,
        "idx_generation": 36,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, target=100) -> bool:\n    \"\"\"Find a pair of numbers in the range from 1 to x (inclusive) that sum up to the target value\"\"\"\n    for i in range(1, x+1):\n        for j in range(i+1, x+1):\n            if i + j == target:\n                return True\n    return False",
        "solution_func": "def g(target=100):\n    return target-1, 1",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(words: List[str], n=4, m=5) -> bool:\n    \"\"\"Check if the given words can be arranged in an n x m crossword grid\"\"\"\n    assert len(words) == n + m\n    grid = [['.'] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                for word in words:\n                    if len(word) == m - j and all(a == b or a == '.' for a, b in zip(word, grid[i][j:])):\n                        grid[i][j:] = list(word)\n                        break\n                else:\n                    return False\n            elif grid[i][j] != '.':\n                for word in words:\n                    if len(word) == n - i and all(a == b or b == '.' for a, b in zip(word, [row[j] for row in grid[i:]])):\n                        for k in range(i, n):\n                            grid[k][j] = word[k - i]\n                        break\n                else:\n                    return False\n    return True\ndef g(n=4, m=5):\n    from itertools import permutations\n    words = ['abcd', 'efgh', 'ijkl', 'mnop', 'qrst', 'uvwx', 'yz']\n    for p in permutations(words):\n        if f(list(p), n, m):\n            return list(p)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 37,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(words: List[str], n=4, m=5) -> bool:\n    \"\"\"Check if the given words can be arranged in an n x m crossword grid\"\"\"\n    assert len(words) == n + m\n    grid = [['.'] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                for word in words:\n                    if len(word) == m - j and all(a == b or a == '.' for a, b in zip(word, grid[i][j:])):\n                        grid[i][j:] = list(word)\n                        break\n                else:\n                    return False\n            elif grid[i][j] != '.':\n                for word in words:\n                    if len(word) == n - i and all(a == b or b == '.' for a, b in zip(word, [row[j] for row in grid[i:]])):\n                        for k in range(i, n):\n                            grid[k][j] = word[k - i]\n                        break\n                else:\n                    return False\n    return True",
        "solution_func": "def g(n=4, m=5):\n    from itertools import permutations\n    words = ['abcd', 'efgh', 'ijkl', 'mnop', 'qrst', 'uvwx', 'yz']\n    for p in permutations(words):\n        if f(list(p), n, m):\n            return list(p)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sum up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 37,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sum up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Check if the given matrix contains a row or column that sums up to the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum == target:\n            return True\n    return False\ndef g(target=15):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 37,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Check if the given matrix contains a row or column that sums up to the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum == target:\n            return True\n    return False",
        "solution_func": "def g(target=15):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(moves: List[List[int]], initial_state=[2, 5, 3, 7, 0]) -> bool:\n    \"\"\"Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\nremoving one or more objects from a single non-empty heap. The player who takes the last object wins.\n- initial_state is list of numbers of objects in each heap\n- moves is a list of your moves: [heap, number of objects to take]\n- you play first\"\"\"\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state=[2, 5, 3, 7, 0]):\n    state = initial_state[:]\n    moves = []\n    def bot_move():\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    def losing(h):\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 37,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(moves: List[List[int]], initial_state=[2, 5, 3, 7, 0]) -> bool:\n    \"\"\"Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\nremoving one or more objects from a single non-empty heap. The player who takes the last object wins.\n- initial_state is list of numbers of objects in each heap\n- moves is a list of your moves: [heap, number of objects to take]\n- you play first\"\"\"\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()",
        "solution_func": "def g(initial_state=[2, 5, 3, 7, 0]):\n    state = initial_state[:]\n    moves = []\n    def bot_move():\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    def losing(h):\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n    def optimal_move():",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(moves: List[List[int]], initial_state=[2, 5, 3, 7, 0]) -> bool:\n    \"\"\"Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\nremoving one or more objects from a single non-empty heap. The player who takes the last object wins.\n- initial_state is list of numbers of objects in each heap\n- moves is a list of your moves: [heap, number of objects to take]\n- you play first\"\"\"\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state=[2, 5, 3, 7, 0]):\n    state = initial_state[:]\n    moves = []\n    def bot_move():\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    def losing(h):\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 37,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(moves: List[List[int]], initial_state=[2, 5, 3, 7, 0]) -> bool:\n    \"\"\"Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\nremoving one or more objects from a single non-empty heap. The player who takes the last object wins.\n- initial_state is list of numbers of objects in each heap\n- moves is a list of your moves: [heap, number of objects to take]\n- you play first\"\"\"\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()",
        "solution_func": "def g(initial_state=[2, 5, 3, 7, 0]):\n    state = initial_state[:]\n    moves = []\n    def bot_move():\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    def losing(h):\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n    def optimal_move():",
        "map_ix": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(moves: List[List[int]], initial_state=[2, 5, 3, 7, 0]) -> bool:\n    \"\"\"Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\nremoving one or more objects from a single non-empty heap. The player who takes the last object wins.\n- initial_state is list of numbers of objects in each heap\n- moves is a list of your moves: [heap, number of objects to take]\n- you play first\"\"\"\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state=[2, 5, 3, 7, 0]):\n    state = initial_state[:]\n    moves = []\n    def bot_move():\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    def losing(h):\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 37,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(moves: List[List[int]], initial_state=[2, 5, 3, 7, 0]) -> bool:\n    \"\"\"Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\nremoving one or more objects from a single non-empty heap. The player who takes the last object wins.\n- initial_state is list of numbers of objects in each heap\n- moves is a list of your moves: [heap, number of objects to take]\n- you play first\"\"\"\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()",
        "solution_func": "def g(initial_state=[2, 5, 3, 7, 0]):\n    state = initial_state[:]\n    moves = []\n    def bot_move():\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    def losing(h):\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n    def optimal_move():",
        "map_ix": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array whose sum is greater than the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] > target:\n                return True\n    return False\ndef g(arr=[5, 10, 15, 20, 25, 30, 35, 40, 45, 50], target=20):\n    return arr\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 37,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array whose sum is greater than the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] > target:\n                return True\n    return False",
        "solution_func": "def g(arr=[5, 10, 15, 20, 25, 30, 35, 40, 45, 50], target=20):\n    return arr",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, words=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Given a number and a list of words, determine if the number can be formed by concatenating the words in the list.\n    Each word in the list can be used only once.\"\"\"\n    word_count = {}\n    for word in words:\n        if word not in word_count:\n            word_count[word] = 0\n        word_count[word] += 1\n\n    string = str(n)\n    i = 0\n    while i < len(string):\n        found_word = False\n        for word in word_count:\n            if string[i:i+len(word)] == word:\n                if word_count[word] > 0:\n                    word_count[word] -= 1\n                    i += len(word)\n                    found_word = True\n                    break\n        if not found_word:\n            return False\n\n    for count in word_count.values():\n        if count > 0:\n            return False\n\n    return True\n\ndef g(words=['apple', 'banana', 'cherry', 'date']):\n    return int(''.join(words))\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 37,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(n: int, words=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Given a number and a list of words, determine if the number can be formed by concatenating the words in the list.\n    Each word in the list can be used only once.\"\"\"\n    word_count = {}\n    for word in words:\n        if word not in word_count:\n            word_count[word] = 0\n        word_count[word] += 1\n\n    string = str(n)\n    i = 0\n    while i < len(string):\n        found_word = False\n        for word in word_count:\n            if string[i:i+len(word)] == word:\n                if word_count[word] > 0:\n                    word_count[word] -= 1\n                    i += len(word)\n                    found_word = True\n                    break\n        if not found_word:\n            return False\n\n    for count in word_count.values():\n        if count > 0:\n            return False\n\n    return True",
        "solution_func": "def g(words=['apple', 'banana', 'cherry', 'date']):\n    return int(''.join(words))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the array whose sum is equal to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\ndef g(arr=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target=100):\n    return arr\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 37,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the array whose sum is equal to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(arr=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target=100):\n    return arr",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], tot=100, n=10) -> bool:\n    \"\"\"Find n distinct even integers that sum to tot\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i <= i % 2 == 0 for i in nums))\ndef g(tot=100, n=10):\n    return list(range(2, 2 * n + 1, 2))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 37,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], tot=100, n=10) -> bool:\n    \"\"\"Find n distinct even integers that sum to tot\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i <= i % 2 == 0 for i in nums))",
        "solution_func": "def g(tot=100, n=10):\n    return list(range(2, 2 * n + 1, 2))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if the given matrix contains a row or column that sums up to the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum == target:\n            return True\n    return False\ndef g(target=20):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 38,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if the given matrix contains a row or column that sums up to the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum == target:\n            return True\n    return False",
        "solution_func": "def g(target=20):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Check if the given matrix contains a row or column that sums up to the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum == target:\n            return True\n    return False\ndef g(target=15):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 38,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Check if the given matrix contains a row or column that sums up to the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum == target:\n            return True\n    return False",
        "solution_func": "def g(target=15):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=18) -> bool:\n    \"\"\"Check if the given matrix contains a row or column that sums up to the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum == target:\n            return True\n    return False\ndef g(target=18):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 38,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=18) -> bool:\n    \"\"\"Check if the given matrix contains a row or column that sums up to the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum == target:\n            return True\n    return False",
        "solution_func": "def g(target=18):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": [
            1,
            1,
            1,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=100, n=5) -> bool:\n    \"\"\"Find a subset of n elements from arr whose sum is equal to the target.\"\"\"\n    import itertools\n    return any(sum(comb) == target for comb in itertools.combinations(arr, n))\ndef g(target=100, n=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 38,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=100, n=5) -> bool:\n    \"\"\"Find a subset of n elements from arr whose sum is equal to the target.\"\"\"\n    import itertools\n    return any(sum(comb) == target for comb in itertools.combinations(arr, n))",
        "solution_func": "def g(target=100, n=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(text: str, pattern='abc') -> bool:\n    \"\"\"Find if the pattern exists in the given text\"\"\"\n    return pattern in text\ndef g(pattern='abc'):\n    return \"abcdefg\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 38,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(text: str, pattern='abc') -> bool:\n    \"\"\"Find if the pattern exists in the given text\"\"\"\n    return pattern in text",
        "solution_func": "def g(pattern='abc'):\n    return \"abcdefg\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix\"\"\"\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[i])))\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 38,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix\"\"\"\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[i])))",
        "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]",
        "map_ix": [
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target.\"\"\"\n    n = len(arr)\n    visited = set()\n    for i in range(n):\n        complement = target / arr[i]\n        if complement in visited:\n            return True\n        visited.add(arr[i])\n    return False\n\ndef g(target=20):\n    return [i for i in range(1, int(target/2) + 1)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 38,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target.\"\"\"\n    n = len(arr)\n    visited = set()\n    for i in range(n):\n        complement = target / arr[i]\n        if complement in visited:\n            return True\n        visited.add(arr[i])\n    return False",
        "solution_func": "def g(target=20):\n    return [i for i in range(1, int(target/2) + 1)]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose difference is equal to the target.\"\"\"\n    n = len(arr)\n    visited = set()\n    for i in range(n):\n        complement = target + arr[i]\n        if complement in visited:\n            return True\n        visited.add(arr[i])\n    return False\n\ndef g(target=50):\n    return [i for i in range(1, target + 1, 2)]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 38,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose difference is equal to the target.\"\"\"\n    n = len(arr)\n    visited = set()\n    for i in range(n):\n        complement = target + arr[i]\n        if complement in visited:\n            return True\n        visited.add(arr[i])\n    return False",
        "solution_func": "def g(target=50):\n    return [i for i in range(1, target + 1, 2)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose quotient is equal to the target.\"\"\"\n    n = len(arr)\n    visited = set()\n    for i in range(n):\n        if arr[i] != 0:\n            complement = target * arr[i]\n            if complement in visited:\n                return True\n            visited.add(arr[i])\n    return False\n\ndef g(target=100):\n    return [i for i in range(1, target + 1) if target % i == 0]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 38,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose quotient is equal to the target.\"\"\"\n    n = len(arr)\n    visited = set()\n    for i in range(n):\n        if arr[i] != 0:\n            complement = target * arr[i]\n            if complement in visited:\n                return True\n            visited.add(arr[i])\n    return False",
        "solution_func": "def g(target=100):\n    return [i for i in range(1, target + 1) if target % i == 0]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=100) -> bool:\n    \"\"\"Check if n is a factor of b and equal to a\"\"\"\n    return b % n == 0 and n == a\ndef g(a=5, b=100):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b % n == 0 and n == a:\n            return n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 38,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=5, b=100) -> bool:\n    \"\"\"Check if n is a factor of b and equal to a\"\"\"\n    return b % n == 0 and n == a",
        "solution_func": "def g(a=5, b=100):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b % n == 0 and n == a:\n            return n",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[3, 6, 9, 12, 15, 18, 21, 24, 27, 30], k=4) -> bool:\n    \"\"\"Given a list of non-decreasing integers and given an integer k, determine whether there exists two numbers in the list whose absolute difference is less than or equal to k.\"\"\"\n    assert all((nums[i] <= nums[i + 1] for i in range(len(nums) - 1))), 'Hint: nums are non-decreasing'\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if abs(nums[i] - nums[j]) <= k:\n                return True\n    return False\ndef g(nums=[3, 6, 9, 12, 15, 18, 21, 24, 27, 30], k=4):\n    return nums\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 39,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[3, 6, 9, 12, 15, 18, 21, 24, 27, 30], k=4) -> bool:\n    \"\"\"Given a list of non-decreasing integers and given an integer k, determine whether there exists two numbers in the list whose absolute difference is less than or equal to k.\"\"\"\n    assert all((nums[i] <= nums[i + 1] for i in range(len(nums) - 1))), 'Hint: nums are non-decreasing'\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if abs(nums[i] - nums[j]) <= k:\n                return True\n    return False",
        "solution_func": "def g(nums=[3, 6, 9, 12, 15, 18, 21, 24, 27, 30], k=4):\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, words=['apple', 'banana', 'orange', 'grape', 'kiwi', 'melon'], k=4) -> bool:\n    \"\"\"Given a list of words and given an integer k, determine whether there exists two words in the list whose lengths differ by at most k.\"\"\"\n    for i in range(len(words)):\n        for j in range(i+1, len(words)):\n            if abs(len(words[i]) - len(words[j])) <= k:\n                return True\n    return False\ndef g(words=['apple', 'banana', 'orange', 'grape', 'kiwi', 'melon'], k=4):\n    return words\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 39,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, words=['apple', 'banana', 'orange', 'grape', 'kiwi', 'melon'], k=4) -> bool:\n    \"\"\"Given a list of words and given an integer k, determine whether there exists two words in the list whose lengths differ by at most k.\"\"\"\n    for i in range(len(words)):\n        for j in range(i+1, len(words)):\n            if abs(len(words[i]) - len(words[j])) <= k:\n                return True\n    return False",
        "solution_func": "def g(words=['apple', 'banana', 'orange', 'grape', 'kiwi', 'melon'], k=4):\n    return words",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 3, 5, 7, 9, 11, 13, 15, 17, 19], k=6) -> bool:\n    \"\"\"Given a list of non-decreasing integers and given an integer k, determine whether there exists three numbers in the list whose sum is equal to k.\"\"\"\n    assert all((nums[i] <= nums[i + 1] for i in range(len(nums) - 1))), 'Hint: nums are non-decreasing'\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for l in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[l] == k:\n                    return True\n    return False\ndef g(nums=[1, 3, 5, 7, 9, 11, 13, 15, 17, 19], k=6):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 39,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[1, 3, 5, 7, 9, 11, 13, 15, 17, 19], k=6) -> bool:\n    \"\"\"Given a list of non-decreasing integers and given an integer k, determine whether there exists three numbers in the list whose sum is equal to k.\"\"\"\n    assert all((nums[i] <= nums[i + 1] for i in range(len(nums) - 1))), 'Hint: nums are non-decreasing'\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for l in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[l] == k:\n                    return True\n    return False",
        "solution_func": "def g(nums=[1, 3, 5, 7, 9, 11, 13, 15, 17, 19], k=6):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=10) -> bool:\n    \"\"\"Check if the last two digits of 2^n are equal to s.\"\"\"\n    return int(str(2 ** n)[-2:]) == int(s)\ndef g(n=10):\n    return '12' if n == 0 else '24' if n == 1 else '48'\nassert f(g())\n",
        "emb": null,
        "idx_generation": 39,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=10) -> bool:\n    \"\"\"Check if the last two digits of 2^n are equal to s.\"\"\"\n    return int(str(2 ** n)[-2:]) == int(s)",
        "solution_func": "def g(n=10):\n    return '12' if n == 0 else '24' if n == 1 else '48'",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, li=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the sum of the first n elements of a list is greater than 50.\"\"\"\n    return sum(li[:n]) > 50\ndef g(li=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return 5\nassert f(g())\n",
        "emb": null,
        "idx_generation": 39,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, li=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the sum of the first n elements of a list is greater than 50.\"\"\"\n    return sum(li[:n]) > 50",
        "solution_func": "def g(li=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return 5",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5, li=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the concatenation of the first n elements of a list is equal to s.\"\"\"\n    return ''.join(str(i) for i in li[:n]) == s\ndef g(n=5, li=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return '12345'\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 39,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=5, li=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the concatenation of the first n elements of a list is equal to s.\"\"\"\n    return ''.join(str(i) for i in li[:n]) == s",
        "solution_func": "def g(n=5, li=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return '12345'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], tot=100, n=10) -> bool:\n    \"\"\"Find n distinct positive integers that sum to tot\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot\ndef g(tot=100, n=10):\n    return list(range(1, n+1))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 39,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], tot=100, n=10) -> bool:\n    \"\"\"Find n distinct positive integers that sum to tot\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot",
        "solution_func": "def g(tot=100, n=10):\n    return list(range(1, n+1))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], tot=50, n=5) -> bool:\n    \"\"\"Find n distinct positive even integers that sum to tot\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 == 0 for i in nums))\ndef g(tot=50, n=5):\n    return list(range(2, 2 * n + 1, 2))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 39,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], tot=50, n=5) -> bool:\n    \"\"\"Find n distinct positive even integers that sum to tot\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 == 0 for i in nums))",
        "solution_func": "def g(tot=50, n=5):\n    return list(range(2, 2 * n + 1, 2))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], tot=10000, n=20) -> bool:\n    \"\"\"Find n distinct positive integers that sum to tot and are divisible by 5\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i % 5 == 0 for i in nums))\ndef g(tot=10000, n=20):\n    return list(range(5, 5 * n + 1, 5))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 39,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], tot=10000, n=20) -> bool:\n    \"\"\"Find n distinct positive integers that sum to tot and are divisible by 5\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i % 5 == 0 for i in nums))",
        "solution_func": "def g(tot=10000, n=20):\n    return list(range(5, 5 * n + 1, 5))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Determine if a given list of numbers is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 39,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Determine if a given list of numbers is a palindrome.\"\"\"\n    return nums == nums[::-1]",
        "solution_func": "def g():\n    return [1, 2, 3, 2, 1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=123456789) -> bool:\n    \"\"\"Determine if a number is divisible by the sum of its digits.\"\"\"\n    return n % sum(int(digit) for digit in str(n)) == 0\ndef g(a=123456789):\n    return a * 3\nassert f(g())\n",
        "emb": null,
        "idx_generation": 40,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=123456789) -> bool:\n    \"\"\"Determine if a number is divisible by the sum of its digits.\"\"\"\n    return n % sum(int(digit) for digit in str(n)) == 0",
        "solution_func": "def g(a=123456789):\n    return a * 3",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=987654321) -> bool:\n    \"\"\"Determine if a number is a palindrome.\"\"\"\n    return str(n) == str(n)[::-1]\ndef g(a=987654321):\n    return int(str(a)[::-1])\nassert f(g())\n",
        "emb": null,
        "idx_generation": 40,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=987654321) -> bool:\n    \"\"\"Determine if a number is a palindrome.\"\"\"\n    return str(n) == str(n)[::-1]",
        "solution_func": "def g(a=987654321):\n    return int(str(a)[::-1])",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=123456789) -> bool:\n    \"\"\"Determine if a number is a power of 2.\"\"\"\n    return n != 0 and (n & (n - 1)) == 0\ndef g(a=123456789):\n    return 2**a\nassert f(g())\n",
        "emb": null,
        "idx_generation": 40,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=123456789) -> bool:\n    \"\"\"Determine if a number is a power of 2.\"\"\"\n    return n != 0 and (n & (n - 1)) == 0",
        "solution_func": "def g(a=123456789):\n    return 2**a",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"Find a square matrix where the sum of each row, column, and diagonal is equal to the target value\"\"\"\n    n = len(matrix)\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diag_sum1 = sum(matrix[i][i] for i in range(n))\n    diag_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(row_sum == target for row_sum in row_sums) and all(col_sum == target for col_sum in col_sums) and diag_sum1 == diag_sum2 == target\ndef g(target=50):\n    return [[target for _ in range(target)] for _ in range(target)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 40,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"Find a square matrix where the sum of each row, column, and diagonal is equal to the target value\"\"\"\n    n = len(matrix)\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diag_sum1 = sum(matrix[i][i] for i in range(n))\n    diag_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(row_sum == target for row_sum in row_sums) and all(col_sum == target for col_sum in col_sums) and diag_sum1 == diag_sum2 == target",
        "solution_func": "def g(target=50):\n    return [[target for _ in range(target)] for _ in range(target)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers from the given list whose sum is equal to the target value\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\ndef g(target=100):\n    return list(range(target))\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 40,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers from the given list whose sum is equal to the target value\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=100):\n    return list(range(target))",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(names: List[str], target='Alice') -> bool:\n    \"\"\"Check if the target name is present in the given list\"\"\"\n    return target in names\ndef g(target='Alice'):\n    return ['Bob', 'Charlie', 'David', 'Eve', 'Frank']\nassert f(g())\n",
        "emb": null,
        "idx_generation": 40,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(names: List[str], target='Alice') -> bool:\n    \"\"\"Check if the target name is present in the given list\"\"\"\n    return target in names",
        "solution_func": "def g(target='Alice'):\n    return ['Bob', 'Charlie', 'David', 'Eve', 'Frank']",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=3, s=15) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=3, s=15):\n    x = [s - n + 1, 1, 1]\n    return x\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 40,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=3, s=15) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])",
        "solution_func": "def g(n=3, s=15):\n    x = [s - n + 1, 1, 1]\n    return x",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=4, s=20) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=4, s=20):\n    x = [s - n + 1, 1, 1, 1]\n    return x\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 40,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=4, s=20) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])",
        "solution_func": "def g(n=4, s=20):\n    x = [s - n + 1, 1, 1, 1]\n    return x",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=5, s=25) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=5, s=25):\n    x = [s - n + 1, 1, 1, 1, 1]\n    return x\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 40,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=5, s=25) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])",
        "solution_func": "def g(n=5, s=25):\n    x = [s - n + 1, 1, 1, 1, 1]\n    return x",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the given matrix contains a row or column that sums up to the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum == target:\n            return True\n    return False\ndef g(target=0):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 40,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the given matrix contains a row or column that sums up to the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum == target:\n            return True\n    return False",
        "solution_func": "def g(target=0):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(li)):\n        for j in range(i + 1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, target - 1]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 41,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(li)):\n        for j in range(i + 1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, target - 1]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], n=3) -> bool:\n    \"\"\"Check if there are exactly n even numbers in the list.\"\"\"\n    evens = [num for num in li if num % 2 == 0]\n    return len(evens) == n\n\ndef g(n=3):\n    return [2, 4, 6] + [1] * (n - 3)\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 41,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], n=3) -> bool:\n    \"\"\"Check if there are exactly n even numbers in the list.\"\"\"\n    evens = [num for num in li if num % 2 == 0]\n    return len(evens) == n",
        "solution_func": "def g(n=3):\n    return [2, 4, 6] + [1] * (n - 3)",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Check if there is a subsequence in the list that sums up to the target value.\"\"\"\n    n = len(li)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(target + 1):\n            if j < li[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - li[i - 1]]\n    \n    return dp[n][target]\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 41,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Check if there is a subsequence in the list that sums up to the target value.\"\"\"\n    n = len(li)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(target + 1):\n            if j < li[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - li[i - 1]]\n    \n    return dp[n][target]",
        "solution_func": "def g(target=100):\n    return [10, 20, 30, 40, 50]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find if the target value exists in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 41,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find if the target value exists in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(emails: List[str]) -> bool:\n    \"\"\"Check if the given list of emails is valid\"\"\"\n    for email in emails:\n        if \"@\" not in email or \".\" not in email:\n            return False\n    return True\ndef g():\n    return [\"example.email@gmail.com\", \"not_a_valid_email\", \"another.email@yahoo.com\"]\nassert not f(g())\n\nassert f(g()) == True",
        "emb": null,
        "idx_generation": 41,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(emails: List[str]) -> bool:\n    \"\"\"Check if the given list of emails is valid\"\"\"\n    for email in emails:\n        if \"@\" not in email or \".\" not in email:\n            return False\n    return True",
        "solution_func": "def g():\n    return [\"example.email@gmail.com\", \"not_a_valid_email\", \"another.email@yahoo.com\"]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='a', suffix='e') -> bool:\n    \"\"\"Check if any word in the list starts with the prefix and ends with the suffix\"\"\"\n    for word in words:\n        if word.startswith(prefix) and word.endswith(suffix):\n            return True\n    return False\ndef g(prefix='a', suffix='e'):\n    return [\"apple\", \"banana\", \"orange\", \"grape\"]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 41,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], prefix='a', suffix='e') -> bool:\n    \"\"\"Check if any word in the list starts with the prefix and ends with the suffix\"\"\"\n    for word in words:\n        if word.startswith(prefix) and word.endswith(suffix):\n            return True\n    return False",
        "solution_func": "def g(prefix='a', suffix='e'):\n    return [\"apple\", \"banana\", \"orange\", \"grape\"]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['abc', 'def', 'ghi', 'jkl']) -> bool:\n    \"\"\"Determine whether the given string contains all the substrings in any order\"\"\"\n    return all((sub in s for sub in substrings))\ndef g(substrings=['abc', 'def', 'ghi', 'jkl']):\n    return ''.join(substrings)\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 41,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substrings=['abc', 'def', 'ghi', 'jkl']) -> bool:\n    \"\"\"Determine whether the given string contains all the substrings in any order\"\"\"\n    return all((sub in s for sub in substrings))",
        "solution_func": "def g(substrings=['abc', 'def', 'ghi', 'jkl']):\n    return ''.join(substrings)",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m: int, grid=[[0, 1, 0], [1, 0, 1], [0, 1, 0]]) -> bool:\n    \"\"\"Given a grid of size n x m, determine whether the grid is symmetric along both the horizontal and vertical axes\"\"\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] != grid[n-i-1][m-j-1]:\n                return False\n    return True\ndef g(grid=[[0, 1, 0], [1, 0, 1], [0, 1, 0]]):\n    return len(grid), len(grid[0]), grid\nassert f(g())\n",
        "emb": null,
        "idx_generation": 41,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m: int, grid=[[0, 1, 0], [1, 0, 1], [0, 1, 0]]) -> bool:\n    \"\"\"Given a grid of size n x m, determine whether the grid is symmetric along both the horizontal and vertical axes\"\"\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] != grid[n-i-1][m-j-1]:\n                return False\n    return True",
        "solution_func": "def g(grid=[[0, 1, 0], [1, 0, 1], [0, 1, 0]]):\n    return len(grid), len(grid[0]), grid",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Find a string that contains all the substrings in any order with no repeated characters\"\"\"\n    return all((sub in s and len(set(sub)) == len(sub) for sub in substrings))\ndef g(substrings=['apple', 'banana', 'cherry', 'date']):\n    return ''.join(substrings)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 41,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Find a string that contains all the substrings in any order with no repeated characters\"\"\"\n    return all((sub in s and len(set(sub)) == len(sub) for sub in substrings))",
        "solution_func": "def g(substrings=['apple', 'banana', 'cherry', 'date']):\n    return ''.join(substrings)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=4, c=6, d=2) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers) - d\"\"\"\n    return n + a == sum([b * i for i in range(c)]) - d\ndef g(a=3, b=4, c=6, d=2):\n    return -a + sum([b * i for i in range(c)]) - d\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 41,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=3, b=4, c=6, d=2) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers) - d\"\"\"\n    return n + a == sum([b * i for i in range(c)]) - d",
        "solution_func": "def g(a=3, b=4, c=6, d=2):\n    return -a + sum([b * i for i in range(c)]) - d",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list whose product is equal to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target / num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[2, 4, 5, 10, 15, 20, 25]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 42,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list whose product is equal to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target / num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(nums=[2, 4, 5, 10, 15, 20, 25]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list whose difference is equal to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = num - target\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[50, 75, 100, 125, 150, 175, 200]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 42,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list whose difference is equal to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = num - target\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(nums=[50, 75, 100, 125, 150, 175, 200]):\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=7) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list whose quotient is equal to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        if num == 0:\n            continue\n        complement = target / num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 42,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=7) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list whose quotient is equal to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        if num == 0:\n            continue\n        complement = target / num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7]):\n    return nums",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find a subset of numbers that add up to the target number\"\"\"\n    return sum(nums) == target\ndef g(target=0):\n    import random\n    nums = [random.randint(1, 10) for _ in range(5)]\n    return nums, target\nassert f(g())\n",
        "emb": null,
        "idx_generation": 42,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find a subset of numbers that add up to the target number\"\"\"\n    return sum(nums) == target",
        "solution_func": "def g(target=0):\n    import random\n    nums = [random.randint(1, 10) for _ in range(5)]\n    return nums, target",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(s: str, n=0) -> bool:\n    \"\"\"Determine if a string is a palindrome\"\"\"\n    return s == s[::-1]\ndef g(n=0):\n    s = str(math.factorial(n))\n    return s\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 42,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\ndef f(s: str, n=0) -> bool:\n    \"\"\"Determine if a string is a palindrome\"\"\"\n    return s == s[::-1]",
        "solution_func": "def g(n=0):\n    s = str(math.factorial(n))\n    return s",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Determine if a target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(target=0):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix, target\nassert f(g())\n",
        "emb": null,
        "idx_generation": 42,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Determine if a target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(target=0):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix, target",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=45) -> bool:\n    \"\"\"Check if there is a submatrix in the given matrix that sums up to the target value.\"\"\"\n    m, n = len(matrix), len(matrix[0])\n    dp = [[False] * (target + 1) for _ in range(m + 1)]\n    dp[0][0] = True\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(target + 1):\n                if k < matrix[i - 1][j - 1]:\n                    dp[i][j][k] = dp[i - 1][j][k] or dp[i][j - 1][k]\n                else:\n                    dp[i][j][k] = dp[i - 1][j][k] or dp[i][j - 1][k] or dp[i - 1][j - 1][k - matrix[i - 1][j - 1]]\n    \n    return dp[m][n][target]\n\ndef g(target=45):\n    return [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 42,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=45) -> bool:\n    \"\"\"Check if there is a submatrix in the given matrix that sums up to the target value.\"\"\"\n    m, n = len(matrix), len(matrix[0])\n    dp = [[False] * (target + 1) for _ in range(m + 1)]\n    dp[0][0] = True\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(target + 1):\n                if k < matrix[i - 1][j - 1]:\n                    dp[i][j][k] = dp[i - 1][j][k] or dp[i][j - 1][k]\n                else:\n                    dp[i][j][k] = dp[i - 1][j][k] or dp[i][j - 1][k] or dp[i - 1][j - 1][k - matrix[i - 1][j - 1]]\n    \n    return dp[m][n][target]",
        "solution_func": "def g(target=45):\n    return [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Check if there is a subarray in the given list that sums up to the target value.\"\"\"\n    n = len(nums)\n    dp = [False] * (target + 1)\n    dp[0] = True\n\n    for i in range(n):\n        for j in range(target, nums[i] - 1, -1):\n            dp[j] |= dp[j - nums[i]]\n    \n    return dp[target]\n\ndef g(target=9):\n    return [2, 3, 1, 4, 5]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 42,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Check if there is a subarray in the given list that sums up to the target value.\"\"\"\n    n = len(nums)\n    dp = [False] * (target + 1)\n    dp[0] = True\n\n    for i in range(n):\n        for j in range(target, nums[i] - 1, -1):\n            dp[j] |= dp[j - nums[i]]\n    \n    return dp[target]",
        "solution_func": "def g(target=9):\n    return [2, 3, 1, 4, 5]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a subset in the given list that sums up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    \n    return dp[n][target]\n\ndef g(target=10):\n    return [3, 1, 5, 4, 2]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 42,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a subset in the given list that sums up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    \n    return dp[n][target]",
        "solution_func": "def g(target=10):\n    return [3, 1, 5, 4, 2]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array whose sum is equal to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr=[5, 10, 15, 20, 25, 30, 35, 40, 45, 50], target=20):\n    return arr\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 42,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array whose sum is equal to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(arr=[5, 10, 15, 20, 25, 30, 35, 40, 45, 50], target=20):\n    return arr",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='pl') -> bool:\n    \"\"\"Check if the word is a suffix of s\"\"\"\n    return s.endswith(word)\ndef g(word='pl'):\n    return word\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 43,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, word='pl') -> bool:\n    \"\"\"Check if the word is a suffix of s\"\"\"\n    return s.endswith(word)",
        "solution_func": "def g(word='pl'):\n    return word",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='pl') -> bool:\n    \"\"\"Check if the word is present in s\"\"\"\n    return word in s\ndef g(word='pl'):\n    return word\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 43,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, word='pl') -> bool:\n    \"\"\"Check if the word is present in s\"\"\"\n    return word in s",
        "solution_func": "def g(word='pl'):\n    return word",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, word='pl') -> bool:\n    \"\"\"Check if the word is not in s\"\"\"\n    return word not in s\ndef g(word='pl'):\n    return word\nassert f(g())\n",
        "emb": null,
        "idx_generation": 43,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, word='pl') -> bool:\n    \"\"\"Check if the word is not in s\"\"\"\n    return word not in s",
        "solution_func": "def g(word='pl'):\n    return word",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Find if there exists a word in the list that contains the target string.\"\"\"\n    return any(target in word.lower() for word in words)\ndef g():\n    return ['hello', 'world', 'python', 'programming', 'puzzle']\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 43,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import *\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Find if there exists a word in the list that contains the target string.\"\"\"\n    return any(target in word.lower() for word in words)",
        "solution_func": "def g():\n    return ['hello', 'world', 'python', 'programming', 'puzzle']",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find if there exists a triplet of numbers in the list whose sum is equal to the target.\"\"\"\n    return any(numbers[i] + numbers[j] + numbers[k] == target for i in range(len(numbers)) for j in range(i+1, len(numbers)) for k in range(j+1, len(numbers)))\ndef g():\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 43,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import *\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find if there exists a triplet of numbers in the list whose sum is equal to the target.\"\"\"\n    return any(numbers[i] + numbers[j] + numbers[k] == target for i in range(len(numbers)) for j in range(i+1, len(numbers)) for k in range(j+1, len(numbers)))",
        "solution_func": "def g():\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import *\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"Find if there exists a row and column in the matrix whose sum is equal to the target.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return any(sum(matrix[i][j] for j in range(cols)) + sum(matrix[i][j] for i in range(rows)) == target for i in range(rows) for j in range(cols))\ndef g():\n    return [[10, 20, 30], [40, 50, 60], [70, 80, 90]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 43,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import *\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"Find if there exists a row and column in the matrix whose sum is equal to the target.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return any(sum(matrix[i][j] for j in range(cols)) + sum(matrix[i][j] for i in range(rows)) == target for i in range(rows) for j in range(cols))",
        "solution_func": "def g():\n    return [[10, 20, 30], [40, 50, 60], [70, 80, 90]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that multiply to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target % num == 0 and target // num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=20):\n    nums = [2, 4, 5, 6, 10, 12]\n    return nums\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 43,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that multiply to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target % num == 0 and target // num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=20):\n    nums = [2, 4, 5, 6, 10, 12]\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the given list that sum up to the target\"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=100):\n    nums = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 43,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the given list that sum up to the target\"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=100):\n    nums = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that differ by the target\"\"\"\n    seen = set()\n    for num in nums:\n        if num + target in seen or num - target in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=25):\n    nums = [5, 10, 15, 20, 30, 35]\n    return nums\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 43,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that differ by the target\"\"\"\n    seen = set()\n    for num in nums:\n        if num + target in seen or num - target in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=25):\n    nums = [5, 10, 15, 20, 30, 35]\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=5, c=8) -> bool:\n    \"\"\"Find n such that n * a == b * (the sum of the first c integers)\"\"\"\n    return n * a == sum([b * i for i in range(c)])\ndef g(a=2, b=5, c=8):\n    return sum([b * i for i in range(c)]) / a\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 43,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=2, b=5, c=8) -> bool:\n    \"\"\"Find n such that n * a == b * (the sum of the first c integers)\"\"\"\n    return n * a == sum([b * i for i in range(c)])",
        "solution_func": "def g(a=2, b=5, c=8):\n    return sum([b * i for i in range(c)]) / a",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target='abc') -> bool:\n    \"\"\"Check if the given string contains the target substring\"\"\"\n    return target in string\ndef g(target='abc'):\n    string = 'abcdefg'\n    return string\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 44,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, target='abc') -> bool:\n    \"\"\"Check if the given string contains the target substring\"\"\"\n    return target in string",
        "solution_func": "def g(target='abc'):\n    string = 'abcdefg'\n    return string",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 44,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums)))",
        "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10], target_sum=20) -> bool:\n    \"\"\"Find if there exists a combination of numbers from the list that adds up to the target sum\"\"\"\n    def subset_sum(nums, n, target_sum):\n        if target_sum == 0:\n            return True\n        if n == 0 and target_sum != 0:\n            return False\n        if nums[n-1] > target_sum:\n            return subset_sum(nums, n-1, target_sum)\n        return subset_sum(nums, n-1, target_sum) or subset_sum(nums, n-1, target_sum-nums[n-1])\n    return subset_sum(nums, len(nums), target_sum)\ndef g(nums=[2, 4, 6, 8, 10], target_sum=20):\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums)))\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 44,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10], target_sum=20) -> bool:\n    \"\"\"Find if there exists a combination of numbers from the list that adds up to the target sum\"\"\"\n    def subset_sum(nums, n, target_sum):\n        if target_sum == 0:\n            return True\n        if n == 0 and target_sum != 0:\n            return False\n        if nums[n-1] > target_sum:\n            return subset_sum(nums, n-1, target_sum)\n        return subset_sum(nums, n-1, target_sum) or subset_sum(nums, n-1, target_sum-nums[n-1])\n    return subset_sum(nums, len(nums), target_sum)",
        "solution_func": "def g(nums=[2, 4, 6, 8, 10], target_sum=20):\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums)))",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if the sum of the first n natural numbers is divisible by m.\"\"\"\n    return sum(range(1, n+1)) % m == 0\ndef g(m=10):\n    return 10\nassert f(g())\n",
        "emb": null,
        "idx_generation": 44,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if the sum of the first n natural numbers is divisible by m.\"\"\"\n    return sum(range(1, n+1)) % m == 0",
        "solution_func": "def g(m=10):\n    return 10",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]\ndef g():\n    return \"racecar\"\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 44,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"racecar\"",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there are two numbers in a list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())",
        "emb": null,
        "idx_generation": 44,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there are two numbers in a list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=15) -> bool:\n    \"\"\"Given a list of numbers, find a pair of numbers that sum up to the target value\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(numbers: List[int], target=15):\n    return [i for i in range(target) if i in numbers]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 44,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=15) -> bool:\n    \"\"\"Given a list of numbers, find a pair of numbers that sum up to the target value\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False",
        "solution_func": "def g(numbers: List[int], target=15):\n    return [i for i in range(target) if i in numbers]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=5, k=2) -> bool:\n    \"\"\"Find n such that n is divisible by m and the sum of its digits is equal to k\"\"\"\n    return n % m == 0 and sum(map(int, str(n))) == k\n\ndef g(m=5, k=2):\n    for i in range(1, 1000):\n        if i % m == 0 and sum(map(int, str(i))) == k:\n            return i\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 44,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=5, k=2) -> bool:\n    \"\"\"Find n such that n is divisible by m and the sum of its digits is equal to k\"\"\"\n    return n % m == 0 and sum(map(int, str(n))) == k",
        "solution_func": "def g(m=5, k=2):\n    for i in range(1, 1000):\n        if i % m == 0 and sum(map(int, str(i))) == k:\n            return i",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import factorial\n\ndef f(n: int, a=2, b=10) -> bool:\n    \"\"\"Find n such that n! is divisible by a and n is a multiple of b\"\"\"\n    return factorial(n) % a == 0 and n % b == 0\n\ndef g(a=2, b=10):\n    n = 1\n    while True:\n        if factorial(n) % a == 0 and n % b == 0:\n            return n\n        n += 1\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 44,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import factorial\n\ndef f(n: int, a=2, b=10) -> bool:\n    \"\"\"Find n such that n! is divisible by a and n is a multiple of b\"\"\"\n    return factorial(n) % a == 0 and n % b == 0",
        "solution_func": "def g(a=2, b=10):\n    n = 1\n    while True:\n        if factorial(n) % a == 0 and n % b == 0:\n            return n\n        n += 1",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Given a list of integers, find a pair of numbers whose sum is equal to the target_sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 44,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Given a list of integers, find a pair of numbers whose sum is equal to the target_sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if the sum of all elements in lst is equal to the target\"\"\"\n    return sum(lst) == target\n\ndef g(target=100):\n    return [10, 5, 2, 8, 15, 60]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 45,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if the sum of all elements in lst is equal to the target\"\"\"\n    return sum(lst) == target",
        "solution_func": "def g(target=100):\n    return [10, 5, 2, 8, 15, 60]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sums up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 45,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sums up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the given string contains all the characters of the target string in order.\"\"\"\n    target_index = 0\n    for c in s:\n        if c == target[target_index]:\n            target_index += 1\n            if target_index == len(target):\n                return True\n    return False\n\ndef g(target='python'):\n    return 'yptihoonmlkpythonsjgk'\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 45,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the given string contains all the characters of the target string in order.\"\"\"\n    target_index = 0\n    for c in s:\n        if c == target[target_index]:\n            target_index += 1\n            if target_index == len(target):\n                return True\n    return False",
        "solution_func": "def g(target='python'):\n    return 'yptihoonmlkpythonsjgk'",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list whose difference is equal to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = num - target\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[10, 15, 20, 25, 30, 35, 40, 45]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 45,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list whose difference is equal to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = num - target\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(nums=[10, 15, 20, 25, 30, 35, 40, 45]):\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list whose product is equal to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target / num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[2, 3, 4, 6, 8, 10, 12]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 45,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list whose product is equal to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target / num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(nums=[2, 3, 4, 6, 8, 10, 12]):\n    return nums",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list whose quotient is equal to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = num / target\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[50, 75, 100, 125, 150, 175, 200]):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 45,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list whose quotient is equal to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = num / target\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(nums=[50, 75, 100, 125, 150, 175, 200]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(seq: List[int], n=20, length=10) -> bool:\n    \"\"\"Find a sequence of 1's and 2's of a given length that adds up to n\"\"\"\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)\ndef g(n=20, length=10):\n    return [1] * length + [2] * (n - length)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 45,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(seq: List[int], n=20, length=10) -> bool:\n    \"\"\"Find a sequence of 1's and 2's of a given length that adds up to n\"\"\"\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)",
        "solution_func": "def g(n=20, length=10):\n    return [1] * length + [2] * (n - length)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(seq: List[int], n=30, length=15) -> bool:\n    \"\"\"Find a sequence of 1's and 2's of a given length that adds up to n\"\"\"\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)\ndef g(n=30, length=15):\n    return [2] * length + [1] * (n - length)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 45,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(seq: List[int], n=30, length=15) -> bool:\n    \"\"\"Find a sequence of 1's and 2's of a given length that adds up to n\"\"\"\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)",
        "solution_func": "def g(n=30, length=15):\n    return [2] * length + [1] * (n - length)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(seq: List[int], n=25, length=12) -> bool:\n    \"\"\"Find a sequence of 1's and 2's of a given length that adds up to n\"\"\"\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)\ndef g(n=25, length=12):\n    return [1] * (length // 2) + [2] * (length // 2) + [1] * (n - length)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 45,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(seq: List[int], n=25, length=12) -> bool:\n    \"\"\"Find a sequence of 1's and 2's of a given length that adds up to n\"\"\"\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)",
        "solution_func": "def g(n=25, length=12):\n    return [1] * (length // 2) + [2] * (length // 2) + [1] * (n - length)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 3, 5, 7, 9], target_sum=15) -> bool:\n    \"\"\"Determine if there exists a combination of numbers from the list that adds up to the target sum\"\"\"\n    def subset_sum(nums, n, target_sum):\n        if target_sum == 0:\n            return True\n        if n == 0 and target_sum != 0:\n            return False\n        if nums[n-1] > target_sum:\n            return subset_sum(nums, n-1, target_sum)\n        return subset_sum(nums, n-1, target_sum) or subset_sum(nums, n-1, target_sum-nums[n-1])\n    return subset_sum(nums, len(nums), target_sum)\ndef g(nums=[1, 3, 5, 7, 9], target_sum=15):\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums)))\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 45,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[1, 3, 5, 7, 9], target_sum=15) -> bool:\n    \"\"\"Determine if there exists a combination of numbers from the list that adds up to the target sum\"\"\"\n    def subset_sum(nums, n, target_sum):\n        if target_sum == 0:\n            return True\n        if n == 0 and target_sum != 0:\n            return False\n        if nums[n-1] > target_sum:\n            return subset_sum(nums, n-1, target_sum)\n        return subset_sum(nums, n-1, target_sum) or subset_sum(nums, n-1, target_sum-nums[n-1])\n    return subset_sum(nums, len(nums), target_sum)",
        "solution_func": "def g(nums=[1, 3, 5, 7, 9], target_sum=15):\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums)))",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Given a list of integers and a value k, return True if there are exactly k numbers in the list that are greater than or equal to k.\"\"\"\n    return len([num for num in nums if num >= k]) == k\ndef g(k=3):\n    nums = [random.randint(1, 10) for _ in range(10)]\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 46,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Given a list of integers and a value k, return True if there are exactly k numbers in the list that are greater than or equal to k.\"\"\"\n    return len([num for num in nums if num >= k]) == k",
        "solution_func": "def g(k=3):\n    nums = [random.randint(1, 10) for _ in range(10)]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix, return True if all the elements in each row are in increasing order, and False otherwise.\"\"\"\n    return all(all(matrix[i][j] < matrix[i][j+1] for j in range(len(matrix[i])-1)) for i in range(len(matrix)))\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 46,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix, return True if all the elements in each row are in increasing order, and False otherwise.\"\"\"\n    return all(all(matrix[i][j] < matrix[i][j+1] for j in range(len(matrix[i])-1)) for i in range(len(matrix)))",
        "solution_func": "def g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], char='a') -> bool:\n    \"\"\"Given a list of words, return True if all the words contain the specified character, and False otherwise.\"\"\"\n    return all(char in word for word in words)\ndef g(char='a'):\n    words = ['apple', 'banana', 'orange']\n    return words\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 46,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], char='a') -> bool:\n    \"\"\"Given a list of words, return True if all the words contain the specified character, and False otherwise.\"\"\"\n    return all(char in word for word in words)",
        "solution_func": "def g(char='a'):\n    words = ['apple', 'banana', 'orange']\n    return words",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=3, b=7) -> bool:\n    \"\"\"Check if the sum of x and the product of a and b is divisible by x\"\"\"\n    return (x + (a * b)) % x == 0\n\ndef g(a=3, b=7):\n    return a * b\n\nassert f(g())\n\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0
        ],
        "idx_generation": 46,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=3, b=7) -> bool:\n    \"\"\"Check if the sum of x and the product of a and b is divisible by x\"\"\"\n    return (x + (a * b)) % x == 0",
        "solution_func": "def g(a=3, b=7):\n    return a * b",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=3, b=7) -> bool:\n    \"\"\"Check if the absolute difference between x and the product of a and b is divisible by x\"\"\"\n    return abs(x - (a * b)) % x == 0\n\ndef g(a=3, b=7):\n    return a * b\n\nassert f(g())\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 46,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=3, b=7) -> bool:\n    \"\"\"Check if the absolute difference between x and the product of a and b is divisible by x\"\"\"\n    return abs(x - (a * b)) % x == 0",
        "solution_func": "def g(a=3, b=7):\n    return a * b",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: int, a=3, b=7) -> bool:\n    \"\"\"Check if the floor division of x and the product of a and b is divisible by x\"\"\"\n    return x // (a * b) % x == 0\n\ndef g(a=3, b=7):\n    return a * b\n\nassert f(g())\n\n",
        "emb": null,
        "idx_generation": 46,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=3, b=7) -> bool:\n    \"\"\"Check if the floor division of x and the product of a and b is divisible by x\"\"\"\n    return x // (a * b) % x == 0",
        "solution_func": "def g(a=3, b=7):\n    return a * b",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[100, 99, 90, 80, 70, 50, 30, 20], k=4) -> bool:\n    \"\"\"Given a list of non-increasing integers and given an integer k, determine how many positive integers in the list\nare at least as large as the kth.\"\"\"\n    assert all((nums[i] >= nums[i + 1] for i in range(len(nums) - 1))), 'Hint: nums are non-decreasing'\n    return all((s >= nums[k] and s > 0 for s in nums[:n])) and all((s < nums[k] or s <= 0 for s in nums[n:]))\ndef g(nums=[100, 99, 90, 80, 70, 50, 30, 20], k=4):\n    threshold = max(nums[k], 1)\n    return sum((s >= threshold for s in nums))\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 46,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[100, 99, 90, 80, 70, 50, 30, 20], k=4) -> bool:\n    \"\"\"Given a list of non-increasing integers and given an integer k, determine how many positive integers in the list\nare at least as large as the kth.\"\"\"\n    assert all((nums[i] >= nums[i + 1] for i in range(len(nums) - 1))), 'Hint: nums are non-decreasing'\n    return all((s >= nums[k] and s > 0 for s in nums[:n])) and all((s < nums[k] or s <= 0 for s in nums[n:]))",
        "solution_func": "def g(nums=[100, 99, 90, 80, 70, 50, 30, 20], k=4):\n    threshold = max(nums[k], 1)\n    return sum((s >= threshold for s in nums))",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, scores=[10, 9, 8, 7, 6, 5, 4, 3], k=3) -> bool:\n    \"\"\"Given a list of non-increasing integers and given an integer k, determine how many positive integers in the list\nare at least as large as the kth.\"\"\"\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return all((s >= scores[k] and s > 0 for s in scores[:n])) and all((s < scores[k] or s <= 0 for s in scores[n:]))\ndef g(scores=[10, 9, 8, 7, 6, 5, 4, 3], k=3):\n    threshold = max(scores[k], 1)\n    return sum((s >= threshold for s in scores))\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 46,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, scores=[10, 9, 8, 7, 6, 5, 4, 3], k=3) -> bool:\n    \"\"\"Given a list of non-increasing integers and given an integer k, determine how many positive integers in the list\nare at least as large as the kth.\"\"\"\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return all((s >= scores[k] and s > 0 for s in scores[:n])) and all((s < scores[k] or s <= 0 for s in scores[n:]))",
        "solution_func": "def g(scores=[10, 9, 8, 7, 6, 5, 4, 3], k=3):\n    threshold = max(scores[k], 1)\n    return sum((s >= threshold for s in scores))",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, scores=[15, 14, 13, 12, 11, 10, 9, 8], k=1) -> bool:\n    \"\"\"Given a list of non-increasing integers and given an integer k, determine how many positive integers in the list\nare at least as large as the kth.\"\"\"\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return all((s >= scores[k] and s > 0 for s in scores[:n])) and all((s < scores[k] or s <= 0 for s in scores[n:]))\ndef g(scores=[15, 14, 13, 12, 11, 10, 9, 8], k=1):\n    threshold = max(scores[k], 1)\n    return sum((s >= threshold for s in scores))\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 46,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, scores=[15, 14, 13, 12, 11, 10, 9, 8], k=1) -> bool:\n    \"\"\"Given a list of non-increasing integers and given an integer k, determine how many positive integers in the list\nare at least as large as the kth.\"\"\"\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return all((s >= scores[k] and s > 0 for s in scores[:n])) and all((s < scores[k] or s <= 0 for s in scores[n:]))",
        "solution_func": "def g(scores=[15, 14, 13, 12, 11, 10, 9, 8], k=1):\n    threshold = max(scores[k], 1)\n    return sum((s >= threshold for s in scores))",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, a='python', b='programming', length=5) -> bool:\n    \"\"\"Find a string of length length that is in both strings a and b\"\"\"\n    return len(s) == length and s in a and s in b\ndef g(a='python', b='programming', length=5):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 46,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, a='python', b='programming', length=5) -> bool:\n    \"\"\"Find a string of length length that is in both strings a and b\"\"\"\n    return len(s) == length and s in a and s in b",
        "solution_func": "def g(a='python', b='programming', length=5):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list whose sum is greater than the target.\"\"\"\n    return any(nums[i] + nums[j] > target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 47,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list whose sum is greater than the target.\"\"\"\n    return any(nums[i] + nums[j] > target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list whose sum is less than the target.\"\"\"\n    return any(nums[i] + nums[j] < target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g():\n    return [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 47,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list whose sum is less than the target.\"\"\"\n    return any(nums[i] + nums[j] < target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g():\n    return [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list whose difference is equal to the target.\"\"\"\n    return any(abs(nums[i] - nums[j]) == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g():\n    return [1, 5, 9, 12, 15, 18, 22, 25, 28, 30]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 47,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list whose difference is equal to the target.\"\"\"\n    return any(abs(nums[i] - nums[j]) == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g():\n    return [1, 5, 9, 12, 15, 18, 22, 25, 28, 30]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list whose sum is equal to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 47,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list whose sum is equal to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=50) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is greater than or equal to the target value.\"\"\"\n    return any(x + y >= target for x in arr for y in arr)\ndef g(target=50):\n    return [5, 10, 15, 20, 25, 30, 35, 40, 45]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 47,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=50) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is greater than or equal to the target value.\"\"\"\n    return any(x + y >= target for x in arr for y in arr)",
        "solution_func": "def g(target=50):\n    return [5, 10, 15, 20, 25, 30, 35, 40, 45]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find the number of pairs in the list whose sum is equal to the target value.\"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                count += 1\n    return count\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g()) == 4\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 47,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find the number of pairs in the list whose sum is equal to the target value.\"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                count += 1\n    return count",
        "solution_func": "def g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find a subarray whose sum is equal to a given target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            if sum(arr[i:j]) == target:\n                return True\n    return False\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 47,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find a subarray whose sum is equal to a given target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            if sum(arr[i:j]) == target:\n                return True\n    return False",
        "solution_func": "def g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(arr: List[int], target=24) -> bool:\n    \"\"\"Find a combination of four numbers from a given list that evaluates to a given target\"\"\"\n    for comb in itertools.combinations(arr, 4):\n        if sum(comb) == target:\n            return True\n    return False\ndef g(target=24):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 47,
        "target_skills": null,
        "problem_func": "from typing import*\nimport itertools\n\ndef f(arr: List[int], target=24) -> bool:\n    \"\"\"Find a combination of four numbers from a given list that evaluates to a given target\"\"\"\n    for comb in itertools.combinations(arr, 4):\n        if sum(comb) == target:\n            return True\n    return False",
        "solution_func": "def g(target=24):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Find a column in the matrix whose sum is equal to a given target\"\"\"\n    for col in zip(*matrix):\n        if sum(col) == target:\n            return True\n    return False\ndef g(target=100):\n    return [[10, 20, 30], [40, 50, 60], [70, 80, 90]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 47,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Find a column in the matrix whose sum is equal to a given target\"\"\"\n    for col in zip(*matrix):\n        if sum(col) == target:\n            return True\n    return False",
        "solution_func": "def g(target=100):\n    return [[10, 20, 30], [40, 50, 60], [70, 80, 90]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Find a subset of a list of integers that adds up to a target sum.\"\"\"\n    def subset_sum(nums, target_sum):\n        if target_sum == 0:\n            return True\n        if not nums or target_sum < 0:\n            return False\n        return subset_sum(nums[1:], target_sum - nums[0]) or subset_sum(nums[1:], target_sum)\n    return subset_sum(nums, target_sum)\ndef g(target_sum=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 47,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Find a subset of a list of integers that adds up to a target sum.\"\"\"\n    def subset_sum(nums, target_sum):\n        if target_sum == 0:\n            return True\n        if not nums or target_sum < 0:\n            return False\n        return subset_sum(nums[1:], target_sum - nums[0]) or subset_sum(nums[1:], target_sum)\n    return subset_sum(nums, target_sum)",
        "solution_func": "def g(target_sum=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find a pair of numbers from the given matrix whose sum is equal to the target value\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [[i+j for i in range(target)] for j in range(target)]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 48,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find a pair of numbers from the given matrix whose sum is equal to the target value\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [[i+j for i in range(target)] for j in range(target)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(phrase: str, word='Hello') -> bool:\n    \"\"\"Check if the given word is present in the given phrase\"\"\"\n    return word.lower() in phrase.lower()\ndef g(phrase='Hello, how are you?'):\n    return phrase\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 48,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(phrase: str, word='Hello') -> bool:\n    \"\"\"Check if the given word is present in the given phrase\"\"\"\n    return word.lower() in phrase.lower()",
        "solution_func": "def g(phrase='Hello, how are you?'):\n    return phrase",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: List[int], k=3) -> bool:\n    \"\"\"Find the largest k numbers from the given list\"\"\"\n    return sorted(numbers)[-k:] == sorted(numbers, reverse=True)[:k]\ndef g(k=3):\n    return list(range(k+1))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 48,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], k=3) -> bool:\n    \"\"\"Find the largest k numbers from the given list\"\"\"\n    return sorted(numbers)[-k:] == sorted(numbers, reverse=True)[:k]",
        "solution_func": "def g(k=3):\n    return list(range(k+1))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5, threshold=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose absolute difference is greater than the threshold\"\"\"\n    return any(abs(a - b) > threshold for i, a in enumerate(nums) for b in nums[i+1:])\ndef g(target=5, threshold=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 48,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=5, threshold=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose absolute difference is greater than the threshold\"\"\"\n    return any(abs(a - b) > threshold for i, a in enumerate(nums) for b in nums[i+1:])",
        "solution_func": "def g(target=5, threshold=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, chars=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if the given string contains all the vowels\"\"\"\n    return all(char in s for char in chars)\ndef g(chars=['a', 'e', 'i', 'o', 'u']):\n    return 'aeiou'\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 48,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, chars=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if the given string contains all the vowels\"\"\"\n    return all(char in s for char in chars)",
        "solution_func": "def g(chars=['a', 'e', 'i', 'o', 'u']):\n    return 'aeiou'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    return any(a + b == target for i, a in enumerate(nums) for b in nums[i+1:])\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 48,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    return any(a + b == target for i, a in enumerate(nums) for b in nums[i+1:])",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_length=5) -> bool:\n    \"\"\"Find a substring of length target_length in s that contains only vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(s) - target_length + 1):\n        if all([c in vowels for c in s[i:i+target_length]]):\n            return True\n    return False\ndef g(target_length=5):\n    return \"aeiou\" * (target_length // 5)\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 48,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target_length=5) -> bool:\n    \"\"\"Find a substring of length target_length in s that contains only vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(s) - target_length + 1):\n        if all([c in vowels for c in s[i:i+target_length]]):\n            return True\n    return False",
        "solution_func": "def g(target_length=5):\n    return \"aeiou\" * (target_length // 5)",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Find a sublist of nums that sums up to the target_sum and contains at least three elements.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+2, len(nums)):\n            subarray_sum = sum(nums[i:j+1])\n            if subarray_sum == target_sum:\n                return True\n    return False\ndef g(target_sum=100):\n    return [target_sum-99, target_sum-1, target_sum]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 48,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Find a sublist of nums that sums up to the target_sum and contains at least three elements.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+2, len(nums)):\n            subarray_sum = sum(nums[i:j+1])\n            if subarray_sum == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=100):\n    return [target_sum-99, target_sum-1, target_sum]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 48,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True",
        "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Given a list of numbers and a target number, determine whether there exists two numbers in the list whose sum is equal to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=100):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 48,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Given a list of numbers and a target number, determine whether there exists two numbers in the list whose sum is equal to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=100):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100, count=5) -> bool:\n    \"\"\"Find a sublist of numbers with a certain target sum and count of elements\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)+1):\n            if sum(numbers[i:j]) == target and len(numbers[i:j]) == count:\n                return True\n    return False\ndef g(target=100, count=5):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 49,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=100, count=5) -> bool:\n    \"\"\"Find a sublist of numbers with a certain target sum and count of elements\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)+1):\n            if sum(numbers[i:j]) == target and len(numbers[i:j]) == count:\n                return True\n    return False",
        "solution_func": "def g(target=100, count=5):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(names: List[str], length=5, count=3) -> bool:\n    \"\"\"Find a list with a certain number of names with a certain length\"\"\"\n    return len([name for name in names if len(name) == length]) == count\ndef g(length=5, count=3):\n    return ['John', 'Jane', 'Mike', 'Emily', 'Alex', 'Sarah']\nassert f(g())\n",
        "emb": null,
        "idx_generation": 49,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(names: List[str], length=5, count=3) -> bool:\n    \"\"\"Find a list with a certain number of names with a certain length\"\"\"\n    return len([name for name in names if len(name) == length]) == count",
        "solution_func": "def g(length=5, count=3):\n    return ['John', 'Jane', 'Mike', 'Emily', 'Alex', 'Sarah']",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10, count=3) -> bool:\n    \"\"\"Find a list of rows in a matrix whose sum is equal to a certain target sum and count of rows\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    return row_sums.count(target) == count\ndef g(target=10, count=3):\n    return [[1, 2, 3], [4, 5, 1], [2, 3, 4], [5, 1, 2], [3, 4, 5]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 49,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10, count=3) -> bool:\n    \"\"\"Find a list of rows in a matrix whose sum is equal to a certain target sum and count of rows\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    return row_sums.count(target) == count",
        "solution_func": "def g(target=10, count=3):\n    return [[1, 2, 3], [4, 5, 1], [2, 3, 4], [5, 1, 2], [3, 4, 5]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    \"\"\"Check if a number n is a common divisor of both a and b, and is greater than or equal to the lower_bound\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a=247586288427023352, b=372021520735824432, lower_bound=1709054537):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 49,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    \"\"\"Check if a number n is a common divisor of both a and b, and is greater than or equal to the lower_bound\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)",
        "solution_func": "def g(a=247586288427023352, b=372021520735824432, lower_bound=1709054537):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    \"\"\"Check if a number n is a common divisor of both a and b, and is greater than or equal to the lower_bound\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a=247586288427023352, b=372021520735824432, lower_bound=1709054537):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 49,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    \"\"\"Check if a number n is a common divisor of both a and b, and is greater than or equal to the lower_bound\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)",
        "solution_func": "def g(a=247586288427023352, b=372021520735824432, lower_bound=1709054537):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    \"\"\"Check if a number n is a common divisor of both a and b, and is greater than or equal to the lower_bound\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a=247586288427023352, b=372021520735824432, lower_bound=1709054537):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 49,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    \"\"\"Check if a number n is a common divisor of both a and b, and is greater than or equal to the lower_bound\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)",
        "solution_func": "def g(a=247586288427023352, b=372021520735824432, lower_bound=1709054537):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import *\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Given a matrix of integers and a target value, find if the target value exists in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix: List[List[int]], target=0):\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 49,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import *\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Given a matrix of integers and a target value, find if the target value exists in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(matrix: List[List[int]], target=0):\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Find a string that contains all the substrings\"\"\"\n    return all((sub in s for sub in substrings))\n\ndef g(substrings=['apple', 'banana', 'cherry', 'date']):\n    return ''.join(substrings)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 49,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Find a string that contains all the substrings\"\"\"\n    return all((sub in s for sub in substrings))",
        "solution_func": "def g(substrings=['apple', 'banana', 'cherry', 'date']):\n    return ''.join(substrings)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers and a target value, find if there are two numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8]):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 49,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers and a target value, find if there are two numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(i: int, li=[-68, 81, 13, -5, 81, 75, -3, -73, -89, 72], target=13) -> bool:\n    \"\"\"Check if the value at index i in the list is equal to the target value.\"\"\"\n    return li[i] == target\ndef g(li=[-68, 81, 13, -5, 81, 75, -3, -73, -89, 72], target=13):\n    return li.index(target)\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 49,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(i: int, li=[-68, 81, 13, -5, 81, 75, -3, -73, -89, 72], target=13) -> bool:\n    \"\"\"Check if the value at index i in the list is equal to the target value.\"\"\"\n    return li[i] == target",
        "solution_func": "def g(li=[-68, 81, 13, -5, 81, 75, -3, -73, -89, 72], target=13):\n    return li.index(target)",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    \"\"\"Check if a number n is a common divisor of both a and b, and is greater than or equal to the lower_bound\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a=247586288427023352, b=372021520735824432, lower_bound=1709054537):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 50,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    \"\"\"Check if a number n is a common divisor of both a and b, and is greater than or equal to the lower_bound\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)",
        "solution_func": "def g(a=247586288427023352, b=372021520735824432, lower_bound=1709054537):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Find three numbers in the given list whose sum is equal to the target.\"\"\"\n    return any(arr[i] + arr[j] + arr[k] == target for i in range(len(arr)) for j in range(i + 1, len(arr)) for k in range(j + 1, len(arr)))\ndef g(target=20):\n    return [5, 10, 5]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 50,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Find three numbers in the given list whose sum is equal to the target.\"\"\"\n    return any(arr[i] + arr[j] + arr[k] == target for i in range(len(arr)) for j in range(i + 1, len(arr)) for k in range(j + 1, len(arr)))",
        "solution_func": "def g(target=20):\n    return [5, 10, 5]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='world') -> bool:\n    \"\"\"Check if the target string is present at the end of the given string.\"\"\"\n    return s.endswith(target)\ndef g(target='world'):\n    return \"Hello, world\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 50,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='world') -> bool:\n    \"\"\"Check if the target string is present at the end of the given string.\"\"\"\n    return s.endswith(target)",
        "solution_func": "def g(target='world'):\n    return \"Hello, world\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list whose sum is less than the target.\"\"\"\n    return any(nums[i] + nums[j] < target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g():\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 50,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list whose sum is less than the target.\"\"\"\n    return any(nums[i] + nums[j] < target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g():\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list whose difference is less than the target.\"\"\"\n    return any(abs(nums[i] - nums[j]) < target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g():\n    return [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 50,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list whose difference is less than the target.\"\"\"\n    return any(abs(nums[i] - nums[j]) < target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g():\n    return [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list whose product is greater than the target.\"\"\"\n    return any(nums[i] * nums[j] > target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 50,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list whose product is greater than the target.\"\"\"\n    return any(nums[i] * nums[j] > target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"Find a list of integers containing at least four distinct values, such that no integer repeats\nthrice consecutively among the first fourteen entries. (So the list needs to have length greater than thirteen.)\"\"\"\n    return all([li[i] != li[i + 1] != li[i + 2] for i in range(13)]) and len(set(li)) >= 4\ndef g():\n    return [0, 1, 2, 3] * 5\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 50,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"Find a list of integers containing at least four distinct values, such that no integer repeats\nthrice consecutively among the first fourteen entries. (So the list needs to have length greater than thirteen.)\"\"\"\n    return all([li[i] != li[i + 1] != li[i + 2] for i in range(13)]) and len(set(li)) >= 4",
        "solution_func": "def g():\n    return [0, 1, 2, 3] * 5",
        "map_ix": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"Find a list of integers such that the sum of the squares of any consecutive three numbers is greater than 1000.\"\"\"\n    return all([(li[i] ** 2 + li[i + 1] ** 2 + li[i + 2] ** 2) > 1000 for i in range(len(li) - 2)])\ndef g():\n    return [i for i in range(-100, 101)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 50,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"Find a list of integers such that the sum of the squares of any consecutive three numbers is greater than 1000.\"\"\"\n    return all([(li[i] ** 2 + li[i + 1] ** 2 + li[i + 2] ** 2) > 1000 for i in range(len(li) - 2)])",
        "solution_func": "def g():\n    return [i for i in range(-100, 101)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"Find a list of integers such that the sum of the elements in any consecutive three numbers is divisible by 7.\"\"\"\n    return all([(li[i] + li[i + 1] + li[i + 2]) % 7 == 0 for i in range(len(li) - 2)])\ndef g():\n    return [i for i in range(1000)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 50,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"Find a list of integers such that the sum of the elements in any consecutive three numbers is divisible by 7.\"\"\"\n    return all([(li[i] + li[i + 1] + li[i + 2]) % 7 == 0 for i in range(len(li) - 2)])",
        "solution_func": "def g():\n    return [i for i in range(1000)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    \"\"\"Check if a number n is a common divisor of both a and b, and is greater than the lower_bound\"\"\"\n    return a % n == 0 and b % n == 0 and (n > lower_bound)\ndef g(a=247586288427023352, b=372021520735824432, lower_bound=1709054537):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n+1\nassert f(g())\n",
        "emb": null,
        "idx_generation": 50,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    \"\"\"Check if a number n is a common divisor of both a and b, and is greater than the lower_bound\"\"\"\n    return a % n == 0 and b % n == 0 and (n > lower_bound)",
        "solution_func": "def g(a=247586288427023352, b=372021520735824432, lower_bound=1709054537):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n+1",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=5, s=25) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=5, s=25):\n    x = [s - n + 1, 1, 1, 1, 1]\n    return x\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 51,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=5, s=25) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])",
        "solution_func": "def g(n=5, s=25):\n    x = [s - n + 1, 1, 1, 1, 1]\n    return x",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=3, s=15) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=3, s=15):\n    x = [s - n + 1, 1, 1]\n    return x\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 51,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=3, s=15) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])",
        "solution_func": "def g(n=3, s=15):\n    x = [s - n + 1, 1, 1]\n    return x",
        "map_ix": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=4, s=30) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=4, s=30):\n    x = [s - n + 1, 1, 1, 1]\n    return x\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 51,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=4, s=30) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])",
        "solution_func": "def g(n=4, s=30):\n    x = [s - n + 1, 1, 1, 1]\n    return x",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2) -> bool:\n    \"\"\"Given a list of non-increasing integers and given an integer k, determine how many positive integers in the list\nare strictly larger than the kth.\"\"\"\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return all((s > scores[k] and s > 0 for s in scores[:n])) and all((s <= scores[k] or s <= 0 for s in scores[n:]))\ndef g(scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2):\n    threshold = max(scores[k], 1)\n    return sum((s > threshold for s in scores))\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 51,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2) -> bool:\n    \"\"\"Given a list of non-increasing integers and given an integer k, determine how many positive integers in the list\nare strictly larger than the kth.\"\"\"\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return all((s > scores[k] and s > 0 for s in scores[:n])) and all((s <= scores[k] or s <= 0 for s in scores[n:]))",
        "solution_func": "def g(scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2):\n    threshold = max(scores[k], 1)\n    return sum((s > threshold for s in scores))",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2) -> bool:\n    \"\"\"Given a list of non-increasing integers and given an integer k, determine how many positive integers in the list\nare strictly smaller than the kth.\"\"\"\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return all((s < scores[k] and s > 0 for s in scores[:n])) and all((s >= scores[k] or s <= 0 for s in scores[n:]))\ndef g(scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2):\n    threshold = max(scores[k], 1)\n    return sum((s < threshold for s in scores))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 51,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2) -> bool:\n    \"\"\"Given a list of non-increasing integers and given an integer k, determine how many positive integers in the list\nare strictly smaller than the kth.\"\"\"\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return all((s < scores[k] and s > 0 for s in scores[:n])) and all((s >= scores[k] or s <= 0 for s in scores[n:]))",
        "solution_func": "def g(scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2):\n    threshold = max(scores[k], 1)\n    return sum((s < threshold for s in scores))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2) -> bool:\n    \"\"\"Given a list of non-increasing integers and given an integer k, determine if there are exactly k positive integers\nin the list.\"\"\"\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return sum((s > 0 for s in scores)) == k\ndef g(scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2):\n    return sum((s > 0 for s in scores))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 51,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2) -> bool:\n    \"\"\"Given a list of non-increasing integers and given an integer k, determine if there are exactly k positive integers\nin the list.\"\"\"\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return sum((s > 0 for s in scores)) == k",
        "solution_func": "def g(scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2):\n    return sum((s > 0 for s in scores))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers from a list that add up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, target-1]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 51,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers from a list that add up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, target-1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sentence: str, word='Python') -> bool:\n    \"\"\"Check if a specific word is in a sentence, regardless of the case\"\"\"\n    return word.lower() in sentence.lower().split()\ndef g(word='Python'):\n    return \"I love \" + word\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 51,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(sentence: str, word='Python') -> bool:\n    \"\"\"Check if a specific word is in a sentence, regardless of the case\"\"\"\n    return word.lower() in sentence.lower().split()",
        "solution_func": "def g(word='Python'):\n    return \"I love \" + word",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a given number is a prime number\"\"\"\n    return n in primes\ndef g():\n    return 29\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 51,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a given number is a prime number\"\"\"\n    return n in primes",
        "solution_func": "def g():\n    return 29",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the sum of the numbers is equal to the product of the numbers.\"\"\"\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for num in numbers:\n        product_of_numbers *= num\n    return sum_of_numbers == product_of_numbers\n\ndef g():\n    return [2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 51,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the sum of the numbers is equal to the product of the numbers.\"\"\"\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for num in numbers:\n        product_of_numbers *= num\n    return sum_of_numbers == product_of_numbers",
        "solution_func": "def g():\n    return [2, 3, 4, 5, 6]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], tot=500, n=5) -> bool:\n    \"\"\"Find n distinct positive even integers that sum to tot\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 == 0 for i in nums))\ndef g(tot=500, n=5):\n    return list(range(2, 2 * n + 1, 2)) + [tot - sum(range(2, 2 * n + 1, 2))]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 52,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], tot=500, n=5) -> bool:\n    \"\"\"Find n distinct positive even integers that sum to tot\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 == 0 for i in nums))",
        "solution_func": "def g(tot=500, n=5):\n    return list(range(2, 2 * n + 1, 2)) + [tot - sum(range(2, 2 * n + 1, 2))]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, k=4) -> bool:\n    \"\"\"Check if a string is a palindrome and has exactly k vowels.\"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s = s.lower()\n    return s == s[::-1] and sum(1 for c in s if c in vowels) == k\ndef g(k=4):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join(vowels * (k // len(vowels))) + ''.join(vowels[:k % len(vowels)])\nassert f(g())\n",
        "emb": null,
        "idx_generation": 52,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, k=4) -> bool:\n    \"\"\"Check if a string is a palindrome and has exactly k vowels.\"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s = s.lower()\n    return s == s[::-1] and sum(1 for c in s if c in vowels) == k",
        "solution_func": "def g(k=4):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join(vowels * (k // len(vowels))) + ''.join(vowels[:k % len(vowels)])",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a pair of distinct integers in a list that sum up to the target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=100):\n    return list(range(target//2 - 10, target//2)) + [target//2 + 1]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 52,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a pair of distinct integers in a list that sum up to the target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=100):\n    return list(range(target//2 - 10, target//2)) + [target//2 + 1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: float, a=1000000000) -> bool:\n    \"\"\"Find a number that when cubed is close to a.\"\"\"\n    return abs(x ** 3 - a) < 10 ** (-3)\ndef g(a=1000000000):\n    return a ** (1/3)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 52,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: float, a=1000000000) -> bool:\n    \"\"\"Find a number that when cubed is close to a.\"\"\"\n    return abs(x ** 3 - a) < 10 ** (-3)",
        "solution_func": "def g(a=1000000000):\n    return a ** (1/3)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: float, a=987654321) -> bool:\n    \"\"\"Find a number that when squared is close to a and is greater than 0.\"\"\"\n    return abs(x ** 2 - a) < 10 ** (-3) and x > 0\ndef g(a=987654321):\n    return a ** 0.5\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 52,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: float, a=987654321) -> bool:\n    \"\"\"Find a number that when squared is close to a and is greater than 0.\"\"\"\n    return abs(x ** 2 - a) < 10 ** (-3) and x > 0",
        "solution_func": "def g(a=987654321):\n    return a ** 0.5",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, a='racecar') -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return x == x[::-1] and x == a\ndef g(a='racecar'):\n    return a\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 52,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, a='racecar') -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return x == x[::-1] and x == a",
        "solution_func": "def g(a='racecar'):\n    return a",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(lst: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a subset of the list that sums up to the target_sum\"\"\"\n    dp = [False] * (target_sum + 1)\n    dp[0] = True\n    for num in lst:\n        for i in range(target_sum, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    return dp[target_sum]\ndef g(lst: List[int], target_sum=100):\n    subset = []\n    while sum(subset) != target_sum:\n        subset = random.choices(lst, k=random.randint(1, len(lst)))\n    return subset\nassert f(g())\n",
        "emb": null,
        "idx_generation": 52,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(lst: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a subset of the list that sums up to the target_sum\"\"\"\n    dp = [False] * (target_sum + 1)\n    dp[0] = True\n    for num in lst:\n        for i in range(target_sum, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    return dp[target_sum]",
        "solution_func": "def g(lst: List[int], target_sum=100):\n    subset = []\n    while sum(subset) != target_sum:\n        subset = random.choices(lst, k=random.randint(1, len(lst)))\n    return subset",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(lst: List[int], target_length=4) -> bool:\n    \"\"\"Check if there exists a subsequence of the list that has the target_length\"\"\"\n    dp = [[False] * (target_length + 1) for _ in range(len(lst) + 1)]\n    for i in range(len(lst) + 1):\n        dp[i][0] = True\n    for i in range(1, len(lst) + 1):\n        for j in range(1, target_length + 1):\n            if lst[i - 1] == dp[j]:\n                dp[i][j] = dp[i-1][j-1] or dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[len(lst)][target_length]\ndef g(lst: List[int], target_length=4):\n    subsequence = random.choices(lst, k=target_length)\n    return subsequence\nassert f(g())\n",
        "emb": null,
        "idx_generation": 52,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(lst: List[int], target_length=4) -> bool:\n    \"\"\"Check if there exists a subsequence of the list that has the target_length\"\"\"\n    dp = [[False] * (target_length + 1) for _ in range(len(lst) + 1)]\n    for i in range(len(lst) + 1):\n        dp[i][0] = True\n    for i in range(1, len(lst) + 1):\n        for j in range(1, target_length + 1):\n            if lst[i - 1] == dp[j]:\n                dp[i][j] = dp[i-1][j-1] or dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[len(lst)][target_length]",
        "solution_func": "def g(lst: List[int], target_length=4):\n    subsequence = random.choices(lst, k=target_length)\n    return subsequence",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(lst: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray of the list with length k that sums up to zero\"\"\"\n    prefix_sum = 0\n    prefix_sums = {0}\n    for num in lst:\n        prefix_sum += num\n        if prefix_sum - k in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\ndef g(lst: List[int], k=3):\n    subarray = random.choices(lst, k=k)\n    return subarray\nassert f(g())\n",
        "emb": null,
        "idx_generation": 52,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(lst: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray of the list with length k that sums up to zero\"\"\"\n    prefix_sum = 0\n    prefix_sums = {0}\n    for num in lst:\n        prefix_sum += num\n        if prefix_sum - k in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False",
        "solution_func": "def g(lst: List[int], k=3):\n    subarray = random.choices(lst, k=k)\n    return subarray",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int], target=-5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that subtracts to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if num - target in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=-5):\n    nums = [10, 15, 20, 25, 30]\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 52,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import *\ndef f(nums: List[int], target=-5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that subtracts to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if num - target in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=-5):\n    nums = [10, 15, 20, 25, 30]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], target=12) -> bool:\n    \"\"\"Find the index of an even number in a list. Any such index is fine.\"\"\"\n    return lst[n] == target\ndef g(lst=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], target=12):\n    return lst.index(target)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 53,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], target=12) -> bool:\n    \"\"\"Find the index of an even number in a list. Any such index is fine.\"\"\"\n    return lst[n] == target",
        "solution_func": "def g(lst=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], target=12):\n    return lst.index(target)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, lst=['apple', 'banana', 'cherry', 'durian', 'elderberry'], target='cherry') -> bool:\n    \"\"\"Find the index of a fruit in a list. Any such index is fine.\"\"\"\n    return lst[s] == target\ndef g(lst=['apple', 'banana', 'cherry', 'durian', 'elderberry'], target='cherry'):\n    return lst.index(target)\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 53,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, lst=['apple', 'banana', 'cherry', 'durian', 'elderberry'], target='cherry') -> bool:\n    \"\"\"Find the index of a fruit in a list. Any such index is fine.\"\"\"\n    return lst[s] == target",
        "solution_func": "def g(lst=['apple', 'banana', 'cherry', 'durian', 'elderberry'], target='cherry'):\n    return lst.index(target)",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(i: int, lst=[0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.25, 2.5], target=1.0) -> bool:\n    \"\"\"Find the index of a decimal number in a list. Any such index is fine.\"\"\"\n    return lst[i] == target\ndef g(lst=[0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.25, 2.5], target=1.0):\n    return lst.index(target)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 53,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(i: int, lst=[0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.25, 2.5], target=1.0) -> bool:\n    \"\"\"Find the index of a decimal number in a list. Any such index is fine.\"\"\"\n    return lst[i] == target",
        "solution_func": "def g(lst=[0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.25, 2.5], target=1.0):\n    return lst.index(target)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target number, find any two numbers in the list that add up to the target.\nSample Input:\n[2, 4, 6, 8, 10]\nSample Output:\nTrue\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    return [2, 8]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 53,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target number, find any two numbers in the list that add up to the target.\nSample Input:\n[2, 4, 6, 8, 10]\nSample Output:\nTrue\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=10):\n    return [2, 8]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, n=4) -> bool:\n    \"\"\"Check if a string is a palindrome of length n\"\"\"\n    return string == string[::-1] and len(string) == n\ndef g(n=4):\n    return 'abba'\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 53,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, n=4) -> bool:\n    \"\"\"Check if a string is a palindrome of length n\"\"\"\n    return string == string[::-1] and len(string) == n",
        "solution_func": "def g(n=4):\n    return 'abba'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=2) -> bool:\n    \"\"\"Check if a matrix is symmetric of size n x n\"\"\"\n    return all((matrix[i][j] == matrix[j][i]) for i in range(n) for j in range(n))\ndef g(n=2):\n    return [[1, 2], [2, 3]]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 53,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=2) -> bool:\n    \"\"\"Check if a matrix is symmetric of size n x n\"\"\"\n    return all((matrix[i][j] == matrix[j][i]) for i in range(n) for j in range(n))",
        "solution_func": "def g(n=2):\n    return [[1, 2], [2, 3]]",
        "map_ix": [
            1,
            0,
            1,
            0,
            0,
            1,
            1,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\nfrom typing import List\n\ndef f(x: List[float], a=2.5, b=1, c=3) -> bool:\n    \"\"\"Check if the given list of numbers follows a quadratic equation.\n    Solution should be a list of floats.\n    Accuracy of fifth decimal digit is required.\"\"\"\n    return all(math.isclose(a * (num ** 2) + b * num + c, y, rel_tol=1e-05, abs_tol=1e-05) for num, y in enumerate(x))\n    \ndef g(a=2.5, b=1, c=3):\n    return [a * (num ** 2) + b * num + c for num in range(10)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 53,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\nfrom typing import List\n\ndef f(x: List[float], a=2.5, b=1, c=3) -> bool:\n    \"\"\"Check if the given list of numbers follows a quadratic equation.\n    Solution should be a list of floats.\n    Accuracy of fifth decimal digit is required.\"\"\"\n    return all(math.isclose(a * (num ** 2) + b * num + c, y, rel_tol=1e-05, abs_tol=1e-05) for num, y in enumerate(x))",
        "solution_func": "def g(a=2.5, b=1, c=3):\n    return [a * (num ** 2) + b * num + c for num in range(10)]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if the given string is a palindrome and has a length greater than or equal to n.\"\"\"\n    return s == s[::-1] and len(s) >= n\n\ndef g(n=5):\n    return 'racecar'\n    \nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 53,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if the given string is a palindrome and has a length greater than or equal to n.\"\"\"\n    return s == s[::-1] and len(s) >= n",
        "solution_func": "def g(n=5):\n    return 'racecar'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List, Tuple\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a permutation of numbers in the list whose sum is equal to the target.\"\"\"\n    return any(sum(perm) == target for perm in itertools.permutations(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n    \nassert f(g())\n",
        "emb": null,
        "idx_generation": 53,
        "target_skills": null,
        "problem_func": "from typing import*\nimport itertools\nfrom typing import List, Tuple\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a permutation of numbers in the list whose sum is equal to the target.\"\"\"\n    return any(sum(perm) == target for perm in itertools.permutations(nums))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value.\"\"\"\n    return any([nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))])\ndef g(target=20):\n    return [5, 15, 2, 10]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 53,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value.\"\"\"\n    return any([nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))])",
        "solution_func": "def g(target=20):\n    return [5, 15, 2, 10]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=8, n=8) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=8, n=8):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 54,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=8, n=8) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]",
        "solution_func": "def g(m=8, n=8):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])",
        "map_ix": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=6, n=6) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=6, n=6):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 54,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=6, n=6) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]",
        "solution_func": "def g(m=6, n=6):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])",
        "map_ix": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 54,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]",
        "solution_func": "def g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])",
        "map_ix": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose sum is equal to the target value.\"\"\"\n    return any(target - x in numbers for x in numbers)\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 54,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose sum is equal to the target value.\"\"\"\n    return any(target - x in numbers for x in numbers)",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if there exist two numbers in the matrix whose sum is equal to the target value.\"\"\"\n    return any(target - x - y in [num for row in matrix for num in row] for x in [num for row in matrix for num in row] for y in [num for row in matrix for num in row])\n\ndef g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 54,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if there exist two numbers in the matrix whose sum is equal to the target value.\"\"\"\n    return any(target - x - y in [num for row in matrix for num in row] for x in [num for row in matrix for num in row] for y in [num for row in matrix for num in row])",
        "solution_func": "def g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Check if any word in the list contains all the letters of the target string in the same order.\"\"\"\n    return any(target in word for word in words)\n\ndef g(target='python'):\n    return ['python', 'programming', 'puzzle']\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 54,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Check if any word in the list contains all the letters of the target string in the same order.\"\"\"\n    return any(target in word for word in words)",
        "solution_func": "def g(target='python'):\n    return ['python', 'programming', 'puzzle']",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=5849635) -> bool:\n    \"\"\"Check if the square root of a number is equal to a given value\"\"\"\n    return x**0.5 == a\ndef g(a=5849635):\n    return a**2\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 54,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=5849635) -> bool:\n    \"\"\"Check if the square root of a number is equal to a given value\"\"\"\n    return x**0.5 == a",
        "solution_func": "def g(a=5849635):\n    return a**2",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n=5) -> bool:\n    \"\"\"Check if the sum of n smallest elements in a list is divisible by 3\"\"\"\n    return sum(sorted(arr)[:n]) % 3 == 0\ndef g(n=5):\n    return list(range(1, n+1))\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 54,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], n=5) -> bool:\n    \"\"\"Check if the sum of n smallest elements in a list is divisible by 3\"\"\"\n    return sum(sorted(arr)[:n]) % 3 == 0",
        "solution_func": "def g(n=5):\n    return list(range(1, n+1))",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='hello') -> bool:\n    \"\"\"Check if a substring is present in a string\"\"\"\n    return substring in s\ndef g(substring='hello'):\n    return substring + ' world'\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 54,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring='hello') -> bool:\n    \"\"\"Check if a substring is present in a string\"\"\"\n    return substring in s",
        "solution_func": "def g(substring='hello'):\n    return substring + ' world'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: int, y: int, threshold=10) -> bool:\n    \"\"\"Check if the sum of two numbers is greater than a threshold\"\"\"\n    return (x + y) > threshold\ndef g(y: int, threshold=10):\n    return threshold - y\nassert f(g())\n",
        "emb": null,
        "idx_generation": 54,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, y: int, threshold=10) -> bool:\n    \"\"\"Check if the sum of two numbers is greater than a threshold\"\"\"\n    return (x + y) > threshold",
        "solution_func": "def g(y: int, threshold=10):\n    return threshold - y",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose difference is equal to the target\"\"\"\n    return any(abs(a - b) == target for i, a in enumerate(nums) for b in nums[i+1:])\ndef g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 55,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose difference is equal to the target\"\"\"\n    return any(abs(a - b) == target for i, a in enumerate(nums) for b in nums[i+1:])",
        "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target\"\"\"\n    return any(a * b == target for i, a in enumerate(nums) for b in nums[i+1:])\ndef g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 55,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target\"\"\"\n    return any(a * b == target for i, a in enumerate(nums) for b in nums[i+1:])",
        "solution_func": "def g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose division is equal to the target\"\"\"\n    return any(a / b == target for i, a in enumerate(nums) for b in nums[i+1:])\ndef g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 55,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose division is equal to the target\"\"\"\n    return any(a / b == target for i, a in enumerate(nums) for b in nums[i+1:])",
        "solution_func": "def g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target number, find any pair of numbers in the list that multiply to the target.\nSample Input:\n[2, 5, 3, 4]\nSample Output:\n(2, 5)\"\"\"\n    return any((nums[i] * nums[j] == target) for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(target=10):\n    return [2, 5]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 55,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target number, find any pair of numbers in the list that multiply to the target.\nSample Input:\n[2, 5, 3, 4]\nSample Output:\n(2, 5)\"\"\"\n    return any((nums[i] * nums[j] == target) for i in range(len(nums)) for j in range(i + 1, len(nums)))",
        "solution_func": "def g(target=10):\n    return [2, 5]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=2, b=10) -> bool:\n    \"\"\"Satisfy a simple if statement with multiple cases\"\"\"\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x * a == b\ndef g(a=2, b=10):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b / a\n    return x\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 55,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=2, b=10) -> bool:\n    \"\"\"Satisfy a simple if statement with multiple cases\"\"\"\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x * a == b",
        "solution_func": "def g(a=2, b=10):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b / a\n    return x",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, words=['dog', 'cat', 'bird', 'elephant']) -> bool:\n    \"\"\"Given a string and a list of words, determine if the string can be formed by concatenating the words in the list.\n    Each word in the list can be used only once.\"\"\"\n    word_count = {}\n    for word in words:\n        if word not in word_count:\n            word_count[word] = 0\n        word_count[word] += 1\n\n    i = 0\n    while i < len(string):\n        found_word = False\n        for word in word_count:\n            if string[i:i+len(word)] == word:\n                if word_count[word] > 0:\n                    word_count[word] -= 1\n                    i += len(word)\n                    found_word = True\n                    break\n        if not found_word:\n            return False\n\n    for count in word_count.values():\n        if count > 0:\n            return False\n\n    return True\n\ndef g(words=['dog', 'cat', 'bird', 'elephant']):\n    return ''.join(words)\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 55,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, words=['dog', 'cat', 'bird', 'elephant']) -> bool:\n    \"\"\"Given a string and a list of words, determine if the string can be formed by concatenating the words in the list.\n    Each word in the list can be used only once.\"\"\"\n    word_count = {}\n    for word in words:\n        if word not in word_count:\n            word_count[word] = 0\n        word_count[word] += 1\n\n    i = 0\n    while i < len(string):\n        found_word = False\n        for word in word_count:\n            if string[i:i+len(word)] == word:\n                if word_count[word] > 0:\n                    word_count[word] -= 1\n                    i += len(word)\n                    found_word = True\n                    break\n        if not found_word:\n            return False\n\n    for count in word_count.values():\n        if count > 0:\n            return False\n\n    return True",
        "solution_func": "def g(words=['dog', 'cat', 'bird', 'elephant']):\n    return ''.join(words)",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Check if there exist two numbers in the matrix whose difference is equal to the target value.\"\"\"\n    return any(x - y == target for x in [num for row in matrix for num in row] for y in [num for row in matrix for num in row])\n\ndef g(target=15):\n    return [[10, 8, 6], [4, 2, 0], [12, 14, 16]]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 55,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Check if there exist two numbers in the matrix whose difference is equal to the target value.\"\"\"\n    return any(x - y == target for x in [num for row in matrix for num in row] for y in [num for row in matrix for num in row])",
        "solution_func": "def g(target=15):\n    return [[10, 8, 6], [4, 2, 0], [12, 14, 16]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=25) -> bool:\n    \"\"\"Check if there exist two numbers in the matrix whose product is equal to the target value.\"\"\"\n    return any(x * y == target for x in [num for row in matrix for num in row] for y in [num for row in matrix for num in row])\n\ndef g(target=25):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 55,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=25) -> bool:\n    \"\"\"Check if there exist two numbers in the matrix whose product is equal to the target value.\"\"\"\n    return any(x * y == target for x in [num for row in matrix for num in row] for y in [num for row in matrix for num in row])",
        "solution_func": "def g(target=25):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the matrix whose quotient is equal to the target value.\"\"\"\n    return any(x / y == target for x in [num for row in matrix for num in row] for y in [num for row in matrix for num in row] if y != 0)\n\ndef g(target=10):\n    return [[10, 20, 30], [40, 50, 60], [70, 80, 90]]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 55,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the matrix whose quotient is equal to the target value.\"\"\"\n    return any(x / y == target for x in [num for row in matrix for num in row] for y in [num for row in matrix for num in row] if y != 0)",
        "solution_func": "def g(target=10):\n    return [[10, 20, 30], [40, 50, 60], [70, 80, 90]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100, k=5) -> bool:\n    \"\"\"Find k distinct numbers from the list that sum up to the target.\"\"\"\n    return len(numbers) >= k and sum(numbers[:k]) == target and len(set(numbers[:k])) == k\ndef g(target=100, k=5):\n    return list(range(1, k+1)) + [target - sum(range(1, k+1))]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 55,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=100, k=5) -> bool:\n    \"\"\"Find k distinct numbers from the list that sum up to the target.\"\"\"\n    return len(numbers) >= k and sum(numbers[:k]) == target and len(set(numbers[:k])) == k",
        "solution_func": "def g(target=100, k=5):\n    return list(range(1, k+1)) + [target - sum(range(1, k+1))]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=4, n=4) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=4, n=4):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "emb": null,
        "idx_generation": 56,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=4, n=4) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]",
        "solution_func": "def g(m=4, n=4):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=6, n=6) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=6, n=6):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 56,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=6, n=6) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]",
        "solution_func": "def g(m=6, n=6):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=3, n=3) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=3, n=3):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "emb": null,
        "idx_generation": 56,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=3, n=3) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]",
        "solution_func": "def g(m=3, n=3):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(e: List[int], a=3, b=2, c=-1, d=2022) -> bool:\n    \"\"\"Check if the given point lies on the line.\nSolution should be a boolean value: True if the point lies on the line, False otherwise.\"\"\"\n    x = e[0]\n    y = e[1]\n    return a*x + b*y == c and a*x + b*y == d\n\ndef g(a=3, b=2, c=-1, d=2022):\n    return [d // b, c // a]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 56,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(e: List[int], a=3, b=2, c=-1, d=2022) -> bool:\n    \"\"\"Check if the given point lies on the line.\nSolution should be a boolean value: True if the point lies on the line, False otherwise.\"\"\"\n    x = e[0]\n    y = e[1]\n    return a*x + b*y == c and a*x + b*y == d",
        "solution_func": "def g(a=3, b=2, c=-1, d=2022):\n    return [d // b, c // a]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(e: List[int], a=4, b=3, c=-2, d=2023) -> bool:\n    \"\"\"Check if the given point lies above or below the line.\nSolution should be a string: \"above\" if the point lies above the line, \"below\" if the point lies below the line.\"\"\"\n    x = e[0]\n    y = e[1]\n    if a*x + b*y > c:\n        return \"above\"\n    elif a*x + b*y < c:\n        return \"below\"\n    else:\n        return \"on\"\n\ndef g(a=4, b=3, c=-2, d=2023):\n    return [d // b, c // a]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 56,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(e: List[int], a=4, b=3, c=-2, d=2023) -> bool:\n    \"\"\"Check if the given point lies above or below the line.\nSolution should be a string: \"above\" if the point lies above the line, \"below\" if the point lies below the line.\"\"\"\n    x = e[0]\n    y = e[1]\n    if a*x + b*y > c:\n        return \"above\"\n    elif a*x + b*y < c:\n        return \"below\"\n    else:\n        return \"on\"",
        "solution_func": "def g(a=4, b=3, c=-2, d=2023):\n    return [d // b, c // a]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: List[int], a=5, b=4, c=-3, d=2024) -> bool:\n    \"\"\"Check if the given point is contained within the triangle formed by three points.\nSolution should be a boolean value: True if the point is contained within the triangle, False otherwise.\"\"\"\n    x = e[0]\n    y = e[1]\n    x1, y1 = 0, c\n    x2, y2 = d // b, 0\n    x3, y3 = d // b, c\n    area_triangle = abs((x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2)) / 2)\n    area_sub_triangle1 = abs((x*(y1-y3) + x1*(y3-y) + x3*(y-y1)) / 2)\n    area_sub_triangle2 = abs((x1*(y-y2) + x*(y2-y1) + x2*(y1-y)) / 2)\n    area_sub_triangle3 = abs((x*(y2-y3) + x2*(y3-y) + x3*(y-y2)) / 2)\n    return area_sub_triangle1 + area_sub_triangle2 + area_sub_triangle3 == area_triangle\n\ndef g(a=5, b=4, c=-3, d=2024):\n    return [d // b, c // a]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 56,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(e: List[int], a=5, b=4, c=-3, d=2024) -> bool:\n    \"\"\"Check if the given point is contained within the triangle formed by three points.\nSolution should be a boolean value: True if the point is contained within the triangle, False otherwise.\"\"\"\n    x = e[0]\n    y = e[1]\n    x1, y1 = 0, c\n    x2, y2 = d // b, 0\n    x3, y3 = d // b, c\n    area_triangle = abs((x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2)) / 2)\n    area_sub_triangle1 = abs((x*(y1-y3) + x1*(y3-y) + x3*(y-y1)) / 2)\n    area_sub_triangle2 = abs((x1*(y-y2) + x*(y2-y1) + x2*(y1-y)) / 2)\n    area_sub_triangle3 = abs((x*(y2-y3) + x2*(y3-y) + x3*(y-y2)) / 2)\n    return area_sub_triangle1 + area_sub_triangle2 + area_sub_triangle3 == area_triangle",
        "solution_func": "def g(a=5, b=4, c=-3, d=2024):\n    return [d // b, c // a]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given number is present in the list of numbers\"\"\"\n    return n in nums\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[5]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 56,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given number is present in the list of numbers\"\"\"\n    return n in nums",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[5]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, word='python') -> bool:\n    \"\"\"Check if the given character exists in the word\"\"\"\n    return n in word\ndef g(word='python'):\n    return word[3]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 56,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, word='python') -> bool:\n    \"\"\"Check if the given character exists in the word\"\"\"\n    return n in word",
        "solution_func": "def g(word='python'):\n    return word[3]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> bool:\n    \"\"\"Check if the given number is present in the given matrix\"\"\"\n    for row in matrix:\n        if n in row:\n            return True\n    return False\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix[2][1]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 56,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> bool:\n    \"\"\"Check if the given number is present in the given matrix\"\"\"\n    for row in matrix:\n        if n in row:\n            return True\n    return False",
        "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix[2][1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find if there are three numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 56,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find if there are three numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=15) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list whose sum is equal to the target.\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(target=15):\n    return [i for i in range(1, target + 1)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 57,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=15) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list whose sum is equal to the target.\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=15):\n    return [i for i in range(1, target + 1)]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target.\"\"\"\n    n = len(arr)\n    visited = set()\n    for i in range(n):\n        if target % arr[i] == 0 and target // arr[i] in visited:\n            return True\n        visited.add(arr[i])\n    return False\n\ndef g(target=20):\n    return [i for i in range(1, target + 1)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 57,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target.\"\"\"\n    n = len(arr)\n    visited = set()\n    for i in range(n):\n        if target % arr[i] == 0 and target // arr[i] in visited:\n            return True\n        visited.add(arr[i])\n    return False",
        "solution_func": "def g(target=20):\n    return [i for i in range(1, target + 1)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the list whose sum is equal to zero.\"\"\"\n    n = len(arr)\n    for i in range(n - k + 1):\n        subarray = arr[i:i+k]\n        if sum(subarray) == 0:\n            return True\n    return False\n\ndef g(k=3):\n    return [i for i in range(-k, k+1)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 57,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the list whose sum is equal to zero.\"\"\"\n    n = len(arr)\n    for i in range(n - k + 1):\n        subarray = arr[i:i+k]\n        if sum(subarray) == 0:\n            return True\n    return False",
        "solution_func": "def g(k=3):\n    return [i for i in range(-k, k+1)]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 57,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return nums",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=3, y=5, z=7) -> bool:\n    \"\"\"Check if n is a perfect square and divisible by all three numbers x, y, and z.\"\"\"\n    return math.isqrt(n)**2 == n and n % x == 0 and n % y == 0 and n % z == 0\n\ndef g(x=3, y=5, z=7):\n    return x * y * z\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 57,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x=3, y=5, z=7) -> bool:\n    \"\"\"Check if n is a perfect square and divisible by all three numbers x, y, and z.\"\"\"\n    return math.isqrt(n)**2 == n and n % x == 0 and n % y == 0 and n % z == 0",
        "solution_func": "def g(x=3, y=5, z=7):\n    return x * y * z",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list 'arr' that add up to the target_sum.\"\"\"\n    num_set = set()\n    for num in arr:\n        if target_sum - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(arr=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return arr\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 57,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list 'arr' that add up to the target_sum.\"\"\"\n    num_set = set()\n    for num in arr:\n        if target_sum - num in num_set:\n            return True\n        num_set.add(num)\n    return False",
        "solution_func": "def g(arr=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return arr",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, m=5) -> bool:\n    \"\"\"Check if a number is divisible by m\"\"\"\n    return n % m == 0\ndef g(m=5):\n    import random\n    return random.randint(1, 100) * m\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 57,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(n: int, m=5) -> bool:\n    \"\"\"Check if a number is divisible by m\"\"\"\n    return n % m == 0",
        "solution_func": "def g(m=5):\n    import random\n    return random.randint(1, 100) * m",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(a: str, b: str, c: str) -> bool:\n    \"\"\"Check if string a is a combination of strings b and c\"\"\"\n    return sorted(a) == sorted(b + c)\ndef g(b: str, c: str):\n    import random\n    a = ''.join(random.sample(b + c, len(b + c)))\n    return a\nassert f(g())\n",
        "emb": null,
        "idx_generation": 57,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(a: str, b: str, c: str) -> bool:\n    \"\"\"Check if string a is a combination of strings b and c\"\"\"\n    return sorted(a) == sorted(b + c)",
        "solution_func": "def g(b: str, c: str):\n    import random\n    a = ''.join(random.sample(b + c, len(b + c)))\n    return a",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(lst: List[int], n=100) -> bool:\n    \"\"\"Check if the sum of the list is greater than n\"\"\"\n    return sum(lst) > n\ndef g():\n    import random\n    lst = random.choices(range(1, 100), k=10)\n    return lst\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 57,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(lst: List[int], n=100) -> bool:\n    \"\"\"Check if the sum of the list is greater than n\"\"\"\n    return sum(lst) > n",
        "solution_func": "def g():\n    import random\n    lst = random.choices(range(1, 100), k=10)\n    return lst",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=20, threshold=5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose difference is less than threshold and their sum is equal to target\"\"\"\n    return any(numbers[i] + numbers[j] == target and abs(numbers[i] - numbers[j]) < threshold for i in range(len(numbers)) for j in range(i+1, len(numbers)))\n\ndef g(target=20, threshold=5):\n    return [n for n in range(target - threshold, target + threshold + 1)]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 57,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=20, threshold=5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose difference is less than threshold and their sum is equal to target\"\"\"\n    return any(numbers[i] + numbers[j] == target and abs(numbers[i] - numbers[j]) < threshold for i in range(len(numbers)) for j in range(i+1, len(numbers)))",
        "solution_func": "def g(target=20, threshold=5):\n    return [n for n in range(target - threshold, target + threshold + 1)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(num_list: List[int], n=3) -> bool:\n    \"\"\"Check if the sum of the list is equal to n\"\"\"\n    return sum(num_list) == n\ndef g(n=3):\n    return [1, 1, 1, n-1]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 58,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num_list: List[int], n=3) -> bool:\n    \"\"\"Check if the sum of the list is equal to n\"\"\"\n    return sum(num_list) == n",
        "solution_func": "def g(n=3):\n    return [1, 1, 1, n-1]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, char='a') -> bool:\n    \"\"\"Check if the character 'char' appears in the word\"\"\"\n    return char in word\ndef g(char='a'):\n    return 'apple'\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 58,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(word: str, char='a') -> bool:\n    \"\"\"Check if the character 'char' appears in the word\"\"\"\n    return char in word",
        "solution_func": "def g(char='a'):\n    return 'apple'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, divisor=5) -> bool:\n    \"\"\"Check if the number is divisible by the divisor\"\"\"\n    return num % divisor == 0\ndef g(divisor=5):\n    return 25 * divisor\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 58,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num: int, divisor=5) -> bool:\n    \"\"\"Check if the number is divisible by the divisor\"\"\"\n    return num % divisor == 0",
        "solution_func": "def g(divisor=5):\n    return 25 * divisor",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of numbers, find a pair of numbers that sum up to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(nums: List[int]):\n    return nums\nassert f(g([1, 2, 3, 4, 5]))\n\n",
        "emb": null,
        "idx_generation": 58,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of numbers, find a pair of numbers that sum up to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))",
        "solution_func": "def g(nums: List[int]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Given a list of words, check if all words have the given prefix.\"\"\"\n    return all((word.startswith(prefix) for word in words))\ndef g(words: List[str], prefix='pre'):\n    return [prefix + word for word in words]\nassert f(g(['fix', 'pare', 'dict'], prefix='pre'))\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 58,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Given a list of words, check if all words have the given prefix.\"\"\"\n    return all((word.startswith(prefix) for word in words))",
        "solution_func": "def g(words: List[str], prefix='pre'):\n    return [prefix + word for word in words]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return arr == arr[::-1]\ndef g(arr: List[int]):\n    return arr[::-1]\nassert f(g([1, 2, 3, 2, 1]))\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 58,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return arr == arr[::-1]",
        "solution_func": "def g(arr: List[int]):\n    return arr[::-1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target.\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [i for i in range(1, int(target**0.5) + 1)]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 58,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target.\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] * nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=100):\n    return [i for i in range(1, int(target**0.5) + 1)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose difference is equal to the target.\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(nums[i] - nums[j]) == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [i for i in range(-target, target + 1)]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 58,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose difference is equal to the target.\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(nums[i] - nums[j]) == target:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    return [i for i in range(-target, target + 1)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=30) -> bool:\n    \"\"\"Check if there exists three distinct numbers in the list whose product is equal to the target.\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if nums[i] * nums[j] * nums[k] == target:\n                    return True\n    return False\n\ndef g(target=30):\n    return [i for i in range(1, int(target**(1/3)) + 1)]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 58,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=30) -> bool:\n    \"\"\"Check if there exists three distinct numbers in the list whose product is equal to the target.\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if nums[i] * nums[j] * nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=30):\n    return [i for i in range(1, int(target**(1/3)) + 1)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(squares: List[List[int]], m=8, n=4, target=32) -> bool:\n    \"\"\"Tile an m x n checkerboard with 2 x 1 tiles. The solution is a list of fourtuples [i1, j1, i2, j2] with\ni2 == i1 and j2 == j1 + 1 or i2 == i1 + 1 and j2 == j1 with no overlap.\"\"\"\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target\ndef g(m=8, n=4, target=32):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 58,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(squares: List[List[int]], m=8, n=4, target=32) -> bool:\n    \"\"\"Tile an m x n checkerboard with 2 x 1 tiles. The solution is a list of fourtuples [i1, j1, i2, j2] with\ni2 == i1 and j2 == j1 + 1 or i2 == i1 + 1 and j2 == j1 with no overlap.\"\"\"\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target",
        "solution_func": "def g(m=8, n=4, target=32):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans",
        "map_ix": [
            1,
            1,
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose difference is equal to the target\"\"\"\n    return any(abs(a - b) == target for i, a in enumerate(nums) for b in nums[i+1:])\ndef g(target=20):\n    return [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 59,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose difference is equal to the target\"\"\"\n    return any(abs(a - b) == target for i, a in enumerate(nums) for b in nums[i+1:])",
        "solution_func": "def g(target=20):\n    return [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target\"\"\"\n    return any(a * b == target for i, a in enumerate(nums) for b in nums[i+1:])\ndef g(target=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 59,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target\"\"\"\n    return any(a * b == target for i, a in enumerate(nums) for b in nums[i+1:])",
        "solution_func": "def g(target=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is greater than the target\"\"\"\n    return any(a * b > target for i, a in enumerate(nums) for b in nums[i+1:])\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 59,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is greater than the target\"\"\"\n    return any(a * b > target for i, a in enumerate(nums) for b in nums[i+1:])",
        "solution_func": "def g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, a='vuzogaguzechicowejeguthemeralic', b='kybyjifidoquifwejeguthemelihitextodeju', length=11) -> bool:\n    \"\"\"Check if a string of length length is a palindrome\"\"\"\n    return len(s) == length and s == s[::-1]\ndef g(length=11):\n    import random\n    import string\n    return ''.join(random.choices(string.ascii_lowercase, k=length))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 59,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(s: str, a='vuzogaguzechicowejeguthemeralic', b='kybyjifidoquifwejeguthemelihitextodeju', length=11) -> bool:\n    \"\"\"Check if a string of length length is a palindrome\"\"\"\n    return len(s) == length and s == s[::-1]",
        "solution_func": "def g(length=11):\n    import random\n    import string\n    return ''.join(random.choices(string.ascii_lowercase, k=length))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, a='vuzogaguzechicowejeguthemeralic', b='kybyjifidoquifwejeguthemelihitextodeju', length=11) -> bool:\n    \"\"\"Check if a string can be formed by concatenating two substrings of string a\"\"\"\n    for i in range(1, len(s)):\n        substring1 = s[:i]\n        substring2 = s[i:]\n        if substring1 in a and substring2 in a:\n            return True\n    return False\ndef g(a='vuzogaguzechicowejeguthemeralic', length=11):\n    import random\n    import string\n    substring1 = random.choices(string.ascii_lowercase, k=length // 2)\n    substring2 = random.choices(string.ascii_lowercase, k=(length // 2) + (length % 2))\n    return ''.join(substring1) + ''.join(substring2)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 59,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(s: str, a='vuzogaguzechicowejeguthemeralic', b='kybyjifidoquifwejeguthemelihitextodeju', length=11) -> bool:\n    \"\"\"Check if a string can be formed by concatenating two substrings of string a\"\"\"\n    for i in range(1, len(s)):\n        substring1 = s[:i]\n        substring2 = s[i:]\n        if substring1 in a and substring2 in a:\n            return True\n    return False",
        "solution_func": "def g(a='vuzogaguzechicowejeguthemeralic', length=11):\n    import random\n    import string\n    substring1 = random.choices(string.ascii_lowercase, k=length // 2)\n    substring2 = random.choices(string.ascii_lowercase, k=(length // 2) + (length % 2))\n    return ''.join(substring1) + ''.join(substring2)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, a='vuzogaguzechicowejeguthemeralic', b='kybyjifidoquifwejeguthemelihitextodeju', length=11) -> bool:\n    \"\"\"Check if a string can be formed by rearranging the characters of string a\"\"\"\n    sorted_a = sorted(a)\n    sorted_s = sorted(s)\n    return sorted_a == sorted_s\ndef g(a='vuzogaguzechicowejeguthemeralic', length=11):\n    import random\n    import string\n    return ''.join(random.sample(a, length))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 59,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(s: str, a='vuzogaguzechicowejeguthemeralic', b='kybyjifidoquifwejeguthemelihitextodeju', length=11) -> bool:\n    \"\"\"Check if a string can be formed by rearranging the characters of string a\"\"\"\n    sorted_a = sorted(a)\n    sorted_s = sorted(s)\n    return sorted_a == sorted_s",
        "solution_func": "def g(a='vuzogaguzechicowejeguthemeralic', length=11):\n    import random\n    import string\n    return ''.join(random.sample(a, length))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find a pair of numbers that add up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 59,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find a pair of numbers that add up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str], pattern=\"abc\") -> bool:\n    \"\"\"Given a list of words and a pattern, find all words that match the pattern\"\"\"\n    result = []\n    for word in words:\n        if len(word) != len(pattern):\n            continue\n        mapping = {}\n        matched = True\n        for i in range(len(word)):\n            if pattern[i] in mapping:\n                if mapping[pattern[i]] != word[i]:\n                    matched = False\n                    break\n            else:\n                mapping[pattern[i]] = word[i]\n        if matched:\n            result.append(word)\n    return result\n\ndef g(pattern=\"abc\"):\n    words = [\"cat\", \"dog\", \"bat\", \"car\", \"bar\"]\n    return words\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 59,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], pattern=\"abc\") -> bool:\n    \"\"\"Given a list of words and a pattern, find all words that match the pattern\"\"\"\n    result = []\n    for word in words:\n        if len(word) != len(pattern):\n            continue\n        mapping = {}\n        matched = True\n        for i in range(len(word)):\n            if pattern[i] in mapping:\n                if mapping[pattern[i]] != word[i]:\n                    matched = False\n                    break\n            else:\n                mapping[pattern[i]] = word[i]\n        if matched:\n            result.append(word)\n    return result",
        "solution_func": "def g(pattern=\"abc\"):\n    words = [\"cat\", \"dog\", \"bat\", \"car\", \"bar\"]\n    return words",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Given a list of integers, find the longest subarray whose sum is less than or equal to the target value\"\"\"\n    max_length = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            subarray = nums[i:j]\n            if sum(subarray) <= target:\n                max_length = max(max_length, len(subarray))\n    return max_length\n\ndef g(target=5):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 59,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Given a list of integers, find the longest subarray whose sum is less than or equal to the target value\"\"\"\n    max_length = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            subarray = nums[i:j]\n            if sum(subarray) <= target:\n                max_length = max(max_length, len(subarray))\n    return max_length",
        "solution_func": "def g(target=5):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=25) -> bool:\n    \"\"\"Check if the given matrix contains a row or column that sums up to the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum == target:\n            return True\n    return False\ndef g(target=25):\n    matrix = [[3, 4, 5], [6, 7, 8], [9, 10, 11]]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 59,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=25) -> bool:\n    \"\"\"Check if the given matrix contains a row or column that sums up to the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum == target:\n            return True\n    return False",
        "solution_func": "def g(target=25):\n    matrix = [[3, 4, 5], [6, 7, 8], [9, 10, 11]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\n    \ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 60,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], target_len=5) -> bool:\n    \"\"\"Check if all words in the list are of the target length.\"\"\"\n    return all((len(word) == target_len) for word in words)\n    \ndef g():\n    return [\"apple\", \"banana\", \"cherry\", \"date\"]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 60,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], target_len=5) -> bool:\n    \"\"\"Check if all words in the list are of the target length.\"\"\"\n    return all((len(word) == target_len) for word in words)",
        "solution_func": "def g():\n    return [\"apple\", \"banana\", \"cherry\", \"date\"]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there is a subsequence in the list whose sum is equal to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target+1)] for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = True\n    for i in range(1, n+1):\n        for j in range(1, target+1):\n            if nums[i-1] > j:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i-1]]\n    return dp[n][target]\n    \ndef g():\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 60,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there is a subsequence in the list whose sum is equal to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target+1)] for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = True\n    for i in range(1, n+1):\n        for j in range(1, target+1):\n            if nums[i-1] > j:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i-1]]\n    return dp[n][target]",
        "solution_func": "def g():\n    return [10, 20, 30, 40, 50]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Determine if there exists a pair of integers in the given list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    nums = [random.randint(1, 100) for _ in range(10)]\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 60,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\nfrom typing import List\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Determine if there exists a pair of integers in the given list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g():\n    nums = [random.randint(1, 100) for _ in range(10)]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nimport random\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Determine if it is possible to split the given list of integers into two sublists, \n       such that the sums of the two sublists are equal and each sublist contains only unique values.\"\"\"\n    for i in range(2, len(nums)):\n        for comb in itertools.combinations(nums, i):\n            if sum(comb) == target and len(set(comb)) == len(comb):\n                return True\n    return False\n\ndef g():\n    nums = [random.randint(1, 50) for _ in range(10)]\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 60,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\nimport random\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Determine if it is possible to split the given list of integers into two sublists, \n       such that the sums of the two sublists are equal and each sublist contains only unique values.\"\"\"\n    for i in range(2, len(nums)):\n        for comb in itertools.combinations(nums, i):\n            if sum(comb) == target and len(set(comb)) == len(comb):\n                return True\n    return False",
        "solution_func": "def g():\n    nums = [random.randint(1, 50) for _ in range(10)]\n    return nums",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Determine if the given list contains a subsequence that sums up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]\n\ndef g():\n    nums = [1, 5, 7, 9, 2]\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 60,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Determine if the given list contains a subsequence that sums up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]",
        "solution_func": "def g():\n    nums = [1, 5, 7, 9, 2]\n    return nums",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], k=3) -> bool:\n    \"\"\"Given a list of non-decreasing integers and given an integer k, determine whether there exists two numbers in the list whose absolute difference is greater than k.\"\"\"\n    assert all((nums[i] <= nums[i + 1] for i in range(len(nums) - 1))), 'Hint: nums are non-decreasing'\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if abs(nums[i] - nums[j]) > k:\n                return True\n    return False\ndef g(nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], k=3):\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 60,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], k=3) -> bool:\n    \"\"\"Given a list of non-decreasing integers and given an integer k, determine whether there exists two numbers in the list whose absolute difference is greater than k.\"\"\"\n    assert all((nums[i] <= nums[i + 1] for i in range(len(nums) - 1))), 'Hint: nums are non-decreasing'\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if abs(nums[i] - nums[j]) > k:\n                return True\n    return False",
        "solution_func": "def g(nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], k=3):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(score: int, scores=[40, 30, 25, 20, 15, 10, 5, 3], k=3) -> bool:\n    \"\"\"Given a list of non-increasing integers and given an integer k, determine whether there are at least k numbers that are greater than or equal to a given score.\"\"\"\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    count = sum((s >= score for s in scores))\n    return count >= k\ndef g(scores=[40, 30, 25, 20, 15, 10, 5, 3], k=3):\n    return max(scores[:k])\nassert f(g())\n",
        "emb": null,
        "idx_generation": 60,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(score: int, scores=[40, 30, 25, 20, 15, 10, 5, 3], k=3) -> bool:\n    \"\"\"Given a list of non-increasing integers and given an integer k, determine whether there are at least k numbers that are greater than or equal to a given score.\"\"\"\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    count = sum((s >= score for s in scores))\n    return count >= k",
        "solution_func": "def g(scores=[40, 30, 25, 20, 15, 10, 5, 3], k=3):\n    return max(scores[:k])",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target_sum=30) -> bool:\n    \"\"\"Given a 2D matrix of integers and a target sum, determine whether there are two distinct numbers in the matrix that add up to the target sum.\"\"\"\n    for i in range(matrix.shape[0]):\n        for j in range(matrix.shape[1]):\n            for x in range(i, matrix.shape[0]):\n                start = j if x == i else 0\n                for y in range(start, matrix.shape[1]):\n                    if i == x and j == y:\n                        continue\n                    if matrix[i, j] + matrix[x, y] == target_sum:\n                        return True\n    return False\n\ndef g(target_sum=30):\n    matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 60,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target_sum=30) -> bool:\n    \"\"\"Given a 2D matrix of integers and a target sum, determine whether there are two distinct numbers in the matrix that add up to the target sum.\"\"\"\n    for i in range(matrix.shape[0]):\n        for j in range(matrix.shape[1]):\n            for x in range(i, matrix.shape[0]):\n                start = j if x == i else 0\n                for y in range(start, matrix.shape[1]):\n                    if i == x and j == y:\n                        continue\n                    if matrix[i, j] + matrix[x, y] == target_sum:\n                        return True\n    return False",
        "solution_func": "def g(target_sum=30):\n    matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=420, b=840, lower_bound=100) -> bool:\n    \"\"\"Check if a number n is a common divisor of both a and b, and is greater than or equal to the lower_bound\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a=420, b=840, lower_bound=100):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 60,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=420, b=840, lower_bound=100) -> bool:\n    \"\"\"Check if a number n is a common divisor of both a and b, and is greater than or equal to the lower_bound\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)",
        "solution_func": "def g(a=420, b=840, lower_bound=100):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(moves: List[List[int]], initial_state=[5, 8, 3, 0]) -> bool:\n    \"\"\"Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\nremoving one or more objects from a single non-empty heap. The player who takes the last object wins.\n- initial_state is list of numbers of objects in each heap\n- moves is a list of your moves: [heap, number of objects to take]\n- you play first\"\"\"\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state=[5, 8, 3, 0]):\n    state = initial_state[:]\n    moves = []\n    def bot_move():\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    def losing(h):\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 61,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(moves: List[List[int]], initial_state=[5, 8, 3, 0]) -> bool:\n    \"\"\"Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\nremoving one or more objects from a single non-empty heap. The player who takes the last object wins.\n- initial_state is list of numbers of objects in each heap\n- moves is a list of your moves: [heap, number of objects to take]\n- you play first\"\"\"\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()",
        "solution_func": "def g(initial_state=[5, 8, 3, 0]):\n    state = initial_state[:]\n    moves = []\n    def bot_move():\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    def losing(h):\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n    def optimal_move():",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(seq: List[int], n=0, length=0) -> bool:\n    \"\"\"Find a sequence of 1's and 2's of a given length that that adds up to n\"\"\"\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)\ndef g(n=0, length=0):\n    return [2] * (n - length) + [1] * (2 * length - n)\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 61,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(seq: List[int], n=0, length=0) -> bool:\n    \"\"\"Find a sequence of 1's and 2's of a given length that that adds up to n\"\"\"\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)",
        "solution_func": "def g(n=0, length=0):\n    return [2] * (n - length) + [1] * (2 * length - n)",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='kibozekiboze', target='') -> bool:\n    \"\"\"Find the three slice indices that give the specific target in string s\"\"\"\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s='kibozekiboze', target=''):\n    from itertools import product\n    for (i, j, k) in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0
        ],
        "idx_generation": 61,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='kibozekiboze', target='') -> bool:\n    \"\"\"Find the three slice indices that give the specific target in string s\"\"\"\n    (i, j, k) = inds\n    return s[i:j:k] == target",
        "solution_func": "def g(s='kibozekiboze', target=''):\n    from itertools import product\n    for (i, j, k) in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=25) -> bool:\n    \"\"\"Check if the sum of the squared values in a list is equal to the target\"\"\"\n    return sum([i**2 for i in arr]) == target\n\ndef g(target=25):\n    return [int(i ** 0.5) for i in range(1, target+1)]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 61,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=25) -> bool:\n    \"\"\"Check if the sum of the squared values in a list is equal to the target\"\"\"\n    return sum([i**2 for i in arr]) == target",
        "solution_func": "def g(target=25):\n    return [int(i ** 0.5) for i in range(1, target+1)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=10, b=7) -> bool:\n    \"\"\"Check if the modulo of x by both a and b is 0\"\"\"\n    return x % a == 0 and x % b == 0\n\ndef g(a=10, b=7):\n    return a * b\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 61,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=10, b=7) -> bool:\n    \"\"\"Check if the modulo of x by both a and b is 0\"\"\"\n    return x % a == 0 and x % b == 0",
        "solution_func": "def g(a=10, b=7):\n    return a * b",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(counts: List[int], target_prob=0.25) -> bool:\n    \"\"\"Suppose a list of m 1's and n -1's are permuted at random.\n    What is the probability that the cumulative sum is greater than or equal to 0?\n    The goal is to find counts = [m, n] that make the probability close to target_prob.\"\"\"\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [0.0] * (n + 1)\n        for j in range(1, n + 1):\n            probs[j] = (j * old_probs[j - 1] + (i - j) * old_probs[j]) / i\n    return abs(probs[n] - target_prob) < 1e-06\n\ndef g(target_prob=0.25):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-06:\n            return [m, n]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 61,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(counts: List[int], target_prob=0.25) -> bool:\n    \"\"\"Suppose a list of m 1's and n -1's are permuted at random.\n    What is the probability that the cumulative sum is greater than or equal to 0?\n    The goal is to find counts = [m, n] that make the probability close to target_prob.\"\"\"\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [0.0] * (n + 1)\n        for j in range(1, n + 1):\n            probs[j] = (j * old_probs[j - 1] + (i - j) * old_probs[j]) / i\n    return abs(probs[n] - target_prob) < 1e-06",
        "solution_func": "def g(target_prob=0.25):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-06:\n            return [m, n]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\nimport random\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Determine if it is possible to split the given list of integers into two sublists, \n       such that the sums of the two sublists are equal and each sublist contains at least one negative value.\"\"\"\n    for i in range(2, len(nums)):\n        for comb in itertools.combinations(nums, i):\n            if sum(comb) == target and len(set(comb)) == len(comb) and any(x < 0 for x in comb):\n                return True\n    return False\n\ndef g():\n    nums = [random.randint(-50, 50) for _ in range(10)]\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 61,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\nimport random\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Determine if it is possible to split the given list of integers into two sublists, \n       such that the sums of the two sublists are equal and each sublist contains at least one negative value.\"\"\"\n    for i in range(2, len(nums)):\n        for comb in itertools.combinations(nums, i):\n            if sum(comb) == target and len(set(comb)) == len(comb) and any(x < 0 for x in comb):\n                return True\n    return False",
        "solution_func": "def g():\n    nums = [random.randint(-50, 50) for _ in range(10)]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\nimport random\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Determine if it is possible to split the given list of integers into two sublists, \n       such that the absolute difference between the sum of the two sublists is equal to the target.\"\"\"\n    for i in range(2, len(nums)):\n        for comb in itertools.combinations(nums, i):\n            if abs(sum(comb) - (sum(nums) - sum(comb))) == target:\n                return True\n    return False\n\ndef g():\n    nums = [random.randint(1, 50) for _ in range(10)]\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 61,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\nimport random\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Determine if it is possible to split the given list of integers into two sublists, \n       such that the absolute difference between the sum of the two sublists is equal to the target.\"\"\"\n    for i in range(2, len(nums)):\n        for comb in itertools.combinations(nums, i):\n            if abs(sum(comb) - (sum(nums) - sum(comb))) == target:\n                return True\n    return False",
        "solution_func": "def g():\n    nums = [random.randint(1, 50) for _ in range(10)]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\nimport random\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Determine if it is possible to split the given list of integers into two sublists, \n       such that the sums of the two sublists are equal and each sublist contains at least one repeated value.\"\"\"\n    for i in range(2, len(nums)):\n        for comb in itertools.combinations(nums, i):\n            if sum(comb) == target and len(set(comb)) < len(comb):\n                return True\n    return False\n\ndef g():\n    nums = [random.randint(1, 50) for _ in range(10)]\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 61,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\nimport random\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Determine if it is possible to split the given list of integers into two sublists, \n       such that the sums of the two sublists are equal and each sublist contains at least one repeated value.\"\"\"\n    for i in range(2, len(nums)):\n        for comb in itertools.combinations(nums, i):\n            if sum(comb) == target and len(set(comb)) < len(comb):\n                return True\n    return False",
        "solution_func": "def g():\n    nums = [random.randint(1, 50) for _ in range(10)]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=46) -> bool:\n    \"\"\"Given a list of numbers, determine if there are three numbers that add up to the target value.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\n\ndef g(target=46):\n    return [10, 20, 30, 40, 50, 60]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 61,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=46) -> bool:\n    \"\"\"Given a list of numbers, determine if there are three numbers that add up to the target value.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=46):\n    return [10, 20, 30, 40, 50, 60]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='python') -> bool:\n    \"\"\"Check if the given substring is present in the given string\"\"\"\n    return substring in s\ndef g(substring='python'):\n    return \"I love python programming\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 62,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring='python') -> bool:\n    \"\"\"Check if the given substring is present in the given string\"\"\"\n    return substring in s",
        "solution_func": "def g(substring='python'):\n    return \"I love python programming\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given number is present in the list of numbers\"\"\"\n    return n in numbers\ndef g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return 5\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 62,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given number is present in the list of numbers\"\"\"\n    return n in numbers",
        "solution_func": "def g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return 5",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], target=10) -> bool:\n    \"\"\"Check if the sum of the given list of integers is equal to the target\"\"\"\n    return sum(x) == target\ndef g(target=10):\n    return [2, 3, 5]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 62,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], target=10) -> bool:\n    \"\"\"Check if the sum of the given list of integers is equal to the target\"\"\"\n    return sum(x) == target",
        "solution_func": "def g(target=10):\n    return [2, 3, 5]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=42, threshold=10) -> bool:\n    \"\"\"Find a pair of distinct integers from the list that add up to the target, where the absolute difference between the pair is greater than the threshold\"\"\"\n    assert all((i in nums for i in nums))\n    pairs = [(a, b) for i, a in enumerate(nums) for b in nums[i+1:] if abs(a-b) > threshold and a+b == target]\n    return len(pairs) >= 1\ndef g(target=42, threshold=10):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 62,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=42, threshold=10) -> bool:\n    \"\"\"Find a pair of distinct integers from the list that add up to the target, where the absolute difference between the pair is greater than the threshold\"\"\"\n    assert all((i in nums for i in nums))\n    pairs = [(a, b) for i, a in enumerate(nums) for b in nums[i+1:] if abs(a-b) > threshold and a+b == target]\n    return len(pairs) >= 1",
        "solution_func": "def g(target=42, threshold=10):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, k=5) -> bool:\n    \"\"\"Find a combination of k distinct integers from the list that add up to the target\"\"\"\n    from itertools import combinations\n    assert all((i in nums for i in nums))\n    for comb in combinations(nums, k):\n        if sum(comb) == target:\n            return True\n    return False\ndef g(target=100, k=5):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 62,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, k=5) -> bool:\n    \"\"\"Find a combination of k distinct integers from the list that add up to the target\"\"\"\n    from itertools import combinations\n    assert all((i in nums for i in nums))\n    for comb in combinations(nums, k):\n        if sum(comb) == target:\n            return True\n    return False",
        "solution_func": "def g(target=100, k=5):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50, n=3) -> bool:\n    \"\"\"Find a subsequence of n consecutive integers from the list that add up to the target\"\"\"\n    assert all((i in nums for i in nums))\n    for i in range(len(nums)-n+1):\n        if sum(nums[i:i+n]) == target:\n            return True\n    return False\ndef g(target=50, n=3):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 62,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=50, n=3) -> bool:\n    \"\"\"Find a subsequence of n consecutive integers from the list that add up to the target\"\"\"\n    assert all((i in nums for i in nums))\n    for i in range(len(nums)-n+1):\n        if sum(nums[i:i+n]) == target:\n            return True\n    return False",
        "solution_func": "def g(target=50, n=3):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if a given string contains all the vowels\"\"\"\n    return all(vowel in s for vowel in vowels)\ndef g(vowels=['a', 'e', 'i', 'o', 'u']):\n    return ''.join(vowels)\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 62,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if a given string contains all the vowels\"\"\"\n    return all(vowel in s for vowel in vowels)",
        "solution_func": "def g(vowels=['a', 'e', 'i', 'o', 'u']):\n    return ''.join(vowels)",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if a given target number is present in a 2D matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(matrix: List[List[int]]):\n    return matrix[1][2]\nassert f(g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n",
        "emb": null,
        "idx_generation": 62,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Check if a given target number is present in a 2D matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(matrix: List[List[int]]):\n    return matrix[1][2]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a given list that adds up to the target number\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(nums: List[int]):\n    return nums[3]\nassert f(g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), target=14)\n",
        "emb": null,
        "idx_generation": 62,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a given list that adds up to the target number\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(nums: List[int]):\n    return nums[3]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in a given list that add up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 62,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in a given list that add up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2) -> bool:\n    \"\"\"Given a list of non-increasing integers and given an integer k, determine if there are exactly k positive integers in the list that are greater than or equal to the kth.\"\"\"\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return sum((s >= scores[k] and s > 0 for s in scores)) == k\ndef g(scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2):\n    threshold = max(scores[k], 1)\n    return sum((s >= threshold for s in scores))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 63,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2) -> bool:\n    \"\"\"Given a list of non-increasing integers and given an integer k, determine if there are exactly k positive integers in the list that are greater than or equal to the kth.\"\"\"\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return sum((s >= scores[k] and s > 0 for s in scores)) == k",
        "solution_func": "def g(scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2):\n    threshold = max(scores[k], 1)\n    return sum((s >= threshold for s in scores))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2) -> bool:\n    \"\"\"Given a list of non-increasing integers and given an integer k, determine if there are more than k positive integers in the list that are greater than the kth.\"\"\"\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return sum((s > scores[k] and s > 0 for s in scores)) > k\ndef g(scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2):\n    threshold = max(scores[k], 1)\n    return sum((s >= threshold for s in scores))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 63,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2) -> bool:\n    \"\"\"Given a list of non-increasing integers and given an integer k, determine if there are more than k positive integers in the list that are greater than the kth.\"\"\"\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return sum((s > scores[k] and s > 0 for s in scores)) > k",
        "solution_func": "def g(scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2):\n    threshold = max(scores[k], 1)\n    return sum((s >= threshold for s in scores))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2) -> bool:\n    \"\"\"Given a list of non-increasing integers and given an integer k, determine if there are any positive integers in the list that are greater than or equal to the kth.\"\"\"\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return any((s >= scores[k] and s > 0 for s in scores))\ndef g(scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2):\n    threshold = max(scores[k], 1)\n    return sum((s >= threshold for s in scores))\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 63,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2) -> bool:\n    \"\"\"Given a list of non-increasing integers and given an integer k, determine if there are any positive integers in the list that are greater than or equal to the kth.\"\"\"\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return any((s >= scores[k] and s > 0 for s in scores))",
        "solution_func": "def g(scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2):\n    threshold = max(scores[k], 1)\n    return sum((s >= threshold for s in scores))",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if it is possible to find two numbers in the list that add up to the target sum\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 63,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if it is possible to find two numbers in the list that add up to the target sum\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring=\"python\") -> bool:\n    \"\"\"Check if the given substring is present in the string\"\"\"\n    return substring in string\n\ndef g(substring=\"python\"):\n    return \"I love python programming\"\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 63,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring=\"python\") -> bool:\n    \"\"\"Check if the given substring is present in the string\"\"\"\n    return substring in string",
        "solution_func": "def g(substring=\"python\"):\n    return \"I love python programming\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(string: str, n=2) -> bool:\n    \"\"\"Check if the given string has exactly n number of vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in string:\n        if char.lower() in vowels:\n            count += 1\n    return count == n\n\ndef g(n=2):\n    return \"Hello, how are you?\"\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 63,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, n=2) -> bool:\n    \"\"\"Check if the given string has exactly n number of vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in string:\n        if char.lower() in vowels:\n            count += 1\n    return count == n",
        "solution_func": "def g(n=2):\n    return \"Hello, how are you?\"",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=4, s=20) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=4, s=20):\n    x = [s - n + 1, 1, 1, 1]\n    return x\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 63,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=4, s=20) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])",
        "solution_func": "def g(n=4, s=20):\n    x = [s - n + 1, 1, 1, 1]\n    return x",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=2, s=10) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=2, s=10):\n    x = [s - n + 1, 1]\n    return x\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 63,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=2, s=10) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])",
        "solution_func": "def g(n=2, s=10):\n    x = [s - n + 1, 1]\n    return x",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=5, s=25) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=5, s=25):\n    x = [s - n + 1, 1, 1, 1, 1]\n    return x\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 63,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=5, s=25) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])",
        "solution_func": "def g(n=5, s=25):\n    x = [s - n + 1, 1, 1, 1, 1]\n    return x",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(substrings: List[str], s='world', count=10) -> bool:\n    \"\"\"Find a list of >= count distinct strings that are all contained in s\"\"\"\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s='world', count=10):\n    return [''] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 63,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(substrings: List[str], s='world', count=10) -> bool:\n    \"\"\"Find a list of >= count distinct strings that are all contained in s\"\"\"\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))",
        "solution_func": "def g(s='world', count=10):\n    return [''] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\nfrom typing import *\ndef f(grid: List[List[int]], m=4, n=4) -> bool:\n    \"\"\"Find a path from the top-left corner to the bottom-right corner of an m x n grid,\n    such that the sum of the numbers in the path is maximum.\"\"\"\n    path_sum = sum([grid[i][j] for i, j in zip(range(m), range(n))])\n    return path_sum == max([sum([grid[i][j] for i, j in path]) for path in g(m, n)])\ndef g(m=4, n=4):\n    grid = [[random.randint(1, 10) for _ in range(n)] for _ in range(m)]\n    return [(i, j) for i in range(m) for j in range(n)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 64,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\nfrom typing import *\ndef f(grid: List[List[int]], m=4, n=4) -> bool:\n    \"\"\"Find a path from the top-left corner to the bottom-right corner of an m x n grid,\n    such that the sum of the numbers in the path is maximum.\"\"\"\n    path_sum = sum([grid[i][j] for i, j in zip(range(m), range(n))])\n    return path_sum == max([sum([grid[i][j] for i, j in path]) for path in g(m, n)])",
        "solution_func": "def g(m=4, n=4):\n    grid = [[random.randint(1, 10) for _ in range(n)] for _ in range(m)]\n    return [(i, j) for i in range(m) for j in range(n)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\nfrom typing import *\ndef f(words: List[str], n=3) -> bool:\n    \"\"\"Find a list of n-letter words that can be formed using the given letters.\n    Each letter can be used only once.\"\"\"\n    return set(words) == set(g(n))\ndef g(n=3):\n    letters = random.sample('abcdefghijklmnopqrstuvwxyz', n)\n    words = [''.join(random.sample(letters, n)) for _ in range(n)]\n    return words\nassert f(g())\n",
        "emb": null,
        "idx_generation": 64,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\nfrom typing import *\ndef f(words: List[str], n=3) -> bool:\n    \"\"\"Find a list of n-letter words that can be formed using the given letters.\n    Each letter can be used only once.\"\"\"\n    return set(words) == set(g(n))",
        "solution_func": "def g(n=3):\n    letters = random.sample('abcdefghijklmnopqrstuvwxyz', n)\n    words = [''.join(random.sample(letters, n)) for _ in range(n)]\n    return words",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\nfrom typing import *\ndef f(string: str, length=10) -> bool:\n    \"\"\"Find a substring of length n that appears most frequently in the given string.\"\"\"\n    return string.count(g(length)) == max([string.count(string[i:i+length]) for i in range(len(string)-length+1)])\ndef g(length=10):\n    letters = random.sample('abcdefghijklmnopqrstuvwxyz', length)\n    return ''.join(letters)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 64,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\nfrom typing import *\ndef f(string: str, length=10) -> bool:\n    \"\"\"Find a substring of length n that appears most frequently in the given string.\"\"\"\n    return string.count(g(length)) == max([string.count(string[i:i+length]) for i in range(len(string)-length+1)])",
        "solution_func": "def g(length=10):\n    letters = random.sample('abcdefghijklmnopqrstuvwxyz', length)\n    return ''.join(letters)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=2, b=5) -> bool:\n    \"\"\"Check if the difference between x and the product of a and b is less than x\"\"\"\n    return abs(x - (a * b)) < x\n\ndef g(a=2, b=5):\n    return a * b\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 64,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=2, b=5) -> bool:\n    \"\"\"Check if the difference between x and the product of a and b is less than x\"\"\"\n    return abs(x - (a * b)) < x",
        "solution_func": "def g(a=2, b=5):\n    return a * b",
        "map_ix": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return numbers\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 64,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False",
        "solution_func": "def g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return numbers",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(string: str, char='a') -> bool:\n    \"\"\"Check if the given character appears more than once in the string\"\"\"\n    count = 0\n    for c in string:\n        if c == char:\n            count += 1\n            if count > 1:\n                return True\n    return False\n\ndef g(char='a'):\n    return char\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 64,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, char='a') -> bool:\n    \"\"\"Check if the given character appears more than once in the string\"\"\"\n    count = 0\n    for c in string:\n        if c == char:\n            count += 1\n            if count > 1:\n                return True\n    return False",
        "solution_func": "def g(char='a'):\n    return char",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list whose difference is equal to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = num - target\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 64,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list whose difference is equal to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = num - target\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list whose product is equal to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        if num == 0:\n            continue\n        complement = target / num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 64,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list whose product is equal to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        if num == 0:\n            continue\n        complement = target / num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list whose sum is equal to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 64,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list whose sum is equal to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(seq: List[int], target=501, length=100) -> bool:\n    \"\"\"Find a sequence of 1's and 2's that has a length of 'length' and sums up to 'target'.\"\"\"\n    return all((i in [1, 2] for i in seq)) and sum(seq) == target and (len(seq) == length)\ndef g(target=501, length=100):\n    return [1] * (target - length) + [2] * (2 * length - target)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 64,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(seq: List[int], target=501, length=100) -> bool:\n    \"\"\"Find a sequence of 1's and 2's that has a length of 'length' and sums up to 'target'.\"\"\"\n    return all((i in [1, 2] for i in seq)) and sum(seq) == target and (len(seq) == length)",
        "solution_func": "def g(target=501, length=100):\n    return [1] * (target - length) + [2] * (2 * length - target)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, phrase='hello world') -> bool:\n    \"\"\"Check if the given phrase is a palindrome when split at index n\"\"\"\n    sub = phrase[n:]\n    return n >= 0 and phrase == sub[::-1] + phrase[len(sub):]\ndef g(phrase='hello world'):\n    if phrase == '':\n        return 0\n    return next((n for n in range(len(phrase)) if phrase[n:] == phrase[n:][::-1]))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 65,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, phrase='hello world') -> bool:\n    \"\"\"Check if the given phrase is a palindrome when split at index n\"\"\"\n    sub = phrase[n:]\n    return n >= 0 and phrase == sub[::-1] + phrase[len(sub):]",
        "solution_func": "def g(phrase='hello world'):\n    if phrase == '':\n        return 0\n    return next((n for n in range(len(phrase)) if phrase[n:] == phrase[n:][::-1]))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target_sum=25) -> bool:\n    \"\"\"Find if there is a combination of numbers from the list that adds up to the target sum when split at index n\"\"\"\n    subset1 = nums[:n]\n    subset2 = nums[n:]\n    return n >= 0 and (sum(subset1) == target_sum or sum(subset2) == target_sum)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target_sum=25):\n    return next((n for n in range(len(nums))) if sum(nums[:n]) == target_sum or sum(nums[n:]) == target_sum)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 65,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target_sum=25) -> bool:\n    \"\"\"Find if there is a combination of numbers from the list that adds up to the target sum when split at index n\"\"\"\n    subset1 = nums[:n]\n    subset2 = nums[n:]\n    return n >= 0 and (sum(subset1) == target_sum or sum(subset2) == target_sum)",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target_sum=25):\n    return next((n for n in range(len(nums))) if sum(nums[:n]) == target_sum or sum(nums[n:]) == target_sum)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, s='abcabcabc') -> bool:\n    \"\"\"Check if the given string can be divided into two equal halves at index n\"\"\"\n    sub = s[n:]\n    return n >= 0 and s[:n] == sub[:len(s)//2] and s[n:] == sub[len(s)//2:]\ndef g(s='abcabcabc'):\n    if s == '':\n        return 0\n    return next((n for n in range(len(s)) if s[:n] == s[n:len(s)//2] and s[n:] == s[len(s)//2:]))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 65,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, s='abcabcabc') -> bool:\n    \"\"\"Check if the given string can be divided into two equal halves at index n\"\"\"\n    sub = s[n:]\n    return n >= 0 and s[:n] == sub[:len(s)//2] and s[n:] == sub[len(s)//2:]",
        "solution_func": "def g(s='abcabcabc'):\n    if s == '':\n        return 0\n    return next((n for n in range(len(s)) if s[:n] == s[n:len(s)//2] and s[n:] == s[len(s)//2:]))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m=1000000000000000000) -> bool:\n    \"\"\"Find an integer whose perfect square ends with 987654321 in its decimal representation.\"\"\"\n    return str(n * n).endswith('987654321')\ndef g(m=1000000000000000000):\n    return int(int('987654321' + '0' * 9) ** 0.5) + 1\nassert f(g())\n",
        "emb": null,
        "idx_generation": 65,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=1000000000000000000) -> bool:\n    \"\"\"Find an integer whose perfect square ends with 987654321 in its decimal representation.\"\"\"\n    return str(n * n).endswith('987654321')",
        "solution_func": "def g(m=1000000000000000000):\n    return int(int('987654321' + '0' * 9) ** 0.5) + 1",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m=1000000000000000000) -> bool:\n    \"\"\"Find an integer whose cube ends with 12345 in its decimal representation.\"\"\"\n    return str(n ** 3).endswith('12345')\ndef g(m=1000000000000000000):\n    return int(int('12345' + '0' * 5) ** (1/3)) + 1\nassert f(g())\n",
        "emb": null,
        "idx_generation": 65,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=1000000000000000000) -> bool:\n    \"\"\"Find an integer whose cube ends with 12345 in its decimal representation.\"\"\"\n    return str(n ** 3).endswith('12345')",
        "solution_func": "def g(m=1000000000000000000):\n    return int(int('12345' + '0' * 5) ** (1/3)) + 1",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Find an integer whose factorial ends with 000.\"\"\"\n    factorial = 1\n    for i in range(2, n+1):\n        factorial *= i\n    return str(factorial).endswith('000')\ndef g(m=10):\n    i = 1\n    factorial = 1\n    while not str(factorial).endswith('000'):\n        i += 1\n        factorial *= i\n    return i\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 65,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Find an integer whose factorial ends with 000.\"\"\"\n    factorial = 1\n    for i in range(2, n+1):\n        factorial *= i\n    return str(factorial).endswith('000')",
        "solution_func": "def g(m=10):\n    i = 1\n    factorial = 1\n    while not str(factorial).endswith('000'):\n        i += 1\n        factorial *= i\n    return i",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100, n=5) -> bool:\n    \"\"\"Find n distinct integers that sum up to the target value\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target\ndef g(target=100, n=5):\n    return list(range(1, n+1))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 65,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100, n=5) -> bool:\n    \"\"\"Find n distinct integers that sum up to the target value\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target",
        "solution_func": "def g(target=100, n=5):\n    return list(range(1, n+1))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=10, b=3) -> bool:\n    \"\"\"Check if n is a perfect square and if its square root, when divided by b, is equal to a\"\"\"\n    return math.isqrt(n)**2 == n and math.isqrt(n) / b == a\ndef g(a=10, b=3):\n    return (a * b)**2\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 65,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=10, b=3) -> bool:\n    \"\"\"Check if n is a perfect square and if its square root, when divided by b, is equal to a\"\"\"\n    return math.isqrt(n)**2 == n and math.isqrt(n) / b == a",
        "solution_func": "def g(a=10, b=3):\n    return (a * b)**2",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='python') -> bool:\n    \"\"\"Check if the given word is a substring of s\"\"\"\n    return word in s\ndef g(word='python'):\n    return \"I love programming in \" + word\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 65,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, word='python') -> bool:\n    \"\"\"Check if the given word is a substring of s\"\"\"\n    return word in s",
        "solution_func": "def g(word='python'):\n    return \"I love programming in \" + word",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if a given string contains exactly two vowels\"\"\"\n    vowel_count = sum(1 for char in s if char in vowels)\n    return vowel_count == 2\ndef g(vowels=['a', 'e', 'i', 'o', 'u']):\n    return ''.join(vowels)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 65,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if a given string contains exactly two vowels\"\"\"\n    vowel_count = sum(1 for char in s if char in vowels)\n    return vowel_count == 2",
        "solution_func": "def g(vowels=['a', 'e', 'i', 'o', 'u']):\n    return ''.join(vowels)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if x raised to the power of y is equal to z\"\"\"\n    return x ** y == z\ndef g(y: int, z: int):\n    x = z**(1/y)\n    return x\nassert f(g(y=2, z=16), y=2, z=16)\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 66,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if x raised to the power of y is equal to z\"\"\"\n    return x ** y == z",
        "solution_func": "def g(y: int, z: int):\n    x = z**(1/y)\n    return x",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Check if there exists two numbers in the list that sum up to n\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == n:\n                return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5, 6]):\n    return sum(nums)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 66,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6]) -> bool:\n    \"\"\"Check if there exists two numbers in the list that sum up to n\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == n:\n                return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6]):\n    return sum(nums)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> bool:\n    \"\"\"Check if n exists in the matrix\"\"\"\n    for row in matrix:\n        if n in row:\n            return True\n    return False\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix[0][0]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 66,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> bool:\n    \"\"\"Check if n exists in the matrix\"\"\"\n    for row in matrix:\n        if n in row:\n            return True\n    return False",
        "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix[0][0]",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2) -> bool:\n    \"\"\"Given a list of non-decreasing integers and given an integer k, determine how many positive integers in the list\nare strictly greater than the kth.\"\"\"\n    assert all((scores[i] <= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-increasing'\n    return all((s > scores[k] and s > 0 for s in scores[:n])) and all((s <= scores[k] or s <= 0 for s in scores[n:]))\ndef g(scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2):\n    threshold = max(scores[k], 1)\n    return sum((s > threshold for s in scores))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 66,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2) -> bool:\n    \"\"\"Given a list of non-decreasing integers and given an integer k, determine how many positive integers in the list\nare strictly greater than the kth.\"\"\"\n    assert all((scores[i] <= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-increasing'\n    return all((s > scores[k] and s > 0 for s in scores[:n])) and all((s <= scores[k] or s <= 0 for s in scores[n:]))",
        "solution_func": "def g(scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2):\n    threshold = max(scores[k], 1)\n    return sum((s > threshold for s in scores))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2) -> bool:\n    \"\"\"Given a list of non-decreasing integers and given an integer k, determine if all positive integers in the list\nare strictly greater than the kth.\"\"\"\n    assert all((scores[i] <= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-increasing'\n    return all((s > scores[k] and s > 0 for s in scores[:n])) and all((s <= scores[k] or s <= 0 for s in scores[n:]))\ndef g(scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2):\n    threshold = max(scores[k], 1)\n    return sum((s > threshold for s in scores))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 66,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2) -> bool:\n    \"\"\"Given a list of non-decreasing integers and given an integer k, determine if all positive integers in the list\nare strictly greater than the kth.\"\"\"\n    assert all((scores[i] <= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-increasing'\n    return all((s > scores[k] and s > 0 for s in scores[:n])) and all((s <= scores[k] or s <= 0 for s in scores[n:]))",
        "solution_func": "def g(scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2):\n    threshold = max(scores[k], 1)\n    return sum((s > threshold for s in scores))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2) -> bool:\n    \"\"\"Given a list of non-decreasing integers and given an integer k, determine if any positive integer in the list\nis less than or equal to the kth.\"\"\"\n    assert all((scores[i] <= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-increasing'\n    return any((s <= scores[k] and s > 0 for s in scores[:n])) or any((s > scores[k] or s <= 0 for s in scores[n:]))\ndef g(scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2):\n    threshold = max(scores[k], 1)\n    return sum((s > threshold for s in scores))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 66,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2) -> bool:\n    \"\"\"Given a list of non-decreasing integers and given an integer k, determine if any positive integer in the list\nis less than or equal to the kth.\"\"\"\n    assert all((scores[i] <= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-increasing'\n    return any((s <= scores[k] and s > 0 for s in scores[:n])) or any((s > scores[k] or s <= 0 for s in scores[n:]))",
        "solution_func": "def g(scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2):\n    threshold = max(scores[k], 1)\n    return sum((s > threshold for s in scores))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a subset of numbers from the list whose sum is equal to the target_sum\"\"\"\n    n = len(arr)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[n][target_sum]\n\ndef g(target_sum=100):\n    return list(range(1, target_sum+1))\n\nassert f(g()) == True\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 66,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a subset of numbers from the list whose sum is equal to the target_sum\"\"\"\n    n = len(arr)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[n][target_sum]",
        "solution_func": "def g(target_sum=100):\n    return list(range(1, target_sum+1))",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a subset of numbers from the list whose sum is less than or equal to the target_sum\"\"\"\n    n = len(arr)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[n][target_sum]\n\ndef g(target_sum=100):\n    return list(range(1, target_sum+1))\n\nassert f(g()) == True\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 66,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a subset of numbers from the list whose sum is less than or equal to the target_sum\"\"\"\n    n = len(arr)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[n][target_sum]",
        "solution_func": "def g(target_sum=100):\n    return list(range(1, target_sum+1))",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a subset of numbers from the list whose sum is greater than the target_sum\"\"\"\n    n = len(arr)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[n][target_sum]\n\ndef g(target_sum=100):\n    return list(range(1, target_sum+1))\n\nassert f(g()) == True\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 66,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a subset of numbers from the list whose sum is greater than the target_sum\"\"\"\n    n = len(arr)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[n][target_sum]",
        "solution_func": "def g(target_sum=100):\n    return list(range(1, target_sum+1))",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any(x + y == target for x in nums for y in nums)\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 66,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any(x + y == target for x in nums for y in nums)",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: List[int], a=89600582, b=-47657198, c=95101265, d=-52126265) -> bool:\n    \"\"\"Check if the given point lies on the line.\nThe point is represented as a list of (x,y) coordinates.\nAccuracy of fifth decimal digit is required.\"\"\"\n    x, y = e\n    return abs(a * x + b - c * y - d) < 10 ** (-5)\n\ndef g(a=89600582, b=-47657198, c=95101265, d=-52126265):\n    x = (d - b) / a\n    y = (a * x + b - d) / c\n    return [x, y]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 67,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(e: List[int], a=89600582, b=-47657198, c=95101265, d=-52126265) -> bool:\n    \"\"\"Check if the given point lies on the line.\nThe point is represented as a list of (x,y) coordinates.\nAccuracy of fifth decimal digit is required.\"\"\"\n    x, y = e\n    return abs(a * x + b - c * y - d) < 10 ** (-5)",
        "solution_func": "def g(a=89600582, b=-47657198, c=95101265, d=-52126265):\n    x = (d - b) / a\n    y = (a * x + b - d) / c\n    return [x, y]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: float, coeffs=[1.1222556871110754, -0.007015312913509468, -309237.6867547677]) -> bool:\n    \"\"\"Check if the given value is a root of the quadratic equation.\nThe coefficients of the equation are provided as a list [a, b, c].\n\"\"\"\n    (a, b, c) = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-06\n\ndef g(coeffs=[1.1222556871110754, -0.007015312913509468, -309237.6867547677]):\n    (a, b, c) = coeffs\n    discriminant = b ** 2 - 4 * a * c\n    if discriminant < 0:\n        return None\n    elif discriminant == 0:\n        return [-b / (2 * a)]\n    else:\n        x1 = (-b + discriminant ** 0.5) / (2 * a)\n        x2 = (-b - discriminant ** 0.5) / (2 * a)\n        return [x1, x2]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 67,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: float, coeffs=[1.1222556871110754, -0.007015312913509468, -309237.6867547677]) -> bool:\n    \"\"\"Check if the given value is a root of the quadratic equation.\nThe coefficients of the equation are provided as a list [a, b, c].\n\"\"\"\n    (a, b, c) = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-06",
        "solution_func": "def g(coeffs=[1.1222556871110754, -0.007015312913509468, -309237.6867547677]):\n    (a, b, c) = coeffs\n    discriminant = b ** 2 - 4 * a * c\n    if discriminant < 0:\n        return None\n    elif discriminant == 0:\n        return [-b / (2 * a)]\n    else:\n        x1 = (-b + discriminant ** 0.5) / (2 * a)\n        x2 = (-b - discriminant ** 0.5) / (2 * a)\n        return [x1, x2]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], n=4, s=30) -> bool:\n    \"\"\"Check if the given list of integers satisfies the conditions.\nThe list should contain n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a >= 0 for a in x])\n\ndef g(n=4, s=30):\n    x = [s // n] * n\n    remainder = s % n\n    for i in range(remainder):\n        x[i] += 1\n    return x\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 67,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], n=4, s=30) -> bool:\n    \"\"\"Check if the given list of integers satisfies the conditions.\nThe list should contain n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a >= 0 for a in x])",
        "solution_func": "def g(n=4, s=30):\n    x = [s // n] * n\n    remainder = s % n\n    for i in range(remainder):\n        x[i] += 1\n    return x",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numlist: List[int], target: int) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for i in range(len(numlist)):\n        for j in range(i + 1, len(numlist)):\n            if numlist[i] + numlist[j] == target:\n                return True\n    return False\ndef g(numlist: List[int], target: int):\n    return numlist, target\nassert f(g())\n",
        "emb": null,
        "idx_generation": 67,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numlist: List[int], target: int) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for i in range(len(numlist)):\n        for j in range(i + 1, len(numlist)):\n            if numlist[i] + numlist[j] == target:\n                return True\n    return False",
        "solution_func": "def g(numlist: List[int], target: int):\n    return numlist, target",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is symmetric\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g(matrix: List[List[int]]):\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 67,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is symmetric\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True",
        "solution_func": "def g(matrix: List[List[int]]):\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if two numbers in the list multiply to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\ndef g(nums: List[int], target: int):\n    return nums, target\nassert f(g())\n",
        "emb": null,
        "idx_generation": 67,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if two numbers in the list multiply to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums: List[int], target: int):\n    return nums, target",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(moves: List[List[int]], initial_state=[2, 5, 3, 7, 0]) -> bool:\n    \"\"\"Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\nremoving one or more objects from a single non-empty heap. The player who takes the last object wins.\n- initial_state is list of numbers of objects in each heap\n- moves is a list of your moves: [heap, number of objects to take]\n- you play first\"\"\"\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state=[2, 5, 3, 7, 0]):\n    state = initial_state[:]\n    moves = []\n    def bot_move():\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    def losing(h):\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 67,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(moves: List[List[int]], initial_state=[2, 5, 3, 7, 0]) -> bool:\n    \"\"\"Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\nremoving one or more objects from a single non-empty heap. The player who takes the last object wins.\n- initial_state is list of numbers of objects in each heap\n- moves is a list of your moves: [heap, number of objects to take]\n- you play first\"\"\"\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()",
        "solution_func": "def g(initial_state=[2, 5, 3, 7, 0]):\n    state = initial_state[:]\n    moves = []\n    def bot_move():\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    def losing(h):\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n    def optimal_move():",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(moves: List[List[int]], initial_state=[2, 5, 3, 7, 0]) -> bool:\n    \"\"\"Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\nremoving one or more objects from a single non-empty heap. The player who takes the last object wins.\n- initial_state is list of numbers of objects in each heap\n- moves is a list of your moves: [heap, number of objects to take]\n- you play first\"\"\"\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state=[2, 5, 3, 7, 0]):\n    state = initial_state[:]\n    moves = []\n    def bot_move():\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    def losing(h):\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 67,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(moves: List[List[int]], initial_state=[2, 5, 3, 7, 0]) -> bool:\n    \"\"\"Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\nremoving one or more objects from a single non-empty heap. The player who takes the last object wins.\n- initial_state is list of numbers of objects in each heap\n- moves is a list of your moves: [heap, number of objects to take]\n- you play first\"\"\"\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()",
        "solution_func": "def g(initial_state=[2, 5, 3, 7, 0]):\n    state = initial_state[:]\n    moves = []\n    def bot_move():\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    def losing(h):\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n    def optimal_move():",
        "map_ix": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(moves: List[List[int]], initial_state=[2, 5, 3, 7, 0]) -> bool:\n    \"\"\"Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\nremoving one or more objects from a single non-empty heap. The player who takes the last object wins.\n- initial_state is list of numbers of objects in each heap\n- moves is a list of your moves: [heap, number of objects to take]\n- you play first\"\"\"\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state=[2, 5, 3, 7, 0]):\n    state = initial_state[:]\n    moves = []\n    def bot_move():\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    def losing(h):\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g())",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 67,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(moves: List[List[int]], initial_state=[2, 5, 3, 7, 0]) -> bool:\n    \"\"\"Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\nremoving one or more objects from a single non-empty heap. The player who takes the last object wins.\n- initial_state is list of numbers of objects in each heap\n- moves is a list of your moves: [heap, number of objects to take]\n- you play first\"\"\"\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()",
        "solution_func": "def g(initial_state=[2, 5, 3, 7, 0]):\n    state = initial_state[:]\n    moves = []\n    def bot_move():\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    def losing(h):\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n    def optimal_move():",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there are two numbers in a list that add up to a target value\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(len(nums)) if i != j))\n    \ndef g(nums=[10, 5, 15, 3, 7]):\n    return nums\n    \nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 67,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there are two numbers in a list that add up to a target value\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(len(nums)) if i != j))",
        "solution_func": "def g(nums=[10, 5, 15, 3, 7]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if a matrix is a magic square of size n x n\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all((row_sum == col_sum == diagonal_sum1 == diagonal_sum2) for row_sum, col_sum in zip(row_sums, col_sums))\ndef g(n=3):\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 68,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if a matrix is a magic square of size n x n\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all((row_sum == col_sum == diagonal_sum1 == diagonal_sum2) for row_sum, col_sum in zip(row_sums, col_sums))",
        "solution_func": "def g(n=3):\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]",
        "map_ix": [
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix=\"pre\") -> bool:\n    \"\"\"Check if all words in the list start with the given prefix\"\"\"\n    return all(word.startswith(prefix) for word in words)\ndef g(prefix=\"pre\"):\n    return [\"prefix\", \"preference\", \"precaution\"]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 68,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], prefix=\"pre\") -> bool:\n    \"\"\"Check if all words in the list start with the given prefix\"\"\"\n    return all(word.startswith(prefix) for word in words)",
        "solution_func": "def g(prefix=\"pre\"):\n    return [\"prefix\", \"preference\", \"precaution\"]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list that add up to the target\"\"\"\n    complements = set()\n    for num in nums:\n        complement = target - num\n        if complement in complements:\n            return True\n        complements.add(num)\n    return False\ndef g(target=10):\n    return [2, 4, 6, 8]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 68,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list that add up to the target\"\"\"\n    complements = set()\n    for num in nums:\n        complement = target - num\n        if complement in complements:\n            return True\n        complements.add(num)\n    return False",
        "solution_func": "def g(target=10):\n    return [2, 4, 6, 8]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=50, count=3) -> bool:\n    \"\"\"Find a list of count numbers that sum up to target_sum\"\"\"\n    return sum(nums) == target_sum and len(nums) == count\n\ndef g(target_sum=50, count=3):\n    return [target_sum // count] * count\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 68,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=50, count=3) -> bool:\n    \"\"\"Find a list of count numbers that sum up to target_sum\"\"\"\n    return sum(nums) == target_sum and len(nums) == count",
        "solution_func": "def g(target_sum=50, count=3):\n    return [target_sum // count] * count",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=200, count=4) -> bool:\n    \"\"\"Find a list of count numbers that sum up to target_sum\"\"\"\n    return sum(nums) == target_sum and len(nums) == count\n\ndef g(target_sum=200, count=4):\n    return [target_sum // count] * count\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 68,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=200, count=4) -> bool:\n    \"\"\"Find a list of count numbers that sum up to target_sum\"\"\"\n    return sum(nums) == target_sum and len(nums) == count",
        "solution_func": "def g(target_sum=200, count=4):\n    return [target_sum // count] * count",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=1000, count=6) -> bool:\n    \"\"\"Find a list of count numbers that sum up to target_sum\"\"\"\n    return sum(nums) == target_sum and len(nums) == count\n\ndef g(target_sum=1000, count=6):\n    return [target_sum // count] * count\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 68,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=1000, count=6) -> bool:\n    \"\"\"Find a list of count numbers that sum up to target_sum\"\"\"\n    return sum(nums) == target_sum and len(nums) == count",
        "solution_func": "def g(target_sum=1000, count=6):\n    return [target_sum // count] * count",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, k=2, seq=[5, 10, 15, 20, 25, 30, 35, 40, 45, 50]) -> bool:\n    \"\"\"Check if there exist n consecutive elements in the sequence whose sum is divisible by k.\"\"\"\n    for i in range(len(seq) - n + 1):\n        if sum(seq[i:i+n]) % k == 0:\n            return True\n    return False\n\ndef g(k=2, seq=[5, 10, 15, 20, 25, 30, 35, 40, 45, 50]):\n    for i in range(len(seq) - k + 1):\n        if sum(seq[i:i+k]) % k == 0:\n            return seq[i:i+k]\n    return []\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 68,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, k=2, seq=[5, 10, 15, 20, 25, 30, 35, 40, 45, 50]) -> bool:\n    \"\"\"Check if there exist n consecutive elements in the sequence whose sum is divisible by k.\"\"\"\n    for i in range(len(seq) - n + 1):\n        if sum(seq[i:i+n]) % k == 0:\n            return True\n    return False",
        "solution_func": "def g(k=2, seq=[5, 10, 15, 20, 25, 30, 35, 40, 45, 50]):\n    for i in range(len(seq) - k + 1):\n        if sum(seq[i:i+k]) % k == 0:\n            return seq[i:i+k]\n    return []",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, k=3, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find the largest product of k consecutive elements in the sequence.\"\"\"\n    max_prod = 0\n    for i in range(len(seq) - k + 1):\n        prod = 1\n        for j in range(i, i + k):\n            prod *= seq[j]\n        if prod > max_prod:\n            max_prod = prod\n    return max_prod == n\n\ndef g(k=3, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    max_prod = 0\n    max_indices = []\n    for i in range(len(seq) - k + 1):\n        prod = 1\n        for j in range(i, i + k):\n            prod *= seq[j]\n        if prod > max_prod:\n            max_prod = prod\n            max_indices = seq[i:i+k]\n    return max_indices\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 68,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, k=3, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find the largest product of k consecutive elements in the sequence.\"\"\"\n    max_prod = 0\n    for i in range(len(seq) - k + 1):\n        prod = 1\n        for j in range(i, i + k):\n            prod *= seq[j]\n        if prod > max_prod:\n            max_prod = prod\n    return max_prod == n",
        "solution_func": "def g(k=3, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    max_prod = 0\n    max_indices = []\n    for i in range(len(seq) - k + 1):\n        prod = 1\n        for j in range(i, i + k):\n            prod *= seq[j]\n        if prod > max_prod:\n            max_prod = prod\n            max_indices = seq[i:i+k]\n    return max_indices",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, k=4, seq=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    \"\"\"Find the index of the first occurrence of a sequence of k consecutive elements whose sum is equal to n.\"\"\"\n    for i in range(len(seq) - k + 1):\n        if sum(seq[i:i+k]) == n:\n            return i\n    return -1\n\ndef g(k=4, seq=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    for i in range(len(seq) - k + 1):\n        if sum(seq[i:i+k]) == n:\n            return i\n    return -1\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 68,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, k=4, seq=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    \"\"\"Find the index of the first occurrence of a sequence of k consecutive elements whose sum is equal to n.\"\"\"\n    for i in range(len(seq) - k + 1):\n        if sum(seq[i:i+k]) == n:\n            return i\n    return -1",
        "solution_func": "def g(k=4, seq=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    for i in range(len(seq) - k + 1):\n        if sum(seq[i:i+k]) == n:\n            return i\n    return -1",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=1000) -> bool:\n    \"\"\"Determine if a number is a divisor of another number.\"\"\"\n    return b % n == 0 and n != 0\ndef g(a=2, b=1000):\n    if a == 0:\n        return b\n    for n in range(1, b+1):\n        if b % n == 0:\n            return n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 68,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=2, b=1000) -> bool:\n    \"\"\"Determine if a number is a divisor of another number.\"\"\"\n    return b % n == 0 and n != 0",
        "solution_func": "def g(a=2, b=1000):\n    if a == 0:\n        return b\n    for n in range(1, b+1):\n        if b % n == 0:\n            return n",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> bool:\n    \"\"\"Check if n exists in the matrix\"\"\"\n    for row in matrix:\n        if n in row:\n            return True\n    return False\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix[len(matrix)-1][len(matrix[0])-1]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 69,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> bool:\n    \"\"\"Check if n exists in the matrix\"\"\"\n    for row in matrix:\n        if n in row:\n            return True\n    return False",
        "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix[len(matrix)-1][len(matrix[0])-1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> bool:\n    \"\"\"Check if n exists in the matrix and is divisible by 2\"\"\"\n    for row in matrix:\n        if n in row and n % 2 == 0:\n            return True\n    return False\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix[1][1]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 69,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> bool:\n    \"\"\"Check if n exists in the matrix and is divisible by 2\"\"\"\n    for row in matrix:\n        if n in row and n % 2 == 0:\n            return True\n    return False",
        "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix[1][1]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> bool:\n    \"\"\"Check if n exists in the matrix and is in the range of 0 to 5\"\"\"\n    for row in matrix:\n        if n in row and n >= 0 and n <= 5:\n            return True\n    return False\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix[2][2]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 69,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> bool:\n    \"\"\"Check if n exists in the matrix and is in the range of 0 to 5\"\"\"\n    for row in matrix:\n        if n in row and n >= 0 and n <= 5:\n            return True\n    return False",
        "solution_func": "def g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix[2][2]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target=\"python\") -> bool:\n    \"\"\"Check if there exists a word in the list that contains the target substring\"\"\"\n    return any(target in word for word in words)\ndef g(target=\"python\"):\n    return [\"hello\", \"world\", \"python\", \"programming\"]\nassert f(g())\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 69,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], target=\"python\") -> bool:\n    \"\"\"Check if there exists a word in the list that contains the target substring\"\"\"\n    return any(target in word for word in words)",
        "solution_func": "def g(target=\"python\"):\n    return [\"hello\", \"world\", \"python\", \"programming\"]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]], threshold=5) -> bool:\n    \"\"\"Check if any point in the list is outside the threshold distance from the origin.\"\"\"\n    return any((x ** 2 + y ** 2) ** 0.5 > threshold for x, y in points)\ndef g(threshold=5):\n    return [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]\nassert f(g())\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            1.0
        ],
        "idx_generation": 69,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(points: List[Tuple[int, int]], threshold=5) -> bool:\n    \"\"\"Check if any point in the list is outside the threshold distance from the origin.\"\"\"\n    return any((x ** 2 + y ** 2) ** 0.5 > threshold for x, y in points)",
        "solution_func": "def g(threshold=5):\n    return [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            1,
            0,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number exists in the matrix\"\"\"\n    return any(target in row for row in matrix)\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n\n",
        "emb": null,
        "idx_generation": 69,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number exists in the matrix\"\"\"\n    return any(target in row for row in matrix)",
        "solution_func": "def g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Given a list of words and a target word, determine if there exists a word in the list that contains all the letters of the target word in any order.\"\"\"\n    for word in words:\n        if set(target).issubset(set(word)):\n            return True\n    return False\n\ndef g(words=['python', 'programming', 'puzzle', 'code']):\n    return words\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 69,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Given a list of words and a target word, determine if there exists a word in the list that contains all the letters of the target word in any order.\"\"\"\n    for word in words:\n        if set(target).issubset(set(word)):\n            return True\n    return False",
        "solution_func": "def g(words=['python', 'programming', 'puzzle', 'code']):\n    return words",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], target='puzzle') -> bool:\n    \"\"\"Given a list of strings and a target string, determine if there exists a string in the list that is an anagram of the target string.\"\"\"\n    for string in strings:\n        if sorted(string) == sorted(target):\n            return True\n    return False\n\ndef g(strings=['puzzle', 'lzzupe', 'uzelpl', 'zlpel']):\n    return strings\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 69,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(strings: List[str], target='puzzle') -> bool:\n    \"\"\"Given a list of strings and a target string, determine if there exists a string in the list that is an anagram of the target string.\"\"\"\n    for string in strings:\n        if sorted(string) == sorted(target):\n            return True\n    return False",
        "solution_func": "def g(strings=['puzzle', 'lzzupe', 'uzelpl', 'zlpel']):\n    return strings",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(grid: List[List[int]], target=20) -> bool:\n    \"\"\"Given a 2D grid of integers and a target number, determine if there exists a subgrid (2x2) in the grid whose sum is equal to the target number.\"\"\"\n    for i in range(len(grid)-1):\n        for j in range(len(grid[i])-1):\n            subgrid_sum = grid[i][j] + grid[i][j+1] + grid[i+1][j] + grid[i+1][j+1]\n            if subgrid_sum == target:\n                return True\n    return False\n\ndef g(grid=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return grid\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 69,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(grid: List[List[int]], target=20) -> bool:\n    \"\"\"Given a 2D grid of integers and a target number, determine if there exists a subgrid (2x2) in the grid whose sum is equal to the target number.\"\"\"\n    for i in range(len(grid)-1):\n        for j in range(len(grid[i])-1):\n            subgrid_sum = grid[i][j] + grid[i][j+1] + grid[i+1][j] + grid[i+1][j+1]\n            if subgrid_sum == target:\n                return True\n    return False",
        "solution_func": "def g(grid=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return grid",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(rectangles: List[List[int]], m=6, n=6, target=18) -> bool:\n    \"\"\"Cover an m x n grid with non-overlapping rectangles. The solution is a list of fourtuples [i1, j1, i2, j2] where i1 and j1 are the coordinates of the top-left corner and i2 and j2 are the coordinates of the bottom-right corner of each rectangle.\"\"\"\n    covered = set()\n    for (i1, j1, i2, j2) in rectangles:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n\n        for i in range(i1, i2+1):\n            for j in range(j1, j2+1):\n                assert (i, j) not in covered\n                covered.add((i, j))\n    return len(covered) == target\ndef g(m=6, n=6, target=18):\n    ans = []\n    for i in range(0, m, 2):\n        for j in range(0, n, 3):\n            ans.append([i, j, i+1, j+2])\n    return ans\nassert f(g())\n",
        "emb": null,
        "idx_generation": 69,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(rectangles: List[List[int]], m=6, n=6, target=18) -> bool:\n    \"\"\"Cover an m x n grid with non-overlapping rectangles. The solution is a list of fourtuples [i1, j1, i2, j2] where i1 and j1 are the coordinates of the top-left corner and i2 and j2 are the coordinates of the bottom-right corner of each rectangle.\"\"\"\n    covered = set()\n    for (i1, j1, i2, j2) in rectangles:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n\n        for i in range(i1, i2+1):\n            for j in range(j1, j2+1):\n                assert (i, j) not in covered\n                covered.add((i, j))\n    return len(covered) == target",
        "solution_func": "def g(m=6, n=6, target=18):\n    ans = []\n    for i in range(0, m, 2):\n        for j in range(0, n, 3):\n            ans.append([i, j, i+1, j+2])\n    return ans",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(board: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Check if the given board is a valid Sudoku solution\"\"\"\n    def check_rows(board):\n        for row in board:\n            if len(set(row)) != n:\n                return False\n        return True\n    \n    def check_columns(board):\n        for j in range(n):\n            column = [board[i][j] for i in range(m)]\n            if len(set(column)) != m:\n                return False\n        return True\n    \n    def check_subgrids(board):\n        for i in range(0, m, 3):\n            for j in range(0, n, 3):\n                subgrid = [board[r][c] for r in range(i, i+3) for c in range(j, j+3)]\n                if len(set(subgrid)) != m:\n                    return False\n        return True\n    \n    return check_rows(board) and check_columns(board) and check_subgrids(board)\n    \ndef g(m=5, n=5):\n    board = [[1, 2, 3, 4, 5],\n             [4, 5, 1, 2, 3],\n             [2, 3, 4, 5, 1],\n             [5, 1, 2, 3, 4],\n             [3, 4, 5, 1, 2]]\n    return board\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 70,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(board: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Check if the given board is a valid Sudoku solution\"\"\"\n    def check_rows(board):\n        for row in board:\n            if len(set(row)) != n:\n                return False\n        return True\n    \n    def check_columns(board):\n        for j in range(n):\n            column = [board[i][j] for i in range(m)]\n            if len(set(column)) != m:\n                return False\n        return True\n    \n    def check_subgrids(board):\n        for i in range(0, m, 3):\n            for j in range(0, n, 3):\n                subgrid = [board[r][c] for r in range(i, i+3) for c in range(j, j+3)]\n                if len(set(subgrid)) != m:\n                    return False\n        return True\n    \n    return check_rows(board) and check_columns(board) and check_subgrids(board)",
        "solution_func": "def g(m=5, n=5):\n    board = [[1, 2, 3, 4, 5],\n             [4, 5, 1, 2, 3],\n             [2, 3, 4, 5, 1],\n             [5, 1, 2, 3, 4],\n             [3, 4, 5, 1, 2]]\n    return board",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the given list that sum up to the target value\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 70,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the given list that sum up to the target value\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], pattern='ABBA') -> bool:\n    \"\"\"Check if the given list of words follow the given pattern\"\"\"\n    if len(words) != len(pattern):\n        return False\n    \n    pattern_map = {}\n    word_map = {}\n\n    for i in range(len(pattern)):\n        if pattern[i] not in pattern_map:\n            pattern_map[pattern[i]] = words[i]\n        else:\n            if pattern_map[pattern[i]] != words[i]:\n                return False\n\n        if words[i] not in word_map:\n            word_map[words[i]] = pattern[i]\n        else:\n            if word_map[words[i]] != pattern[i]:\n                return False\n\n    return True\n\ndef g(pattern='ABBA'):\n    words = ['red', 'blue', 'blue', 'red']\n    return words\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 70,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], pattern='ABBA') -> bool:\n    \"\"\"Check if the given list of words follow the given pattern\"\"\"\n    if len(words) != len(pattern):\n        return False\n    \n    pattern_map = {}\n    word_map = {}\n\n    for i in range(len(pattern)):\n        if pattern[i] not in pattern_map:\n            pattern_map[pattern[i]] = words[i]\n        else:\n            if pattern_map[pattern[i]] != words[i]:\n                return False\n\n        if words[i] not in word_map:\n            word_map[words[i]] = pattern[i]\n        else:\n            if word_map[words[i]] != pattern[i]:\n                return False\n\n    return True",
        "solution_func": "def g(pattern='ABBA'):\n    words = ['red', 'blue', 'blue', 'red']\n    return words",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(inds: List[int], string='programming') -> bool:\n    \"\"\"Find increasing indices to make the substring \"gramming\" (with a surprise twist)\"\"\"\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'gramming'\ndef g(string='programming'):\n    target = 'gramming'\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 70,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(inds: List[int], string='programming') -> bool:\n    \"\"\"Find increasing indices to make the substring \"gramming\" (with a surprise twist)\"\"\"\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'gramming'",
        "solution_func": "def g(string='programming'):\n    target = 'gramming'\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(inds: List[int], string='hellothere') -> bool:\n    \"\"\"Find increasing indices to make the substring \"there\" (with a surprise twist)\"\"\"\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'there'\ndef g(string='hellothere'):\n    target = 'there'\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            1.0
        ],
        "idx_generation": 70,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(inds: List[int], string='hellothere') -> bool:\n    \"\"\"Find increasing indices to make the substring \"there\" (with a surprise twist)\"\"\"\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'there'",
        "solution_func": "def g(string='hellothere'):\n    target = 'there'\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(inds: List[int], string='puzzlemutation') -> bool:\n    \"\"\"Find increasing indices to make the substring \"zm\" (with a surprise twist)\"\"\"\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'zm'\ndef g(string='puzzlemutation'):\n    target = 'zm'\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 70,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(inds: List[int], string='puzzlemutation') -> bool:\n    \"\"\"Find increasing indices to make the substring \"zm\" (with a surprise twist)\"\"\"\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'zm'",
        "solution_func": "def g(string='puzzlemutation'):\n    target = 'zm'\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], n=3) -> bool:\n    \"\"\"Check if any word in the list has a length greater than a given value.\"\"\"\n    return any(len(word) > n for word in words)\ndef g(n=3):\n    return ['Python', 'Programming', 'Puzzle', 'Code']\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 70,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], n=3) -> bool:\n    \"\"\"Check if any word in the list has a length greater than a given value.\"\"\"\n    return any(len(word) > n for word in words)",
        "solution_func": "def g(n=3):\n    return ['Python', 'Programming', 'Puzzle', 'Code']",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]], threshold=5) -> bool:\n    \"\"\"Check if all points in the list are within the threshold distance from the origin.\"\"\"\n    return all((x ** 2 + y ** 2) ** 0.5 <= threshold for x, y in points)\ndef g(threshold=5):\n    return [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 70,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(points: List[Tuple[int, int]], threshold=5) -> bool:\n    \"\"\"Check if all points in the list are within the threshold distance from the origin.\"\"\"\n    return all((x ** 2 + y ** 2) ** 0.5 <= threshold for x, y in points)",
        "solution_func": "def g(threshold=5):\n    return [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the sum of each row in the matrix is equal to the sum of each column.\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return row_sums == col_sums\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 70,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the sum of each row in the matrix is equal to the sum of each column.\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return row_sums == col_sums",
        "solution_func": "def g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    return any(target - num in nums for num in nums)\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n\n",
        "emb": null,
        "idx_generation": 70,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    return any(target - num in nums for num in nums)",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(moves: List[List[int]], initial_state=[2, 5, 3, 7, 0]) -> bool:\n    \"\"\"Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\nremoving one or more objects from a single non-empty heap. The player who takes the last object wins.\n- initial_state is list of numbers of objects in each heap\n- moves is a list of your moves: [heap, number of objects to take]\n- you play first\"\"\"\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state=[2, 5, 3, 7, 0]):\n    state = initial_state[:]\n    moves = []\n    def bot_move():\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    def losing(h):\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 71,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(moves: List[List[int]], initial_state=[2, 5, 3, 7, 0]) -> bool:\n    \"\"\"Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\nremoving one or more objects from a single non-empty heap. The player who takes the last object wins.\n- initial_state is list of numbers of objects in each heap\n- moves is a list of your moves: [heap, number of objects to take]\n- you play first\"\"\"\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()",
        "solution_func": "def g(initial_state=[2, 5, 3, 7, 0]):\n    state = initial_state[:]\n    moves = []\n    def bot_move():\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    def losing(h):\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n    def optimal_move():",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(moves: List[List[int]], initial_state=[2, 5, 3, 7, 0]) -> bool:\n    \"\"\"Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\nremoving one or more objects from a single non-empty heap. The player who takes the last object wins.\n- initial_state is list of numbers of objects in each heap\n- moves is a list of your moves: [heap, number of objects to take]\n- you play first\"\"\"\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_smallest = state.index(vals[-1])\n        state[i_smallest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state=[2, 5, 3, 7, 0]):\n    state = initial_state[:]\n    moves = []\n    def bot_move():\n        vals = sorted(state, reverse=True)\n        i_smallest = state.index(vals[-1])\n        state[i_smallest] -= max(vals[0] - vals[1], 1)\n    def losing(h):\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g())\n",
        "emb": null,
        "idx_generation": 71,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(moves: List[List[int]], initial_state=[2, 5, 3, 7, 0]) -> bool:\n    \"\"\"Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\nremoving one or more objects from a single non-empty heap. The player who takes the last object wins.\n- initial_state is list of numbers of objects in each heap\n- moves is a list of your moves: [heap, number of objects to take]\n- you play first\"\"\"\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_smallest = state.index(vals[-1])\n        state[i_smallest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()",
        "solution_func": "def g(initial_state=[2, 5, 3, 7, 0]):\n    state = initial_state[:]\n    moves = []\n    def bot_move():\n        vals = sorted(state, reverse=True)\n        i_smallest = state.index(vals[-1])\n        state[i_smallest] -= max(vals[0] - vals[1], 1)\n    def losing(h):\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n    def optimal_move():",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(moves: List[List[int]], initial_state=[2, 5, 3, 7, 0]) -> bool:\n    \"\"\"Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\nremoving one or more objects from a single non-empty heap. The player who takes the last object wins.\n- initial_state is list of numbers of objects in each heap\n- moves is a list of your moves: [heap, number of objects to take]\n- you play first\"\"\"\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state=[2, 5, 3, 7, 0]):\n    state = initial_state[:]\n    moves = []\n    def bot_move():\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    def losing(h):\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n    def optimal_move():\n        assert not losing(state)\n        for i in reversed(range(len(state))):\n            for n in reversed(range(1, state[i] + 1)):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 71,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(moves: List[List[int]], initial_state=[2, 5, 3, 7, 0]) -> bool:\n    \"\"\"Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\nremoving one or more objects from a single non-empty heap. The player who takes the last object wins.\n- initial_state is list of numbers of objects in each heap\n- moves is a list of your moves: [heap, number of objects to take]\n- you play first\"\"\"\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()",
        "solution_func": "def g(initial_state=[2, 5, 3, 7, 0]):\n    state = initial_state[:]\n    moves = []\n    def bot_move():\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    def losing(h):\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n    def optimal_move():",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the list of numbers is sorted in ascending order\"\"\"\n    return numbers == sorted(numbers)\n\ndef g():\n    return random.sample(range(1, 101), 10)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 71,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the list of numbers is sorted in ascending order\"\"\"\n    return numbers == sorted(numbers)",
        "solution_func": "def g():\n    return random.sample(range(1, 101), 10)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 4, 7, 3, 9, 2, 5], 10\n\nassert f(*g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 71,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g():\n    return [1, 4, 7, 3, 9, 2, 5], 10",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there is a subset of the list that sums up to the target\"\"\"\n    def isSubsetSum(nums, n, target):\n        if target == 0:\n            return True\n        if n == 0 and target != 0:\n            return False\n        if nums[n-1] > target:\n            return isSubsetSum(nums, n-1, target)\n        return isSubsetSum(nums, n-1, target) or isSubsetSum(nums, n-1, target-nums[n-1])\n\n    return isSubsetSum(nums, len(nums), target)\n\ndef g():\n    return [3, 34, 4, 12, 5, 2], 9\n\nassert f(*g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 71,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there is a subset of the list that sums up to the target\"\"\"\n    def isSubsetSum(nums, n, target):\n        if target == 0:\n            return True\n        if n == 0 and target != 0:\n            return False\n        if nums[n-1] > target:\n            return isSubsetSum(nums, n-1, target)\n        return isSubsetSum(nums, n-1, target) or isSubsetSum(nums, n-1, target-nums[n-1])\n\n    return isSubsetSum(nums, len(nums), target)",
        "solution_func": "def g():\n    return [3, 34, 4, 12, 5, 2], 9",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if a matrix is symmetric and has a diagonal sum equal to n\"\"\"\n    return all((matrix[i][j] == matrix[j][i]) for i in range(n) for j in range(n)) and sum(matrix[i][i] for i in range(n)) == n\ndef g(n=3):\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 71,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if a matrix is symmetric and has a diagonal sum equal to n\"\"\"\n    return all((matrix[i][j] == matrix[j][i]) for i in range(n) for j in range(n)) and sum(matrix[i][i] for i in range(n)) == n",
        "solution_func": "def g(n=3):\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if a matrix is upper triangular of size n x n\"\"\"\n    return all((matrix[i][j] == 0) for i in range(n) for j in range(i+1, n))\ndef g(n=3):\n    return [[1, 2, 3], [0, 4, 5], [0, 0, 6]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 71,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if a matrix is upper triangular of size n x n\"\"\"\n    return all((matrix[i][j] == 0) for i in range(n) for j in range(i+1, n))",
        "solution_func": "def g(n=3):\n    return [[1, 2, 3], [0, 4, 5], [0, 0, 6]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if a matrix is lower triangular of size n x n\"\"\"\n    return all((matrix[i][j] == 0) for i in range(n) for j in range(i))\ndef g(n=3):\n    return [[1, 0, 0], [2, 4, 0], [3, 5, 6]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 71,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if a matrix is lower triangular of size n x n\"\"\"\n    return all((matrix[i][j] == 0) for i in range(n) for j in range(i))",
        "solution_func": "def g(n=3):\n    return [[1, 0, 0], [2, 4, 0], [3, 5, 6]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum=50) -> bool:\n    \"\"\"Check if there exists a subset of numbers from the list whose sum is greater than or equal to the target_sum\"\"\"\n    n = len(arr)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[n][target_sum]\n\ndef g(target_sum=50):\n    return list(range(1, target_sum+1))\n\nassert f(g()) == True\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 71,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum=50) -> bool:\n    \"\"\"Check if there exists a subset of numbers from the list whose sum is greater than or equal to the target_sum\"\"\"\n    n = len(arr)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[n][target_sum]",
        "solution_func": "def g(target_sum=50):\n    return list(range(1, target_sum+1))",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    \"\"\"Check if a number n is a common multiple of both a and b, and is greater than or equal to the lower_bound\"\"\"\n    return n % a == 0 and n % b == 0 and (n >= lower_bound)\ndef g(a=247586288427023352, b=372021520735824432, lower_bound=1709054537):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 72,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    \"\"\"Check if a number n is a common multiple of both a and b, and is greater than or equal to the lower_bound\"\"\"\n    return n % a == 0 and n % b == 0 and (n >= lower_bound)",
        "solution_func": "def g(a=247586288427023352, b=372021520735824432, lower_bound=1709054537):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[2, 4, 8, 16, 32], upper_bound=1024) -> bool:\n    \"\"\"Check if n is a power of all numbers in the list and is less than or equal to the upper_bound\"\"\"\n    return all((n % i == 0 for i in lst)) and 0 < n <= upper_bound\ndef g(lst=[2, 4, 8, 16, 32], upper_bound=1024):\n    ans = 1\n    for i in lst:\n        (m, n) = (min(i, ans), max(i, ans))\n        while m > 0:\n            (m, n) = (n % m, m)\n        ans *= i // n\n    return ans\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 72,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[2, 4, 8, 16, 32], upper_bound=1024) -> bool:\n    \"\"\"Check if n is a power of all numbers in the list and is less than or equal to the upper_bound\"\"\"\n    return all((n % i == 0 for i in lst)) and 0 < n <= upper_bound",
        "solution_func": "def g(lst=[2, 4, 8, 16, 32], upper_bound=1024):\n    ans = 1\n    for i in lst:\n        (m, n) = (min(i, ans), max(i, ans))\n        while m > 0:\n            (m, n) = (n % m, m)\n        ans *= i // n\n    return ans",
        "map_ix": [
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst=[7, 11, 13, 17, 19], upper_bound=1000) -> bool:\n    \"\"\"Check if n is a multiple of all numbers in the list and is less than or equal to the upper_bound\"\"\"\n    return all((n % i == 0 for i in lst)) and 0 < n <= upper_bound\ndef g(lst=[7, 11, 13, 17, 19], upper_bound=1000):\n    ans = 1\n    for i in lst:\n        (m, n) = (min(i, ans), max(i, ans))\n        while m > 0:\n            (m, n) = (n % m, m)\n        ans *= i // n\n    return ans\nassert f(g())\n",
        "emb": null,
        "idx_generation": 72,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[7, 11, 13, 17, 19], upper_bound=1000) -> bool:\n    \"\"\"Check if n is a multiple of all numbers in the list and is less than or equal to the upper_bound\"\"\"\n    return all((n % i == 0 for i in lst)) and 0 < n <= upper_bound",
        "solution_func": "def g(lst=[7, 11, 13, 17, 19], upper_bound=1000):\n    ans = 1\n    for i in lst:\n        (m, n) = (min(i, ans), max(i, ans))\n        while m > 0:\n            (m, n) = (n % m, m)\n        ans *= i // n\n    return ans",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list whose product is equal to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        if num == 0 and target == 0:\n            return True\n        if target % num == 0 and target // num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=24):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 72,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list whose product is equal to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        if num == 0 and target == 0:\n            return True\n        if target % num == 0 and target // num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=24):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a subsequence in the list whose sum is equal to the target number.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n    for i in range(1, n + 1):\n        dp[i][0] = True\n        for j in range(1, target + 1):\n            if j >= nums[i - 1]:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]\n\ndef g(nums=[2, 4, 6, 8, 10, 12, 14, 16], target=20):\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 72,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a subsequence in the list whose sum is equal to the target number.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n    for i in range(1, n + 1):\n        dp[i][0] = True\n        for j in range(1, target + 1):\n            if j >= nums[i - 1]:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]",
        "solution_func": "def g(nums=[2, 4, 6, 8, 10, 12, 14, 16], target=20):\n    return nums",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list whose difference is equal to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        if num - target in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[1, 3, 5, 7, 9, 11, 13, 15]):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 72,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list whose difference is equal to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        if num - target in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(nums=[1, 3, 5, 7, 9, 11, 13, 15]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=13) -> bool:\n    \"\"\"Check if there are two numbers in a list whose sum is equal to the target.\"\"\"\n    return any((target - i) in nums for i in nums)\ndef g(nums: List[int]):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 72,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=13) -> bool:\n    \"\"\"Check if there are two numbers in a list whose sum is equal to the target.\"\"\"\n    return any((target - i) in nums for i in nums)",
        "solution_func": "def g(nums: List[int]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=6) -> bool:\n    \"\"\"Check if a string has exactly n consonants.\"\"\"\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    return len([c for c in s.lower() if c in consonants]) == n\ndef g(n=6):\n    return 'bcdfgh' + 'a' * n + 'jklmnpqrstvwxyz'\nassert f(g())\n",
        "emb": null,
        "idx_generation": 72,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=6) -> bool:\n    \"\"\"Check if a string has exactly n consonants.\"\"\"\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    return len([c for c in s.lower() if c in consonants]) == n",
        "solution_func": "def g(n=6):\n    return 'bcdfgh' + 'a' * n + 'jklmnpqrstvwxyz'",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Check if there are three numbers in a list whose sum is equal to the target.\"\"\"\n    return any((target - i - j) in nums for i in nums for j in nums)\ndef g(nums: List[int]):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 72,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Check if there are three numbers in a list whose sum is equal to the target.\"\"\"\n    return any((target - i - j) in nums for i in nums for j in nums)",
        "solution_func": "def g(nums: List[int]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: List[int], n=4, s=12) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=4, s=12):\n    x = [2] * n\n    x[0] = s - n + 2\n    return x\nassert f(g())\n",
        "emb": null,
        "idx_generation": 72,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=4, s=12) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])",
        "solution_func": "def g(n=4, s=12):\n    x = [2] * n\n    x[0] = s - n + 2\n    return x",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str], target='apple') -> bool:\n    \"\"\"Check if there exist two words in the list that concatenate to form the target word\"\"\"\n    complements = set()\n    for word in words:\n        complement = target - word\n        if complement in complements:\n            return True\n        complements.add(word)\n    return False\ndef g(target='apple'):\n    return ['pine', 'apple', 'banana']\nassert f(g())\n",
        "emb": null,
        "idx_generation": 73,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], target='apple') -> bool:\n    \"\"\"Check if there exist two words in the list that concatenate to form the target word\"\"\"\n    complements = set()\n    for word in words:\n        complement = target - word\n        if complement in complements:\n            return True\n        complements.add(word)\n    return False",
        "solution_func": "def g(target='apple'):\n    return ['pine', 'apple', 'banana']",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exist three numbers in the list that add up to the target\"\"\"\n    complements = set()\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            complement = target - (nums[i] + nums[j])\n            if complement in complements:\n                return True\n            complements.add(nums[i])\n            complements.add(nums[j])\n    return False\ndef g(target=5):\n    return [1, 2, 3, 4]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 73,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exist three numbers in the list that add up to the target\"\"\"\n    complements = set()\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            complement = target - (nums[i] + nums[j])\n            if complement in complements:\n                return True\n            complements.add(nums[i])\n            complements.add(nums[j])\n    return False",
        "solution_func": "def g(target=5):\n    return [1, 2, 3, 4]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exist two numbers in the list that multiply to the target\"\"\"\n    complements = set()\n    for num in nums:\n        complement = target / num\n        if complement in complements:\n            return True\n        complements.add(num)\n    return False\ndef g(target=100):\n    return [5, 10, 20, 25]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 73,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exist two numbers in the list that multiply to the target\"\"\"\n    complements = set()\n    for num in nums:\n        complement = target / num\n        if complement in complements:\n            return True\n        complements.add(num)\n    return False",
        "solution_func": "def g(target=100):\n    return [5, 10, 20, 25]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a list of numbers that can be summed to the target number\"\"\"\n    return sum(nums) == target\ndef g(target=10):\n    return [2, 3, 5]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 73,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a list of numbers that can be summed to the target number\"\"\"\n    return sum(nums) == target",
        "solution_func": "def g(target=10):\n    return [2, 3, 5]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is symmetric along its main diagonal\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 73,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is symmetric along its main diagonal\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True",
        "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str]) -> bool:\n    \"\"\"Check if all words in the list are palindromes\"\"\"\n    return all(word == word[::-1] for word in words)\ndef g():\n    return ['level', 'deed', 'rotor']\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 73,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str]) -> bool:\n    \"\"\"Check if all words in the list are palindromes\"\"\"\n    return all(word == word[::-1] for word in words)",
        "solution_func": "def g():\n    return ['level', 'deed', 'rotor']",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=4) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the list whose sum is divisible by 3.\"\"\"\n    n = len(arr)\n    for i in range(n - k + 1):\n        subarray = arr[i:i+k]\n        if sum(subarray) % 3 == 0:\n            return True\n    return False\n\ndef g(k=4):\n    return [i for i in range(-k, k+1)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 73,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=4) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the list whose sum is divisible by 3.\"\"\"\n    n = len(arr)\n    for i in range(n - k + 1):\n        subarray = arr[i:i+k]\n        if sum(subarray) % 3 == 0:\n            return True\n    return False",
        "solution_func": "def g(k=4):\n    return [i for i in range(-k, k+1)]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the list whose sum is greater than or equal to zero.\"\"\"\n    n = len(arr)\n    for i in range(n - k + 1):\n        subarray = arr[i:i+k]\n        if sum(subarray) >= 0:\n            return True\n    return False\n\ndef g(k=5):\n    return [i for i in range(-k, k+1)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 73,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the list whose sum is greater than or equal to zero.\"\"\"\n    n = len(arr)\n    for i in range(n - k + 1):\n        subarray = arr[i:i+k]\n        if sum(subarray) >= 0:\n            return True\n    return False",
        "solution_func": "def g(k=5):\n    return [i for i in range(-k, k+1)]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=6) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the list whose sum is less than or equal to zero.\"\"\"\n    n = len(arr)\n    for i in range(n - k + 1):\n        subarray = arr[i:i+k]\n        if sum(subarray) <= 0:\n            return True\n    return False\n\ndef g(k=6):\n    return [i for i in range(-k, k+1)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 73,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=6) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the list whose sum is less than or equal to zero.\"\"\"\n    n = len(arr)\n    for i in range(n - k + 1):\n        subarray = arr[i:i+k]\n        if sum(subarray) <= 0:\n            return True\n    return False",
        "solution_func": "def g(k=6):\n    return [i for i in range(-k, k+1)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport numpy as np\nfrom typing import List, Tuple\n\ndef f(arr: List[int], k: int = 3) -> bool:\n    \"\"\"Check if there exists a subarray of size k in the given array such that the sum of its elements is zero.\"\"\"\n    subarrays = [arr[i:i+k] for i in range(len(arr)-k+1)]\n    return any(sum(subarray) == 0 for subarray in subarrays)\n\ndef g(k: int = 3) -> List[int]:\n    \"\"\"Generate an array with k elements where the sum is zero.\"\"\"\n    return [i for i in range(1, k+1)] + [-k*(k+1)//2]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 73,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\nfrom typing import List, Tuple\n\ndef f(arr: List[int], k: int = 3) -> bool:\n    \"\"\"Check if there exists a subarray of size k in the given array such that the sum of its elements is zero.\"\"\"\n    subarrays = [arr[i:i+k] for i in range(len(arr)-k+1)]\n    return any(sum(subarray) == 0 for subarray in subarrays)",
        "solution_func": "def g(k: int = 3) -> List[int]:\n    \"\"\"Generate an array with k elements where the sum is zero.\"\"\"\n    return [i for i in range(1, k+1)] + [-k*(k+1)//2]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list 'nums' that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 74,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list 'nums' that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Find two numbers in the list 'nums' whose difference is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if abs(nums[i] - nums[j]) == target:\n                return True\n    return False\n\ndef g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 74,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Find two numbers in the list 'nums' whose difference is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if abs(nums[i] - nums[j]) == target:\n                return True\n    return False",
        "solution_func": "def g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find the maximum number from the list 'nums' that is less than the target value.\"\"\"\n    max_num = float('-inf')\n    for num in nums:\n        if num < target and num > max_num:\n            max_num = num\n    return max_num\n\ndef g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 74,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find the maximum number from the list 'nums' that is less than the target value.\"\"\"\n    max_num = float('-inf')\n    for num in nums:\n        if num < target and num > max_num:\n            max_num = num\n    return max_num",
        "solution_func": "def g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum=50) -> bool:\n    \"\"\"Check if there exists a subset of numbers from the list whose sum is greater than or equal to the target_sum\"\"\"\n    n = len(arr)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[n][target_sum]\n\ndef g(target_sum=50):\n    return list(range(1, target_sum+1))\n\nassert f(g()) == True\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 74,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum=50) -> bool:\n    \"\"\"Check if there exists a subset of numbers from the list whose sum is greater than or equal to the target_sum\"\"\"\n    n = len(arr)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[n][target_sum]",
        "solution_func": "def g(target_sum=50):\n    return list(range(1, target_sum+1))",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum=200) -> bool:\n    \"\"\"Check if there exists a subset of numbers from the list whose sum is greater than the target_sum\"\"\"\n    n = len(arr)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[n][target_sum]\n\ndef g(target_sum=200):\n    return list(range(1, target_sum+1))\n\nassert f(g()) == True\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 74,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum=200) -> bool:\n    \"\"\"Check if there exists a subset of numbers from the list whose sum is greater than the target_sum\"\"\"\n    n = len(arr)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[n][target_sum]",
        "solution_func": "def g(target_sum=200):\n    return list(range(1, target_sum+1))",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum=75) -> bool:\n    \"\"\"Check if there exists a subset of numbers from the list whose sum is equal to the target_sum\"\"\"\n    n = len(arr)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[n][target_sum]\n\ndef g(target_sum=75):\n    return list(range(1, target_sum+1))\n\nassert f(g()) == True\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 74,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum=75) -> bool:\n    \"\"\"Check if there exists a subset of numbers from the list whose sum is equal to the target_sum\"\"\"\n    n = len(arr)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[n][target_sum]",
        "solution_func": "def g(target_sum=75):\n    return list(range(1, target_sum+1))",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: int, a=7, b=3) -> bool:\n    \"\"\"Check if the difference between x and the sum of a and b is greater than x\"\"\"\n    return abs(x - (a + b)) > x\n\ndef g(a=7, b=3):\n    return a + b\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 74,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=7, b=3) -> bool:\n    \"\"\"Check if the difference between x and the sum of a and b is greater than x\"\"\"\n    return abs(x - (a + b)) > x",
        "solution_func": "def g(a=7, b=3):\n    return a + b",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: int, a=10, b=2) -> bool:\n    \"\"\"Check if the absolute difference between x and the division of a and b is equal to x\"\"\"\n    return abs(x - (a / b)) == x\n\ndef g(a=10, b=2):\n    return a / b\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 74,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=10, b=2) -> bool:\n    \"\"\"Check if the absolute difference between x and the division of a and b is equal to x\"\"\"\n    return abs(x - (a / b)) == x",
        "solution_func": "def g(a=10, b=2):\n    return a / b",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=4, b=4) -> bool:\n    \"\"\"Check if the sum of x and the product of a and b is greater than x\"\"\"\n    return (x + (a * b)) > x\n\ndef g(a=4, b=4):\n    return a * b\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 74,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=4, b=4) -> bool:\n    \"\"\"Check if the sum of x and the product of a and b is greater than x\"\"\"\n    return (x + (a * b)) > x",
        "solution_func": "def g(a=4, b=4):\n    return a * b",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Find a string that contains all the substrings in any order\"\"\"\n    return all((sub in s for sub in substrings))\ndef g(substrings=['apple', 'banana', 'cherry']):\n    return ''.join(substrings)\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 74,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Find a string that contains all the substrings in any order\"\"\"\n    return all((sub in s for sub in substrings))",
        "solution_func": "def g(substrings=['apple', 'banana', 'cherry']):\n    return ''.join(substrings)",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=20, b=30, lower_bound=100) -> bool:\n    \"\"\"Check if the sum of two numbers is divisible by n, where the two numbers are within a given range.\"\"\"\n    return ((a + b) % n == 0) and (n >= lower_bound)\ndef g(a=20, b=30, lower_bound=100):\n    return (a + b) // 2\nassert f(g())\n",
        "emb": null,
        "idx_generation": 75,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=20, b=30, lower_bound=100) -> bool:\n    \"\"\"Check if the sum of two numbers is divisible by n, where the two numbers are within a given range.\"\"\"\n    return ((a + b) % n == 0) and (n >= lower_bound)",
        "solution_func": "def g(a=20, b=30, lower_bound=100):\n    return (a + b) // 2",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, parts=['I', 'love', 'coding', 'in', 'Python'], string='I-love-coding-in-Python') -> bool:\n    \"\"\"Find a separator that when used to join a given list of strings gives a certain result.\"\"\"\n    return x.join(parts) == string\ndef g(parts=['I', 'love', 'coding', 'in', 'Python'], string='I-love-coding-in-Python'):\n    return '-'\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 75,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, parts=['I', 'love', 'coding', 'in', 'Python'], string='I-love-coding-in-Python') -> bool:\n    \"\"\"Find a separator that when used to join a given list of strings gives a certain result.\"\"\"\n    return x.join(parts) == string",
        "solution_func": "def g(parts=['I', 'love', 'coding', 'in', 'Python'], string='I-love-coding-in-Python'):\n    return '-'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], n=2) -> bool:\n    \"\"\"Check if there are exactly n prime numbers in the list.\"\"\"\n    primes = [num for num in li if is_prime(num)]\n    return len(primes) == n\n\ndef g(n=2):\n    return [2, 3, 4, 5, 6, 7] + [1] * (n - 2)\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 75,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], n=2) -> bool:\n    \"\"\"Check if there are exactly n prime numbers in the list.\"\"\"\n    primes = [num for num in li if is_prime(num)]\n    return len(primes) == n",
        "solution_func": "def g(n=2):\n    return [2, 3, 4, 5, 6, 7] + [1] * (n - 2)\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: float, a=114514) -> bool:\n    \"\"\"Find a number that when added to its square equals a.\"\"\"\n    return abs(x + x ** 2 - a) < 10 ** (-3)\ndef g(a=114514):\n    return (1 - 2 * a) ** 0.5\nassert f(g())\n",
        "emb": null,
        "idx_generation": 75,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: float, a=114514) -> bool:\n    \"\"\"Find a number that when added to its square equals a.\"\"\"\n    return abs(x + x ** 2 - a) < 10 ** (-3)",
        "solution_func": "def g(a=114514):\n    return (1 - 2 * a) ** 0.5",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=123456789) -> bool:\n    \"\"\"Find a number that when multiplied by 3 and then divided by 2 equals a.\"\"\"\n    return abs((3 * x) / 2 - a) < 10 ** (-3)\ndef g(a=123456789):\n    return (2 * a) / 3\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 75,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=123456789) -> bool:\n    \"\"\"Find a number that when multiplied by 3 and then divided by 2 equals a.\"\"\"\n    return abs((3 * x) / 2 - a) < 10 ** (-3)",
        "solution_func": "def g(a=123456789):\n    return (2 * a) / 3",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: float, a=999999999) -> bool:\n    \"\"\"Find a number that when squared is greater than a.\"\"\"\n    return x ** 2 > a\ndef g(a=999999999):\n    return (a + 1) ** 0.5\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 75,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: float, a=999999999) -> bool:\n    \"\"\"Find a number that when squared is greater than a.\"\"\"\n    return x ** 2 > a",
        "solution_func": "def g(a=999999999):\n    return (a + 1) ** 0.5",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the sum of any three numbers in the list nums is equal to n.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == n:\n                    return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g(), n=10)\n",
        "emb": null,
        "idx_generation": 75,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the sum of any three numbers in the list nums is equal to n.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == n:\n                    return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list arr whose sum is equal to the target.\"\"\"\n    num_set = set()\n    for num in arr:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(arr: List[int]):\n    return arr\n\nassert f(g([1, 2, 3, 4, 5]), target=9)\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 75,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list arr whose sum is equal to the target.\"\"\"\n    num_set = set()\n    for num in arr:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False",
        "solution_func": "def g(arr: List[int]):\n    return arr",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='') -> bool:\n    \"\"\"Check if any word in the list words starts with the given prefix.\"\"\"\n    for word in words:\n        if word.startswith(prefix):\n            return True\n    return False\n\ndef g(words: List[str]):\n    return words\n\nassert f(g(['apple', 'banana', 'cherry']), prefix='b')\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 75,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], prefix='') -> bool:\n    \"\"\"Check if any word in the list words starts with the given prefix.\"\"\"\n    for word in words:\n        if word.startswith(prefix):\n            return True\n    return False",
        "solution_func": "def g(words: List[str]):\n    return words",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list whose product is equal to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        if target % num == 0 and target // num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[2, 4, 6, 8, 10, 12, 14, 16]):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 75,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list whose product is equal to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        if target % num == 0 and target // num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(nums=[2, 4, 6, 8, 10, 12, 14, 16]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, result=24) -> bool:\n    \"\"\"Check if it is possible to obtain the result by performing arithmetic operations on the digits of n\"\"\"\n    digits = [int(d) for d in str(n)]\n    return evaluate_expression(digits, result)\n\ndef g(result=24):\n    return 1234\n\ndef evaluate_expression(digits, result):\n    n = len(digits)\n    if n == 1:\n        return digits[0] == result\n    operators = ['+', '-', '*', '/']\n    for i in range(n):\n        for j in range(i+1, n):\n            a = digits[i]\n            b = digits[j]\n            remaining = [digits[k] for k in range(n) if k != i and k != j]\n            for op in operators:\n                if op == '+':\n                    current_result = a + b\n                elif op == '-':\n                    current_result = a - b\n                elif op == '*':\n                    current_result = a * b\n                elif op == '/':\n                    if b != 0:\n                        current_result = a / b\n                    else:\n                        continue\n                if evaluate_expression([current_result] + remaining, result):\n                    return True\n                if op == '/' and b != 0 and evaluate_expression([current_result] + remaining, math.floor(result)):\n                    return True\n    return False\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 76,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, result=24) -> bool:\n    \"\"\"Check if it is possible to obtain the result by performing arithmetic operations on the digits of n\"\"\"\n    digits = [int(d) for d in str(n)]\n    return evaluate_expression(digits, result)",
        "solution_func": "def g(result=24):\n    return 1234\n\ndef evaluate_expression(digits, result):\n    n = len(digits)\n    if n == 1:\n        return digits[0] == result\n    operators = ['+', '-', '*', '/']\n    for i in range(n):\n        for j in range(i+1, n):\n            a = digits[i]\n            b = digits[j]\n            remaining = [digits[k] for k in range(n) if k != i and k != j]\n            for op in operators:\n                if op == '+':\n                    current_result = a + b\n                elif op == '-':\n                    current_result = a - b\n                elif op == '*':\n                    current_result = a * b\n                elif op == '/':\n                    if b != 0:\n                        current_result = a / b\n                    else:\n                        continue\n                if evaluate_expression([current_result] + remaining, result):\n                    return True\n                if op == '/' and b != 0 and evaluate_expression([current_result] + remaining, math.floor(result)):\n                    return True\n    return False",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target_sum=100) -> bool:\n    \"\"\"Find a subset of numbers from 1 to n whose sum is equal to the target_sum\"\"\"\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if i > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - i]\n    return dp[n][target_sum]\n\ndef g(target_sum=100):\n    return 5050\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 76,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, target_sum=100) -> bool:\n    \"\"\"Find a subset of numbers from 1 to n whose sum is equal to the target_sum\"\"\"\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if i > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - i]\n    return dp[n][target_sum]",
        "solution_func": "def g(target_sum=100):\n    return 5050",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, x: int, y: int) -> bool:\n    \"\"\"Check if n can be expressed as the sum of x and y, where x and y are perfect squares\"\"\"\n    perfect_squares = [i*i for i in range(1, int(n**0.5) + 1)]\n    for square in perfect_squares:\n        if n - square in perfect_squares:\n            return True\n    return False\n\ndef g(x=4, y=9):\n    return x + y\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 76,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, x: int, y: int) -> bool:\n    \"\"\"Check if n can be expressed as the sum of x and y, where x and y are perfect squares\"\"\"\n    perfect_squares = [i*i for i in range(1, int(n**0.5) + 1)]\n    for square in perfect_squares:\n        if n - square in perfect_squares:\n            return True\n    return False",
        "solution_func": "def g(x=4, y=9):\n    return x + y",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if there exists a path from the top-left corner to the bottom-right corner of the matrix,\n    such that the sum of the values along the path is equal to the target\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    dp = [[False] * n for _ in range(m)]\n    dp[0][0] = matrix[0][0] == target\n\n    for i in range(1, m):\n        dp[i][0] = dp[i-1][0] or matrix[i][0] == target\n\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] or matrix[0][j] == target\n\n    for i in range(1, m):\n        for j in range(1, n):\n            if matrix[i][j] > target:\n                dp[i][j] = False\n            else:\n                dp[i][j] = dp[i-1][j] or dp[i][j-1] or matrix[i][j] == target\n\n    return dp[m-1][n-1]\n\ndef g(target=10):\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    return matrix\n\nassert f(g()) == True\n",
        "emb": null,
        "idx_generation": 76,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if there exists a path from the top-left corner to the bottom-right corner of the matrix,\n    such that the sum of the values along the path is equal to the target\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    dp = [[False] * n for _ in range(m)]\n    dp[0][0] = matrix[0][0] == target\n\n    for i in range(1, m):\n        dp[i][0] = dp[i-1][0] or matrix[i][0] == target\n\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] or matrix[0][j] == target\n\n    for i in range(1, m):\n        for j in range(1, n):\n            if matrix[i][j] > target:\n                dp[i][j] = False\n            else:\n                dp[i][j] = dp[i-1][j] or dp[i][j-1] or matrix[i][j] == target\n\n    return dp[m-1][n-1]",
        "solution_func": "def g(target=10):\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=16) -> bool:\n    \"\"\"Check if there exists a partition of the list into two subsets, such that the difference between the sum\n    of the subsets is equal to the target\"\"\"\n    total_sum = sum(nums)\n    if total_sum % 2 != 0:\n        return False\n\n    subset_sum = total_sum // 2\n    n = len(nums)\n    dp = [[False] * (subset_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, subset_sum + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][subset_sum] and abs(total_sum - 2 * subset_sum) == target\n\ndef g(target=16):\n    nums = [2, 4, 6, 8]\n    return nums\n\nassert f(g()) == True\n",
        "emb": null,
        "idx_generation": 76,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=16) -> bool:\n    \"\"\"Check if there exists a partition of the list into two subsets, such that the difference between the sum\n    of the subsets is equal to the target\"\"\"\n    total_sum = sum(nums)\n    if total_sum % 2 != 0:\n        return False\n\n    subset_sum = total_sum // 2\n    n = len(nums)\n    dp = [[False] * (subset_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, subset_sum + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][subset_sum] and abs(total_sum - 2 * subset_sum) == target",
        "solution_func": "def g(target=16):\n    nums = [2, 4, 6, 8]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a subsequence of the list whose sum is equal to the target\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=5):\n    nums = [1, 2, 3, 4]\n    return nums\n\nassert f(g()) == True\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 76,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a subsequence of the list whose sum is equal to the target\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]",
        "solution_func": "def g(target=5):\n    nums = [1, 2, 3, 4]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(words: List[str], target_word=\"PYTHON\") -> bool:\n    \"\"\"Check if a target word can be formed by concatenating words from a given list. Each word can be used only once.\n    Return True if the target word can be formed, False otherwise.\"\"\"\n    def is_valid(current_word, remaining_words):\n        if current_word == target_word:\n            return True\n        for word in remaining_words:\n            if target_word.startswith(current_word + word):\n                if is_valid(current_word + word, [w for w in remaining_words if w != word]):\n                    return True\n        return False\n    return is_valid(\"\", words)\ndef g(words: List[str], target_word=\"PYTHON\"):\n    def shuffle_word(word):\n        word = list(word)\n        random.shuffle(word)\n        return ''.join(word)\n    words = list(set(words))\n    words.sort()\n    shuffled_words = [shuffle_word(word) for word in words]\n    return shuffled_words\nassert f(g([\"P\", \"Y\", \"T\", \"H\", \"O\", \"N\"]))\n\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 76,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(words: List[str], target_word=\"PYTHON\") -> bool:\n    \"\"\"Check if a target word can be formed by concatenating words from a given list. Each word can be used only once.\n    Return True if the target word can be formed, False otherwise.\"\"\"\n    def is_valid(current_word, remaining_words):\n        if current_word == target_word:\n            return True\n        for word in remaining_words:\n            if target_word.startswith(current_word + word):\n                if is_valid(current_word + word, [w for w in remaining_words if w != word]):\n                    return True\n        return False\n    return is_valid(\"\", words)",
        "solution_func": "def g(words: List[str], target_word=\"PYTHON\"):\n    def shuffle_word(word):\n        word = list(word)\n        random.shuffle(word)\n        return ''.join(word)\n    words = list(set(words))\n    words.sort()\n    shuffled_words = [shuffle_word(word) for word in words]\n    return shuffled_words",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if it is possible to find two numbers in a given list that sum up to a target sum.\n    Return True if such pair exists, False otherwise.\"\"\"\n    numbers.sort()\n    left = 0\n    right = len(numbers) - 1\n    while left < right:\n        current_sum = numbers[left] + numbers[right]\n        if current_sum == target_sum:\n            return True\n        elif current_sum < target_sum:\n            left += 1\n        else:\n            right -= 1\n    return False\ndef g(numbers: List[int], target_sum=10):\n    numbers = list(set(numbers))\n    return numbers\nassert f(g([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 76,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if it is possible to find two numbers in a given list that sum up to a target sum.\n    Return True if such pair exists, False otherwise.\"\"\"\n    numbers.sort()\n    left = 0\n    right = len(numbers) - 1\n    while left < right:\n        current_sum = numbers[left] + numbers[right]\n        if current_sum == target_sum:\n            return True\n        elif current_sum < target_sum:\n            left += 1\n        else:\n            right -= 1\n    return False",
        "solution_func": "def g(numbers: List[int], target_sum=10):\n    numbers = list(set(numbers))\n    return numbers",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target_row_sum=10) -> bool:\n    \"\"\"Check if it is possible to find a row in a given matrix whose sum is equal to the target row sum.\n    Return True if such row exists, False otherwise.\"\"\"\n    for row in matrix:\n        if sum(row) == target_row_sum:\n            return True\n    return False\ndef g(matrix: List[List[int]], target_row_sum=10):\n    def shuffle_row(row):\n        row = list(row)\n        random.shuffle(row)\n        return row\n    shuffled_matrix = [shuffle_row(row) for row in matrix]\n    return shuffled_matrix\nassert f(g([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 15))\n\n",
        "emb": null,
        "idx_generation": 76,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target_row_sum=10) -> bool:\n    \"\"\"Check if it is possible to find a row in a given matrix whose sum is equal to the target row sum.\n    Return True if such row exists, False otherwise.\"\"\"\n    for row in matrix:\n        if sum(row) == target_row_sum:\n            return True\n    return False",
        "solution_func": "def g(matrix: List[List[int]], target_row_sum=10):\n    def shuffle_row(row):\n        row = list(row)\n        random.shuffle(row)\n        return row\n    shuffled_matrix = [shuffle_row(row) for row in matrix]\n    return shuffled_matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list whose multiplication is equal to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target / num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[2, 4, 6, 8, 10, 12, 14, 16]):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 76,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list whose multiplication is equal to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target / num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(nums=[2, 4, 6, 8, 10, 12, 14, 16]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 77,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if the list contains three numbers whose sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 77,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if the list contains three numbers whose sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=6) -> bool:\n    \"\"\"Find a pair of numbers in the list that multiply to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 77,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=6) -> bool:\n    \"\"\"Find a pair of numbers in the list that multiply to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=3, lower=-1000, seq=[10, -20, 30, -40, 50, 60, -70, 80]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is greater than or equal to lower\"\"\"\n    total = sum(seq[start:start+k])\n    return total >= lower\ndef g(k=3, lower=-1000, seq=[10, -20, 30, -40, 50, 60, -70, 80]):\n    def seq_sum(start):\n        return sum(seq[start:start+k])\n    return max(range(len(seq) - k + 1), key=seq_sum)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 77,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(start: int, k=3, lower=-1000, seq=[10, -20, 30, -40, 50, 60, -70, 80]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is greater than or equal to lower\"\"\"\n    total = sum(seq[start:start+k])\n    return total >= lower",
        "solution_func": "def g(k=3, lower=-1000, seq=[10, -20, 30, -40, 50, 60, -70, 80]):\n    def seq_sum(start):\n        return sum(seq[start:start+k])\n    return max(range(len(seq) - k + 1), key=seq_sum)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=4, lower=-100000, seq=[2, 4, 6, 8, 10, 12, 14, 16]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose difference is greater than or equal to lower\"\"\"\n    diff = max(seq[start:start+k]) - min(seq[start:start+k])\n    return diff >= lower\ndef g(k=4, lower=-100000, seq=[2, 4, 6, 8, 10, 12, 14, 16]):\n    def seq_diff(start):\n        return max(seq[start:start+k]) - min(seq[start:start+k])\n    return max(range(len(seq) - k + 1), key=seq_diff)\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 77,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(start: int, k=4, lower=-100000, seq=[2, 4, 6, 8, 10, 12, 14, 16]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose difference is greater than or equal to lower\"\"\"\n    diff = max(seq[start:start+k]) - min(seq[start:start+k])\n    return diff >= lower",
        "solution_func": "def g(k=4, lower=-100000, seq=[2, 4, 6, 8, 10, 12, 14, 16]):\n    def seq_diff(start):\n        return max(seq[start:start+k]) - min(seq[start:start+k])\n    return max(range(len(seq) - k + 1), key=seq_diff)",
        "map_ix": [
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=5, lower=1000, seq=[-1, -2, -3, -4, -5, -6, -7, -8]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is less than or equal to lower\"\"\"\n    total = sum(seq[start:start+k])\n    return total <= lower\ndef g(k=5, lower=1000, seq=[-1, -2, -3, -4, -5, -6, -7, -8]):\n    def seq_sum(start):\n        return sum(seq[start:start+k])\n    return max(range(len(seq) - k + 1), key=seq_sum)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 77,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(start: int, k=5, lower=1000, seq=[-1, -2, -3, -4, -5, -6, -7, -8]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is less than or equal to lower\"\"\"\n    total = sum(seq[start:start+k])\n    return total <= lower",
        "solution_func": "def g(k=5, lower=1000, seq=[-1, -2, -3, -4, -5, -6, -7, -8]):\n    def seq_sum(start):\n        return sum(seq[start:start+k])\n    return max(range(len(seq) - k + 1), key=seq_sum)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=987654321) -> bool:\n    \"\"\"Find a number that when multiplied by 4 and then divided by 3 equals a.\"\"\"\n    return abs((4 * x) / 3 - a) < 10 ** (-3)\ndef g(a=987654321):\n    return (3 * a) / 4\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 77,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=987654321) -> bool:\n    \"\"\"Find a number that when multiplied by 4 and then divided by 3 equals a.\"\"\"\n    return abs((4 * x) / 3 - a) < 10 ** (-3)",
        "solution_func": "def g(a=987654321):\n    return (3 * a) / 4",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=246813579) -> bool:\n    \"\"\"Find a number that when multiplied by 5 and then divided by 4 equals a.\"\"\"\n    return abs((5 * x) / 4 - a) < 10 ** (-3)\ndef g(a=246813579):\n    return (4 * a) / 5\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 77,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=246813579) -> bool:\n    \"\"\"Find a number that when multiplied by 5 and then divided by 4 equals a.\"\"\"\n    return abs((5 * x) / 4 - a) < 10 ** (-3)",
        "solution_func": "def g(a=246813579):\n    return (4 * a) / 5",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=1357913579) -> bool:\n    \"\"\"Find a number that when multiplied by 6 and then divided by 5 equals a.\"\"\"\n    return abs((6 * x) / 5 - a) < 10 ** (-3)\ndef g(a=1357913579):\n    return (5 * a) / 6\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 77,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=1357913579) -> bool:\n    \"\"\"Find a number that when multiplied by 6 and then divided by 5 equals a.\"\"\"\n    return abs((6 * x) / 5 - a) < 10 ** (-3)",
        "solution_func": "def g(a=1357913579):\n    return (5 * a) / 6",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    return any(nums[i]+nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 77,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    return any(nums[i]+nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Determine if the given list contains a subsequence that sums up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]\n\ndef g():\n    nums = [2, 4, 6, 8, 10]\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 78,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Determine if the given list contains a subsequence that sums up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]",
        "solution_func": "def g():\n    nums = [2, 4, 6, 8, 10]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Determine if the given list contains a subsequence that sums up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]\n\ndef g():\n    nums = [3, 6, 9, 12, 15]\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 78,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Determine if the given list contains a subsequence that sums up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]",
        "solution_func": "def g():\n    nums = [3, 6, 9, 12, 15]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Determine if the given list contains a subsequence that sums up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]\n\ndef g():\n    nums = [4, 8, 12, 16, 20]\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 78,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Determine if the given list contains a subsequence that sums up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]",
        "solution_func": "def g():\n    nums = [4, 8, 12, 16, 20]\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=100) -> bool:\n    \"\"\"Check if a number is divisible by the sum of its digits\"\"\"\n    return n % sum(int(digit) for digit in str(n)) == 0\ndef g(m=100):\n    return m * 123\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 78,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=100) -> bool:\n    \"\"\"Check if a number is divisible by the sum of its digits\"\"\"\n    return n % sum(int(digit) for digit in str(n)) == 0",
        "solution_func": "def g(m=100):\n    return m * 123",
        "map_ix": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string contains at least n consecutive vowels\"\"\"\n    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False\ndef g(n=3):\n    return 'aaeeii' + 'o' * (n - 6)\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 78,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string contains at least n consecutive vowels\"\"\"\n    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False",
        "solution_func": "def g(n=3):\n    return 'aaeeii' + 'o' * (n - 6)",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n=5) -> bool:\n    \"\"\"Check if there are at least n consecutive numbers in a list\"\"\"\n    return any(arr[i] == arr[i-1] + 1 == arr[i-2] + 2 == arr[i-3] + 3 == arr[i-4] + 4 for i in range(n, len(arr)))\ndef g(n=5):\n    return [i for i in range(n-1)] + [i for i in range(n)]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 78,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], n=5) -> bool:\n    \"\"\"Check if there are at least n consecutive numbers in a list\"\"\"\n    return any(arr[i] == arr[i-1] + 1 == arr[i-2] + 2 == arr[i-3] + 3 == arr[i-4] + 4 for i in range(n, len(arr)))",
        "solution_func": "def g(n=5):\n    return [i for i in range(n-1)] + [i for i in range(n)]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=4, c=6) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])\ndef g(a=3, b=4, c=6):\n    return -a + sum([b * i for i in range(c)])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 78,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=3, b=4, c=6) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])",
        "solution_func": "def g(a=3, b=4, c=6):\n    return -a + sum([b * i for i in range(c)])",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=4, c=6) -> bool:\n    \"\"\"Find n such that n - a == b * (the sum of the first c integers)\"\"\"\n    return n - a == sum([b * i for i in range(c)])\ndef g(a=3, b=4, c=6):\n    return a + sum([b * i for i in range(c)])\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 78,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=3, b=4, c=6) -> bool:\n    \"\"\"Find n such that n - a == b * (the sum of the first c integers)\"\"\"\n    return n - a == sum([b * i for i in range(c)])",
        "solution_func": "def g(a=3, b=4, c=6):\n    return a + sum([b * i for i in range(c)])",
        "map_ix": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=4, c=6) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])\ndef g(a=3, b=4, c=6):\n    return -a + sum([b * i for i in range(c+1)])\nassert f(g())\n",
        "emb": null,
        "idx_generation": 78,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=3, b=4, c=6) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])",
        "solution_func": "def g(a=3, b=4, c=6):\n    return -a + sum([b * i for i in range(c+1)])",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, numbers: List[int] = [1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find n such that n is the sum of all elements in the list\"\"\"\n    return n == sum(numbers)\n\ndef g(numbers: List[int] = [1, 2, 3, 4, 5]):\n    n = sum(numbers)\n    return n\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 78,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(n: int, numbers: List[int] = [1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find n such that n is the sum of all elements in the list\"\"\"\n    return n == sum(numbers)",
        "solution_func": "def g(numbers: List[int] = [1, 2, 3, 4, 5]):\n    n = sum(numbers)\n    return n",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in nums that multiply to target.\"\"\"\n    for i in range(len(nums)-1):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\ndef g(target=0):\n    nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 79,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in nums that multiply to target.\"\"\"\n    for i in range(len(nums)-1):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], length=5) -> bool:\n    \"\"\"Check if there is a string in strings that has length greater than or equal to the specified length.\"\"\"\n    for string in strings:\n        if len(string) >= length:\n            return True\n    return False\ndef g(length=5):\n    strings = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"honeydew\", \"indigo\"]\n    return strings\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 79,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(strings: List[str], length=5) -> bool:\n    \"\"\"Check if there is a string in strings that has length greater than or equal to the specified length.\"\"\"\n    for string in strings:\n        if len(string) >= length:\n            return True\n    return False",
        "solution_func": "def g(length=5):\n    strings = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"honeydew\", \"indigo\"]\n    return strings",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in nums that add up to target.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=10):\n    nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n    return nums\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 79,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in nums that add up to target.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=10):\n    nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=8) -> bool:\n    \"\"\"Find a pair of numbers from the list whose sum is equal to the target\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[2, 4, 6, 3, 1, 5]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 79,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=8) -> bool:\n    \"\"\"Find a pair of numbers from the list whose sum is equal to the target\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(nums=[2, 4, 6, 3, 1, 5]):\n    return nums",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, factors=[2, 3, 5]) -> bool:\n    \"\"\"Check if a given number is a product of a given list of prime factors\"\"\"\n    for factor in factors:\n        while n % factor == 0:\n            n //= factor\n    return n == 1\n\ndef g(factors=[2, 3, 5]):\n    product = 1\n    for factor in factors:\n        product *= factor\n    return product\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 79,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, factors=[2, 3, 5]) -> bool:\n    \"\"\"Check if a given number is a product of a given list of prime factors\"\"\"\n    for factor in factors:\n        while n % factor == 0:\n            n //= factor\n    return n == 1",
        "solution_func": "def g(factors=[2, 3, 5]):\n    product = 1\n    for factor in factors:\n        product *= factor\n    return product",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(string: str, substr='python') -> bool:\n    \"\"\"Check if a given substring is a palindrome within a string\"\"\"\n    return substr == substr[::-1] and substr in string\n\ndef g(substr='python'):\n    return 'not' + substr + 'not'\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 79,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substr='python') -> bool:\n    \"\"\"Check if a given substring is a palindrome within a string\"\"\"\n    return substr == substr[::-1] and substr in string",
        "solution_func": "def g(substr='python'):\n    return 'not' + substr + 'not'",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if a matrix is diagonally dominant of size n x n\"\"\"\n    return all((abs(matrix[i][i]) > sum(abs(matrix[i][j]) for j in range(n) if i != j)) for i in range(n))\ndef g(n=3):\n    return [[10, 2, 3], [4, 15, 6], [7, 8, 20]]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 79,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if a matrix is diagonally dominant of size n x n\"\"\"\n    return all((abs(matrix[i][i]) > sum(abs(matrix[i][j]) for j in range(n) if i != j)) for i in range(n))",
        "solution_func": "def g(n=3):\n    return [[10, 2, 3], [4, 15, 6], [7, 8, 20]]",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=4) -> bool:\n    \"\"\"Check if a matrix is upper triangular of size n x n\"\"\"\n    return all((matrix[i][j] == 0) for i in range(n) for j in range(i+1, n))\ndef g(n=4):\n    return [[1, 2, 3, 4], [0, 5, 6, 7], [0, 0, 8, 9], [0, 0, 0, 10]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 79,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=4) -> bool:\n    \"\"\"Check if a matrix is upper triangular of size n x n\"\"\"\n    return all((matrix[i][j] == 0) for i in range(n) for j in range(i+1, n))",
        "solution_func": "def g(n=4):\n    return [[1, 2, 3, 4], [0, 5, 6, 7], [0, 0, 8, 9], [0, 0, 0, 10]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if a matrix is a magic square of size n x n\"\"\"\n    target_sum = n * (n**2 + 1) // 2\n    row_sums = [sum(matrix[i]) for i in range(n)]\n    col_sums = [sum(matrix[i][j] for i in range(n)) for j in range(n)]\n    diag_sum_1 = sum(matrix[i][i] for i in range(n))\n    diag_sum_2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all((row_sums[i] == target_sum and col_sums[i] == target_sum) for i in range(n)) and diag_sum_1 == diag_sum_2 == target_sum\ndef g(n=3):\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 79,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if a matrix is a magic square of size n x n\"\"\"\n    target_sum = n * (n**2 + 1) // 2\n    row_sums = [sum(matrix[i]) for i in range(n)]\n    col_sums = [sum(matrix[i][j] for i in range(n)) for j in range(n)]\n    diag_sum_1 = sum(matrix[i][i] for i in range(n))\n    diag_sum_2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all((row_sums[i] == target_sum and col_sums[i] == target_sum) for i in range(n)) and diag_sum_1 == diag_sum_2 == target_sum",
        "solution_func": "def g(n=3):\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Find three numbers in the list 'nums' that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 79,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Find three numbers in the list 'nums' that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that multiply up to the target value.\"\"\"\n    return any((numbers[i] * numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\n\ndef g(target=20):\n    numbers = [2, 4, 5, 10, 12]\n    return numbers\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 80,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that multiply up to the target value.\"\"\"\n    return any((numbers[i] * numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))",
        "solution_func": "def g(target=20):\n    numbers = [2, 4, 5, 10, 12]\n    return numbers",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], substring=\"apple\") -> bool:\n    \"\"\"Check if any word in the list contains the given substring.\"\"\"\n    return any((substring in word) for word in words)\n\ndef g(substring=\"apple\"):\n    words = [\"pineapple\", \"banana\", \"orange\", \"grape\"]\n    return words\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 80,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], substring=\"apple\") -> bool:\n    \"\"\"Check if any word in the list contains the given substring.\"\"\"\n    return any((substring in word) for word in words)",
        "solution_func": "def g(substring=\"apple\"):\n    words = [\"pineapple\", \"banana\", \"orange\", \"grape\"]\n    return words",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(prices: List[float], threshold=1000.0) -> bool:\n    \"\"\"Check if the total price of all items is above the threshold.\"\"\"\n    return sum(prices) > threshold\n\ndef g(threshold=1000.0):\n    prices = [250.0, 350.0, 400.0, 200.0]\n    return prices\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 80,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(prices: List[float], threshold=1000.0) -> bool:\n    \"\"\"Check if the total price of all items is above the threshold.\"\"\"\n    return sum(prices) > threshold",
        "solution_func": "def g(threshold=1000.0):\n    prices = [250.0, 350.0, 400.0, 200.0]\n    return prices",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=7) -> bool:\n    \"\"\"Check if there are two numbers in nums that sum up to target.\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\ndef g(target=7):\n    nums = [1, 2, 3, 4, 5, 6]\n    return nums\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 80,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=7) -> bool:\n    \"\"\"Check if there are two numbers in nums that sum up to target.\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False",
        "solution_func": "def g(target=7):\n    nums = [1, 2, 3, 4, 5, 6]\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Check if there is a row in the matrix where the sum of all elements is equal to the target.\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False\ndef g(target=15):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 80,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Check if there is a row in the matrix where the sum of all elements is equal to the target.\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False",
        "solution_func": "def g(target=15):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are three numbers in nums that sum up to target.\"\"\"\n    nums = sorted(nums)\n    for i in range(len(nums)-2):\n        left = i + 1\n        right = len(nums) - 1\n        while left < right:\n            curr_sum = nums[i] + nums[left] + nums[right]\n            if curr_sum == target:\n                return True\n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 80,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are three numbers in nums that sum up to target.\"\"\"\n    nums = sorted(nums)\n    for i in range(len(nums)-2):\n        left = i + 1\n        right = len(nums) - 1\n        while left < right:\n            curr_sum = nums[i] + nums[left] + nums[right]\n            if curr_sum == target:\n                return True\n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False",
        "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=6, n=6) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=6, n=6):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 80,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=6, n=6) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]",
        "solution_func": "def g(m=6, n=6):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=4, n=4) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=4, n=4):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "emb": null,
        "idx_generation": 80,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=4, n=4) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]",
        "solution_func": "def g(m=4, n=4):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=3, n=3) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=3, n=3):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "emb": null,
        "idx_generation": 80,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=3, n=3) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]",
        "solution_func": "def g(m=3, n=3):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=11) -> bool:\n    \"\"\"Check if the sum of n and the product of a and b is divisible by n\"\"\"\n    return (n + (a * b)) % n == 0\n\ndef g(a=5, b=11):\n    return a * b\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 80,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=5, b=11) -> bool:\n    \"\"\"Check if the sum of n and the product of a and b is divisible by n\"\"\"\n    return (n + (a * b)) % n == 0",
        "solution_func": "def g(a=5, b=11):\n    return a * b",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            1,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that adds up to the target sum\"\"\"\n    return any(numbers[i] + numbers[j] == target_sum for i in range(len(numbers)) for j in range(i + 1, len(numbers)))\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 81,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that adds up to the target sum\"\"\"\n    return any(numbers[i] + numbers[j] == target_sum for i in range(len(numbers)) for j in range(i + 1, len(numbers)))",
        "solution_func": "def g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find if there exists a row in the matrix that adds up to the target sum\"\"\"\n    return any(sum(row) == target for row in matrix)\ndef g(target=0):\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 81,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find if there exists a row in the matrix that adds up to the target sum\"\"\"\n    return any(sum(row) == target for row in matrix)",
        "solution_func": "def g(target=0):\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_length=5) -> bool:\n    \"\"\"Find if there exists a word in the list that has the target length\"\"\"\n    return any(len(word) == target_length for word in words)\ndef g(target_length=5):\n    return [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 81,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], target_length=5) -> bool:\n    \"\"\"Find if there exists a word in the list that has the target length\"\"\"\n    return any(len(word) == target_length for word in words)",
        "solution_func": "def g(target_length=5):\n    return [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int, min_nums=2) -> bool:\n    \"\"\"Check if there are at least 'min_nums' numbers in the list that add up to the target\"\"\"\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                count += 1\n                if count >= min_nums:\n                    return True\n    return False\n\ndef g():\n    return [1, 4, 7, 3, 9, 2, 5], 10, 3\n\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 81,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int, min_nums=2) -> bool:\n    \"\"\"Check if there are at least 'min_nums' numbers in the list that add up to the target\"\"\"\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                count += 1\n                if count >= min_nums:\n                    return True\n    return False",
        "solution_func": "def g():\n    return [1, 4, 7, 3, 9, 2, 5], 10, 3",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int, k: int) -> bool:\n    \"\"\"Check if there are 'k' numbers in the list that add up to the target\"\"\"\n    if k == 0:\n        return target == 0\n    if len(nums) < k:\n        return False\n    for i in range(len(nums)):\n        if f(nums[i+1:], target-nums[i], k-1):\n            return True\n    return False\n\ndef g():\n    return [1, 4, 7, 3, 9, 2, 5], 10, 3\n\nassert f(*g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 81,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int, k: int) -> bool:\n    \"\"\"Check if there are 'k' numbers in the list that add up to the target\"\"\"\n    if k == 0:\n        return target == 0\n    if len(nums) < k:\n        return False\n    for i in range(len(nums)):\n        if f(nums[i+1:], target-nums[i], k-1):\n            return True\n    return False",
        "solution_func": "def g():\n    return [1, 4, 7, 3, 9, 2, 5], 10, 3",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"Find the two numbers in the list that add up to the target and return them\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return [nums[i], nums[j]]\n    return []\n\ndef g():\n    return [1, 4, 7, 3, 9, 2, 5], 10\n\nassert f(*g()) == [3, 7]\n",
        "emb": null,
        "idx_generation": 81,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"Find the two numbers in the list that add up to the target and return them\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return [nums[i], nums[j]]\n    return []",
        "solution_func": "def g():\n    return [1, 4, 7, 3, 9, 2, 5], 10",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=2) -> bool:\n    \"\"\"Check if a matrix is a magic square of size n x n\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all((row_sum == col_sum == diagonal_sum1 == diagonal_sum2) for row_sum, col_sum in zip(row_sums, col_sums))\ndef g(n=2):\n    return [[3, 4], [1, 6]]\nassert f(g())\n\n",
        "emb": null,
        "idx_generation": 81,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=2) -> bool:\n    \"\"\"Check if a matrix is a magic square of size n x n\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all((row_sum == col_sum == diagonal_sum1 == diagonal_sum2) for row_sum, col_sum in zip(row_sums, col_sums))",
        "solution_func": "def g(n=2):\n    return [[3, 4], [1, 6]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=4) -> bool:\n    \"\"\"Check if a matrix is a magic square of size n x n\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all((row_sum == col_sum == diagonal_sum1 == diagonal_sum2) for row_sum, col_sum in zip(row_sums, col_sums))\ndef g(n=4):\n    return [[16, 2, 3, 13], [5, 11, 10, 8], [9, 7, 6, 12], [4, 14, 15, 1]]\nassert f(g())\n\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 81,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=4) -> bool:\n    \"\"\"Check if a matrix is a magic square of size n x n\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all((row_sum == col_sum == diagonal_sum1 == diagonal_sum2) for row_sum, col_sum in zip(row_sums, col_sums))",
        "solution_func": "def g(n=4):\n    return [[16, 2, 3, 13], [5, 11, 10, 8], [9, 7, 6, 12], [4, 14, 15, 1]]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=5) -> bool:\n    \"\"\"Check if a matrix is a magic square of size n x n\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all((row_sum == col_sum == diagonal_sum1 == diagonal_sum2) for row_sum, col_sum in zip(row_sums, col_sums))\ndef g(n=5):\n    return [[17, 24, 1, 8, 15], [23, 5, 7, 14, 16], [4, 6, 13, 20, 22], [10, 12, 19, 21, 3], [11, 18, 25, 2, 9]]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 81,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=5) -> bool:\n    \"\"\"Check if a matrix is a magic square of size n x n\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all((row_sum == col_sum == diagonal_sum1 == diagonal_sum2) for row_sum, col_sum in zip(row_sums, col_sums))",
        "solution_func": "def g(n=5):\n    return [[17, 24, 1, 8, 15], [23, 5, 7, 14, 16], [4, 6, 13, 20, 22], [10, 12, 19, 21, 3], [11, 18, 25, 2, 9]]",
        "map_ix": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import *\ndef f(n: int, lst=[3, 6, 9, 12, 15], upper_bound=1000) -> bool:\n    \"\"\"Check if n is divisible by all numbers in the list and is less than or equal to the upper_bound\"\"\"\n    return all((n % i == 0 for i in lst)) and 0 < n <= upper_bound\ndef g(lst=[3, 6, 9, 12, 15], upper_bound=1000):\n    ans = 1\n    for i in lst:\n        ans *= i\n    return ans\nassert f(g())\n",
        "emb": null,
        "idx_generation": 81,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import *\ndef f(n: int, lst=[3, 6, 9, 12, 15], upper_bound=1000) -> bool:\n    \"\"\"Check if n is divisible by all numbers in the list and is less than or equal to the upper_bound\"\"\"\n    return all((n % i == 0 for i in lst)) and 0 < n <= upper_bound",
        "solution_func": "def g(lst=[3, 6, 9, 12, 15], upper_bound=1000):\n    ans = 1\n    for i in lst:\n        ans *= i\n    return ans",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Determine if the given list contains a subsequence that sums up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]\n\ndef g():\n    nums = [2, 4, 6, 8, 10, 12]\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 82,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Determine if the given list contains a subsequence that sums up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]",
        "solution_func": "def g():\n    nums = [2, 4, 6, 8, 10, 12]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Determine if the given list contains a subsequence that sums up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]\n\ndef g():\n    nums = [1, 2, 3, 4, 5, 6, 7]\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 82,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Determine if the given list contains a subsequence that sums up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]",
        "solution_func": "def g():\n    nums = [1, 2, 3, 4, 5, 6, 7]\n    return nums",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=30) -> bool:\n    \"\"\"Determine if the given list contains a subsequence that sums up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]\n\ndef g():\n    nums = [5, 10, 15, 20, 25, 30]\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 82,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=30) -> bool:\n    \"\"\"Determine if the given list contains a subsequence that sums up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]",
        "solution_func": "def g():\n    nums = [5, 10, 15, 20, 25, 30]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a given string is a palindrome with the given number of characters.\"\"\"\n    return s[:n] == s[:n][::-1]\n\ndef g(n=3):\n    return 'racecar'[:n]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 82,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a given string is a palindrome with the given number of characters.\"\"\"\n    return s[:n] == s[:n][::-1]",
        "solution_func": "def g(n=3):\n    return 'racecar'[:n]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if the given number is a multiple of m.\"\"\"\n    return n % m == 0\n\ndef g(m=10):\n    return 2 * m\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 82,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if the given number is a multiple of m.\"\"\"\n    return n % m == 0",
        "solution_func": "def g(m=10):\n    return 2 * m",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], x=5) -> bool:\n    \"\"\"Check if the given list contains the given number.\"\"\"\n    return x in nums\n\ndef g(x=5):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 82,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], x=5) -> bool:\n    \"\"\"Check if the given list contains the given number.\"\"\"\n    return x in nums",
        "solution_func": "def g(x=5):\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=432509325752352, b=672430521606764, lower_bound=1500000000) -> bool:\n    \"\"\"Check if a number n is a common multiple of both a and b, and is greater than or equal to the lower_bound\"\"\"\n    return (n % a == 0) and (n % b == 0) and (n >= lower_bound)\n\ndef g(a=432509325752352, b=672430521606764, lower_bound=1500000000):\n    m = max(a, b)\n    n = m\n    while True:\n        if (n % a == 0) and (n % b == 0):\n            return n\n        n += m\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 82,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=432509325752352, b=672430521606764, lower_bound=1500000000) -> bool:\n    \"\"\"Check if a number n is a common multiple of both a and b, and is greater than or equal to the lower_bound\"\"\"\n    return (n % a == 0) and (n % b == 0) and (n >= lower_bound)",
        "solution_func": "def g(a=432509325752352, b=672430521606764, lower_bound=1500000000):\n    m = max(a, b)\n    n = m\n    while True:\n        if (n % a == 0) and (n % b == 0):\n            return n\n        n += m",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    \"\"\"Find a path with an odd number of nodes from nodes 0 to 1 in the given digraph on vertices 0, 1,..., n.\"\"\"\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    odd_paths = {}\n    even_paths = {0: [0]}\n    n = 1\n    for _ in range(max((max(e) for e in edges)) + 1):\n        for (i, j) in edges:\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n    return even_paths.get(n)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 82,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    \"\"\"Find a path with an odd number of nodes from nodes 0 to 1 in the given digraph on vertices 0, 1,..., n.\"\"\"\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])",
        "solution_func": "def g(edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    odd_paths = {}\n    even_paths = {0: [0]}\n    n = 1\n    for _ in range(max((max(e) for e in edges)) + 1):\n        for (i, j) in edges:\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n    return even_paths.get(n)",
        "map_ix": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, words=['apple', 'banana', 'orange', 'grape', 'kiwi', 'melon'], k=6) -> bool:\n    \"\"\"Given a list of words and given an integer k, determine whether there exists two words in the list whose lengths differ by more than k.\"\"\"\n    for i in range(len(words)):\n        for j in range(i+1, len(words)):\n            if abs(len(words[i]) - len(words[j])) > k:\n                return True\n    return False\ndef g(words=['apple', 'banana', 'orange', 'grape', 'kiwi', 'melon'], k=6):\n    return words\nassert f(g())\n",
        "emb": null,
        "idx_generation": 82,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, words=['apple', 'banana', 'orange', 'grape', 'kiwi', 'melon'], k=6) -> bool:\n    \"\"\"Given a list of words and given an integer k, determine whether there exists two words in the list whose lengths differ by more than k.\"\"\"\n    for i in range(len(words)):\n        for j in range(i+1, len(words)):\n            if abs(len(words[i]) - len(words[j])) > k:\n                return True\n    return False",
        "solution_func": "def g(words=['apple', 'banana', 'orange', 'grape', 'kiwi', 'melon'], k=6):\n    return words",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' whose sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g(), target=10)\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 82,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' whose sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is sorted in non-decreasing order.\"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 83,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is sorted in non-decreasing order.\"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if all numbers in the list are perfect squares.\"\"\"\n    return all(math.isqrt(num)**2 == num for num in nums)\n\ndef g():\n    return [4, 9, 16, 25, 36]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 83,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if all numbers in the list are perfect squares.\"\"\"\n    return all(math.isqrt(num)**2 == num for num in nums)",
        "solution_func": "def g():\n    return [4, 9, 16, 25, 36]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(strings: List[str]) -> bool:\n    \"\"\"Check if all strings in the list have the same length.\"\"\"\n    return all(len(strings[i]) == len(strings[i+1]) for i in range(len(strings)-1))\n\ndef g():\n    return [\"apple\", \"banana\", \"cherry\"]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 83,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(strings: List[str]) -> bool:\n    \"\"\"Check if all strings in the list have the same length.\"\"\"\n    return all(len(strings[i]) == len(strings[i+1]) for i in range(len(strings)-1))",
        "solution_func": "def g():\n    return [\"apple\", \"banana\", \"cherry\"]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are three consecutive numbers in the list that add up to 0.\"\"\"\n    for i in range(len(nums)-2):\n        if nums[i] + nums[i+1] + nums[i+2] == 0:\n            return True\n    return False\n\ndef g():\n    return [1, 2, -3, 4, -1, -2, -4, 3]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 83,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are three consecutive numbers in the list that add up to 0.\"\"\"\n    for i in range(len(nums)-2):\n        if nums[i] + nums[i+1] + nums[i+2] == 0:\n            return True\n    return False",
        "solution_func": "def g():\n    return [1, 2, -3, 4, -1, -2, -4, 3]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 83,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"racecar\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if all the numbers in the list are divisible by 5.\"\"\"\n    return all((num % 5 == 0 for num in nums))\n\ndef g():\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 83,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if all the numbers in the list are divisible by 5.\"\"\"\n    return all((num % 5 == 0 for num in nums))",
        "solution_func": "def g():\n    return [10, 20, 30, 40, 50]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target_sum.\"\"\"\n    n = len(arr)\n    prefix_sum = 0\n    prefix_sums = set()\n    for i in range(n):\n        prefix_sum += arr[i]\n        if prefix_sum == target_sum or prefix_sum - target_sum in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\n\ndef g(target_sum=100):\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 83,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target_sum.\"\"\"\n    n = len(arr)\n    prefix_sum = 0\n    prefix_sums = set()\n    for i in range(n):\n        prefix_sum += arr[i]\n        if prefix_sum == target_sum or prefix_sum - target_sum in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False",
        "solution_func": "def g(target_sum=100):\n    return [10, 20, 30, 40, 50]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\nfrom math import factorial\n\ndef f(n: int, k: int, mod=10**9+7) -> bool:\n    \"\"\"Check if n! is divisible by k\"\"\"\n    return factorial(n) % k == 0\n\ndef g(k: int, mod=10**9+7):\n    return (k-1)%mod\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 83,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import factorial\n\ndef f(n: int, k: int, mod=10**9+7) -> bool:\n    \"\"\"Check if n! is divisible by k\"\"\"\n    return factorial(n) % k == 0",
        "solution_func": "def g(k: int, mod=10**9+7):\n    return (k-1)%mod",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    n = len(arr)\n    visited = set()\n    for i in range(n):\n        if target - arr[i] in visited:\n            return True\n        visited.add(arr[i])\n    return False\n\ndef g(target=5):\n    return [1, 2, 3, 4]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 83,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    n = len(arr)\n    visited = set()\n    for i in range(n):\n        if target - arr[i] in visited:\n            return True\n        visited.add(arr[i])\n    return False",
        "solution_func": "def g(target=5):\n    return [1, 2, 3, 4]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, target=10000) -> bool:\n    \"\"\"Check if the sum of the first n natural numbers is equal to the target number.\"\"\"\n    return sum(range(1, n+1)) == target\ndef g(target=10000):\n    return 142\nassert f(g())\n",
        "emb": null,
        "idx_generation": 83,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, target=10000) -> bool:\n    \"\"\"Check if the sum of the first n natural numbers is equal to the target number.\"\"\"\n    return sum(range(1, n+1)) == target",
        "solution_func": "def g(target=10000):\n    return 142",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to obtain the target number by adding or subtracting the numbers in the list.\"\"\"\n    return sum(numbers) == target\n\ndef g(numbers: List[int]):\n    return numbers\n\nassert f(g([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]))\n",
        "emb": null,
        "idx_generation": 84,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to obtain the target number by adding or subtracting the numbers in the list.\"\"\"\n    return sum(numbers) == target",
        "solution_func": "def g(numbers: List[int]):\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\nassert f(g([[1, 2, 3], [2, 4, 5], [3, 5, 6]]))\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 84,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True",
        "solution_func": "def g(matrix: List[List[int]]):\n    return matrix",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target.\"\"\"\n    n = len(nums)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums: List[int]):\n    return nums\n\nassert f(g([1, 2, 3, 4, 5, 6, 7, 8, 9]), target=15)\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 84,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target.\"\"\"\n    n = len(nums)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(nums: List[int]):\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array whose difference is equal to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] - arr[j] == target:\n                return True\n    return False\n\ndef g(arr=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target=0):\n    return arr\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 84,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array whose difference is equal to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] - arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(arr=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target=0):\n    return arr",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Check if the given string contains each substring in the given list exactly once.\"\"\"\n    return all((sub in s for sub in substrings)) and len(set(substrings)) == len(substrings)\n\ndef g(substrings=['apple', 'banana', 'cherry']):\n    return ''.join(substrings)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 84,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Check if the given string contains each substring in the given list exactly once.\"\"\"\n    return all((sub in s for sub in substrings)) and len(set(substrings)) == len(substrings)",
        "solution_func": "def g(substrings=['apple', 'banana', 'cherry']):\n    return ''.join(substrings)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array whose sum is equal to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr=random.choices(range(1, 100), k=10), target=100):\n    return arr\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 84,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\nfrom typing import List\n\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array whose sum is equal to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(arr=random.choices(range(1, 100), k=10), target=100):\n    return arr",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='vuzogaguzechicowejeguthemeralic', b='kybyjifidoquifwejeguthemelihitextodeju', length=11) -> bool:\n    \"\"\"Find a string of length length that is in both strings a and b\"\"\"\n    return len(s) == length and s in a and (s in b)\ndef g(a='vuzogaguzechicowejeguthemeralic', b='kybyjifidoquifwejeguthemelihitextodeju', length=11):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 84,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, a='vuzogaguzechicowejeguthemeralic', b='kybyjifidoquifwejeguthemelihitextodeju', length=11) -> bool:\n    \"\"\"Find a string of length length that is in both strings a and b\"\"\"\n    return len(s) == length and s in a and (s in b)",
        "solution_func": "def g(a='vuzogaguzechicowejeguthemeralic', b='kybyjifidoquifwejeguthemelihitextodeju', length=11):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(num_list: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers from the list that add up to the target\"\"\"\n    return any((num_list[i] + num_list[j] == target) for i in range(len(num_list)) for j in range(len(num_list)) if i != j)\ndef g(num_list=[1, 6, 3, 2, 8, 5, 4, 7, 9]):\n    return num_list\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 84,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(num_list: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers from the list that add up to the target\"\"\"\n    return any((num_list[i] + num_list[j] == target) for i in range(len(num_list)) for j in range(len(num_list)) if i != j)",
        "solution_func": "def g(num_list=[1, 6, 3, 2, 8, 5, 4, 7, 9]):\n    return num_list",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, year=2022) -> bool:\n    \"\"\"Check if the given date is in the specified year\"\"\"\n    return date.year == year\ndef g(year=2022):\n    return datetime.date(year, 1, 1)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 84,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, year=2022) -> bool:\n    \"\"\"Check if the given date is in the specified year\"\"\"\n    return date.year == year",
        "solution_func": "def g(year=2022):\n    return datetime.date(year, 1, 1)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the given list that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 84,
        "target_skills": null,
        "problem_func": "from typing import*\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the given list that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Check if the given matrix contains a row or column that sums up to the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum == target:\n            return True\n    return False\ndef g(target=15):\n    matrix = [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\n    return matrix\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 85,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Check if the given matrix contains a row or column that sums up to the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum == target:\n            return True\n    return False",
        "solution_func": "def g(target=15):\n    matrix = [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\n    return matrix",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=25) -> bool:\n    \"\"\"Check if the given matrix contains a row or column that sums up to the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum == target:\n            return True\n    return False\ndef g(target=25):\n    matrix = [[10, 5, 10], [2, 8, 5], [5, 2, 8]]\n    return matrix\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 85,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=25) -> bool:\n    \"\"\"Check if the given matrix contains a row or column that sums up to the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum == target:\n            return True\n    return False",
        "solution_func": "def g(target=25):\n    matrix = [[10, 5, 10], [2, 8, 5], [5, 2, 8]]\n    return matrix",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=30) -> bool:\n    \"\"\"Check if the given matrix contains a row or column that sums up to the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum == target:\n            return True\n    return False\ndef g(target=30):\n    matrix = [[5, 10, 15], [15, 10, 5], [10, 15, 5]]\n    return matrix\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 85,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=30) -> bool:\n    \"\"\"Check if the given matrix contains a row or column that sums up to the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum == target:\n            return True\n    return False",
        "solution_func": "def g(target=30):\n    matrix = [[5, 10, 15], [15, 10, 5], [10, 15, 5]]\n    return matrix",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target-9]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 85,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target-9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Check if there exists a subarray in the matrix that sums up to the target value\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            curr_sum = 0\n            for k in range(i, rows):\n                for l in range(j, cols):\n                    curr_sum += matrix[k][l]\n                    if curr_sum == target:\n                        return True\n    return False\ndef g(target=100):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target-21]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 85,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Check if there exists a subarray in the matrix that sums up to the target value\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            curr_sum = 0\n            for k in range(i, rows):\n                for l in range(j, cols):\n                    curr_sum += matrix[k][l]\n                    if curr_sum == target:\n                        return True\n    return False",
        "solution_func": "def g(target=100):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target-21]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(string: str, n=4) -> bool:\n    \"\"\"Check if a string contains at least n consecutive identical characters\"\"\"\n    count = 1\n    for i in range(len(string)-1):\n        if string[i] == string[i+1]:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 1\n    return False\ndef g(n=4):\n    return 'aa' + 'b' * (n - 2)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 85,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, n=4) -> bool:\n    \"\"\"Check if a string contains at least n consecutive identical characters\"\"\"\n    count = 1\n    for i in range(len(string)-1):\n        if string[i] == string[i+1]:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 1\n    return False",
        "solution_func": "def g(n=4):\n    return 'aa' + 'b' * (n - 2)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[5, 7, 2, 4, 9, 6, 1, 3, 8]) -> bool:\n    \"\"\"Find a number that is a multiple of n and is the sum of any two distinct numbers in the list nums\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if (nums[i] + nums[j]) % n == 0:\n                return True\n    return False\ndef g(nums=[5, 7, 2, 4, 9, 6, 1, 3, 8]):\n    return sum(nums)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 85,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[5, 7, 2, 4, 9, 6, 1, 3, 8]) -> bool:\n    \"\"\"Find a number that is a multiple of n and is the sum of any two distinct numbers in the list nums\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if (nums[i] + nums[j]) % n == 0:\n                return True\n    return False",
        "solution_func": "def g(nums=[5, 7, 2, 4, 9, 6, 1, 3, 8]):\n    return sum(nums)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[3, 6, 1, 4, 9, 2, 7, 5, 8]) -> bool:\n    \"\"\"Find a number in the list nums such that it is divisible by n and is not a multiple of any other number in the list\"\"\"\n    for num in nums:\n        if num % n == 0 and all(num % x != 0 for x in nums if x != num):\n            return True\n    return False\ndef g(nums=[3, 6, 1, 4, 9, 2, 7, 5, 8]):\n    return max(nums)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 85,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[3, 6, 1, 4, 9, 2, 7, 5, 8]) -> bool:\n    \"\"\"Find a number in the list nums such that it is divisible by n and is not a multiple of any other number in the list\"\"\"\n    for num in nums:\n        if num % n == 0 and all(num % x != 0 for x in nums if x != num):\n            return True\n    return False",
        "solution_func": "def g(nums=[3, 6, 1, 4, 9, 2, 7, 5, 8]):\n    return max(nums)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 3, 5, 2, 4, 6, 8, 7, 9]) -> bool:\n    \"\"\"Find a number in the list nums such that it is divisible by n and is greater than the sum of all other numbers in the list\"\"\"\n    for num in nums:\n        if num % n == 0 and num > sum(x for x in nums if x != num):\n            return True\n    return False\ndef g(nums=[1, 3, 5, 2, 4, 6, 8, 7, 9]):\n    return min(nums)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 85,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[1, 3, 5, 2, 4, 6, 8, 7, 9]) -> bool:\n    \"\"\"Find a number in the list nums such that it is divisible by n and is greater than the sum of all other numbers in the list\"\"\"\n    for num in nums:\n        if num % n == 0 and num > sum(x for x in nums if x != num):\n            return True\n    return False",
        "solution_func": "def g(nums=[1, 3, 5, 2, 4, 6, 8, 7, 9]):\n    return min(nums)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int = 50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the matrix whose sum is equal to the target\"\"\"\n    return any(a + b == target for row in matrix for a in row for b in row)\ndef g(target: int = 50):\n    return [[10, 20, 30], [5, 15, 25], [40, 50, 60]]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 85,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int = 50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the matrix whose sum is equal to the target\"\"\"\n    return any(a + b == target for row in matrix for a in row for b in row)",
        "solution_func": "def g(target: int = 50):\n    return [[10, 20, 30], [5, 15, 25], [40, 50, 60]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find a list of integers containing exactly four distinct values, such that no integer repeats\ntwice consecutively among the first twelve entries. (So the list needs to have length greater than eleven.)\"\"\"\n    return all([nums[i] != nums[i + 1] for i in range(11)]) and len(set(nums)) == 4\ndef g():\n    return list(range(4)) * 3\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 86,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find a list of integers containing exactly four distinct values, such that no integer repeats\ntwice consecutively among the first twelve entries. (So the list needs to have length greater than eleven.)\"\"\"\n    return all([nums[i] != nums[i + 1] for i in range(11)]) and len(set(nums)) == 4",
        "solution_func": "def g():\n    return list(range(4)) * 3",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Given a list of integers, find whether there exists a subsequence of length 3 such that the sum of the subsequence is equal to zero.\"\"\"\n    n = len(nums)\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if nums[i] + nums[j] + nums[k] == 0:\n                    return True\n    return False\ndef g():\n    return [1, 2, -3, 4, -1, 5]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 86,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Given a list of integers, find whether there exists a subsequence of length 3 such that the sum of the subsequence is equal to zero.\"\"\"\n    n = len(nums)\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if nums[i] + nums[j] + nums[k] == 0:\n                    return True\n    return False",
        "solution_func": "def g():\n    return [1, 2, -3, 4, -1, 5]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Given a list of integers, find whether the list contains a subsequence of length 4 that forms an arithmetic progression.\"\"\"\n    n = len(nums)\n    for i in range(n - 3):\n        diff = nums[i + 1] - nums[i]\n        if nums[i + 2] - nums[i + 1] == diff and nums[i + 3] - nums[i + 2] == diff:\n            return True\n    return False\ndef g():\n    return [1, 3, 5, 7, 2, 4, 6, 8]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 86,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Given a list of integers, find whether the list contains a subsequence of length 4 that forms an arithmetic progression.\"\"\"\n    n = len(nums)\n    for i in range(n - 3):\n        diff = nums[i + 1] - nums[i]\n        if nums[i + 2] - nums[i + 1] == diff and nums[i + 3] - nums[i + 2] == diff:\n            return True\n    return False",
        "solution_func": "def g():\n    return [1, 3, 5, 7, 2, 4, 6, 8]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the list whose sum is divisible by 3.\"\"\"\n    n = len(arr)\n    for i in range(n - k + 1):\n        subarray = arr[i:i+k]\n        if sum(subarray) % 3 == 0:\n            return True\n    return False\n\ndef g(k=3):\n    return [i for i in range(1, 2*k+1)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 86,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the list whose sum is divisible by 3.\"\"\"\n    n = len(arr)\n    for i in range(n - k + 1):\n        subarray = arr[i:i+k]\n        if sum(subarray) % 3 == 0:\n            return True\n    return False",
        "solution_func": "def g(k=3):\n    return [i for i in range(1, 2*k+1)]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], k=4) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the list whose sum is a prime number.\"\"\"\n    n = len(arr)\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    for i in range(n - k + 1):\n        subarray = arr[i:i+k]\n        if sum(subarray) in primes:\n            return True\n    return False\n\ndef g(k=4):\n    return [i for i in range(1, 2*k+1)]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 86,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], k=4) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the list whose sum is a prime number.\"\"\"\n    n = len(arr)\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    for i in range(n - k + 1):\n        subarray = arr[i:i+k]\n        if sum(subarray) in primes:\n            return True\n    return False",
        "solution_func": "def g(k=4):\n    return [i for i in range(1, 2*k+1)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=2) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the list whose elements are consecutive numbers.\"\"\"\n    n = len(arr)\n    for i in range(n - k + 1):\n        subarray = arr[i:i+k]\n        if subarray[1] - subarray[0] == 1:\n            return True\n    return False\n\ndef g(k=2):\n    return [i for i in range(10)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 86,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], k=2) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the list whose elements are consecutive numbers.\"\"\"\n    n = len(arr)\n    for i in range(n - k + 1):\n        subarray = arr[i:i+k]\n        if subarray[1] - subarray[0] == 1:\n            return True\n    return False",
        "solution_func": "def g(k=2):\n    return [i for i in range(10)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=4, c=6) -> bool:\n    \"\"\"Find n such that n + a > b * (the sum of the first c integers)\"\"\"\n    return n + a > sum([b * i for i in range(c)])\ndef g(a=3, b=4, c=6):\n    return -a + sum([b * i for i in range(c)]) + 1\nassert f(g()) == True\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 86,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=3, b=4, c=6) -> bool:\n    \"\"\"Find n such that n + a > b * (the sum of the first c integers)\"\"\"\n    return n + a > sum([b * i for i in range(c)])",
        "solution_func": "def g(a=3, b=4, c=6):\n    return -a + sum([b * i for i in range(c)]) + 1",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=4, c=6) -> bool:\n    \"\"\"Find n such that n + a < b * (the sum of the first c integers)\"\"\"\n    return n + a < sum([b * i for i in range(c)])\ndef g(a=3, b=4, c=6):\n    return -a + sum([b * i for i in range(c)]) - 1\nassert f(g()) == True\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 86,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=3, b=4, c=6) -> bool:\n    \"\"\"Find n such that n + a < b * (the sum of the first c integers)\"\"\"\n    return n + a < sum([b * i for i in range(c)])",
        "solution_func": "def g(a=3, b=4, c=6):\n    return -a + sum([b * i for i in range(c)]) - 1",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=4, c=6) -> bool:\n    \"\"\"Find n such that n + a >= b * (the sum of the first c integers)\"\"\"\n    return n + a >= sum([b * i for i in range(c)])\ndef g(a=3, b=4, c=6):\n    return -a + sum([b * i for i in range(c)])\nassert f(g()) == True\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 86,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=3, b=4, c=6) -> bool:\n    \"\"\"Find n such that n + a >= b * (the sum of the first c integers)\"\"\"\n    return n + a >= sum([b * i for i in range(c)])",
        "solution_func": "def g(a=3, b=4, c=6):\n    return -a + sum([b * i for i in range(c)])",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers and a target number, find any pair of numbers in the list that add up to the target.\nSample Input:\n[2, 5, 3, 4]\nSample Output:\n(2, 3)\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(target=0):\n    return [2, 3]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 86,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers and a target number, find any pair of numbers in the list that add up to the target.\nSample Input:\n[2, 5, 3, 4]\nSample Output:\n(2, 3)\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i + 1, len(nums)))",
        "solution_func": "def g(target=0):\n    return [2, 3]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list, whose sum is equal to the target_sum\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\ndef g(target_sum=100):\n    return [x for x in range(target_sum//2)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 87,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list, whose sum is equal to the target_sum\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=100):\n    return [x for x in range(target_sum//2)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11]) -> bool:\n    \"\"\"Check if the given number is prime\"\"\"\n    if n < 2:\n        return False\n    for prime in primes:\n        if n % prime == 0:\n            return False\n    return True\ndef g(primes=[2, 3, 5, 7, 11]):\n    n = primes[-1] + 2\n    while not f(n, primes):\n        n += 2\n    return n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 87,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11]) -> bool:\n    \"\"\"Check if the given number is prime\"\"\"\n    if n < 2:\n        return False\n    for prime in primes:\n        if n % prime == 0:\n            return False\n    return True",
        "solution_func": "def g(primes=[2, 3, 5, 7, 11]):\n    n = primes[-1] + 2\n    while not f(n, primes):\n        n += 2\n    return n",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, a=4, b=6) -> bool:\n    \"\"\"Check if the given number is a perfect square and lies between a and b\"\"\"\n    sqrt_n = sqrt(n)\n    return sqrt_n == int(sqrt_n) and a < sqrt_n < b\ndef g(a=4, b=6):\n    return (int(sqrt(a)) + 1) ** 2\nassert f(g())\n",
        "emb": null,
        "idx_generation": 87,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, a=4, b=6) -> bool:\n    \"\"\"Check if the given number is a perfect square and lies between a and b\"\"\"\n    sqrt_n = sqrt(n)\n    return sqrt_n == int(sqrt_n) and a < sqrt_n < b",
        "solution_func": "def g(a=4, b=6):\n    return (int(sqrt(a)) + 1) ** 2",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: int, a=93252338, b=241) -> bool:\n    \"\"\"Check if the product of x and b is equal to a\"\"\"\n    return x * b == a\ndef g(a=93252338, b=241):\n    return a // b\nassert f(g())\n",
        "emb": null,
        "idx_generation": 87,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=93252338, b=241) -> bool:\n    \"\"\"Check if the product of x and b is equal to a\"\"\"\n    return x * b == a",
        "solution_func": "def g(a=93252338, b=241):\n    return a // b",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: int, a=93252338, b=17, c=3) -> bool:\n    \"\"\"Check if x raised to the power of b minus c is equal to a\"\"\"\n    return x ** b - c == a\ndef g(a=93252338, b=17, c=3):\n    return (a + c) ** (1 / b)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 87,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=93252338, b=17, c=3) -> bool:\n    \"\"\"Check if x raised to the power of b minus c is equal to a\"\"\"\n    return x ** b - c == a",
        "solution_func": "def g(a=93252338, b=17, c=3):\n    return (a + c) ** (1 / b)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=93252338, b=4, c=5) -> bool:\n    \"\"\"Check if x divided by b and then multiplied by c is equal to a\"\"\"\n    return x / b * c == a\ndef g(a=93252338, b=4, c=5):\n    return a / c * b\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 87,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=93252338, b=4, c=5) -> bool:\n    \"\"\"Check if x divided by b and then multiplied by c is equal to a\"\"\"\n    return x / b * c == a",
        "solution_func": "def g(a=93252338, b=4, c=5):\n    return a / c * b",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=3, s=10) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=3, s=10):\n    x = [2] * n\n    x[0] = s - 2 * (n-1)\n    return x\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 87,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=3, s=10) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])",
        "solution_func": "def g(n=3, s=10):\n    x = [2] * n\n    x[0] = s - 2 * (n-1)\n    return x",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=4, s=15) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=4, s=15):\n    x = [3] * n\n    x[0] = s - 3 * (n-1)\n    return x\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 87,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=4, s=15) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])",
        "solution_func": "def g(n=4, s=15):\n    x = [3] * n\n    x[0] = s - 3 * (n-1)\n    return x",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=6, s=30) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=6, s=30):\n    x = [5] * n\n    x[0] = s - 5 * (n-1)\n    return x\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 87,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=6, s=30) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])",
        "solution_func": "def g(n=6, s=30):\n    x = [5] * n\n    x[0] = s - 5 * (n-1)\n    return x",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=5, c=8) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(1, c+1)])\ndef g(a=2, b=5, c=8):\n    return -a + sum([b * i for i in range(1, c+1)])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 87,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=2, b=5, c=8) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(1, c+1)])",
        "solution_func": "def g(a=2, b=5, c=8):\n    return -a + sum([b * i for i in range(1, c+1)])",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 88,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number exists in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 88,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number exists in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that sum up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70]\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 88,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that sum up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70]",
        "map_ix": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(a: int, b=5, c=3) -> bool:\n    \"\"\"Check if a divided by b and then multiplied by c is equal to the sum of a and b\"\"\"\n    return a / b * c == a + b\ndef g(a=15, b=5, c=3):\n    return a / c * b\nassert f(g())\n",
        "emb": null,
        "idx_generation": 88,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(a: int, b=5, c=3) -> bool:\n    \"\"\"Check if a divided by b and then multiplied by c is equal to the sum of a and b\"\"\"\n    return a / b * c == a + b",
        "solution_func": "def g(a=15, b=5, c=3):\n    return a / c * b",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: int, a=15, b=5, c=3) -> bool:\n    \"\"\"Check if x divided by b and then multiplied by a is equal to the sum of a and b\"\"\"\n    return x / b * a == a + b\ndef g(a=15, b=5, c=3):\n    return a / c * b\nassert f(g())\n",
        "emb": null,
        "idx_generation": 88,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=15, b=5, c=3) -> bool:\n    \"\"\"Check if x divided by b and then multiplied by a is equal to the sum of a and b\"\"\"\n    return x / b * a == a + b",
        "solution_func": "def g(a=15, b=5, c=3):\n    return a / c * b",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(a: int, b=5, c=3) -> bool:\n    \"\"\"Check if a divided by b and then multiplied by c is equal to the difference between a and b\"\"\"\n    return a / b * c == a - b\ndef g(a=15, b=5, c=3):\n    return a / c * b\nassert f(g())\n",
        "emb": null,
        "idx_generation": 88,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(a: int, b=5, c=3) -> bool:\n    \"\"\"Check if a divided by b and then multiplied by c is equal to the difference between a and b\"\"\"\n    return a / b * c == a - b",
        "solution_func": "def g(a=15, b=5, c=3):\n    return a / c * b",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='xyz', count=50, length=150) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring='xyz', count=50, length=150):\n    c = chr(1 + max((ord(c) for c in substring or 'a')))\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 88,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring='xyz', count=50, length=150) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length",
        "solution_func": "def g(substring='xyz', count=50, length=150):\n    c = chr(1 + max((ord(c) for c in substring or 'a')))\n    return substring * count + (length - len(substring) * count) * '^'",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=30) -> bool:\n    \"\"\"Find a matrix where the sum of each row is equal to the target sum\"\"\"\n    return all(sum(row) == target_sum for row in matrix)\ndef g(target_sum=30):\n    n = target_sum // 5\n    matrix = [[5] * n for _ in range(n)]\n    return matrix\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 88,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_sum=30) -> bool:\n    \"\"\"Find a matrix where the sum of each row is equal to the target sum\"\"\"\n    return all(sum(row) == target_sum for row in matrix)",
        "solution_func": "def g(target_sum=30):\n    n = target_sum // 5\n    matrix = [[5] * n for _ in range(n)]\n    return matrix",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], k=4) -> bool:\n    \"\"\"Find k non-negative integers such that each integer divides (the product of the rest plus 1)\"\"\"\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return all(((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))\ndef g(k=4):\n    n = 1\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 88,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[int], k=4) -> bool:\n    \"\"\"Find k non-negative integers such that each integer divides (the product of the rest plus 1)\"\"\"\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return all(((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))",
        "solution_func": "def g(k=4):\n    n = 1\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, factors: List[int]=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is a multiple of any of the given factors.\n    - n: the number to be checked\n    - factors: list of factors\"\"\"\n    for factor in factors:\n        if n % factor == 0:\n            return True\n    return False\ndef g(n: int, factors: List[int]=[2, 3, 5]):\n    return n\nassert f(g(15))\n\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 88,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, factors: List[int]=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is a multiple of any of the given factors.\n    - n: the number to be checked\n    - factors: list of factors\"\"\"\n    for factor in factors:\n        if n % factor == 0:\n            return True\n    return False",
        "solution_func": "def g(n: int, factors: List[int]=[2, 3, 5]):\n    return n",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, n=5) -> bool:\n    \"\"\"Check if the absolute difference between a number and a given value is less than or equal to n.\"\"\"\n    return abs(x - n) <= n\ndef g(n=5):\n    return n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 89,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, n=5) -> bool:\n    \"\"\"Check if the absolute difference between a number and a given value is less than or equal to n.\"\"\"\n    return abs(x - n) <= n",
        "solution_func": "def g(n=5):\n    return n",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in a list that add up to a given target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 89,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in a list that add up to a given target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string contains a substring that appears exactly n times.\"\"\"\n    count = s.count(s[:n])\n    return count == n\ndef g(n=3):\n    return 'abcabcabc'\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 89,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string contains a substring that appears exactly n times.\"\"\"\n    count = s.count(s[:n])\n    return count == n",
        "solution_func": "def g(n=3):\n    return 'abcabcabc'",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a lower triangular matrix\"\"\"\n    return all(matrix[i][j] == 0 for i in range(len(matrix)) for j in range(i+1, len(matrix[i])))\ndef g(n: int):\n    return [[1 if j>i else 0 for j in range(n)] for i in range(n)]\nassert f(g(n=5))\n",
        "emb": null,
        "idx_generation": 89,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a lower triangular matrix\"\"\"\n    return all(matrix[i][j] == 0 for i in range(len(matrix)) for j in range(i+1, len(matrix[i])))",
        "solution_func": "def g(n: int):\n    return [[1 if j>i else 0 for j in range(n)] for i in range(n)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square matrix\"\"\"\n    n = len(matrix)\n    target_sum = n * (n ** 2 + 1) // 2\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diag_sum1 = sum(matrix[i][i] for i in range(n))\n    diag_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(s == target_sum for s in row_sums + col_sums + [diag_sum1, diag_sum2])\ndef g(n: int):\n    return [[0 for _ in range(n)] for _ in range(n)]\nassert f(g(n=3))\n",
        "emb": null,
        "idx_generation": 89,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square matrix\"\"\"\n    n = len(matrix)\n    target_sum = n * (n ** 2 + 1) // 2\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diag_sum1 = sum(matrix[i][i] for i in range(n))\n    diag_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(s == target_sum for s in row_sums + col_sums + [diag_sum1, diag_sum2])",
        "solution_func": "def g(n: int):\n    return [[0 for _ in range(n)] for _ in range(n)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix has a saddle point\"\"\"\n    row_mins = [min(row) for row in matrix]\n    col_maxs = [max(col) for col in zip(*matrix)]\n    for i, row in enumerate(matrix):\n        for j, num in enumerate(row):\n            if num == row_mins[i] and num == col_maxs[j]:\n                return True\n    return False\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 89,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix has a saddle point\"\"\"\n    row_mins = [min(row) for row in matrix]\n    col_maxs = [max(col) for col in zip(*matrix)]\n    for i, row in enumerate(matrix):\n        for j, num in enumerate(row):\n            if num == row_mins[i] and num == col_maxs[j]:\n                return True\n    return False",
        "solution_func": "def g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if the target number is present in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=10):\n    return [[i+j for j in range(5)] for i in range(5)]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 89,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if the target number is present in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(target=10):\n    return [[i+j for j in range(5)] for i in range(5)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in arr:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=3):\n    return [i for i in range(1, k+1)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 89,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in arr:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False",
        "solution_func": "def g(k=3):\n    return [i for i in range(1, k+1)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose sum is divisible by k.\"\"\"\n    dp = [0] * k\n    dp[0] = 1\n    prefix_sum = 0\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        dp[prefix_sum] += 1\n    return dp[0] > 1 or any(count >= 2 for count in dp[1:])\n\ndef g(k=3):\n    return [i for i in range(1, k+1)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 89,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose sum is divisible by k.\"\"\"\n    dp = [0] * k\n    dp[0] = 1\n    prefix_sum = 0\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        dp[prefix_sum] += 1\n    return dp[0] > 1 or any(count >= 2 for count in dp[1:])",
        "solution_func": "def g(k=3):\n    return [i for i in range(1, k+1)]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the given matrix contains a row or column that sums up to the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum == target:\n            return True\n    return False\n\ndef g(target=0):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 89,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the given matrix contains a row or column that sums up to the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum == target:\n            return True\n    return False",
        "solution_func": "def g(target=0):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=5):\n    return [i for i in range(1, k+1)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 90,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False",
        "solution_func": "def g(k=5):\n    return [i for i in range(1, k+1)]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], k=4) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in numbers:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=4):\n    return [i for i in range(1, k+1)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 90,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], k=4) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in numbers:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False",
        "solution_func": "def g(k=4):\n    return [i for i in range(1, k+1)]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=7) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in arr:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=7):\n    return [i for i in range(1, k+1)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 90,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=7) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in arr:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False",
        "solution_func": "def g(k=7):\n    return [i for i in range(1, k+1)]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(s: str, n=4) -> bool:\n    \"\"\"Check if the given string contains any duplicate characters.\n    Solution should be a boolean value: True if the string contains duplicates, False otherwise.\"\"\"\n    return len(set(s)) < len(s)\n\ndef g(n=4):\n    return \"abcd\" * n\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 90,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(s: str, n=4) -> bool:\n    \"\"\"Check if the given string contains any duplicate characters.\n    Solution should be a boolean value: True if the string contains duplicates, False otherwise.\"\"\"\n    return len(set(s)) < len(s)",
        "solution_func": "def g(n=4):\n    return \"abcd\" * n",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a pair of integers in the given list that sum up to the target value.\n    Solution should be a boolean value: True if a pair exists, False otherwise.\"\"\"\n    seen = set()\n    for num in arr:\n        if k - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(k=3):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 90,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a pair of integers in the given list that sum up to the target value.\n    Solution should be a boolean value: True if a pair exists, False otherwise.\"\"\"\n    seen = set()\n    for num in arr:\n        if k - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(k=3):\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if the given matrix contains any submatrix whose elements sum up to the target value.\n    Solution should be a boolean value: True if a submatrix exists, False otherwise.\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    prefix_sum = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            prefix_sum[i][j] = prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1] + matrix[i - 1][j - 1]\n    for i in range(m):\n        for j in range(n):\n            for k in range(i + 1, m + 1):\n                for l in range(j + 1, n + 1):\n                    curr_sum = prefix_sum[k][l] - prefix_sum[i][l] - prefix_sum[k][j] + prefix_sum[i][j]\n                    if curr_sum == target:\n                        return True\n    return False\n\ndef g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 90,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if the given matrix contains any submatrix whose elements sum up to the target value.\n    Solution should be a boolean value: True if a submatrix exists, False otherwise.\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    prefix_sum = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            prefix_sum[i][j] = prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1] + matrix[i - 1][j - 1]\n    for i in range(m):\n        for j in range(n):\n            for k in range(i + 1, m + 1):\n                for l in range(j + 1, n + 1):\n                    curr_sum = prefix_sum[k][l] - prefix_sum[i][l] - prefix_sum[k][j] + prefix_sum[i][j]\n                    if curr_sum == target:\n                        return True\n    return False",
        "solution_func": "def g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(li: List[int], n=21) -> bool:\n    \"\"\"Given n, find n integers such that li[i] * li[i+1] + 1 == li[i+2], for i = 0, 1, ..., n-1\nwhere indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\nthat are multiples of 3 (as proven in the IMO problem).\nSample input:\n9\nSample output:\n[_, _, _, _, _, _, _, _, _]\n(Sample output hidden because showing sample output would give away too much information.)\"\"\"\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n=21):\n    return [1, 1, 1] * (n // 3)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 90,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[int], n=21) -> bool:\n    \"\"\"Given n, find n integers such that li[i] * li[i+1] + 1 == li[i+2], for i = 0, 1, ..., n-1\nwhere indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\nthat are multiples of 3 (as proven in the IMO problem).\nSample input:\n9\nSample output:\n[_, _, _, _, _, _, _, _, _]\n(Sample output hidden because showing sample output would give away too much information.)\"\"\"\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))",
        "solution_func": "def g(n=21):\n    return [1, 1, 1] * (n // 3)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(li: List[int], n=15) -> bool:\n    \"\"\"Given n, find n integers such that li[i] * li[i+1] + 1 == li[i+2], for i = 0, 1, ..., n-1\nwhere indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\nthat are multiples of 3 (as proven in the IMO problem).\nSample input:\n9\nSample output:\n[_, _, _, _, _, _, _, _, _]\n(Sample output hidden because showing sample output would give away too much information.)\"\"\"\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n=15):\n    return [2, 2, 2] * (n // 3)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 90,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[int], n=15) -> bool:\n    \"\"\"Given n, find n integers such that li[i] * li[i+1] + 1 == li[i+2], for i = 0, 1, ..., n-1\nwhere indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\nthat are multiples of 3 (as proven in the IMO problem).\nSample input:\n9\nSample output:\n[_, _, _, _, _, _, _, _, _]\n(Sample output hidden because showing sample output would give away too much information.)\"\"\"\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))",
        "solution_func": "def g(n=15):\n    return [2, 2, 2] * (n // 3)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(li: List[int], n=12) -> bool:\n    \"\"\"Given n, find n integers such that li[i] * li[i+1] + 1 == li[i+2], for i = 0, 1, ..., n-1\nwhere indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\nthat are multiples of 3 (as proven in the IMO problem).\nSample input:\n9\nSample output:\n[_, _, _, _, _, _, _, _, _]\n(Sample output hidden because showing sample output would give away too much information.)\"\"\"\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n=12):\n    return [3, 3, 3] * (n // 3)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 90,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[int], n=12) -> bool:\n    \"\"\"Given n, find n integers such that li[i] * li[i+1] + 1 == li[i+2], for i = 0, 1, ..., n-1\nwhere indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\nthat are multiples of 3 (as proven in the IMO problem).\nSample input:\n9\nSample output:\n[_, _, _, _, _, _, _, _, _]\n(Sample output hidden because showing sample output would give away too much information.)\"\"\"\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))",
        "solution_func": "def g(n=12):\n    return [3, 3, 3] * (n // 3)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers from a list whose sum is equal to the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for r in range(1, len(nums)+1) for comb in combinations(nums, r))\ndef g(nums: List[int], target=100):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 90,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers from a list whose sum is equal to the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for r in range(1, len(nums)+1) for comb in combinations(nums, r))",
        "solution_func": "def g(nums: List[int], target=100):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Determine if there are two numbers in the given list that add up to the target value.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g(), target=7)\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 91,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Determine if there are two numbers in the given list that add up to the target value.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5, 6]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str) -> bool:\n    \"\"\"Check if a word is a palindrome.\"\"\"\n    return word == word[::-1]\n\ndef g():\n    return \"level\"\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 91,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(word: str) -> bool:\n    \"\"\"Check if a word is a palindrome.\"\"\"\n    return word == word[::-1]",
        "solution_func": "def g():\n    return \"level\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a perfect square.\"\"\"\n    return math.isqrt(n) ** 2 == n\n\ndef g():\n    return 25\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 91,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a perfect square.\"\"\"\n    return math.isqrt(n) ** 2 == n",
        "solution_func": "def g():\n    return 25",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\ndef f(n: int, a=1, b=0, c=1) -> bool:\n    \"\"\"Check if the given value n is a root of the quadratic equation\"\"\"\n    return a * n ** 2 + b * n + c == 0\ndef g(a=1, b=0, c=1):\n    return (-b + sqrt(b ** 2 - 4 * a * c)) / (2 * a)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 91,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\ndef f(n: int, a=1, b=0, c=1) -> bool:\n    \"\"\"Check if the given value n is a root of the quadratic equation\"\"\"\n    return a * n ** 2 + b * n + c == 0",
        "solution_func": "def g(a=1, b=0, c=1):\n    return (-b + sqrt(b ** 2 - 4 * a * c)) / (2 * a)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(lst: List[int], target=0) -> bool:\n    \"\"\"Check if the target value exists in the list\"\"\"\n    return target in lst\ndef g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 91,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], target=0) -> bool:\n    \"\"\"Check if the target value exists in the list\"\"\"\n    return target in lst",
        "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(lst: List[int], target=0) -> bool:\n    \"\"\"Check if the sum of any two values in the list is equal to the target\"\"\"\n    return any(target - x in lst for x in lst)\ndef g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 91,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], target=0) -> bool:\n    \"\"\"Check if the sum of any two values in the list is equal to the target\"\"\"\n    return any(target - x in lst for x in lst)",
        "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=15) -> bool:\n    \"\"\"Check if there exist three numbers in the list whose sum is equal to the target value.\"\"\"\n    return any(numbers[i] + numbers[j] + numbers[k] == target for i in range(len(numbers)) for j in range(i+1, len(numbers)) for k in range(j+1, len(numbers)))\n\ndef g(target=15):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 91,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=15) -> bool:\n    \"\"\"Check if there exist three numbers in the list whose sum is equal to the target value.\"\"\"\n    return any(numbers[i] + numbers[j] + numbers[k] == target for i in range(len(numbers)) for j in range(i+1, len(numbers)) for k in range(j+1, len(numbers)))",
        "solution_func": "def g(target=15):\n    return [1, 2, 3, 4, 5, 6]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=9876) -> bool:\n    \"\"\"Check if the reverse of the string is equal to the string itself after removing all the vowels.\"\"\"\n    vowels = 'aeiouAEIOU'\n    reverse_s = s[::-1]\n    reverse_s_without_vowels = ''.join([ch for ch in reverse_s if ch not in vowels])\n    s_without_vowels = ''.join([ch for ch in s if ch not in vowels])\n    return reverse_s_without_vowels == s_without_vowels\n\ndef g(n=9876):\n    return 'racecar'\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 91,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=9876) -> bool:\n    \"\"\"Check if the reverse of the string is equal to the string itself after removing all the vowels.\"\"\"\n    vowels = 'aeiouAEIOU'\n    reverse_s = s[::-1]\n    reverse_s_without_vowels = ''.join([ch for ch in reverse_s if ch not in vowels])\n    s_without_vowels = ''.join([ch for ch in s if ch not in vowels])\n    return reverse_s_without_vowels == s_without_vowels",
        "solution_func": "def g(n=9876):\n    return 'racecar'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Check if there exist three numbers in the list whose product is equal to the target value.\"\"\"\n    return any(numbers[i] * numbers[j] * numbers[k] == target for i in range(len(numbers)) for j in range(i+1, len(numbers)) for k in range(j+1, len(numbers)))\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 91,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Check if there exist three numbers in the list whose product is equal to the target value.\"\"\"\n    return any(numbers[i] * numbers[j] * numbers[k] == target for i in range(len(numbers)) for j in range(i+1, len(numbers)) for k in range(j+1, len(numbers)))",
        "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if the given matrix contains a row or column that sums up to the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum == target:\n            return True\n    return False\ndef g(target=20):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 91,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if the given matrix contains a row or column that sums up to the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum == target:\n            return True\n    return False",
        "solution_func": "def g(target=20):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=7) -> bool:\n    \"\"\"Check if the given number is divisible by m.\"\"\"\n    return n % m == 0\n\ndef g(m=7):\n    return 3 * m\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 92,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=7) -> bool:\n    \"\"\"Check if the given number is divisible by m.\"\"\"\n    return n % m == 0",
        "solution_func": "def g(m=7):\n    return 3 * m",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=5) -> bool:\n    \"\"\"Check if the given number is a power of m.\"\"\"\n    return n % m == 0 and m != 0\n\ndef g(m=5):\n    return pow(m, 3)\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 92,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=5) -> bool:\n    \"\"\"Check if the given number is a power of m.\"\"\"\n    return n % m == 0 and m != 0",
        "solution_func": "def g(m=5):\n    return pow(m, 3)",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=3) -> bool:\n    \"\"\"Check if the given number is a multiple of m and m is prime.\"\"\"\n    prime_nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    return n % m == 0 and m in prime_nums\n\ndef g(m=3):\n    return 4 * m\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 92,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=3) -> bool:\n    \"\"\"Check if the given number is a multiple of m and m is prime.\"\"\"\n    prime_nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    return n % m == 0 and m in prime_nums",
        "solution_func": "def g(m=3):\n    return 4 * m",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 92,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=50):\n    return [5, 10, 15, 20, 25, 30, 35]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 92,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=50):\n    return [5, 10, 15, 20, 25, 30, 35]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [7, 9, 13, 15, 17, 19]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 92,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    return [7, 9, 13, 15, 17, 19]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the matrix that sum up to the target number\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            for k in range(i, len(matrix)):\n                for l in range(len(matrix[k])):\n                    if matrix[i][j] + matrix[k][l] == target:\n                        return True\n    return False\n\ndef g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 92,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the matrix that sum up to the target number\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            for k in range(i, len(matrix)):\n                for l in range(len(matrix[k])):\n                    if matrix[i][j] + matrix[k][l] == target:\n                        return True\n    return False",
        "solution_func": "def g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target=\"python\") -> bool:\n    \"\"\"Check if there exists a word in the list that is an anagram of the target word\"\"\"\n    for word in words:\n        if sorted(word) == sorted(target):\n            return True\n    return False\n\ndef g(target=\"python\"):\n    return [\"typhon\", \"pyton\", \"python\", \"nhopty\", \"phony\"]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 92,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], target=\"python\") -> bool:\n    \"\"\"Check if there exists a word in the list that is an anagram of the target word\"\"\"\n    for word in words:\n        if sorted(word) == sorted(target):\n            return True\n    return False",
        "solution_func": "def g(target=\"python\"):\n    return [\"typhon\", \"pyton\", \"python\", \"nhopty\", \"phony\"]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]], target=50) -> bool:\n    \"\"\"Check if there exists a pair of points in the list that are equidistant from the origin and sum up to the target number\"\"\"\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            x1, y1 = points[i]\n            x2, y2 = points[j]\n            if (x1**2 + y1**2) == (x2**2 + y2**2) and (x1 + x2 + y1 + y2) == target:\n                return True\n    return False\n\ndef g(target=50):\n    return [(3, 4), (5, 12), (6, 8), (9, 12), (10, 24)]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 92,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(points: List[Tuple[int, int]], target=50) -> bool:\n    \"\"\"Check if there exists a pair of points in the list that are equidistant from the origin and sum up to the target number\"\"\"\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            x1, y1 = points[i]\n            x2, y2 = points[j]\n            if (x1**2 + y1**2) == (x2**2 + y2**2) and (x1 + x2 + y1 + y2) == target:\n                return True\n    return False",
        "solution_func": "def g(target=50):\n    return [(3, 4), (5, 12), (6, 8), (9, 12), (10, 24)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target sum.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 92,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target sum.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=5):\n    return [i**2 for i in range(1, k+1)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0
        ],
        "idx_generation": 93,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False",
        "solution_func": "def g(k=5):\n    return [i**2 for i in range(1, k+1)]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=5):\n    return [math.factorial(i) for i in range(1, k+1)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 93,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False",
        "solution_func": "def g(k=5):\n    return [math.factorial(i) for i in range(1, k+1)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import Tuple\n\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=5):\n    return [(i, i+1) for i in range(k)]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 93,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import Tuple\n\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False",
        "solution_func": "def g(k=5):\n    return [(i, i+1) for i in range(k)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=10, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    \"\"\"Find a pair of numbers from the given list that sums up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], target=10):\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 93,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=10, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    \"\"\"Find a pair of numbers from the given list that sums up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], target=10):\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(m: int, n=3, nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    \"\"\"Find the sum of the elements in the first n rows of the given matrix.\"\"\"\n    total = 0\n    for i in range(n):\n        total += sum(nums[i])\n    return total == m\n\ndef g(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], n=3):\n    return sum([sum(row) for row in nums[:n]])\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 93,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(m: int, n=3, nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    \"\"\"Find the sum of the elements in the first n rows of the given matrix.\"\"\"\n    total = 0\n    for i in range(n):\n        total += sum(nums[i])\n    return total == m",
        "solution_func": "def g(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], n=3):\n    return sum([sum(row) for row in nums[:n]])",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0, n=3):\n    \"\"\"Find the product of any n numbers from the given list that sums up to the target value.\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, n):\n        if sum(combo) == target:\n            return True\n    return False\n\ndef g(nums=[-1, 2, 3, 4, 5], target=0, n=3):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 93,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0, n=3):\n    \"\"\"Find the product of any n numbers from the given list that sums up to the target value.\"\"\"\n    from itertools import combinations\n    for combo in combinations(nums, n):\n        if sum(combo) == target:\n            return True\n    return False",
        "solution_func": "def g(nums=[-1, 2, 3, 4, 5], target=0, n=3):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums: List[int]):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == 10:\n                return (nums[i], nums[j])\nassert f(g([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 93,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(nums: List[int]):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == 10:\n                return (nums[i], nums[j])",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(names: List[str], starting_letter='A') -> bool:\n    \"\"\"Check if any name in the list starts with the given letter\"\"\"\n    return any(name.startswith(starting_letter) for name in names)\ndef g(names: List[str]):\n    return names[0]\nassert f(g(['Alice', 'Bob', 'Charlie', 'David']), 'C')\n",
        "emb": null,
        "idx_generation": 93,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(names: List[str], starting_letter='A') -> bool:\n    \"\"\"Check if any name in the list starts with the given letter\"\"\"\n    return any(name.startswith(starting_letter) for name in names)",
        "solution_func": "def g(names: List[str]):\n    return names[0]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if any row in the matrix contains the target value\"\"\"\n    return any(target in row for row in matrix)\ndef g(matrix: List[List[int]]):\n    return matrix[0]\nassert f(g([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), 5)\n",
        "emb": null,
        "idx_generation": 93,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if any row in the matrix contains the target value\"\"\"\n    return any(target in row for row in matrix)",
        "solution_func": "def g(matrix: List[List[int]]):\n    return matrix[0]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Find two numbers in the list 'nums' whose sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[5, 10, 15, 20, 25, 30, 35, 40, 45]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 93,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Find two numbers in the list 'nums' whose sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums=[5, 10, 15, 20, 25, 30, 35, 40, 45]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that adds up to the target.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\ndef g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 94,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that adds up to the target.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(tour: List[List[int]], m=8, n=8) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\n\ndef g(m=8, n=8):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 94,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(tour: List[List[int]], m=8, n=8) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]",
        "solution_func": "def g(m=8, n=8):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(points: List[List[int]]) -> bool:\n    \"\"\"Check if all the points in the list form a rectangle.\"\"\"\n    if len(points) != 4:\n        return False\n    x_coords = [point[0] for point in points]\n    y_coords = [point[1] for point in points]\n    return len(set(x_coords)) == 2 and len(set(y_coords)) == 2\n\ndef g():\n    points = [[0, 0], [0, 1], [1, 0], [1, 1]]\n    return points\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 94,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(points: List[List[int]]) -> bool:\n    \"\"\"Check if all the points in the list form a rectangle.\"\"\"\n    if len(points) != 4:\n        return False\n    x_coords = [point[0] for point in points]\n    y_coords = [point[1] for point in points]\n    return len(set(x_coords)) == 2 and len(set(y_coords)) == 2",
        "solution_func": "def g():\n    points = [[0, 0], [0, 1], [1, 0], [1, 1]]\n    return points",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find a pair of numbers in the given list that have a product greater than 100.\"\"\"\n    return any((nums[i] * nums[j] > 100 for i in range(len(nums)) for j in range(i + 1, len(nums))))\ndef g():\n    return [2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 94,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find a pair of numbers in the given list that have a product greater than 100.\"\"\"\n    return any((nums[i] * nums[j] > 100 for i in range(len(nums)) for j in range(i + 1, len(nums))))",
        "solution_func": "def g():\n    return [2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Find a subsequence of the given list where the sum of its elements is divisible by 5.\"\"\"\n    for r in range(1, len(arr) + 1):\n        for subseq in itertools.combinations(arr, r):\n            if sum(subseq) % 5 == 0:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 94,
        "target_skills": null,
        "problem_func": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Find a subsequence of the given list where the sum of its elements is divisible by 5.\"\"\"\n    for r in range(1, len(arr) + 1):\n        for subseq in itertools.combinations(arr, r):\n            if sum(subseq) % 5 == 0:\n                return True\n    return False",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if any combination of the given list elements adds up to the target value.\"\"\"\n    n = len(arr)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(target + 1):\n            if j < arr[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    \n    return dp[n][target]\n\ndef g(target=100):\n    return random.sample(range(1, 101), 10)\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 94,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if any combination of the given list elements adds up to the target value.\"\"\"\n    n = len(arr)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(target + 1):\n            if j < arr[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    \n    return dp[n][target]",
        "solution_func": "def g(target=100):\n    return random.sample(range(1, 101), 10)",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that adds up to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr=[2, 4, 6, 8]):\n    return arr\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 94,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that adds up to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(arr=[2, 4, 6, 8]):\n    return arr",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if the given substring is a palindrome\"\"\"\n    return substring == substring[::-1]\n\ndef g(substring='abc'):\n    return substring\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 94,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if the given substring is a palindrome\"\"\"\n    return substring == substring[::-1]",
        "solution_func": "def g(substring='abc'):\n    return substring",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], n=5) -> bool:\n    \"\"\"Check if the given list contains any duplicate elements\"\"\"\n    return len(arr) != len(set(arr))\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 94,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], n=5) -> bool:\n    \"\"\"Check if the given list contains any duplicate elements\"\"\"\n    return len(arr) != len(set(arr))",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5]):\n    return arr",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=10) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=10):\n    return [i**2 for i in range(1, k+1)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 94,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], k=10) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False",
        "solution_func": "def g(k=10):\n    return [i**2 for i in range(1, k+1)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=100) -> bool:\n    \"\"\"Check if the absolute value of x is equal to a\"\"\"\n    return abs(x) == a\ndef g(a=100):\n    return a\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 95,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=100) -> bool:\n    \"\"\"Check if the absolute value of x is equal to a\"\"\"\n    return abs(x) == a",
        "solution_func": "def g(a=100):\n    return a",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    numbers = [1, 2, 3, 4, 5]\n    return numbers\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 95,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    numbers = [1, 2, 3, 4, 5]\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\ndef f(numbers: List[int], n=2) -> bool:\n    \"\"\"Check if the sum of the first n numbers in the list is divisible by n\"\"\"\n    return sum(numbers[:n]) % n == 0\n\ndef g(n=2):\n    numbers = [1, 2, 3, 4, 5]\n    return numbers\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 95,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\ndef f(numbers: List[int], n=2) -> bool:\n    \"\"\"Check if the sum of the first n numbers in the list is divisible by n\"\"\"\n    return sum(numbers[:n]) % n == 0",
        "solution_func": "def g(n=2):\n    numbers = [1, 2, 3, 4, 5]\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(squares: List[List[int]], m=10, n=10) -> bool:\n    \"\"\"Position min(m, n) <= 10 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\n\ndef g(m=10, n=10):\n    k = min(m, n)\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len({t for (i, j) in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for (i, j) in enumerate(p)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 95,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(squares: List[List[int]], m=10, n=10) -> bool:\n    \"\"\"Position min(m, n) <= 10 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})",
        "solution_func": "def g(m=10, n=10):\n    k = min(m, n)\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len({t for (i, j) in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for (i, j) in enumerate(p)]",
        "map_ix": [
            1,
            1,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(squares: List[List[int]], m=6, n=6) -> bool:\n    \"\"\"Position min(m, n) <= 6 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\n\ndef g(m=6, n=6):\n    k = min(m, n)\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len({t for (i, j) in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for (i, j) in enumerate(p)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 95,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(squares: List[List[int]], m=6, n=6) -> bool:\n    \"\"\"Position min(m, n) <= 6 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})",
        "solution_func": "def g(m=6, n=6):\n    k = min(m, n)\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len({t for (i, j) in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for (i, j) in enumerate(p)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(squares: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Position min(m, n) <= 5 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\n\ndef g(m=5, n=5):\n    k = min(m, n)\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len({t for (i, j) in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for (i, j) in enumerate(p)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 95,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(squares: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Position min(m, n) <= 5 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})",
        "solution_func": "def g(m=5, n=5):\n    k = min(m, n)\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len({t for (i, j) in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for (i, j) in enumerate(p)]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: int, n=5) -> bool:\n    \"\"\"Check if a number is divisible by the product of its digits\"\"\"\n    product = 1\n    for digit in str(x):\n        product *= int(digit)\n    return x % product == 0\ndef g(n=5):\n    return n * 123\nassert f(g())\n",
        "emb": null,
        "idx_generation": 95,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, n=5) -> bool:\n    \"\"\"Check if a number is divisible by the product of its digits\"\"\"\n    product = 1\n    for digit in str(x):\n        product *= int(digit)\n    return x % product == 0",
        "solution_func": "def g(n=5):\n    return n * 123",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, n=5) -> bool:\n    \"\"\"Check if a number is divisible by the difference between the largest and smallest digit\"\"\"\n    digits = [int(digit) for digit in str(x)]\n    diff = max(digits) - min(digits)\n    return x % diff == 0\ndef g(n=5):\n    return n * 123\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 95,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, n=5) -> bool:\n    \"\"\"Check if a number is divisible by the difference between the largest and smallest digit\"\"\"\n    digits = [int(digit) for digit in str(x)]\n    diff = max(digits) - min(digits)\n    return x % diff == 0",
        "solution_func": "def g(n=5):\n    return n * 123",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: int, n=5) -> bool:\n    \"\"\"Check if a number is divisible by the sum of its even digits\"\"\"\n    sum_even = 0\n    for digit in str(x):\n        if int(digit) % 2 == 0:\n            sum_even += int(digit)\n    return x % sum_even == 0\ndef g(n=5):\n    return n * 123\nassert f(g())\n",
        "emb": null,
        "idx_generation": 95,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, n=5) -> bool:\n    \"\"\"Check if a number is divisible by the sum of its even digits\"\"\"\n    sum_even = 0\n    for digit in str(x):\n        if int(digit) % 2 == 0:\n            sum_even += int(digit)\n    return x % sum_even == 0",
        "solution_func": "def g(n=5):\n    return n * 123",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=5, c=8) -> bool:\n    \"\"\"Find n such that n - a == b * (the sum of the first c integers)\"\"\"\n    return n - a == sum([b * i for i in range(1, c+1)])\ndef g(a=2, b=5, c=8):\n    return a + sum([b * i for i in range(1, c+1)])\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 95,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=2, b=5, c=8) -> bool:\n    \"\"\"Find n such that n - a == b * (the sum of the first c integers)\"\"\"\n    return n - a == sum([b * i for i in range(1, c+1)])",
        "solution_func": "def g(a=2, b=5, c=8):\n    return a + sum([b * i for i in range(1, c+1)])",
        "map_ix": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'indian plum', 'jackfruit']) -> bool:\n    \"\"\"Check if a word is present in a list of words and has an even length.\"\"\"\n    return s in words and len(s) % 2 == 0\n\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'indian plum', 'jackfruit']):\n    return sorted(words)[-1]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 96,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'indian plum', 'jackfruit']) -> bool:\n    \"\"\"Check if a word is present in a list of words and has an even length.\"\"\"\n    return s in words and len(s) % 2 == 0",
        "solution_func": "def g(words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'indian plum', 'jackfruit']):\n    return sorted(words)[-1]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target value.\"\"\"\n    return any(target - num in nums for num in nums)\n\ndef g(target=10):\n    return [i for i in range(1, target+1)]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 96,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target value.\"\"\"\n    return any(target - num in nums for num in nums)",
        "solution_func": "def g(target=10):\n    return [i for i in range(1, target+1)]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=5) -> bool:\n    \"\"\"Check if the product of the list elements is divisible by a given number.\"\"\"\n    product = 1\n    for num in x:\n        product *= num\n    return product % n == 0\n\ndef g(n=5):\n    return [i**2 for i in range(1, n+1)]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 96,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=5) -> bool:\n    \"\"\"Check if the product of the list elements is divisible by a given number.\"\"\"\n    product = 1\n    for num in x:\n        product *= num\n    return product % n == 0",
        "solution_func": "def g(n=5):\n    return [i**2 for i in range(1, n+1)]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(inds: List[int], vecs=[3, 8, 6, 2, 1, 5, 9, 4, 7, 0, 10]) -> bool:\n    \"\"\"Find the indices in the vector where the sum of the numbers is divisible by 3\"\"\"\n    return sum((sum((v for i,v in enumerate(vecs) if i in inds))) % 3 == 0 for v in vecs) >= len(vecs) * 3 / 4\ndef g(vecs=[3, 8, 6, 2, 1, 5, 9, 4, 7, 0, 10]):\n    return [i for i,v in enumerate(vecs) if v % 3 == 0]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 96,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(inds: List[int], vecs=[3, 8, 6, 2, 1, 5, 9, 4, 7, 0, 10]) -> bool:\n    \"\"\"Find the indices in the vector where the sum of the numbers is divisible by 3\"\"\"\n    return sum((sum((v for i,v in enumerate(vecs) if i in inds))) % 3 == 0 for v in vecs) >= len(vecs) * 3 / 4",
        "solution_func": "def g(vecs=[3, 8, 6, 2, 1, 5, 9, 4, 7, 0, 10]):\n    return [i for i,v in enumerate(vecs) if v % 3 == 0]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(inds: List[int], nums=[4, 3, 2, 5, 6, 8, 7, 1, 0, 9]) -> bool:\n    \"\"\"Check if the sum of the numbers at the given indices is greater than 10\"\"\"\n    return sum((nums[i] for i in inds)) > 10\ndef g(nums=[4, 3, 2, 5, 6, 8, 7, 1, 0, 9]):\n    return [i for i,v in enumerate(nums) if v > 5]\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 96,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(inds: List[int], nums=[4, 3, 2, 5, 6, 8, 7, 1, 0, 9]) -> bool:\n    \"\"\"Check if the sum of the numbers at the given indices is greater than 10\"\"\"\n    return sum((nums[i] for i in inds)) > 10",
        "solution_func": "def g(nums=[4, 3, 2, 5, 6, 8, 7, 1, 0, 9]):\n    return [i for i,v in enumerate(nums) if v > 5]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(inds: List[int], strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grapefruit', 'honeydew', 'imbe', 'jackfruit']) -> bool:\n    \"\"\"Find the indices of the strings that contain the letter 'e'\"\"\"\n    return all(('e' in strings[i] for i in inds))\ndef g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grapefruit', 'honeydew', 'imbe', 'jackfruit']):\n    return [i for i,s in enumerate(strings) if 'e' in s]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 96,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(inds: List[int], strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grapefruit', 'honeydew', 'imbe', 'jackfruit']) -> bool:\n    \"\"\"Find the indices of the strings that contain the letter 'e'\"\"\"\n    return all(('e' in strings[i] for i in inds))",
        "solution_func": "def g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grapefruit', 'honeydew', 'imbe', 'jackfruit']):\n    return [i for i,s in enumerate(strings) if 'e' in s]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 96,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='world') -> bool:\n    \"\"\"Check if the given substring exists in the given string.\"\"\"\n    return substr in s\ndef g(substr='world'):\n    return \"Hello, world!\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 96,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substr='world') -> bool:\n    \"\"\"Check if the given substring exists in the given string.\"\"\"\n    return substr in s",
        "solution_func": "def g(substr='world'):\n    return \"Hello, world!\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if there exists a row in the matrix where the sum of its elements is equal to the target value.\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False\ndef g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 96,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if there exists a row in the matrix where the sum of its elements is equal to the target value.\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False",
        "solution_func": "def g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(string: str, substrings=['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']) -> bool:\n    \"\"\"Check if a given string contains any of the given substrings.\"\"\"\n    return any((substring in string for substring in substrings))\ndef g(substrings=['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']):\n    string = input(\"Enter a string: \")\n    return string\nassert f(g())\n",
        "emb": null,
        "idx_generation": 96,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substrings=['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']) -> bool:\n    \"\"\"Check if a given string contains any of the given substrings.\"\"\"\n    return any((substring in string for substring in substrings))",
        "solution_func": "def g(substrings=['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']):\n    string = input(\"Enter a string: \")\n    return string",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[str], nums=[5, 10, 15, 20, 25, 30]) -> bool:\n    \"\"\"Check if the sum of the numbers at the given indices is divisible by 3\"\"\"\n    return sum((nums[i] for i in x)) % 3 == 0\n\ndef g(nums=[5, 10, 15, 20, 25, 30]):\n    return [i for i,v in enumerate(nums) if v % 2 == 0]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 97,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[str], nums=[5, 10, 15, 20, 25, 30]) -> bool:\n    \"\"\"Check if the sum of the numbers at the given indices is divisible by 3\"\"\"\n    return sum((nums[i] for i in x)) % 3 == 0",
        "solution_func": "def g(nums=[5, 10, 15, 20, 25, 30]):\n    return [i for i,v in enumerate(nums) if v % 2 == 0]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the product of the numbers at the given indices is greater than 100\"\"\"\n    product = 1\n    for i in x:\n        product *= nums[i]\n    return product > 100\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return [i for i,v in enumerate(nums) if v % 2 == 1]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 97,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the product of the numbers at the given indices is greater than 100\"\"\"\n    product = 1\n    for i in x:\n        product *= nums[i]\n    return product > 100",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return [i for i,v in enumerate(nums) if v % 2 == 1]",
        "map_ix": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], nums=[-2, -1, 0, 1, 2]) -> bool:\n    \"\"\"Check if the sum of the numbers at the given indices is less than or equal to 0\"\"\"\n    return sum((nums[i] for i in x)) <= 0\n\ndef g(nums=[-2, -1, 0, 1, 2]):\n    return [i for i,v in enumerate(nums) if v < 0]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 97,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], nums=[-2, -1, 0, 1, 2]) -> bool:\n    \"\"\"Check if the sum of the numbers at the given indices is less than or equal to 0\"\"\"\n    return sum((nums[i] for i in x)) <= 0",
        "solution_func": "def g(nums=[-2, -1, 0, 1, 2]):\n    return [i for i,v in enumerate(nums) if v < 0]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=5, c=8) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(1, c+1)])\ndef g(a=2, b=5, c=8):\n    return a + sum([b * i for i in range(1, c+1)])\nassert f(g())\n",
        "emb": null,
        "idx_generation": 97,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=2, b=5, c=8) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(1, c+1)])",
        "solution_func": "def g(a=2, b=5, c=8):\n    return a + sum([b * i for i in range(1, c+1)])",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\ndef f(n: int, a=2, b=5, c=8) -> bool:\n    \"\"\"Find n such that n - a == b * (the product of the first c integers)\"\"\"\n    return n - a == math.prod([b * i for i in range(1, c+1)])\ndef g(a=2, b=5, c=8):\n    return a + sum([b * i for i in range(1, c+1)])\nassert f(g())\n",
        "emb": null,
        "idx_generation": 97,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\ndef f(n: int, a=2, b=5, c=8) -> bool:\n    \"\"\"Find n such that n - a == b * (the product of the first c integers)\"\"\"\n    return n - a == math.prod([b * i for i in range(1, c+1)])",
        "solution_func": "def g(a=2, b=5, c=8):\n    return a + sum([b * i for i in range(1, c+1)])",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=5, c=8) -> bool:\n    \"\"\"Find n such that n - a == b * (the sum of the squares of the first c integers)\"\"\"\n    return n - a == sum([b * i**2 for i in range(1, c+1)])\ndef g(a=2, b=5, c=8):\n    return a + sum([b * i for i in range(1, c+1)])\nassert f(g())\n",
        "emb": null,
        "idx_generation": 97,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=2, b=5, c=8) -> bool:\n    \"\"\"Find n such that n - a == b * (the sum of the squares of the first c integers)\"\"\"\n    return n - a == sum([b * i**2 for i in range(1, c+1)])",
        "solution_func": "def g(a=2, b=5, c=8):\n    return a + sum([b * i for i in range(1, c+1)])",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=9) -> bool:\n    \"\"\"Determine if a given target sum can be obtained by adding up numbers in the matrix\"\"\"\n    def dfs(row, col, curr_sum):\n        if curr_sum == target:\n            return True\n        if row >= len(matrix) or col >= len(matrix[0]):\n            return False\n        return dfs(row + 1, col, curr_sum + matrix[row][col]) or dfs(row, col + 1, curr_sum + matrix[row][col])\n    return dfs(0, 0, 0)\ndef g(target=9):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 97,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=9) -> bool:\n    \"\"\"Determine if a given target sum can be obtained by adding up numbers in the matrix\"\"\"\n    def dfs(row, col, curr_sum):\n        if curr_sum == target:\n            return True\n        if row >= len(matrix) or col >= len(matrix[0]):\n            return False\n        return dfs(row + 1, col, curr_sum + matrix[row][col]) or dfs(row, col + 1, curr_sum + matrix[row][col])\n    return dfs(0, 0, 0)",
        "solution_func": "def g(target=9):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=3) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the given list that sum up to the target\"\"\"\n    nums.sort()\n    for i in range(len(nums) - 2):\n        left = i + 1\n        right = len(nums) - 1\n        while left < right:\n            curr_sum = nums[i] + nums[left] + nums[right]\n            if curr_sum == target:\n                return True\n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\ndef g(target=3):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 97,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=3) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the given list that sum up to the target\"\"\"\n    nums.sort()\n    for i in range(len(nums) - 2):\n        left = i + 1\n        right = len(nums) - 1\n        while left < right:\n            curr_sum = nums[i] + nums[left] + nums[right]\n            if curr_sum == target:\n                return True\n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False",
        "solution_func": "def g(target=3):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(strings: List[str], prefix=\"abc\") -> bool:\n    \"\"\"Check if all strings in the list start with the given prefix\"\"\"\n    return all(string.startswith(prefix) for string in strings)\ndef g(prefix=\"abc\"):\n    strings = [\"abcde\", \"abcdefg\", \"abcxyz\"]\n    return strings\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 97,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\ndef f(strings: List[str], prefix=\"abc\") -> bool:\n    \"\"\"Check if all strings in the list start with the given prefix\"\"\"\n    return all(string.startswith(prefix) for string in strings)",
        "solution_func": "def g(prefix=\"abc\"):\n    strings = [\"abcde\", \"abcdefg\", \"abcxyz\"]\n    return strings",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target='hello', case_sensitive=False) -> bool:\n    \"\"\"Check if a given string matches the target string\"\"\"\n    if case_sensitive:\n        return string == target\n    else:\n        return string.lower() == target.lower()\n\ndef g(target='hello', case_sensitive=False):\n    if case_sensitive:\n        return target\n    else:\n        return target.upper()\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 97,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, target='hello', case_sensitive=False) -> bool:\n    \"\"\"Check if a given string matches the target string\"\"\"\n    if case_sensitive:\n        return string == target\n    else:\n        return string.lower() == target.lower()",
        "solution_func": "def g(target='hello', case_sensitive=False):\n    if case_sensitive:\n        return target\n    else:\n        return target.upper()",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target sum\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 98,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target sum\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_product=24) -> bool:\n    \"\"\"Find three numbers in the list that multiply to give the target product\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] * nums[j] * nums[k] == target_product:\n                    return True\n    return False\n\ndef g(target_product=24):\n    return [1, 2, 3, 4, 5, 6, 7, 8]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 98,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_product=24) -> bool:\n    \"\"\"Find three numbers in the list that multiply to give the target product\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] * nums[j] * nums[k] == target_product:\n                    return True\n    return False",
        "solution_func": "def g(target_product=24):\n    return [1, 2, 3, 4, 5, 6, 7, 8]",
        "map_ix": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target_substring='abc') -> bool:\n    \"\"\"Check if the target substring is present in the given string\"\"\"\n    return target_substring in string\n\ndef g(target_substring='abc'):\n    return \"xyz\" + target_substring + \"pqr\"\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 98,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, target_substring='abc') -> bool:\n    \"\"\"Check if the target substring is present in the given string\"\"\"\n    return target_substring in string",
        "solution_func": "def g(target_substring='abc'):\n    return \"xyz\" + target_substring + \"pqr\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]], origin=(0, 0)) -> bool:\n    \"\"\"Check if all points in a list are located in the positive quadrant\"\"\"\n    return all((point[0] >= origin[0] and point[1] >= origin[1]) for point in points)\ndef g(origin=(0, 0)):\n    return [(1, 2), (3, 4), (5, 6)]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 98,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(points: List[Tuple[int, int]], origin=(0, 0)) -> bool:\n    \"\"\"Check if all points in a list are located in the positive quadrant\"\"\"\n    return all((point[0] >= origin[0] and point[1] >= origin[1]) for point in points)",
        "solution_func": "def g(origin=(0, 0)):\n    return [(1, 2), (3, 4), (5, 6)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if all names in a list contain at least one vowel\"\"\"\n    return all(any((vowel in name) for vowel in vowels) for name in names)\ndef g(vowels=['a', 'e', 'i', 'o', 'u']):\n    return ['Alice', 'Bob', 'Charlie']\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 98,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(names: List[str], vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if all names in a list contain at least one vowel\"\"\"\n    return all(any((vowel in name) for vowel in vowels) for name in names)",
        "solution_func": "def g(vowels=['a', 'e', 'i', 'o', 'u']):\n    return ['Alice', 'Bob', 'Charlie']",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two numbers in a list whose sum is equal to the target\"\"\"\n    return any((numbers[i] + numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 98,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two numbers in a list whose sum is equal to the target\"\"\"\n    return any((numbers[i] + numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a', count=3) -> bool:\n    \"\"\"Find a string that contains exactly count occurrences of the character char.\"\"\"\n    return s.count(char) == count\ndef g(char='a', count=3):\n    return char * count\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 98,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, char='a', count=3) -> bool:\n    \"\"\"Find a string that contains exactly count occurrences of the character char.\"\"\"\n    return s.count(char) == count",
        "solution_func": "def g(char='a', count=3):\n    return char * count",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list nums that sum up to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 98,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list nums that sum up to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Given an integer n and a list of integers arr, find if there exists a pair of indices i and j such that\nabs(arr[i] - arr[j]) = n\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) == n:\n                return True\n    return False\ndef g(arr=[1, 2, 3, 4, 5]):\n    return len(arr), arr\nassert f(g())\n",
        "emb": null,
        "idx_generation": 98,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, arr: List[int]) -> bool:\n    \"\"\"Given an integer n and a list of integers arr, find if there exists a pair of indices i and j such that\nabs(arr[i] - arr[j]) = n\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) == n:\n                return True\n    return False",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5]):\n    return len(arr), arr",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m=5) -> bool:\n    \"\"\"Find an integer whose perfect square ends with m zeros in its decimal representation.\"\"\"\n    return str(n * n).endswith('0' * m)\ndef g(m=5):\n    return int(int('1' + '0' * (10 + m)) ** 0.5) - 1\nassert f(g())\n",
        "emb": null,
        "idx_generation": 98,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=5) -> bool:\n    \"\"\"Find an integer whose perfect square ends with m zeros in its decimal representation.\"\"\"\n    return str(n * n).endswith('0' * m)",
        "solution_func": "def g(m=5):\n    return int(int('1' + '0' * (10 + m)) ** 0.5) - 1",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=25, b=30, c=10) -> bool:\n    \"\"\"Find n such that n - a == b * (the sum of the first c integers)\"\"\"\n    return n - a == sum([b * i for i in range(c)])\ndef g(a=25, b=30, c=10):\n    return a + sum([b * i for i in range(c)])\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 99,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=25, b=30, c=10) -> bool:\n    \"\"\"Find n such that n - a == b * (the sum of the first c integers)\"\"\"\n    return n - a == sum([b * i for i in range(c)])",
        "solution_func": "def g(a=25, b=30, c=10):\n    return a + sum([b * i for i in range(c)])",
        "map_ix": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=7, b=3, c=20) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c odd integers)\"\"\"\n    return n + a == sum([b * (2*i + 1) for i in range(c)])\ndef g(a=7, b=3, c=20):\n    return -a + sum([b * (2*i + 1) for i in range(c)])\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 99,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=7, b=3, c=20) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c odd integers)\"\"\"\n    return n + a == sum([b * (2*i + 1) for i in range(c)])",
        "solution_func": "def g(a=7, b=3, c=20):\n    return -a + sum([b * (2*i + 1) for i in range(c)])",
        "map_ix": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=12, b=8, c=15) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c even integers)\"\"\"\n    return n + a == sum([b * (2*i) for i in range(c)])\ndef g(a=12, b=8, c=15):\n    return -a + sum([b * (2*i) for i in range(c)])\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 99,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=12, b=8, c=15) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c even integers)\"\"\"\n    return n + a == sum([b * (2*i) for i in range(c)])",
        "solution_func": "def g(a=12, b=8, c=15):\n    return -a + sum([b * (2*i) for i in range(c)])",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]]) -> bool:\n    \"\"\"Check if the given points form a rectangle.\"\"\"\n    x_values = [x for x, _ in points]\n    y_values = [y for _, y in points]\n    return len(set(x_values)) == 2 and len(set(y_values)) == 2\n\ndef g():\n    return [(1, 1), (1, 4), (4, 1), (4, 4)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 99,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(points: List[Tuple[int, int]]) -> bool:\n    \"\"\"Check if the given points form a rectangle.\"\"\"\n    x_values = [x for x, _ in points]\n    y_values = [y for _, y in points]\n    return len(set(x_values)) == 2 and len(set(y_values)) == 2",
        "solution_func": "def g():\n    return [(1, 1), (1, 4), (4, 1), (4, 4)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(sentence: str, target_word: str) -> bool:\n    \"\"\"Check if the target word appears in the given sentence.\"\"\"\n    words = sentence.split()\n    return target_word in words\n\ndef g(target_word=\"apple\"):\n    return \"I have an apple\"\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 99,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(sentence: str, target_word: str) -> bool:\n    \"\"\"Check if the target word appears in the given sentence.\"\"\"\n    words = sentence.split()\n    return target_word in words",
        "solution_func": "def g(target_word=\"apple\"):\n    return \"I have an apple\"",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a power of two.\"\"\"\n    return n > 0 and n & (n - 1) == 0\n\ndef g():\n    return 16\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 99,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a power of two.\"\"\"\n    return n > 0 and n & (n - 1) == 0",
        "solution_func": "def g():\n    return 16",
        "map_ix": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=777777) -> bool:\n    \"\"\"Check if x is divisible by a\"\"\"\n    return x % a == 0\ndef g(a=777777):\n    return a\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 99,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=777777) -> bool:\n    \"\"\"Check if x is divisible by a\"\"\"\n    return x % a == 0",
        "solution_func": "def g(a=777777):\n    return a",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: int, a=123456789) -> bool:\n    \"\"\"Check if the sum of digits in x is equal to a\"\"\"\n    return sum(map(int, str(x))) == a\ndef g(a=123456789):\n    return a * 9\nassert f(g())\n",
        "emb": null,
        "idx_generation": 99,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=123456789) -> bool:\n    \"\"\"Check if the sum of digits in x is equal to a\"\"\"\n    return sum(map(int, str(x))) == a",
        "solution_func": "def g(a=123456789):\n    return a * 9",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5) -> bool:\n    \"\"\"Check if n is a power of a\"\"\"\n    while (n % a == 0):\n        n = n / a\n    return n == 1\ndef g(a=5):\n    return a ** 8\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 99,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=5) -> bool:\n    \"\"\"Check if n is a power of a\"\"\"\n    while (n % a == 0):\n        n = n / a\n    return n == 1",
        "solution_func": "def g(a=5):\n    return a ** 8",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, num_repetitions=1000, num_trials=100, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of at least two people having the same birthday in a group of n is greater than 0.99.\"\"\"\n    import random\n    random.seed(0)\n    successes = 0\n    for _ in range(num_trials):\n        if any([len({random.randrange(year_len) for i in range(n)}) < n for _ in range(num_repetitions)]):\n            successes += 1\n    success_prob = successes / num_trials\n    return success_prob > 0.99\n\ndef g(num_repetitions=1000, num_trials=100, year_len=365):\n    n = 1\n    success_prob = 0.0\n    while success_prob <= 0.99:\n        distinct_prob = 1.0\n        for _ in range(num_trials):\n            distinct_prob *= (year_len - n) / year_len\n        success_prob = 1 - distinct_prob\n        n += 1\n    return n\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 99,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(n: int, num_repetitions=1000, num_trials=100, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of at least two people having the same birthday in a group of n is greater than 0.99.\"\"\"\n    import random\n    random.seed(0)\n    successes = 0\n    for _ in range(num_trials):\n        if any([len({random.randrange(year_len) for i in range(n)}) < n for _ in range(num_repetitions)]):\n            successes += 1\n    success_prob = successes / num_trials\n    return success_prob > 0.99",
        "solution_func": "def g(num_repetitions=1000, num_trials=100, year_len=365):\n    n = 1\n    success_prob = 0.0\n    while success_prob <= 0.99:\n        distinct_prob = 1.0\n        for _ in range(num_trials):\n            distinct_prob *= (year_len - n) / year_len\n        success_prob = 1 - distinct_prob\n        n += 1\n    return n",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target_sum.\"\"\"\n    return any((numbers[i] + numbers[j] == target_sum) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target_sum=100):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return numbers\nassert f(g())\n",
        "emb": null,
        "idx_generation": 100,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target_sum.\"\"\"\n    return any((numbers[i] + numbers[j] == target_sum) for i in range(len(numbers)) for j in range(i+1, len(numbers)))",
        "solution_func": "def g(target_sum=100):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_value=0) -> bool:\n    \"\"\"Check if the target_value exists in the given matrix.\"\"\"\n    return any((target_value in row) for row in matrix)\ndef g(target_value=0):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 100,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_value=0) -> bool:\n    \"\"\"Check if the target_value exists in the given matrix.\"\"\"\n    return any((target_value in row) for row in matrix)",
        "solution_func": "def g(target_value=0):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_divisor=5) -> bool:\n    \"\"\"Check if there exists a number in the list that is divisible by the target_divisor.\"\"\"\n    return any((num % target_divisor == 0) for num in numbers)\ndef g(target_divisor=5):\n    numbers = [10, 15, 20, 25, 30, 35, 40]\n    return numbers\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 100,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target_divisor=5) -> bool:\n    \"\"\"Check if there exists a number in the list that is divisible by the target_divisor.\"\"\"\n    return any((num % target_divisor == 0) for num in numbers)",
        "solution_func": "def g(target_divisor=5):\n    numbers = [10, 15, 20, 25, 30, 35, 40]\n    return numbers",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3) -> bool:\n    \"\"\"Check if n is a multiple of a\"\"\"\n    return n % a == 0\ndef g(a=3):\n    return a * 7\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 100,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=3) -> bool:\n    \"\"\"Check if n is a multiple of a\"\"\"\n    return n % a == 0",
        "solution_func": "def g(a=3):\n    return a * 7",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=7) -> bool:\n    \"\"\"Check if n is divisible by a and has exactly 3 factors\"\"\"\n    factors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n    return len(factors) == 3 and n % a == 0\ndef g(a=7):\n    return a * 13\nassert f(g())\n",
        "emb": null,
        "idx_generation": 100,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=7) -> bool:\n    \"\"\"Check if n is divisible by a and has exactly 3 factors\"\"\"\n    factors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n    return len(factors) == 3 and n % a == 0",
        "solution_func": "def g(a=7):\n    return a * 13",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2) -> bool:\n    \"\"\"Check if n is a perfect square and is divisible by a\"\"\"\n    return (n ** 0.5).is_integer() and n % a == 0\ndef g(a=2):\n    return a ** 6\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 100,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=2) -> bool:\n    \"\"\"Check if n is a perfect square and is divisible by a\"\"\"\n    return (n ** 0.5).is_integer() and n % a == 0",
        "solution_func": "def g(a=2):\n    return a ** 6",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], suffix='') -> bool:\n    \"\"\"Check if any word in the list words ends with the given suffix.\"\"\"\n    for word in words:\n        if word.endswith(suffix):\n            return True\n    return False\n\ndef g(words: List[str]):\n    return words\n\nassert f(g(['apple', 'banana', 'cherry']), suffix='y')\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 100,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], suffix='') -> bool:\n    \"\"\"Check if any word in the list words ends with the given suffix.\"\"\"\n    for word in words:\n        if word.endswith(suffix):\n            return True\n    return False",
        "solution_func": "def g(words: List[str]):\n    return words",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find a triplet of numbers from a list that add up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=20):\n    return [5, 7, target-12]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 100,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find a triplet of numbers from a list that add up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=20):\n    return [5, 7, target-12]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], length=5) -> bool:\n    \"\"\"Check if any word in the list words has a length greater than the given length.\"\"\"\n    for word in words:\n        if len(word) > length:\n            return True\n    return False\n\ndef g(length=5):\n    return ['apple', 'banana', 'cherry']\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 100,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], length=5) -> bool:\n    \"\"\"Check if any word in the list words has a length greater than the given length.\"\"\"\n    for word in words:\n        if len(word) > length:\n            return True\n    return False",
        "solution_func": "def g(length=5):\n    return ['apple', 'banana', 'cherry']",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(a: int, b: int, c: int, d: int) -> bool:\n    \"\"\"Check if the sum of a and b is equal to c and d, and the product of a and b is divisible by c and d\"\"\"\n    return (a + b == c + d) and (a * b) % (c * d) == 0\n\ndef g(c: int, d: int):\n    return c * d\n\nassert f(g(3, 4), 2, 5, 6)\n",
        "emb": null,
        "idx_generation": 100,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(a: int, b: int, c: int, d: int) -> bool:\n    \"\"\"Check if the sum of a and b is equal to c and d, and the product of a and b is divisible by c and d\"\"\"\n    return (a + b == c + d) and (a * b) % (c * d) == 0",
        "solution_func": "def g(c: int, d: int):\n    return c * d",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=42) -> bool:\n    \"\"\"Find a combination of numbers that adds up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for r in range(len(nums)+1) for comb in combinations(nums, r))\ndef g(target=42):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target-45]\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 101,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=42) -> bool:\n    \"\"\"Find a combination of numbers that adds up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for r in range(len(nums)+1) for comb in combinations(nums, r))",
        "solution_func": "def g(target=42):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target-45]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], num_rows=4, num_cols=4) -> bool:\n    \"\"\"Check if the given matrix is a magic square\"\"\"\n    row_sum = sum(matrix[0])\n    col_sum = sum(matrix[i][0] for i in range(num_rows))\n    diag_sum1 = sum(matrix[i][i] for i in range(num_rows))\n    diag_sum2 = sum(matrix[i][num_rows-i-1] for i in range(num_rows))\n    return all(sum(matrix[i]) == row_sum for i in range(num_rows)) and \\\n           all(sum(matrix[i][j] for i in range(num_rows)) == col_sum for j in range(num_cols)) and \\\n           diag_sum1 == diag_sum2 == row_sum\ndef g(num_rows=4, num_cols=4):\n    matrix = [[1] * num_cols for _ in range(num_rows)]\n    return matrix\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 101,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], num_rows=4, num_cols=4) -> bool:\n    \"\"\"Check if the given matrix is a magic square\"\"\"\n    row_sum = sum(matrix[0])\n    col_sum = sum(matrix[i][0] for i in range(num_rows))\n    diag_sum1 = sum(matrix[i][i] for i in range(num_rows))\n    diag_sum2 = sum(matrix[i][num_rows-i-1] for i in range(num_rows))\n    return all(sum(matrix[i]) == row_sum for i in range(num_rows)) and \\\n           all(sum(matrix[i][j] for i in range(num_rows)) == col_sum for j in range(num_cols)) and \\\n           diag_sum1 == diag_sum2 == row_sum",
        "solution_func": "def g(num_rows=4, num_cols=4):\n    matrix = [[1] * num_cols for _ in range(num_rows)]\n    return matrix",
        "map_ix": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Find a subarray with a specific target sum\"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum == target or prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\ndef g(target=0):\n    return [1, 2, 3, 4, target-10]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 101,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Find a subarray with a specific target sum\"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum == target or prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False",
        "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, target-10]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that multiply to give the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 101,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that multiply to give the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a difference of the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if abs(nums[i] - nums[j]) == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 101,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a difference of the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if abs(nums[i] - nums[j]) == target:\n                return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a product greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] * nums[j] > target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 101,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a product greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] * nums[j] > target:\n                return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums",
        "map_ix": [
            1,
            1,
            0,
            0,
            1,
            1,
            0,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target value\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 101,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target value\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is a square matrix\"\"\"\n    return len(matrix) == len(matrix[0])\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 101,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is a square matrix\"\"\"\n    return len(matrix) == len(matrix[0])",
        "solution_func": "def g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, n=3) -> bool:\n    \"\"\"Check if a given string has exactly n consecutive vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(string)):\n        if string[i] in vowels:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False\ndef g(n=3):\n    return \"aiou\"\nassert f(g())",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 101,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, n=3) -> bool:\n    \"\"\"Check if a given string has exactly n consecutive vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(string)):\n        if string[i] in vowels:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False",
        "solution_func": "def g(n=3):\n    return \"aiou\"",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if the sum of any two elements in the given list is equal to the target value.\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=100):\n    return random.sample(range(1, 101), 10)\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 101,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if the sum of any two elements in the given list is equal to the target value.\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=100):\n    return random.sample(range(1, 101), 10)",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if any two numbers in the list add up to the target value.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(numbers: List[int]):\n    return numbers\n\nassert f(g([1, 2, 3, 4, 5]), target=7)\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 102,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if any two numbers in the list add up to the target value.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False",
        "solution_func": "def g(numbers: List[int]):\n    return numbers",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix.\"\"\"\n    rows = len(matrix)\n    for row in matrix:\n        if len(row) != rows:\n            return False\n    return True\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\nassert f(g([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 102,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix.\"\"\"\n    rows = len(matrix)\n    for row in matrix:\n        if len(row) != rows:\n            return False\n    return True",
        "solution_func": "def g(matrix: List[List[int]]):\n    return matrix",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], n: int) -> bool:\n    \"\"\"Check if the sum of any n consecutive numbers in the list is divisible by n.\"\"\"\n    for i in range(len(numbers) - n + 1):\n        if sum(numbers[i:i+n]) % n == 0:\n            return True\n    return False\n\ndef g(numbers: List[int]):\n    return numbers\n\nassert f(g([1, 2, 3, 4, 5]), n=3)\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 102,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], n: int) -> bool:\n    \"\"\"Check if the sum of any n consecutive numbers in the list is divisible by n.\"\"\"\n    for i in range(len(numbers) - n + 1):\n        if sum(numbers[i:i+n]) % n == 0:\n            return True\n    return False",
        "solution_func": "def g(numbers: List[int]):\n    return numbers",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target_sum\"\"\"\n    return any((numbers[i] + numbers[j] == target_sum) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 102,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target_sum\"\"\"\n    return any((numbers[i] + numbers[j] == target_sum) for i in range(len(numbers)) for j in range(i+1, len(numbers)))",
        "solution_func": "def g(target_sum=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(names: List[str], target_length=5) -> bool:\n    \"\"\"Check if there is a name in the list that has a length of target_length\"\"\"\n    return any(len(name) == target_length for name in names)\n\ndef g(target_length=5):\n    return [\"Alice\", \"Bob\", \"Charlie\", \"Dave\"]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 102,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(names: List[str], target_length=5) -> bool:\n    \"\"\"Check if there is a name in the list that has a length of target_length\"\"\"\n    return any(len(name) == target_length for name in names)",
        "solution_func": "def g(target_length=5):\n    return [\"Alice\", \"Bob\", \"Charlie\", \"Dave\"]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_product=24) -> bool:\n    \"\"\"Check if there are two numbers in the list that multiply to give the target_product\"\"\"\n    return any((numbers[i] * numbers[j] == target_product) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\n\ndef g(target_product=24):\n    return [2, 3, 4, 6]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 102,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_product=24) -> bool:\n    \"\"\"Check if there are two numbers in the list that multiply to give the target_product\"\"\"\n    return any((numbers[i] * numbers[j] == target_product) for i in range(len(numbers)) for j in range(i+1, len(numbers)))",
        "solution_func": "def g(target_product=24):\n    return [2, 3, 4, 6]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, k: int) -> bool:\n    \"\"\"Check if there are k numbers in the list that add up to the target\"\"\"\n    def helper(nums, target, k):\n        if k == 0:\n            return target == 0\n        if target < 0 or k > len(nums):\n            return False\n        if helper(nums[1:], target - nums[0], k - 1):\n            return True\n        return helper(nums[1:], target, k)\n    \n    return helper(nums, target, k)\n\ndef g():\n    return [1, 4, 7, 3, 9, 2, 5], 10, 3\n\nassert f(*g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 102,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, k: int) -> bool:\n    \"\"\"Check if there are k numbers in the list that add up to the target\"\"\"\n    def helper(nums, target, k):\n        if k == 0:\n            return target == 0\n        if target < 0 or k > len(nums):\n            return False\n        if helper(nums[1:], target - nums[0], k - 1):\n            return True\n        return helper(nums[1:], target, k)\n    \n    return helper(nums, target, k)",
        "solution_func": "def g():\n    return [1, 4, 7, 3, 9, 2, 5], 10, 3",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"Find the number of pairs of numbers in the list that add up to the target\"\"\"\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                count += 1\n    return count\n\ndef g():\n    return [1, 4, 7, 3, 9, 2, 5], 10\n\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 102,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"Find the number of pairs of numbers in the list that add up to the target\"\"\"\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                count += 1\n    return count",
        "solution_func": "def g():\n    return [1, 4, 7, 3, 9, 2, 5], 10",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[List[int]]:\n    \"\"\"Find all pairs of numbers in the list that add up to the target\"\"\"\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                pairs.append([nums[i], nums[j]])\n    return pairs\n\ndef g():\n    return [1, 4, 7, 3, 9, 2, 5], 10\n\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 102,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[List[int]]:\n    \"\"\"Find all pairs of numbers in the list that add up to the target\"\"\"\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                pairs.append([nums[i], nums[j]])\n    return pairs",
        "solution_func": "def g():\n    return [1, 4, 7, 3, 9, 2, 5], 10",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, factors: List[int]=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is divisible by all of the given factors.\n    - n: the number to be checked\n    - factors: list of factors\"\"\"\n    for factor in factors:\n        if n % factor != 0:\n            return False\n    return True\ndef g(n: int, factors: List[int]=[2, 3, 5]):\n    return n\nassert f(g(15))\n",
        "emb": null,
        "idx_generation": 102,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, factors: List[int]=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is divisible by all of the given factors.\n    - n: the number to be checked\n    - factors: list of factors\"\"\"\n    for factor in factors:\n        if n % factor != 0:\n            return False\n    return True",
        "solution_func": "def g(n: int, factors: List[int]=[2, 3, 5]):\n    return n",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=12):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 103,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=12):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, x=50, y=10) -> bool:\n    \"\"\"Check if the given number is a perfect square and its square root is between x and y\"\"\"\n    return sqrt(n) == int(sqrt(n)) and x <= sqrt(n) <= y\n\ndef g(x=50, y=10):\n    return x ** 2\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 103,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, x=50, y=10) -> bool:\n    \"\"\"Check if the given number is a perfect square and its square root is between x and y\"\"\"\n    return sqrt(n) == int(sqrt(n)) and x <= sqrt(n) <= y",
        "solution_func": "def g(x=50, y=10):\n    return x ** 2",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\nfrom random import randint\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [randint(1, 9) for _ in range(5)]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 103,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\nfrom random import randint\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [randint(1, 9) for _ in range(5)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, k=4) -> bool:\n    \"\"\"Check if a string contains at least k occurrences of a specific character.\"\"\"\n    return string.count('b') >= k\ndef g(k=4):\n    return 'b' * k\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 103,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, k=4) -> bool:\n    \"\"\"Check if a string contains at least k occurrences of a specific character.\"\"\"\n    return string.count('b') >= k",
        "solution_func": "def g(k=4):\n    return 'b' * k",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, k=2) -> bool:\n    \"\"\"Check if a string contains at most k occurrences of a specific character.\"\"\"\n    return string.count('c') <= k\ndef g(k=2):\n    return 'c' * k\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 103,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, k=2) -> bool:\n    \"\"\"Check if a string contains at most k occurrences of a specific character.\"\"\"\n    return string.count('c') <= k",
        "solution_func": "def g(k=2):\n    return 'c' * k",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, k=5) -> bool:\n    \"\"\"Check if a string contains more than k occurrences of a specific character.\"\"\"\n    return string.count('d') > k\ndef g(k=5):\n    return 'd' * (k + 1)\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 103,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, k=5) -> bool:\n    \"\"\"Check if a string contains more than k occurrences of a specific character.\"\"\"\n    return string.count('d') > k",
        "solution_func": "def g(k=5):\n    return 'd' * (k + 1)",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3) -> bool:\n    \"\"\"Check if n is divisible by a\"\"\"\n    return n % a == 0\ndef g(a=3):\n    return a * 8\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 103,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=3) -> bool:\n    \"\"\"Check if n is divisible by a\"\"\"\n    return n % a == 0",
        "solution_func": "def g(a=3):\n    return a * 8",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=4) -> bool:\n    \"\"\"Check if n is a perfect square\"\"\"\n    return n ** 0.5 == int(n ** 0.5)\ndef g(a=4):\n    return a * a\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 103,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=4) -> bool:\n    \"\"\"Check if n is a perfect square\"\"\"\n    return n ** 0.5 == int(n ** 0.5)",
        "solution_func": "def g(a=4):\n    return a * a",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list that sum up to the target\"\"\"\n    seen = set()\n    for num in numbers:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    return [2, 4, 6, 8]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 103,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list that sum up to the target\"\"\"\n    seen = set()\n    for num in numbers:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=10):\n    return [2, 4, 6, 8]",
        "map_ix": [
            1,
            1,
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are three numbers in the list that multiply to the target\"\"\"\n    def helper(nums, target, count):\n        if count == 0:\n            return target == 1\n        if target < 1 or count > len(nums):\n            return False\n        if helper(nums[1:], target / nums[0], count - 1):\n            return True\n        return helper(nums[1:], target, count)\n    \n    return helper(nums, target, 3)\n\ndef g():\n    return [2, 4, 6, 3, 9, 2, 5], 48\n\nassert f(*g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 103,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are three numbers in the list that multiply to the target\"\"\"\n    def helper(nums, target, count):\n        if count == 0:\n            return target == 1\n        if target < 1 or count > len(nums):\n            return False\n        if helper(nums[1:], target / nums[0], count - 1):\n            return True\n        return helper(nums[1:], target, count)\n    \n    return helper(nums, target, 3)",
        "solution_func": "def g():\n    return [2, 4, 6, 3, 9, 2, 5], 48",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are two consecutive numbers in the list that multiply to give 20.\"\"\"\n    for i in range(len(nums)-1):\n        if nums[i] * nums[i+1] == 20:\n            return True\n    return False\n\ndef g():\n    return [2, 3, 4, 5, -1, -2, -5, 10]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 104,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are two consecutive numbers in the list that multiply to give 20.\"\"\"\n    for i in range(len(nums)-1):\n        if nums[i] * nums[i+1] == 20:\n            return True\n    return False",
        "solution_func": "def g():\n    return [2, 3, 4, 5, -1, -2, -5, 10]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='python') -> bool:\n    \"\"\"Check if the word is present in the string, ignoring case\"\"\"\n    return word.lower() in s.lower()\n\ndef g(word='python'):\n    return \"Welcome to the Python programming language!\"\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 104,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, word='python') -> bool:\n    \"\"\"Check if the word is present in the string, ignoring case\"\"\"\n    return word.lower() in s.lower()",
        "solution_func": "def g(word='python'):\n    return \"Welcome to the Python programming language!\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if any element in the matrix is divisible by n\"\"\"\n    for row in matrix:\n        for element in row:\n            if element % n == 0:\n                return True\n    return False\n\ndef g(n=3):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 104,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if any element in the matrix is divisible by n\"\"\"\n    for row in matrix:\n        for element in row:\n            if element % n == 0:\n                return True\n    return False",
        "solution_func": "def g(n=3):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=10) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=10):\n    return [i**3 for i in range(1, k+1)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 104,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], k=10) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False",
        "solution_func": "def g(k=10):\n    return [i**3 for i in range(1, k+1)]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=100) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=100):\n    return [i**2 for i in range(1, k+1)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 104,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], k=100) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False",
        "solution_func": "def g(k=100):\n    return [i**2 for i in range(1, k+1)]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=8) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=8):\n    return [i**2 for i in range(1, k+1)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 104,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], k=8) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False",
        "solution_func": "def g(k=8):\n    return [i**2 for i in range(1, k+1)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=12, b=5, c=10) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c even integers)\"\"\"\n    return n + a == sum([b * (2*i) for i in range(1, c+1)])\ndef g(a=12, b=5, c=10):\n    return -a + sum([b * (2*i) for i in range(1, c+1)])\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 104,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=12, b=5, c=10) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c even integers)\"\"\"\n    return n + a == sum([b * (2*i) for i in range(1, c+1)])",
        "solution_func": "def g(a=12, b=5, c=10):\n    return -a + sum([b * (2*i) for i in range(1, c+1)])",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_row=3, target_col=3, target_value=20) -> bool:\n    \"\"\"Find if the target value is present in the given matrix at the specified position\"\"\"\n    return matrix[target_row][target_col] == target_value\ndef g(matrix: List[List[int]], target_row=3, target_col=3, target_value=20):\n    matrix[target_row][target_col] = target_value\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 104,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_row=3, target_col=3, target_value=20) -> bool:\n    \"\"\"Find if the target value is present in the given matrix at the specified position\"\"\"\n    return matrix[target_row][target_col] == target_value",
        "solution_func": "def g(matrix: List[List[int]], target_row=3, target_col=3, target_value=20):\n    matrix[target_row][target_col] = target_value\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='puzzle', count=2, length=14) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring='puzzle', count=2, length=14):\n    c = chr(1 + max((ord(c) for c in substring or 'a')))\n    return substring * count + (length - len(substring) * count) * c\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 104,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring='puzzle', count=2, length=14) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length",
        "solution_func": "def g(substring='puzzle', count=2, length=14):\n    c = chr(1 + max((ord(c) for c in substring or 'a')))\n    return substring * count + (length - len(substring) * count) * c",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Find a pair of numbers in the list that adds up to the target_sum\"\"\"\n    return any((x + y == target_sum for x in arr for y in arr if x != y))\n\ndef g(target_sum=100):\n    return [50, 50]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 104,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Find a pair of numbers in the list that adds up to the target_sum\"\"\"\n    return any((x + y == target_sum for x in arr for y in arr if x != y))",
        "solution_func": "def g(target_sum=100):\n    return [50, 50]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target_sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target_sum:\n                    return True\n    return False\n\ndef g(target_sum=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 105,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target_sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target_sum:\n                    return True\n    return False",
        "solution_func": "def g(target_sum=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], letter='a') -> bool:\n    \"\"\"Check if all words in the list start with the specified letter.\"\"\"\n    return all(word[0] == letter for word in words)\n\ndef g(letter='a'):\n    return ['apple', 'ant', 'artichoke', 'avocado']\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 105,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], letter='a') -> bool:\n    \"\"\"Check if all words in the list start with the specified letter.\"\"\"\n    return all(word[0] == letter for word in words)",
        "solution_func": "def g(letter='a'):\n    return ['apple', 'ant', 'artichoke', 'avocado']",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    if rows != cols:\n        return False\n    \n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 105,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    if rows != cols:\n        return False\n    \n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True",
        "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[List[int]], target=100) -> bool:\n    \"\"\"Given a list of lists, check if there is a sublist that sums up to the target value.\"\"\"\n    for sublist in x:\n        if sum(sublist) == target:\n            return True\n    return False\n\ndef g(target=100):\n    return [[10, 20, 30], [40, 50, 60], [70, 80, 90], [100, 200, 300]]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 105,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(x: List[List[int]], target=100) -> bool:\n    \"\"\"Given a list of lists, check if there is a sublist that sums up to the target value.\"\"\"\n    for sublist in x:\n        if sum(sublist) == target:\n            return True\n    return False",
        "solution_func": "def g(target=100):\n    return [[10, 20, 30], [40, 50, 60], [70, 80, 90], [100, 200, 300]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=-141336, b=72, c=4) -> bool:\n    \"\"\"Solve a multiplication problem with an additional parameter\"\"\"\n    return b * n + a % b == c * a\n\ndef g(a=-141336, b=72, c=4):\n    return a // b\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 105,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=-141336, b=72, c=4) -> bool:\n    \"\"\"Solve a multiplication problem with an additional parameter\"\"\"\n    return b * n + a % b == c * a",
        "solution_func": "def g(a=-141336, b=72, c=4):\n    return a // b",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(substring: str, string='nyvyfytibuquyquuchudemixyzychumanachozyquiquowutextyvomyzychyme', count=4, start=0) -> bool:\n    \"\"\"Find a substring with a certain count in a given string, starting from a specific index\"\"\"\n    return string.count(substring, start) == count\n\ndef g(string='nyvyfytibuquyquuchudemixyzychumanachozyquiquowutextyvomyzychyme', count=4, start=10):\n    for i in range(start, len(string)):\n        for j in range(i + 1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 105,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(substring: str, string='nyvyfytibuquyquuchudemixyzychumanachozyquiquowutextyvomyzychyme', count=4, start=0) -> bool:\n    \"\"\"Find a substring with a certain count in a given string, starting from a specific index\"\"\"\n    return string.count(substring, start) == count",
        "solution_func": "def g(string='nyvyfytibuquyquuchudemixyzychumanachozyquiquowutextyvomyzychyme', count=4, start=10):\n    for i in range(start, len(string)):\n        for j in range(i + 1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return arr\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 105,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return arr",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if the given values represent a Pythagorean triplet\"\"\"\n    return x**2 + y**2 == z**2\n\ndef g(x=3, y=4, z=5):\n    return x, y, z\n\nassert f(*g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 105,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if the given values represent a Pythagorean triplet\"\"\"\n    return x**2 + y**2 == z**2",
        "solution_func": "def g(x=3, y=4, z=5):\n    return x, y, z",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in non-decreasing order\"\"\"\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 105,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in non-decreasing order\"\"\"\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5]):\n    return arr",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if there exist three numbers in the list that sum up to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 105,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if there exist three numbers in the list that sum up to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=100):\n    return [10, 20, 30, 40, 50]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=2) -> bool:\n    \"\"\"Check if a string contains exactly n consecutive consonants\"\"\"\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    count = 0\n    for char in s:\n        if char.lower() in consonants:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False\ndef g(n=2):\n    return 'bcdfghj' + 'a' * (n - 7)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 106,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=2) -> bool:\n    \"\"\"Check if a string contains exactly n consecutive consonants\"\"\"\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    count = 0\n    for char in s:\n        if char.lower() in consonants:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False",
        "solution_func": "def g(n=2):\n    return 'bcdfghj' + 'a' * (n - 7)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if the sum of any two elements in a given list is equal to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=0):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 106,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if the sum of any two elements in a given list is equal to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=0) -> bool:\n    \"\"\"Check if a given matrix contains exactly n rows with a sum of elements equal to 0\"\"\"\n    count = 0\n    for row in matrix:\n        if sum(row) == n:\n            count += 1\n            if count == n:\n                return True\n    return False\ndef g(n=0):\n    return [[1, 2, 3], [4, -6, 2], [3, 1, -4]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 106,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=0) -> bool:\n    \"\"\"Check if a given matrix contains exactly n rows with a sum of elements equal to 0\"\"\"\n    count = 0\n    for row in matrix:\n        if sum(row) == n:\n            count += 1\n            if count == n:\n                return True\n    return False",
        "solution_func": "def g(n=0):\n    return [[1, 2, 3], [4, -6, 2], [3, 1, -4]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is an upper triangular matrix\"\"\"\n    return all(matrix[i][j] == 0 for i in range(len(matrix)) for j in range(i+1, len(matrix[i])))\ndef g():\n    return [[1, 2, 3], [0, 4, 5], [0, 0, 6]]\nassert f(g())\n\n",
        "emb": null,
        "idx_generation": 106,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is an upper triangular matrix\"\"\"\n    return all(matrix[i][j] == 0 for i in range(len(matrix)) for j in range(i+1, len(matrix[i])))",
        "solution_func": "def g():\n    return [[1, 2, 3], [0, 4, 5], [0, 0, 6]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a diagonal matrix\"\"\"\n    return all(matrix[i][j] == 0 for i in range(len(matrix)) for j in range(len(matrix[i])) if i != j)\ndef g():\n    return [[1, 0, 0], [0, 4, 0], [0, 0, 6]]\nassert f(g())\n\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 106,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a diagonal matrix\"\"\"\n    return all(matrix[i][j] == 0 for i in range(len(matrix)) for j in range(len(matrix[i])) if i != j)",
        "solution_func": "def g():\n    return [[1, 0, 0], [0, 4, 0], [0, 0, 6]]",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is an identity matrix\"\"\"\n    return all(matrix[i][j] == 1 if i == j else matrix[i][j] == 0 for i in range(len(matrix)) for j in range(len(matrix[i])))\ndef g():\n    return [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\nassert f(g())\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 106,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is an identity matrix\"\"\"\n    return all(matrix[i][j] == 1 if i == j else matrix[i][j] == 0 for i in range(len(matrix)) for j in range(len(matrix[i])))",
        "solution_func": "def g():\n    return [[1, 0, 0], [0, 1, 0], [0, 0, 1]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, weekday=2) -> bool:\n    \"\"\"Check if the given date falls on a specified weekday\n    - date: datetime.date object representing the date\n    - weekday: integer representing the weekday (0 - Monday, 6 - Sunday)\"\"\"\n\n    return date.weekday() == weekday\n\ndef g(weekday=2):\n    return datetime.date(2022, 3, 23)  # March 23, 2022 is a Wednesday\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 106,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, weekday=2) -> bool:\n    \"\"\"Check if the given date falls on a specified weekday\n    - date: datetime.date object representing the date\n    - weekday: integer representing the weekday (0 - Monday, 6 - Sunday)\"\"\"\n\n    return date.weekday() == weekday",
        "solution_func": "def g(weekday=2):\n    return datetime.date(2022, 3, 23)  # March 23, 2022 is a Wednesday",
        "map_ix": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, start_date=datetime.date(2022, 1, 1), end_date=datetime.date(2022, 12, 31)) -> bool:\n    \"\"\"Check if the given date falls within a specified date range\n    - date: datetime.date object representing the date\n    - start_date: datetime.date object representing the start of the date range (inclusive)\n    - end_date: datetime.date object representing the end of the date range (inclusive)\"\"\"\n\n    return start_date <= date <= end_date\n\ndef g(start_date=datetime.date(2022, 1, 1), end_date=datetime.date(2022, 12, 31)):\n    return datetime.date(2022, 6, 15)  # June 15, 2022\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 106,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, start_date=datetime.date(2022, 1, 1), end_date=datetime.date(2022, 12, 31)) -> bool:\n    \"\"\"Check if the given date falls within a specified date range\n    - date: datetime.date object representing the date\n    - start_date: datetime.date object representing the start of the date range (inclusive)\n    - end_date: datetime.date object representing the end of the date range (inclusive)\"\"\"\n\n    return start_date <= date <= end_date",
        "solution_func": "def g(start_date=datetime.date(2022, 1, 1), end_date=datetime.date(2022, 12, 31)):\n    return datetime.date(2022, 6, 15)  # June 15, 2022",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, month=7) -> bool:\n    \"\"\"Check if the given date falls within a specified month\n    - date: datetime.date object representing the date\n    - month: integer representing the month (1 - January, 12 - December)\"\"\"\n\n    return date.month == month\n\ndef g(month=7):\n    return datetime.date(2022, month, 1)  # July 1, 2022\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 106,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, month=7) -> bool:\n    \"\"\"Check if the given date falls within a specified month\n    - date: datetime.date object representing the date\n    - month: integer representing the month (1 - January, 12 - December)\"\"\"\n\n    return date.month == month",
        "solution_func": "def g(month=7):\n    return datetime.date(2022, month, 1)  # July 1, 2022",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are two consecutive numbers in the list that add up to 10.\"\"\"\n    for i in range(len(nums)-1):\n        if nums[i] + nums[i+1] == 10:\n            return True\n    return False\n\ndef g():\n    return [5, 9, 2, 7, 1, 3]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 106,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are two consecutive numbers in the list that add up to 10.\"\"\"\n    for i in range(len(nums)-1):\n        if nums[i] + nums[i+1] == 10:\n            return True\n    return False",
        "solution_func": "def g():\n    return [5, 9, 2, 7, 1, 3]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array whose difference is equal to the maximum value in the array.\"\"\"\n    return any(abs(arr[i] - arr[j]) == max(arr) for i in range(len(arr)) for j in range(i+1, len(arr)))\ndef g():\n    return [1, 3, 5, 7, 9, 11, 13, 15, 17]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 107,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array whose difference is equal to the maximum value in the array.\"\"\"\n    return any(abs(arr[i] - arr[j]) == max(arr) for i in range(len(arr)) for j in range(i+1, len(arr)))",
        "solution_func": "def g():\n    return [1, 3, 5, 7, 9, 11, 13, 15, 17]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return string == string[::-1]\ndef g():\n    return \"racecar\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 107,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return string == string[::-1]",
        "solution_func": "def g():\n    return \"racecar\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the sum of all positive numbers in the array is equal to the sum of all negative numbers in the array.\"\"\"\n    positive_sum = sum(num for num in arr if num > 0)\n    negative_sum = sum(num for num in arr if num < 0)\n    return positive_sum == negative_sum\ndef g():\n    return [1, -2, 3, -4, 5, -6, 7, -8, 9]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 107,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the sum of all positive numbers in the array is equal to the sum of all negative numbers in the array.\"\"\"\n    positive_sum = sum(num for num in arr if num > 0)\n    negative_sum = sum(num for num in arr if num < 0)\n    return positive_sum == negative_sum",
        "solution_func": "def g():\n    return [1, -2, 3, -4, 5, -6, 7, -8, 9]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], n=10) -> bool:\n    \"\"\"Given an array of integers arr and an integer n, find the sum of the first n elements of arr.\nSample Input:\narr = [1, 2, 3, 4, 5]\nn = 3\nSample Output:\n6\"\"\"\n    assert n <= len(arr), 'Hint: n is greater than the length of arr'\n    return sum(arr[:n]) == 6\ndef g(n=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 107,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], n=10) -> bool:\n    \"\"\"Given an array of integers arr and an integer n, find the sum of the first n elements of arr.\nSample Input:\narr = [1, 2, 3, 4, 5]\nn = 3\nSample Output:\n6\"\"\"\n    assert n <= len(arr), 'Hint: n is greater than the length of arr'\n    return sum(arr[:n]) == 6",
        "solution_func": "def g(n=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=8) -> bool:\n    \"\"\"Given an array of integers arr and a target integer, find two numbers in arr that sum up to the target.\nSample Input:\narr = [2, 4, 6, 8, 10]\ntarget = 12\nSample Output:\nTrue\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=8):\n    return [2, 4, 6, 8, 10]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 107,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=8) -> bool:\n    \"\"\"Given an array of integers arr and a target integer, find two numbers in arr that sum up to the target.\nSample Input:\narr = [2, 4, 6, 8, 10]\ntarget = 12\nSample Output:\nTrue\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=8):\n    return [2, 4, 6, 8, 10]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], n=5) -> bool:\n    \"\"\"Given an array of integers arr and an integer n, check if there are exactly n even numbers in arr.\nSample Input:\narr = [1, 2, 3, 4, 5]\nn = 2\nSample Output:\nTrue\"\"\"\n    assert n <= len(arr), 'Hint: n is greater than the length of arr'\n    even_count = sum(1 for num in arr if num % 2 == 0)\n    return even_count == n\ndef g(n=5):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 107,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], n=5) -> bool:\n    \"\"\"Given an array of integers arr and an integer n, check if there are exactly n even numbers in arr.\nSample Input:\narr = [1, 2, 3, 4, 5]\nn = 2\nSample Output:\nTrue\"\"\"\n    assert n <= len(arr), 'Hint: n is greater than the length of arr'\n    even_count = sum(1 for num in arr if num % 2 == 0)\n    return even_count == n",
        "solution_func": "def g(n=5):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 107,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(strings: List[str], length=5) -> bool:\n    \"\"\"Check if all strings in the list have a length greater than or equal to the specified length\"\"\"\n    return all(len(s) >= length for s in strings)\n\ndef g(length=5):\n    return [\"apple\", \"banana\", \"pear\", \"kiwi\", \"orange\"]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 107,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(strings: List[str], length=5) -> bool:\n    \"\"\"Check if all strings in the list have a length greater than or equal to the specified length\"\"\"\n    return all(len(s) >= length for s in strings)",
        "solution_func": "def g(length=5):\n    return [\"apple\", \"banana\", \"pear\", \"kiwi\", \"orange\"]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\n\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 107,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Check if there are three numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return arr\n\nassert f(g())\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 107,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Check if there are three numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return arr",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10) -> bool:\n    \"\"\"Check if n is a multiple of a\"\"\"\n    return n % a == 0\ndef g(a=10):\n    return a * 7\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 108,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=10) -> bool:\n    \"\"\"Check if n is a multiple of a\"\"\"\n    return n % a == 0",
        "solution_func": "def g(a=10):\n    return a * 7",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=5) -> bool:\n    \"\"\"Check if n is a power of a\"\"\"\n    return a ** int(n ** 0.5) == n\ndef g(a=5):\n    return a ** 3\nassert f(g())\n",
        "emb": null,
        "idx_generation": 108,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=5) -> bool:\n    \"\"\"Check if n is a power of a\"\"\"\n    return a ** int(n ** 0.5) == n",
        "solution_func": "def g(a=5):\n    return a ** 3",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=2) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g(a=2):\n    return a ** 5\nassert f(g())\n",
        "emb": null,
        "idx_generation": 108,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=2) -> bool:\n    \"\"\"Check if n is a prime number\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g(a=2):\n    return a ** 5",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target value\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(lst: List[int], target=100):\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return [lst[i], lst[j]]\n    return []\nassert f(g())\n",
        "emb": null,
        "idx_generation": 108,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target value\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False",
        "solution_func": "def g(lst: List[int], target=100):\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return [lst[i], lst[j]]\n    return []",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(phrase: str, char='e') -> bool:\n    \"\"\"Check if the given character is the most frequent character in the phrase\"\"\"\n    freq = {}\n    for c in phrase:\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    max_freq = max(freq.values())\n    most_frequent = [c for c, f in freq.items() if f == max_freq]\n    return char in most_frequent\ndef g(phrase: str, char='e'):\n    freq = {}\n    for c in phrase:\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    max_freq = max(freq.values())\n    most_frequent = [c for c, f in freq.items() if f == max_freq]\n    return most_frequent[0] if most_frequent else ''\nassert f(g())\n",
        "emb": null,
        "idx_generation": 108,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(phrase: str, char='e') -> bool:\n    \"\"\"Check if the given character is the most frequent character in the phrase\"\"\"\n    freq = {}\n    for c in phrase:\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    max_freq = max(freq.values())\n    most_frequent = [c for c, f in freq.items() if f == max_freq]\n    return char in most_frequent",
        "solution_func": "def g(phrase: str, char='e'):\n    freq = {}\n    for c in phrase:\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    max_freq = max(freq.values())\n    most_frequent = [c for c, f in freq.items() if f == max_freq]\n    return most_frequent[0] if most_frequent else ''",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given number is a perfect square root of any number in the list\"\"\"\n    return any(n == num**2 for num in nums)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return next((num for num in nums if num**2 == n), None)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 108,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given number is a perfect square root of any number in the list\"\"\"\n    return any(n == num**2 for num in nums)",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return next((num for num in nums if num**2 == n), None)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Check if there exist three numbers in the list that sum up to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\n\ndef g(target=20):\n    return [2, 4, 6, 8, 10, 12]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 108,
        "target_skills": null,
        "problem_func": "from typing import*\n\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Check if there exist three numbers in the list that sum up to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=20):\n    return [2, 4, 6, 8, 10, 12]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Check if all the numbers in the list add up to the target\"\"\"\n    return sum(numbers) == target\n\ndef g(target=0):\n    return [1, 2, 3, -6]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 108,
        "target_skills": null,
        "problem_func": "from typing import*\n\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Check if all the numbers in the list add up to the target\"\"\"\n    return sum(numbers) == target",
        "solution_func": "def g(target=0):\n    return [1, 2, 3, -6]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if there exist a subset of numbers that adds up to the target\"\"\"\n    n = len(numbers)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(target + 1):\n            if j < numbers[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - numbers[i - 1]]\n    \n    return dp[n][target]\n\ndef g(target=100):\n    return [10, 25, 35, 50]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 108,
        "target_skills": null,
        "problem_func": "from typing import*\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if there exist a subset of numbers that adds up to the target\"\"\"\n    n = len(numbers)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(target + 1):\n            if j < numbers[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - numbers[i - 1]]\n    \n    return dp[n][target]",
        "solution_func": "def g(target=100):\n    return [10, 25, 35, 50]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that sum up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 108,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that sum up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 109,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]",
        "solution_func": "def g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=8, n=8) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=8, n=8):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 109,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=8, n=8) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]",
        "solution_func": "def g(m=8, n=8):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=6, n=6) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=6, n=6):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 109,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=6, n=6) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]",
        "solution_func": "def g(m=6, n=6):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list 'numbers' that sum up to the target value.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(numbers=[5, 2, 8, 4, 7, 1]):\n    return numbers\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 109,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list 'numbers' that sum up to the target value.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False",
        "solution_func": "def g(numbers=[5, 2, 8, 4, 7, 1]):\n    return numbers",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str], target_length=10) -> bool:\n    \"\"\"Find a word in the list 'words' that has the same length as the target length.\"\"\"\n    for word in words:\n        if len(word) == target_length:\n            return True\n    return False\n\ndef g(words=['apple', 'banana', 'orange', 'kiwi', 'grape']):\n    return words\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 109,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], target_length=10) -> bool:\n    \"\"\"Find a word in the list 'words' that has the same length as the target length.\"\"\"\n    for word in words:\n        if len(word) == target_length:\n            return True\n    return False",
        "solution_func": "def g(words=['apple', 'banana', 'orange', 'kiwi', 'grape']):\n    return words",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=20) -> bool:\n    \"\"\"Find a row in the matrix 'matrix' that has the sum equal to the target sum.\"\"\"\n    for row in matrix:\n        if sum(row) == target_sum:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 109,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_sum=20) -> bool:\n    \"\"\"Find a row in the matrix 'matrix' that has the sum equal to the target sum.\"\"\"\n    for row in matrix:\n        if sum(row) == target_sum:\n            return True\n    return False",
        "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, factors: List[int]=[2, 3, 5]) -> bool:\n    \"\"\"Check if all the given factors are divisible by the number.\n    - n: the number to be checked\n    - factors: list of factors\"\"\"\n    return all(factor % n == 0 for factor in factors)\ndef g(n: int, factors: List[int]=[2, 3, 5]):\n    return n\nassert f(g(2))\n\n",
        "emb": null,
        "idx_generation": 109,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, factors: List[int]=[2, 3, 5]) -> bool:\n    \"\"\"Check if all the given factors are divisible by the number.\n    - n: the number to be checked\n    - factors: list of factors\"\"\"\n    return all(factor % n == 0 for factor in factors)",
        "solution_func": "def g(n: int, factors: List[int]=[2, 3, 5]):\n    return n",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, factors: List[int]=[2, 3, 5]) -> bool:\n    \"\"\"Check if the number is a multiple of the sum of the given factors.\n    - n: the number to be checked\n    - factors: list of factors\"\"\"\n    return n % sum(factors) == 0\ndef g(n: int, factors: List[int]=[2, 3, 5]):\n    return n\nassert f(g(15))\n\n",
        "emb": null,
        "idx_generation": 109,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, factors: List[int]=[2, 3, 5]) -> bool:\n    \"\"\"Check if the number is a multiple of the sum of the given factors.\n    - n: the number to be checked\n    - factors: list of factors\"\"\"\n    return n % sum(factors) == 0",
        "solution_func": "def g(n: int, factors: List[int]=[2, 3, 5]):\n    return n",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, factors: List[int]=[2, 3, 5]) -> bool:\n    \"\"\"Check if the number is divisible by any of the factors raised to the power of the number itself.\n    - n: the number to be checked\n    - factors: list of factors\"\"\"\n    return any(n % (factor ** n) == 0 for factor in factors)\ndef g(n: int, factors: List[int]=[2, 3, 5]):\n    return n\nassert f(g(3))\n\n",
        "emb": null,
        "idx_generation": 109,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, factors: List[int]=[2, 3, 5]) -> bool:\n    \"\"\"Check if the number is divisible by any of the factors raised to the power of the number itself.\n    - n: the number to be checked\n    - factors: list of factors\"\"\"\n    return any(n % (factor ** n) == 0 for factor in factors)",
        "solution_func": "def g(n: int, factors: List[int]=[2, 3, 5]):\n    return n",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 109,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a palindrome.\"\"\"\n    return nums == nums[::-1]\n    \ndef g():\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 110,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a palindrome.\"\"\"\n    return nums == nums[::-1]",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"Determine if the given number n is divisible by k.\"\"\"\n    return n % k == 0\n\ndef g(k=3):\n    return k * 5\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 110,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"Determine if the given number n is divisible by k.\"\"\"\n    return n % k == 0",
        "solution_func": "def g(k=3):\n    return k * 5",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return string == string[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 110,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return string == string[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the given string contains the target word\"\"\"\n    return target in s.lower()\ndef g(target='python'):\n    return \"I love programming in \" + target\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 110,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the given string contains the target word\"\"\"\n    return target in s.lower()",
        "solution_func": "def g(target='python'):\n    return \"I love programming in \" + target",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the given number is present in the list\"\"\"\n    return n in arr\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr[2]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 110,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the given number is present in the list\"\"\"\n    return n in arr",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5]):\n    return arr[2]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, c='a') -> bool:\n    \"\"\"Check if the given character is present in the string\"\"\"\n    return c in s\ndef g(c='a'):\n    return \"Hello, World!\"\nassert f(g())\n",
        "emb": null,
        "idx_generation": 110,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, c='a') -> bool:\n    \"\"\"Check if the given character is present in the string\"\"\"\n    return c in s",
        "solution_func": "def g(c='a'):\n    return \"Hello, World!\"",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=4) -> bool:\n    \"\"\"Check if n is divisible by a\"\"\"\n    return n % a == 0\ndef g(a=4):\n    return a * 7\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 110,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=4) -> bool:\n    \"\"\"Check if n is divisible by a\"\"\"\n    return n % a == 0",
        "solution_func": "def g(a=4):\n    return a * 7",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5) -> bool:\n    \"\"\"Check if n is divisible by a\"\"\"\n    return n % a == 0\ndef g(a=5):\n    return a * 6\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 110,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=5) -> bool:\n    \"\"\"Check if n is divisible by a\"\"\"\n    return n % a == 0",
        "solution_func": "def g(a=5):\n    return a * 6",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=6) -> bool:\n    \"\"\"Check if n is divisible by a\"\"\"\n    return n % a == 0\ndef g(a=6):\n    return a * 5\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 110,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=6) -> bool:\n    \"\"\"Check if n is divisible by a\"\"\"\n    return n % a == 0",
        "solution_func": "def g(a=6):\n    return a * 5",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: Tuple[float, float], a=0, b=0, c=1, d=1) -> bool:\n    \"\"\"Check if a point lies inside a circle.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fifth decimal digit is required.\"\"\"\n    x, y = e\n    return (x - a) ** 2 + (y - b) ** 2 < c ** 2\ndef g(a=0, b=0, c=1, d=1):\n    return (a, b)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 110,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(e: Tuple[float, float], a=0, b=0, c=1, d=1) -> bool:\n    \"\"\"Check if a point lies inside a circle.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fifth decimal digit is required.\"\"\"\n    x, y = e\n    return (x - a) ** 2 + (y - b) ** 2 < c ** 2",
        "solution_func": "def g(a=0, b=0, c=1, d=1):\n    return (a, b)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in nums that multiply up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    nums = [2, 3, 5, 7, 10, 15, 20, 25]\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 111,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in nums that multiply up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    nums = [2, 3, 5, 7, 10, 15, 20, 25]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list 'nums' whose sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 111,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list 'nums' whose sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Find the two smallest numbers in the list 'nums' whose sum is equal to the target value.\"\"\"\n    nums.sort()\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 111,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Find the two smallest numbers in the list 'nums' whose sum is equal to the target value.\"\"\"\n    nums.sort()\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=3) -> bool:\n    \"\"\"Given a list of integers and an integer k, determine how many integers in the list are divisible by k.\"\"\"\n    return sum((1 for num in nums if num % k == 0)) == n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=3):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 111,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=3) -> bool:\n    \"\"\"Given a list of integers and an integer k, determine how many integers in the list are divisible by k.\"\"\"\n    return sum((1 for num in nums if num % k == 0)) == n",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=3):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that add up to the target.\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i + 1, len(nums)) for k in range(j + 1, len(nums))))\ndef g(target=20):\n    return [i for i in range(target - 2)] + [2 * target - 2, 2 * target - 1]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 111,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that add up to the target.\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i + 1, len(nums)) for k in range(j + 1, len(nums))))",
        "solution_func": "def g(target=20):\n    return [i for i in range(target - 2)] + [2 * target - 2, 2 * target - 1]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(z: float, v=3, d=1e-6) -> bool:\n    \"\"\"Create a float with a specific decimal and check if it is greater than the given value.\"\"\"\n    return int(z * 1 / d % 10) > v\ndef g(v=3, d=1e-6):\n    return v * d\nassert f(g())\n",
        "emb": null,
        "idx_generation": 111,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(z: float, v=3, d=1e-6) -> bool:\n    \"\"\"Create a float with a specific decimal and check if it is greater than the given value.\"\"\"\n    return int(z * 1 / d % 10) > v",
        "solution_func": "def g(v=3, d=1e-6):\n    return v * d",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, pairs=[[0, 0]]) -> bool:\n    \"\"\"Given a sequence of integer pairs, p_i, m_i, where \\\\sum p_i-m_i = 0, find the minimum value, over t, of\np_{t+1} + \\\\sum_{i=1}^t p_i - m_i\"\"\"\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot >= n\n        if tot == n:\n            success = True\n    return success\ndef g(pairs=[[0, 0]]):\n    tot = 0\n    n = 0\n    for (p, m) in pairs:\n        tot += p - m\n        if tot < n:\n            n = tot\n    return n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 111,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, pairs=[[0, 0]]) -> bool:\n    \"\"\"Given a sequence of integer pairs, p_i, m_i, where \\\\sum p_i-m_i = 0, find the minimum value, over t, of\np_{t+1} + \\\\sum_{i=1}^t p_i - m_i\"\"\"\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot >= n\n        if tot == n:\n            success = True\n    return success",
        "solution_func": "def g(pairs=[[0, 0]]):\n    tot = 0\n    n = 0\n    for (p, m) in pairs:\n        tot += p - m\n        if tot < n:\n            n = tot\n    return n",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that difference is equal to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if num - target in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 111,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that difference is equal to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if num - target in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the list whose sum is not divisible by 3.\"\"\"\n    n = len(arr)\n    for i in range(n - k + 1):\n        subarray = arr[i:i+k]\n        if sum(subarray) % 3 != 0:\n            return True\n    return False\n\ndef g(k=3):\n    return [i for i in range(1, 2*k+1)]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 111,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the list whose sum is not divisible by 3.\"\"\"\n    n = len(arr)\n    for i in range(n - k + 1):\n        subarray = arr[i:i+k]\n        if sum(subarray) % 3 != 0:\n            return True\n    return False",
        "solution_func": "def g(k=3):\n    return [i for i in range(1, 2*k+1)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nimport itertools\nfrom typing import*\ndef f(nums: List[int], target=42) -> bool:\n    \"\"\"Find a combination of numbers that multiplies up to the target\"\"\"\n    from itertools import combinations\n    return any(math.prod(comb) == target for r in range(1, len(nums)+1) for comb in combinations(nums, r))\ndef g(target=42):\n    return [1, 2, target//2]\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 111,
        "target_skills": null,
        "problem_func": "import math\nimport itertools\nfrom typing import*\ndef f(nums: List[int], target=42) -> bool:\n    \"\"\"Find a combination of numbers that multiplies up to the target\"\"\"\n    from itertools import combinations\n    return any(math.prod(comb) == target for r in range(1, len(nums)+1) for comb in combinations(nums, r))",
        "solution_func": "def g(target=42):\n    return [1, 2, target//2]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=3) -> bool:\n    \"\"\"Check if the given string contains the target number of consecutive vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n            if count == target:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(target=3):\n    return \"aeiou\" * target\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 112,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target=3) -> bool:\n    \"\"\"Check if the given string contains the target number of consecutive vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n            if count == target:\n                return True\n        else:\n            count = 0\n    return False",
        "solution_func": "def g(target=3):\n    return \"aeiou\" * target",
        "map_ix": [
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are three numbers in the list 'nums' whose sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 112,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are three numbers in the list 'nums' whose sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=3) -> bool:\n    \"\"\"Check if the given string contains the target number of words in uppercase.\"\"\"\n    words = s.split()\n    count = 0\n    for word in words:\n        if word.isupper():\n            count += 1\n            if count == target:\n                return True\n    return False\n\ndef g(target=3):\n    return \"THIS IS A TEST STRING\"\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 112,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target=3) -> bool:\n    \"\"\"Check if the given string contains the target number of words in uppercase.\"\"\"\n    words = s.split()\n    count = 0\n    for word in words:\n        if word.isupper():\n            count += 1\n            if count == target:\n                return True\n    return False",
        "solution_func": "def g(target=3):\n    return \"THIS IS A TEST STRING\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\n\ndef f(string: str, n=5) -> bool:\n    \"\"\"Check if a string is a palindrome and has a length greater than n\"\"\"\n    return string == string[::-1] and len(string) > n\n\ndef g(n=5):\n    return 'level'\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 112,
        "target_skills": null,
        "problem_func": "from typing import*\n\ndef f(string: str, n=5) -> bool:\n    \"\"\"Check if a string is a palindrome and has a length greater than n\"\"\"\n    return string == string[::-1] and len(string) > n",
        "solution_func": "def g(n=5):\n    return 'level'",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target value\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [2, 3, 5, 7]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 112,
        "target_skills": null,
        "problem_func": "from typing import*\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target value\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [2, 3, 5, 7]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\n\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Check if there exists three numbers in the list that sums up to the target value\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 112,
        "target_skills": null,
        "problem_func": "from typing import*\n\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Check if there exists three numbers in the list that sums up to the target value\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(nums=[10, 20, 30, 40, 50]):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 112,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))",
        "solution_func": "def g(nums=[10, 20, 30, 40, 50]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if the given string is a palindrome and has a length greater than or equal to n.\"\"\"\n    return s == s[::-1] and len(s) >= n\ndef g(n=5):\n    return 'racecar'\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 112,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if the given string is a palindrome and has a length greater than or equal to n.\"\"\"\n    return s == s[::-1] and len(s) >= n",
        "solution_func": "def g(n=5):\n    return 'racecar'",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list whose sum is equal to the target.\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))\ndef g(nums=[10, 20, 30, 40, 50]):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 112,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list whose sum is equal to the target.\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))",
        "solution_func": "def g(nums=[10, 20, 30, 40, 50]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(p: List[int], edges=[[1, 6], [2, 3], [2, 7], [0, 8], [7, 8], [7, 2], [1, 5], [8, 7], [7, 0], [0, 0], [8, 1], [5, 7], [4, 7], [6, 1], [4, 4], [7, 4]]) -> bool:\n    \"\"\"Check if there is a path from node 0 to node 1 in the given digraph on vertices 0, 1,..., n.\"\"\"\n    return p[0] == 0 and p[-1] == 1 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges=[[1, 6], [2, 3], [2, 7], [0, 8], [7, 8], [7, 2], [1, 5], [8, 7], [7, 0], [0, 0], [8, 1], [5, 7], [4, 7], [6, 1], [4, 4], [7, 4]]):\n    paths = {}\n    paths[0] = [0]\n    for _ in range(max((max(e) for e in edges)) + 1):\n        for (i, j) in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(1)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 112,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(p: List[int], edges=[[1, 6], [2, 3], [2, 7], [0, 8], [7, 8], [7, 2], [1, 5], [8, 7], [7, 0], [0, 0], [8, 1], [5, 7], [4, 7], [6, 1], [4, 4], [7, 4]]) -> bool:\n    \"\"\"Check if there is a path from node 0 to node 1 in the given digraph on vertices 0, 1,..., n.\"\"\"\n    return p[0] == 0 and p[-1] == 1 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])",
        "solution_func": "def g(edges=[[1, 6], [2, 3], [2, 7], [0, 8], [7, 8], [7, 2], [1, 5], [8, 7], [7, 0], [0, 0], [8, 1], [5, 7], [4, 7], [6, 1], [4, 4], [7, 4]]):\n    paths = {}\n    paths[0] = [0]\n    for _ in range(max((max(e) for e in edges)) + 1):\n        for (i, j) in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(1)",
        "map_ix": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=42) -> bool:\n    \"\"\"Given a list of integers, find if there exists a pair of numbers that sums up to the target_sum\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\ndef g(target_sum=42):\n    return [10, 20, 30, 40, 50]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 113,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=42) -> bool:\n    \"\"\"Given a list of integers, find if there exists a pair of numbers that sums up to the target_sum\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=42):\n    return [10, 20, 30, 40, 50]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_value=99) -> bool:\n    \"\"\"Given a matrix, find if the target_value is present in the matrix\"\"\"\n    for row in matrix:\n        if target_value in row:\n            return True\n    return False\ndef g(target_value=99):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 113,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_value=99) -> bool:\n    \"\"\"Given a matrix, find if the target_value is present in the matrix\"\"\"\n    for row in matrix:\n        if target_value in row:\n            return True\n    return False",
        "solution_func": "def g(target_value=99):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring=\"python\") -> bool:\n    \"\"\"Check if the substring is present in the given string\"\"\"\n    return substring in string\ndef g(substring=\"python\"):\n    return \"I love python programming\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 113,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring=\"python\") -> bool:\n    \"\"\"Check if the substring is present in the given string\"\"\"\n    return substring in string",
        "solution_func": "def g(substring=\"python\"):\n    return \"I love python programming\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find a list of more than 995 distinct integers between 0 and 999, inclusive, such that each pair of integers\nhave squares that differ by at least 10.\"\"\"\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in nums for j in nums if i != j)) and len(set(nums)) > 995\ndef g():\n    return [0, 2] + list(range(4, 1000, 2))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 113,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find a list of more than 995 distinct integers between 0 and 999, inclusive, such that each pair of integers\nhave squares that differ by at least 10.\"\"\"\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in nums for j in nums if i != j)) and len(set(nums)) > 995",
        "solution_func": "def g():\n    return [0, 2] + list(range(4, 1000, 2))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if the given string is a palindrome and contains at least one vowel.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return string == string[::-1] and any((c in vowels for c in string.lower()))\ndef g():\n    return \"Able was I ere I saw Elba\"\nassert f(g())\n",
        "emb": null,
        "idx_generation": 113,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if the given string is a palindrome and contains at least one vowel.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return string == string[::-1] and any((c in vowels for c in string.lower()))",
        "solution_func": "def g():\n    return \"Able was I ere I saw Elba\"",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains at least one prime number and all numbers are divisible by their index.\"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return any((is_prime(num) for num in nums)) and all((num % (idx + 1) == 0 for idx, num in enumerate(nums)))\ndef g():\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 113,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains at least one prime number and all numbers are divisible by their index.\"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return any((is_prime(num) for num in nums)) and all((num % (idx + 1) == 0 for idx, num in enumerate(nums)))",
        "solution_func": "def g():\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target value\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target) for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 113,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target value\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target) for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))",
        "solution_func": "def g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sequence: List[int], target=5) -> bool:\n    \"\"\"Check if the target value is present in the sequence\"\"\"\n    return target in sequence\ndef g(target=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 113,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(sequence: List[int], target=5) -> bool:\n    \"\"\"Check if the target value is present in the sequence\"\"\"\n    return target in sequence",
        "solution_func": "def g(target=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target value is present in the matrix\"\"\"\n    return any(target in row for row in matrix)\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 113,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target value is present in the matrix\"\"\"\n    return any(target in row for row in matrix)",
        "solution_func": "def g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], threshold=10) -> bool:\n    \"\"\"Check if all the numbers in the list are greater than or equal to the given threshold.\"\"\"\n    for num in numbers:\n        if num < threshold:\n            return False\n    return True\n\ndef g(threshold=10):\n    return [12, 15, 18, 20]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 113,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], threshold=10) -> bool:\n    \"\"\"Check if all the numbers in the list are greater than or equal to the given threshold.\"\"\"\n    for num in numbers:\n        if num < threshold:\n            return False\n    return True",
        "solution_func": "def g(threshold=10):\n    return [12, 15, 18, 20]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list that add up to the target\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 114,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list that add up to the target\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there exists a row in the matrix where the sum of the elements is equal to the target\"\"\"\n    return any((sum(row) == target) for row in matrix)\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 114,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there exists a row in the matrix where the sum of the elements is equal to the target\"\"\"\n    return any((sum(row) == target) for row in matrix)",
        "solution_func": "def g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(phrase: str, words=['apple', 'banana', 'orange']) -> bool:\n    \"\"\"Check if all the words in the list are present in the given phrase\"\"\"\n    return all((word in phrase) for word in words)\ndef g(words=['apple', 'banana', 'orange']):\n    return \"I love eating apple and banana\"\nassert f(g())\n",
        "emb": null,
        "idx_generation": 114,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(phrase: str, words=['apple', 'banana', 'orange']) -> bool:\n    \"\"\"Check if all the words in the list are present in the given phrase\"\"\"\n    return all((word in phrase) for word in words)",
        "solution_func": "def g(words=['apple', 'banana', 'orange']):\n    return \"I love eating apple and banana\"",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], tot=10000, n=100) -> bool:\n    \"\"\"Find n distinct positive even integers that sum to tot\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 == 0 for i in nums))\ndef g(tot=10000, n=100):\n    return list(range(2, 2 * n + 1, 2))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 114,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], tot=10000, n=100) -> bool:\n    \"\"\"Find n distinct positive even integers that sum to tot\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 == 0 for i in nums))",
        "solution_func": "def g(tot=10000, n=100):\n    return list(range(2, 2 * n + 1, 2))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], tot=100, n=5) -> bool:\n    \"\"\"Find n distinct positive integers that sum to tot, and the sum of their squares is the smallest possible.\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and sum((i ** 2 for i in nums)) == min((sum((i ** 2 for i in x)) for x in combinations(range(1, tot), n)))\ndef g(tot=100, n=5):\n    return list(range(1, n + 1))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 114,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], tot=100, n=5) -> bool:\n    \"\"\"Find n distinct positive integers that sum to tot, and the sum of their squares is the smallest possible.\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and sum((i ** 2 for i in nums)) == min((sum((i ** 2 for i in x)) for x in combinations(range(1, tot), n)))",
        "solution_func": "def g(tot=100, n=5):\n    return list(range(1, n + 1))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], tot=50, n=5) -> bool:\n    \"\"\"Find n distinct positive integers that sum to tot, and the product of their squares is the largest possible.\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and reduce((lambda x, y: x * y), (i ** 2 for i in nums)) == max((reduce((lambda x, y: x * y), (i ** 2 for i in x)) for x in combinations(range(1, tot), n)))\ndef g(tot=50, n=5):\n    return list(range(tot - n + 1, tot + 1))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 114,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], tot=50, n=5) -> bool:\n    \"\"\"Find n distinct positive integers that sum to tot, and the product of their squares is the largest possible.\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and reduce((lambda x, y: x * y), (i ** 2 for i in nums)) == max((reduce((lambda x, y: x * y), (i ** 2 for i in x)) for x in combinations(range(1, tot), n)))",
        "solution_func": "def g(tot=50, n=5):\n    return list(range(tot - n + 1, tot + 1))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=3, c=7) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c odd integers)\"\"\"\n    return n + a == sum([b * (2*i+1) for i in range(c)])\ndef g(a=5, b=3, c=7):\n    return -a + sum([b * (2*i+1) for i in range(c)])\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 114,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=5, b=3, c=7) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c odd integers)\"\"\"\n    return n + a == sum([b * (2*i+1) for i in range(c)])",
        "solution_func": "def g(a=5, b=3, c=7):\n    return -a + sum([b * (2*i+1) for i in range(c)])",
        "map_ix": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=14, b=2, c=8) -> bool:\n    \"\"\"Find n such that n + a == b * (the product of the first c prime numbers)\"\"\"\n    primes = [2]\n    num = 3\n    while len(primes) < c:\n        is_prime = True\n        for p in primes:\n            if num % p == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 2\n    return n + a == b * (functools.reduce(lambda x, y: x*y, primes))\ndef g(a=14, b=2, c=8):\n    primes = [2]\n    num = 3\n    while len(primes) < c:\n        is_prime = True\n        for p in primes:\n            if num % p == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 2\n    return -a + b * (functools.reduce(lambda x, y: x*y, primes))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 114,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=14, b=2, c=8) -> bool:\n    \"\"\"Find n such that n + a == b * (the product of the first c prime numbers)\"\"\"\n    primes = [2]\n    num = 3\n    while len(primes) < c:\n        is_prime = True\n        for p in primes:\n            if num % p == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 2\n    return n + a == b * (functools.reduce(lambda x, y: x*y, primes))",
        "solution_func": "def g(a=14, b=2, c=8):\n    primes = [2]\n    num = 3\n    while len(primes) < c:\n        is_prime = True\n        for p in primes:\n            if num % p == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 2\n    return -a + b * (functools.reduce(lambda x, y: x*y, primes))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=20, b=3, c=6) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c powers of 2)\"\"\"\n    return n + a == b * sum([2**i for i in range(1, c+1)])\ndef g(a=20, b=3, c=6):\n    return -a + b * sum([2**i for i in range(1, c+1)])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 114,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=20, b=3, c=6) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c powers of 2)\"\"\"\n    return n + a == b * sum([2**i for i in range(1, c+1)])",
        "solution_func": "def g(a=20, b=3, c=6):\n    return -a + b * sum([2**i for i in range(1, c+1)])",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[3, 6, 9, 12, 15], target_sum=27) -> bool:\n    \"\"\"Find if there exists a combination of numbers from the list that adds up to the target sum\"\"\"\n    def subset_sum(nums, n, target_sum):\n        if target_sum == 0:\n            return True\n        if n == 0 and target_sum != 0:\n            return False\n        if nums[n-1] > target_sum:\n            return subset_sum(nums, n-1, target_sum)\n        return subset_sum(nums, n-1, target_sum) or subset_sum(nums, n-1, target_sum-nums[n-1])\n    return subset_sum(nums, len(nums), target_sum)\ndef g(nums=[3, 6, 9, 12, 15], target_sum=27):\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums)))\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 114,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[3, 6, 9, 12, 15], target_sum=27) -> bool:\n    \"\"\"Find if there exists a combination of numbers from the list that adds up to the target sum\"\"\"\n    def subset_sum(nums, n, target_sum):\n        if target_sum == 0:\n            return True\n        if n == 0 and target_sum != 0:\n            return False\n        if nums[n-1] > target_sum:\n            return subset_sum(nums, n-1, target_sum)\n        return subset_sum(nums, n-1, target_sum) or subset_sum(nums, n-1, target_sum-nums[n-1])\n    return subset_sum(nums, len(nums), target_sum)",
        "solution_func": "def g(nums=[3, 6, 9, 12, 15], target_sum=27):\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums)))",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(substrings: List[str], s='rywixekugagethathulisitextanyp', count=451) -> bool:\n    \"\"\"Find a list of >= count distinct strings that are all contained in s\"\"\"\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\n    \ndef g(s='rywixekugagethathulisitextanyp', count=451):\n    return [''] + sorted(set(s[j:i] for i in range(len(s) + 1) for j in range(i)))\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 115,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(substrings: List[str], s='rywixekugagethathulisitextanyp', count=451) -> bool:\n    \"\"\"Find a list of >= count distinct strings that are all contained in s\"\"\"\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))",
        "solution_func": "def g(s='rywixekugagethathulisitextanyp', count=451):\n    return [''] + sorted(set(s[j:i] for i in range(len(s) + 1) for j in range(i)))",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: float, a=4975) -> bool:\n    \"\"\"Find a number that when multiplied by x is equal to a.\"\"\"\n    return x * a == a\n\ndef g(a=4975):\n    return 1\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 115,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: float, a=4975) -> bool:\n    \"\"\"Find a number that when multiplied by x is equal to a.\"\"\"\n    return x * a == a",
        "solution_func": "def g(a=4975):\n    return 1",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int = 10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    return any((x + y == target) for x in numbers for y in numbers if x != y)\n\ndef g(target: int = 10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 115,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int = 10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    return any((x + y == target) for x in numbers for y in numbers if x != y)",
        "solution_func": "def g(target: int = 10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str], n=3, m=4) -> bool:\n    \"\"\"Check if there exists a word in the list that has a length greater than n and less than m.\"\"\"\n    return any(n < len(word) < m for word in words)\ndef g(n=3, m=4):\n    return ['cat', 'dog', 'bird', 'elephant', 'snake']\nassert f(g())\n",
        "emb": null,
        "idx_generation": 115,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], n=3, m=4) -> bool:\n    \"\"\"Check if there exists a word in the list that has a length greater than n and less than m.\"\"\"\n    return any(n < len(word) < m for word in words)",
        "solution_func": "def g(n=3, m=4):\n    return ['cat', 'dog', 'bird', 'elephant', 'snake']",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3, m=3) -> bool:\n    \"\"\"Check if the sum of all elements in a matrix is greater than n and less than m.\"\"\"\n    return n < sum(sum(row) for row in matrix) < m\ndef g(n=3, m=3):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 115,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=3, m=3) -> bool:\n    \"\"\"Check if the sum of all elements in a matrix is greater than n and less than m.\"\"\"\n    return n < sum(sum(row) for row in matrix) < m",
        "solution_func": "def g(n=3, m=3):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string contains a substring that appears n or more times.\"\"\"\n    return any(s.count(substring) >= n for substring in set(s))\ndef g(n=3):\n    return \"abracadabra\"\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 115,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string contains a substring that appears n or more times.\"\"\"\n    return any(s.count(substring) >= n for substring in set(s))",
        "solution_func": "def g(n=3):\n    return \"abracadabra\"",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiply to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [2, 5, 10, 20, 25, 50, 100]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 115,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiply to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=100):\n    return [2, 5, 10, 20, 25, 50, 100]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subsequence of numbers in the list that sum up to the target number\"\"\"\n    for i in range(1, len(nums)+1):\n        for j in range(len(nums)-i+1):\n            if sum(nums[j:j+i]) == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 115,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subsequence of numbers in the list that sum up to the target number\"\"\"\n    for i in range(1, len(nums)+1):\n        for j in range(len(nums)-i+1):\n            if sum(nums[j:j+i]) == target:\n                return True\n    return False",
        "solution_func": "def g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that XOR to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] ^ nums[j] == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 115,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that XOR to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] ^ nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=4, b=9) -> bool:\n    \"\"\"Check if the difference between x and the product of a and b is divisible by x\"\"\"\n    return (x - (a * b)) % x == 0\n\ndef g(a=4, b=9):\n    return a * b\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 115,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=4, b=9) -> bool:\n    \"\"\"Check if the difference between x and the product of a and b is divisible by x\"\"\"\n    return (x - (a * b)) % x == 0",
        "solution_func": "def g(a=4, b=9):\n    return a * b",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are three numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 116,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are three numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there are four numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                for l in range(k+1, len(nums)):\n                    if nums[i] + nums[j] + nums[k] + nums[l] == target:\n                        return True\n    return False\n\ndef g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 116,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there are four numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                for l in range(k+1, len(nums)):\n                    if nums[i] + nums[j] + nums[k] + nums[l] == target:\n                        return True\n    return False",
        "solution_func": "def g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list whose product is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 116,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list whose product is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find a subset of 'arr' whose sum is equal to 'target'\"\"\"\n    return any(sum(subset) == target for subset in powerset(arr))\ndef g(arr=[1, 2, 3, 4, 5], target=10):\n    def powerset(arr):\n        n = len(arr)\n        masks = [1 << i for i in range(n)]\n        for i in range(2**n):\n            yield [arr[j] for j in range(n) if (masks[j] & i)]\n    return list(powerset(arr))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 116,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find a subset of 'arr' whose sum is equal to 'target'\"\"\"\n    return any(sum(subset) == target for subset in powerset(arr))",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5], target=10):\n    def powerset(arr):\n        n = len(arr)\n        masks = [1 << i for i in range(n)]\n        for i in range(2**n):\n            yield [arr[j] for j in range(n) if (masks[j] & i)]\n    return list(powerset(arr))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(words: List[str], k=3) -> bool:\n    \"\"\"Find all combinations of 'k' letters from the given words such that no two letters are the same.\"\"\"\n    return any(len(set(combo)) == k for combo in itertools.permutations(''.join(words), k))\ndef g(words=['apple', 'banana', 'cherry'], k=3):\n    return list(itertools.combinations(''.join(words), k))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 116,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(words: List[str], k=3) -> bool:\n    \"\"\"Find all combinations of 'k' letters from the given words such that no two letters are the same.\"\"\"\n    return any(len(set(combo)) == k for combo in itertools.permutations(''.join(words), k))",
        "solution_func": "def g(words=['apple', 'banana', 'cherry'], k=3):\n    return list(itertools.combinations(''.join(words), k))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(nums: List[int], mean=10, threshold=5) -> bool:\n    \"\"\"Determine if the mean of the numbers in 'nums' is within 'threshold' units of 'mean'\"\"\"\n    return math.isclose(sum(nums)/len(nums), mean, abs_tol=threshold)\ndef g(nums=[5, 10, 15, 20, 25], mean=10, threshold=5):\n    return nums\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 116,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\ndef f(nums: List[int], mean=10, threshold=5) -> bool:\n    \"\"\"Determine if the mean of the numbers in 'nums' is within 'threshold' units of 'mean'\"\"\"\n    return math.isclose(sum(nums)/len(nums), mean, abs_tol=threshold)",
        "solution_func": "def g(nums=[5, 10, 15, 20, 25], mean=10, threshold=5):\n    return nums",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_sum=10):\n    return [n for n in range(target_sum+1)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 116,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target_sum=10):\n    return [n for n in range(target_sum+1)]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if a character 'char' appears at least once in the given string 's'\"\"\"\n    return char in s\n\ndef g(char='a'):\n    return char\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 116,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if a character 'char' appears at least once in the given string 's'\"\"\"\n    return char in s",
        "solution_func": "def g(char='a'):\n    return char",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_product=10) -> bool:\n    \"\"\"Check if the product of any two numbers in the list is equal to target_product\"\"\"\n    return any(nums[i] * nums[j] == target_product for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_product=10):\n    return [n for n in range(1, target_product+1)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 116,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_product=10) -> bool:\n    \"\"\"Check if the product of any two numbers in the list is equal to target_product\"\"\"\n    return any(nums[i] * nums[j] == target_product for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target_product=10):\n    return [n for n in range(1, target_product+1)]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiply up to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] * numbers[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 116,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiply up to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] * numbers[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=30) -> bool:\n    \"\"\"Find three numbers in the list 'nums' whose sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 117,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=30) -> bool:\n    \"\"\"Find three numbers in the list 'nums' whose sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=40) -> bool:\n    \"\"\"Find two numbers in the list 'nums' whose product is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 117,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=40) -> bool:\n    \"\"\"Find two numbers in the list 'nums' whose product is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=70) -> bool:\n    \"\"\"Find three numbers in the list 'nums' whose product is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] * nums[j] * nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 117,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=70) -> bool:\n    \"\"\"Find three numbers in the list 'nums' whose product is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] * nums[j] * nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list 'nums' whose sum is equal to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(len(nums)) if i != j))\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 117,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list 'nums' whose sum is equal to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(len(nums)) if i != j))",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if the target value is present in the list 'nums'.\"\"\"\n    return target in nums\n\ndef g(nums=[1, 3, 5, 7, 9]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 117,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if the target value is present in the list 'nums'.\"\"\"\n    return target in nums",
        "solution_func": "def g(nums=[1, 3, 5, 7, 9]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if the target value is greater than all the numbers in the list 'nums'.\"\"\"\n    return all((num < target for num in nums))\n\ndef g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 117,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if the target value is greater than all the numbers in the list 'nums'.\"\"\"\n    return all((num < target for num in nums))",
        "solution_func": "def g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, a='programming', b='python', length=3) -> bool:\n    \"\"\"Find a substring of length length that is present in both strings a and b\"\"\"\n    return len(s) == length and s in a and (s in b)\ndef g(a='programming', b='python', length=3):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 117,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, a='programming', b='python', length=3) -> bool:\n    \"\"\"Find a substring of length length that is present in both strings a and b\"\"\"\n    return len(s) == length and s in a and (s in b)",
        "solution_func": "def g(a='programming', b='python', length=3):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Find two numbers in the given list that add up to the target sum\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False\n\ndef g(arr: List[int], target_sum=10):\n    return arr\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 117,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Find two numbers in the given list that add up to the target sum\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(arr: List[int], target_sum=10):\n    return arr",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='apple', b='banana') -> bool:\n    \"\"\"Check if the given string s contains both strings a and b\"\"\"\n    return a in s and b in s\n\ndef g(a='apple', b='banana'):\n    return a + b\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 117,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, a='apple', b='banana') -> bool:\n    \"\"\"Check if the given string s contains both strings a and b\"\"\"\n    return a in s and b in s",
        "solution_func": "def g(a='apple', b='banana'):\n    return a + b",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, n=3) -> bool:\n    \"\"\"Check if the sum of the digits of x is divisible by n\"\"\"\n    digit_sum = sum(int(digit) for digit in str(x))\n    return digit_sum % n == 0\n\ndef g(n=3):\n    return int(''.join(str(i) for i in range(1, n+1)))\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 117,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, n=3) -> bool:\n    \"\"\"Check if the sum of the digits of x is divisible by n\"\"\"\n    digit_sum = sum(int(digit) for digit in str(x))\n    return digit_sum % n == 0",
        "solution_func": "def g(n=3):\n    return int(''.join(str(i) for i in range(1, n+1)))",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, year=2022) -> bool:\n    \"\"\"Check if the given date falls on the specified year\n    - date: datetime.date object representing the date\n    - year: integer representing the year\"\"\"\n\n    return date.year == year\n\ndef g(year=2022):\n    return datetime.date(2022, 3, 23)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 118,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, year=2022) -> bool:\n    \"\"\"Check if the given date falls on the specified year\n    - date: datetime.date object representing the date\n    - year: integer representing the year\"\"\"\n\n    return date.year == year",
        "solution_func": "def g(year=2022):\n    return datetime.date(2022, 3, 23)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, month=3) -> bool:\n    \"\"\"Check if the given date falls on the specified month\n    - date: datetime.date object representing the date\n    - month: integer representing the month\"\"\"\n\n    return date.month == month\n\ndef g(month=3):\n    return datetime.date(2022, 3, 23)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 118,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, month=3) -> bool:\n    \"\"\"Check if the given date falls on the specified month\n    - date: datetime.date object representing the date\n    - month: integer representing the month\"\"\"\n\n    return date.month == month",
        "solution_func": "def g(month=3):\n    return datetime.date(2022, 3, 23)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, day=23) -> bool:\n    \"\"\"Check if the given date falls on the specified day\n    - date: datetime.date object representing the date\n    - day: integer representing the day\"\"\"\n\n    return date.day == day\n\ndef g(day=23):\n    return datetime.date(2022, 3, 23)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 118,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, day=23) -> bool:\n    \"\"\"Check if the given date falls on the specified day\n    - date: datetime.date object representing the date\n    - day: integer representing the day\"\"\"\n\n    return date.day == day",
        "solution_func": "def g(day=23):\n    return datetime.date(2022, 3, 23)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=7, b=3, c=8) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c odd integers)\"\"\"\n    return n + a == sum([b * (2*i+1) for i in range(c)])\ndef g(a=7, b=3, c=8):\n    return -a + sum([b * (2*i+1) for i in range(c)])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 118,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=7, b=3, c=8) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c odd integers)\"\"\"\n    return n + a == sum([b * (2*i+1) for i in range(c)])",
        "solution_func": "def g(a=7, b=3, c=8):\n    return -a + sum([b * (2*i+1) for i in range(c)])",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=15, b=4, c=7) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c prime numbers)\"\"\"\n    primes = [2]\n    p = 3\n    while len(primes) < c:\n        is_prime = True\n        for i in range(2, int(p**0.5)+1):\n            if p % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(p)\n        p += 1\n    return n + a == sum([b * primes[i] for i in range(c)])\ndef g(a=15, b=4, c=7):\n    primes = [2]\n    p = 3\n    while len(primes) < c:\n        is_prime = True\n        for i in range(2, int(p**0.5)+1):\n            if p % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(p)\n        p += 1\n    return -a + sum([b * primes[i] for i in range(c)])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 118,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=15, b=4, c=7) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c prime numbers)\"\"\"\n    primes = [2]\n    p = 3\n    while len(primes) < c:\n        is_prime = True\n        for i in range(2, int(p**0.5)+1):\n            if p % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(p)\n        p += 1\n    return n + a == sum([b * primes[i] for i in range(c)])",
        "solution_func": "def g(a=15, b=4, c=7):\n    primes = [2]\n    p = 3\n    while len(primes) < c:\n        is_prime = True\n        for i in range(2, int(p**0.5)+1):\n            if p % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(p)\n        p += 1\n    return -a + sum([b * primes[i] for i in range(c)])",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=20, b=6, c=5) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c Fibonacci numbers)\"\"\"\n    fib = [0, 1]\n    for i in range(2, c):\n        fib.append(fib[i-1] + fib[i-2])\n    return n + a == sum([b * fib[i] for i in range(c)])\ndef g(a=20, b=6, c=5):\n    fib = [0, 1]\n    for i in range(2, c):\n        fib.append(fib[i-1] + fib[i-2])\n    return -a + sum([b * fib[i] for i in range(c)])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 118,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=20, b=6, c=5) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c Fibonacci numbers)\"\"\"\n    fib = [0, 1]\n    for i in range(2, c):\n        fib.append(fib[i-1] + fib[i-2])\n    return n + a == sum([b * fib[i] for i in range(c)])",
        "solution_func": "def g(a=20, b=6, c=5):\n    fib = [0, 1]\n    for i in range(2, c):\n        fib.append(fib[i-1] + fib[i-2])\n    return -a + sum([b * fib[i] for i in range(c)])",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str]) -> bool:\n    \"\"\"Check if all the words in the list have the same length\"\"\"\n    return all(len(word) == len(words[0]) for word in words)\ndef g():\n    return ['apple', 'banana', 'orange']\nassert f(g())\n",
        "emb": null,
        "idx_generation": 118,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str]) -> bool:\n    \"\"\"Check if all the words in the list have the same length\"\"\"\n    return all(len(word) == len(words[0]) for word in words)",
        "solution_func": "def g():\n    return ['apple', 'banana', 'orange']",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the list of numbers is sorted in non-decreasing order\"\"\"\n    return all(numbers[i] <= numbers[i+1] for i in range(len(numbers)-1))\ndef g():\n    return [2, 5, 7, 10, 12]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 118,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the list of numbers is sorted in non-decreasing order\"\"\"\n    return all(numbers[i] <= numbers[i+1] for i in range(len(numbers)-1))",
        "solution_func": "def g():\n    return [2, 5, 7, 10, 12]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains any duplicate elements\"\"\"\n    return len(nums) != len(set(nums))\ndef g():\n    return [1, 2, 3, 4, 5, 5, 6]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 118,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains any duplicate elements\"\"\"\n    return len(nums) != len(set(nums))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 5, 6]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str], target_length=7) -> bool:\n    \"\"\"Find a list of words whose total length is equal to target_length\"\"\"\n    return sum(len(word) for word in words) == target_length\ndef g(target_length=7):\n    return ['apple', 'banana']\nassert f(g())\n",
        "emb": null,
        "idx_generation": 118,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], target_length=7) -> bool:\n    \"\"\"Find a list of words whose total length is equal to target_length\"\"\"\n    return sum(len(word) for word in words) == target_length",
        "solution_func": "def g(target_length=7):\n    return ['apple', 'banana']",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=3, c=7) -> bool:\n    \"\"\"Check if n is equal to the sum of the first c even integers multiplied by b and added to a\"\"\"\n    return n == a + sum([b * (2*i) for i in range(1, c+1)])\ndef g(a=5, b=3, c=7):\n    return a + sum([b * (2*i) for i in range(1, c+1)])\nassert f(g())\n\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 119,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=5, b=3, c=7) -> bool:\n    \"\"\"Check if n is equal to the sum of the first c even integers multiplied by b and added to a\"\"\"\n    return n == a + sum([b * (2*i) for i in range(1, c+1)])",
        "solution_func": "def g(a=5, b=3, c=7):\n    return a + sum([b * (2*i) for i in range(1, c+1)])",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=3, c=7) -> bool:\n    \"\"\"Find n such that n is divisible by b and is equal to the sum of the first c odd integers\"\"\"\n    return n % b == 0 and n == sum([2*i+1 for i in range(c)])\ndef g(a=5, b=3, c=7):\n    return b * sum([2*i+1 for i in range(c)])\nassert f(g())\n\n",
        "emb": null,
        "idx_generation": 119,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=5, b=3, c=7) -> bool:\n    \"\"\"Find n such that n is divisible by b and is equal to the sum of the first c odd integers\"\"\"\n    return n % b == 0 and n == sum([2*i+1 for i in range(c)])",
        "solution_func": "def g(a=5, b=3, c=7):\n    return b * sum([2*i+1 for i in range(c)])",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=3, c=7) -> bool:\n    \"\"\"Check if n is equal to the product of the first c even integers multiplied by b and added to a\"\"\"\n    return n == a + (b * (2**c - 2))\ndef g(a=5, b=3, c=7):\n    return a + (b * (2**c - 2))\nassert f(g())\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 119,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=5, b=3, c=7) -> bool:\n    \"\"\"Check if n is equal to the product of the first c even integers multiplied by b and added to a\"\"\"\n    return n == a + (b * (2**c - 2))",
        "solution_func": "def g(a=5, b=3, c=7):\n    return a + (b * (2**c - 2))",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    return any((arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i + 1, len(arr))))\n\ndef g(arr: List[int], target=100):\n    return arr\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 119,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    return any((arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i + 1, len(arr))))",
        "solution_func": "def g(arr: List[int], target=100):\n    return arr",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr) + 1):\n            if sum(arr[i:j]) == target:\n                return True\n    return False\n\ndef g(arr: List[int], target=50):\n    return arr\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 119,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr) + 1):\n            if sum(arr[i:j]) == target:\n                return True\n    return False",
        "solution_func": "def g(arr: List[int], target=50):\n    return arr",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=3) -> bool:\n    \"\"\"Check if there are exactly 'target' number of unique elements in the list\"\"\"\n    return len(set(arr)) == target\n\ndef g(arr: List[int], target=3):\n    return arr\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 119,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=3) -> bool:\n    \"\"\"Check if there are exactly 'target' number of unique elements in the list\"\"\"\n    return len(set(arr)) == target",
        "solution_func": "def g(arr: List[int], target=3):\n    return arr",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], prefix='Mr.', suffix='Jr.') -> bool:\n    \"\"\"Check if all names in the list start with the prefix and end with the suffix\"\"\"\n    return all(name.startswith(prefix) and name.endswith(suffix) for name in names)\n\ndef g(prefix='Mr.', suffix='Jr.'):\n    return [prefix + name + suffix for name in ['John', 'Jane', 'James']]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 119,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(names: List[str], prefix='Mr.', suffix='Jr.') -> bool:\n    \"\"\"Check if all names in the list start with the prefix and end with the suffix\"\"\"\n    return all(name.startswith(prefix) and name.endswith(suffix) for name in names)",
        "solution_func": "def g(prefix='Mr.', suffix='Jr.'):\n    return [prefix + name + suffix for name in ['John', 'Jane', 'James']]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(dates: List[str], format='%Y-%m-%d') -> bool:\n    \"\"\"Check if all dates in the list are in the specified format\"\"\"\n    try:\n        for date in dates:\n            datetime.strptime(date, format)\n    except ValueError:\n        return False\n    return True\n\ndef g(format='%Y-%m-%d'):\n    return ['2021-01-01', '2022-12-31', '2023-13-01']\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 119,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(dates: List[str], format='%Y-%m-%d') -> bool:\n    \"\"\"Check if all dates in the list are in the specified format\"\"\"\n    try:\n        for date in dates:\n            datetime.strptime(date, format)\n    except ValueError:\n        return False\n    return True",
        "solution_func": "def g(format='%Y-%m-%d'):\n    return ['2021-01-01', '2022-12-31', '2023-13-01']",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if any row or column in the matrix sums up to the target value\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    return target in rows or target in cols\n\ndef g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 119,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if any row or column in the matrix sums up to the target value\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    return target in rows or target in cols",
        "solution_func": "def g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there is a subarray in the list that adds up to zero.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if sum(nums[i:j+1]) == 0:\n                return True\n    return False\n\ndef g():\n    return [1, 2, -3, 4, -1, -2, -4, 3]\n\nassert f(g())\n\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 119,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there is a subarray in the list that adds up to zero.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if sum(nums[i:j+1]) == 0:\n                return True\n    return False",
        "solution_func": "def g():\n    return [1, 2, -3, 4, -1, -2, -4, 3]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 120,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Find a string that contains at least one of the given substrings.\"\"\"\n    return any((sub in s for sub in substrings))\n\ndef g(substrings=['apple', 'banana', 'cherry', 'date']):\n    return ''.join(substrings)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 120,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Find a string that contains at least one of the given substrings.\"\"\"\n    return any((sub in s for sub in substrings))",
        "solution_func": "def g(substrings=['apple', 'banana', 'cherry', 'date']):\n    return ''.join(substrings)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(inds: List[int], li=[1, 2, 3, 4, 5], target=[3, 4, 5]) -> bool:\n    \"\"\"Find three indices to achieve a given list slice.\"\"\"\n    (i, j, k) = inds\n    return li[i:j:k] == target\n\ndef g(li=[1, 2, 3, 4, 5], target=[3, 4, 5]):\n    from itertools import product\n    for (i, j, k) in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            0.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 120,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(inds: List[int], li=[1, 2, 3, 4, 5], target=[3, 4, 5]) -> bool:\n    \"\"\"Find three indices to achieve a given list slice.\"\"\"\n    (i, j, k) = inds\n    return li[i:j:k] == target",
        "solution_func": "def g(li=[1, 2, 3, 4, 5], target=[3, 4, 5]):\n    from itertools import product\n    for (i, j, k) in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass",
        "map_ix": [
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(strings: List[str], target_length=5) -> bool:\n    \"\"\"Given a list of strings, find the strings that have a length equal to the target length\"\"\"\n    return all((len(s) == target_length for s in strings))\ndef g(target_length=5):\n    return [\"apple\", \"banana\", \"orange\", \"kiwi\", \"melon\", \"grape\"]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 120,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(strings: List[str], target_length=5) -> bool:\n    \"\"\"Given a list of strings, find the strings that have a length equal to the target length\"\"\"\n    return all((len(s) == target_length for s in strings))",
        "solution_func": "def g(target_length=5):\n    return [\"apple\", \"banana\", \"orange\", \"kiwi\", \"melon\", \"grape\"]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import Tuple\ndef f(pairs: List[Tuple[int, int]], target_sum=10) -> bool:\n    \"\"\"Find two numbers in the list of pairs that add up to the target sum\"\"\"\n    for (a, b) in pairs:\n        if a + b == target_sum:\n            return True\n    return False\ndef g(target_sum=10):\n    return [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 120,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import Tuple\ndef f(pairs: List[Tuple[int, int]], target_sum=10) -> bool:\n    \"\"\"Find two numbers in the list of pairs that add up to the target sum\"\"\"\n    for (a, b) in pairs:\n        if a + b == target_sum:\n            return True\n    return False",
        "solution_func": "def g(target_sum=10):\n    return [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=-1950797984487873, b=6211965468307518) -> bool:\n    \"\"\"Find n that when divided by b is equal to a\"\"\"\n    return n % b == a\ndef g(a=-1950797984487873, b=6211965468307518):\n    return a * b\nassert f(g())\n",
        "emb": null,
        "idx_generation": 120,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=-1950797984487873, b=6211965468307518) -> bool:\n    \"\"\"Find n that when divided by b is equal to a\"\"\"\n    return n % b == a",
        "solution_func": "def g(a=-1950797984487873, b=6211965468307518):\n    return a * b",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=10, lower=-8326797433194240, seq=[49, -99, 80, 26, 54, 13, 37, 13, -52, -47]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is maximal, possibly looping around\"\"\"\n    total = 0\n    for i in range(start, start + k):\n        total += seq[i]\n    return total >= lower\n\ndef g(k=10, lower=-8326797433194240, seq=[49, -99, 80, 26, 54, 13, 37, 13, -52, -47]):\n    def sum_consecutive(start):\n        ans = 0\n        for i in range(start, start + k):\n            ans += seq[i]\n        return ans\n    return max(range(-len(seq), len(seq) - k + 1), key=sum_consecutive)\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 120,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(start: int, k=10, lower=-8326797433194240, seq=[49, -99, 80, 26, 54, 13, 37, 13, -52, -47]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is maximal, possibly looping around\"\"\"\n    total = 0\n    for i in range(start, start + k):\n        total += seq[i]\n    return total >= lower",
        "solution_func": "def g(k=10, lower=-8326797433194240, seq=[49, -99, 80, 26, 54, 13, 37, 13, -52, -47]):\n    def sum_consecutive(start):\n        ans = 0\n        for i in range(start, start + k):\n            ans += seq[i]\n        return ans\n    return max(range(-len(seq), len(seq) - k + 1), key=sum_consecutive)",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(start: int, k=10, lower=-8326797433194240, seq=[49, -99, 80, 26, 54, 13, 37, 13, -52, -47]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is minimal, possibly looping around\"\"\"\n    total = 0\n    for i in range(start, start + k):\n        total += seq[i]\n    return total <= lower\n\ndef g(k=10, lower=-8326797433194240, seq=[49, -99, 80, 26, 54, 13, 37, 13, -52, -47]):\n    def sum_consecutive(start):\n        ans = 0\n        for i in range(start, start + k):\n            ans += seq[i]\n        return ans\n    return min(range(-len(seq), len(seq) - k + 1), key=sum_consecutive)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 120,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(start: int, k=10, lower=-8326797433194240, seq=[49, -99, 80, 26, 54, 13, 37, 13, -52, -47]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is minimal, possibly looping around\"\"\"\n    total = 0\n    for i in range(start, start + k):\n        total += seq[i]\n    return total <= lower",
        "solution_func": "def g(k=10, lower=-8326797433194240, seq=[49, -99, 80, 26, 54, 13, 37, 13, -52, -47]):\n    def sum_consecutive(start):\n        ans = 0\n        for i in range(start, start + k):\n            ans += seq[i]\n        return ans\n    return min(range(-len(seq), len(seq) - k + 1), key=sum_consecutive)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(start: int, k=10, lower=-8326797433194240, seq=[49, -99, 80, 26, 54, 13, 37, 13, -52, -47]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is equal to the average of the entire sequence, possibly looping around\"\"\"\n    total = 0\n    for i in range(start, start + k):\n        total += seq[i]\n    return total == sum(seq) / len(seq)\n\ndef g(k=10, lower=-8326797433194240, seq=[49, -99, 80, 26, 54, 13, 37, 13, -52, -47]):\n    def sum_consecutive(start):\n        ans = 0\n        for i in range(start, start + k):\n            ans += seq[i]\n        return ans\n    return next(start for start in range(-len(seq), len(seq) - k + 1) if sum_consecutive(start) == sum(seq) / len(seq))\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 120,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(start: int, k=10, lower=-8326797433194240, seq=[49, -99, 80, 26, 54, 13, 37, 13, -52, -47]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is equal to the average of the entire sequence, possibly looping around\"\"\"\n    total = 0\n    for i in range(start, start + k):\n        total += seq[i]\n    return total == sum(seq) / len(seq)",
        "solution_func": "def g(k=10, lower=-8326797433194240, seq=[49, -99, 80, 26, 54, 13, 37, 13, -52, -47]):\n    def sum_consecutive(start):\n        ans = 0\n        for i in range(start, start + k):\n            ans += seq[i]\n        return ans\n    return next(start for start in range(-len(seq), len(seq) - k + 1) if sum_consecutive(start) == sum(seq) / len(seq))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target sum.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=100):\n    numbers = [10, 20, 30, 40, 50, 60, 70]\n    return numbers\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 120,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target sum.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=100):\n    numbers = [10, 20, 30, 40, 50, 60, 70]\n    return numbers",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a subset of numbers from the list that add up to the target.\"\"\"\n    return any(sum(subset) == target for subset in powerset(nums))\ndef g(nums=[25, 10, 5, 20, 15]):\n    return nums\n\ndef powerset(nums):\n    result = [[]]\n    for num in nums:\n        result += [subset + [num] for subset in result]\n    return result\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 121,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a subset of numbers from the list that add up to the target.\"\"\"\n    return any(sum(subset) == target for subset in powerset(nums))",
        "solution_func": "def g(nums=[25, 10, 5, 20, 15]):\n    return nums\n\ndef powerset(nums):\n    result = [[]]\n    for num in nums:\n        result += [subset + [num] for subset in result]\n    return result",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find a path from the top-left corner to the bottom-right corner of the matrix that adds up to the target.\"\"\"\n    m, n = len(matrix), len(matrix[0])\n    dp = [[False] * n for _ in range(m)]\n    dp[0][0] = matrix[0][0] == target\n    for i in range(1, m):\n        dp[i][0] = dp[i-1][0] or matrix[i][0] == target\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] or matrix[0][j] == target\n    for i in range(1, m):\n        for j in range(1, n):\n            if dp[i-1][j] or dp[i][j-1] or matrix[i][j] == target:\n                dp[i][j] = True\n    return dp[m-1][n-1]\ndef g(matrix=[[2, 3, 5], [1, 2, 6], [4, 6, 2]]):\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 121,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find a path from the top-left corner to the bottom-right corner of the matrix that adds up to the target.\"\"\"\n    m, n = len(matrix), len(matrix[0])\n    dp = [[False] * n for _ in range(m)]\n    dp[0][0] = matrix[0][0] == target\n    for i in range(1, m):\n        dp[i][0] = dp[i-1][0] or matrix[i][0] == target\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] or matrix[0][j] == target\n    for i in range(1, m):\n        for j in range(1, n):\n            if dp[i-1][j] or dp[i][j-1] or matrix[i][j] == target:\n                dp[i][j] = True\n    return dp[m-1][n-1]",
        "solution_func": "def g(matrix=[[2, 3, 5], [1, 2, 6], [4, 6, 2]]):\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(words: List[str], prefix=\"a\") -> bool:\n    \"\"\"Find a word from the list that starts with the given prefix.\"\"\"\n    return any(word.startswith(prefix) for word in words)\ndef g(words=[\"apple\", \"banana\", \"cherry\", \"date\"]):\n    return words\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 121,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(words: List[str], prefix=\"a\") -> bool:\n    \"\"\"Find a word from the list that starts with the given prefix.\"\"\"\n    return any(word.startswith(prefix) for word in words)",
        "solution_func": "def g(words=[\"apple\", \"banana\", \"cherry\", \"date\"]):\n    return words",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list such that their sum equals the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target: int):\n    return [1, target-1]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 121,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list such that their sum equals the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target: int):\n    return [1, target-1]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, k: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list such that their sum equals the target and their difference is less than k\"\"\"\n    return any(abs(nums[i] - nums[j]) < k for i in range(len(nums)) for j in range(i+1, len(nums)) if nums[i] + nums[j] == target)\n\ndef g(target: int, k: int):\n    return [k, target-k]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 121,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, k: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list such that their sum equals the target and their difference is less than k\"\"\"\n    return any(abs(nums[i] - nums[j]) < k for i in range(len(nums)) for j in range(i+1, len(nums)) if nums[i] + nums[j] == target)",
        "solution_func": "def g(target: int, k: int):\n    return [k, target-k]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, k: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list such that their sum equals the target and their difference is greater than k\"\"\"\n    return any(abs(nums[i] - nums[j]) > k for i in range(len(nums)) for j in range(i+1, len(nums)) if nums[i] + nums[j] == target)\n\ndef g(target: int, k: int):\n    return [target-k, k]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 121,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, k: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list such that their sum equals the target and their difference is greater than k\"\"\"\n    return any(abs(nums[i] - nums[j]) > k for i in range(len(nums)) for j in range(i+1, len(nums)) if nums[i] + nums[j] == target)",
        "solution_func": "def g(target: int, k: int):\n    return [target-k, k]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(seq: List[int], n=10, length=5) -> bool:\n    \"\"\"Check if a given sequence contains exactly 'n' numbers such that the sum of the sequence is equal to 'length'.\"\"\"\n    return len(seq) == n and sum(seq) == length\ndef g(n=10, length=5):\n    return [1] * n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 121,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(seq: List[int], n=10, length=5) -> bool:\n    \"\"\"Check if a given sequence contains exactly 'n' numbers such that the sum of the sequence is equal to 'length'.\"\"\"\n    return len(seq) == n and sum(seq) == length",
        "solution_func": "def g(n=10, length=5):\n    return [1] * n",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(seq: List[int], n=17, length=10) -> bool:\n    \"\"\"Check if there is a sequence of positive integers such that the sum of the sequence is equal to 'length' and the product is equal to 'n'.\"\"\"\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return len(seq) > 0 and sum(seq) == length and prod(seq) == n\ndef g(n=17, length=10):\n    ans = []\n    for i in range(1, length + 1):\n        if n % i == 0:\n            ans.append(i)\n    return ans\nassert f(g())\n",
        "emb": null,
        "idx_generation": 121,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(seq: List[int], n=17, length=10) -> bool:\n    \"\"\"Check if there is a sequence of positive integers such that the sum of the sequence is equal to 'length' and the product is equal to 'n'.\"\"\"\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return len(seq) > 0 and sum(seq) == length and prod(seq) == n",
        "solution_func": "def g(n=17, length=10):\n    ans = []\n    for i in range(1, length + 1):\n        if n % i == 0:\n            ans.append(i)\n    return ans",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(seq: List[int], n=15, length=8) -> bool:\n    \"\"\"Check if a given sequence contains exactly 'n' numbers such that the sum of the sequence is equal to 'length' and all the numbers are odd.\"\"\"\n    return len(seq) == n and sum(seq) == length and all((num % 2 != 0 for num in seq))\ndef g(n=15, length=8):\n    return [1] * n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 121,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(seq: List[int], n=15, length=8) -> bool:\n    \"\"\"Check if a given sequence contains exactly 'n' numbers such that the sum of the sequence is equal to 'length' and all the numbers are odd.\"\"\"\n    return len(seq) == n and sum(seq) == length and all((num % 2 != 0 for num in seq))",
        "solution_func": "def g(n=15, length=8):\n    return [1] * n",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=20) -> bool:\n    \"\"\"Check if the given number is divisible by m and is also a perfect square.\"\"\"\n    return n % m == 0 and int(n**0.5)**2 == n\n\ndef g(m=20):\n    return m**2\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0
        ],
        "idx_generation": 121,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=20) -> bool:\n    \"\"\"Check if the given number is divisible by m and is also a perfect square.\"\"\"\n    return n % m == 0 and int(n**0.5)**2 == n",
        "solution_func": "def g(m=20):\n    return m**2",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find a triplet of numbers from the list that sums up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  # A list of numbers\nassert f(g())\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 122,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find a triplet of numbers from the list that sums up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  # A list of numbers",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, strings=['hello', 'world', 'python', 'programming']) -> bool:\n    \"\"\"Check if a given string is a substring of any string in the list\"\"\"\n    return any(s in string for string in strings)\ndef g(strings=['hello', 'world', 'python', 'programming']):\n    return 'prog'\nassert f(g())\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 122,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, strings=['hello', 'world', 'python', 'programming']) -> bool:\n    \"\"\"Check if a given string is a substring of any string in the list\"\"\"\n    return any(s in string for string in strings)",
        "solution_func": "def g(strings=['hello', 'world', 'python', 'programming']):\n    return 'prog'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is a symmetric matrix\"\"\"\n    n = len(matrix)\n    return all(matrix[i][j] == matrix[j][i] for i in range(n) for j in range(n))\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n\n",
        "emb": [
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 122,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is a symmetric matrix\"\"\"\n    n = len(matrix)\n    return all(matrix[i][j] == matrix[j][i] for i in range(n) for j in range(n))",
        "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]",
        "map_ix": [
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(substrings: List[str], s='rywixekugagethathulisitextanyp', count=451) -> bool:\n    \"\"\"Find a list of >= count distinct strings that are all contained in s. Additionally, the strings should have at least one vowel in them.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings)) and any((any((vowel in sub for vowel in vowels)) for sub in substrings))\n    \ndef g(s='rywixekugagethathulisitextanyp', count=451):\n    return [''] + sorted(set(s[j:i] for i in range(len(s) + 1) for j in range(i)))\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 122,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(substrings: List[str], s='rywixekugagethathulisitextanyp', count=451) -> bool:\n    \"\"\"Find a list of >= count distinct strings that are all contained in s. Additionally, the strings should have at least one vowel in them.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings)) and any((any((vowel in sub for vowel in vowels)) for sub in substrings))",
        "solution_func": "def g(s='rywixekugagethathulisitextanyp', count=451):\n    return [''] + sorted(set(s[j:i] for i in range(len(s) + 1) for j in range(i)))",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(substrings: List[str], s='rywixekugagethathulisitextanyp', count=451) -> bool:\n    \"\"\"Find a list of >= count distinct strings that are all contained in s. Additionally, the strings should have a length greater than or equal to 3.\"\"\"\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings)) and all((len(sub) >= 3 for sub in substrings))\n    \ndef g(s='rywixekugagethathulisitextanyp', count=451):\n    return [''] + sorted(set(s[j:i] for i in range(len(s) + 1) for j in range(i)))\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 122,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(substrings: List[str], s='rywixekugagethathulisitextanyp', count=451) -> bool:\n    \"\"\"Find a list of >= count distinct strings that are all contained in s. Additionally, the strings should have a length greater than or equal to 3.\"\"\"\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings)) and all((len(sub) >= 3 for sub in substrings))",
        "solution_func": "def g(s='rywixekugagethathulisitextanyp', count=451):\n    return [''] + sorted(set(s[j:i] for i in range(len(s) + 1) for j in range(i)))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(substrings: List[str], s='rywixekugagethathulisitextanyp', count=451) -> bool:\n    \"\"\"Find a list of >= count distinct strings that are all contained in s. Additionally, the length of each string should be a multiple of 4.\"\"\"\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings)) and all((len(sub) % 4 == 0 for sub in substrings))\n    \ndef g(s='rywixekugagethathulisitextanyp', count=451):\n    return [''] + sorted(set(s[j:i] for i in range(len(s) + 1) for j in range(i)))\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 122,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(substrings: List[str], s='rywixekugagethathulisitextanyp', count=451) -> bool:\n    \"\"\"Find a list of >= count distinct strings that are all contained in s. Additionally, the length of each string should be a multiple of 4.\"\"\"\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings)) and all((len(sub) % 4 == 0 for sub in substrings))",
        "solution_func": "def g(s='rywixekugagethathulisitextanyp', count=451):\n    return [''] + sorted(set(s[j:i] for i in range(len(s) + 1) for j in range(i)))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(target: int, start=5, seq=[10, 5, 2, 8, 6, 10, 3, 1, 9, 7, 5]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is equal to the target value, possibly looping around\"\"\"\n    total = 0\n    for i in range(start, start + len(seq)):\n        total += seq[i % len(seq)]\n        if total == target:\n            return True\n    return False\ndef g(start=5, seq=[10, 5, 2, 8, 6, 10, 3, 1, 9, 7, 5]):\n    def sum_sequence(start):\n        total = 0\n        for i in range(start, start + len(seq)):\n            total += seq[i % len(seq)]\n        return total\n    return max(range(len(seq)), key=lambda x: sum_sequence(x))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 122,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(target: int, start=5, seq=[10, 5, 2, 8, 6, 10, 3, 1, 9, 7, 5]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is equal to the target value, possibly looping around\"\"\"\n    total = 0\n    for i in range(start, start + len(seq)):\n        total += seq[i % len(seq)]\n        if total == target:\n            return True\n    return False",
        "solution_func": "def g(start=5, seq=[10, 5, 2, 8, 6, 10, 3, 1, 9, 7, 5]):\n    def sum_sequence(start):\n        total = 0\n        for i in range(start, start + len(seq)):\n            total += seq[i % len(seq)]\n        return total\n    return max(range(len(seq)), key=lambda x: sum_sequence(x))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, a=5, b=2, c=10) -> bool:\n    \"\"\"Find a number that follows a specific pattern\"\"\"\n    return num == a * (10 ** 2) + b * (10 ** 1) + c * (10 ** 0)\ndef g(a=5, b=2, c=10):\n    return a * (10 ** 2) + b * (10 ** 1) + c * (10 ** 0)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 122,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num: int, a=5, b=2, c=10) -> bool:\n    \"\"\"Find a number that follows a specific pattern\"\"\"\n    return num == a * (10 ** 2) + b * (10 ** 1) + c * (10 ** 0)",
        "solution_func": "def g(a=5, b=2, c=10):\n    return a * (10 ** 2) + b * (10 ** 1) + c * (10 ** 0)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10, k=3) -> bool:\n    \"\"\"Find a subset of k consecutive elements whose sum is equal to the target value\"\"\"\n    for i in range(len(arr) - k + 1):\n        if sum(arr[i:i+k]) == target:\n            return True\n    return False\ndef g(target=10, k=3):\n    return [target] * k\nassert f(g())\n",
        "emb": null,
        "idx_generation": 122,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=10, k=3) -> bool:\n    \"\"\"Find a subset of k consecutive elements whose sum is equal to the target value\"\"\"\n    for i in range(len(arr) - k + 1):\n        if sum(arr[i:i+k]) == target:\n            return True\n    return False",
        "solution_func": "def g(target=10, k=3):\n    return [target] * k",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to find a combination of numbers from the list that adds up to the target number.\"\"\"\n    return any(sum(comb) == target for r in range(1, len(nums) + 1) for comb in combinations(nums, r))\ndef g(nums=[10, 20, 30, 40, 50]):\n    import random\n    target = random.randint(1, 200)\n    return [num for num in nums if random.random() > 0.5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 122,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to find a combination of numbers from the list that adds up to the target number.\"\"\"\n    return any(sum(comb) == target for r in range(1, len(nums) + 1) for comb in combinations(nums, r))",
        "solution_func": "def g(nums=[10, 20, 30, 40, 50]):\n    import random\n    target = random.randint(1, 200)\n    return [num for num in nums if random.random() > 0.5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], target_length=10) -> bool:\n    \"\"\"Check if there are two strings in the list 'strings' that have a combined length greater than the target length.\"\"\"\n    for i in range(len(strings)):\n        for j in range(i + 1, len(strings)):\n            if len(strings[i]) + len(strings[j]) > target_length:\n                return True\n    return False\n\ndef g(strings=['apple', 'banana', 'cherry', 'date']):\n    return strings\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 123,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(strings: List[str], target_length=10) -> bool:\n    \"\"\"Check if there are two strings in the list 'strings' that have a combined length greater than the target length.\"\"\"\n    for i in range(len(strings)):\n        for j in range(i + 1, len(strings)):\n            if len(strings[i]) + len(strings[j]) > target_length:\n                return True\n    return False",
        "solution_func": "def g(strings=['apple', 'banana', 'cherry', 'date']):\n    return strings",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[float], target_sum=100) -> bool:\n    \"\"\"Determine if there are three numbers in the list 'numbers' that sum up to a value greater than the target sum.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            for k in range(j + 1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] > target_sum:\n                    return True\n    return False\n\ndef g(numbers=[10.5, 20.3, 30.2, 40.6, 50.1]):\n    return numbers\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 123,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[float], target_sum=100) -> bool:\n    \"\"\"Determine if there are three numbers in the list 'numbers' that sum up to a value greater than the target sum.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            for k in range(j + 1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] > target_sum:\n                    return True\n    return False",
        "solution_func": "def g(numbers=[10.5, 20.3, 30.2, 40.6, 50.1]):\n    return numbers",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(items: List[str], target_item='apple') -> bool:\n    \"\"\"Check if the target item is in the list 'items' and if the number of occurrences of the target item is greater than 2.\"\"\"\n    count = items.count(target_item)\n    return count > 2\n\ndef g(items=['apple', 'banana', 'cherry', 'apple', 'date', 'apple']):\n    return items\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 123,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(items: List[str], target_item='apple') -> bool:\n    \"\"\"Check if the target item is in the list 'items' and if the number of occurrences of the target item is greater than 2.\"\"\"\n    count = items.count(target_item)\n    return count > 2",
        "solution_func": "def g(items=['apple', 'banana', 'cherry', 'apple', 'date', 'apple']):\n    return items",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Determine if the given list contains a subsequence that sums up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]\n\ndef g():\n    nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 123,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Determine if the given list contains a subsequence that sums up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]",
        "solution_func": "def g():\n    nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import Tuple\n\ndef f(s: str, t: str, target=5) -> bool:\n    \"\"\"Determine if there is a subsequence of length target in string s that is equal to string t.\"\"\"\n    m, n = len(s), len(t)\n    if m < n:\n        return False\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        dp[i][0] = 1\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[m][n] >= target\n\ndef g():\n    s = \"subsequence\"\n    t = \"sequence\"\n    return s, t\n\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 123,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import Tuple\n\ndef f(s: str, t: str, target=5) -> bool:\n    \"\"\"Determine if there is a subsequence of length target in string s that is equal to string t.\"\"\"\n    m, n = len(s), len(t)\n    if m < n:\n        return False\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        dp[i][0] = 1\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[m][n] >= target",
        "solution_func": "def g():\n    s = \"subsequence\"\n    t = \"sequence\"\n    return s, t",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Determine if there is a subset of nums that adds up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]\n\ndef g():\n    nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 123,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Determine if there is a subset of nums that adds up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]",
        "solution_func": "def g():\n    nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(numbers: List[int], target_sum: int) -> bool:\n    \"\"\"Check if there exist two numbers in the list that add up to the target sum.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum: int) -> Tuple[List[int], int]:\n    numbers = [1, 3, 5, 7, 9]\n    return numbers, target_sum\n\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 123,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List, Tuple\n\ndef f(numbers: List[int], target_sum: int) -> bool:\n    \"\"\"Check if there exist two numbers in the list that add up to the target sum.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum: int) -> Tuple[List[int], int]:\n    numbers = [1, 3, 5, 7, 9]\n    return numbers, target_sum",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(grades: List[int], passing_grade: int = 60) -> bool:\n    \"\"\"Check if all the grades in the list are above or equal to the passing grade.\"\"\"\n    return all(grade >= passing_grade for grade in grades)\n\ndef g(passing_grade: int = 60) -> Tuple[List[int], int]:\n    grades = [75, 80, 90, 65, 70]\n    return grades, passing_grade\n\nassert f(*g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 123,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List, Tuple\n\ndef f(grades: List[int], passing_grade: int = 60) -> bool:\n    \"\"\"Check if all the grades in the list are above or equal to the passing grade.\"\"\"\n    return all(grade >= passing_grade for grade in grades)",
        "solution_func": "def g(passing_grade: int = 60) -> Tuple[List[int], int]:\n    grades = [75, 80, 90, 65, 70]\n    return grades, passing_grade",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if the target number is present in the list.\"\"\"\n    return target in numbers\n\ndef g(target: int) -> Tuple[List[int], int]:\n    numbers = [2, 4, 6, 8, 10]\n    return numbers, target\n\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 123,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List, Tuple\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if the target number is present in the list.\"\"\"\n    return target in numbers",
        "solution_func": "def g(target: int) -> Tuple[List[int], int]:\n    numbers = [2, 4, 6, 8, 10]\n    return numbers, target",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport numpy as np\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if a given matrix is a magic square, where the sum of every row, column, and diagonal is equal to the target value.\"\"\"\n    matrix = np.array(matrix)\n    n = matrix.shape[0]\n    \n    row_sums = np.sum(matrix, axis=1)\n    col_sums = np.sum(matrix, axis=0)\n    diag_sum1 = np.trace(matrix)\n    diag_sum2 = np.trace(np.fliplr(matrix))\n    \n    return all(sum_val == target for sum_val in row_sums + col_sums + [diag_sum1, diag_sum2])\n\ndef g(target=20):\n    return [[4, 9, 2], [3, 5, 7], [8, 1, 6]]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 123,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if a given matrix is a magic square, where the sum of every row, column, and diagonal is equal to the target value.\"\"\"\n    matrix = np.array(matrix)\n    n = matrix.shape[0]\n    \n    row_sums = np.sum(matrix, axis=1)\n    col_sums = np.sum(matrix, axis=0)\n    diag_sum1 = np.trace(matrix)\n    diag_sum2 = np.trace(np.fliplr(matrix))\n    \n    return all(sum_val == target for sum_val in row_sums + col_sums + [diag_sum1, diag_sum2])",
        "solution_func": "def g(target=20):\n    return [[4, 9, 2], [3, 5, 7], [8, 1, 6]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 124,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 124,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols",
        "solution_func": "def g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Check if the given string contains the given substring.\"\"\"\n    return substring in string\n\ndef g(substring='abc'):\n    return \"abcdefghi\"\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 124,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Check if the given string contains the given substring.\"\"\"\n    return substring in string",
        "solution_func": "def g(substring='abc'):\n    return \"abcdefghi\"",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose sum is equal to the target value.\"\"\"\n    return any(x + y == target for i, x in enumerate(numbers) for y in numbers[i+1:])\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 124,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose sum is equal to the target value.\"\"\"\n    return any(x + y == target for i, x in enumerate(numbers) for y in numbers[i+1:])",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='python') -> bool:\n    \"\"\"Check if the given string contains the specified substring.\"\"\"\n    return substring in s\n\ndef g(substring='python'):\n    return \"I love python programming\"\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 124,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring='python') -> bool:\n    \"\"\"Check if the given string contains the specified substring.\"\"\"\n    return substring in s",
        "solution_func": "def g(substring='python'):\n    return \"I love python programming\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Given a list of integers, determine if there exists a pair of numbers in the list whose sum is equal to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=5):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 124,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Given a list of integers, determine if there exists a pair of numbers in the list whose sum is equal to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=5):\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Return True if there exists a pair of numbers in the list nums that sum up to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=0):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 124,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Return True if there exists a pair of numbers in the list nums that sum up to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str], pattern=\"\") -> bool:\n    \"\"\"Return True if all words in the list words follow the same pattern as the input pattern\"\"\"\n    def word_pattern(word):\n        mapping = {}\n        pattern = \"\"\n        for char in word:\n            if char not in mapping:\n                mapping[char] = str(len(mapping))\n            pattern += mapping[char]\n        return pattern\n    return all(word_pattern(word) == word_pattern(pattern) for word in words)\ndef g(pattern=\"\"):\n    return [\"foo\", \"bar\", \"baz\"]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 124,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], pattern=\"\") -> bool:\n    \"\"\"Return True if all words in the list words follow the same pattern as the input pattern\"\"\"\n    def word_pattern(word):\n        mapping = {}\n        pattern = \"\"\n        for char in word:\n            if char not in mapping:\n                mapping[char] = str(len(mapping))\n            pattern += mapping[char]\n        return pattern\n    return all(word_pattern(word) == word_pattern(pattern) for word in words)",
        "solution_func": "def g(pattern=\"\"):\n    return [\"foo\", \"bar\", \"baz\"]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Return True if the target number exists in the matrix\"\"\"\n    return any(target in row for row in matrix)\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 124,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Return True if the target number exists in the matrix\"\"\"\n    return any(target in row for row in matrix)",
        "solution_func": "def g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, target=100) -> bool:\n    \"\"\"Given a list of n positive integers, find a subset that sums up to the target value.\"\"\"\n    def subset_sum(subset, target):\n        if target == 0:\n            return True\n        if target < 0 or len(subset) == 0:\n            return False\n        return subset_sum(subset[1:], target-subset[0]) or subset_sum(subset[1:], target)\n    subset = [2, 5, 10, 15, 20]\n    return subset_sum(subset, target)\ndef g(target=100):\n    return target\nassert f(g())\n",
        "emb": null,
        "idx_generation": 124,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, target=100) -> bool:\n    \"\"\"Given a list of n positive integers, find a subset that sums up to the target value.\"\"\"\n    def subset_sum(subset, target):\n        if target == 0:\n            return True\n        if target < 0 or len(subset) == 0:\n            return False\n        return subset_sum(subset[1:], target-subset[0]) or subset_sum(subset[1:], target)\n    subset = [2, 5, 10, 15, 20]\n    return subset_sum(subset, target)",
        "solution_func": "def g(target=100):\n    return target",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], target=10, k=2) -> bool:\n    \"\"\"Find if there are k numbers in the list that add up to the target value.\"\"\"\n    return len(nums) >= k and any(sum(c) == target for c in combinations(nums, k))\ndef g(target=10, k=2):\n    import random\n    nums = random.choices(range(1, 10), k=10)\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 125,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(nums: List[int], target=10, k=2) -> bool:\n    \"\"\"Find if there are k numbers in the list that add up to the target value.\"\"\"\n    return len(nums) >= k and any(sum(c) == target for c in combinations(nums, k))",
        "solution_func": "def g(target=10, k=2):\n    import random\n    nums = random.choices(range(1, 10), k=10)\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find if there exists a row or column in the matrix that adds up to the target value.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(cols):\n        if sum(matrix[i][j] for i in range(rows)) == target:\n            return True\n    return False\ndef g(target=0):\n    import random\n    matrix = [[random.randint(-10, 10) for _ in range(5)] for _ in range(5)]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 125,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find if there exists a row or column in the matrix that adds up to the target value.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(cols):\n        if sum(matrix[i][j] for i in range(rows)) == target:\n            return True\n    return False",
        "solution_func": "def g(target=0):\n    import random\n    matrix = [[random.randint(-10, 10) for _ in range(5)] for _ in range(5)]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Find if there exists two numbers in the list that multiply to the target value.\"\"\"\n    return any(nums[i] * nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=50):\n    import random\n    nums = random.choices(range(1, 10), k=10)\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 125,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Find if there exists two numbers in the list that multiply to the target value.\"\"\"\n    return any(nums[i] * nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=50):\n    import random\n    nums = random.choices(range(1, 10), k=10)\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[10, 20, 30, 40]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 125,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums=[10, 20, 30, 40]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], pattern=\"abc\") -> bool:\n    \"\"\"Check if all the words in the list follow a specific pattern.\"\"\"\n    for word in words:\n        if len(word) != len(pattern):\n            return False\n        char_map = {}\n        for i in range(len(word)):\n            if pattern[i] not in char_map:\n                char_map[pattern[i]] = word[i]\n            elif char_map[pattern[i]] != word[i]:\n                return False\n    return True\n\ndef g(pattern=\"abc\"):\n    return [\"xyz\", \"def\", \"mno\"]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 125,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], pattern=\"abc\") -> bool:\n    \"\"\"Check if all the words in the list follow a specific pattern.\"\"\"\n    for word in words:\n        if len(word) != len(pattern):\n            return False\n        char_map = {}\n        for i in range(len(word)):\n            if pattern[i] not in char_map:\n                char_map[pattern[i]] = word[i]\n            elif char_map[pattern[i]] != word[i]:\n                return False\n    return True",
        "solution_func": "def g(pattern=\"abc\"):\n    return [\"xyz\", \"def\", \"mno\"]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list whose product is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[2, 4, 5, 3]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 125,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list whose product is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums=[2, 4, 5, 3]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a given number is present in the list\"\"\"\n    return n in nums\ndef g(nums=[1, 2, 3, 4, 5]):\n    return 3\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 125,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a given number is present in the list\"\"\"\n    return n in nums",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return 3",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=50) -> bool:\n    \"\"\"Find a pair of numbers in the list whose sum is equal to a given target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=50):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 125,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=50) -> bool:\n    \"\"\"Find a pair of numbers in the list whose sum is equal to a given target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=50):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, factors=[2, 3, 5, 7, 11]) -> bool:\n    \"\"\"Check if a given number has any of the given factors\"\"\"\n    return any(n % factor == 0 for factor in factors)\ndef g(factors=[2, 3, 5, 7, 11]):\n    return 14\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 125,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, factors=[2, 3, 5, 7, 11]) -> bool:\n    \"\"\"Check if a given number has any of the given factors\"\"\"\n    return any(n % factor == 0 for factor in factors)",
        "solution_func": "def g(factors=[2, 3, 5, 7, 11]):\n    return 14",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to twice the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == 2 * target:\n                return True\n    return False\n\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 125,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to twice the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == 2 * target:\n                return True\n    return False",
        "solution_func": "def g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if a string contains at least n consecutive consonants\"\"\"\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    count = 0\n    for char in s:\n        if char.lower() in consonants:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False\ndef g(n=5):\n    return 'bdcfgh' + 'a' * (n - 6)\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 126,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if a string contains at least n consecutive consonants\"\"\"\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    count = 0\n    for char in s:\n        if char.lower() in consonants:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False",
        "solution_func": "def g(n=5):\n    return 'bdcfgh' + 'a' * (n - 6)",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=3, c=4) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c even integers)\"\"\"\n    return n + a == sum([b * (2*i) for i in range(1, c+1)])\ndef g(a=2, b=3, c=4):\n    return -a + sum([b * (2*i) for i in range(1, c+1)])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 126,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=2, b=3, c=4) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c even integers)\"\"\"\n    return n + a == sum([b * (2*i) for i in range(1, c+1)])",
        "solution_func": "def g(a=2, b=3, c=4):\n    return -a + sum([b * (2*i) for i in range(1, c+1)])",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find a (closed) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert len(tour) == m * n + 1, 'number of squares visited should be m * n + 1'\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour[:-1]) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                ans.append((0,0))\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "emb": null,
        "idx_generation": 126,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find a (closed) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert len(tour) == m * n + 1, 'number of squares visited should be m * n + 1'\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour[:-1]) == [[i, j] for i in range(m) for j in range(n)]",
        "solution_func": "def g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                ans.append((0,0))\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=4, c=6) -> bool:\n    \"\"\"Check if n is equal to the sum of the first c odd integers multiplied by b and added to a\"\"\"\n    return n == a + sum([b * (2*i - 1) for i in range(1, c+1)])\ndef g(a=2, b=4, c=6):\n    return a + sum([b * (2*i - 1) for i in range(1, c+1)])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 126,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=2, b=4, c=6) -> bool:\n    \"\"\"Check if n is equal to the sum of the first c odd integers multiplied by b and added to a\"\"\"\n    return n == a + sum([b * (2*i - 1) for i in range(1, c+1)])",
        "solution_func": "def g(a=2, b=4, c=6):\n    return a + sum([b * (2*i - 1) for i in range(1, c+1)])",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, s1='a', s2='b', count1=10, count2=5) -> bool:\n    \"\"\"Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and ends with s1 and starts with s2\"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and s.endswith(s1) and s.startswith(s2)\ndef g(s1='a', s2='b', count1=10, count2=5):\n    ans = (s1 * count1) + (s2 * count2)\n    return s2 + ans + s1\nassert f(g())\n",
        "emb": null,
        "idx_generation": 126,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, s1='a', s2='b', count1=10, count2=5) -> bool:\n    \"\"\"Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and ends with s1 and starts with s2\"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and s.endswith(s1) and s.startswith(s2)",
        "solution_func": "def g(s1='a', s2='b', count1=10, count2=5):\n    ans = (s1 * count1) + (s2 * count2)\n    return s2 + ans + s1",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=3, c=4) -> bool:\n    \"\"\"Check if n is equal to the sum of the squares of the first c natural numbers added to a\"\"\"\n    return n == a + sum([i**2 for i in range(1, c+1)])\ndef g(a=2, b=3, c=4):\n    return a + sum([i**2 for i in range(1, c+1)])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 126,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=2, b=3, c=4) -> bool:\n    \"\"\"Check if n is equal to the sum of the squares of the first c natural numbers added to a\"\"\"\n    return n == a + sum([i**2 for i in range(1, c+1)])",
        "solution_func": "def g(a=2, b=3, c=4):\n    return a + sum([i**2 for i in range(1, c+1)])",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that multiply to the target value.\"\"\"\n    return any((numbers[i] * numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 126,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that multiply to the target value.\"\"\"\n    return any((numbers[i] * numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))",
        "solution_func": "def g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers",
        "map_ix": [
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(radius: float, volume=113.09733552923254) -> bool:\n    \"\"\"Determine if the volume of a sphere with the given radius is equal to the target volume.\"\"\"\n    return abs((4/3) * math.pi * (radius**3) - volume) < 1e-06\ndef g(volume=113.09733552923254):\n    radius = 3\n    return radius\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 126,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\ndef f(radius: float, volume=113.09733552923254) -> bool:\n    \"\"\"Determine if the volume of a sphere with the given radius is equal to the target volume.\"\"\"\n    return abs((4/3) * math.pi * (radius**3) - volume) < 1e-06",
        "solution_func": "def g(volume=113.09733552923254):\n    radius = 3\n    return radius",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that subtract to the target value.\"\"\"\n    return any((numbers[i] - numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target=20):\n    numbers = [10, 15, 25, 30, 35, 40, 45, 50]\n    return numbers\nassert f(g())\n",
        "emb": null,
        "idx_generation": 126,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that subtract to the target value.\"\"\"\n    return any((numbers[i] - numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))",
        "solution_func": "def g(target=20):\n    numbers = [10, 15, 25, 30, 35, 40, 45, 50]\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a sum greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] > target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 126,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a sum greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] > target:\n                return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find a pair of numbers whose sum is equal to the target.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(nums: List[int]):\n    return nums\n\nassert f(g())\n\n",
        "emb": null,
        "idx_generation": 127,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find a pair of numbers whose sum is equal to the target.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(nums: List[int]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers, find a pair of numbers whose product is equal to the target.\"\"\"\n    return any((nums[i] * nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(nums: List[int]):\n    return nums\n\nassert f(g())\n\n",
        "emb": null,
        "idx_generation": 127,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers, find a pair of numbers whose product is equal to the target.\"\"\"\n    return any((nums[i] * nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(nums: List[int]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Given a list of integers, find a pair of numbers whose difference is equal to the target.\"\"\"\n    return any((abs(nums[i] - nums[j]) == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(nums: List[int]):\n    return nums\n\nassert f(g())\n\n",
        "emb": null,
        "idx_generation": 127,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Given a list of integers, find a pair of numbers whose difference is equal to the target.\"\"\"\n    return any((abs(nums[i] - nums[j]) == target) for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(nums: List[int]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: List[int], n=3, s=10) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=3, s=10):\n    x = [2] * n\n    x[0] = s - n + 2\n    return x\nassert f(g())\n",
        "emb": null,
        "idx_generation": 127,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=3, s=10) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])",
        "solution_func": "def g(n=3, s=10):\n    x = [2] * n\n    x[0] = s - n + 2\n    return x",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: List[int], n=4, s=15) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=4, s=15):\n    x = [3] * n\n    x[0] = s - n + 3\n    return x\nassert f(g())\n",
        "emb": null,
        "idx_generation": 127,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=4, s=15) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])",
        "solution_func": "def g(n=4, s=15):\n    x = [3] * n\n    x[0] = s - n + 3\n    return x",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: List[int], n=2, s=7) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=2, s=7):\n    x = [4] * n\n    x[0] = s - n + 4\n    return x\nassert f(g())\n",
        "emb": null,
        "idx_generation": 127,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=2, s=7) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])",
        "solution_func": "def g(n=2, s=7):\n    x = [4] * n\n    x[0] = s - n + 4\n    return x",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if the sum of any two numbers in the list is equal to the target value.\"\"\"\n    return any((numbers[i] + numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 127,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if the sum of any two numbers in the list is equal to the target value.\"\"\"\n    return any((numbers[i] + numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))",
        "solution_func": "def g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list whose difference is equal to the target value.\"\"\"\n    return any((abs(numbers[i] - numbers[j]) == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\nassert f(g())\n",
        "emb": null,
        "idx_generation": 127,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list whose difference is equal to the target value.\"\"\"\n    return any((abs(numbers[i] - numbers[j]) == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))",
        "solution_func": "def g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list whose sum is divisible by the target value.\"\"\"\n    return any(((numbers[i] + numbers[j]) % target == 0) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 127,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list whose sum is divisible by the target value.\"\"\"\n    return any(((numbers[i] + numbers[j]) % target == 0) for i in range(len(numbers)) for j in range(i+1, len(numbers)))",
        "solution_func": "def g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], n=3, target=10) -> bool:\n    \"\"\"Check if there are n consecutive numbers in the list that sum up to target\"\"\"\n    for i in range(len(nums) - n + 1):\n        if sum(nums[i:i+n]) == target:\n            return True\n    return False\n\ndef g(n=3, target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 127,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], n=3, target=10) -> bool:\n    \"\"\"Check if there are n consecutive numbers in the list that sum up to target\"\"\"\n    for i in range(len(nums) - n + 1):\n        if sum(nums[i:i+n]) == target:\n            return True\n    return False",
        "solution_func": "def g(n=3, target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\nimport itertools\nfrom typing import *\ndef f(matrix: List[List[int]], n=3, target=15) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the product of every row, column, and diagonal is the same.\"\"\"\n    row_products = [math.prod(row) for row in matrix]\n    col_products = [math.prod(col) for col in zip(*matrix)]\n    diag1_product = math.prod(matrix[i][i] for i in range(n))\n    diag2_product = math.prod(matrix[i][n-i-1] for i in range(n))\n    return all(prod == target for prod in row_products + col_products + [diag1_product, diag2_product])\ndef g(n=3, target=15):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix\n    assert False, f\"No magic square found for n={n}\"\nassert f(g())\n",
        "emb": null,
        "idx_generation": 128,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nimport itertools\nfrom typing import *\ndef f(matrix: List[List[int]], n=3, target=15) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the product of every row, column, and diagonal is the same.\"\"\"\n    row_products = [math.prod(row) for row in matrix]\n    col_products = [math.prod(col) for col in zip(*matrix)]\n    diag1_product = math.prod(matrix[i][i] for i in range(n))\n    diag2_product = math.prod(matrix[i][n-i-1] for i in range(n))\n    return all(prod == target for prod in row_products + col_products + [diag1_product, diag2_product])",
        "solution_func": "def g(n=3, target=15):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import *\ndef f(matrix: List[List[int]], n=3, target=15) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of the first row, the sum of the first column, and the sum of the diagonal is the same.\"\"\"\n    first_row_sum = sum(matrix[0])\n    first_col_sum = sum(col[0] for col in matrix)\n    diag_sum = sum(matrix[i][i] for i in range(n))\n    return first_row_sum == first_col_sum == diag_sum == target\ndef g(n=3, target=15):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix\n    assert False, f\"No magic square found for n={n}\"\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 128,
        "target_skills": null,
        "problem_func": "from typing import*\nimport itertools\nfrom typing import *\ndef f(matrix: List[List[int]], n=3, target=15) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of the first row, the sum of the first column, and the sum of the diagonal is the same.\"\"\"\n    first_row_sum = sum(matrix[0])\n    first_col_sum = sum(col[0] for col in matrix)\n    diag_sum = sum(matrix[i][i] for i in range(n))\n    return first_row_sum == first_col_sum == diag_sum == target",
        "solution_func": "def g(n=3, target=15):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix",
        "map_ix": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import *\ndef f(matrix: List[List[int]], n=3, target=15) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of the first column, the sum of the second row, and the sum of the diagonal is the same.\"\"\"\n    first_col_sum = sum(col[0] for col in matrix)\n    second_row_sum = sum(matrix[1])\n    diag_sum = sum(matrix[i][i] for i in range(n))\n    return first_col_sum == second_row_sum == diag_sum == target\ndef g(n=3, target=15):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix\n    assert False, f\"No magic square found for n={n}\"\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 128,
        "target_skills": null,
        "problem_func": "from typing import*\nimport itertools\nfrom typing import *\ndef f(matrix: List[List[int]], n=3, target=15) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of the first column, the sum of the second row, and the sum of the diagonal is the same.\"\"\"\n    first_col_sum = sum(col[0] for col in matrix)\n    second_row_sum = sum(matrix[1])\n    diag_sum = sum(matrix[i][i] for i in range(n))\n    return first_col_sum == second_row_sum == diag_sum == target",
        "solution_func": "def g(n=3, target=15):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], n=3, target=15) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2])\ndef g(n=3, target=15):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix\n    assert False, f\"No magic square found for n={n}\"\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 128,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], n=3, target=15) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2])",
        "solution_func": "def g(n=3, target=15):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], n=4, target=34) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2])\ndef g(n=4, target=34):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix\n    assert False, f\"No magic square found for n={n}\"\nassert f(g())\n",
        "emb": null,
        "idx_generation": 128,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], n=4, target=34) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2])",
        "solution_func": "def g(n=4, target=34):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], n=5, target=65) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2])\ndef g(n=5, target=65):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix\n    assert False, f\"No magic square found for n={n}\"\nassert f(g())\n",
        "emb": null,
        "idx_generation": 128,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], n=5, target=65) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2])",
        "solution_func": "def g(n=5, target=65):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, a='programming', b='puzzles', length=3) -> bool:\n    \"\"\"Check if a string of length length is present in both strings a and b\"\"\"\n    return len(s) == length and s in a and (s in b)\ndef g(a='programming', b='puzzles', length=3):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 128,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, a='programming', b='puzzles', length=3) -> bool:\n    \"\"\"Check if a string of length length is present in both strings a and b\"\"\"\n    return len(s) == length and s in a and (s in b)",
        "solution_func": "def g(a='programming', b='puzzles', length=3):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='algorithm', b='logarithm', length=5) -> bool:\n    \"\"\"Find a substring of length length that is common in both strings a and b\"\"\"\n    return len(s) == length and s in a and (s in b)\ndef g(a='algorithm', b='logarithm', length=5):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 128,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, a='algorithm', b='logarithm', length=5) -> bool:\n    \"\"\"Find a substring of length length that is common in both strings a and b\"\"\"\n    return len(s) == length and s in a and (s in b)",
        "solution_func": "def g(a='algorithm', b='logarithm', length=5):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, a='python', b='programming', length=3) -> bool:\n    \"\"\"Check if a substring of length length is present in both strings a and b\"\"\"\n    return len(s) == length and s in a and (s in b)\ndef g(a='python', b='programming', length=3):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 128,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, a='python', b='programming', length=3) -> bool:\n    \"\"\"Check if a substring of length length is present in both strings a and b\"\"\"\n    return len(s) == length and s in a and (s in b)",
        "solution_func": "def g(a='python', b='programming', length=3):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, string='banana') -> bool:\n    \"\"\"Check if the given string contains exactly n occurrences of the letter 'a'.\"\"\"\n    return n == string.count('a')\ndef g(string='banana'):\n    return string.count('a')\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 128,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, string='banana') -> bool:\n    \"\"\"Check if the given string contains exactly n occurrences of the letter 'a'.\"\"\"\n    return n == string.count('a')",
        "solution_func": "def g(string='banana'):\n    return string.count('a')",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Given a list of numbers, find if there exists a subset whose sum is equal to the target_sum.\"\"\"\n    def subset_sum(numbers, target_sum, index, current_sum):\n        if current_sum == target_sum:\n            return True\n        if current_sum > target_sum or index >= len(numbers):\n            return False\n        include = subset_sum(numbers, target_sum, index + 1, current_sum + numbers[index])\n        exclude = subset_sum(numbers, target_sum, index + 1, current_sum)\n        return include or exclude\n\n    return subset_sum(numbers, target_sum, 0, 0)\n\ndef g(target_sum=100):\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 129,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Given a list of numbers, find if there exists a subset whose sum is equal to the target_sum.\"\"\"\n    def subset_sum(numbers, target_sum, index, current_sum):\n        if current_sum == target_sum:\n            return True\n        if current_sum > target_sum or index >= len(numbers):\n            return False\n        include = subset_sum(numbers, target_sum, index + 1, current_sum + numbers[index])\n        exclude = subset_sum(numbers, target_sum, index + 1, current_sum)\n        return include or exclude\n\n    return subset_sum(numbers, target_sum, 0, 0)",
        "solution_func": "def g(target_sum=100):\n    return [10, 20, 30, 40, 50]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix (2D list), check if it is a symmetric matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 129,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix (2D list), check if it is a symmetric matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True",
        "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(string: str, target_char='a') -> bool:\n    \"\"\"Given a string, check if it contains the target character.\"\"\"\n    return target_char in string\n\ndef g(target_char='a'):\n    return \"Hello, world!\"\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 129,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, target_char='a') -> bool:\n    \"\"\"Given a string, check if it contains the target character.\"\"\"\n    return target_char in string",
        "solution_func": "def g(target_char='a'):\n    return \"Hello, world!\"",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if the given number is divisible by m but not by m-1.\"\"\"\n    return n % m == 0 and n % (m-1) != 0\n\ndef g(m=10):\n    return 2 * m\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 129,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if the given number is divisible by m but not by m-1.\"\"\"\n    return n % m == 0 and n % (m-1) != 0",
        "solution_func": "def g(m=10):\n    return 2 * m",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if the given number is divisible by m or m+1.\"\"\"\n    return n % m == 0 or n % (m+1) == 0\n\ndef g(m=10):\n    return 2 * m\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 129,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if the given number is divisible by m or m+1.\"\"\"\n    return n % m == 0 or n % (m+1) == 0",
        "solution_func": "def g(m=10):\n    return 2 * m",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if the given number is divisible by m and m+1.\"\"\"\n    return n % m == 0 and n % (m+1) == 0\n\ndef g(m=10):\n    return 2 * m\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 129,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if the given number is divisible by m and m+1.\"\"\"\n    return n % m == 0 and n % (m+1) == 0",
        "solution_func": "def g(m=10):\n    return 2 * m",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(counts: List[int], target_prob=0.5) -> bool:\n    \"\"\"Suppose a list of m 1's and n -1's are permuted at random.\n    What is the probability that the cumulative sum exceeds a certain threshold?\n    The goal is to find counts = [m, n] that make the probability of the cumulative sum exceeding the threshold close to target_prob.\"\"\"\n    (m, n) = counts\n    probs = [0.0] * (m + 1)\n    probs[0] = 1.0\n    for i in range(1, m + 1):\n        for j in range(1, min(n + 1, i) + 1):\n            probs[i] += probs[i - j] / (i + j)\n    return abs(probs[m] - target_prob) < 1e-06\ndef g(target_prob=0.5):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-06:\n            return [m, n]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 129,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(counts: List[int], target_prob=0.5) -> bool:\n    \"\"\"Suppose a list of m 1's and n -1's are permuted at random.\n    What is the probability that the cumulative sum exceeds a certain threshold?\n    The goal is to find counts = [m, n] that make the probability of the cumulative sum exceeding the threshold close to target_prob.\"\"\"\n    (m, n) = counts\n    probs = [0.0] * (m + 1)\n    probs[0] = 1.0\n    for i in range(1, m + 1):\n        for j in range(1, min(n + 1, i) + 1):\n            probs[i] += probs[i - j] / (i + j)\n    return abs(probs[m] - target_prob) < 1e-06",
        "solution_func": "def g(target_prob=0.5):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-06:\n            return [m, n]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(counts: List[int], target_prob=0.5) -> bool:\n    \"\"\"Suppose a list of m 1's and n -1's are permuted at random.\n    What is the probability that the cumulative sum exceeds a certain threshold?\n    The goal is to find counts = [m, n] that make the probability of the cumulative sum exceeding the threshold close to target_prob.\"\"\"\n    (m, n) = counts\n    probs = [0.0] * (m + 1)\n    probs[0] = 1.0\n    for i in range(1, m + 1):\n        for j in range(1, min(n + 1, i) + 1):\n            probs[i] += probs[i - j] / (i + j)\n    return abs(probs[m] - target_prob) < 1e-06\ndef g(target_prob=0.2):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-06:\n            return [m, n]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 129,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(counts: List[int], target_prob=0.5) -> bool:\n    \"\"\"Suppose a list of m 1's and n -1's are permuted at random.\n    What is the probability that the cumulative sum exceeds a certain threshold?\n    The goal is to find counts = [m, n] that make the probability of the cumulative sum exceeding the threshold close to target_prob.\"\"\"\n    (m, n) = counts\n    probs = [0.0] * (m + 1)\n    probs[0] = 1.0\n    for i in range(1, m + 1):\n        for j in range(1, min(n + 1, i) + 1):\n            probs[i] += probs[i - j] / (i + j)\n    return abs(probs[m] - target_prob) < 1e-06",
        "solution_func": "def g(target_prob=0.2):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-06:\n            return [m, n]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(counts: List[int], target_prob=0.5) -> bool:\n    \"\"\"Suppose a list of m 1's and n -1's are permuted at random.\n    What is the probability that the cumulative sum exceeds a certain threshold?\n    The goal is to find counts = [m, n] that make the probability of the cumulative sum exceeding the threshold close to target_prob.\"\"\"\n    (m, n) = counts\n    probs = [0.0] * (m + 1)\n    probs[0] = 1.0\n    for i in range(1, m + 1):\n        for j in range(1, min(n + 1, i) + 1):\n            probs[i] += probs[i - j] / (i + j)\n    return abs(probs[m] - target_prob) < 1e-06\ndef g(target_prob=0.8):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-06:\n            return [m, n]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 129,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(counts: List[int], target_prob=0.5) -> bool:\n    \"\"\"Suppose a list of m 1's and n -1's are permuted at random.\n    What is the probability that the cumulative sum exceeds a certain threshold?\n    The goal is to find counts = [m, n] that make the probability of the cumulative sum exceeding the threshold close to target_prob.\"\"\"\n    (m, n) = counts\n    probs = [0.0] * (m + 1)\n    probs[0] = 1.0\n    for i in range(1, m + 1):\n        for j in range(1, min(n + 1, i) + 1):\n            probs[i] += probs[i - j] / (i + j)\n    return abs(probs[m] - target_prob) < 1e-06",
        "solution_func": "def g(target_prob=0.8):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-06:\n            return [m, n]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list whose difference is divisible by the target value.\"\"\"\n    return any(((numbers[i] - numbers[j]) % target == 0) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target=10):\n    numbers = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return numbers\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 129,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list whose difference is divisible by the target value.\"\"\"\n    return any(((numbers[i] - numbers[j]) % target == 0) for i in range(len(numbers)) for j in range(i+1, len(numbers)))",
        "solution_func": "def g(target=10):\n    numbers = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return numbers",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(names: List[str], prefix=\"J\") -> bool:\n    \"\"\"Check if any name in the list starts with the given prefix.\"\"\"\n    return any(name.startswith(prefix) for name in names)\ndef g(names=[\"John\", \"Jane\", \"Jack\", \"Jill\"]):\n    return names\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 130,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(names: List[str], prefix=\"J\") -> bool:\n    \"\"\"Check if any name in the list starts with the given prefix.\"\"\"\n    return any(name.startswith(prefix) for name in names)",
        "solution_func": "def g(names=[\"John\", \"Jane\", \"Jack\", \"Jill\"]):\n    return names",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(words: List[str], prefix=\"s\") -> bool:\n    \"\"\"Check if any word in the list starts with the given prefix.\"\"\"\n    return any(word.startswith(prefix) for word in words)\ndef g(words=[\"sun\", \"moon\", \"star\", \"sky\"]):\n    return words\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 130,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(words: List[str], prefix=\"s\") -> bool:\n    \"\"\"Check if any word in the list starts with the given prefix.\"\"\"\n    return any(word.startswith(prefix) for word in words)",
        "solution_func": "def g(words=[\"sun\", \"moon\", \"star\", \"sky\"]):\n    return words",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(animals: List[str], prefix=\"c\") -> bool:\n    \"\"\"Check if any animal in the list starts with the given prefix.\"\"\"\n    return any(animal.startswith(prefix) for animal in animals)\ndef g(animals=[\"cat\", \"dog\", \"cow\", \"chicken\"]):\n    return animals\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 130,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(animals: List[str], prefix=\"c\") -> bool:\n    \"\"\"Check if any animal in the list starts with the given prefix.\"\"\"\n    return any(animal.startswith(prefix) for animal in animals)",
        "solution_func": "def g(animals=[\"cat\", \"dog\", \"cow\", \"chicken\"]):\n    return animals",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if any three numbers in the list can be added together to equal the target value.\"\"\"\n    return any(x + y + z == target for x in arr for y in arr for z in arr)\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g())\n\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 130,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if any three numbers in the list can be added together to equal the target value.\"\"\"\n    return any(x + y + z == target for x in arr for y in arr for z in arr)",
        "solution_func": "def g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[str], target='python') -> bool:\n    \"\"\"Check if the target string can be formed by concatenating any two strings in the list.\"\"\"\n    return any(x + y == target for x in arr for y in arr)\ndef g(target='python'):\n    return ['py', 'th', 'on', 'pyth', 'pyt', 'hon']\nassert f(g())\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 130,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[str], target='python') -> bool:\n    \"\"\"Check if the target string can be formed by concatenating any two strings in the list.\"\"\"\n    return any(x + y == target for x in arr for y in arr)",
        "solution_func": "def g(target='python'):\n    return ['py', 'th', 'on', 'pyth', 'pyt', 'hon']",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find two numbers in the list that can be multiplied together to equal the target value.\"\"\"\n    return any(x * y == target for x in nums for y in nums)\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 130,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find two numbers in the list that can be multiplied together to equal the target value.\"\"\"\n    return any(x * y == target for x in nums for y in nums)",
        "solution_func": "def g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are two consecutive numbers in the list that multiply to give a negative number.\"\"\"\n    for i in range(len(nums)-1):\n        if nums[i] * nums[i+1] < 0:\n            return True\n    return False\n\ndef g():\n    return [1, -2, 3, -4, 5, -6]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 130,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are two consecutive numbers in the list that multiply to give a negative number.\"\"\"\n    for i in range(len(nums)-1):\n        if nums[i] * nums[i+1] < 0:\n            return True\n    return False",
        "solution_func": "def g():\n    return [1, -2, 3, -4, 5, -6]",
        "map_ix": [
            1,
            1,
            0,
            0,
            1,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are two consecutive numbers in the list that have a difference of exactly 2.\"\"\"\n    for i in range(len(nums)-1):\n        if abs(nums[i] - nums[i+1]) == 2:\n            return True\n    return False\n\ndef g():\n    return [1, 3, 5, 7, 9, 11]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 130,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are two consecutive numbers in the list that have a difference of exactly 2.\"\"\"\n    for i in range(len(nums)-1):\n        if abs(nums[i] - nums[i+1]) == 2:\n            return True\n    return False",
        "solution_func": "def g():\n    return [1, 3, 5, 7, 9, 11]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are four consecutive numbers in the list that form a geometric sequence with a common ratio of 2.\"\"\"\n    for i in range(len(nums)-3):\n        if nums[i+1] / nums[i] == 2 and nums[i+2] / nums[i+1] == 2 and nums[i+3] / nums[i+2] == 2:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 4, 8, 16, 32, 64]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 130,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are four consecutive numbers in the list that form a geometric sequence with a common ratio of 2.\"\"\"\n    for i in range(len(nums)-3):\n        if nums[i+1] / nums[i] == 2 and nums[i+2] / nums[i+1] == 2 and nums[i+3] / nums[i+2] == 2:\n            return True\n    return False",
        "solution_func": "def g():\n    return [1, 2, 4, 8, 16, 32, 64]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='vuzogaguzechicowejeguthemeralic', b='kybyjifidoquifwejeguthemelihitextodeju', length=11) -> bool:\n    \"\"\"Find a string of length length that is in both strings a and b\"\"\"\n    return len(s) == length and s in a and (s in b)\ndef g(a='vuzogaguzechicowejeguthemeralic', b='kybyjifidoquifwejeguthemelihitextodeju', length=11):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 130,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, a='vuzogaguzechicowejeguthemeralic', b='kybyjifidoquifwejeguthemelihitextodeju', length=11) -> bool:\n    \"\"\"Find a string of length length that is in both strings a and b\"\"\"\n    return len(s) == length and s in a and (s in b)",
        "solution_func": "def g(a='vuzogaguzechicowejeguthemeralic', b='kybyjifidoquifwejeguthemelihitextodeju', length=11):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=50) -> bool:\n    \"\"\"Check if any two numbers in the list can be multiplied together to equal the target value.\"\"\"\n    return any(x * y == target for x in arr for y in arr)\ndef g(target=50):\n    return [5, 10, 15, 20, 25, 30]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 131,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=50) -> bool:\n    \"\"\"Check if any two numbers in the list can be multiplied together to equal the target value.\"\"\"\n    return any(x * y == target for x in arr for y in arr)",
        "solution_func": "def g(target=50):\n    return [5, 10, 15, 20, 25, 30]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if any two numbers in the list can be subtracted to equal the target value.\"\"\"\n    return any(x - y == target for x in arr for y in arr)\ndef g(target=0):\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 131,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if any two numbers in the list can be subtracted to equal the target value.\"\"\"\n    return any(x - y == target for x in arr for y in arr)",
        "solution_func": "def g(target=0):\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=25) -> bool:\n    \"\"\"Check if any two numbers in the list can be divided to equal the target value.\"\"\"\n    return any(x / y == target for x in arr for y in arr if y != 0)\ndef g(target=25):\n    return [1, 3, 5, 10, 20, 25, 30, 35, 40]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 131,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=25) -> bool:\n    \"\"\"Check if any two numbers in the list can be divided to equal the target value.\"\"\"\n    return any(x / y == target for x in arr for y in arr if y != 0)",
        "solution_func": "def g(target=25):\n    return [1, 3, 5, 10, 20, 25, 30, 35, 40]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, lst=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if the given number x is present in the list lst\"\"\"\n    return x in lst\ndef g(lst=[2, 4, 6, 8, 10]):\n    return lst[2]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 131,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, lst=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if the given number x is present in the list lst\"\"\"\n    return x in lst",
        "solution_func": "def g(lst=[2, 4, 6, 8, 10]):\n    return lst[2]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, lst=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Check if the given string x is present in the list lst\"\"\"\n    return x in lst\ndef g(lst=['apple', 'banana', 'cherry', 'date']):\n    return lst[1]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 131,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, lst=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Check if the given string x is present in the list lst\"\"\"\n    return x in lst",
        "solution_func": "def g(lst=['apple', 'banana', 'cherry', 'date']):\n    return lst[1]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, lst=[1, 3, 5, 7, 9]) -> bool:\n    \"\"\"Check if x is less than the minimum value in the list lst\"\"\"\n    return x < min(lst)\ndef g(lst=[1, 3, 5, 7, 9]):\n    return lst[0] - 1\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 131,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, lst=[1, 3, 5, 7, 9]) -> bool:\n    \"\"\"Check if x is less than the minimum value in the list lst\"\"\"\n    return x < min(lst)",
        "solution_func": "def g(lst=[1, 3, 5, 7, 9]):\n    return lst[0] - 1",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if the product of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] * nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_sum=10):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 131,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if the product of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] * nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target_sum=10):\n    return [n for n in range(1, target_sum+1)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if the difference of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] - nums[j] == target_sum or nums[j] - nums[i] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_sum=10):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 131,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if the difference of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] - nums[j] == target_sum or nums[j] - nums[i] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target_sum=10):\n    return [n for n in range(1, target_sum+1)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if the division of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] / nums[j] == target_sum or nums[j] / nums[i] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_sum=10):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 131,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if the division of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] / nums[j] == target_sum or nums[j] / nums[i] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target_sum=10):\n    return [n for n in range(1, target_sum+1)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[str], target: str) -> bool:\n    \"\"\"Check if the given target string can be formed by concatenating the elements from the list 'nums'.\"\"\"\n    return target in ''.join(nums)\n\ndef g(target: str):\n    return [str(ord(c)) for c in target]\n\nassert f(g('Hello World!'), target='72699101115101114115115116117111114108101119')\n",
        "emb": null,
        "idx_generation": 131,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[str], target: str) -> bool:\n    \"\"\"Check if the given target string can be formed by concatenating the elements from the list 'nums'.\"\"\"\n    return target in ''.join(nums)",
        "solution_func": "def g(target: str):\n    return [str(ord(c)) for c in target]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers from the list that adds up to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 132,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers from the list that adds up to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['cat', 'dog', 'hamster']) -> bool:\n    \"\"\"Find a string that contains each string in substrings in any order\"\"\"\n    return all((sub in s for sub in substrings))\ndef g(substrings=['cat', 'dog', 'hamster']):\n    return ''.join(substrings)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 132,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substrings=['cat', 'dog', 'hamster']) -> bool:\n    \"\"\"Find a string that contains each string in substrings in any order\"\"\"\n    return all((sub in s for sub in substrings))",
        "solution_func": "def g(substrings=['cat', 'dog', 'hamster']):\n    return ''.join(substrings)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 132,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[3, 6, 9, 12, 15], upper_bound=1000) -> bool:\n    \"\"\"Check if n is divisible by all numbers in the list and is less than or equal to the upper_bound\"\"\"\n    return all((n % i == 0 for i in lst)) and 0 < n <= upper_bound\ndef g(lst=[3, 6, 9, 12, 15], upper_bound=1000):\n    ans = 1\n    for i in lst:\n        (m, n) = (min(i, ans), max(i, ans))\n        while m > 0:\n            (m, n) = (n % m, m)\n        ans *= i // n\n    return ans\nassert f(g())\n\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 132,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[3, 6, 9, 12, 15], upper_bound=1000) -> bool:\n    \"\"\"Check if n is divisible by all numbers in the list and is less than or equal to the upper_bound\"\"\"\n    return all((n % i == 0 for i in lst)) and 0 < n <= upper_bound",
        "solution_func": "def g(lst=[3, 6, 9, 12, 15], upper_bound=1000):\n    ans = 1\n    for i in lst:\n        (m, n) = (min(i, ans), max(i, ans))\n        while m > 0:\n            (m, n) = (n % m, m)\n        ans *= i // n\n    return ans",
        "map_ix": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(n: int, matrix: List[List[int]] = [[10, 20], [30, 40], [50, 60]]) -> bool:\n    \"\"\"Check if n exists in the matrix\"\"\"\n    for row in matrix:\n        if n in row:\n            return True\n    return False\ndef g(matrix: List[List[int]] = [[10, 20], [30, 40], [50, 60]]):\n    return matrix[0][1]\nassert f(g())\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 132,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\ndef f(n: int, matrix: List[List[int]] = [[10, 20], [30, 40], [50, 60]]) -> bool:\n    \"\"\"Check if n exists in the matrix\"\"\"\n    for row in matrix:\n        if n in row:\n            return True\n    return False",
        "solution_func": "def g(matrix: List[List[int]] = [[10, 20], [30, 40], [50, 60]]):\n    return matrix[0][1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(n: int, nums: List[int]=[1, 3, 5, 7, 9, 11, 13], k=2) -> bool:\n    \"\"\"Given a list of integers and given an integer k, determine whether there exists two numbers in the list whose absolute difference is greater than k.\"\"\"\n    assert all((nums[i] <= nums[i + 1] for i in range(len(nums) - 1))), 'Hint: nums are non-decreasing'\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if abs(nums[i] - nums[j]) > k:\n                return True\n    return False\ndef g(nums=[1, 3, 5, 7, 9, 11, 13], k=2):\n    return nums\nassert f(g())\n\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 132,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\ndef f(n: int, nums: List[int]=[1, 3, 5, 7, 9, 11, 13], k=2) -> bool:\n    \"\"\"Given a list of integers and given an integer k, determine whether there exists two numbers in the list whose absolute difference is greater than k.\"\"\"\n    assert all((nums[i] <= nums[i + 1] for i in range(len(nums) - 1))), 'Hint: nums are non-decreasing'\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if abs(nums[i] - nums[j]) > k:\n                return True\n    return False",
        "solution_func": "def g(nums=[1, 3, 5, 7, 9, 11, 13], k=2):\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list whose sum is equal to the target value.\"\"\"\n    return any((numbers[i] + numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\n\ndef g(target=20):\n    numbers = [2, 4, 6, 8, 10, 12, 14, 16, 18]\n    return numbers\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 132,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list whose sum is equal to the target value.\"\"\"\n    return any((numbers[i] + numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))",
        "solution_func": "def g(target=20):\n    numbers = [2, 4, 6, 8, 10, 12, 14, 16, 18]\n    return numbers",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if the product of any two numbers in the list is greater than the target value.\"\"\"\n    return any((numbers[i] * numbers[j] > target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\n\ndef g(target=100):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return numbers\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 132,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if the product of any two numbers in the list is greater than the target value.\"\"\"\n    return any((numbers[i] * numbers[j] > target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))",
        "solution_func": "def g(target=100):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=25) -> bool:\n    \"\"\"Check if the difference between any two numbers in the list is equal to the target value.\"\"\"\n    return any((abs(numbers[i] - numbers[j]) == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\n\ndef g(target=25):\n    numbers = [10, 15, 20, 25, 30, 35, 40, 45, 50]\n    return numbers\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 132,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=25) -> bool:\n    \"\"\"Check if the difference between any two numbers in the list is equal to the target value.\"\"\"\n    return any((abs(numbers[i] - numbers[j]) == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))",
        "solution_func": "def g(target=25):\n    numbers = [10, 15, 20, 25, 30, 35, 40, 45, 50]\n    return numbers",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=7, m=3) -> bool:\n    \"\"\"Check if the length of s is equal to the product of n and m\"\"\"\n    return len(s) == n * m\n\ndef g(n=7, m=3):\n    return \"a\" * (n * m)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 132,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=7, m=3) -> bool:\n    \"\"\"Check if the length of s is equal to the product of n and m\"\"\"\n    return len(s) == n * m",
        "solution_func": "def g(n=7, m=3):\n    return \"a\" * (n * m)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Find a subset of numbers whose sum equals the target_sum\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\ndef g(target_sum=100):\n    numbers = [10, 20, 30, 40, 50]\n    return numbers\nassert f(g())\n",
        "emb": null,
        "idx_generation": 133,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Find a subset of numbers whose sum equals the target_sum\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=100):\n    numbers = [10, 20, 30, 40, 50]\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if all rows in the matrix have the same sum\"\"\"\n    row_sum = sum(matrix[0])\n    for row in matrix:\n        if sum(row) != row_sum:\n            return False\n    return True\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 133,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if all rows in the matrix have the same sum\"\"\"\n    row_sum = sum(matrix[0])\n    for row in matrix:\n        if sum(row) != row_sum:\n            return False\n    return True",
        "solution_func": "def g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring=\"abc\") -> bool:\n    \"\"\"Check if the substring exists in the given string\"\"\"\n    return substring in string\ndef g(substring=\"abc\"):\n    string = \"xyzabcxyz\"\n    return string\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 133,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring=\"abc\") -> bool:\n    \"\"\"Check if the substring exists in the given string\"\"\"\n    return substring in string",
        "solution_func": "def g(substring=\"abc\"):\n    string = \"xyzabcxyz\"\n    return string",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], k=5) -> bool:\n    \"\"\"Check if there exists a word in the list whose length is divisible by k.\"\"\"\n    for word in words:\n        if len(word) % k == 0:\n            return True\n    return False\n\ndef g(k=5):\n    return ['apple', 'banana', 'cherry', 'date', 'elderberry']\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 133,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], k=5) -> bool:\n    \"\"\"Check if there exists a word in the list whose length is divisible by k.\"\"\"\n    for word in words:\n        if len(word) % k == 0:\n            return True\n    return False",
        "solution_func": "def g(k=5):\n    return ['apple', 'banana', 'cherry', 'date', 'elderberry']",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if there exists a number in the matrix that is equal to the target.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 133,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if there exists a number in the matrix that is equal to the target.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is divisible by k.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if (nums[i] + nums[j]) % k == 0:\n                return True\n    return False\n\ndef g(k=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 133,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is divisible by k.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if (nums[i] + nums[j]) % k == 0:\n                return True\n    return False",
        "solution_func": "def g(k=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, max_val=100) -> bool:\n    \"\"\"Find n such that the sum of all numbers from 1 to n is equal to the maximum value.\"\"\"\n    return sum(range(1, n+1)) == max_val\ndef g(max_val=100):\n    n = 1\n    while sum(range(1, n+1)) != max_val:\n        n += 1\n    return n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 133,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, max_val=100) -> bool:\n    \"\"\"Find n such that the sum of all numbers from 1 to n is equal to the maximum value.\"\"\"\n    return sum(range(1, n+1)) == max_val",
        "solution_func": "def g(max_val=100):\n    n = 1\n    while sum(range(1, n+1)) != max_val:\n        n += 1\n    return n",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if the target list contains n as an element.\"\"\"\n    return n in target\ndef g(target=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return target[0]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 133,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, target=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if the target list contains n as an element.\"\"\"\n    return n in target",
        "solution_func": "def g(target=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return target[0]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(n: int, num_list=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the square root of n is in the num_list.\"\"\"\n    return math.sqrt(n) in num_list\ndef g(num_list=[1, 2, 3, 4, 5]):\n    return num_list[0]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 133,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\ndef f(n: int, num_list=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the square root of n is in the num_list.\"\"\"\n    return math.sqrt(n) in num_list",
        "solution_func": "def g(num_list=[1, 2, 3, 4, 5]):\n    return num_list[0]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists two numbers in the list that sum up to the target number.\"\"\"\n    for i in range(len(nums)-1):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target: int):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target\n\nassert f(*g(13))\n\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 133,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists two numbers in the list that sum up to the target number.\"\"\"\n    for i in range(len(nums)-1):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target: int):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that sums up to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=0):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 134,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that sums up to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=0):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='a', count=5, length=50) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring='a', count=5, length=50):\n    c = chr(1 + max((ord(c) for c in substring or 'a')))\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 134,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring='a', count=5, length=50) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length",
        "solution_func": "def g(substring='a', count=5, length=50):\n    c = chr(1 + max((ord(c) for c in substring or 'a')))\n    return substring * count + (length - len(substring) * count) * '^'",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 134,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]",
        "solution_func": "def g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])",
        "map_ix": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\ndef f(num: float, result=14.137166941154069) -> bool:\n    \"\"\"Determine if the square root of the given number is equal to the target result.\"\"\"\n    return abs(math.sqrt(num) - result) < 1e-06\ndef g(result=14.137166941154069):\n    num = 200\n    return num\nassert f(g())\n",
        "emb": null,
        "idx_generation": 134,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\ndef f(num: float, result=14.137166941154069) -> bool:\n    \"\"\"Determine if the square root of the given number is equal to the target result.\"\"\"\n    return abs(math.sqrt(num) - result) < 1e-06",
        "solution_func": "def g(result=14.137166941154069):\n    num = 200\n    return num",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(x: int, result=4.605170185988092) -> bool:\n    \"\"\"Determine if the natural logarithm of x is equal to the target result.\"\"\"\n    return abs(math.log(x) - result) < 1e-06\ndef g(result=4.605170185988092):\n    x = 100\n    return x\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 134,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\ndef f(x: int, result=4.605170185988092) -> bool:\n    \"\"\"Determine if the natural logarithm of x is equal to the target result.\"\"\"\n    return abs(math.log(x) - result) < 1e-06",
        "solution_func": "def g(result=4.605170185988092):\n    x = 100\n    return x",
        "map_ix": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(n: int, result=120) -> bool:\n    \"\"\"Determine if the factorial of n is equal to the target result.\"\"\"\n    return math.factorial(n) == result\ndef g(result=120):\n    n = 5\n    return n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 134,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\ndef f(n: int, result=120) -> bool:\n    \"\"\"Determine if the factorial of n is equal to the target result.\"\"\"\n    return math.factorial(n) == result",
        "solution_func": "def g(result=120):\n    n = 5\n    return n",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that adds up to the target value.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 134,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that adds up to the target value.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if the given string contains k consecutive vowels.\"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n            if count == k:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(k=3):\n    return \"Hello, how are you?\"\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 134,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if the given string contains k consecutive vowels.\"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n            if count == k:\n                return True\n        else:\n            count = 0\n    return False",
        "solution_func": "def g(k=3):\n    return \"Hello, how are you?\"",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subset of numbers in the given list that adds up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(target + 1):\n            if j >= nums[i - 1]:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    return dp[n][target]\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 134,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subset of numbers in the given list that adds up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(target + 1):\n            if j >= nums[i - 1]:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    return dp[n][target]",
        "solution_func": "def g(target=100):\n    return [10, 20, 30, 40, 50]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target.\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 134,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target.\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, numbers=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if the sum of the first n numbers in the list is equal to n squared\"\"\"\n    return sum(numbers[:n]) == n**2\ndef g(numbers=[2, 4, 6, 8, 10]):\n    return sum(numbers)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 135,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, numbers=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if the sum of the first n numbers in the list is equal to n squared\"\"\"\n    return sum(numbers[:n]) == n**2",
        "solution_func": "def g(numbers=[2, 4, 6, 8, 10]):\n    return sum(numbers)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='python', count=2) -> bool:\n    \"\"\"Check if the given string contains the specified substring the given number of times\"\"\"\n    return s.count(substring) == count\ndef g(substring='python', count=2):\n    return substring * count\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 135,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring='python', count=2) -> bool:\n    \"\"\"Check if the given string contains the specified substring the given number of times\"\"\"\n    return s.count(substring) == count",
        "solution_func": "def g(substring='python', count=2):\n    return substring * count",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target sum\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 135,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target sum\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=20, c=30) -> bool:\n    \"\"\"Check if the sum of three numbers is equal to a given number.\"\"\"\n    return n == a + b + c\ndef g(a=10, b=20, c=30):\n    return a + b + c\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 135,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=10, b=20, c=30) -> bool:\n    \"\"\"Check if the sum of three numbers is equal to a given number.\"\"\"\n    return n == a + b + c",
        "solution_func": "def g(a=10, b=20, c=30):\n    return a + b + c",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=25, b=5) -> bool:\n    \"\"\"Check if n is divisible by both a and b.\"\"\"\n    return n % a == 0 and n % b == 0\ndef g(a=25, b=5):\n    return a * b\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 135,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=25, b=5) -> bool:\n    \"\"\"Check if n is divisible by both a and b.\"\"\"\n    return n % a == 0 and n % b == 0",
        "solution_func": "def g(a=25, b=5):\n    return a * b",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=100, b=10) -> bool:\n    \"\"\"Check if the difference between a and b is equal to n.\"\"\"\n    return abs(a - b) == n\ndef g(a=100, b=10):\n    return a - b\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 135,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=100, b=10) -> bool:\n    \"\"\"Check if the difference between a and b is equal to n.\"\"\"\n    return abs(a - b) == n",
        "solution_func": "def g(a=100, b=10):\n    return a - b",
        "map_ix": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 135,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]",
        "solution_func": "def g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nimport random\nfrom typing import*\ndef f(n: int, m=3) -> bool:\n    \"\"\"Check if there exists a list of unique numbers between 1 and n (inclusive) with a sum of m.\"\"\"\n    return any(sum(comb) == m for comb in itertools.combinations(range(1, n+1), 3))\ndef g(m=3):\n    return m\nassert f(g())\n",
        "emb": null,
        "idx_generation": 135,
        "target_skills": null,
        "problem_func": "import itertools\nimport random\nfrom typing import*\ndef f(n: int, m=3) -> bool:\n    \"\"\"Check if there exists a list of unique numbers between 1 and n (inclusive) with a sum of m.\"\"\"\n    return any(sum(comb) == m for comb in itertools.combinations(range(1, n+1), 3))",
        "solution_func": "def g(m=3):\n    return m",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there exists a row in the matrix whose sum equals the target.\"\"\"\n    return any(sum(row) == target for row in matrix)\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 135,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there exists a row in the matrix whose sum equals the target.\"\"\"\n    return any(sum(row) == target for row in matrix)",
        "solution_func": "def g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Given a list of integers and a target number, find any two numbers in the list that multiply to give the target.\nSample Input:\n[4, 5, 7, 11, 9]\nSample Output:\n(4, 25)\"\"\"\n    return any((nums[i] * nums[j] == target) for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(target=100):\n    return [4, 25]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 135,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Given a list of integers and a target number, find any two numbers in the list that multiply to give the target.\nSample Input:\n[4, 5, 7, 11, 9]\nSample Output:\n(4, 25)\"\"\"\n    return any((nums[i] * nums[j] == target) for i in range(len(nums)) for j in range(i + 1, len(nums)))",
        "solution_func": "def g(target=100):\n    return [4, 25]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='abcdefghi', target='') -> bool:\n    \"\"\"Find the two slice indices that give the specific target in string s\"\"\"\n    (i, j) = inds\n    return s[i:j] == target\ndef g(s='abcdefghi', target=''):\n    from itertools import product\n    for (i, j) in product(range(-len(s) - 1, len(s) + 1), repeat=2):\n        try:\n            if s[i:j] == target:\n                return [i, j]\n        except (IndexError, ValueError):\n            pass\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 136,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='abcdefghi', target='') -> bool:\n    \"\"\"Find the two slice indices that give the specific target in string s\"\"\"\n    (i, j) = inds\n    return s[i:j] == target",
        "solution_func": "def g(s='abcdefghi', target=''):\n    from itertools import product\n    for (i, j) in product(range(-len(s) - 1, len(s) + 1), repeat=2):\n        try:\n            if s[i:j] == target:\n                return [i, j]\n        except (IndexError, ValueError):\n            pass",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find a number in the list that is divisible by n\"\"\"\n    return any(num % n == 0 for num in nums)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[0]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            0.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 136,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find a number in the list that is divisible by n\"\"\"\n    return any(num % n == 0 for num in nums)",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[0]",
        "map_ix": [
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, words=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Find a word in the list that contains the letter 'n'\"\"\"\n    return any('n' in word for word in words)\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return words[0]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 136,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, words=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Find a word in the list that contains the letter 'n'\"\"\"\n    return any('n' in word for word in words)",
        "solution_func": "def g(words=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return words[0]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target_sum.\"\"\"\n    return any((x + y) == target_sum for x in numbers for y in numbers)\ndef g(target_sum=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 136,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target_sum.\"\"\"\n    return any((x + y) == target_sum for x in numbers for y in numbers)",
        "solution_func": "def g(target_sum=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\ndef f(x: int, a=25) -> bool:\n    \"\"\"Check if the square root of x is equal to the square root of a.\"\"\"\n    return math.sqrt(x) == math.sqrt(a)\ndef g(a=25):\n    return int(math.sqrt(a))\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 136,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\ndef f(x: int, a=25) -> bool:\n    \"\"\"Check if the square root of x is equal to the square root of a.\"\"\"\n    return math.sqrt(x) == math.sqrt(a)",
        "solution_func": "def g(a=25):\n    return int(math.sqrt(a))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(deck: List[str], hand_size=5) -> bool:\n    \"\"\"Check if a given deck of cards can be divided into hands of size hand_size without any remaining cards.\"\"\"\n    random.shuffle(deck)\n    return len(deck) % hand_size == 0\ndef g(hand_size=5):\n    return [\"Ace\", \"King\", \"Queen\", \"Jack\", \"Ten\", \"Nine\", \"Eight\", \"Seven\", \"Six\"]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 136,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(deck: List[str], hand_size=5) -> bool:\n    \"\"\"Check if a given deck of cards can be divided into hands of size hand_size without any remaining cards.\"\"\"\n    random.shuffle(deck)\n    return len(deck) % hand_size == 0",
        "solution_func": "def g(hand_size=5):\n    return [\"Ace\", \"King\", \"Queen\", \"Jack\", \"Ten\", \"Nine\", \"Eight\", \"Seven\", \"Six\"]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(string: str, substring='a', count=3, length=30) -> bool:\n    \"\"\"Check if a string contains a certain number of copies of a given substring and has a length that is the product of the count and the length of the substring\"\"\"\n    return string.count(substring) == count and len(string) == count * len(substring)\ndef g(substring='a', count=3, length=30):\n    c = chr(1 + max((ord(c) for c in substring or 'a')))\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g())\n",
        "emb": null,
        "idx_generation": 136,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring='a', count=3, length=30) -> bool:\n    \"\"\"Check if a string contains a certain number of copies of a given substring and has a length that is the product of the count and the length of the substring\"\"\"\n    return string.count(substring) == count and len(string) == count * len(substring)",
        "solution_func": "def g(substring='a', count=3, length=30):\n    c = chr(1 + max((ord(c) for c in substring or 'a')))\n    return substring * count + (length - len(substring) * count) * '^'",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=50) -> bool:\n    \"\"\"Check if there are three numbers in the list whose product is equal to the target value\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] * numbers[j] * numbers[k] == target:\n                    return True\n    return False\ndef g(target=50):\n    return [2, 5, 10, 4, 3, 1, 6, 7, 8]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 136,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=50) -> bool:\n    \"\"\"Check if there are three numbers in the list whose product is equal to the target value\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] * numbers[j] * numbers[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=50):\n    return [2, 5, 10, 4, 3, 1, 6, 7, 8]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=200) -> bool:\n    \"\"\"Check if there are four numbers in the list whose sum is equal to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                for l in range(k+1, len(arr)):\n                    if arr[i] + arr[j] + arr[k] + arr[l] == target:\n                        return True\n    return False\ndef g(target=200):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 136,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=200) -> bool:\n    \"\"\"Check if there are four numbers in the list whose sum is equal to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                for l in range(k+1, len(arr)):\n                    if arr[i] + arr[j] + arr[k] + arr[l] == target:\n                        return True\n    return False",
        "solution_func": "def g(target=200):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]",
        "map_ix": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [target//2, target//2]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 136,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [target//2, target//2]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=7) -> bool:\n    \"\"\"Check if the difference between n and the product of a and b is divisible by n\"\"\"\n    return (n - (a * b)) % n == 0\n\ndef g(a=2, b=7):\n    return a * b\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 137,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=2, b=7) -> bool:\n    \"\"\"Check if the difference between n and the product of a and b is divisible by n\"\"\"\n    return (n - (a * b)) % n == 0",
        "solution_func": "def g(a=2, b=7):\n    return a * b",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=9) -> bool:\n    \"\"\"Check if the quotient of n and the product of a and b is divisible by n\"\"\"\n    return n / (a * b) % n == 0\n\ndef g(a=3, b=9):\n    return a * b\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 137,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=3, b=9) -> bool:\n    \"\"\"Check if the quotient of n and the product of a and b is divisible by n\"\"\"\n    return n / (a * b) % n == 0",
        "solution_func": "def g(a=3, b=9):\n    return a * b",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=8) -> bool:\n    \"\"\"Check if the square of n minus the product of a and b is divisible by n\"\"\"\n    return (n ** 2 - (a * b)) % n == 0\n\ndef g(a=2, b=8):\n    return a * b\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 137,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=2, b=8) -> bool:\n    \"\"\"Check if the square of n minus the product of a and b is divisible by n\"\"\"\n    return (n ** 2 - (a * b)) % n == 0",
        "solution_func": "def g(a=2, b=8):\n    return a * b",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=5, b=20, c=10) -> bool:\n    \"\"\"Find x such that x * a == (the sum of the first b multiples of c)\"\"\"\n    return x * a == sum([c * i for i in range(b)])\ndef g(a=5, b=20, c=10):\n    return sum([c * i for i in range(b)]) // a\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 137,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=5, b=20, c=10) -> bool:\n    \"\"\"Find x such that x * a == (the sum of the first b multiples of c)\"\"\"\n    return x * a == sum([c * i for i in range(b)])",
        "solution_func": "def g(a=5, b=20, c=10):\n    return sum([c * i for i in range(b)]) // a",
        "map_ix": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=7, c=6) -> bool:\n    \"\"\"Find n such that n + a == (the product of the first c integers) * b\"\"\"\n    return n + a == (b ** c) - 1\ndef g(a=3, b=7, c=6):\n    return (b ** c) - a - 1\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 137,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=3, b=7, c=6) -> bool:\n    \"\"\"Find n such that n + a == (the product of the first c integers) * b\"\"\"\n    return n + a == (b ** c) - 1",
        "solution_func": "def g(a=3, b=7, c=6):\n    return (b ** c) - a - 1",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=100, b=3, c=4) -> bool:\n    \"\"\"Find n such that (the sum of the first b multiples of c) - a == n\"\"\"\n    return sum([c * i for i in range(b)]) - a == n\ndef g(a=100, b=3, c=4):\n    return sum([c * i for i in range(b)]) - a\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 137,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=100, b=3, c=4) -> bool:\n    \"\"\"Find n such that (the sum of the first b multiples of c) - a == n\"\"\"\n    return sum([c * i for i in range(b)]) - a == n",
        "solution_func": "def g(a=100, b=3, c=4):\n    return sum([c * i for i in range(b)]) - a",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the given list that adds up to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 137,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the given list that adds up to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if all the numbers in the given list are positive integers.\"\"\"\n    for num in nums:\n        if num <= 0:\n            return False\n    return True\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 137,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if all the numbers in the given list are positive integers.\"\"\"\n    for num in nums:\n        if num <= 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if all the numbers in the given list are pairwise coprime (no common factors).\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if gcd(nums[i], nums[j]) != 1:\n                return False\n    return True\n\ndef g():\n    return [3, 8, 11, 15, 22]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 137,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import gcd\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if all the numbers in the given list are pairwise coprime (no common factors).\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if gcd(nums[i], nums[j]) != 1:\n                return False\n    return True",
        "solution_func": "def g():\n    return [3, 8, 11, 15, 22]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists two numbers in the list that add up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 137,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists two numbers in the list that add up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=30) -> bool:\n    \"\"\"Check if the given matrix contains a row or column that sums up to the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum == target:\n            return True\n    return False\ndef g(target=30):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 138,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=30) -> bool:\n    \"\"\"Check if the given matrix contains a row or column that sums up to the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum == target:\n            return True\n    return False",
        "solution_func": "def g(target=30):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Check if the given matrix contains a row or column that sums up to the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum == target:\n            return True\n    return False\ndef g(target=15):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 138,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Check if the given matrix contains a row or column that sums up to the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum == target:\n            return True\n    return False",
        "solution_func": "def g(target=15):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=25) -> bool:\n    \"\"\"Check if the given matrix contains a row or column that sums up to the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum == target:\n            return True\n    return False\ndef g(target=25):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 138,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=25) -> bool:\n    \"\"\"Check if the given matrix contains a row or column that sums up to the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum == target:\n            return True\n    return False",
        "solution_func": "def g(target=25):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target.\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\n\ndef g(target=15):\n    return [n for n in range(1, target+1)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 138,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target.\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))",
        "solution_func": "def g(target=15):\n    return [n for n in range(1, target+1)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if the given string contains the substring in reverse order.\"\"\"\n    return substring[::-1] in s\n\ndef g(substring='abc'):\n    return 'cba'\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 138,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if the given string contains the substring in reverse order.\"\"\"\n    return substring[::-1] in s",
        "solution_func": "def g(substring='abc'):\n    return 'cba'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Check if there are two numbers in the list whose product is equal to the target.\"\"\"\n    return any(arr[i] * arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr)))\n\ndef g(target=20):\n    return [n for n in range(1, target+1)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 138,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Check if there are two numbers in the list whose product is equal to the target.\"\"\"\n    return any(arr[i] * arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr)))",
        "solution_func": "def g(target=20):\n    return [n for n in range(1, target+1)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str], letter='a', count=3) -> bool:\n    \"\"\"Check if a list of words contains a certain number of words starting with a given letter\"\"\"\n    return len([word for word in words if word.startswith(letter)]) == count\ndef g(letter='a', count=3):\n    words = ['apple', 'banana', 'avocado', 'orange', 'kiwi']\n    return [word for word in words if word.startswith(letter)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 138,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], letter='a', count=3) -> bool:\n    \"\"\"Check if a list of words contains a certain number of words starting with a given letter\"\"\"\n    return len([word for word in words if word.startswith(letter)]) == count",
        "solution_func": "def g(letter='a', count=3):\n    words = ['apple', 'banana', 'avocado', 'orange', 'kiwi']\n    return [word for word in words if word.startswith(letter)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if any pair of numbers in a list adds up to a given target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\ndef g(target=10):\n    numbers = [2, 5, 8, 3, 6, 1]\n    return numbers\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 138,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if any pair of numbers in a list adds up to a given target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    numbers = [2, 5, 8, 3, 6, 1]\n    return numbers",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], row=2) -> bool:\n    \"\"\"Check if a given row of a matrix contains only even numbers\"\"\"\n    return all(num % 2 == 0 for num in matrix[row])\ndef g(row=2):\n    matrix = [[1, 2, 3], [4, 5, 6], [8, 10, 12]]\n    return matrix\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 138,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], row=2) -> bool:\n    \"\"\"Check if a given row of a matrix contains only even numbers\"\"\"\n    return all(num % 2 == 0 for num in matrix[row])",
        "solution_func": "def g(row=2):\n    matrix = [[1, 2, 3], [4, 5, 6], [8, 10, 12]]\n    return matrix",
        "map_ix": [
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=20, b=2, c=5) -> bool:\n    \"\"\"Find n such that (the difference between the sum of the first b multiples of c and a) is equal to n\"\"\"\n    return (sum([c * i for i in range(b)]) - a) == n\n\ndef g(a=20, b=2, c=5):\n    return sum([c * i for i in range(b)]) - a\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 138,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=20, b=2, c=5) -> bool:\n    \"\"\"Find n such that (the difference between the sum of the first b multiples of c and a) is equal to n\"\"\"\n    return (sum([c * i for i in range(b)]) - a) == n",
        "solution_func": "def g(a=20, b=2, c=5):\n    return sum([c * i for i in range(b)]) - a",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=5, c=4) -> bool:\n    \"\"\"Find n such that n + a == (the product of the first c integers) * b\"\"\"\n    return n + a == (b ** c) - 1\ndef g(a=2, b=5, c=4):\n    return (b ** c) - a - 1\nassert f(g())\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 139,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=2, b=5, c=4) -> bool:\n    \"\"\"Find n such that n + a == (the product of the first c integers) * b\"\"\"\n    return n + a == (b ** c) - 1",
        "solution_func": "def g(a=2, b=5, c=4):\n    return (b ** c) - a - 1",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=4, b=2, c=5) -> bool:\n    \"\"\"Find n such that n + a == (the product of the first c integers) * b\"\"\"\n    return n + a == (b ** c) - 1\ndef g(a=4, b=2, c=5):\n    return (b ** c) - a - 1\nassert f(g())\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 139,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=4, b=2, c=5) -> bool:\n    \"\"\"Find n such that n + a == (the product of the first c integers) * b\"\"\"\n    return n + a == (b ** c) - 1",
        "solution_func": "def g(a=4, b=2, c=5):\n    return (b ** c) - a - 1",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=6, b=3, c=8) -> bool:\n    \"\"\"Find n such that n + a == (the product of the first c integers) * b\"\"\"\n    return n + a == (b ** c) - 1\ndef g(a=6, b=3, c=8):\n    return (b ** c) - a - 1\nassert f(g())\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 139,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=6, b=3, c=8) -> bool:\n    \"\"\"Find n such that n + a == (the product of the first c integers) * b\"\"\"\n    return n + a == (b ** c) - 1",
        "solution_func": "def g(a=6, b=3, c=8):\n    return (b ** c) - a - 1",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there is a subset of nums whose sum is exactly equal to the target value.\"\"\"\n    def subsetSum(nums, target, n):\n        if target == 0:\n            return True\n        if n == 0:\n            return False\n        if nums[n-1] > target:\n            return subsetSum(nums, target, n-1)\n        return subsetSum(nums, target, n-1) or subsetSum(nums, target-nums[n-1], n-1)\n    \n    return subsetSum(nums, target, len(nums))\n\ndef g():\n    nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]\n    return nums\n\nassert f(g())\n\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 139,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there is a subset of nums whose sum is exactly equal to the target value.\"\"\"\n    def subsetSum(nums, target, n):\n        if target == 0:\n            return True\n        if n == 0:\n            return False\n        if nums[n-1] > target:\n            return subsetSum(nums, target, n-1)\n        return subsetSum(nums, target, n-1) or subsetSum(nums, target-nums[n-1], n-1)\n    \n    return subsetSum(nums, target, len(nums))",
        "solution_func": "def g():\n    nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]\n    return nums",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find the minimum number of elements required from nums to add up to the target value.\"\"\"\n    def minSubset(nums, target, n):\n        if target == 0:\n            return 0\n        if n == 0:\n            return float('inf')\n        if nums[n-1] > target:\n            return minSubset(nums, target, n-1)\n        return min(minSubset(nums, target, n-1), 1+minSubset(nums, target-nums[n-1], n-1))\n    \n    result = minSubset(nums, target, len(nums))\n    return result if result != float('inf') else -1\n\ndef g():\n    nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n    return nums\n\nassert f(g())\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 139,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find the minimum number of elements required from nums to add up to the target value.\"\"\"\n    def minSubset(nums, target, n):\n        if target == 0:\n            return 0\n        if n == 0:\n            return float('inf')\n        if nums[n-1] > target:\n            return minSubset(nums, target, n-1)\n        return min(minSubset(nums, target, n-1), 1+minSubset(nums, target-nums[n-1], n-1))\n    \n    result = minSubset(nums, target, len(nums))\n    return result if result != float('inf') else -1",
        "solution_func": "def g():\n    nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there is a subset of nums that adds up to the target value without using recursion.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n    for i in range(1, n + 1):\n        dp[i][0] = True\n    for i in range(1, target + 1):\n        dp[0][i] = False\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]\n\ndef g():\n    nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n    return nums\n\nassert f(g())\n\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 139,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there is a subset of nums that adds up to the target value without using recursion.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n    for i in range(1, n + 1):\n        dp[i][0] = True\n    for i in range(1, target + 1):\n        dp[0][i] = False\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]",
        "solution_func": "def g():\n    nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n    return nums",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 139,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=0):\n    nums = [-1, 0, 1, 2, -1, -4]\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 139,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=0):\n    nums = [-1, 0, 1, 2, -1, -4]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there is a subarray in the list that sums up to the target\"\"\"\n    for i in range(len(nums)):\n        current_sum = nums[i]\n        if current_sum == target:\n            return True\n        for j in range(i+1, len(nums)):\n            current_sum += nums[j]\n            if current_sum == target:\n                return True\n            elif current_sum > target:\n                break\n    return False\ndef g(target=5):\n    nums = [1, 2, 3, 4, 5]\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 139,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there is a subarray in the list that sums up to the target\"\"\"\n    for i in range(len(nums)):\n        current_sum = nums[i]\n        if current_sum == target:\n            return True\n        for j in range(i+1, len(nums)):\n            current_sum += nums[j]\n            if current_sum == target:\n                return True\n            elif current_sum > target:\n                break\n    return False",
        "solution_func": "def g(target=5):\n    nums = [1, 2, 3, 4, 5]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], n=3, target=15) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return any(sum_val == target for sum_val in rows + cols + [diag1, diag2])\ndef g(n=3, target=15):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix\n    assert False, f\"No magic square found for n={n}\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 139,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], n=3, target=15) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return any(sum_val == target for sum_val in rows + cols + [diag1, diag2])",
        "solution_func": "def g(n=3, target=15):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=5):\n    return [i**3 for i in range(1, k+1)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 140,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False",
        "solution_func": "def g(k=5):\n    return [i**3 for i in range(1, k+1)]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=5):\n    return [i**2 for i in range(1, k+1)] + [j**3 for j in range(1, k+1)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 140,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False",
        "solution_func": "def g(k=5):\n    return [i**2 for i in range(1, k+1)] + [j**3 for j in range(1, k+1)]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=5):\n    return [i**2 + i**3 for i in range(1, k+1)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 140,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False",
        "solution_func": "def g(k=5):\n    return [i**2 + i**3 for i in range(1, k+1)]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers from the list whose sum is equal to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 140,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers from the list whose sum is equal to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=\"python\") -> bool:\n    \"\"\"Check if the target string is a substring of the given string\"\"\"\n    return target in s\ndef g(target=\"python\"):\n    return \"I love python programming\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 140,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target=\"python\") -> bool:\n    \"\"\"Check if the target string is a substring of the given string\"\"\"\n    return target in s",
        "solution_func": "def g(target=\"python\"):\n    return \"I love python programming\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome\"\"\"\n    return arr == arr[::-1]\ndef g():\n    return [1, 2, 3, 2, 1]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 140,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome\"\"\"\n    return arr == arr[::-1]",
        "solution_func": "def g():\n    return [1, 2, 3, 2, 1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=1000) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target number\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g(target=1000):\n    return [i for i in range(target//3)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 140,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=1000) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target number\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))",
        "solution_func": "def g(target=1000):\n    return [i for i in range(target//3)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists k consecutive even numbers in the list\"\"\"\n    return any(all(arr[i+j] % 2 == 0 for j in range(k)) for i in range(len(arr)-k+1))\ndef g(k=3):\n    return [2*i for i in range(k)]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 140,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists k consecutive even numbers in the list\"\"\"\n    return any(all(arr[i+j] % 2 == 0 for j in range(k)) for i in range(len(arr)-k+1))",
        "solution_func": "def g(k=3):\n    return [2*i for i in range(k)]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exists two distinct numbers in the list whose sum is equal to the target number\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=5):\n    return [i for i in range(target)]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 140,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exists two distinct numbers in the list whose sum is equal to the target number\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=5):\n    return [i for i in range(target)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum: int) -> bool:\n    \"\"\"Find if there exists a combination of numbers from the list that adds up to the target sum\"\"\"\n    def subset_sum(nums: List[int], n: int, target_sum: int) -> bool:\n        if target_sum == 0:\n            return True\n        if n == 0 and target_sum != 0:\n            return False\n        if nums[n-1] > target_sum:\n            return subset_sum(nums, n-1, target_sum)\n        return subset_sum(nums, n-1, target_sum) or subset_sum(nums, n-1, target_sum-nums[n-1])\n    \n    return subset_sum(nums, len(nums), target_sum)\n\ndef g(nums: List[int], target_sum: int) -> List[int]:\n    return [x for x in nums if x < target_sum]\n\nassert f(g([11, 23, 35, 47, 59, 71, 83, 95, 107, 119], 100))\n",
        "emb": null,
        "idx_generation": 140,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum: int) -> bool:\n    \"\"\"Find if there exists a combination of numbers from the list that adds up to the target sum\"\"\"\n    def subset_sum(nums: List[int], n: int, target_sum: int) -> bool:\n        if target_sum == 0:\n            return True\n        if n == 0 and target_sum != 0:\n            return False\n        if nums[n-1] > target_sum:\n            return subset_sum(nums, n-1, target_sum)\n        return subset_sum(nums, n-1, target_sum) or subset_sum(nums, n-1, target_sum-nums[n-1])\n    \n    return subset_sum(nums, len(nums), target_sum)",
        "solution_func": "def g(nums: List[int], target_sum: int) -> List[int]:\n    return [x for x in nums if x < target_sum]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int], target_sum=100) -> bool:\n    \"\"\"Find a combination of numbers in num_list that adds up to the target_sum.\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target_sum:\n                return True\n    return False\n\ndef g(num_list=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target_sum=100):\n    return num_list\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 141,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num_list: List[int], target_sum=100) -> bool:\n    \"\"\"Find a combination of numbers in num_list that adds up to the target_sum.\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(num_list=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target_sum=100):\n    return num_list",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the matrix whose sum is equal to the target value.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            for k in range(i, len(matrix)):\n                for l in range(len(matrix[k])):\n                    if matrix[i][j] + matrix[k][l] == target:\n                        return True\n    return False\n\ndef g(matrix=[[10, 20, 30], [40, 50, 60], [70, 80, 90]], target=100):\n    return matrix\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 141,
        "target_skills": null,
        "problem_func": "from typing import*\n\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the matrix whose sum is equal to the target value.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            for k in range(i, len(matrix)):\n                for l in range(len(matrix[k])):\n                    if matrix[i][j] + matrix[k][l] == target:\n                        return True\n    return False",
        "solution_func": "def g(matrix=[[10, 20, 30], [40, 50, 60], [70, 80, 90]], target=100):\n    return matrix",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string_list: List[str], target_length=5) -> bool:\n    \"\"\"Check if there exists a string in string_list whose length is equal to the target_length.\"\"\"\n    for string in string_list:\n        if len(string) == target_length:\n            return True\n    return False\n\ndef g(string_list=[\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"], target_length=5):\n    return string_list\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 141,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string_list: List[str], target_length=5) -> bool:\n    \"\"\"Check if there exists a string in string_list whose length is equal to the target_length.\"\"\"\n    for string in string_list:\n        if len(string) == target_length:\n            return True\n    return False",
        "solution_func": "def g(string_list=[\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"], target_length=5):\n    return string_list",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\n    A magic square is a square matrix in which the sum of each row, each column, and both diagonals is the same.\"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != target_sum:\n            return False\n    # Check diagonals\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    if diagonal_sum1 != target_sum or diagonal_sum2 != target_sum:\n        return False\n    return True\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 141,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\n    A magic square is a square matrix in which the sum of each row, each column, and both diagonals is the same.\"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != target_sum:\n            return False\n    # Check diagonals\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    if diagonal_sum1 != target_sum or diagonal_sum2 != target_sum:\n        return False\n    return True",
        "solution_func": "def g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums1: List[int], nums2: List[int]) -> bool:\n    \"\"\"Check if nums2 is a subset of nums1.\"\"\"\n    set1 = set(nums1)\n    set2 = set(nums2)\n    return set2.issubset(set1)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 141,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums1: List[int], nums2: List[int]) -> bool:\n    \"\"\"Check if nums2 is a subset of nums1.\"\"\"\n    set1 = set(nums1)\n    set2 = set(nums2)\n    return set2.issubset(set1)",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8, 10]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str], k: int) -> bool:\n    \"\"\"Check if there are k consecutive words in the list that have the same length.\"\"\"\n    for i in range(len(words) - k + 1):\n        if len(words[i]) == len(words[i+k-1]):\n            return True\n    return False\n\ndef g(k: int):\n    return [\"apple\", \"banana\", \"orange\", \"kiwi\", \"peach\", \"mango\", \"grape\"]\n\nassert f(g(k=3))\n",
        "emb": null,
        "idx_generation": 141,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], k: int) -> bool:\n    \"\"\"Check if there are k consecutive words in the list that have the same length.\"\"\"\n    for i in range(len(words) - k + 1):\n        if len(words[i]) == len(words[i+k-1]):\n            return True\n    return False",
        "solution_func": "def g(k: int):\n    return [\"apple\", \"banana\", \"orange\", \"kiwi\", \"peach\", \"mango\", \"grape\"]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if there exists a path in the matrix that sums up to the target value\"\"\"\n    m, n = len(matrix), len(matrix[0])\n\n    def dfs(i, j, curr_sum):\n        if i < 0 or i >= m or j < 0 or j >= n:\n            return False\n        if curr_sum + matrix[i][j] == target:\n            return True\n        return dfs(i + 1, j, curr_sum + matrix[i][j]) or dfs(i, j + 1, curr_sum + matrix[i][j])\n\n    return dfs(0, 0, 0)\n\ndef g(target=20):\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    return matrix\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 141,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if there exists a path in the matrix that sums up to the target value\"\"\"\n    m, n = len(matrix), len(matrix[0])\n\n    def dfs(i, j, curr_sum):\n        if i < 0 or i >= m or j < 0 or j >= n:\n            return False\n        if curr_sum + matrix[i][j] == target:\n            return True\n        return dfs(i + 1, j, curr_sum + matrix[i][j]) or dfs(i, j + 1, curr_sum + matrix[i][j])\n\n    return dfs(0, 0, 0)",
        "solution_func": "def g(target=20):\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    return matrix",
        "map_ix": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists three numbers in the list that sum up to the target value\"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            curr_sum = nums[i] + nums[left] + nums[right]\n            if curr_sum == target:\n                return True\n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(target=0):\n    nums = [-1, 0, 1, 2, -1, -4]\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 141,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists three numbers in the list that sum up to the target value\"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            curr_sum = nums[i] + nums[left] + nums[right]\n            if curr_sum == target:\n                return True\n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False",
        "solution_func": "def g(target=0):\n    nums = [-1, 0, 1, 2, -1, -4]\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str], char='e') -> bool:\n    \"\"\"Check if all words in the list contain a given character\"\"\"\n    for word in words:\n        if char not in word:\n            return False\n    return True\n\ndef g(char='e'):\n    words = [\"hello\", \"world\", \"python\", \"programming\"]\n    return words\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 141,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], char='e') -> bool:\n    \"\"\"Check if all words in the list contain a given character\"\"\"\n    for word in words:\n        if char not in word:\n            return False\n    return True",
        "solution_func": "def g(char='e'):\n    words = [\"hello\", \"world\", \"python\", \"programming\"]\n    return words",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(num_list: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k elements in the list whose sum is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(num_list, k))\ndef g(k: int = 3):\n    return [1, 2, 3, 4, 5]\nassert f(g(), 9)\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 141,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(num_list: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k elements in the list whose sum is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(num_list, k))",
        "solution_func": "def g(k: int = 3):\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            1,
            1,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(num_list: List[int], target: int, k: int = 4) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k elements in the list whose sum is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(num_list, k))\ndef g(k: int = 4):\n    return [1, 2, 3, 4, 5, 6]\nassert f(g(), 15)\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 142,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(num_list: List[int], target: int, k: int = 4) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k elements in the list whose sum is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(num_list, k))",
        "solution_func": "def g(k: int = 4):\n    return [1, 2, 3, 4, 5, 6]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(num_list: List[int], target: int, k: int = 2) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k elements in the list whose sum is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(num_list, k))\ndef g(k: int = 2):\n    return [1, 2, 3, 4, 5]\nassert f(g(), 7)\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 142,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(num_list: List[int], target: int, k: int = 2) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k elements in the list whose sum is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(num_list, k))",
        "solution_func": "def g(k: int = 2):\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(num_list: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k+1 elements in the list whose sum is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(num_list, k+1))\ndef g(k: int = 3):\n    return [1, 2, 3, 4, 5, 6, 7]\nassert f(g(), 20)\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 142,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(num_list: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k+1 elements in the list whose sum is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(num_list, k+1))",
        "solution_func": "def g(k: int = 3):\n    return [1, 2, 3, 4, 5, 6, 7]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target_sum: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sum up to the target_sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\n\ndef g():\n    return [2, 4, 6, 8, 10], 12\n\nassert f(*g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 142,
        "target_skills": null,
        "problem_func": "from typing import*\n\ndef f(nums: List[int], target_sum: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sum up to the target_sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g():\n    return [2, 4, 6, 8, 10], 12",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(words: List[str], target_word: str) -> bool:\n    \"\"\"Check if the target_word is present in the list of words.\"\"\"\n    return target_word in words\n\ndef g():\n    return [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"], \"cherry\"\n\nassert f(*g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 142,
        "target_skills": null,
        "problem_func": "from typing import*\n\ndef f(words: List[str], target_word: str) -> bool:\n    \"\"\"Check if the target_word is present in the list of words.\"\"\"\n    return target_word in words",
        "solution_func": "def g():\n    return [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"], \"cherry\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]], target_num: int) -> bool:\n    \"\"\"Check if the target_num is present in the given matrix.\"\"\"\n    for row in matrix:\n        if target_num in row:\n            return True\n    return False\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5\n\nassert f(*g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 142,
        "target_skills": null,
        "problem_func": "from typing import*\n\ndef f(matrix: List[List[int]], target_num: int) -> bool:\n    \"\"\"Check if the target_num is present in the given matrix.\"\"\"\n    for row in matrix:\n        if target_num in row:\n            return True\n    return False",
        "solution_func": "def g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that adds up to the target sum\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr\nassert f(g())\n\n",
        "emb": null,
        "idx_generation": 142,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that adds up to the target sum\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5]):\n    return arr",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the given matrix is a magic square of size n, where all rows, columns, and diagonals have the same sum\"\"\"\n    target_sum = sum(matrix[0])\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum != target_sum:\n            return False\n    # Check diagonals\n    diag_sum1 = 0\n    diag_sum2 = 0\n    for i in range(n):\n        diag_sum1 += matrix[i][i]\n        diag_sum2 += matrix[i][n-i-1]\n    if diag_sum1 != target_sum or diag_sum2 != target_sum:\n        return False\n    return True\ndef g(matrix=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix\nassert f(g())\n\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 142,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the given matrix is a magic square of size n, where all rows, columns, and diagonals have the same sum\"\"\"\n    target_sum = sum(matrix[0])\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum != target_sum:\n            return False\n    # Check diagonals\n    diag_sum1 = 0\n    diag_sum2 = 0\n    for i in range(n):\n        diag_sum1 += matrix[i][i]\n        diag_sum2 += matrix[i][n-i-1]\n    if diag_sum1 != target_sum or diag_sum2 != target_sum:\n        return False\n    return True",
        "solution_func": "def g(matrix=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(string: str, substring='ab') -> bool:\n    \"\"\"Check if the given substring is present in the given string\"\"\"\n    return substring in string\ndef g(string='Hello, how are you?'):\n    return string\nassert f(g())\n\n",
        "emb": null,
        "idx_generation": 142,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring='ab') -> bool:\n    \"\"\"Check if the given substring is present in the given string\"\"\"\n    return substring in string",
        "solution_func": "def g(string='Hello, how are you?'):\n    return string",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], k=3, target=10) -> bool:\n    \"\"\"Find a combination of k numbers from the list 'nums' that add up to the target\"\"\"\n    from itertools import combinations\n    for comb in combinations(nums, k):\n        if sum(comb) == target:\n            return True\n    return False\n\ndef g(nums=[2, 4, 6, 8, 10, 12, 14, 16]):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 142,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], k=3, target=10) -> bool:\n    \"\"\"Find a combination of k numbers from the list 'nums' that add up to the target\"\"\"\n    from itertools import combinations\n    for comb in combinations(nums, k):\n        if sum(comb) == target:\n            return True\n    return False",
        "solution_func": "def g(nums=[2, 4, 6, 8, 10, 12, 14, 16]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Given a list of integers and a target number, find if there exist two distinct indices i and j in the list such that nums[i] + nums[j] = target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], target=15):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 143,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Given a list of integers and a target number, find if there exist two distinct indices i and j in the list such that nums[i] + nums[j] = target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], target=15):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str], pattern=\"abb\") -> bool:\n    \"\"\"Given a list of words and a pattern, return a list of words that match the pattern.\n    A word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word.\"\"\"\n    def word_matches_pattern(word, pattern):\n        if len(word) != len(pattern):\n            return False\n        mapping = {}\n        for i in range(len(word)):\n            if pattern[i] not in mapping:\n                mapping[pattern[i]] = word[i]\n            elif mapping[pattern[i]] != word[i]:\n                return False\n        return True\n    \n    return [word for word in words if word_matches_pattern(word, pattern)]\n\ndef g(words=[\"red\", \"blue\", \"green\", \"yellow\", \"orange\"], pattern=\"abb\"):\n    return words\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 143,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], pattern=\"abb\") -> bool:\n    \"\"\"Given a list of words and a pattern, return a list of words that match the pattern.\n    A word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word.\"\"\"\n    def word_matches_pattern(word, pattern):\n        if len(word) != len(pattern):\n            return False\n        mapping = {}\n        for i in range(len(word)):\n            if pattern[i] not in mapping:\n                mapping[pattern[i]] = word[i]\n            elif mapping[pattern[i]] != word[i]:\n                return False\n        return True\n    \n    return [word for word in words if word_matches_pattern(word, pattern)]",
        "solution_func": "def g(words=[\"red\", \"blue\", \"green\", \"yellow\", \"orange\"], pattern=\"abb\"):\n    return words",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Given a list of integers and a target number, find all the pairs of numbers that sum up to the target\"\"\"\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                pairs.append((nums[i], nums[j]))\n    return pairs\n\ndef g(nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], target=9):\n    return nums\n\nassert f(g())",
        "emb": null,
        "idx_generation": 143,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Given a list of integers and a target number, find all the pairs of numbers that sum up to the target\"\"\"\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                pairs.append((nums[i], nums[j]))\n    return pairs",
        "solution_func": "def g(nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], target=9):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import *\n\ndef f(arr: List[int], n=5) -> bool:\n    \"\"\"Check if a given number is present in the list and if it is divisible by n.\"\"\"\n    return n in arr and arr[arr.index(n)] % n == 0\n\ndef g(n=5):\n    arr = [random.randint(1, 10) for _ in range(5)]\n    arr.append(n)\n    return arr\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 143,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\nfrom typing import *\n\ndef f(arr: List[int], n=5) -> bool:\n    \"\"\"Check if a given number is present in the list and if it is divisible by n.\"\"\"\n    return n in arr and arr[arr.index(n)] % n == 0",
        "solution_func": "def g(n=5):\n    arr = [random.randint(1, 10) for _ in range(5)]\n    arr.append(n)\n    return arr",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(dates: List[datetime.date]) -> bool:\n    \"\"\"Check if all dates in the list are in the past.\"\"\"\n    today = datetime.date.today()\n    for date in dates:\n        if date >= today:\n            return False\n    return True\n\ndef g():\n    return [datetime.date(2021, 1, 1), datetime.date(2022, 1, 1), datetime.date(2023, 1, 1)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 143,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(dates: List[datetime.date]) -> bool:\n    \"\"\"Check if all dates in the list are in the past.\"\"\"\n    today = datetime.date.today()\n    for date in dates:\n        if date >= today:\n            return False\n    return True",
        "solution_func": "def g():\n    return [datetime.date(2021, 1, 1), datetime.date(2022, 1, 1), datetime.date(2023, 1, 1)]",
        "map_ix": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if any combination of numbers in the list sums up to the target.\"\"\"\n    for r in range(1, len(nums) + 1):\n        for combination in combinations(nums, r):\n            if sum(combination) == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 143,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if any combination of numbers in the list sums up to the target.\"\"\"\n    for r in range(1, len(nums) + 1):\n        for combination in combinations(nums, r):\n            if sum(combination) == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=2, b=5) -> bool:\n    \"\"\"Check if the sum of x and the product of a and b is divisible by x\"\"\"\n    return (x + (a * b)) % x == 0\n\ndef g(a=2, b=5):\n    return a * b\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 143,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=2, b=5) -> bool:\n    \"\"\"Check if the sum of x and the product of a and b is divisible by x\"\"\"\n    return (x + (a * b)) % x == 0",
        "solution_func": "def g(a=2, b=5):\n    return a * b",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=3, b=7) -> bool:\n    \"\"\"Check if the square of the difference between x and the product of a and b is divisible by x\"\"\"\n    return ((x - (a * b)) ** 2) % x == 0\n\ndef g(a=3, b=7):\n    return a * b\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 143,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=3, b=7) -> bool:\n    \"\"\"Check if the square of the difference between x and the product of a and b is divisible by x\"\"\"\n    return ((x - (a * b)) ** 2) % x == 0",
        "solution_func": "def g(a=3, b=7):\n    return a * b",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: int, a=6, b=2) -> bool:\n    \"\"\"Check if the square root of the sum of x and the product of a and b is divisible by x\"\"\"\n    return ((x + (a * b)) ** 0.5) % x == 0\n\ndef g(a=6, b=2):\n    return a * b\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 143,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=6, b=2) -> bool:\n    \"\"\"Check if the square root of the sum of x and the product of a and b is divisible by x\"\"\"\n    return ((x + (a * b)) ** 0.5) % x == 0",
        "solution_func": "def g(a=6, b=2):\n    return a * b",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=5):\n    return [i**2 for i in range(1, k+1)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 143,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False",
        "solution_func": "def g(k=5):\n    return [i**2 for i in range(1, k+1)]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if the product of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] * nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_sum=10):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 144,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if the product of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] * nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target_sum=10):\n    return [n for n in range(1, target_sum+1)]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is greater than or equal to target_sum\"\"\"\n    return any(nums[i] + nums[j] >= target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_sum=10):\n    return [n for n in range(target_sum)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 144,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is greater than or equal to target_sum\"\"\"\n    return any(nums[i] + nums[j] >= target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target_sum=10):\n    return [n for n in range(target_sum)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if all numbers in the list are greater than or equal to the target_sum\"\"\"\n    return all(num >= target_sum for num in nums)\n\ndef g(target_sum=10):\n    return [n for n in range(target_sum, target_sum + 5)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 144,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if all numbers in the list are greater than or equal to the target_sum\"\"\"\n    return all(num >= target_sum for num in nums)",
        "solution_func": "def g(target_sum=10):\n    return [n for n in range(target_sum, target_sum + 5)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import *\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Find a triplet of numbers from the list that sum up to the target value\"\"\"\n    return any((numbers[i] + numbers[j] + numbers[k] == target for i in range(len(numbers)) for j in range(i + 1, len(numbers)) for k in range(j + 1, len(numbers))))\ndef g(numbers=[1, 2, 3, 4, 5, 6]):\n    return numbers\nassert f(g())\n",
        "emb": null,
        "idx_generation": 144,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import *\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Find a triplet of numbers from the list that sum up to the target value\"\"\"\n    return any((numbers[i] + numbers[j] + numbers[k] == target for i in range(len(numbers)) for j in range(i + 1, len(numbers)) for k in range(j + 1, len(numbers))))",
        "solution_func": "def g(numbers=[1, 2, 3, 4, 5, 6]):\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import *\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"Check if there exists a row in the matrix where the sum of all elements is equal to the target value\"\"\"\n    return any((sum(row) == target for row in matrix))\ndef g(matrix=[[10, 20, 30], [40, 50, 60], [70, 80, 90]]):\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 144,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import *\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"Check if there exists a row in the matrix where the sum of all elements is equal to the target value\"\"\"\n    return any((sum(row) == target for row in matrix))",
        "solution_func": "def g(matrix=[[10, 20, 30], [40, 50, 60], [70, 80, 90]]):\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(strings: List[str], target='python') -> bool:\n    \"\"\"Check if any string in the list contains the target substring\"\"\"\n    return any((target in s for s in strings))\ndef g(strings=['hello', 'world', 'python', 'programming']):\n    return strings\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 144,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import *\ndef f(strings: List[str], target='python') -> bool:\n    \"\"\"Check if any string in the list contains the target substring\"\"\"\n    return any((target in s for s in strings))",
        "solution_func": "def g(strings=['hello', 'world', 'python', 'programming']):\n    return strings",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that add up to the target value.\"\"\"\n    return any((numbers[i] + numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target=100):\n    numbers = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return numbers\nassert f(g())\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 144,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that add up to the target value.\"\"\"\n    return any((numbers[i] + numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))",
        "solution_func": "def g(target=100):\n    numbers = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return numbers",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=50) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that divide the target value.\"\"\"\n    return any((target % numbers[i] == 0 and target % numbers[j] == 0) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target=50):\n    numbers = [2, 5, 10, 20, 25, 50, 100, 200, 400]\n    return numbers\nassert f(g())\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 144,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=50) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that divide the target value.\"\"\"\n    return any((target % numbers[i] == 0 and target % numbers[j] == 0) for i in range(len(numbers)) for j in range(i+1, len(numbers)))",
        "solution_func": "def g(target=50):\n    numbers = [2, 5, 10, 20, 25, 50, 100, 200, 400]\n    return numbers",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=1000) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that subtract from the target value.\"\"\"\n    return any((target - numbers[i] == numbers[j]) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target=1000):\n    numbers = [200, 300, 400, 500, 600, 700, 800, 900, 1000]\n    return numbers\nassert f(g())\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 144,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=1000) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that subtract from the target value.\"\"\"\n    return any((target - numbers[i] == numbers[j]) for i in range(len(numbers)) for j in range(i+1, len(numbers)))",
        "solution_func": "def g(target=1000):\n    numbers = [200, 300, 400, 500, 600, 700, 800, 900, 1000]\n    return numbers",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst=[2, 4, 6, 8, 10], upper_bound=100) -> bool:\n    \"\"\"Check if n is divisible by any number in the list and is less than or equal to the upper_bound\"\"\"\n    return any((n % i == 0 for i in lst)) and 0 < n <= upper_bound\ndef g(lst=[2, 4, 6, 8, 10], upper_bound=100):\n    ans = 1\n    for i in lst:\n        (m, n) = (min(i, ans), max(i, ans))\n        while m > 0:\n            (m, n) = (n % m, m)\n        ans *= i // n\n    return ans\nassert f(g())\n",
        "emb": null,
        "idx_generation": 144,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[2, 4, 6, 8, 10], upper_bound=100) -> bool:\n    \"\"\"Check if n is divisible by any number in the list and is less than or equal to the upper_bound\"\"\"\n    return any((n % i == 0 for i in lst)) and 0 < n <= upper_bound",
        "solution_func": "def g(lst=[2, 4, 6, 8, 10], upper_bound=100):\n    ans = 1\n    for i in lst:\n        (m, n) = (min(i, ans), max(i, ans))\n        while m > 0:\n            (m, n) = (n % m, m)\n        ans *= i // n\n    return ans",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nimport math\nfrom typing import*\ndef f(num_list: List[int], target: int, k: int = 4) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k elements in the list whose product is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(math.prod(comb) == target for comb in combinations(num_list, k))\ndef g(k: int = 4):\n    return [1, 2, 3, 4, 5, 6]\nassert f(g(), 120)\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 145,
        "target_skills": null,
        "problem_func": "import itertools\nimport math\nfrom typing import*\ndef f(num_list: List[int], target: int, k: int = 4) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k elements in the list whose product is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(math.prod(comb) == target for comb in combinations(num_list, k))",
        "solution_func": "def g(k: int = 4):\n    return [1, 2, 3, 4, 5, 6]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(num_list: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k elements in the list whose difference is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(abs(comb[0] - comb[1]) == target for comb in combinations(num_list, k))\ndef g(k: int = 3):\n    return [1, 2, 3, 4, 5, 6]\nassert f(g(), 2)\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 145,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(num_list: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k elements in the list whose difference is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(abs(comb[0] - comb[1]) == target for comb in combinations(num_list, k))",
        "solution_func": "def g(k: int = 3):\n    return [1, 2, 3, 4, 5, 6]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nimport math\nfrom typing import*\ndef f(num_list: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k elements in the list whose product is divisible by the target number.\"\"\"\n    from itertools import combinations\n    return any(math.prod(comb) % target == 0 for comb in combinations(num_list, k))\ndef g(k: int = 3):\n    return [1, 2, 3, 4, 5, 6]\nassert f(g(), 6)\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 145,
        "target_skills": null,
        "problem_func": "import itertools\nimport math\nfrom typing import*\ndef f(num_list: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k elements in the list whose product is divisible by the target number.\"\"\"\n    from itertools import combinations\n    return any(math.prod(comb) % target == 0 for comb in combinations(num_list, k))",
        "solution_func": "def g(k: int = 3):\n    return [1, 2, 3, 4, 5, 6]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str], target_word='python', target_len=0) -> bool:\n    \"\"\"Check if the target word is present in the list of words\"\"\"\n    return any(word == target_word for word in words[:target_len+1])\ndef g(target_word='python', target_len=0):\n    words = ['java', 'c++', 'python', 'javascript', 'ruby']\n    return words\nassert f(g())\n",
        "emb": null,
        "idx_generation": 145,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], target_word='python', target_len=0) -> bool:\n    \"\"\"Check if the target word is present in the list of words\"\"\"\n    return any(word == target_word for word in words[:target_len+1])",
        "solution_func": "def g(target_word='python', target_len=0):\n    words = ['java', 'c++', 'python', 'javascript', 'ruby']\n    return words",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=20) -> bool:\n    \"\"\"Check if any pair of numbers in the list sums up to the target sum\"\"\"\n    return any((numbers[i] + numbers[j] == target_sum) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target_sum=20):\n    numbers = [10, 5, 15, 7, 3, 8]\n    return numbers\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 145,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target_sum=20) -> bool:\n    \"\"\"Check if any pair of numbers in the list sums up to the target sum\"\"\"\n    return any((numbers[i] + numbers[j] == target_sum) for i in range(len(numbers)) for j in range(i+1, len(numbers)))",
        "solution_func": "def g(target_sum=20):\n    numbers = [10, 5, 15, 7, 3, 8]\n    return numbers",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_row_sum=15) -> bool:\n    \"\"\"Check if any row in the matrix has a sum equal to the target row sum\"\"\"\n    return any(sum(row) == target_row_sum for row in matrix)\ndef g(target_row_sum=15):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 145,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_row_sum=15) -> bool:\n    \"\"\"Check if any row in the matrix has a sum equal to the target row sum\"\"\"\n    return any(sum(row) == target_row_sum for row in matrix)",
        "solution_func": "def g(target_row_sum=15):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if there exists a row in the matrix where the sum of its elements is divisible by 3.\"\"\"\n    for row in matrix:\n        if sum(row) % 3 == 0:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 145,
        "target_skills": null,
        "problem_func": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if there exists a row in the matrix where the sum of its elements is divisible by 3.\"\"\"\n    for row in matrix:\n        if sum(row) % 3 == 0:\n            return True\n    return False",
        "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\n\ndef f(num_list: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in num_list whose sum is equal to the target_sum.\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target_sum:\n                return True\n    return False\n\ndef g(num_list=[1, 2, 3, 4, 5]):\n    return num_list\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 145,
        "target_skills": null,
        "problem_func": "from typing import*\n\ndef f(num_list: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in num_list whose sum is equal to the target_sum.\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(num_list=[1, 2, 3, 4, 5]):\n    return num_list",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\n\ndef f(string_list: List[str], target_length=5) -> bool:\n    \"\"\"Check if all strings in string_list have a length greater than or equal to the target_length.\"\"\"\n    return all(len(string) >= target_length for string in string_list)\n\ndef g(string_list=[\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"], target_length=5):\n    return string_list\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 145,
        "target_skills": null,
        "problem_func": "from typing import*\n\ndef f(string_list: List[str], target_length=5) -> bool:\n    \"\"\"Check if all strings in string_list have a length greater than or equal to the target_length.\"\"\"\n    return all(len(string) >= target_length for string in string_list)",
        "solution_func": "def g(string_list=[\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"], target_length=5):\n    return string_list",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=10):\n    arr = [1, 2, 3, 4, 5]\n    return arr\nassert f(g())\n",
        "emb": null,
        "idx_generation": 145,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    arr = [1, 2, 3, 4, 5]\n    return arr",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists two numbers in the list whose sum is equal to the target value.\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 146,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists two numbers in the list whose sum is equal to the target value.\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g():\n    nums = [1, 2, 3, 4, 5]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is symmetric.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n    return matrix\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 146,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is symmetric.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True",
        "solution_func": "def g():\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n    return matrix",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sentence: str, target_word=\"programming\") -> bool:\n    \"\"\"Check if a specific word is present in the given sentence.\"\"\"\n    words = sentence.split()\n    for word in words:\n        if word.lower() == target_word:\n            return True\n    return False\n\ndef g():\n    sentence = \"Python programming is fun!\"\n    return sentence\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 146,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(sentence: str, target_word=\"programming\") -> bool:\n    \"\"\"Check if a specific word is present in the given sentence.\"\"\"\n    words = sentence.split()\n    for word in words:\n        if word.lower() == target_word:\n            return True\n    return False",
        "solution_func": "def g():\n    sentence = \"Python programming is fun!\"\n    return sentence",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there is a pair of numbers in nums that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=20):\n    nums = [5, 10, 15, 20, 25, 30, 35, 40]\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 146,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there is a pair of numbers in nums that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=20):\n    nums = [5, 10, 15, 20, 25, 30, 35, 40]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if there are three numbers in arr that sum up to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(target=100):\n    arr = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return arr\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 146,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if there are three numbers in arr that sum up to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=100):\n    arr = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return arr",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, s=10) -> bool:\n    \"\"\"Check if n is a perfect square and the sum of its digits is equal to s.\"\"\"\n    num_str = str(n)\n    digit_sum = sum(int(d) for d in num_str)\n    return n == int(num_str)**2 and digit_sum == s\n\ndef g(s=10):\n    for n in range(1, 10000):\n        if f(n, s):\n            return n\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 146,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, s=10) -> bool:\n    \"\"\"Check if n is a perfect square and the sum of its digits is equal to s.\"\"\"\n    num_str = str(n)\n    digit_sum = sum(int(d) for d in num_str)\n    return n == int(num_str)**2 and digit_sum == s",
        "solution_func": "def g(s=10):\n    for n in range(1, 10000):\n        if f(n, s):\n            return n",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 146,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str], letter='a') -> bool:\n    \"\"\"Check if all words in the list start with the given letter\"\"\"\n    return all(word.startswith(letter) for word in words)\ndef g(letter='a'):\n    return ['apple', 'banana', 'avocado']\nassert f(g())\n",
        "emb": null,
        "idx_generation": 146,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], letter='a') -> bool:\n    \"\"\"Check if all words in the list start with the given letter\"\"\"\n    return all(word.startswith(letter) for word in words)",
        "solution_func": "def g(letter='a'):\n    return ['apple', 'banana', 'avocado']",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given string has a length greater than n\"\"\"\n    return len(s) > n\ndef g(n=3):\n    return \"Python\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 146,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given string has a length greater than n\"\"\"\n    return len(s) > n",
        "solution_func": "def g(n=3):\n    return \"Python\"",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [i for i in range(target - 5)] + [target - 5, target - 4]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 146,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [i for i in range(target - 5)] + [target - 5, target - 4]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=5, c=2) -> bool:\n    \"\"\"Find n such that (the sum of the first b multiples of c) - a == n\"\"\"\n    return sum([c * i for i in range(b)]) - a == n\ndef g(a=10, b=5, c=2):\n    return sum([c * i for i in range(b)]) - a\nassert f(g())\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 147,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=10, b=5, c=2) -> bool:\n    \"\"\"Find n such that (the sum of the first b multiples of c) - a == n\"\"\"\n    return sum([c * i for i in range(b)]) - a == n",
        "solution_func": "def g(a=10, b=5, c=2):\n    return sum([c * i for i in range(b)]) - a",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=50, b=2, c=5) -> bool:\n    \"\"\"Find n such that (the sum of the first b multiples of c) - a == n\"\"\"\n    return sum([c * i for i in range(b)]) - a == n\ndef g(a=50, b=2, c=5):\n    return sum([c * i for i in range(b)]) - a\nassert f(g())\n\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 147,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=50, b=2, c=5) -> bool:\n    \"\"\"Find n such that (the sum of the first b multiples of c) - a == n\"\"\"\n    return sum([c * i for i in range(b)]) - a == n",
        "solution_func": "def g(a=50, b=2, c=5):\n    return sum([c * i for i in range(b)]) - a",
        "map_ix": [
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=20, b=4, c=3) -> bool:\n    \"\"\"Find n such that (the sum of the first b multiples of c) - a == n\"\"\"\n    return sum([c * i for i in range(b)]) - a == n\ndef g(a=20, b=4, c=3):\n    return sum([c * i for i in range(b)]) - a\nassert f(g())\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 147,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=20, b=4, c=3) -> bool:\n    \"\"\"Find n such that (the sum of the first b multiples of c) - a == n\"\"\"\n    return sum([c * i for i in range(b)]) - a == n",
        "solution_func": "def g(a=20, b=4, c=3):\n    return sum([c * i for i in range(b)]) - a",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are four consecutive numbers in the list that add up to 0.\"\"\"\n    for i in range(len(nums)-3):\n        if nums[i] + nums[i+1] + nums[i+2] + nums[i+3] == 0:\n            return True\n    return False\n\ndef g():\n    return [1, 2, -3, 4, -1, -2, -4, 3]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 147,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are four consecutive numbers in the list that add up to 0.\"\"\"\n    for i in range(len(nums)-3):\n        if nums[i] + nums[i+1] + nums[i+2] + nums[i+3] == 0:\n            return True\n    return False",
        "solution_func": "def g():\n    return [1, 2, -3, 4, -1, -2, -4, 3]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if all the numbers in the list are positive.\"\"\"\n    for num in nums:\n        if num <= 0:\n            return False\n    return True\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 147,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if all the numbers in the list are positive.\"\"\"\n    for num in nums:\n        if num <= 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that add up to 10.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == 10:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 147,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that add up to 10.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == 10:\n                return True\n    return False",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Find a pair of numbers in the list whose sum is equal to the target sum\"\"\"\n    return any((nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums))))\ndef g(target_sum=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 147,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Find a pair of numbers in the list whose sum is equal to the target sum\"\"\"\n    return any((nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums))))",
        "solution_func": "def g(target_sum=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(string: str, target_char='a') -> bool:\n    \"\"\"Check if the target character is present in the given string\"\"\"\n    return target_char in string\ndef g(target_char='a'):\n    string = \"Hello World!\"\n    return string\nassert f(g())\n",
        "emb": null,
        "idx_generation": 147,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, target_char='a') -> bool:\n    \"\"\"Check if the target character is present in the given string\"\"\"\n    return target_char in string",
        "solution_func": "def g(target_char='a'):\n    string = \"Hello World!\"\n    return string",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric\"\"\"\n    return all((matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(i + 1, len(matrix))))\ndef g():\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n    return matrix\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 147,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric\"\"\"\n    return all((matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(i + 1, len(matrix))))",
        "solution_func": "def g():\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n    return matrix",
        "map_ix": [
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Find two numbers in the list whose product is equal to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] == target:\n                return True\n    return False\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 147,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Find two numbers in the list whose product is equal to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: List[int], a=3, b=2, c=10, d=100) -> bool:\n    \"\"\"Check if a point lies inside a rectangle.\nSolution should be a tuple of the (x,y) coordinates.\"\"\"\n    x, y = e\n    return (a <= x <= c) and (b <= y <= d)\ndef g(a=3, b=2, c=10, d=100):\n    return [a, b]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 148,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(e: List[int], a=3, b=2, c=10, d=100) -> bool:\n    \"\"\"Check if a point lies inside a rectangle.\nSolution should be a tuple of the (x,y) coordinates.\"\"\"\n    x, y = e\n    return (a <= x <= c) and (b <= y <= d)",
        "solution_func": "def g(a=3, b=2, c=10, d=100):\n    return [a, b]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: List[int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies inside a circle.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return ((x - a) ** 2) + ((y - b) ** 2) <= (c ** 2)\ndef g(a=1, b=2, c=10):\n    return [a, b]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 148,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(e: List[int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies inside a circle.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return ((x - a) ** 2) + ((y - b) ** 2) <= (c ** 2)",
        "solution_func": "def g(a=1, b=2, c=10):\n    return [a, b]",
        "map_ix": [
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(e: List[int], a=5, b=-4, c=0, d=2024) -> bool:\n    \"\"\"Check if a point lies on a curve.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of the fourth decimal digit is required.\"\"\"\n    x, y = e\n    return (y == ((x - a) ** 3) - (c * (x - a)) + (d * x))\ndef g(a=5, b=-4, c=0, d=2024):\n    return [a, b]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 148,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(e: List[int], a=5, b=-4, c=0, d=2024) -> bool:\n    \"\"\"Check if a point lies on a curve.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of the fourth decimal digit is required.\"\"\"\n    x, y = e\n    return (y == ((x - a) ** 3) - (c * (x - a)) + (d * x))",
        "solution_func": "def g(a=5, b=-4, c=0, d=2024):\n    return [a, b]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=24) -> bool:\n    \"\"\"Find three numbers in the list whose product is equal to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] * arr[j] * arr[k] == target:\n                    return True\n    return False\n\ndef g(target=24):\n    return [2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 148,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=24) -> bool:\n    \"\"\"Find three numbers in the list whose product is equal to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] * arr[j] * arr[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=24):\n    return [2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 148,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=50) -> bool:\n    \"\"\"Check if all numbers in the list are divisible by the target value.\"\"\"\n    return all(num % target == 0 for num in arr)\n\ndef g(target=50):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 148,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=50) -> bool:\n    \"\"\"Check if all numbers in the list are divisible by the target value.\"\"\"\n    return all(num % target == 0 for num in arr)",
        "solution_func": "def g(target=50):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nimport itertools\nfrom typing import*\ndef f(num_list: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k elements in the list whose product is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(math.prod(comb) == target for comb in combinations(num_list, k))\ndef g(k: int = 3):\n    return [2, 3, 4, 5, 6]\nassert f(g(), 120)\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 148,
        "target_skills": null,
        "problem_func": "import math\nimport itertools\nfrom typing import*\ndef f(num_list: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k elements in the list whose product is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(math.prod(comb) == target for comb in combinations(num_list, k))",
        "solution_func": "def g(k: int = 3):\n    return [2, 3, 4, 5, 6]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(num_list: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k elements in the list whose difference is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(abs(comb[0] - comb[1]) == target for comb in combinations(num_list, k))\ndef g(k: int = 3):\n    return [10, 20, 30, 40, 50]\nassert f(g(), 20)\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 148,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(num_list: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k elements in the list whose difference is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(abs(comb[0] - comb[1]) == target for comb in combinations(num_list, k))",
        "solution_func": "def g(k: int = 3):\n    return [10, 20, 30, 40, 50]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(num_list: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k elements in the list whose XOR is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(reduce(lambda x, y: x ^ y, comb) == target for comb in combinations(num_list, k))\ndef g(k: int = 3):\n    return [1, 3, 5, 7, 9]\nassert f(g(), 5)\n",
        "emb": null,
        "idx_generation": 148,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(num_list: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k elements in the list whose XOR is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(reduce(lambda x, y: x ^ y, comb) == target for comb in combinations(num_list, k))",
        "solution_func": "def g(k: int = 3):\n    return [1, 3, 5, 7, 9]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], target=10) -> bool:\n    \"\"\"Find a pair of integers in the list that sum up to the target.\"\"\"\n    return any((x[i] + x[j] == target) for i in range(len(x)) for j in range(i + 1, len(x)))\ndef g(target=10):\n    return [2, 4, 6, 8]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 148,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], target=10) -> bool:\n    \"\"\"Find a pair of integers in the list that sum up to the target.\"\"\"\n    return any((x[i] + x[j] == target) for i in range(len(x)) for j in range(i + 1, len(x)))",
        "solution_func": "def g(target=10):\n    return [2, 4, 6, 8]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to the target value.\"\"\"\n    return any(x + y == target for x in lst for y in lst)\n    \ndef g(target=100):\n    return [25, 45, 10, 20]\n    \nassert f(g())\n",
        "emb": null,
        "idx_generation": 149,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to the target value.\"\"\"\n    return any(x + y == target for x in lst for y in lst)",
        "solution_func": "def g(target=100):\n    return [25, 45, 10, 20]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a subsequence in the list that sums up to the target value.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if sum(lst[i:j]) == target:\n                return True\n    return False\n    \ndef g(target=50):\n    return [10, 20, 30, 40, 50]\n    \nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 149,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a subsequence in the list that sums up to the target value.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if sum(lst[i:j]) == target:\n                return True\n    return False",
        "solution_func": "def g(target=50):\n    return [10, 20, 30, 40, 50]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target value.\"\"\"\n    return any(x * y == target for x in lst for y in lst)\n    \ndef g(target=100):\n    return [10, 25, 4, 5]\n    \nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 149,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target value.\"\"\"\n    return any(x * y == target for x in lst for y in lst)",
        "solution_func": "def g(target=100):\n    return [10, 25, 4, 5]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=50) -> bool:\n    \"\"\"Find a subset of numbers that adds up to a given target sum.\"\"\"\n    return sum(numbers) == target_sum\n\ndef g(target_sum=50):\n    numbers = [random.randint(1, 10) for _ in range(5)]\n    return numbers\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 149,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=50) -> bool:\n    \"\"\"Find a subset of numbers that adds up to a given target sum.\"\"\"\n    return sum(numbers) == target_sum",
        "solution_func": "def g(target_sum=50):\n    numbers = [random.randint(1, 10) for _ in range(5)]\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=10, y=10) -> bool:\n    \"\"\"Find the number of divisors of a given integer.\"\"\"\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors == x + y\n\ndef g(x=10, y=10):\n    n = math.factorial(x + y)\n    return n\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 149,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, x=10, y=10) -> bool:\n    \"\"\"Find the number of divisors of a given integer.\"\"\"\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors == x + y",
        "solution_func": "def g(x=10, y=10):\n    n = math.factorial(x + y)\n    return n",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Find a pair of numbers from a list that adds up to a given target sum.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=20):\n    arr = [random.randint(1, 10) for _ in range(5)]\n    return arr\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 149,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\nfrom typing import List\n\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Find a pair of numbers from a list that adds up to a given target sum.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=20):\n    arr = [random.randint(1, 10) for _ in range(5)]\n    return arr",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target.\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    \n    return subset_sum(nums, target)\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 149,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target.\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    \n    return subset_sum(nums, target)",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target.\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    \n    return subset_sum(nums, target)\n\ndef g(nums=[10, 20, 30, 40, 50]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 149,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target.\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    \n    return subset_sum(nums, target)",
        "solution_func": "def g(nums=[10, 20, 30, 40, 50]):\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target.\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    \n    return subset_sum(nums, target)\n\ndef g(nums=[2, 4, 6, 8, 10]):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 149,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target.\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    \n    return subset_sum(nums, target)",
        "solution_func": "def g(nums=[2, 4, 6, 8, 10]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=14, b=50, c=47) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c odd integers)\"\"\"\n    return n + a == sum([b * i for i in range(1, 2*c+1, 2)])\ndef g(a=14, b=50, c=47):\n    return -a + sum([b * i for i in range(1, 2*c+1, 2)])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 149,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=14, b=50, c=47) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c odd integers)\"\"\"\n    return n + a == sum([b * i for i in range(1, 2*c+1, 2)])",
        "solution_func": "def g(a=14, b=50, c=47):\n    return -a + sum([b * i for i in range(1, 2*c+1, 2)])",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]], n=5) -> bool:\n    \"\"\"Check if there exists a straight line that passes through exactly n points.\"\"\"\n    if len(points) < n:\n        return False\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            count = 2\n            for k in range(j+1, len(points)):\n                if (points[j][0] - points[i][0]) * (points[k][1] - points[i][1]) == (points[k][0] - points[i][0]) * (points[j][1] - points[i][1]):\n                    count += 1\n            if count == n:\n                return True\n    return False\n\ndef g(n=5):\n    return [(1, 2), (2, 4), (3, 6), (4, 8), (5, 10), (6, 12)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 150,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(points: List[Tuple[int, int]], n=5) -> bool:\n    \"\"\"Check if there exists a straight line that passes through exactly n points.\"\"\"\n    if len(points) < n:\n        return False\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            count = 2\n            for k in range(j+1, len(points)):\n                if (points[j][0] - points[i][0]) * (points[k][1] - points[i][1]) == (points[k][0] - points[i][0]) * (points[j][1] - points[i][1]):\n                    count += 1\n            if count == n:\n                return True\n    return False",
        "solution_func": "def g(n=5):\n    return [(1, 2), (2, 4), (3, 6), (4, 8), (5, 10), (6, 12)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=8) -> bool:\n    \"\"\"Check if there exists a submatrix with a sum equal to the target number.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i, rows):\n                for l in range(j, cols):\n                    submatrix_sum = 0\n                    for m in range(i, k + 1):\n                        for n in range(j, l + 1):\n                            submatrix_sum += matrix[m][n]\n                    if submatrix_sum == target:\n                        return True\n    return False\n\ndef g(target=8):\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 150,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=8) -> bool:\n    \"\"\"Check if there exists a submatrix with a sum equal to the target number.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i, rows):\n                for l in range(j, cols):\n                    submatrix_sum = 0\n                    for m in range(i, k + 1):\n                        for n in range(j, l + 1):\n                            submatrix_sum += matrix[m][n]\n                    if submatrix_sum == target:\n                        return True\n    return False",
        "solution_func": "def g(target=8):\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, n=3) -> bool:\n    \"\"\"Check if there exists a substring of length n that is a palindrome.\"\"\"\n    for i in range(len(string) - n + 1):\n        substring = string[i:i+n]\n        if substring == substring[::-1]:\n            return True\n    return False\n\ndef g(n=3):\n    return \"racecar\"\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 150,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, n=3) -> bool:\n    \"\"\"Check if there exists a substring of length n that is a palindrome.\"\"\"\n    for i in range(len(string) - n + 1):\n        substring = string[i:i+n]\n        if substring == substring[::-1]:\n            return True\n    return False",
        "solution_func": "def g(n=3):\n    return \"racecar\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(sentence: str, words=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Check if all the words in the list are present in the sentence.\"\"\"\n    return all(word in sentence for word in words)\n\ndef g(words=['apple', 'banana', 'cherry']):\n    return \"I love eating apple and banana. Cherry is also delicious.\"\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 150,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(sentence: str, words=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Check if all the words in the list are present in the sentence.\"\"\"\n    return all(word in sentence for word in words)",
        "solution_func": "def g(words=['apple', 'banana', 'cherry']):\n    return \"I love eating apple and banana. Cherry is also delicious.\"",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains a subsequence of consecutive numbers.\"\"\"\n    return any(nums[i] == nums[i+1] - 1 for i in range(len(nums)-1))\n\ndef g():\n    return [1, 2, 4, 5, 6, 9, 10]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 150,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains a subsequence of consecutive numbers.\"\"\"\n    return any(nums[i] == nums[i+1] - 1 for i in range(len(nums)-1))",
        "solution_func": "def g():\n    return [1, 2, 4, 5, 6, 9, 10]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 7\n\nassert f(*g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 150,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5], 7",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list whose sum is equal to the target number.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))\ndef g(nums=[12, 34, 56, 78, 90]):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 150,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list whose sum is equal to the target number.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))",
        "solution_func": "def g(nums=[12, 34, 56, 78, 90]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"Given two strings, check if one string is a permutation of the other.\"\"\"\n    return sorted(s1) == sorted(s2)\ndef g(s1=\"abcde\", s2=\"edcba\"):\n    return s1, s2\nassert f(*g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 150,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"Given two strings, check if one string is a permutation of the other.\"\"\"\n    return sorted(s1) == sorted(s2)",
        "solution_func": "def g(s1=\"abcde\", s2=\"edcba\"):\n    return s1, s2",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix, determine if it is a symmetric matrix.\"\"\"\n    return all((matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[i]))))\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 150,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix, determine if it is a symmetric matrix.\"\"\"\n    return all((matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[i]))))",
        "solution_func": "def g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target_sum=20) -> bool:\n    \"\"\"Find if there exists a combination of numbers from the list that adds up to the target sum\"\"\"\n    def subset_sum(nums, n, target_sum):\n        if target_sum == 0:\n            return True\n        if n == 0 and target_sum != 0:\n            return False\n        if nums[n-1] > target_sum:\n            return subset_sum(nums, n-1, target_sum)\n        return subset_sum(nums, n-1, target_sum) or subset_sum(nums, n-1, target_sum-nums[n-1])\n    return subset_sum(nums, len(nums), target_sum)\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target_sum=20):\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums)))\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 150,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target_sum=20) -> bool:\n    \"\"\"Find if there exists a combination of numbers from the list that adds up to the target sum\"\"\"\n    def subset_sum(nums, n, target_sum):\n        if target_sum == 0:\n            return True\n        if n == 0 and target_sum != 0:\n            return False\n        if nums[n-1] > target_sum:\n            return subset_sum(nums, n-1, target_sum)\n        return subset_sum(nums, n-1, target_sum) or subset_sum(nums, n-1, target_sum-nums[n-1])\n    return subset_sum(nums, len(nums), target_sum)",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target_sum=20):\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums)))",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=14, b=50, c=47) -> bool:\n    \"\"\"Find n such that n + a is divisible by the sum of the first c integers multiplied by b\"\"\"\n    return (n + a) % (sum([i for i in range(c+1)]) * b) == 0\ndef g(a=14, b=50, c=47):\n    return (sum([i for i in range(c+1)]) * b) - a\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 151,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=14, b=50, c=47) -> bool:\n    \"\"\"Find n such that n + a is divisible by the sum of the first c integers multiplied by b\"\"\"\n    return (n + a) % (sum([i for i in range(c+1)]) * b) == 0",
        "solution_func": "def g(a=14, b=50, c=47):\n    return (sum([i for i in range(c+1)]) * b) - a",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=14, b=50, c=47) -> bool:\n    \"\"\"Find n such that n is a prime number and n + a is equal to the sum of the first c prime numbers multiplied by b\"\"\"\n    primes = []\n    current = 2\n    while len(primes) < c:\n        is_prime = True\n        for i in range(2, int(current**0.5) + 1):\n            if current % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(current)\n        current += 1\n    return n in primes and n + a == sum(primes) * b\ndef g(a=14, b=50, c=47):\n    primes = []\n    current = 2\n    while len(primes) < c:\n        is_prime = True\n        for i in range(2, int(current**0.5) + 1):\n            if current % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(current)\n        current += 1\n    return primes[-1] + a\nassert f(g())\n",
        "emb": null,
        "idx_generation": 151,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=14, b=50, c=47) -> bool:\n    \"\"\"Find n such that n is a prime number and n + a is equal to the sum of the first c prime numbers multiplied by b\"\"\"\n    primes = []\n    current = 2\n    while len(primes) < c:\n        is_prime = True\n        for i in range(2, int(current**0.5) + 1):\n            if current % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(current)\n        current += 1\n    return n in primes and n + a == sum(primes) * b",
        "solution_func": "def g(a=14, b=50, c=47):\n    primes = []\n    current = 2\n    while len(primes) < c:\n        is_prime = True\n        for i in range(2, int(current**0.5) + 1):\n            if current % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(current)\n        current += 1\n    return primes[-1] + a",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=14, b=50, c=47) -> bool:\n    \"\"\"Find n such that n + a is equal to the sum of the first c odd numbers multiplied by b\"\"\"\n    return n + a == sum([i for i in range(1, c*2, 2)]) * b\ndef g(a=14, b=50, c=47):\n    return sum([i for i in range(1, c*2, 2)]) * b - a\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 151,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=14, b=50, c=47) -> bool:\n    \"\"\"Find n such that n + a is equal to the sum of the first c odd numbers multiplied by b\"\"\"\n    return n + a == sum([i for i in range(1, c*2, 2)]) * b",
        "solution_func": "def g(a=14, b=50, c=47):\n    return sum([i for i in range(1, c*2, 2)]) * b - a",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target=15) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that sums up to the target value\"\"\"\n    return any((x + y == target for x in lst for y in lst))\n\ndef g(target=15):\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 151,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target=15) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that sums up to the target value\"\"\"\n    return any((x + y == target for x in lst for y in lst))",
        "solution_func": "def g(target=15):\n    return [2, 4, 6, 8, 10]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=25) -> bool:\n    \"\"\"Check if there exists a path in the matrix that sums up to the target value\"\"\"\n    m, n = len(matrix), len(matrix[0])\n\n    def dfs(i, j, curr_sum):\n        if i < 0 or i >= m or j < 0 or j >= n:\n            return False\n        if curr_sum + matrix[i][j] == target:\n            return True\n        return dfs(i + 1, j, curr_sum + matrix[i][j]) or dfs(i, j + 1, curr_sum + matrix[i][j]) or dfs(i - 1, j, curr_sum + matrix[i][j])\n\n    return dfs(0, 0, 0)\n\ndef g(target=25):\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 151,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=25) -> bool:\n    \"\"\"Check if there exists a path in the matrix that sums up to the target value\"\"\"\n    m, n = len(matrix), len(matrix[0])\n\n    def dfs(i, j, curr_sum):\n        if i < 0 or i >= m or j < 0 or j >= n:\n            return False\n        if curr_sum + matrix[i][j] == target:\n            return True\n        return dfs(i + 1, j, curr_sum + matrix[i][j]) or dfs(i, j + 1, curr_sum + matrix[i][j]) or dfs(i - 1, j, curr_sum + matrix[i][j])\n\n    return dfs(0, 0, 0)",
        "solution_func": "def g(target=25):\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target=30) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that sums up to the target value\"\"\"\n    return any((x + y == target for x in lst for y in lst if x != y))\n\ndef g(target=30):\n    return [10, 15, 5]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 151,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target=30) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that sums up to the target value\"\"\"\n    return any((x + y == target for x in lst for y in lst if x != y))",
        "solution_func": "def g(target=30):\n    return [10, 15, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target.\"\"\"\n    prefix_sum = 0\n    for i in range(len(nums)):\n        prefix_sum = 0\n        for j in range(i, len(nums)):\n            prefix_sum += nums[j]\n            if prefix_sum == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [i+1 for i in range(target)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 151,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target.\"\"\"\n    prefix_sum = 0\n    for i in range(len(nums)):\n        prefix_sum = 0\n        for j in range(i, len(nums)):\n            prefix_sum += nums[j]\n            if prefix_sum == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [i+1 for i in range(target)]",
        "map_ix": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose length is equal to n.\"\"\"\n    if len(nums) < n:\n        return False\n    return True\n\ndef g(n=5):\n    return [i**2 for i in range(1, n+1)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 151,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose length is equal to n.\"\"\"\n    if len(nums) < n:\n        return False\n    return True",
        "solution_func": "def g(n=5):\n    return [i**2 for i in range(1, n+1)]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], x=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose length is divisible by x.\"\"\"\n    if len(nums) % x == 0:\n        return True\n    return False\n\ndef g(x=5):\n    return [i for i in range(1, x+1)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 151,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], x=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose length is divisible by x.\"\"\"\n    if len(nums) % x == 0:\n        return True\n    return False",
        "solution_func": "def g(x=5):\n    return [i for i in range(1, x+1)]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=10, c=15) -> bool:\n    \"\"\"Find n such that n - a == b * (the sum of the first c integers)\"\"\"\n    return n - a == sum([b * i for i in range(c)])\ndef g(a=5, b=10, c=15):\n    return a + sum([b * i for i in range(c)])\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 151,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=5, b=10, c=15) -> bool:\n    \"\"\"Find n such that n - a == b * (the sum of the first c integers)\"\"\"\n    return n - a == sum([b * i for i in range(c)])",
        "solution_func": "def g(a=5, b=10, c=15):\n    return a + sum([b * i for i in range(c)])",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target value.\"\"\"\n    seen = set()\n    for num in numbers:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 152,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target value.\"\"\"\n    seen = set()\n    for num in numbers:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(info: Dict[str, str], key='name', value='') -> bool:\n    \"\"\"Check if the given key-value pair exists in the dictionary.\"\"\"\n    return key in info and info[key] == value\n\ndef g(key='name', value=''):\n    return {'name': 'John', 'age': '30'}\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 152,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import Dict\n\ndef f(info: Dict[str, str], key='name', value='') -> bool:\n    \"\"\"Check if the given key-value pair exists in the dictionary.\"\"\"\n    return key in info and info[key] == value",
        "solution_func": "def g(key='name', value=''):\n    return {'name': 'John', 'age': '30'}",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', replacements=0) -> bool:\n    \"\"\"Check if the number of replacements required to convert the string into the substring is equal to the given value.\"\"\"\n    return string.replace(substring, '') == substring * replacements\n\ndef g(substring='abc', replacements=0):\n    return substring * (replacements + 1)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 152,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring='abc', replacements=0) -> bool:\n    \"\"\"Check if the number of replacements required to convert the string into the substring is equal to the given value.\"\"\"\n    return string.replace(substring, '') == substring * replacements",
        "solution_func": "def g(substring='abc', replacements=0):\n    return substring * (replacements + 1)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the given matrix is a magic square of size n, where all rows, columns, and diagonals have the same sum\"\"\"\n    target_sum = sum(matrix[0])\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum != target_sum:\n            return False\n    # Check diagonals\n    diag_sum1 = 0\n    diag_sum2 = 0\n    for i in range(n):\n        diag_sum1 += matrix[i][i]\n        diag_sum2 += matrix[i][n-i-1]\n    if diag_sum1 != target_sum or diag_sum2 != target_sum:\n        return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 152,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the given matrix is a magic square of size n, where all rows, columns, and diagonals have the same sum\"\"\"\n    target_sum = sum(matrix[0])\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum != target_sum:\n            return False\n    # Check diagonals\n    diag_sum1 = 0\n    diag_sum2 = 0\n    for i in range(n):\n        diag_sum1 += matrix[i][i]\n        diag_sum2 += matrix[i][n-i-1]\n    if diag_sum1 != target_sum or diag_sum2 != target_sum:\n        return False\n    return True",
        "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the given matrix is a magic square of size n, where all rows, columns, and diagonals have the same sum\"\"\"\n    target_sum = sum(matrix[0])\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum != target_sum:\n            return False\n    # Check diagonals\n    diag_sum1 = 0\n    diag_sum2 = 0\n    for i in range(n):\n        diag_sum1 += matrix[i][i]\n        diag_sum2 += matrix[i][n-i-1]\n    if diag_sum1 != target_sum or diag_sum2 != target_sum:\n        return False\n    return True\n\ndef g(matrix=[[4, 9, 2], [3, 5, 7], [8, 1, 6]]):\n    return matrix\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 152,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the given matrix is a magic square of size n, where all rows, columns, and diagonals have the same sum\"\"\"\n    target_sum = sum(matrix[0])\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum != target_sum:\n            return False\n    # Check diagonals\n    diag_sum1 = 0\n    diag_sum2 = 0\n    for i in range(n):\n        diag_sum1 += matrix[i][i]\n        diag_sum2 += matrix[i][n-i-1]\n    if diag_sum1 != target_sum or diag_sum2 != target_sum:\n        return False\n    return True",
        "solution_func": "def g(matrix=[[4, 9, 2], [3, 5, 7], [8, 1, 6]]):\n    return matrix",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the given matrix is a magic square of size n, where all rows, columns, and diagonals have the same sum\"\"\"\n    target_sum = sum(matrix[0])\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum != target_sum:\n            return False\n    # Check diagonals\n    diag_sum1 = 0\n    diag_sum2 = 0\n    for i in range(n):\n        diag_sum1 += matrix[i][i]\n        diag_sum2 += matrix[i][n-i-1]\n    if diag_sum1 != target_sum or diag_sum2 != target_sum:\n        return False\n    return True\n\ndef g(matrix=[[16, 3, 2], [13, 5, 11], [10, 8, 9]]):\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 152,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the given matrix is a magic square of size n, where all rows, columns, and diagonals have the same sum\"\"\"\n    target_sum = sum(matrix[0])\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum != target_sum:\n            return False\n    # Check diagonals\n    diag_sum1 = 0\n    diag_sum2 = 0\n    for i in range(n):\n        diag_sum1 += matrix[i][i]\n        diag_sum2 += matrix[i][n-i-1]\n    if diag_sum1 != target_sum or diag_sum2 != target_sum:\n        return False\n    return True",
        "solution_func": "def g(matrix=[[16, 3, 2], [13, 5, 11], [10, 8, 9]]):\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=54321) -> bool:\n    \"\"\"Check if a number is divisible by 3\"\"\"\n    return x % 3 == 0\ndef g(a=54321):\n    return a\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 152,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=54321) -> bool:\n    \"\"\"Check if a number is divisible by 3\"\"\"\n    return x % 3 == 0",
        "solution_func": "def g(a=54321):\n    return a",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, a='racecar') -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return x == x[::-1]\ndef g(a='racecar'):\n    return a\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 152,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, a='racecar') -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return x == x[::-1]",
        "solution_func": "def g(a='racecar'):\n    return a",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: int, a=56789) -> bool:\n    \"\"\"Check if a number is a prime number\"\"\"\n    if x < 2:\n        return False\n    for i in range(2, int(x ** 0.5) + 1):\n        if x % i == 0:\n            return False\n    return True\ndef g(a=56789):\n    return a\nassert f(g())\n",
        "emb": null,
        "idx_generation": 152,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=56789) -> bool:\n    \"\"\"Check if a number is a prime number\"\"\"\n    if x < 2:\n        return False\n    for i in range(2, int(x ** 0.5) + 1):\n        if x % i == 0:\n            return False\n    return True",
        "solution_func": "def g(a=56789):\n    return a",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if a string contains exactly n vowels.\nSolution should be a string with n vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count == n\n\ndef g(n=5):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join(vowels[:n])\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 152,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if a string contains exactly n vowels.\nSolution should be a string with n vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count == n",
        "solution_func": "def g(n=5):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join(vowels[:n])",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.datetime, year=2022) -> bool:\n    \"\"\"Check if a given date is in the future and falls within the specified year.\"\"\"\n    return date > datetime.datetime.now() and date.year == year\n\ndef g(year=2022):\n    date = datetime.datetime(year, 12, 31)\n    return date\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 153,
        "target_skills": null,
        "problem_func": "from typing import*\nimport datetime\n\ndef f(date: datetime.datetime, year=2022) -> bool:\n    \"\"\"Check if a given date is in the future and falls within the specified year.\"\"\"\n    return date > datetime.datetime.now() and date.year == year",
        "solution_func": "def g(year=2022):\n    date = datetime.datetime(year, 12, 31)\n    return date",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: List[int], length=5) -> bool:\n    \"\"\"Check if the list contains a consecutive subsequence of a specified length.\"\"\"\n    for i in range(len(lst) - length + 1):\n        if lst[i:i+length] == list(range(lst[i], lst[i]+length)):\n            return True\n    return False\n\ndef g(length=5):\n    lst = random.sample(range(10, 100), 10)\n    return lst\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 153,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(lst: List[int], length=5) -> bool:\n    \"\"\"Check if the list contains a consecutive subsequence of a specified length.\"\"\"\n    for i in range(len(lst) - length + 1):\n        if lst[i:i+length] == list(range(lst[i], lst[i]+length)):\n            return True\n    return False",
        "solution_func": "def g(length=5):\n    lst = random.sample(range(10, 100), 10)\n    return lst",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(string: str, substring='python') -> bool:\n    \"\"\"Check if a given string contains the specified substring.\"\"\"\n    return substring in string\n\ndef g(substring='python'):\n    string = \"I love programming in Python!\"\n    return string\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 153,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring='python') -> bool:\n    \"\"\"Check if a given string contains the specified substring.\"\"\"\n    return substring in string",
        "solution_func": "def g(substring='python'):\n    string = \"I love programming in Python!\"\n    return string",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=15482, b=23223, lower_bound=5) -> bool:\n    \"\"\"Check if n is a factor of both a and b, and n is greater than or equal to lower_bound.\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a=15482, b=23223, lower_bound=5):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 153,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=15482, b=23223, lower_bound=5) -> bool:\n    \"\"\"Check if n is a factor of both a and b, and n is greater than or equal to lower_bound.\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)",
        "solution_func": "def g(a=15482, b=23223, lower_bound=5):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=15482, b=23223, lower_bound=5) -> bool:\n    \"\"\"Find the largest common divisor of a and b, and check if it is divisible by n and greater than or equal to lower_bound.\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a=15482, b=23223, lower_bound=5):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 153,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=15482, b=23223, lower_bound=5) -> bool:\n    \"\"\"Find the largest common divisor of a and b, and check if it is divisible by n and greater than or equal to lower_bound.\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)",
        "solution_func": "def g(a=15482, b=23223, lower_bound=5):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=15482, b=23223, lower_bound=5) -> bool:\n    \"\"\"Check if n is a divisor of both a and b, and n is greater than or equal to lower_bound.\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a=15482, b=23223, lower_bound=5):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 153,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=15482, b=23223, lower_bound=5) -> bool:\n    \"\"\"Check if n is a divisor of both a and b, and n is greater than or equal to lower_bound.\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)",
        "solution_func": "def g(a=15482, b=23223, lower_bound=5):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that add up to the target value.\"\"\"\n    return any((numbers[i] + numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target=20):\n    numbers = [5, 15, 2, 10]\n    return numbers\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 153,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that add up to the target value.\"\"\"\n    return any((numbers[i] + numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))",
        "solution_func": "def g(target=20):\n    numbers = [5, 15, 2, 10]\n    return numbers",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, year_len=4) -> bool:\n    \"\"\"Find n such that the probability of three people having the same birthday in a group of n is near 1/2.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len=4):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n    return best[1]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 153,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(n: int, year_len=4) -> bool:\n    \"\"\"Find n such that the probability of three people having the same birthday in a group of n is near 1/2.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len",
        "solution_func": "def g(year_len=4):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n    return best[1]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, s1='kuc', s2='qu', count1=63, count2=58) -> bool:\n    \"\"\"Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and starts and ends with\nthe same 5 characters\"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[:5] == s[-5:])\ndef g(s1='kuc', s2='qu', count1=63, count2=58):\n    if s1 == s2:\n        ans = (s1 + '?') * count1\n    elif s1.count(s2):\n        ans = (s1 + '?') * count1\n        ans += (s2 + '?') * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + '?') * count2\n        ans += (s1 + '?') * (count1 - ans.count(s1))\n    return '?' * 5 + ans + '?' * 5\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 153,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, s1='kuc', s2='qu', count1=63, count2=58) -> bool:\n    \"\"\"Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and starts and ends with\nthe same 5 characters\"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[:5] == s[-5:])",
        "solution_func": "def g(s1='kuc', s2='qu', count1=63, count2=58):\n    if s1 == s2:\n        ans = (s1 + '?') * count1\n    elif s1.count(s2):\n        ans = (s1 + '?') * count1\n        ans += (s2 + '?') * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + '?') * count2\n        ans += (s1 + '?') * (count1 - ans.count(s1))\n    return '?' * 5 + ans + '?' * 5",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a combination of numbers that sum up to the target_sum\"\"\"\n    return any(sum(combination) == target_sum for r in range(len(numbers) + 1) for combination in combinations(numbers, r))\ndef g(target_sum=100):\n    numbers = random.sample(range(1, 101), 10)\n    return numbers\nassert f(g())\n",
        "emb": null,
        "idx_generation": 153,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a combination of numbers that sum up to the target_sum\"\"\"\n    return any(sum(combination) == target_sum for r in range(len(numbers) + 1) for combination in combinations(numbers, r))",
        "solution_func": "def g(target_sum=100):\n    numbers = random.sample(range(1, 101), 10)\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], a=0, b=100, count=10) -> bool:\n    \"\"\"Find a list of count or more different numbers each between a and b that are prime\"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    assert all((is_prime(n) and a <= n <= b for n in nums))\n    return len(set(nums)) >= count\ndef g(a=0, b=100, count=10):\n    return [n for n in range(a, b + 1) if is_prime(n)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 154,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], a=0, b=100, count=10) -> bool:\n    \"\"\"Find a list of count or more different numbers each between a and b that are prime\"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    assert all((is_prime(n) and a <= n <= b for n in nums))\n    return len(set(nums)) >= count",
        "solution_func": "def g(a=0, b=100, count=10):\n    return [n for n in range(a, b + 1) if is_prime(n)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(start: int, k=5, lower=-100000, seq=[1, 2, 3, 4, 5, -1, -2, -3, -4, -5]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is minimal, possibly looping around\"\"\"\n    def sum_seq(start):\n        return sum(seq[i] for i in range(start, start + k))\n    return sum_seq(start) <= lower\ndef g(k=5, lower=-100000, seq=[1, 2, 3, 4, 5, -1, -2, -3, -4, -5]):\n    return min(range(-len(seq), len(seq) - k + 1), key=sum_seq)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 154,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(start: int, k=5, lower=-100000, seq=[1, 2, 3, 4, 5, -1, -2, -3, -4, -5]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is minimal, possibly looping around\"\"\"\n    def sum_seq(start):\n        return sum(seq[i] for i in range(start, start + k))\n    return sum_seq(start) <= lower",
        "solution_func": "def g(k=5, lower=-100000, seq=[1, 2, 3, 4, 5, -1, -2, -3, -4, -5]):\n    return min(range(-len(seq), len(seq) - k + 1), key=sum_seq)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, target='python', length=3) -> bool:\n    \"\"\"Find a substring of the given length centered within the target string.\"\"\"\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s\n\ndef g(target='python', length=3):\n    return target[(len(target) - length) // 2 + 1:(len(target) + length) // 2 + 1]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 154,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='python', length=3) -> bool:\n    \"\"\"Find a substring of the given length centered within the target string.\"\"\"\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s",
        "solution_func": "def g(target='python', length=3):\n    return target[(len(target) - length) // 2 + 1:(len(target) + length) // 2 + 1]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array that sums up to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 154,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array that sums up to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if the substring exists in the given string s\"\"\"\n    return substring in s\n\ndef g(substring='abc'):\n    return \"xyzabc\"\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 154,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if the substring exists in the given string s\"\"\"\n    return substring in s",
        "solution_func": "def g(substring='abc'):\n    return \"xyzabc\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=5) -> bool:\n    \"\"\"Check if there exists three numbers in the array that sum up to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(target=5):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 154,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=5) -> bool:\n    \"\"\"Check if there exists three numbers in the array that sum up to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=5):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, n=5) -> bool:\n    \"\"\"Check if a string is a palindrome of length n\"\"\"\n    return string == string[::-1] and len(string) == n\ndef g(n=5):\n    return 'level'\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 154,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, n=5) -> bool:\n    \"\"\"Check if a string is a palindrome of length n\"\"\"\n    return string == string[::-1] and len(string) == n",
        "solution_func": "def g(n=5):\n    return 'level'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(string: str, n=6) -> bool:\n    \"\"\"Check if a string is a palindrome of length n\"\"\"\n    return string == string[::-1] and len(string) == n\ndef g(n=6):\n    return 'radar'\nassert f(g())\n",
        "emb": null,
        "idx_generation": 154,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, n=6) -> bool:\n    \"\"\"Check if a string is a palindrome of length n\"\"\"\n    return string == string[::-1] and len(string) == n",
        "solution_func": "def g(n=6):\n    return 'radar'",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, n=7) -> bool:\n    \"\"\"Check if a string is a palindrome of length n\"\"\"\n    return string == string[::-1] and len(string) == n\ndef g(n=7):\n    return 'deified'\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 154,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, n=7) -> bool:\n    \"\"\"Check if a string is a palindrome of length n\"\"\"\n    return string == string[::-1] and len(string) == n",
        "solution_func": "def g(n=7):\n    return 'deified'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sums up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 154,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sums up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g():\n    nums = [1, 2, 3, 4, 5]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target number.\"\"\"\n    return any(target - num in nums for num in nums)\ndef g(nums: List[int], target: int):\n    return nums\nassert f(g([1, 2, 3, 4, 5], 7))\n",
        "emb": null,
        "idx_generation": 155,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target number.\"\"\"\n    return any(target - num in nums for num in nums)",
        "solution_func": "def g(nums: List[int], target: int):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string contains only uppercase letters.\"\"\"\n    return s.isupper()\ndef g():\n    return \"HELLO\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 155,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string contains only uppercase letters.\"\"\"\n    return s.isupper()",
        "solution_func": "def g():\n    return \"HELLO\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there is a number in the list that is greater than the target number.\"\"\"\n    return any(num > target for num in nums)\ndef g(nums: List[int], target: int):\n    return nums\nassert f(g([1, 2, 3, 4, 5], 3))\n",
        "emb": null,
        "idx_generation": 155,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there is a number in the list that is greater than the target number.\"\"\"\n    return any(num > target for num in nums)",
        "solution_func": "def g(nums: List[int], target: int):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums) + 1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [i for i in range(1, target + 1)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 155,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums) + 1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [i for i in range(1, target + 1)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], n=3) -> bool:\n    \"\"\"Check if there exists a subsequence in the list with exactly n distinct numbers.\"\"\"\n    subsequences = []\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums) + 1):\n            subsequence = nums[i:j]\n            if len(set(subsequence)) == n:\n                subsequences.append(subsequence)\n    return len(subsequences) > 0\n\ndef g(n=3):\n    return [i for i in range(1, n + 1)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 155,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], n=3) -> bool:\n    \"\"\"Check if there exists a subsequence in the list with exactly n distinct numbers.\"\"\"\n    subsequences = []\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums) + 1):\n            subsequence = nums[i:j]\n            if len(set(subsequence)) == n:\n                subsequences.append(subsequence)\n    return len(subsequences) > 0",
        "solution_func": "def g(n=3):\n    return [i for i in range(1, n + 1)]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=4) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose product is divisible by k.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums) + 1):\n            subarray = nums[i:j]\n            product = 1\n            for num in subarray:\n                product *= num\n            if product % k == 0:\n                return True\n    return False\n\ndef g(k=4):\n    return [i for i in range(1, k + 1)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 155,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], k=4) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose product is divisible by k.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums) + 1):\n            subarray = nums[i:j]\n            product = 1\n            for num in subarray:\n                product *= num\n            if product % k == 0:\n                return True\n    return False",
        "solution_func": "def g(k=4):\n    return [i for i in range(1, k + 1)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given array is a palindrome.\"\"\"\n    return arr == arr[::-1]\ndef g():\n    import random\n    return random.choices(range(10), k=5)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 155,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given array is a palindrome.\"\"\"\n    return arr == arr[::-1]",
        "solution_func": "def g():\n    import random\n    return random.choices(range(10), k=5)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\nfrom typing import List\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n    n = len(matrix)\n    target_sum = n * (n * n + 1) // 2\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n - 1 - i] for i in range(n))\n    return all(sum == target_sum for sum in row_sums + col_sums + [diagonal_sum1, diagonal_sum2])\ndef g():\n    import random\n    n = 3\n    matrix = [[0] * n for _ in range(n)]\n    numbers = list(range(1, n * n + 1))\n    random.shuffle(numbers)\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = numbers.pop()\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 155,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\nfrom typing import List\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n    n = len(matrix)\n    target_sum = n * (n * n + 1) // 2\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n - 1 - i] for i in range(n))\n    return all(sum == target_sum for sum in row_sums + col_sums + [diagonal_sum1, diagonal_sum2])",
        "solution_func": "def g():\n    import random\n    n = 3\n    matrix = [[0] * n for _ in range(n)]\n    numbers = list(range(1, n * n + 1))\n    random.shuffle(numbers)\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = numbers.pop()\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\nfrom typing import List\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given array is a mountain array.\"\"\"\n    n = len(arr)\n    if n < 3:\n        return False\n    i = 0\n    while i < n - 1 and arr[i] < arr[i + 1]:\n        i += 1\n    if i == 0 or i == n - 1:\n        return False\n    while i < n - 1 and arr[i] > arr[i + 1]:\n        i += 1\n    return i == n - 1\ndef g():\n    import random\n    n = random.randint(5, 10)\n    arr = random.sample(range(1, 11), n)\n    return arr\nassert f(g())\n",
        "emb": null,
        "idx_generation": 155,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\nfrom typing import List\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given array is a mountain array.\"\"\"\n    n = len(arr)\n    if n < 3:\n        return False\n    i = 0\n    while i < n - 1 and arr[i] < arr[i + 1]:\n        i += 1\n    if i == 0 or i == n - 1:\n        return False\n    while i < n - 1 and arr[i] > arr[i + 1]:\n        i += 1\n    return i == n - 1",
        "solution_func": "def g():\n    import random\n    n = random.randint(5, 10)\n    arr = random.sample(range(1, 11), n)\n    return arr",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: Tuple[int, int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies inside a rectangle.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return (a <= x <= a+c) and (b <= y <= b+c)\ndef g(a=1, b=2, c=10):\n    return (a+c//2, b+c//2)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 155,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(e: Tuple[int, int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies inside a rectangle.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return (a <= x <= a+c) and (b <= y <= b+c)",
        "solution_func": "def g(a=1, b=2, c=10):\n    return (a+c//2, b+c//2)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nimport itertools\nfrom typing import*\n\ndef f(num_list: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k elements in the list whose product is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(math.prod(comb) == target for comb in combinations(num_list, k))\n\ndef g(k: int = 3):\n    return [2, 3, 4, 5, 6, 7]\n\nassert f(g(), 240)\n",
        "emb": null,
        "idx_generation": 156,
        "target_skills": null,
        "problem_func": "import math\nimport itertools\nfrom typing import*\n\ndef f(num_list: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k elements in the list whose product is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(math.prod(comb) == target for comb in combinations(num_list, k))",
        "solution_func": "def g(k: int = 3):\n    return [2, 3, 4, 5, 6, 7]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(num_list: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k elements in the list whose difference is equal to the target number.\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if abs(num_list[i] - num_list[j]) == target:\n                return True\n    return False\n\ndef g(k: int = 3):\n    return [5, 10, 15, 20, 25, 30]\n\nassert f(g(), 10)\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 156,
        "target_skills": null,
        "problem_func": "from typing import*\n\ndef f(num_list: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k elements in the list whose difference is equal to the target number.\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if abs(num_list[i] - num_list[j]) == target:\n                return True\n    return False",
        "solution_func": "def g(k: int = 3):\n    return [5, 10, 15, 20, 25, 30]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(num_list: List[int], target: int, k: int = 2) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k elements in the list whose sum is equal to the target number.\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target:\n                return True\n    return False\n\ndef g(k: int = 2):\n    return [3, 5, 7, 11, 13, 17]\n\nassert f(g(), 20)\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 156,
        "target_skills": null,
        "problem_func": "from typing import*\n\ndef f(num_list: List[int], target: int, k: int = 2) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k elements in the list whose sum is equal to the target number.\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target:\n                return True\n    return False",
        "solution_func": "def g(k: int = 2):\n    return [3, 5, 7, 11, 13, 17]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Check if all the substrings are present in the given string in any order\"\"\"\n    return all((sub in s for sub in substrings))\ndef g(substrings=['apple', 'banana', 'cherry']):\n    return ''.join(substrings)\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 156,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Check if all the substrings are present in the given string in any order\"\"\"\n    return all((sub in s for sub in substrings))",
        "solution_func": "def g(substrings=['apple', 'banana', 'cherry']):\n    return ''.join(substrings)",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=2) -> bool:\n    \"\"\"Check if the sum of each row in the matrix is equal to a given number\"\"\"\n    return all((sum(row) == n) for row in matrix)\ndef g(n=2):\n    return [[1, 2], [3, -1]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 156,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=2) -> bool:\n    \"\"\"Check if the sum of each row in the matrix is equal to a given number\"\"\"\n    return all((sum(row) == n) for row in matrix)",
        "solution_func": "def g(n=2):\n    return [[1, 2], [3, -1]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=20) -> bool:\n    \"\"\"Check if any three numbers in the list sums up to the target sum\"\"\"\n    return any((numbers[i] + numbers[j] + numbers[k] == target_sum) for i in range(len(numbers)) for j in range(i+1, len(numbers)) for k in range(j+1, len(numbers)))\ndef g(target_sum=20):\n    numbers = [10, 5, 15, 7, 3, 8]\n    return numbers\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 156,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target_sum=20) -> bool:\n    \"\"\"Check if any three numbers in the list sums up to the target sum\"\"\"\n    return any((numbers[i] + numbers[j] + numbers[k] == target_sum) for i in range(len(numbers)) for j in range(i+1, len(numbers)) for k in range(j+1, len(numbers)))",
        "solution_func": "def g(target_sum=20):\n    numbers = [10, 5, 15, 7, 3, 8]\n    return numbers",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s='cATch', t='cAtch') -> bool:\n    \"\"\"Check if s is a substring of t, ignoring case.\"\"\"\n    return s.lower() in t.lower()\n    \ndef g(s='cATch', t='cAtch'):\n    return s.lower()\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 156,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, s='cATch', t='cAtch') -> bool:\n    \"\"\"Check if s is a substring of t, ignoring case.\"\"\"\n    return s.lower() in t.lower()",
        "solution_func": "def g(s='cATch', t='cAtch'):\n    return s.lower()",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the list whose elements are in ascending order.\"\"\"\n    n = len(arr)\n    for i in range(n - k + 1):\n        subarray = arr[i:i+k]\n        if subarray == sorted(subarray):\n            return True\n    return False\n\ndef g(k=3):\n    return [i for i in range(10)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 156,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the list whose elements are in ascending order.\"\"\"\n    n = len(arr)\n    for i in range(n - k + 1):\n        subarray = arr[i:i+k]\n        if subarray == sorted(subarray):\n            return True\n    return False",
        "solution_func": "def g(k=3):\n    return [i for i in range(10)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s='H3ll0W0rld', t='h3ll0w0rld') -> bool:\n    \"\"\"Check if s and t have the same characters at the same positions up to the first n characters, ignoring case.\"\"\"\n    return s.lower()[:n] == t.lower()[:n]\n\ndef g(s='H3ll0W0rld', t='h3ll0w0rld'):\n    return len(s)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 156,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, s='H3ll0W0rld', t='h3ll0w0rld') -> bool:\n    \"\"\"Check if s and t have the same characters at the same positions up to the first n characters, ignoring case.\"\"\"\n    return s.lower()[:n] == t.lower()[:n]",
        "solution_func": "def g(s='H3ll0W0rld', t='h3ll0w0rld'):\n    return len(s)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=6, c=9) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])\ndef g(a=3, b=6, c=9):\n    return a + sum([b * i for i in range(c)])\nassert f(g())\n",
        "emb": null,
        "idx_generation": 156,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=3, b=6, c=9) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])",
        "solution_func": "def g(a=3, b=6, c=9):\n    return a + sum([b * i for i in range(c)])",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import *\nimport random\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there are exactly k numbers that sum up to the target value.\"\"\"\n    return sum(nums) == target\n\ndef g(target=20):\n    return random.sample(range(1, 10), 4)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 157,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import *\nimport random\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there are exactly k numbers that sum up to the target value.\"\"\"\n    return sum(nums) == target",
        "solution_func": "def g(target=20):\n    return random.sample(range(1, 10), 4)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(x: int, a=-9) -> bool:\n    \"\"\"Check if the absolute value of x is equal to a\"\"\"\n    return abs(x) == a\n\ndef g(a=-9):\n    return -a\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 157,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(x: int, a=-9) -> bool:\n    \"\"\"Check if the absolute value of x is equal to a\"\"\"\n    return abs(x) == a",
        "solution_func": "def g(a=-9):\n    return -a",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(inds: List[int], s='kibozekiboze', target='') -> bool:\n    \"\"\"Check if the three slice indices in the given list give the specific target in string s\"\"\"\n    (i, j, k) = inds\n    return s[i:j:k] == target\n\ndef g(s='kibozekiboze', target=''):\n    for (i, j, k) in itertools.product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 157,
        "target_skills": null,
        "problem_func": "from typing import*\nimport itertools\n\ndef f(inds: List[int], s='kibozekiboze', target='') -> bool:\n    \"\"\"Check if the three slice indices in the given list give the specific target in string s\"\"\"\n    (i, j, k) = inds\n    return s[i:j:k] == target",
        "solution_func": "def g(s='kibozekiboze', target=''):\n    for (i, j, k) in itertools.product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100, operations=['+', '-']) -> bool:\n    \"\"\"Given a list of numbers and a target value, determine if it is possible to obtain the target value by combining the numbers\n    using addition and subtraction operations.\n    Each number in the list can be used only once.\"\"\"\n    def helper(numbers, target):\n        if len(numbers) == 0:\n            return target == 0\n        for operation in operations:\n            if operation == '+':\n                if helper(numbers[1:], target - numbers[0]):\n                    return True\n            elif operation == '-':\n                if helper(numbers[1:], target + numbers[0]):\n                    return True\n        return False\n\n    return helper(numbers, target)\n\ndef g(numbers=[50, 25, 10, 5]):\n    return numbers\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 157,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=100, operations=['+', '-']) -> bool:\n    \"\"\"Given a list of numbers and a target value, determine if it is possible to obtain the target value by combining the numbers\n    using addition and subtraction operations.\n    Each number in the list can be used only once.\"\"\"\n    def helper(numbers, target):\n        if len(numbers) == 0:\n            return target == 0\n        for operation in operations:\n            if operation == '+':\n                if helper(numbers[1:], target - numbers[0]):\n                    return True\n            elif operation == '-':\n                if helper(numbers[1:], target + numbers[0]):\n                    return True\n        return False\n\n    return helper(numbers, target)",
        "solution_func": "def g(numbers=[50, 25, 10, 5]):\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grid: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down or right in the grid.\"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n\n    def helper(i, j):\n        if i == rows - 1 and j == cols - 1:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if grid[i][j] == 0:\n            return False\n        return helper(i+1, j) or helper(i, j+1)\n\n    return helper(0, 0)\n\ndef g(grid=[[1, 0, 0], [1, 1, 0], [0, 1, 1]]):\n    return grid\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 157,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(grid: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down or right in the grid.\"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n\n    def helper(i, j):\n        if i == rows - 1 and j == cols - 1:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if grid[i][j] == 0:\n            return False\n        return helper(i+1, j) or helper(i, j+1)\n\n    return helper(0, 0)",
        "solution_func": "def g(grid=[[1, 0, 0], [1, 1, 0], [0, 1, 1]]):\n    return grid",
        "map_ix": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if it is possible to obtain the target value by rearranging the numbers\n    and performing addition and subtraction operations.\n    Each number in the list can be used only once.\"\"\"\n    def helper(numbers, target):\n        if len(numbers) == 0:\n            return target == 0\n        for i, num in enumerate(numbers):\n            remaining = numbers[:i] + numbers[i+1:]\n            if helper(remaining, target - num):\n                return True\n            if helper(remaining, target + num):\n                return True\n        return False\n\n    return helper(numbers, target)\n\ndef g(numbers=[1, 2, 3, 4]):\n    return numbers\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 157,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if it is possible to obtain the target value by rearranging the numbers\n    and performing addition and subtraction operations.\n    Each number in the list can be used only once.\"\"\"\n    def helper(numbers, target):\n        if len(numbers) == 0:\n            return target == 0\n        for i, num in enumerate(numbers):\n            remaining = numbers[:i] + numbers[i+1:]\n            if helper(remaining, target - num):\n                return True\n            if helper(remaining, target + num):\n                return True\n        return False\n\n    return helper(numbers, target)",
        "solution_func": "def g(numbers=[1, 2, 3, 4]):\n    return numbers",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], target=34) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same and equal to the target value.\"\"\"\n    n = len(matrix)\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2])\ndef g(target=34):\n    from itertools import permutations\n    possible_nums = list(range(1, 17))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+4] for i in range(0, 16, 4)]\n        if f(matrix, target):\n            return matrix\n    assert False, f\"No magic square found for target={target}\"\nassert f(g())\n",
        "emb": null,
        "idx_generation": 157,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], target=34) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same and equal to the target value.\"\"\"\n    n = len(matrix)\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2])",
        "solution_func": "def g(target=34):\n    from itertools import permutations\n    possible_nums = list(range(1, 17))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+4] for i in range(0, 16, 4)]\n        if f(matrix, target):\n            return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], n=4) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == rows[0] for sum_val in rows + cols + [diag1, diag2])\ndef g(n=4):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix\n    assert False, f\"No magic square found for n={n}\"\nassert f(g())\n",
        "emb": null,
        "idx_generation": 157,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], n=4) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == rows[0] for sum_val in rows + cols + [diag1, diag2])",
        "solution_func": "def g(n=4):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], target=45) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same and equal to the target value.\"\"\"\n    n = len(matrix)\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2])\ndef g(target=45):\n    from itertools import permutations\n    possible_nums = list(range(1, 26))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+5] for i in range(0, 25, 5)]\n        if f(matrix, target):\n            return matrix\n    assert False, f\"No magic square found for target={target}\"\nassert f(g())\n",
        "emb": null,
        "idx_generation": 157,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], target=45) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same and equal to the target value.\"\"\"\n    n = len(matrix)\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2])",
        "solution_func": "def g(target=45):\n    from itertools import permutations\n    possible_nums = list(range(1, 26))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+5] for i in range(0, 25, 5)]\n        if f(matrix, target):\n            return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of consecutive numbers in the list such that their absolute difference is greater than 10.\"\"\"\n    for i in range(len(nums)-1):\n        if abs(nums[i] - nums[i+1]) > 10:\n            return True\n    return False\n\ndef g():\n    return [12, 4, 23, -8, 15, 2, -11]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 157,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of consecutive numbers in the list such that their absolute difference is greater than 10.\"\"\"\n    for i in range(len(nums)-1):\n        if abs(nums[i] - nums[i+1]) > 10:\n            return True\n    return False",
        "solution_func": "def g():\n    return [12, 4, 23, -8, 15, 2, -11]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is a magic square.\n    A magic square is a square matrix where the sums of each row, each column, and both diagonals are the same.\"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for col in range(n):\n        col_sum = sum(matrix[i][col] for i in range(n))\n        if col_sum != target_sum:\n            return False\n    \n    # Check main diagonal\n    diagonal_sum = sum(matrix[i][i] for i in range(n))\n    if diagonal_sum != target_sum:\n        return False\n    \n    # Check secondary diagonal\n    secondary_diagonal_sum = sum(matrix[i][n-i-1] for i in range(n))\n    if secondary_diagonal_sum != target_sum:\n        return False\n    \n    return True\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 158,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is a magic square.\n    A magic square is a square matrix where the sums of each row, each column, and both diagonals are the same.\"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for col in range(n):\n        col_sum = sum(matrix[i][col] for i in range(n))\n        if col_sum != target_sum:\n            return False\n    \n    # Check main diagonal\n    diagonal_sum = sum(matrix[i][i] for i in range(n))\n    if diagonal_sum != target_sum:\n        return False\n    \n    # Check secondary diagonal\n    secondary_diagonal_sum = sum(matrix[i][n-i-1] for i in range(n))\n    if secondary_diagonal_sum != target_sum:\n        return False\n    \n    return True",
        "solution_func": "def g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that add up to the target value.\"\"\"\n    complements = set()\n    for num in nums:\n        complement = target - num\n        if complement in complements:\n            return True\n        complements.add(num)\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 158,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that add up to the target value.\"\"\"\n    complements = set()\n    for num in nums:\n        complement = target - num\n        if complement in complements:\n            return True\n        complements.add(num)\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Check if all words in the list start with the given prefix.\"\"\"\n    return all(word.startswith(prefix) for word in words)\n\ndef g(prefix='pre'):\n    return ['prefix', 'preparation', 'pretend', 'present']\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 158,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Check if all words in the list start with the given prefix.\"\"\"\n    return all(word.startswith(prefix) for word in words)",
        "solution_func": "def g(prefix='pre'):\n    return ['prefix', 'preparation', 'pretend', 'present']",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Check if a target number can be found in a matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(matrix: List[List[int]], target=15):\n    for row in matrix:\n        if target in row:\n            return True\n    return False\nassert f(g())\n",
        "emb": null,
        "idx_generation": 158,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Check if a target number can be found in a matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(matrix: List[List[int]], target=15):\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10, 12, 14, 16, 18]) -> bool:\n    \"\"\"Check if n is divisible by all the numbers in the given list.\"\"\"\n    return all((n % i == 0 for i in nums))\ndef g(nums=[2, 4, 6, 8, 10, 12, 14, 16, 18]):\n    ans = 1\n    for i in nums:\n        (m, n) = (min(i, ans), max(i, ans))\n        while m > 0:\n            (m, n) = (n % m, m)\n        ans *= i // n\n    return ans\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 158,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10, 12, 14, 16, 18]) -> bool:\n    \"\"\"Check if n is divisible by all the numbers in the given list.\"\"\"\n    return all((n % i == 0 for i in nums))",
        "solution_func": "def g(nums=[2, 4, 6, 8, 10, 12, 14, 16, 18]):\n    ans = 1\n    for i in nums:\n        (m, n) = (min(i, ans), max(i, ans))\n        while m > 0:\n            (m, n) = (n % m, m)\n        ans *= i // n\n    return ans",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if a given substring exists in a given string.\"\"\"\n    return substr in s\ndef g(s: str, substr='python'):\n    return substr in s\nassert f(g())\n",
        "emb": null,
        "idx_generation": 158,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if a given substring exists in a given string.\"\"\"\n    return substr in s",
        "solution_func": "def g(s: str, substr='python'):\n    return substr in s",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n=0) -> bool:\n    \"\"\"Check if there exists a pair of consecutive numbers in the list such that their sum is equal to n.\"\"\"\n    for i in range(len(nums)-1):\n        if nums[i] + nums[i+1] == n:\n            return True\n    return False\n\ndef g(n=0):\n    return [2, 3, 5, 7, 11, 13, 17]\n\nassert f(g(), 18)\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 158,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n=0) -> bool:\n    \"\"\"Check if there exists a pair of consecutive numbers in the list such that their sum is equal to n.\"\"\"\n    for i in range(len(nums)-1):\n        if nums[i] + nums[i+1] == n:\n            return True\n    return False",
        "solution_func": "def g(n=0):\n    return [2, 3, 5, 7, 11, 13, 17]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list such that their difference is equal to the target.\"\"\"\n    return any((nums[i] - nums[j] == target) for i in range(len(nums)) for j in range(len(nums)))\n\ndef g(target=0):\n    return [4, 8, 12, 16, 20]\n\nassert f(g(), 4)\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 158,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list such that their difference is equal to the target.\"\"\"\n    return any((nums[i] - nums[j] == target) for i in range(len(nums)) for j in range(len(nums)))",
        "solution_func": "def g(target=0):\n    return [4, 8, 12, 16, 20]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n=0) -> bool:\n    \"\"\"Check if there exists a pair of consecutive numbers in the list such that their product is equal to n.\"\"\"\n    for i in range(len(nums)-1):\n        if nums[i] * nums[i+1] == n:\n            return True\n    return False\n\ndef g(n=0):\n    return [2, 3, 5, 7, 11, 13, 17]\n\nassert f(g(), 35)\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 158,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n=0) -> bool:\n    \"\"\"Check if there exists a pair of consecutive numbers in the list such that their product is equal to n.\"\"\"\n    for i in range(len(nums)-1):\n        if nums[i] * nums[i+1] == n:\n            return True\n    return False",
        "solution_func": "def g(n=0):\n    return [2, 3, 5, 7, 11, 13, 17]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(nums: List[int], n: int) -> bool:\n    \"\"\"Check if any combination of n numbers in the list sums up to the target.\"\"\"\n    for r in range(1, len(nums) + 1):\n        for combination in combinations(nums, r):\n            if sum(combination) == n:\n                return True\n    return False\n\ndef g(n: int):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g(10))\n",
        "emb": null,
        "idx_generation": 158,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(nums: List[int], n: int) -> bool:\n    \"\"\"Check if any combination of n numbers in the list sums up to the target.\"\"\"\n    for r in range(1, len(nums) + 1):\n        for combination in combinations(nums, r):\n            if sum(combination) == n:\n                return True\n    return False",
        "solution_func": "def g(n: int):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], n=3, target=15, row_idx=1) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2]) and rows[row_idx] == target\ndef g(n=3, target=15):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix\n    assert False, f\"No magic square found for n={n}\"\nassert f(g(), row_idx=2)\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 159,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], n=3, target=15, row_idx=1) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2]) and rows[row_idx] == target",
        "solution_func": "def g(n=3, target=15):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix",
        "map_ix": [
            1,
            1,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], n=3, target=15) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2]) and len(rows) == n\ndef g(n=3, target=15):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix\n    assert False, f\"No magic square found for n={n}\"\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 159,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], n=3, target=15) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2]) and len(rows) == n",
        "solution_func": "def g(n=3, target=15):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix",
        "map_ix": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], n=3, target=15) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2]) and target % 2 != 0\ndef g(n=3, target=15):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix\n    assert False, f\"No magic square found for n={n}\"\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            0.0,
            1.0,
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 159,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], n=3, target=15) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2]) and target % 2 != 0",
        "solution_func": "def g(n=3, target=15):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix",
        "map_ix": [
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=42) -> bool:\n    \"\"\"Check if the sum of any row or column in the matrix is equal to the target value\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(cols):\n        if sum(matrix[k][j] for k in range(rows)) == target:\n            return True\n    return False\n\ndef g(target=42):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 159,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=42) -> bool:\n    \"\"\"Check if the sum of any row or column in the matrix is equal to the target value\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(cols):\n        if sum(matrix[k][j] for k in range(rows)) == target:\n            return True\n    return False",
        "solution_func": "def g(target=42):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target_sum\"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        complement = target_sum - num\n        if complement in nums_set:\n            return True\n    return False\n\ndef g(target_sum=100):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 159,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target_sum\"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        complement = target_sum - num\n        if complement in nums_set:\n            return True\n    return False",
        "solution_func": "def g(target_sum=100):\n    return [n for n in range(1, target_sum+1)]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, target=100, epsilon=0.01) -> bool:\n    \"\"\"Find an approximation of the square root of n such that the absolute difference between the square of the approximation and the target is less than epsilon\"\"\"\n    approx = math.isqrt(n) + 1\n    while abs((approx ** 2) - target) > epsilon:\n        approx -= 1\n    return approx\n\ndef g(target=100, epsilon=0.01):\n    return target\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 159,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, target=100, epsilon=0.01) -> bool:\n    \"\"\"Find an approximation of the square root of n such that the absolute difference between the square of the approximation and the target is less than epsilon\"\"\"\n    approx = math.isqrt(n) + 1\n    while abs((approx ** 2) - target) > epsilon:\n        approx -= 1\n    return approx",
        "solution_func": "def g(target=100, epsilon=0.01):\n    return target",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=100, n=3) -> bool:\n    \"\"\"Check if there exists a combination of n numbers in the list that sum up to the target\"\"\"\n    from itertools import combinations\n    for combo in combinations(arr, n):\n        if sum(combo) == target:\n            return True\n    return False\n\ndef g(target=100, n=3):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 159,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=100, n=3) -> bool:\n    \"\"\"Check if there exists a combination of n numbers in the list that sum up to the target\"\"\"\n    from itertools import combinations\n    for combo in combinations(arr, n):\n        if sum(combo) == target:\n            return True\n    return False",
        "solution_func": "def g(target=100, n=3):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc', count=3) -> bool:\n    \"\"\"Check if the given string contains 'count' number of occurrences of the substring\"\"\"\n    return s.count(substring) == count\n\ndef g(substring='abc', count=3):\n    return substring * count + 'def' * (count - 1)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 159,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring='abc', count=3) -> bool:\n    \"\"\"Check if the given string contains 'count' number of occurrences of the substring\"\"\"\n    return s.count(substring) == count",
        "solution_func": "def g(substring='abc', count=3):\n    return substring * count + 'def' * (count - 1)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], row_sum=[15, 15, 15], col_sum=[15, 15, 15]) -> bool:\n    \"\"\"Check if the given matrix has the specified sum for each row and column\"\"\"\n    for i in range(len(matrix)):\n        if sum(matrix[i]) != row_sum[i]:\n            return False\n    for j in range(len(matrix[0])):\n        if sum(matrix[i][j] for i in range(len(matrix))) != col_sum[j]:\n            return False\n    return True\n\ndef g(row_sum=[15, 15, 15], col_sum=[15, 15, 15]):\n    return [[5, 5, 5], [5, 5, 5], [5, 5, 5]]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 159,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], row_sum=[15, 15, 15], col_sum=[15, 15, 15]) -> bool:\n    \"\"\"Check if the given matrix has the specified sum for each row and column\"\"\"\n    for i in range(len(matrix)):\n        if sum(matrix[i]) != row_sum[i]:\n            return False\n    for j in range(len(matrix[0])):\n        if sum(matrix[i][j] for i in range(len(matrix))) != col_sum[j]:\n            return False\n    return True",
        "solution_func": "def g(row_sum=[15, 15, 15], col_sum=[15, 15, 15]):\n    return [[5, 5, 5], [5, 5, 5], [5, 5, 5]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if it is possible to obtain the target value by rearranging the numbers\n    and performing multiplication and division operations.\n    Each number in the list can be used only once.\"\"\"\n    def helper(numbers, target):\n        if len(numbers) == 0:\n            return target == 1\n        for i, num in enumerate(numbers):\n            remaining = numbers[:i] + numbers[i+1:]\n            if helper(remaining, target / num):\n                return True\n            if helper(remaining, target * num):\n                return True\n        return False\n\n    return helper(numbers, target)\n\ndef g(numbers=[2, 3, 4, 5]):\n    return numbers\n\nassert f(g())\n\n",
        "emb": null,
        "idx_generation": 159,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if it is possible to obtain the target value by rearranging the numbers\n    and performing multiplication and division operations.\n    Each number in the list can be used only once.\"\"\"\n    def helper(numbers, target):\n        if len(numbers) == 0:\n            return target == 1\n        for i, num in enumerate(numbers):\n            remaining = numbers[:i] + numbers[i+1:]\n            if helper(remaining, target / num):\n                return True\n            if helper(remaining, target * num):\n                return True\n        return False\n\n    return helper(numbers, target)",
        "solution_func": "def g(numbers=[2, 3, 4, 5]):\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(num_list: List[int], target: int, k: int = 4) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k+1 elements in the list whose sum is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(num_list, k+1))\ndef g(k: int = 4):\n    return [1, 2, 3, 4, 5, 6, 7]\nassert f(g(), 25)\n\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 160,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(num_list: List[int], target: int, k: int = 4) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k+1 elements in the list whose sum is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(num_list, k+1))",
        "solution_func": "def g(k: int = 4):\n    return [1, 2, 3, 4, 5, 6, 7]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(num_list: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k elements in the list whose sum is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(num_list, k))\ndef g(k: int = 3):\n    return [1, 2, 3, 4, 5, 6, 7]\nassert f(g(), 15)\n\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 160,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(num_list: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k elements in the list whose sum is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(num_list, k))",
        "solution_func": "def g(k: int = 3):\n    return [1, 2, 3, 4, 5, 6, 7]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(num_list: List[int], target: int, k: int = 2) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k+1 elements in the list whose sum is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(num_list, k+1))\ndef g(k: int = 2):\n    return [1, 2, 3, 4, 5, 6, 7]\nassert f(g(), 10)\n\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 160,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(num_list: List[int], target: int, k: int = 2) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k+1 elements in the list whose sum is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(num_list, k+1))",
        "solution_func": "def g(k: int = 2):\n    return [1, 2, 3, 4, 5, 6, 7]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=8) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k and contains even number of elements.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    count = 0\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        count += 1\n        if prefix_sum in remainders and count % 2 == 0:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=8):\n    return [i**2 for i in range(1, k+1)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 160,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=8) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k and contains even number of elements.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    count = 0\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        count += 1\n        if prefix_sum in remainders and count % 2 == 0:\n            return True\n        remainders.add(prefix_sum)\n    return False",
        "solution_func": "def g(k=8):\n    return [i**2 for i in range(1, k+1)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=7) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k and the length is greater than 1.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    count = 0\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        count += 1\n        if prefix_sum in remainders and count > 1:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=7):\n    return [i**2 for i in range(1, k+1)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 160,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=7) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k and the length is greater than 1.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    count = 0\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        count += 1\n        if prefix_sum in remainders and count > 1:\n            return True\n        remainders.add(prefix_sum)\n    return False",
        "solution_func": "def g(k=7):\n    return [i**2 for i in range(1, k+1)]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=6) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k and contains odd number of elements.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    count = 0\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        count += 1\n        if prefix_sum in remainders and count % 2 != 0:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=6):\n    return [i**2 for i in range(1, k+1)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 160,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=6) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k and contains odd number of elements.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    count = 0\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        count += 1\n        if prefix_sum in remainders and count % 2 != 0:\n            return True\n        remainders.add(prefix_sum)\n    return False",
        "solution_func": "def g(k=6):\n    return [i**2 for i in range(1, k+1)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=14, b=50, c=47) -> bool:\n    \"\"\"Determine if n is divisible by the sum of the first c integers multiplied by b\"\"\"\n    return n % (sum([i for i in range(c+1)]) * b) == 0\ndef g(a=14, b=50, c=47):\n    return (sum([i for i in range(c+1)]) * b) + a\nassert f(g())\n\n",
        "emb": null,
        "idx_generation": 160,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=14, b=50, c=47) -> bool:\n    \"\"\"Determine if n is divisible by the sum of the first c integers multiplied by b\"\"\"\n    return n % (sum([i for i in range(c+1)]) * b) == 0",
        "solution_func": "def g(a=14, b=50, c=47):\n    return (sum([i for i in range(c+1)]) * b) + a",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sum up to the target\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=100):\n    nums = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return nums\nassert f(g())\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 160,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sum up to the target\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=100):\n    nums = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if the given list contains a subarray whose sum is equal to the target\"\"\"\n    n = len(arr)\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += arr[j]\n            if curr_sum == target:\n                return True\n    return False\ndef g(target=0):\n    arr = [3, 4, -7, 1, 3, 9, 2, -2]\n    return arr\nassert f(g())\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 160,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if the given list contains a subarray whose sum is equal to the target\"\"\"\n    n = len(arr)\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += arr[j]\n            if curr_sum == target:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    arr = [3, 4, -7, 1, 3, 9, 2, -2]\n    return arr",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum: int) -> bool:\n    \"\"\"Find if there exists a combination of three numbers from the list that adds up to the target sum\"\"\"\n    def three_sum(nums, target_sum):\n        n = len(nums)\n        for i in range(n - 2):\n            for j in range(i + 1, n - 1):\n                for k in range(j + 1, n):\n                    if nums[i] + nums[j] + nums[k] == target_sum:\n                        return True\n        return False\n\n    return three_sum(nums, target_sum)\n\n\ndef g(nums=[11, 23, 35, 47, 59, 71, 83, 95, 107, 119], target_sum=330):\n    return [nums[i], nums[j], nums[k]]\n\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 160,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum: int) -> bool:\n    \"\"\"Find if there exists a combination of three numbers from the list that adds up to the target sum\"\"\"\n    def three_sum(nums, target_sum):\n        n = len(nums)\n        for i in range(n - 2):\n            for j in range(i + 1, n - 1):\n                for k in range(j + 1, n):\n                    if nums[i] + nums[j] + nums[k] == target_sum:\n                        return True\n        return False\n\n    return three_sum(nums, target_sum)",
        "solution_func": "def g(nums=[11, 23, 35, 47, 59, 71, 83, 95, 107, 119], target_sum=330):\n    return [nums[i], nums[j], nums[k]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=15) -> bool:\n    \"\"\"Check if the product of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] * nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_sum=15):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 161,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=15) -> bool:\n    \"\"\"Check if the product of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] * nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target_sum=15):\n    return [n for n in range(1, target_sum+1)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=50) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list whose sum is equal to target_sum\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\n\ndef g(target_sum=50):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 161,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=50) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list whose sum is equal to target_sum\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))",
        "solution_func": "def g(target_sum=50):\n    return [n for n in range(1, target_sum+1)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Check if the sum of any three numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\n\ndef g(target_sum=100):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 161,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Check if the sum of any three numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))",
        "solution_func": "def g(target_sum=100):\n    return [n for n in range(1, target_sum+1)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 161,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(sentence: str, word=\"Python\") -> bool:\n    \"\"\"Check if a given word is present in the sentence\"\"\"\n    return word.lower() in sentence.lower().split()\n\ndef g(word=\"Python\"):\n    return \"I love programming with Python.\"\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 161,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(sentence: str, word=\"Python\") -> bool:\n    \"\"\"Check if a given word is present in the sentence\"\"\"\n    return word.lower() in sentence.lower().split()",
        "solution_func": "def g(word=\"Python\"):\n    return \"I love programming with Python.\"",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] == target:\n                return True\n    return False\n\ndef g(target=20):\n    return [2, 4, 5, 10, 6]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 161,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=20):\n    return [2, 4, 5, 10, 6]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=2, lower=-100, seq=[1, 3, 5, 7, 9, 11, 13, 15]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is greater than or equal to lower\"\"\"\n    seq_sum = sum(seq[start:start+k])\n    return seq_sum >= lower\ndef g(k=2, lower=-100, seq=[1, 3, 5, 7, 9, 11, 13, 15]):\n    def seq_sum(start):\n        return sum(seq[start:start+k])\n    return max(range(len(seq) - k + 1), key=seq_sum)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 161,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(start: int, k=2, lower=-100, seq=[1, 3, 5, 7, 9, 11, 13, 15]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is greater than or equal to lower\"\"\"\n    seq_sum = sum(seq[start:start+k])\n    return seq_sum >= lower",
        "solution_func": "def g(k=2, lower=-100, seq=[1, 3, 5, 7, 9, 11, 13, 15]):\n    def seq_sum(start):\n        return sum(seq[start:start+k])\n    return max(range(len(seq) - k + 1), key=seq_sum)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(start: int, k=3, div_factor=4, seq=[10, 20, 30, 40, 50, 60, 70, 80]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is divisible by div_factor\"\"\"\n    seq_sum = sum(seq[start:start+k])\n    return seq_sum % div_factor == 0\ndef g(k=3, div_factor=4, seq=[10, 20, 30, 40, 50, 60, 70, 80]):\n    def seq_sum(start):\n        return sum(seq[start:start+k])\n    return max(range(len(seq) - k + 1), key=seq_sum)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 161,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(start: int, k=3, div_factor=4, seq=[10, 20, 30, 40, 50, 60, 70, 80]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is divisible by div_factor\"\"\"\n    seq_sum = sum(seq[start:start+k])\n    return seq_sum % div_factor == 0",
        "solution_func": "def g(k=3, div_factor=4, seq=[10, 20, 30, 40, 50, 60, 70, 80]):\n    def seq_sum(start):\n        return sum(seq[start:start+k])\n    return max(range(len(seq) - k + 1), key=seq_sum)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=2, threshold=0.8, seq=[0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose average is greater than or equal to threshold\"\"\"\n    seq_avg = sum(seq[start:start+k]) / k\n    return seq_avg >= threshold\ndef g(k=2, threshold=0.8, seq=[0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6]):\n    def seq_avg(start):\n        return sum(seq[start:start+k]) / k\n    return max(range(len(seq) - k + 1), key=seq_avg)\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 161,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(start: int, k=2, threshold=0.8, seq=[0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose average is greater than or equal to threshold\"\"\"\n    seq_avg = sum(seq[start:start+k]) / k\n    return seq_avg >= threshold",
        "solution_func": "def g(k=2, threshold=0.8, seq=[0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6]):\n    def seq_avg(start):\n        return sum(seq[start:start+k]) / k\n    return max(range(len(seq) - k + 1), key=seq_avg)",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if any two numbers in the list sums up to the target sum\"\"\"\n    return any((numbers[i] + numbers[j] == target_sum) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target_sum=10):\n    numbers = [2, 4, 6, 8, 10]\n    return numbers\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 161,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if any two numbers in the list sums up to the target sum\"\"\"\n    return any((numbers[i] + numbers[j] == target_sum) for i in range(len(numbers)) for j in range(i+1, len(numbers)))",
        "solution_func": "def g(target_sum=10):\n    numbers = [2, 4, 6, 8, 10]\n    return numbers",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_word=\"PYTHON\") -> bool:\n    \"\"\"Check if a target word can be formed by concatenating words from a given list. Each word can be used only once.\n    Return True if the target word can be formed, False otherwise.\"\"\"\n    def is_valid(current_word, remaining_words):\n        if current_word == target_word:\n            return True\n        for word in remaining_words:\n            if target_word.startswith(current_word + word):\n                if is_valid(current_word + word, [w for w in remaining_words if w != word]):\n                    return True\n        return False\n    return is_valid(\"\", words)\ndef g(words: List[str], target_word=\"PYTHON\"):\n    def reverse_word(word):\n        return word[::-1]\n    words = list(set(words))\n    words.sort()\n    reversed_words = [reverse_word(word) for word in words]\n    return reversed_words\nassert f(g([\"P\", \"Y\", \"T\", \"H\", \"O\", \"N\"]))\n\n\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 162,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], target_word=\"PYTHON\") -> bool:\n    \"\"\"Check if a target word can be formed by concatenating words from a given list. Each word can be used only once.\n    Return True if the target word can be formed, False otherwise.\"\"\"\n    def is_valid(current_word, remaining_words):\n        if current_word == target_word:\n            return True\n        for word in remaining_words:\n            if target_word.startswith(current_word + word):\n                if is_valid(current_word + word, [w for w in remaining_words if w != word]):\n                    return True\n        return False\n    return is_valid(\"\", words)",
        "solution_func": "def g(words: List[str], target_word=\"PYTHON\"):\n    def reverse_word(word):\n        return word[::-1]\n    words = list(set(words))\n    words.sort()\n    reversed_words = [reverse_word(word) for word in words]\n    return reversed_words",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(moves: List[List[int]], initial_state=[5, 8, 3, 0]) -> bool:\n    \"\"\"Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\nremoving one or more objects from a single non-empty heap. The player who takes the last object wins.\n- initial_state is list of numbers of objects in each heap\n- moves is a list of your moves: [heap, number of objects to take]\n- you play first\"\"\"\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_smallest = state.index(vals[-1])\n        state[i_smallest] -= max(vals[-1] - vals[-2], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state=[5, 8, 3, 0]):\n    state = initial_state[:]\n    moves = []\n    def bot_move():\n        vals = sorted(state, reverse=True)\n        i_smallest = state.index(vals[-1])\n        state[i_smallest] -= max(vals[-1] - vals[-2], 1)\n    def losing(h):\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g())\n",
        "emb": null,
        "idx_generation": 162,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(moves: List[List[int]], initial_state=[5, 8, 3, 0]) -> bool:\n    \"\"\"Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\nremoving one or more objects from a single non-empty heap. The player who takes the last object wins.\n- initial_state is list of numbers of objects in each heap\n- moves is a list of your moves: [heap, number of objects to take]\n- you play first\"\"\"\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_smallest = state.index(vals[-1])\n        state[i_smallest] -= max(vals[-1] - vals[-2], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()",
        "solution_func": "def g(initial_state=[5, 8, 3, 0]):\n    state = initial_state[:]\n    moves = []\n    def bot_move():\n        vals = sorted(state, reverse=True)\n        i_smallest = state.index(vals[-1])\n        state[i_smallest] -= max(vals[-1] - vals[-2], 1)\n    def losing(h):\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n    def optimal_move():",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lists: List[List[int]], items=[5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length=4) -> bool:\n    \"\"\"Given a list of integers and a target length, create of the given length such that:\n    * The first list must be all the same number.\n    * The second must be all the different numbers.\n    * The two lists together comprise a sublist of all the list items\"\"\"\n    (a, b) = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == 1\n    assert len(set(b)) == length\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True\ndef g(items=[5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length=4):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and (not seen.add(i))]\n    return [[a] * length, (dedup + [a])[:length]]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 162,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lists: List[List[int]], items=[5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length=4) -> bool:\n    \"\"\"Given a list of integers and a target length, create of the given length such that:\n    * The first list must be all the same number.\n    * The second must be all the different numbers.\n    * The two lists together comprise a sublist of all the list items\"\"\"\n    (a, b) = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == 1\n    assert len(set(b)) == length\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True",
        "solution_func": "def g(items=[5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length=4):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_word='hello') -> bool:\n    \"\"\"Check if any two words in the list can be concatenated to form the target word\"\"\"\n    return any((words[i] + words[j] == target_word) for i in range(len(words)) for j in range(i+1, len(words)))\ndef g(target_word='hello'):\n    words = ['hel', 'lo', 'he', 'l', 'o']\n    return words\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 162,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], target_word='hello') -> bool:\n    \"\"\"Check if any two words in the list can be concatenated to form the target word\"\"\"\n    return any((words[i] + words[j] == target_word) for i in range(len(words)) for j in range(i+1, len(words)))",
        "solution_func": "def g(target_word='hello'):\n    words = ['hel', 'lo', 'he', 'l', 'o']\n    return words",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=20) -> bool:\n    \"\"\"Check if any two numbers in the matrix sums up to the target sum\"\"\"\n    return any((matrix[i][j] + matrix[k][l] == target_sum) for i in range(len(matrix)) for j in range(len(matrix[i])) for k in range(len(matrix)) for l in range(len(matrix[k])) if (i,j) != (k,l))\ndef g(target_sum=20):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 162,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_sum=20) -> bool:\n    \"\"\"Check if any two numbers in the matrix sums up to the target sum\"\"\"\n    return any((matrix[i][j] + matrix[k][l] == target_sum) for i in range(len(matrix)) for j in range(len(matrix[i])) for k in range(len(matrix)) for l in range(len(matrix[k])) if (i,j) != (k,l))",
        "solution_func": "def g(target_sum=20):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], target_length=10) -> bool:\n    \"\"\"Check if any two strings in the list can be combined to form a string of the target length\"\"\"\n    return any((len(strings[i]) + len(strings[j]) == target_length) for i in range(len(strings)) for j in range(i+1, len(strings)))\ndef g(target_length=10):\n    strings = ['hello', 'world', 'python', 'programming']\n    return strings\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 162,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(strings: List[str], target_length=10) -> bool:\n    \"\"\"Check if any two strings in the list can be combined to form a string of the target length\"\"\"\n    return any((len(strings[i]) + len(strings[j]) == target_length) for i in range(len(strings)) for j in range(i+1, len(strings)))",
        "solution_func": "def g(target_length=10):\n    strings = ['hello', 'world', 'python', 'programming']\n    return strings",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that add up to the target value.\"\"\"\n    return any((numbers[i] + numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 162,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that add up to the target value.\"\"\"\n    return any((numbers[i] + numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))",
        "solution_func": "def g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a triplet of numbers in the list that sum up to the target value.\"\"\"\n    return any((numbers[i] + numbers[j] + numbers[k] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)) for k in range(j+1, len(numbers)))\ndef g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 162,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a triplet of numbers in the list that sum up to the target value.\"\"\"\n    return any((numbers[i] + numbers[j] + numbers[k] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)) for k in range(j+1, len(numbers)))",
        "solution_func": "def g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that subtract to the target value.\"\"\"\n    return any((numbers[i] - numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\nassert f(g())\n",
        "emb": null,
        "idx_generation": 162,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that subtract to the target value.\"\"\"\n    return any((numbers[i] - numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))",
        "solution_func": "def g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if it is possible to obtain the target value by rearranging the numbers\n    and performing multiplication and division operations.\n    Each number in the list can be used only once.\"\"\"\n    def helper(numbers, target):\n        if len(numbers) == 0:\n            return target == 1\n        for i, num in enumerate(numbers):\n            remaining = numbers[:i] + numbers[i+1:]\n            if target % num == 0 and helper(remaining, target / num):\n                return True\n            if helper(remaining, target * num):\n                return True\n        return False\n\n    return helper(numbers, target)\n\ndef g(numbers=[2, 3, 4, 5]):\n    return numbers\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 162,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if it is possible to obtain the target value by rearranging the numbers\n    and performing multiplication and division operations.\n    Each number in the list can be used only once.\"\"\"\n    def helper(numbers, target):\n        if len(numbers) == 0:\n            return target == 1\n        for i, num in enumerate(numbers):\n            remaining = numbers[:i] + numbers[i+1:]\n            if target % num == 0 and helper(remaining, target / num):\n                return True\n            if helper(remaining, target * num):\n                return True\n        return False\n\n    return helper(numbers, target)",
        "solution_func": "def g(numbers=[2, 3, 4, 5]):\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(string: str, inds: List[int], target='coding') -> bool:\n    \"\"\"Find increasing indices to make the substring 'coding'\"\"\"\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == target\ndef g(string='coding'):\n    target = 'coding'\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans\nassert f(g())\n",
        "emb": null,
        "idx_generation": 163,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, inds: List[int], target='coding') -> bool:\n    \"\"\"Find increasing indices to make the substring 'coding'\"\"\"\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == target",
        "solution_func": "def g(string='coding'):\n    target = 'coding'\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are two consecutive numbers in the list such that their sum is equal to 10.\"\"\"\n    for i in range(len(nums)-1):\n        if nums[i] + nums[i+1] == 10:\n            return True\n    return False\n\ndef g():\n    return [1, 4, 6, 3, 7, 2]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 163,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are two consecutive numbers in the list such that their sum is equal to 10.\"\"\"\n    for i in range(len(nums)-1):\n        if nums[i] + nums[i+1] == 10:\n            return True\n    return False",
        "solution_func": "def g():\n    return [1, 4, 6, 3, 7, 2]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there is a number in the list that is divisible by both 2 and 3.\"\"\"\n    return any((num % 2 == 0 and num % 3 == 0 for num in nums))\n\ndef g():\n    return [2, 4, 6, 8, 9, 12]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 163,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there is a number in the list that is divisible by both 2 and 3.\"\"\"\n    return any((num % 2 == 0 and num % 3 == 0 for num in nums))",
        "solution_func": "def g():\n    return [2, 4, 6, 8, 9, 12]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=100, b=3, c=4, d=5) -> bool:\n    \"\"\"Find n such that (the sum of the first b multiples of c) - (a * d) == n\"\"\"\n    return sum([c * i for i in range(b)]) - (a * d) == n\ndef g(a=100, b=3, c=4, d=5):\n    return sum([c * i for i in range(b)]) - (a * d)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 163,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=100, b=3, c=4, d=5) -> bool:\n    \"\"\"Find n such that (the sum of the first b multiples of c) - (a * d) == n\"\"\"\n    return sum([c * i for i in range(b)]) - (a * d) == n",
        "solution_func": "def g(a=100, b=3, c=4, d=5):\n    return sum([c * i for i in range(b)]) - (a * d)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: str, s='Hello', t='World') -> bool:\n    \"\"\"Check if the concatenation of s and t equals n\"\"\"\n    return s + t == n\ndef g(s='Hello', t='World'):\n    return s + t\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 163,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: str, s='Hello', t='World') -> bool:\n    \"\"\"Check if the concatenation of s and t equals n\"\"\"\n    return s + t == n",
        "solution_func": "def g(s='Hello', t='World'):\n    return s + t",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: List[int], x=5, y=10) -> bool:\n    \"\"\"Check if all numbers in the list n are either x or y\"\"\"\n    return all(num == x or num == y for num in n)\ndef g(x=5, y=10):\n    return [x, y, x, y, x, y, y, y, y, x]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 163,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: List[int], x=5, y=10) -> bool:\n    \"\"\"Check if all numbers in the list n are either x or y\"\"\"\n    return all(num == x or num == y for num in n)",
        "solution_func": "def g(x=5, y=10):\n    return [x, y, x, y, x, y, y, y, y, x]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 163,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 163,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]",
        "solution_func": "def g(target=100):\n    return [10, 20, 30, 40, 50]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there is a subsequence of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=20):\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 163,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there is a subsequence of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]",
        "solution_func": "def g(target=20):\n    return [2, 4, 6, 8, 10]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=8) -> bool:\n    \"\"\"Check if the difference between n and the product of a and b is divisible by n\"\"\"\n    return (n - (a * b)) % n == 0\n\ndef g(a=3, b=8):\n    return a * b\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 163,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=3, b=8) -> bool:\n    \"\"\"Check if the difference between n and the product of a and b is divisible by n\"\"\"\n    return (n - (a * b)) % n == 0",
        "solution_func": "def g(a=3, b=8):\n    return a * b",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that adds up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[10, 20, 30, 40, 50, 60]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 164,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that adds up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(nums=[10, 20, 30, 40, 50, 60]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"Check if there exists a row in the matrix where the sum of all its elements is equal to the target value.\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False\n\ndef g(matrix=[[10, 20, 30], [5, 15, 25], [1, 2, 3]]):\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 164,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"Check if there exists a row in the matrix where the sum of all its elements is equal to the target value.\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False",
        "solution_func": "def g(matrix=[[10, 20, 30], [5, 15, 25], [1, 2, 3]]):\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(strings: List[str], target_length=10) -> bool:\n    \"\"\"Check if there exists a string in the list that has a length equal to the target length.\"\"\"\n    return any(len(s) == target_length for s in strings)\n\ndef g(strings=[\"apple\", \"banana\", \"orange\", \"kiwi\"]):\n    return strings\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 164,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(strings: List[str], target_length=10) -> bool:\n    \"\"\"Check if there exists a string in the list that has a length equal to the target length.\"\"\"\n    return any(len(s) == target_length for s in strings)",
        "solution_func": "def g(strings=[\"apple\", \"banana\", \"orange\", \"kiwi\"]):\n    return strings",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    return any((x + y == target for x in lst for y in lst))\n\ndef g(target=100):\n    return [target // 2, target // 2]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 164,
        "target_skills": null,
        "problem_func": "from typing import*\n\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    return any((x + y == target for x in lst for y in lst))",
        "solution_func": "def g(target=100):\n    return [target // 2, target // 2]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(num: int, lst: List[int]) -> bool:\n    \"\"\"Check if the number is present in the list\"\"\"\n    return num in lst\n\ndef g(lst: List[int]):\n    return lst\n\nassert f(5, g([1, 2, 3, 4, 5]))\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 164,
        "target_skills": null,
        "problem_func": "from typing import*\n\ndef f(num: int, lst: List[int]) -> bool:\n    \"\"\"Check if the number is present in the list\"\"\"\n    return num in lst",
        "solution_func": "def g(lst: List[int]):\n    return lst",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\n\ndef f(words: List[str]) -> bool:\n    \"\"\"Check if all words in the list start with the same letter\"\"\"\n    return all((word[0] == words[0][0] for word in words))\n\ndef g():\n    return ['apple', 'avocado', 'banana', 'blueberry']\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 164,
        "target_skills": null,
        "problem_func": "from typing import*\n\ndef f(words: List[str]) -> bool:\n    \"\"\"Check if all words in the list start with the same letter\"\"\"\n    return all((word[0] == words[0][0] for word in words))",
        "solution_func": "def g():\n    return ['apple', 'avocado', 'banana', 'blueberry']",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(seq: List[int], n=100, length=50) -> bool:\n    \"\"\"Find a sequence of 1's and 2's of a given length that that adds up to n\"\"\"\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)\ndef g(n=100, length=50):\n    return [1] * (n - length) + [2] * (2 * length - n)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 164,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(seq: List[int], n=100, length=50) -> bool:\n    \"\"\"Find a sequence of 1's and 2's of a given length that that adds up to n\"\"\"\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)",
        "solution_func": "def g(n=100, length=50):\n    return [1] * (n - length) + [2] * (2 * length - n)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(seq: List[int], n=24, length=8) -> bool:\n    \"\"\"Find a sequence of 1's and 2's of a given length that that adds up to n\"\"\"\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)\ndef g(n=24, length=8):\n    return [1] * (n - length) + [2] * (2 * length - n)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 164,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(seq: List[int], n=24, length=8) -> bool:\n    \"\"\"Find a sequence of 1's and 2's of a given length that that adds up to n\"\"\"\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)",
        "solution_func": "def g(n=24, length=8):\n    return [1] * (n - length) + [2] * (2 * length - n)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(seq: List[int], n=200, length=100) -> bool:\n    \"\"\"Find a sequence of 1's and 2's of a given length that that adds up to n\"\"\"\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)\ndef g(n=200, length=100):\n    return [1] * (n - length) + [2] * (2 * length - n)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 164,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(seq: List[int], n=200, length=100) -> bool:\n    \"\"\"Find a sequence of 1's and 2's of a given length that that adds up to n\"\"\"\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)",
        "solution_func": "def g(n=200, length=100):\n    return [1] * (n - length) + [2] * (2 * length - n)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target.\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) and subset_sum(nums[1:], target)\n    \n    return subset_sum(nums, target)\n\ndef g(nums=[5, 10, 15, 20, 25]):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 164,
        "target_skills": null,
        "problem_func": "from typing import*\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target.\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) and subset_sum(nums[1:], target)\n    \n    return subset_sum(nums, target)",
        "solution_func": "def g(nums=[5, 10, 15, 20, 25]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=1234567890) -> bool:\n    \"\"\"Check if a number is divisible by another number\"\"\"\n    return x % a == 0\ndef g(a=1234567890):\n    return a * 2\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 165,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=1234567890) -> bool:\n    \"\"\"Check if a number is divisible by another number\"\"\"\n    return x % a == 0",
        "solution_func": "def g(a=1234567890):\n    return a * 2",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: int, a=987654321) -> bool:\n    \"\"\"Check if a number is a power of another number\"\"\"\n    return x == a ** 2\ndef g(a=987654321):\n    return a\nassert f(g())\n",
        "emb": null,
        "idx_generation": 165,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=987654321) -> bool:\n    \"\"\"Check if a number is a power of another number\"\"\"\n    return x == a ** 2",
        "solution_func": "def g(a=987654321):\n    return a",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, a=\"hello\") -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return x == x[::-1]\ndef g(a=\"hello\"):\n    return a + a[::-1]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 165,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: str, a=\"hello\") -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return x == x[::-1]",
        "solution_func": "def g(a=\"hello\"):\n    return a + a[::-1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if it is possible to obtain the target value by rearranging the numbers\n    and performing multiplication and division operations.\n    Each number in the list can be used only once.\"\"\"\n    def helper(numbers, target):\n        if len(numbers) == 0:\n            return target == 1\n        for i, num in enumerate(numbers):\n            remaining = numbers[:i] + numbers[i+1:]\n            if target % num == 0 and helper(remaining, target // num):\n                return True\n            if helper(remaining, target * num):\n                return True\n        return False\n\n    return helper(numbers, target)\n\ndef g(numbers=[1, 2, 3, 4]):\n    return numbers\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 165,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if it is possible to obtain the target value by rearranging the numbers\n    and performing multiplication and division operations.\n    Each number in the list can be used only once.\"\"\"\n    def helper(numbers, target):\n        if len(numbers) == 0:\n            return target == 1\n        for i, num in enumerate(numbers):\n            remaining = numbers[:i] + numbers[i+1:]\n            if target % num == 0 and helper(remaining, target // num):\n                return True\n            if helper(remaining, target * num):\n                return True\n        return False\n\n    return helper(numbers, target)",
        "solution_func": "def g(numbers=[1, 2, 3, 4]):\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if it is possible to obtain the target value by rearranging the numbers\n    and performing addition, subtraction, multiplication, and division operations.\n    Each number in the list can be used only once.\"\"\"\n    def helper(numbers, target):\n        if len(numbers) == 0:\n            return target == 0\n        for i, num in enumerate(numbers):\n            remaining = numbers[:i] + numbers[i+1:]\n            if helper(remaining, target - num):\n                return True\n            if helper(remaining, target + num):\n                return True\n            if helper(remaining, target * num):\n                return True\n            if num != 0 and target % num == 0 and helper(remaining, target // num):\n                return True\n        return False\n\n    return helper(numbers, target)\n\ndef g(numbers=[1, 2, 3, 4]):\n    return numbers\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 165,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if it is possible to obtain the target value by rearranging the numbers\n    and performing addition, subtraction, multiplication, and division operations.\n    Each number in the list can be used only once.\"\"\"\n    def helper(numbers, target):\n        if len(numbers) == 0:\n            return target == 0\n        for i, num in enumerate(numbers):\n            remaining = numbers[:i] + numbers[i+1:]\n            if helper(remaining, target - num):\n                return True\n            if helper(remaining, target + num):\n                return True\n            if helper(remaining, target * num):\n                return True\n            if num != 0 and target % num == 0 and helper(remaining, target // num):\n                return True\n        return False\n\n    return helper(numbers, target)",
        "solution_func": "def g(numbers=[1, 2, 3, 4]):\n    return numbers",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if it is possible to obtain the target value by rearranging the numbers\n    and performing addition, subtraction, multiplication, and division operations.\n    Each number in the list can be used multiple times.\"\"\"\n    def helper(numbers, target):\n        if target == 0:\n            return True\n        for num in numbers:\n            if target - num >= 0 and helper(numbers, target - num):\n                return True\n            if helper(numbers, target + num):\n                return True\n            if helper(numbers, target * num):\n                return True\n            if num != 0 and target % num == 0 and helper(numbers, target // num):\n                return True\n        return False\n\n    return helper(numbers, target)\n\ndef g(numbers=[1, 2, 3, 4]):\n    return numbers\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 165,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if it is possible to obtain the target value by rearranging the numbers\n    and performing addition, subtraction, multiplication, and division operations.\n    Each number in the list can be used multiple times.\"\"\"\n    def helper(numbers, target):\n        if target == 0:\n            return True\n        for num in numbers:\n            if target - num >= 0 and helper(numbers, target - num):\n                return True\n            if helper(numbers, target + num):\n                return True\n            if helper(numbers, target * num):\n                return True\n            if num != 0 and target % num == 0 and helper(numbers, target // num):\n                return True\n        return False\n\n    return helper(numbers, target)",
        "solution_func": "def g(numbers=[1, 2, 3, 4]):\n    return numbers",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4]) -> bool:\n    \"\"\"Check if the sum of all elements in the list nums is equal to n.\"\"\"\n    return sum(nums) == n\n\ndef g(nums=[1, 2, 3, 4]):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 165,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4]) -> bool:\n    \"\"\"Check if the sum of all elements in the list nums is equal to n.\"\"\"\n    return sum(nums) == n",
        "solution_func": "def g(nums=[1, 2, 3, 4]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, s='Hello', t='World') -> bool:\n    \"\"\"Check if n is equal to the length of the concatenation of s and t.\"\"\"\n    return len(s + t) == n\n\ndef g(s='Hello', t='World'):\n    return s + t\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 165,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, s='Hello', t='World') -> bool:\n    \"\"\"Check if n is equal to the length of the concatenation of s and t.\"\"\"\n    return len(s + t) == n",
        "solution_func": "def g(s='Hello', t='World'):\n    return s + t",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, s='Hello', t='World') -> bool:\n    \"\"\"Check if the length of s is equal to n.\"\"\"\n    return len(s) == n\n\ndef g(n: int):\n    return 'a' * n\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 165,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, s='Hello', t='World') -> bool:\n    \"\"\"Check if the length of s is equal to n.\"\"\"\n    return len(s) == n",
        "solution_func": "def g(n: int):\n    return 'a' * n",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target.\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    \n    return subset_sum(nums, target)\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 165,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target.\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    \n    return subset_sum(nums, target)",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, x=5, y=3, z=2) -> bool:\n    \"\"\"Find n such that (the product of the first x multiples of y) - z == n\"\"\"\n    return (y ** x) - z == n\ndef g(x=5, y=3, z=2):\n    return (y ** x) - z\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 166,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, x=5, y=3, z=2) -> bool:\n    \"\"\"Find n such that (the product of the first x multiples of y) - z == n\"\"\"\n    return (y ** x) - z == n",
        "solution_func": "def g(x=5, y=3, z=2):\n    return (y ** x) - z",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5, c='a') -> bool:\n    \"\"\"Check if the character c appears n times consecutively in the given string s\"\"\"\n    return s.count(c * n) > 0\ndef g(n=5, c='a'):\n    return c * n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 166,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=5, c='a') -> bool:\n    \"\"\"Check if the character c appears n times consecutively in the given string s\"\"\"\n    return s.count(c * n) > 0",
        "solution_func": "def g(n=5, c='a'):\n    return c * n",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], n=10, m=5) -> bool:\n    \"\"\"Check if there exists a pair of integers in the given list that adds up to n and their product is m\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == n and arr[i] * arr[j] == m:\n                return True\n    return False\ndef g(n=10, m=5):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 166,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], n=10, m=5) -> bool:\n    \"\"\"Check if there exists a pair of integers in the given list that adds up to n and their product is m\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == n and arr[i] * arr[j] == m:\n                return True\n    return False",
        "solution_func": "def g(n=10, m=5):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Find the sum of all pairs of numbers in the list that are divisible by the target value\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if (li[i] + li[j]) % target == 0:\n                return True\n    return False\ndef g(target=100):\n    return [25, target-25]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 166,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Find the sum of all pairs of numbers in the list that are divisible by the target value\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if (li[i] + li[j]) % target == 0:\n                return True\n    return False",
        "solution_func": "def g(target=100):\n    return [25, target-25]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Find the maximum product of any three numbers in the list that sum up to the target value\"\"\"\n    max_product = float('-inf')\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            for k in range(j+1, len(li)):\n                if li[i] + li[j] + li[k] == target:\n                    product = li[i] * li[j] * li[k]\n                    if product > max_product:\n                        max_product = product\n    return max_product\ndef g(target=100):\n    return [10, 20, target-30]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 166,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Find the maximum product of any three numbers in the list that sum up to the target value\"\"\"\n    max_product = float('-inf')\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            for k in range(j+1, len(li)):\n                if li[i] + li[j] + li[k] == target:\n                    product = li[i] * li[j] * li[k]\n                    if product > max_product:\n                        max_product = product\n    return max_product",
        "solution_func": "def g(target=100):\n    return [10, 20, target-30]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Find the smallest positive integer that cannot be expressed as the sum of any two numbers in the list\"\"\"\n    s = set(li)\n    i = 1\n    while True:\n        if i not in s:\n            return i\n        i += 1\ndef g(target=100):\n    return [10, target-10]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 166,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Find the smallest positive integer that cannot be expressed as the sum of any two numbers in the list\"\"\"\n    s = set(li)\n    i = 1\n    while True:\n        if i not in s:\n            return i\n        i += 1",
        "solution_func": "def g(target=100):\n    return [10, target-10]",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target_sum=0) -> bool:\n    \"\"\"Check if there exists a row in the matrix where the sum of all elements is equal to the target sum.\"\"\"\n    return any(sum(row) == target_sum for row in matrix)\n\ndef g(target_sum=0):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 166,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target_sum=0) -> bool:\n    \"\"\"Check if there exists a row in the matrix where the sum of all elements is equal to the target sum.\"\"\"\n    return any(sum(row) == target_sum for row in matrix)",
        "solution_func": "def g(target_sum=0):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if a given number is a prime number.\"\"\"\n    return n in primes\n\ndef g():\n    n = 17\n    return n\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 166,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13]) -> bool:\n    \"\"\"Check if a given number is a prime number.\"\"\"\n    return n in primes",
        "solution_func": "def g():\n    n = 17\n    return n",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], prefix='in') -> bool:\n    \"\"\"Check if all words in a list start with a given prefix.\"\"\"\n    return all(word.startswith(prefix) for word in words)\n\ndef g():\n    words = ['incredible', 'intact', 'indoor', 'influence']\n    return words\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 166,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], prefix='in') -> bool:\n    \"\"\"Check if all words in a list start with a given prefix.\"\"\"\n    return all(word.startswith(prefix) for word in words)",
        "solution_func": "def g():\n    words = ['incredible', 'intact', 'indoor', 'influence']\n    return words",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose product is divisible by k.\"\"\"\n    prefix_product = 1\n    remainders = {1}\n    for num in nums:\n        prefix_product = (prefix_product * num) % k\n        if prefix_product in remainders:\n            return True\n        remainders.add(prefix_product)\n    return False\n\ndef g(k=5):\n    return [i**2 for i in range(1, k+1)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 166,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose product is divisible by k.\"\"\"\n    prefix_product = 1\n    remainders = {1}\n    for num in nums:\n        prefix_product = (prefix_product * num) % k\n        if prefix_product in remainders:\n            return True\n        remainders.add(prefix_product)\n    return False",
        "solution_func": "def g(k=5):\n    return [i**2 for i in range(1, k+1)]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3, c='b') -> bool:\n    \"\"\"Check if the character c appears n times consecutively in the given string s\"\"\"\n    return s.count(c * n) > 0\ndef g(n=3, c='b'):\n    return c * n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 167,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3, c='b') -> bool:\n    \"\"\"Check if the character c appears n times consecutively in the given string s\"\"\"\n    return s.count(c * n) > 0",
        "solution_func": "def g(n=3, c='b'):\n    return c * n",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=4, c='x') -> bool:\n    \"\"\"Check if the character c appears n times consecutively in the given string s\"\"\"\n    return s.count(c * n) > 0\ndef g(n=4, c='x'):\n    return c * n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 167,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=4, c='x') -> bool:\n    \"\"\"Check if the character c appears n times consecutively in the given string s\"\"\"\n    return s.count(c * n) > 0",
        "solution_func": "def g(n=4, c='x'):\n    return c * n",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=2, c='z') -> bool:\n    \"\"\"Check if the character c appears n times consecutively in the given string s\"\"\"\n    return s.count(c * n) > 0\ndef g(n=2, c='z'):\n    return c * n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 167,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=2, c='z') -> bool:\n    \"\"\"Check if the character c appears n times consecutively in the given string s\"\"\"\n    return s.count(c * n) > 0",
        "solution_func": "def g(n=2, c='z'):\n    return c * n",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 167,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(radius: float, height=5) -> bool:\n    \"\"\"Check if the volume of a cylinder with given radius and height is greater than 100\"\"\"\n    volume = math.pi * radius**2 * height\n    return volume > 100\n\ndef g(height=5):\n    return 3.0\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 167,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(radius: float, height=5) -> bool:\n    \"\"\"Check if the volume of a cylinder with given radius and height is greater than 100\"\"\"\n    volume = math.pi * radius**2 * height\n    return volume > 100",
        "solution_func": "def g(height=5):\n    return 3.0",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str], letter='a') -> bool:\n    \"\"\"Check if all words in the list start with the given letter\"\"\"\n    return all(word[0] == letter for word in words)\n\ndef g(letter='a'):\n    return ['apple', 'avocado', 'banana']\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 167,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], letter='a') -> bool:\n    \"\"\"Check if all words in the list start with the given letter\"\"\"\n    return all(word[0] == letter for word in words)",
        "solution_func": "def g(letter='a'):\n    return ['apple', 'avocado', 'banana']",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    return [i for i in range(1, target+1)]\n\nassert f(g())\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 167,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=10):\n    return [i for i in range(1, target+1)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=3, x=10) -> bool:\n    \"\"\"Check if there exists a subarray in the list of length k whose sum is less than or equal to x\"\"\"\n    for i in range(len(nums) - k + 1):\n        subarray = nums[i:i+k]\n        if sum(subarray) <= x:\n            return True\n    return False\n\ndef g(k=3, x=10):\n    return [i for i in range(1, x+1)]\n\nassert f(g())\n\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 167,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=3, x=10) -> bool:\n    \"\"\"Check if there exists a subarray in the list of length k whose sum is less than or equal to x\"\"\"\n    for i in range(len(nums) - k + 1):\n        subarray = nums[i:i+k]\n        if sum(subarray) <= x:\n            return True\n    return False",
        "solution_func": "def g(k=3, x=10):\n    return [i for i in range(1, x+1)]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list whose sum is equal to the target\"\"\"\n    n = len(nums)\n    nums.sort()\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(target=100):\n    return [i for i in range(1, target+1)]\n\nassert f(g())\n\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 167,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list whose sum is equal to the target\"\"\"\n    n = len(nums)\n    nums.sort()\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False",
        "solution_func": "def g(target=100):\n    return [i for i in range(1, target+1)]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int], target: int) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose sum is equal to the target number\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\n\ndef g(lst: List[int], target: int):\n    return lst, target\n\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 167,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst: List[int], target: int) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose sum is equal to the target number\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False",
        "solution_func": "def g(lst: List[int], target: int):\n    return lst, target",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], n=4, target=20, row_idx=2) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2]) and rows[row_idx] == target\ndef g(n=4, target=20):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix\n    assert False, f\"No magic square found for n={n}\"\nassert f(g(), row_idx=1)\n",
        "emb": null,
        "idx_generation": 168,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], n=4, target=20, row_idx=2) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2]) and rows[row_idx] == target",
        "solution_func": "def g(n=4, target=20):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], n=2, target=10, row_idx=0) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2]) and rows[row_idx] == target\ndef g(n=2, target=10):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix\n    assert False, f\"No magic square found for n={n}\"\nassert f(g(), row_idx=0)\n",
        "emb": null,
        "idx_generation": 168,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], n=2, target=10, row_idx=0) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2]) and rows[row_idx] == target",
        "solution_func": "def g(n=2, target=10):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], n=5, target=25, row_idx=3) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2]) and rows[row_idx] == target\ndef g(n=5, target=25):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix\n    assert False, f\"No magic square found for n={n}\"\nassert f(g(), row_idx=4)\n",
        "emb": null,
        "idx_generation": 168,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], n=5, target=25, row_idx=3) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2]) and rows[row_idx] == target",
        "solution_func": "def g(n=5, target=25):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=15482, b=23223, lower_bound=5) -> bool:\n    \"\"\"Check if n is a divisor of both a and b, and n is greater than or equal to lower_bound.\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a=15482, b=23223, lower_bound=5):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 168,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=15482, b=23223, lower_bound=5) -> bool:\n    \"\"\"Check if n is a divisor of both a and b, and n is greater than or equal to lower_bound.\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)",
        "solution_func": "def g(a=15482, b=23223, lower_bound=5):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=15482, b=23223, lower_bound=5) -> bool:\n    \"\"\"Check if n is a divisor of both a and b, and n is greater than or equal to lower_bound.\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a=15482, b=23223, lower_bound=5):\n    (m, n) = (min(a, b), max(a, b))\n    while n > 0:\n        (m, n) = (n % m, m)\n    return n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 168,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=15482, b=23223, lower_bound=5) -> bool:\n    \"\"\"Check if n is a divisor of both a and b, and n is greater than or equal to lower_bound.\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)",
        "solution_func": "def g(a=15482, b=23223, lower_bound=5):\n    (m, n) = (min(a, b), max(a, b))\n    while n > 0:\n        (m, n) = (n % m, m)\n    return n",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=15482, b=23223, lower_bound=5) -> bool:\n    \"\"\"Check if n is a divisor of both a and b, and n is greater than or equal to lower_bound.\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a=15482, b=23223, lower_bound=5):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return m\nassert f(g())\n",
        "emb": null,
        "idx_generation": 168,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=15482, b=23223, lower_bound=5) -> bool:\n    \"\"\"Check if n is a divisor of both a and b, and n is greater than or equal to lower_bound.\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)",
        "solution_func": "def g(a=15482, b=23223, lower_bound=5):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return m",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: Tuple[int, int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies inside a rectangle.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return (a <= x <= a+c) and (b <= y <= b+c)\ndef g(a=1, b=2, c=10):\n    return (a+c//2, b+c//2)\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 168,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(e: Tuple[int, int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies inside a rectangle.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return (a <= x <= a+c) and (b <= y <= b+c)",
        "solution_func": "def g(a=1, b=2, c=10):\n    return (a+c//2, b+c//2)",
        "map_ix": [
            1,
            1,
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: Tuple[int, int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies inside a square.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return (a <= x <= a+c) and (b <= y <= b+c)\ndef g(a=1, b=2, c=10):\n    return (a, b)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 168,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(e: Tuple[int, int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies inside a square.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return (a <= x <= a+c) and (b <= y <= b+c)",
        "solution_func": "def g(a=1, b=2, c=10):\n    return (a, b)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: Tuple[int, int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies inside a rectangle.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return (a <= x <= a+c) and (b <= y <= b+c)\ndef g(a=1, b=2, c=10):\n    return (a+c, b+c)\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 168,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(e: Tuple[int, int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies inside a rectangle.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return (a <= x <= a+c) and (b <= y <= b+c)",
        "solution_func": "def g(a=1, b=2, c=10):\n    return (a+c, b+c)",
        "map_ix": [
            1,
            0,
            1,
            0,
            0,
            1,
            1,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(moves: List[List[int]], initial_state=[5, 8, 3, 0]) -> bool:\n    \"\"\"Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\nremoving one or more objects from a single non-empty heap. The player who takes the last object wins.\n- initial_state is list of numbers of objects in each heap\n- moves is a list of your moves: [heap, number of objects to take]\n- you play first\"\"\"\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_smallest = state.index(min([x for x in state if x != 0]))\n        state[i_smallest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state=[5, 8, 3, 0]):\n    state = initial_state[:]\n    moves = []\n    def bot_move():\n        vals = sorted(state, reverse=True)\n        i_smallest = state.index(min([x for x in state if x != 0]))\n        state[i_smallest] -= max(vals[0] - vals[1], 1)\n    def winning(h):\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor != 0\n    def optimal_move():\n        assert not winning(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if winning(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g())\n",
        "emb": null,
        "idx_generation": 168,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(moves: List[List[int]], initial_state=[5, 8, 3, 0]) -> bool:\n    \"\"\"Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\nremoving one or more objects from a single non-empty heap. The player who takes the last object wins.\n- initial_state is list of numbers of objects in each heap\n- moves is a list of your moves: [heap, number of objects to take]\n- you play first\"\"\"\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_smallest = state.index(min([x for x in state if x != 0]))\n        state[i_smallest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()",
        "solution_func": "def g(initial_state=[5, 8, 3, 0]):\n    state = initial_state[:]\n    moves = []\n    def bot_move():\n        vals = sorted(state, reverse=True)\n        i_smallest = state.index(min([x for x in state if x != 0]))\n        state[i_smallest] -= max(vals[0] - vals[1], 1)\n    def winning(h):\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor != 0\n    def optimal_move():",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], x=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by x.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) % x == 0:\n                return True\n    return False\n\ndef g(x=5):\n    return [i for i in range(1, x+1)]\n\nassert f(g())\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 169,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], x=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by x.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) % x == 0:\n                return True\n    return False",
        "solution_func": "def g(x=5):\n    return [i for i in range(1, x+1)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], x=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose maximum value is divisible by x.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if max(nums[i:j]) % x == 0:\n                return True\n    return False\n\ndef g(x=5):\n    return [i for i in range(1, x+1)]\n\nassert f(g())\n\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 169,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], x=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose maximum value is divisible by x.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if max(nums[i:j]) % x == 0:\n                return True\n    return False",
        "solution_func": "def g(x=5):\n    return [i for i in range(1, x+1)]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], x=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose minimum value is divisible by x.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if min(nums[i:j]) % x == 0:\n                return True\n    return False\n\ndef g(x=5):\n    return [i for i in range(1, x+1)]\n\nassert f(g())\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 169,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], x=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose minimum value is divisible by x.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if min(nums[i:j]) % x == 0:\n                return True\n    return False",
        "solution_func": "def g(x=5):\n    return [i for i in range(1, x+1)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are three consecutive numbers in the list that form an arithmetic sequence with a common difference of 3.\"\"\"\n    for i in range(len(nums)-2):\n        if nums[i+1] - nums[i] == 3 and nums[i+2] - nums[i+1] == 3:\n            return True\n    return False\n\ndef g():\n    return [1, 4, 7, 10, 13, 16, 19]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 169,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are three consecutive numbers in the list that form an arithmetic sequence with a common difference of 3.\"\"\"\n    for i in range(len(nums)-2):\n        if nums[i+1] - nums[i] == 3 and nums[i+2] - nums[i+1] == 3:\n            return True\n    return False",
        "solution_func": "def g():\n    return [1, 4, 7, 10, 13, 16, 19]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are two consecutive numbers in the list whose product is a perfect square.\"\"\"\n    for i in range(len(nums)-1):\n        if nums[i] * nums[i+1] == int(nums[i] * nums[i+1] ** 0.5) ** 2:\n            return True\n    return False\n\ndef g():\n    return [2, 3, 4, 5, 6, 7, 8]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 169,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are two consecutive numbers in the list whose product is a perfect square.\"\"\"\n    for i in range(len(nums)-1):\n        if nums[i] * nums[i+1] == int(nums[i] * nums[i+1] ** 0.5) ** 2:\n            return True\n    return False",
        "solution_func": "def g():\n    return [2, 3, 4, 5, 6, 7, 8]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are five consecutive numbers in the list that form a Fibonacci sequence.\"\"\"\n    for i in range(len(nums)-4):\n        if nums[i] + nums[i+1] == nums[i+2] and nums[i+1] + nums[i+2] == nums[i+3] and nums[i+2] + nums[i+3] == nums[i+4]:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 5, 8, 13, 21]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 169,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are five consecutive numbers in the list that form a Fibonacci sequence.\"\"\"\n    for i in range(len(nums)-4):\n        if nums[i] + nums[i+1] == nums[i+2] and nums[i+1] + nums[i+2] == nums[i+3] and nums[i+2] + nums[i+3] == nums[i+4]:\n            return True\n    return False",
        "solution_func": "def g():\n    return [1, 2, 3, 5, 8, 13, 21]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(l: List[int]) -> bool:\n    \"\"\"Find a list of more than 1000 distinct integers between 0 and 999, inclusive, such that the sum of each pair of integers is a perfect square.\"\"\"\n    return all((i in range(1000) and j in range(1000) and (i + j)**0.5 == int((i + j)**0.5) for i in l for j in l if i != j)) and len(set(l)) > 1000\ndef g():\n    return [0, 2] + list(range(4, 1000))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 169,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(l: List[int]) -> bool:\n    \"\"\"Find a list of more than 1000 distinct integers between 0 and 999, inclusive, such that the sum of each pair of integers is a perfect square.\"\"\"\n    return all((i in range(1000) and j in range(1000) and (i + j)**0.5 == int((i + j)**0.5) for i in l for j in l if i != j)) and len(set(l)) > 1000",
        "solution_func": "def g():\n    return [0, 2] + list(range(4, 1000))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(l: List[int]) -> bool:\n    \"\"\"Find a list of more than 995 distinct integers between 0 and 999, inclusive, such that the absolute difference of each pair of integers is prime.\"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    return all((i in range(1000) and j in range(1000) and abs(i - j) in primes for i in l for j in l if i != j)) and len(set(l)) > 995\ndef g():\n    return [0, 1] + list(range(3, 1000))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 169,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(l: List[int]) -> bool:\n    \"\"\"Find a list of more than 995 distinct integers between 0 and 999, inclusive, such that the absolute difference of each pair of integers is prime.\"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    return all((i in range(1000) and j in range(1000) and abs(i - j) in primes for i in l for j in l if i != j)) and len(set(l)) > 995",
        "solution_func": "def g():\n    return [0, 1] + list(range(3, 1000))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(l: List[int]) -> bool:\n    \"\"\"Find a list of more than 990 distinct integers between 0 and 999, inclusive, such that the product of each pair of integers is a perfect cube.\"\"\"\n    return all((i in range(1000) and j in range(1000) and (i * j)**(1/3) == int((i * j)**(1/3)) for i in l for j in l if i != j)) and len(set(l)) > 990\ndef g():\n    return [0, 3] + list(range(5, 1000))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 169,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(l: List[int]) -> bool:\n    \"\"\"Find a list of more than 990 distinct integers between 0 and 999, inclusive, such that the product of each pair of integers is a perfect cube.\"\"\"\n    return all((i in range(1000) and j in range(1000) and (i * j)**(1/3) == int((i * j)**(1/3)) for i in l for j in l if i != j)) and len(set(l)) > 990",
        "solution_func": "def g():\n    return [0, 3] + list(range(5, 1000))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a subset of numbers in the given list that adds up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(target + 1):\n            if j >= nums[i - 1]:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    return dp[n][target]\n\ndef g(target=50):\n    return [5, 10, 15, 20, 25, 30]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 169,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a subset of numbers in the given list that adds up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(target + 1):\n            if j >= nums[i - 1]:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    return dp[n][target]",
        "solution_func": "def g(target=50):\n    return [5, 10, 15, 20, 25, 30]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 170,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return nums == nums[::-1]",
        "solution_func": "def g():\n    return [1, 2, 3, 2, 1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a pangram.\"\"\"\n    alphabet = set('abcdefghijklmnopqrstuvwxyz')\n    return set(s.lower()) >= alphabet\n\ndef g():\n    return \"The quick brown fox jumps over the lazy dog\"\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 170,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a pangram.\"\"\"\n    alphabet = set('abcdefghijklmnopqrstuvwxyz')\n    return set(s.lower()) >= alphabet",
        "solution_func": "def g():\n    return \"The quick brown fox jumps over the lazy dog\"",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are exactly two elements in the list that sum up to 10.\"\"\"\n    count = 0\n    for i in range(len(nums)-1):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == 10:\n                count += 1\n    return count == 2\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 170,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are exactly two elements in the list that sum up to 10.\"\"\"\n    count = 0\n    for i in range(len(nums)-1):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == 10:\n                count += 1\n    return count == 2",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int], target_sum=0) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target sum.\"\"\"\n    num_set = set(num_list)\n    for num in num_list:\n        complement = target_sum - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(target_sum=0):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g(), target_sum=7)\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 170,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num_list: List[int], target_sum=0) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target sum.\"\"\"\n    num_set = set(num_list)\n    for num in num_list:\n        complement = target_sum - num\n        if complement in num_set:\n            return True\n    return False",
        "solution_func": "def g(target_sum=0):\n    return [1, 2, 3, 4, 5, 6]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=1) -> bool:\n    \"\"\"What are the first two digits of (2^n - 1)^2?\"\"\"\n    return int(str((2 ** n - 1) ** 2)[:2] + s) == (2 ** n - 1) ** 2\ndef g(n=1):\n    return '1' if n == 0 else '3' if n == 1 else '23'\nassert f(g())\n",
        "emb": null,
        "idx_generation": 170,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=1) -> bool:\n    \"\"\"What are the first two digits of (2^n - 1)^2?\"\"\"\n    return int(str((2 ** n - 1) ** 2)[:2] + s) == (2 ** n - 1) ** 2",
        "solution_func": "def g(n=1):\n    return '1' if n == 0 else '3' if n == 1 else '23'",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(equation: str, x=1) -> bool:\n    \"\"\"Evaluate the given equation for the given value of x.\"\"\"\n    return eval(equation.replace('x', str(x))) == 42\ndef g(x=1):\n    return 'x**3 + 2*x - 6'\nassert f(g())\n",
        "emb": null,
        "idx_generation": 170,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(equation: str, x=1) -> bool:\n    \"\"\"Evaluate the given equation for the given value of x.\"\"\"\n    return eval(equation.replace('x', str(x))) == 42",
        "solution_func": "def g(x=1):\n    return 'x**3 + 2*x - 6'",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: Tuple[int, int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies inside a rectangle.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return (a <= x <= a+c) and (b <= y <= b+c)\ndef g(a=1, b=2, c=10):\n    return (a+1, b+1)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 170,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(e: Tuple[int, int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies inside a rectangle.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return (a <= x <= a+c) and (b <= y <= b+c)",
        "solution_func": "def g(a=1, b=2, c=10):\n    return (a+1, b+1)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: Tuple[int, int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies inside a rectangle.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return (a <= x <= a+c) and (b <= y <= b+c)\ndef g(a=1, b=2, c=10):\n    return (a+(c//2), b+(c//2))\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 170,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(e: Tuple[int, int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies inside a rectangle.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return (a <= x <= a+c) and (b <= y <= b+c)",
        "solution_func": "def g(a=1, b=2, c=10):\n    return (a+(c//2), b+(c//2))",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(e: Tuple[int, int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies inside a rectangle.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return (a <= x <= a+c) and (b <= y <= b+c)\ndef g(a=1, b=2, c=10):\n    return (a-1, b-1)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 170,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(e: Tuple[int, int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies inside a rectangle.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return (a <= x <= a+c) and (b <= y <= b+c)",
        "solution_func": "def g(a=1, b=2, c=10):\n    return (a-1, b-1)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down or right in the grid.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j):\n        if i == rows - 1 and j == cols - 1:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        return helper(i+1, j) or helper(i, j+1)\n\n    return helper(0, 0)\n\ndef g(nums=[[1, 0, 0], [1, 1, 0], [0, 1, 1]]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 170,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down or right in the grid.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j):\n        if i == rows - 1 and j == cols - 1:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        return helper(i+1, j) or helper(i, j+1)\n\n    return helper(0, 0)",
        "solution_func": "def g(nums=[[1, 0, 0], [1, 1, 0], [0, 1, 1]]):\n    return nums",
        "map_ix": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in nums that sum up to target.\"\"\"\n    for i in range(len(nums)-1):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    nums = [1, 5, 8, 3, 6, 2, 9, 4, 7]\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 171,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in nums that sum up to target.\"\"\"\n    for i in range(len(nums)-1):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    nums = [1, 5, 8, 3, 6, 2, 9, 4, 7]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(phrase: str, substr='abc') -> bool:\n    \"\"\"Check if the given substring appears in the given phrase\"\"\"\n    return substr in phrase\ndef g(substr='abc'):\n    phrase = \"Hello world! This is an example phrase.\"\n    return phrase\nassert f(g())\n",
        "emb": null,
        "idx_generation": 171,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(phrase: str, substr='abc') -> bool:\n    \"\"\"Check if the given substring appears in the given phrase\"\"\"\n    return substr in phrase",
        "solution_func": "def g(substr='abc'):\n    phrase = \"Hello world! This is an example phrase.\"\n    return phrase",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], letter='a') -> bool:\n    \"\"\"Check if any word in the list starts with the given letter\"\"\"\n    for word in words:\n        if word[0] == letter:\n            return True\n    return False\ndef g(letter='a'):\n    words = ['apple', 'banana', 'cherry', 'orange', 'kiwi']\n    return words\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 171,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], letter='a') -> bool:\n    \"\"\"Check if any word in the list starts with the given letter\"\"\"\n    for word in words:\n        if word[0] == letter:\n            return True\n    return False",
        "solution_func": "def g(letter='a'):\n    words = ['apple', 'banana', 'cherry', 'orange', 'kiwi']\n    return words",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_word='hello') -> bool:\n    \"\"\"Check if the target word is present in the list of words.\"\"\"\n    return target_word in words\n\ndef g(target_word='hello'):\n    return ['hi', 'hey', 'hello', 'hola', 'bonjour']\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 171,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], target_word='hello') -> bool:\n    \"\"\"Check if the target word is present in the list of words.\"\"\"\n    return target_word in words",
        "solution_func": "def g(target_word='hello'):\n    return ['hi', 'hey', 'hello', 'hola', 'bonjour']",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target_sum=10) -> bool:\n    \"\"\"Check if the sum of all elements in the matrix is equal to the target sum.\"\"\"\n    return np.sum(matrix) == target_sum\n\ndef g(target_sum=10):\n    return np.ones((3, 3))\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 171,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target_sum=10) -> bool:\n    \"\"\"Check if the sum of all elements in the matrix is equal to the target sum.\"\"\"\n    return np.sum(matrix) == target_sum",
        "solution_func": "def g(target_sum=10):\n    return np.ones((3, 3))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, start_char='a', end_char='z') -> bool:\n    \"\"\"Check if the start and end characters are present at the beginning and end of the string, respectively.\"\"\"\n    return string.startswith(start_char) and string.endswith(end_char)\n\ndef g(start_char='a', end_char='z'):\n    return start_char + 'bcdefghijklmnopqrstuvwxy' + end_char\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 171,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, start_char='a', end_char='z') -> bool:\n    \"\"\"Check if the start and end characters are present at the beginning and end of the string, respectively.\"\"\"\n    return string.startswith(start_char) and string.endswith(end_char)",
        "solution_func": "def g(start_char='a', end_char='z'):\n    return start_char + 'bcdefghijklmnopqrstuvwxy' + end_char",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=11) -> bool:\n    \"\"\"Check if the difference between n and the product of a and b is divisible by n\"\"\"\n    return (n - (a * b)) % n == 0\n\ndef g(a=5, b=11):\n    return a * b\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 171,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=5, b=11) -> bool:\n    \"\"\"Check if the difference between n and the product of a and b is divisible by n\"\"\"\n    return (n - (a * b)) % n == 0",
        "solution_func": "def g(a=5, b=11):\n    return a * b",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=11) -> bool:\n    \"\"\"Check if the sum of n and the difference between a and b is divisible by n\"\"\"\n    return (n + (a - b)) % n == 0\n\ndef g(a=5, b=11):\n    return a - b\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 171,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=5, b=11) -> bool:\n    \"\"\"Check if the sum of n and the difference between a and b is divisible by n\"\"\"\n    return (n + (a - b)) % n == 0",
        "solution_func": "def g(a=5, b=11):\n    return a - b",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=11) -> bool:\n    \"\"\"Check if the difference between n and the difference between a and b is divisible by n\"\"\"\n    return (n - (a - b)) % n == 0\n\ndef g(a=5, b=11):\n    return a - b\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 171,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=5, b=11) -> bool:\n    \"\"\"Check if the difference between n and the difference between a and b is divisible by n\"\"\"\n    return (n - (a - b)) % n == 0",
        "solution_func": "def g(a=5, b=11):\n    return a - b",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], n=4, target=34) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2])\n\ndef g(n=4, target=34):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix\n    assert False, f\"No magic square found for n={n}\"\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 171,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], n=4, target=34) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2])",
        "solution_func": "def g(n=4, target=34):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if any two elements in the given list sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    nums = [2, 4, 6, 8]\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 172,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if any two elements in the given list sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    nums = [2, 4, 6, 8]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='abc') -> bool:\n    \"\"\"Check if the given string contains the given substring\"\"\"\n    return substr in string\ndef g(substr='abc'):\n    string = 'defabcghi'\n    return string\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 172,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substr='abc') -> bool:\n    \"\"\"Check if the given string contains the given substring\"\"\"\n    return substr in string",
        "solution_func": "def g(substr='abc'):\n    string = 'defabcghi'\n    return string",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if the given matrix contains a row or column that has the sum greater than the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) > target:\n            return True\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum > target:\n            return True\n    return False\ndef g(target=20):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 172,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if the given matrix contains a row or column that has the sum greater than the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) > target:\n            return True\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum > target:\n            return True\n    return False",
        "solution_func": "def g(target=20):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=4) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=4):\n    return [7*i**2 for i in range(1, k+1)]\n\nassert f(g())\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 172,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=4) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False",
        "solution_func": "def g(k=4):\n    return [7*i**2 for i in range(1, k+1)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=6) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=6):\n    return [3**i for i in range(1, k+1)]\n\nassert f(g())\n\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 172,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=6) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False",
        "solution_func": "def g(k=6):\n    return [3**i for i in range(1, k+1)]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=7) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=7):\n    return [2**i for i in range(1, k+1)]\n\nassert f(g())\n\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 172,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=7) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False",
        "solution_func": "def g(k=7):\n    return [2**i for i in range(1, k+1)]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=4) -> bool:\n    \"\"\"Check if a matrix is a magic square of size n x n\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all((row_sum == col_sum == diagonal_sum1 == diagonal_sum2) for row_sum, col_sum in zip(row_sums, col_sums))\ndef g(n=4):\n    return [[16, 2, 3, 13], [5, 11, 10, 8], [9, 7, 6, 12], [4, 14, 15, 1]]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 172,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=4) -> bool:\n    \"\"\"Check if a matrix is a magic square of size n x n\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all((row_sum == col_sum == diagonal_sum1 == diagonal_sum2) for row_sum, col_sum in zip(row_sums, col_sums))",
        "solution_func": "def g(n=4):\n    return [[16, 2, 3, 13], [5, 11, 10, 8], [9, 7, 6, 12], [4, 14, 15, 1]]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=2) -> bool:\n    \"\"\"Check if a matrix is a magic square of size n x n\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all((row_sum == col_sum == diagonal_sum1 == diagonal_sum2) for row_sum, col_sum in zip(row_sums, col_sums))\ndef g(n=2):\n    return [[1, 2], [3, 4]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 172,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=2) -> bool:\n    \"\"\"Check if a matrix is a magic square of size n x n\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all((row_sum == col_sum == diagonal_sum1 == diagonal_sum2) for row_sum, col_sum in zip(row_sums, col_sums))",
        "solution_func": "def g(n=2):\n    return [[1, 2], [3, 4]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=5) -> bool:\n    \"\"\"Check if a matrix is a magic square of size n x n\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all((row_sum == col_sum == diagonal_sum1 == diagonal_sum2) for row_sum, col_sum in zip(row_sums, col_sums))\ndef g(n=5):\n    return [[17, 24, 1, 8, 15], [23, 5, 7, 14, 16], [4, 6, 13, 20, 22], [10, 12, 19, 21, 3], [11, 18, 25, 2, 9]]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 172,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=5) -> bool:\n    \"\"\"Check if a matrix is a magic square of size n x n\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all((row_sum == col_sum == diagonal_sum1 == diagonal_sum2) for row_sum, col_sum in zip(row_sums, col_sums))",
        "solution_func": "def g(n=5):\n    return [[17, 24, 1, 8, 15], [23, 5, 7, 14, 16], [4, 6, 13, 20, 22], [10, 12, 19, 21, 3], [11, 18, 25, 2, 9]]",
        "map_ix": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\n\ndef f(string: str, target='abc') -> bool:\n    \"\"\"Check if a given string contains a target substring.\"\"\"\n    return target in string\n\ndef g(target='abc'):\n    from itertools import permutations\n    for perm in permutations(target):\n        string = ''.join(perm)\n        if f(string):\n            return string\n    assert False, f\"No valid substring found for target={target}\"\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 172,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\n\ndef f(string: str, target='abc') -> bool:\n    \"\"\"Check if a given string contains a target substring.\"\"\"\n    return target in string",
        "solution_func": "def g(target='abc'):\n    from itertools import permutations\n    for perm in permutations(target):\n        string = ''.join(perm)\n        if f(string):\n            return string",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=3, threshold=1.5, seq=[1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose average is greater than or equal to threshold\"\"\"\n    seq_avg = sum(seq[start:start+k]) / k\n    return seq_avg >= threshold\ndef g(k=3, threshold=1.5, seq=[1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8]):\n    def seq_avg(start):\n        return sum(seq[start:start+k]) / k\n    return max(range(len(seq) - k + 1), key=seq_avg)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 173,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(start: int, k=3, threshold=1.5, seq=[1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose average is greater than or equal to threshold\"\"\"\n    seq_avg = sum(seq[start:start+k]) / k\n    return seq_avg >= threshold",
        "solution_func": "def g(k=3, threshold=1.5, seq=[1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8]):\n    def seq_avg(start):\n        return sum(seq[start:start+k]) / k\n    return max(range(len(seq) - k + 1), key=seq_avg)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=4, threshold=2.0, seq=[2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose average is greater than or equal to threshold\"\"\"\n    seq_avg = sum(seq[start:start+k]) / k\n    return seq_avg >= threshold\ndef g(k=4, threshold=2.0, seq=[2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6]):\n    def seq_avg(start):\n        return sum(seq[start:start+k]) / k\n    return max(range(len(seq) - k + 1), key=seq_avg)\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 173,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(start: int, k=4, threshold=2.0, seq=[2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose average is greater than or equal to threshold\"\"\"\n    seq_avg = sum(seq[start:start+k]) / k\n    return seq_avg >= threshold",
        "solution_func": "def g(k=4, threshold=2.0, seq=[2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6]):\n    def seq_avg(start):\n        return sum(seq[start:start+k]) / k\n    return max(range(len(seq) - k + 1), key=seq_avg)",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=5, threshold=2.5, seq=[2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0, 4.2]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose average is greater than or equal to threshold\"\"\"\n    seq_avg = sum(seq[start:start+k]) / k\n    return seq_avg >= threshold\ndef g(k=5, threshold=2.5, seq=[2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0, 4.2]):\n    def seq_avg(start):\n        return sum(seq[start:start+k]) / k\n    return max(range(len(seq) - k + 1), key=seq_avg)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 173,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(start: int, k=5, threshold=2.5, seq=[2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0, 4.2]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose average is greater than or equal to threshold\"\"\"\n    seq_avg = sum(seq[start:start+k]) / k\n    return seq_avg >= threshold",
        "solution_func": "def g(k=5, threshold=2.5, seq=[2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0, 4.2]):\n    def seq_avg(start):\n        return sum(seq[start:start+k]) / k\n    return max(range(len(seq) - k + 1), key=seq_avg)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if the given number is divisible by m and is also a prime number.\"\"\"\n    prime_nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    return n % m == 0 and n in prime_nums\n\ndef g(m=10):\n    return 2 * m\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 173,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if the given number is divisible by m and is also a prime number.\"\"\"\n    prime_nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    return n % m == 0 and n in prime_nums",
        "solution_func": "def g(m=10):\n    return 2 * m",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given string is a palindrome and has n characters.\"\"\"\n    return s == s[::-1] and len(s) == n\n\ndef g(n=3):\n    return \"rad\"\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 173,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given string is a palindrome and has n characters.\"\"\"\n    return s == s[::-1] and len(s) == n",
        "solution_func": "def g(n=3):\n    return \"rad\"",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(seq: List[int], n=100, length=10) -> bool:\n    \"\"\"Check if the given sequence is a subsequence of [1, 2, 3, ..., n] and its length is equal to length.\"\"\"\n    return all((i in range(1, n + 1) for i in seq)) and len(seq) == length\n\ndef g(n=100, length=10):\n    return list(range(1, length + 1))\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 173,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(seq: List[int], n=100, length=10) -> bool:\n    \"\"\"Check if the given sequence is a subsequence of [1, 2, 3, ..., n] and its length is equal to length.\"\"\"\n    return all((i in range(1, n + 1) for i in seq)) and len(seq) == length",
        "solution_func": "def g(n=100, length=10):\n    return list(range(1, length + 1))",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 3, 5, 7, 9, 11, 13, 15], k=4) -> bool:\n    \"\"\"Given a list of integers and an integer k, determine if there are at least n integers in the list that are divisible by k.\"\"\"\n    return sum((1 for num in lst if num % k == 0)) >= n\ndef g(lst=[1, 3, 5, 7, 9, 11, 13, 15], k=4):\n    return len([num for num in lst if num % k == 0])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 173,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[1, 3, 5, 7, 9, 11, 13, 15], k=4) -> bool:\n    \"\"\"Given a list of integers and an integer k, determine if there are at least n integers in the list that are divisible by k.\"\"\"\n    return sum((1 for num in lst if num % k == 0)) >= n",
        "solution_func": "def g(lst=[1, 3, 5, 7, 9, 11, 13, 15], k=4):\n    return len([num for num in lst if num % k == 0])",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, lst=['apple', 'banana', 'cherry', 'date', 'elderberry'], n=5) -> bool:\n    \"\"\"Given a list of strings and a string s, determine if there are at least n strings in the list that have s as a substring.\"\"\"\n    return sum((1 for word in lst if s in word)) >= n\ndef g(lst=['apple', 'banana', 'cherry', 'date', 'elderberry'], n=5):\n    return len([word for word in lst if s in word])\nassert f(g())\n",
        "emb": null,
        "idx_generation": 173,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, lst=['apple', 'banana', 'cherry', 'date', 'elderberry'], n=5) -> bool:\n    \"\"\"Given a list of strings and a string s, determine if there are at least n strings in the list that have s as a substring.\"\"\"\n    return sum((1 for word in lst if s in word)) >= n",
        "solution_func": "def g(lst=['apple', 'banana', 'cherry', 'date', 'elderberry'], n=5):\n    return len([word for word in lst if s in word])",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\ndef f(n: int, lst=[1, 4, 9, 16, 25, 36, 49, 64], k=2) -> bool:\n    \"\"\"Given a list of integers and an integer k, determine if there are at least n integers in the list that are perfect squares.\"\"\"\n    return sum((1 for num in lst if sqrt(num).is_integer())) >= n\ndef g(lst=[1, 4, 9, 16, 25, 36, 49, 64], k=2):\n    return len([num for num in lst if sqrt(num).is_integer()])\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 173,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\ndef f(n: int, lst=[1, 4, 9, 16, 25, 36, 49, 64], k=2) -> bool:\n    \"\"\"Given a list of integers and an integer k, determine if there are at least n integers in the list that are perfect squares.\"\"\"\n    return sum((1 for num in lst if sqrt(num).is_integer())) >= n",
        "solution_func": "def g(lst=[1, 4, 9, 16, 25, 36, 49, 64], k=2):\n    return len([num for num in lst if sqrt(num).is_integer()])",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 173,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Given a list of integers, find if there exists a subset whose sum is equal to the target_sum\"\"\"\n    def subset_sum(nums, target_sum):\n        if target_sum == 0:\n            return True\n        if not nums or target_sum < 0:\n            return False\n        return subset_sum(nums[1:], target_sum - nums[0]) or subset_sum(nums[1:], target_sum)\n\n    return subset_sum(nums, target_sum)\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 174,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Given a list of integers, find if there exists a subset whose sum is equal to the target_sum\"\"\"\n    def subset_sum(nums, target_sum):\n        if target_sum == 0:\n            return True\n        if not nums or target_sum < 0:\n            return False\n        return subset_sum(nums[1:], target_sum - nums[0]) or subset_sum(nums[1:], target_sum)\n\n    return subset_sum(nums, target_sum)",
        "solution_func": "def g(target_sum=10):\n    return [1, 2, 3, 4]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_value=0) -> bool:\n    \"\"\"Given a matrix, find if there exists a row or column whose sum is equal to the target_value\"\"\"\n    def row_column_sum(matrix, target_value):\n        rows = len(matrix)\n        cols = len(matrix[0])\n\n        for i in range(rows):\n            row_sum = sum(matrix[i])\n            if row_sum == target_value:\n                return True\n\n        for j in range(cols):\n            col_sum = sum(matrix[i][j] for i in range(rows))\n            if col_sum == target_value:\n                return True\n\n        return False\n\n    return row_column_sum(matrix, target_value)\n\ndef g(target_value=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 174,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_value=0) -> bool:\n    \"\"\"Given a matrix, find if there exists a row or column whose sum is equal to the target_value\"\"\"\n    def row_column_sum(matrix, target_value):\n        rows = len(matrix)\n        cols = len(matrix[0])\n\n        for i in range(rows):\n            row_sum = sum(matrix[i])\n            if row_sum == target_value:\n                return True\n\n        for j in range(cols):\n            col_sum = sum(matrix[i][j] for i in range(rows))\n            if col_sum == target_value:\n                return True\n\n        return False\n\n    return row_column_sum(matrix, target_value)",
        "solution_func": "def g(target_value=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_word=\"python\") -> bool:\n    \"\"\"Given a list of words, find if there exists a word that is an anagram of the target_word\"\"\"\n    def is_anagram(word1, word2):\n        return sorted(word1) == sorted(word2)\n\n    return any(is_anagram(word, target_word) for word in words)\n\ndef g(target_word=\"python\"):\n    return [\"nhotyp\", \"java\", \"pyhton\", \"python\"]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 174,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], target_word=\"python\") -> bool:\n    \"\"\"Given a list of words, find if there exists a word that is an anagram of the target_word\"\"\"\n    def is_anagram(word1, word2):\n        return sorted(word1) == sorted(word2)\n\n    return any(is_anagram(word, target_word) for word in words)",
        "solution_func": "def g(target_word=\"python\"):\n    return [\"nhotyp\", \"java\", \"pyhton\", \"python\"]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(strings: List[str], target_length=10) -> bool:\n    \"\"\"Check if the sum of the lengths of all strings in the list is equal to the target length\"\"\"\n    return sum(len(s) for s in strings) == target_length\ndef g(target_length=10):\n    strings = ['hello', 'world', 'python', 'programming']\n    return strings\nassert f(g())\n",
        "emb": null,
        "idx_generation": 174,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(strings: List[str], target_length=10) -> bool:\n    \"\"\"Check if the sum of the lengths of all strings in the list is equal to the target length\"\"\"\n    return sum(len(s) for s in strings) == target_length",
        "solution_func": "def g(target_length=10):\n    strings = ['hello', 'world', 'python', 'programming']\n    return strings",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(strings: List[str], target_length=10) -> bool:\n    \"\"\"Check if there exists a string in the list whose length is equal to the target length\"\"\"\n    return any(len(s) == target_length for s in strings)\ndef g(target_length=10):\n    strings = ['hello', 'world', 'python', 'programming']\n    return strings\nassert f(g())\n",
        "emb": null,
        "idx_generation": 174,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(strings: List[str], target_length=10) -> bool:\n    \"\"\"Check if there exists a string in the list whose length is equal to the target length\"\"\"\n    return any(len(s) == target_length for s in strings)",
        "solution_func": "def g(target_length=10):\n    strings = ['hello', 'world', 'python', 'programming']\n    return strings",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(strings: List[str], target_length=10) -> bool:\n    \"\"\"Check if the number of strings in the list whose length is equal to the target length is greater than 1\"\"\"\n    return sum(len(s) == target_length for s in strings) > 1\ndef g(target_length=10):\n    strings = ['hello', 'world', 'python', 'programming']\n    return strings\nassert f(g())\n",
        "emb": null,
        "idx_generation": 174,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(strings: List[str], target_length=10) -> bool:\n    \"\"\"Check if the number of strings in the list whose length is equal to the target length is greater than 1\"\"\"\n    return sum(len(s) == target_length for s in strings) > 1",
        "solution_func": "def g(target_length=10):\n    strings = ['hello', 'world', 'python', 'programming']\n    return strings",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=2) -> bool:\n    \"\"\"Check if the given string contains the target number of consecutive consonants.\"\"\"\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    count = 0\n    for i in range(len(s)):\n        if s[i] in consonants:\n            count += 1\n            if count == target:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(target=2):\n    return \"bcdfghjklmnpqrstvwxyz\" * target\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 174,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target=2) -> bool:\n    \"\"\"Check if the given string contains the target number of consecutive consonants.\"\"\"\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    count = 0\n    for i in range(len(s)):\n        if s[i] in consonants:\n            count += 1\n            if count == target:\n                return True\n        else:\n            count = 0\n    return False",
        "solution_func": "def g(target=2):\n    return \"bcdfghjklmnpqrstvwxyz\" * target",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the given list contains two consecutive numbers that are the same.\"\"\"\n    for i in range(len(lst)-1):\n        if lst[i] == lst[i+1]:\n            return True\n    return False\n\ndef g():\n    lst = random.sample(range(1, 11), 10)\n    lst.append(random.choice(lst))\n    return lst\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 174,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the given list contains two consecutive numbers that are the same.\"\"\"\n    for i in range(len(lst)-1):\n        if lst[i] == lst[i+1]:\n            return True\n    return False",
        "solution_func": "def g():\n    lst = random.sample(range(1, 11), 10)\n    lst.append(random.choice(lst))\n    return lst",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if any row in the matrix contains the target number.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    matrix.append([10, 11, 12])\n    return matrix\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 174,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if any row in the matrix contains the target number.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(target=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    matrix.append([10, 11, 12])\n    return matrix",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subset of numbers in the given list that adds up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(target + 1):\n            if j >= nums[i - 1]:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    return dp[n][target]\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 174,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import *\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subset of numbers in the given list that adds up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(target + 1):\n            if j >= nums[i - 1]:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    return dp[n][target]",
        "solution_func": "def g(target=100):\n    return [10, 20, 30, 40, 50, 60]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the target value is present in the list of numbers.\"\"\"\n    return target in nums\n    \ndef g(nums: List[int]):\n    return nums\n\nassert f(g([1, 2, 3, 4, 5]), target=3)\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 175,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the target value is present in the list of numbers.\"\"\"\n    return target in nums",
        "solution_func": "def g(nums: List[int]):\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the target value is greater than all the numbers in the list.\"\"\"\n    return all(num < target for num in nums)\n    \ndef g(nums: List[int]):\n    return nums\n\nassert f(g([1, 2, 3, 4, 5]), target=6)\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 175,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the target value is greater than all the numbers in the list.\"\"\"\n    return all(num < target for num in nums)",
        "solution_func": "def g(nums: List[int]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums1: List[int], nums2: List[int]) -> bool:\n    \"\"\"Check if there are any common elements between two lists.\"\"\"\n    return any(num in nums2 for num in nums1)\n    \ndef g(nums1: List[int], nums2: List[int]):\n    return nums1, nums2\n\nassert f(*g([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]))\n",
        "emb": null,
        "idx_generation": 175,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums1: List[int], nums2: List[int]) -> bool:\n    \"\"\"Check if there are any common elements between two lists.\"\"\"\n    return any(num in nums2 for num in nums1)",
        "solution_func": "def g(nums1: List[int], nums2: List[int]):\n    return nums1, nums2",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Determine if the given list contains a subsequence that sums up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]\n\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 175,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Determine if the given list contains a subsequence that sums up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]",
        "solution_func": "def g():\n    nums = [1, 2, 3, 4, 5]\n    return nums",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 175,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"racecar\"",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Determine if the given list contains two numbers that add up to the target value.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 175,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Determine if the given list contains two numbers that add up to the target value.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g():\n    nums = [1, 2, 3, 4, 5]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Find n such that n + m is a perfect square.\"\"\"\n    return (n + m) ** 0.5 % 1 == 0\n\ndef g(m=10):\n    return (m + 1) ** 2 - m\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 175,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Find n such that n + m is a perfect square.\"\"\"\n    return (n + m) ** 0.5 % 1 == 0",
        "solution_func": "def g(m=10):\n    return (m + 1) ** 2 - m",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=7) -> bool:\n    \"\"\"Find n such that n is a multiple of a and a is a divisor of b.\"\"\"\n    return n % a == 0 and b % a == 0\n\ndef g(a=5, b=7):\n    return a * b\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 175,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=5, b=7) -> bool:\n    \"\"\"Find n such that n is a multiple of a and a is a divisor of b.\"\"\"\n    return n % a == 0 and b % a == 0",
        "solution_func": "def g(a=5, b=7):\n    return a * b",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=100, b=20) -> bool:\n    \"\"\"Find n such that n is divisible by a, b, and their sum.\"\"\"\n    return n % a == 0 and n % b == 0 and n % (a + b) == 0\n\ndef g(a=100, b=20):\n    return a * b * (a + b)\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 175,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=100, b=20) -> bool:\n    \"\"\"Find n such that n is divisible by a, b, and their sum.\"\"\"\n    return n % a == 0 and n % b == 0 and n % (a + b) == 0",
        "solution_func": "def g(a=100, b=20):\n    return a * b * (a + b)",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            1,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that adds up to the target sum.\"\"\"\n    return any((nums[i] + nums[j] == target_sum) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums=[10, 20, 30, 40, 50]):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 175,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that adds up to the target sum.\"\"\"\n    return any((nums[i] + nums[j] == target_sum) for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(nums=[10, 20, 30, 40, 50]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target_sum=5) -> bool:\n    \"\"\"Check if the sum of any three numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\n\ndef g(target_sum=5):\n    return [n for n in range(target_sum+1)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 176,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target_sum=5) -> bool:\n    \"\"\"Check if the sum of any three numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))",
        "solution_func": "def g(target_sum=5):\n    return [n for n in range(target_sum+1)]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: List[int], n=10, s=45) -> bool:\n    \"\"\"Construct a list of n distinct even integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all(num % 2 == 0 for num in x) and len(set(x)) == n\n\ndef g(n=10, s=45):\n    x = [num for num in range(2, 2*n+1, 2)]\n    while sum(x) != s:\n        x[-1] += (s - sum(x))\n    return x\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 176,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=10, s=45) -> bool:\n    \"\"\"Construct a list of n distinct even integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all(num % 2 == 0 for num in x) and len(set(x)) == n",
        "solution_func": "def g(n=10, s=45):\n    x = [num for num in range(2, 2*n+1, 2)]\n    while sum(x) != s:\n        x[-1] += (s - sum(x))\n    return x",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='abcdefghi', target='') -> bool:\n    \"\"\"Find the three slice indices that give the specific target in string s\"\"\"\n    (i, j, k) = inds\n    return s[i:j] + s[j:k] == target\n\ndef g(s='abcdefghi', target=''):\n    from itertools import product\n    for (i, j, k) in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j] + s[j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 176,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='abcdefghi', target='') -> bool:\n    \"\"\"Find the three slice indices that give the specific target in string s\"\"\"\n    (i, j, k) = inds\n    return s[i:j] + s[j:k] == target",
        "solution_func": "def g(s='abcdefghi', target=''):\n    from itertools import product\n    for (i, j, k) in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j] + s[j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if any combination of numbers in the list sums up to the target multiplied by 2.\"\"\"\n    for r in range(1, len(nums) + 1):\n        for combination in itertools.combinations(nums, r):\n            if sum(combination) == target * 2:\n                return True\n    return False\n\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 176,
        "target_skills": null,
        "problem_func": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if any combination of numbers in the list sums up to the target multiplied by 2.\"\"\"\n    for r in range(1, len(nums) + 1):\n        for combination in itertools.combinations(nums, r):\n            if sum(combination) == target * 2:\n                return True\n    return False",
        "solution_func": "def g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if any combination of numbers in the list sums up to the target minus 5.\"\"\"\n    for r in range(1, len(nums) + 1):\n        for combination in itertools.combinations(nums, r):\n            if sum(combination) == target - 5:\n                return True\n    return False\n\ndef g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 176,
        "target_skills": null,
        "problem_func": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if any combination of numbers in the list sums up to the target minus 5.\"\"\"\n    for r in range(1, len(nums) + 1):\n        for combination in itertools.combinations(nums, r):\n            if sum(combination) == target - 5:\n                return True\n    return False",
        "solution_func": "def g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if any combination of numbers in the list sums up to the target multiplied by 10.\"\"\"\n    for r in range(1, len(nums) + 1):\n        for combination in itertools.combinations(nums, r):\n            if sum(combination) == target * 10:\n                return True\n    return False\n\ndef g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 176,
        "target_skills": null,
        "problem_func": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if any combination of numbers in the list sums up to the target multiplied by 10.\"\"\"\n    for r in range(1, len(nums) + 1):\n        for combination in itertools.combinations(nums, r):\n            if sum(combination) == target * 10:\n                return True\n    return False",
        "solution_func": "def g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists three distinct numbers in the list whose sum is equal to the target number\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g(target=10):\n    return [i for i in range(target)]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 176,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists three distinct numbers in the list whose sum is equal to the target number\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))",
        "solution_func": "def g(target=10):\n    return [i for i in range(target)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(string: str, sub_string='abc', index=3) -> bool:\n    \"\"\"Find a string whose *last* index of sub_string is index\"\"\"\n    return string.rindex(sub_string) == index\ndef g(sub_string='abc', index=3):\n    i = ord('A')\n    while chr(i) in sub_string:\n        i += 1\n    return sub_string + chr(i) * index\nassert f(g())\n",
        "emb": null,
        "idx_generation": 176,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, sub_string='abc', index=3) -> bool:\n    \"\"\"Find a string whose *last* index of sub_string is index\"\"\"\n    return string.rindex(sub_string) == index",
        "solution_func": "def g(sub_string='abc', index=3):\n    i = ord('A')\n    while chr(i) in sub_string:\n        i += 1\n    return sub_string + chr(i) * index",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=120, b=80, c=3) -> bool:\n    \"\"\"Check if n is a common divisor of a and b and is a power of c\"\"\"\n    return a % n == 0 and b % n == 0 and (math.log(n, c).is_integer())\ndef g(a=120, b=80, c=3):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 176,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, a=120, b=80, c=3) -> bool:\n    \"\"\"Check if n is a common divisor of a and b and is a power of c\"\"\"\n    return a % n == 0 and b % n == 0 and (math.log(n, c).is_integer())",
        "solution_func": "def g(a=120, b=80, c=3):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=6, n=6) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=6, n=6):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 176,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=6, n=6) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]",
        "solution_func": "def g(m=6, n=6):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=2, c='a') -> bool:\n    \"\"\"Check if the character c appears exactly n times in the given string s\"\"\"\n    return s.count(c) == n\n\ndef g(n=2, c='a'):\n    return c * n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 177,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=2, c='a') -> bool:\n    \"\"\"Check if the character c appears exactly n times in the given string s\"\"\"\n    return s.count(c) == n",
        "solution_func": "def g(n=2, c='a'):\n    return c * n",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=4, c='x') -> bool:\n    \"\"\"Check if the character c appears at least n times in the given string s\"\"\"\n    return s.count(c) >= n\n\ndef g(n=4, c='x'):\n    return c * n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 177,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=4, c='x') -> bool:\n    \"\"\"Check if the character c appears at least n times in the given string s\"\"\"\n    return s.count(c) >= n",
        "solution_func": "def g(n=4, c='x'):\n    return c * n",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5, c='y') -> bool:\n    \"\"\"Check if the character c appears at most n times in the given string s\"\"\"\n    return s.count(c) <= n\n\ndef g(n=5, c='y'):\n    return c * n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 177,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=5, c='y') -> bool:\n    \"\"\"Check if the character c appears at most n times in the given string s\"\"\"\n    return s.count(c) <= n",
        "solution_func": "def g(n=5, c='y'):\n    return c * n",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 177,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(radius: float, height: float, volume=1000) -> bool:\n    \"\"\"Check if the given cylindrical container can hold the specified volume.\"\"\"\n    container_volume = math.pi * radius**2 * height\n    return container_volume >= volume\n\ndef g(volume=1000):\n    radius = 5\n    height = 40\n    return (radius, height)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 177,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(radius: float, height: float, volume=1000) -> bool:\n    \"\"\"Check if the given cylindrical container can hold the specified volume.\"\"\"\n    container_volume = math.pi * radius**2 * height\n    return container_volume >= volume",
        "solution_func": "def g(volume=1000):\n    radius = 5\n    height = 40\n    return (radius, height)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 177,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols",
        "solution_func": "def g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": [
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int=10) -> bool:\n    \"\"\"Given a list of integers and a target number, check if there are two numbers in the list that add up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums: List[int]=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 177,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int=10) -> bool:\n    \"\"\"Given a list of integers and a target number, check if there are two numbers in the list that add up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(nums: List[int]=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int=8) -> bool:\n    \"\"\"Given a matrix (2D list of integers) and a target number, check if the target is present in the matrix.\"\"\"\n    m, n = len(matrix), len(matrix[0])\n    low, high = 0, m * n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        num = matrix[mid // n][mid % n]\n        if num == target:\n            return True\n        elif num < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False\n\ndef g(matrix: List[List[int]]=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 177,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target: int=8) -> bool:\n    \"\"\"Given a matrix (2D list of integers) and a target number, check if the target is present in the matrix.\"\"\"\n    m, n = len(matrix), len(matrix[0])\n    low, high = 0, m * n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        num = matrix[mid // n][mid % n]\n        if num == target:\n            return True\n        elif num < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False",
        "solution_func": "def g(matrix: List[List[int]]=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k: int=3) -> bool:\n    \"\"\"Given an array of integers and a number k, check if there are two distinct indices i and j in the array such that arr[i] - arr[j] = k.\"\"\"\n    seen = set()\n    for num in arr:\n        if num - k in seen or num + k in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(arr: List[int]=[1, 3, 5, 6, 9]):\n    return arr\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 177,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], k: int=3) -> bool:\n    \"\"\"Given an array of integers and a number k, check if there are two distinct indices i and j in the array such that arr[i] - arr[j] = k.\"\"\"\n    seen = set()\n    for num in arr:\n        if num - k in seen or num + k in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(arr: List[int]=[1, 3, 5, 6, 9]):\n    return arr",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(inds: List[int], string='  einliJSgeteq ne CAlti') -> bool:\n    \"\"\"Find the indices to make the substring \"intelligent\" appear in reverse order\"\"\"\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'tnegilletni'\ndef g(string='  einliJSgeteq ne CAlti'):\n    target = 'intelligent'\n    j = len(target) - 1\n    ans = []\n    for i in range(len(string)-1, -len(string)-1, -1):\n        while string[i] == target[j]:\n            ans.append(i)\n            j -= 1\n            if j == -1:\n                return ans\nassert f(g())\n",
        "emb": null,
        "idx_generation": 177,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(inds: List[int], string='  einliJSgeteq ne CAlti') -> bool:\n    \"\"\"Find the indices to make the substring \"intelligent\" appear in reverse order\"\"\"\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'tnegilletni'",
        "solution_func": "def g(string='  einliJSgeteq ne CAlti'):\n    target = 'intelligent'\n    j = len(target) - 1\n    ans = []\n    for i in range(len(string)-1, -len(string)-1, -1):\n        while string[i] == target[j]:\n            ans.append(i)\n            j -= 1\n            if j == -1:\n                return ans",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_length=5) -> bool:\n    \"\"\"Check if the length of the given string s is equal to the target_length\"\"\"\n    return len(s) == target_length\n\ndef g(target_length=5):\n    return 'x' * target_length\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 178,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target_length=5) -> bool:\n    \"\"\"Check if the length of the given string s is equal to the target_length\"\"\"\n    return len(s) == target_length",
        "solution_func": "def g(target_length=5):\n    return 'x' * target_length",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_number=10) -> bool:\n    \"\"\"Check if the target_number is present in the given list arr\"\"\"\n    return target_number in arr\n\ndef g(arr=[1, 5, 10, 15, 20]):\n    return arr\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 178,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target_number=10) -> bool:\n    \"\"\"Check if the target_number is present in the given list arr\"\"\"\n    return target_number in arr",
        "solution_func": "def g(arr=[1, 5, 10, 15, 20]):\n    return arr",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"Check if the two given strings are anagrams of each other\"\"\"\n    return sorted(s1) == sorted(s2)\n\ndef g(s1='listen', s2='silent'):\n    return s1, s2\n\nassert f(*g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 178,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"Check if the two given strings are anagrams of each other\"\"\"\n    return sorted(s1) == sorted(s2)",
        "solution_func": "def g(s1='listen', s2='silent'):\n    return s1, s2",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3, c='x') -> bool:\n    \"\"\"Check if the character c appears at least n times in the given string s\"\"\"\n    return s.count(c) >= n\n\ndef g(n=3, c='x'):\n    return c * n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 178,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3, c='x') -> bool:\n    \"\"\"Check if the character c appears at least n times in the given string s\"\"\"\n    return s.count(c) >= n",
        "solution_func": "def g(n=3, c='x'):\n    return c * n",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=2, c='z') -> bool:\n    \"\"\"Check if the character c appears exactly n times in the given string s\"\"\"\n    return s.count(c) == n\n\ndef g(n=2, c='z'):\n    return c * n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 178,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=2, c='z') -> bool:\n    \"\"\"Check if the character c appears exactly n times in the given string s\"\"\"\n    return s.count(c) == n",
        "solution_func": "def g(n=2, c='z'):\n    return c * n",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=4, c='a') -> bool:\n    \"\"\"Check if the character c appears more than n times in the given string s\"\"\"\n    return s.count(c) > n\n\ndef g(n=4, c='a'):\n    return c * n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 178,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=4, c='a') -> bool:\n    \"\"\"Check if the character c appears more than n times in the given string s\"\"\"\n    return s.count(c) > n",
        "solution_func": "def g(n=4, c='a'):\n    return c * n",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target=10, count=2) -> bool:\n    \"\"\"Check if it is possible to select a subset of count numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target, count):\n        if target == 0 and count == 0:\n            return True\n        if not nums or target < 0 or count < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0], count - 1) or subset_sum(nums[1:], target, count)\n    return subset_sum(nums, target, count)\ndef g(nums=[1, 2, 3, 4, 5], count=2):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 178,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target=10, count=2) -> bool:\n    \"\"\"Check if it is possible to select a subset of count numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target, count):\n        if target == 0 and count == 0:\n            return True\n        if not nums or target < 0 or count < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0], count - 1) or subset_sum(nums[1:], target, count)\n    return subset_sum(nums, target, count)",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5], count=2):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target=10, count=2) -> bool:\n    \"\"\"Check if it is possible to select a subset of count numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target, count):\n        if target == 0 and count == 0:\n            return True\n        if not nums or target < 0 or count < 0:\n            return False\n        return subset_sum(nums[:-1], target - nums[-1], count - 1) or subset_sum(nums[:-1], target, count)\n    return subset_sum(nums, target, count)\ndef g(nums=[1, 2, 3, 4, 5], count=2):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 178,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target=10, count=2) -> bool:\n    \"\"\"Check if it is possible to select a subset of count numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target, count):\n        if target == 0 and count == 0:\n            return True\n        if not nums or target < 0 or count < 0:\n            return False\n        return subset_sum(nums[:-1], target - nums[-1], count - 1) or subset_sum(nums[:-1], target, count)\n    return subset_sum(nums, target, count)",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5], count=2):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target=10, count=2) -> bool:\n    \"\"\"Check if it is possible to select a subset of count numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target, count):\n        if target == 0 and count == 0:\n            return True\n        if not nums or target < 0 or count < 0:\n            return False\n        return subset_sum(nums[:-1], target - nums[-1], count - 1) or subset_sum(nums[:-1], target, count - 1)\n    return subset_sum(nums, target, count)\ndef g(nums=[1, 2, 3, 4, 5], count=2):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 178,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target=10, count=2) -> bool:\n    \"\"\"Check if it is possible to select a subset of count numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target, count):\n        if target == 0 and count == 0:\n            return True\n        if not nums or target < 0 or count < 0:\n            return False\n        return subset_sum(nums[:-1], target - nums[-1], count - 1) or subset_sum(nums[:-1], target, count - 1)\n    return subset_sum(nums, target, count)",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5], count=2):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: list, target=100, k=3) -> bool:\n    \"\"\"Given a list of integers, find whether there exists a pair of numbers whose sum is equal to the target value.\n    The pair should consist of k consecutive elements in the list.\n    \"\"\"\n    for i in range(len(arr) - k + 1):\n        if sum(arr[i:i+k]) == target:\n            return True\n    return False\n\ndef g(target=100, k=3):\n    arr = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n    return arr\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 178,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: list, target=100, k=3) -> bool:\n    \"\"\"Given a list of integers, find whether there exists a pair of numbers whose sum is equal to the target value.\n    The pair should consist of k consecutive elements in the list.\n    \"\"\"\n    for i in range(len(arr) - k + 1):\n        if sum(arr[i:i+k]) == target:\n            return True\n    return False",
        "solution_func": "def g(target=100, k=3):\n    arr = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n    return arr",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target.\"\"\"\n    return any((lst[i] + lst[j] == target for i in range(len(lst)) for j in range(i + 1, len(lst))))\ndef g(target=10):\n    return [i for i in range(target - 1)] + [2 * target - 1]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 179,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target.\"\"\"\n    return any((lst[i] + lst[j] == target for i in range(len(lst)) for j in range(i + 1, len(lst))))",
        "solution_func": "def g(target=10):\n    return [i for i in range(target - 1)] + [2 * target - 1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if the sum of the numbers in the list is equal to the square root of a given number.\"\"\"\n    return sum(lst) == math.sqrt(n)\ndef g(n: int):\n    lst = [i for i in range(int(math.sqrt(n)) + 1)]\n    return lst\nassert f(g())\n",
        "emb": null,
        "idx_generation": 179,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if the sum of the numbers in the list is equal to the square root of a given number.\"\"\"\n    return sum(lst) == math.sqrt(n)",
        "solution_func": "def g(n: int):\n    lst = [i for i in range(int(math.sqrt(n)) + 1)]\n    return lst",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Check if a given target number is present in the list.\"\"\"\n    return target in lst\ndef g(lst: List[int]):\n    target = random.choice(lst)\n    return lst, target\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 179,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Check if a given target number is present in the list.\"\"\"\n    return target in lst",
        "solution_func": "def g(lst: List[int]):\n    target = random.choice(lst)\n    return lst, target",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=100, b=20) -> bool:\n    \"\"\"Find n such that n is divisible by both a and b, but not their sum.\"\"\"\n    return n % a == 0 and n % b == 0 and n % (a + b) != 0\n\ndef g(a=100, b=20):\n    return a * b * (a - b)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 179,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=100, b=20) -> bool:\n    \"\"\"Find n such that n is divisible by both a and b, but not their sum.\"\"\"\n    return n % a == 0 and n % b == 0 and n % (a + b) != 0",
        "solution_func": "def g(a=100, b=20):\n    return a * b * (a - b)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=100, b=20) -> bool:\n    \"\"\"Find n such that n is divisible by a, b, and the absolute difference between a and b.\"\"\"\n    return n % a == 0 and n % b == 0 and n % abs(a - b) == 0\n\ndef g(a=100, b=20):\n    return a * b * abs(a - b)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 179,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=100, b=20) -> bool:\n    \"\"\"Find n such that n is divisible by a, b, and the absolute difference between a and b.\"\"\"\n    return n % a == 0 and n % b == 0 and n % abs(a - b) == 0",
        "solution_func": "def g(a=100, b=20):\n    return a * b * abs(a - b)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=100, b=20) -> bool:\n    \"\"\"Find n such that n is divisible by a, b, and their difference.\"\"\"\n    return n % a == 0 and n % b == 0 and n % (a - b) == 0\n\ndef g(a=100, b=20):\n    return a * b * (a - b)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 179,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=100, b=20) -> bool:\n    \"\"\"Find n such that n is divisible by a, b, and their difference.\"\"\"\n    return n % a == 0 and n % b == 0 and n % (a - b) == 0",
        "solution_func": "def g(a=100, b=20):\n    return a * b * (a - b)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target sum\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 179,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target sum\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome and all its characters are uppercase.\"\"\"\n    return s == s[::-1] and s.isupper()\n\ndef g():\n    return 'MADAM'\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 179,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome and all its characters are uppercase.\"\"\"\n    return s == s[::-1] and s.isupper()",
        "solution_func": "def g():\n    return 'MADAM'",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(tri: List[int], edges=[[4, 4], [5, 5], [3, 5], [3, 1], [0, 1], [4, 0], [3, 2], [5, 3], [1, 3], [2, 5], [2, 0]]) -> bool:\n    \"\"\"Find any triangle in the given directed graph, but this time the edges are reversed.\"\"\"\n    (a, b, c) = tri\n    return [b, a] in edges and [c, b] in edges and ([a, c] in edges) and (a != b != c != a)\n\ndef g(edges=[[4, 4], [5, 5], [3, 5], [3, 1], [0, 1], [4, 0], [3, 2], [5, 3], [1, 3], [2, 5], [2, 0]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for (i, j) in edges:\n        if j != i:\n            outs[j].add(i)\n            ins[i].add(j)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 179,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(tri: List[int], edges=[[4, 4], [5, 5], [3, 5], [3, 1], [0, 1], [4, 0], [3, 2], [5, 3], [1, 3], [2, 5], [2, 0]]) -> bool:\n    \"\"\"Find any triangle in the given directed graph, but this time the edges are reversed.\"\"\"\n    (a, b, c) = tri\n    return [b, a] in edges and [c, b] in edges and ([a, c] in edges) and (a != b != c != a)",
        "solution_func": "def g(edges=[[4, 4], [5, 5], [3, 5], [3, 1], [0, 1], [4, 0], [3, 2], [5, 3], [1, 3], [2, 5], [2, 0]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for (i, j) in edges:\n        if j != i:\n            outs[j].add(i)\n            ins[i].add(j)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass",
        "map_ix": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    \"\"\"Find a path with an odd number of nodes from nodes 0 to n in the given digraph on vertices 0, 1,..., n.\"\"\"\n    return p[0] == 0 and p[-1] == len(p) % 2 == max((max(e) for e in edges)) and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    odd_paths = {}\n    even_paths = {0: [0]}\n    n = max((max(e) for e in edges))\n    for _ in range(n+1):\n        for (i, j) in edges:\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n    return odd_paths.get(n)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 179,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    \"\"\"Find a path with an odd number of nodes from nodes 0 to n in the given digraph on vertices 0, 1,..., n.\"\"\"\n    return p[0] == 0 and p[-1] == len(p) % 2 == max((max(e) for e in edges)) and all([[a, b] in edges for (a, b) in zip(p, p[1:])])",
        "solution_func": "def g(edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    odd_paths = {}\n    even_paths = {0: [0]}\n    n = max((max(e) for e in edges))\n    for _ in range(n+1):\n        for (i, j) in edges:\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n    return odd_paths.get(n)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, big_str='abcdefghijklmnopqrstuvwxyz', index=0) -> bool:\n    \"\"\"Find a string whose *last* index in big_str is index\"\"\"\n    return big_str.rindex(s) == index\ndef g(big_str='abcdefghijklmnopqrstuvwxyz', index=0):\n    return big_str[:index+1]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 180,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, big_str='abcdefghijklmnopqrstuvwxyz', index=0) -> bool:\n    \"\"\"Find a string whose *last* index in big_str is index\"\"\"\n    return big_str.rindex(s) == index",
        "solution_func": "def g(big_str='abcdefghijklmnopqrstuvwxyz', index=0):\n    return big_str[:index+1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, big_str='abcdefghijklmnoprstuvwxyz', index=10) -> bool:\n    \"\"\"Check if the string s appears in big_str at least twice\"\"\"\n    return big_str.count(s) >= 2\ndef g(big_str='abcdefghijklmnoprstuvwxyz', index=10):\n    return big_str[:index] + big_str[index+2:]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 180,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, big_str='abcdefghijklmnoprstuvwxyz', index=10) -> bool:\n    \"\"\"Check if the string s appears in big_str at least twice\"\"\"\n    return big_str.count(s) >= 2",
        "solution_func": "def g(big_str='abcdefghijklmnoprstuvwxyz', index=10):\n    return big_str[:index] + big_str[index+2:]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, big_str='hello world', index=6) -> bool:\n    \"\"\"Find a string whose *first* index in big_str is index\"\"\"\n    return big_str.find(s) == index\ndef g(big_str='hello world', index=6):\n    return big_str[index:]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 180,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, big_str='hello world', index=6) -> bool:\n    \"\"\"Find a string whose *first* index in big_str is index\"\"\"\n    return big_str.find(s) == index",
        "solution_func": "def g(big_str='hello world', index=6):\n    return big_str[index:]",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if the target value is present in any row or column of the matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    matrix[1][1] = target\n    return matrix\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 180,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if the target value is present in any row or column of the matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    matrix[1][1] = target\n    return matrix",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose product is divisible by k.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            subseq = nums[i:j]\n            product = 1\n            for num in subseq:\n                product *= num\n            if product % k == 0:\n                return True\n    return False\n\ndef g(k=3):\n    return [i for i in range(1, k+1)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 180,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose product is divisible by k.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            subseq = nums[i:j]\n            product = 1\n            for num in subseq:\n                product *= num\n            if product % k == 0:\n                return True\n    return False",
        "solution_func": "def g(k=3):\n    return [i for i in range(1, k+1)]",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='hello', max_len=6) -> bool:\n    \"\"\"Check if the given word can be formed by replacing a substring in s with a different substring of the same length.\"\"\"\n    if len(word) <= max_len:\n        return word in s\n    for i in range(len(s) - max_len + 1):\n        sub = s[i:i+max_len]\n        if len(set(sub)) == 1:\n            new_word = s[:i] + word + s[i+max_len:]\n            if new_word == s:\n                return True\n    return False\n\ndef g(word='hello', max_len=6):\n    if len(word) <= max_len:\n        return word\n    return word[:max_len//2] + word[max_len//2+1:]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 180,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, word='hello', max_len=6) -> bool:\n    \"\"\"Check if the given word can be formed by replacing a substring in s with a different substring of the same length.\"\"\"\n    if len(word) <= max_len:\n        return word in s\n    for i in range(len(s) - max_len + 1):\n        sub = s[i:i+max_len]\n        if len(set(sub)) == 1:\n            new_word = s[:i] + word + s[i+max_len:]\n            if new_word == s:\n                return True\n    return False",
        "solution_func": "def g(word='hello', max_len=6):\n    if len(word) <= max_len:\n        return word\n    return word[:max_len//2] + word[max_len//2+1:]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=2) -> bool:\n    \"\"\"Check if the given string contains the target number of consecutive consonants.\"\"\"\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    count = 0\n    for i in range(len(s)):\n        if s[i] in consonants:\n            count += 1\n            if count == target:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(target=2):\n    return \"bcdfghjklmnpqrstvwxyz\" * target\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 180,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target=2) -> bool:\n    \"\"\"Check if the given string contains the target number of consecutive consonants.\"\"\"\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    count = 0\n    for i in range(len(s)):\n        if s[i] in consonants:\n            count += 1\n            if count == target:\n                return True\n        else:\n            count = 0\n    return False",
        "solution_func": "def g(target=2):\n    return \"bcdfghjklmnpqrstvwxyz\" * target",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in nums whose difference is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if abs(nums[i] - nums[j]) == target:\n                return True\n    return False\n\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 180,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in nums whose difference is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if abs(nums[i] - nums[j]) == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target=4) -> bool:\n    \"\"\"Check if there is a word in words whose length is equal to the target.\"\"\"\n    for word in words:\n        if len(word) == target:\n            return True\n    return False\n\ndef g(target=4):\n    return ['apple', 'banana', 'cherry', 'date', 'elderberry']\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 180,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], target=4) -> bool:\n    \"\"\"Check if there is a word in words whose length is equal to the target.\"\"\"\n    for word in words:\n        if len(word) == target:\n            return True\n    return False",
        "solution_func": "def g(target=4):\n    return ['apple', 'banana', 'cherry', 'date', 'elderberry']",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if any two numbers in the list sum up to the target\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 180,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if any two numbers in the list sum up to the target\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Find a pair of numbers from the given list whose product is equal to the target value\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] * numbers[j] == target:\n                return True\n    return False\ndef g(target=0):\n    return [target, 1]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 181,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Find a pair of numbers from the given list whose product is equal to the target value\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] * numbers[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    return [target, 1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=2, length=10) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring='abc', count=2, length=10):\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 181,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring='abc', count=2, length=10) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length",
        "solution_func": "def g(substring='abc', count=2, length=10):\n    return substring * count + (length - len(substring) * count) * '^'",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=25) -> bool:\n    \"\"\"Find a number that when squared is equal to a and x is non-negative.\"\"\"\n    return x ** 2 == a and x >= 0\ndef g(a=25):\n    return a ** 0.5\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 181,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=25) -> bool:\n    \"\"\"Find a number that when squared is equal to a and x is non-negative.\"\"\"\n    return x ** 2 == a and x >= 0",
        "solution_func": "def g(a=25):\n    return a ** 0.5",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g())\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 181,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols",
        "solution_func": "def g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols\n\ndef g():\n    matrix = [[9, 8, 7], [6, 5, 4], [3, 2, 1]]\n    return matrix\n\nassert f(g())\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 181,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols",
        "solution_func": "def g():\n    matrix = [[9, 8, 7], [6, 5, 4], [3, 2, 1]]\n    return matrix",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols\n\ndef g():\n    matrix = [[5, 5, 5], [5, 5, 5], [5, 5, 5]]\n    return matrix\n\nassert f(g())\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 181,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols",
        "solution_func": "def g():\n    matrix = [[5, 5, 5], [5, 5, 5], [5, 5, 5]]\n    return matrix",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, s=['apple', 'banana', 'cherry', 'date', 'elderberry'], target_length=6) -> bool:\n    \"\"\"Check if the length of the nth element in the list s matches the target_length\"\"\"\n    return len(s[n]) == target_length\ndef g(s=['apple', 'banana', 'cherry', 'date', 'elderberry'], target_length=6):\n    return len(s[target_length])\nassert f(g())\n",
        "emb": null,
        "idx_generation": 181,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, s=['apple', 'banana', 'cherry', 'date', 'elderberry'], target_length=6) -> bool:\n    \"\"\"Check if the length of the nth element in the list s matches the target_length\"\"\"\n    return len(s[n]) == target_length",
        "solution_func": "def g(s=['apple', 'banana', 'cherry', 'date', 'elderberry'], target_length=6):\n    return len(s[target_length])",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(m: int, n: int, matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> bool:\n    \"\"\"Check if the sum of the elements in the mth row of the matrix is equal to n\"\"\"\n    return sum(matrix[m]) == n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return max(range(len(matrix)), key=lambda i: sum(matrix[i]))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 181,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(m: int, n: int, matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> bool:\n    \"\"\"Check if the sum of the elements in the mth row of the matrix is equal to n\"\"\"\n    return sum(matrix[m]) == n",
        "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return max(range(len(matrix)), key=lambda i: sum(matrix[i]))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='programming', length=5) -> bool:\n    \"\"\"Find a substring of the given length centered within the target string.\"\"\"\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s\ndef g(target='programming', length=5):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            1.0
        ],
        "idx_generation": 181,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='programming', length=5) -> bool:\n    \"\"\"Find a substring of the given length centered within the target string.\"\"\"\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s",
        "solution_func": "def g(target='programming', length=5):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, c='a') -> bool:\n    \"\"\"Check if the given character is present in the string\"\"\"\n    return c in s\ndef g(c='a'):\n    return 'hello'\nassert f(g())\n",
        "emb": null,
        "idx_generation": 181,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, c='a') -> bool:\n    \"\"\"Check if the given character is present in the string\"\"\"\n    return c in s",
        "solution_func": "def g(c='a'):\n    return 'hello'",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=100) -> bool:\n    \"\"\"Find the smallest number 'n' such that the sum of all numbers from 1 to n (inclusive) exceeds the target.\"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n        if total > target:\n            return True\n    return False\n\ndef g(target=100):\n    n = 1\n    while True:\n        if f(n, target):\n            return n\n        n += 1\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 182,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, target=100) -> bool:\n    \"\"\"Find the smallest number 'n' such that the sum of all numbers from 1 to n (inclusive) exceeds the target.\"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n        if total > target:\n            return True\n    return False",
        "solution_func": "def g(target=100):\n    n = 1\n    while True:\n        if f(n, target):\n            return n\n        n += 1",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='python') -> bool:\n    \"\"\"Find if the given substring is a prefix of the string s.\"\"\"\n    return s.startswith(substring)\n\ndef g(substring='python'):\n    return 'python is a programming language'\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 182,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring='python') -> bool:\n    \"\"\"Find if the given substring is a prefix of the string s.\"\"\"\n    return s.startswith(substring)",
        "solution_func": "def g(substring='python'):\n    return 'python is a programming language'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers, find if there exist two numbers whose sum is equal to the target number.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g():\n    return [3, 5, 8, 12, 2, 9]\n\nassert f(g(), 14)\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 182,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers, find if there exist two numbers whose sum is equal to the target number.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g():\n    return [3, 5, 8, 12, 2, 9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_sum=10):\n    return [n for n in range(target_sum+1)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 182,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target_sum=10):\n    return [n for n in range(target_sum+1)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if the difference between any two numbers in the list is equal to target_sum\"\"\"\n    return any(abs(nums[i] - nums[j]) == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_sum=10):\n    return [n for n in range(target_sum+1)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 182,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if the difference between any two numbers in the list is equal to target_sum\"\"\"\n    return any(abs(nums[i] - nums[j]) == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target_sum=10):\n    return [n for n in range(target_sum+1)]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target_sum=10) -> List[List[int]]:\n    \"\"\"Find all combinations of three numbers in the list that sum up to target_sum\"\"\"\n    return [ [nums[i], nums[j], nums[k]] for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)) if nums[i] + nums[j] + nums[k] == target_sum]\n\ndef g(target_sum=10):\n    return [n for n in range(target_sum+1)]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 182,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target_sum=10) -> List[List[int]]:\n    \"\"\"Find all combinations of three numbers in the list that sum up to target_sum\"\"\"\n    return [ [nums[i], nums[j], nums[k]] for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)) if nums[i] + nums[j] + nums[k] == target_sum]",
        "solution_func": "def g(target_sum=10):\n    return [n for n in range(target_sum+1)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(words: List[str], n: int = 3) -> bool:\n    \"\"\"Given a list of words, determine if there exist n+1 words in the list whose lengths sum up to an even number.\"\"\"\n    from itertools import combinations\n    return any(sum(len(word) for word in comb) % 2 == 0 for comb in combinations(words, n+1))\ndef g(n: int = 3):\n    return ['apple', 'banana', 'orange', 'grape', 'watermelon']\nassert f(g(), 5)\n",
        "emb": null,
        "idx_generation": 182,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(words: List[str], n: int = 3) -> bool:\n    \"\"\"Given a list of words, determine if there exist n+1 words in the list whose lengths sum up to an even number.\"\"\"\n    from itertools import combinations\n    return any(sum(len(word) for word in comb) % 2 == 0 for comb in combinations(words, n+1))",
        "solution_func": "def g(n: int = 3):\n    return ['apple', 'banana', 'orange', 'grape', 'watermelon']",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nimport itertools\nfrom typing import*\ndef f(nums: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k+1 elements in the list such that their product is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(math.prod(comb) == target for comb in combinations(nums, k+1))\ndef g(k: int = 3):\n    return [1, 2, 3, 4, 5, 6, 7]\nassert f(g(), 120)\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 182,
        "target_skills": null,
        "problem_func": "import math\nimport itertools\nfrom typing import*\ndef f(nums: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k+1 elements in the list such that their product is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(math.prod(comb) == target for comb in combinations(nums, k+1))",
        "solution_func": "def g(k: int = 3):\n    return [1, 2, 3, 4, 5, 6, 7]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(points: List[Tuple[int, int]], target: int, k: int = 3) -> bool:\n    \"\"\"Given a list of 2D points and a target number, determine if there exist k+1 points in the list such that the sum of their x-coordinates is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(sum(point[0] for point in comb) == target for comb in combinations(points, k+1))\ndef g(k: int = 3):\n    return [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\nassert f(g(), 15)\n",
        "emb": null,
        "idx_generation": 182,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(points: List[Tuple[int, int]], target: int, k: int = 3) -> bool:\n    \"\"\"Given a list of 2D points and a target number, determine if there exist k+1 points in the list such that the sum of their x-coordinates is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(sum(point[0] for point in comb) == target for comb in combinations(points, k+1))",
        "solution_func": "def g(k: int = 3):\n    return [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any(target - num in nums for num in nums)\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 182,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any(target - num in nums for num in nums)",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            1,
            1,
            1,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Given a list of numbers and a target number, determine if there exists two numbers in the list whose sum is equal to the target number\"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums: List[int], target: int):\n    return nums, target\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 183,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Given a list of numbers and a target number, determine if there exists two numbers in the list whose sum is equal to the target number\"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False",
        "solution_func": "def g(nums: List[int], target: int):\n    return nums, target",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Given a list of numbers, determine if there exists three numbers in the list such that their sum is equal to zero\"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n-2):\n        if i > 0 and nums[i] == nums[i-1]:\n            continue\n        left = i + 1\n        right = n - 1\n        while left < right:\n            total = nums[i] + nums[left] + nums[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(nums: List[int]):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 183,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Given a list of numbers, determine if there exists three numbers in the list such that their sum is equal to zero\"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n-2):\n        if i > 0 and nums[i] == nums[i-1]:\n            continue\n        left = i + 1\n        right = n - 1\n        while left < right:\n            total = nums[i] + nums[left] + nums[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False",
        "solution_func": "def g(nums: List[int]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"Given a list of numbers and a target number, return the index of the target number in the list. If the target number is not in the list, return -1\"\"\"\n    left = 0\n    right = len(nums) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\ndef g(nums: List[int], target: int):\n    return nums, target\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 183,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"Given a list of numbers and a target number, return the index of the target number in the list. If the target number is not in the list, return -1\"\"\"\n    left = 0\n    right = len(nums) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
        "solution_func": "def g(nums: List[int], target: int):\n    return nums, target",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: Tuple[int, int], a=1, b=2, c=10) -> bool:\n    \"\"\"Check if a point lies inside a circle.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return (x-a)**2 + (y-b)**2 <= c**2\ndef g(a=1, b=2, c=10):\n    return (a+c//2, b+c//2)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 183,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(e: Tuple[int, int], a=1, b=2, c=10) -> bool:\n    \"\"\"Check if a point lies inside a circle.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return (x-a)**2 + (y-b)**2 <= c**2",
        "solution_func": "def g(a=1, b=2, c=10):\n    return (a+c//2, b+c//2)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: List[int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies on a line.\nSolution should be a list of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return (a*x + b*y) == c\ndef g(a=1, b=2, c=10, d=1000):\n    return [c//a, (c-(c//a)*a)//b]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 183,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(e: List[int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies on a line.\nSolution should be a list of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return (a*x + b*y) == c",
        "solution_func": "def g(a=1, b=2, c=10, d=1000):\n    return [c//a, (c-(c//a)*a)//b]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: List[int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies inside a triangle.\nSolution should be a list of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return (0 <= x <= a) and (0 <= y <= b) and (x/a + y/b <= 1)\ndef g(a=1, b=2, c=10, d=1000):\n    return [a//2, b//2]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 183,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(e: List[int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies inside a triangle.\nSolution should be a list of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return (0 <= x <= a) and (0 <= y <= b) and (x/a + y/b <= 1)",
        "solution_func": "def g(a=1, b=2, c=10, d=1000):\n    return [a//2, b//2]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], n=3, target=15) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2]) and len(rows) == n\ndef g(n=3, target=15):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix\n    assert False, f\"No magic square found for n={n}\"\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 183,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], n=3, target=15) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2]) and len(rows) == n",
        "solution_func": "def g(n=3, target=15):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], n=4, target=20) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2]) and len(rows) == n\ndef g(n=4, target=20):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix\n    assert False, f\"No magic square found for n={n}\"\nassert f(g())\n",
        "emb": null,
        "idx_generation": 183,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], n=4, target=20) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2]) and len(rows) == n",
        "solution_func": "def g(n=4, target=20):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], n=5, target=25) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2]) and len(rows) == n\ndef g(n=5, target=25):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix\n    assert False, f\"No magic square found for n={n}\"\nassert f(g())\n",
        "emb": null,
        "idx_generation": 183,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], n=5, target=25) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2]) and len(rows) == n",
        "solution_func": "def g(n=5, target=25):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='abcdefghi', target='') -> bool:\n    \"\"\"Find the four slice indices that give the specific target in string s\"\"\"\n    (i, j, k, l) = inds\n    return s[i:j] + s[k:l] == target\n\ndef g(s='abcdefghi', target=''):\n    from itertools import product\n    for (i, j, k, l) in product(range(-len(s) - 1, len(s) + 1), repeat=4):\n        try:\n            if s[i:j] + s[k:l] == target:\n                return [i, j, k, l]\n        except (IndexError, ValueError):\n            pass\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 183,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='abcdefghi', target='') -> bool:\n    \"\"\"Find the four slice indices that give the specific target in string s\"\"\"\n    (i, j, k, l) = inds\n    return s[i:j] + s[k:l] == target",
        "solution_func": "def g(s='abcdefghi', target=''):\n    from itertools import product\n    for (i, j, k, l) in product(range(-len(s) - 1, len(s) + 1), repeat=4):\n        try:\n            if s[i:j] + s[k:l] == target:\n                return [i, j, k, l]\n        except (IndexError, ValueError):\n            pass",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[3, 6, 9, 12, 15], upper_bound=1000) -> bool:\n    \"\"\"Check if n is divisible by all numbers in the list and is less than or equal to the upper_bound\"\"\"\n    return all((n % i == 0 for i in lst)) and 0 < n <= upper_bound\ndef g(lst=[3, 6, 9, 12, 15], upper_bound=1000):\n    ans = 1\n    for i in lst:\n        (m, n) = (min(i, ans), max(i, ans))\n        while m > 0:\n            (m, n) = (n % m, m)\n        ans *= i // n\n    return ans\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 184,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[3, 6, 9, 12, 15], upper_bound=1000) -> bool:\n    \"\"\"Check if n is divisible by all numbers in the list and is less than or equal to the upper_bound\"\"\"\n    return all((n % i == 0 for i in lst)) and 0 < n <= upper_bound",
        "solution_func": "def g(lst=[3, 6, 9, 12, 15], upper_bound=1000):\n    ans = 1\n    for i in lst:\n        (m, n) = (min(i, ans), max(i, ans))\n        while m > 0:\n            (m, n) = (n % m, m)\n        ans *= i // n\n    return ans",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst=[2, 4, 6, 8, 10], upper_bound=100) -> bool:\n    \"\"\"Check if n is divisible by all numbers in the list and is less than or equal to the upper_bound\"\"\"\n    return all((n % i == 0 for i in lst)) and 0 < n <= upper_bound\ndef g(lst=[2, 4, 6, 8, 10], upper_bound=100):\n    ans = 1\n    for i in lst:\n        (m, n) = (min(i, ans), max(i, ans))\n        while m > 0:\n            (m, n) = (n % m, m)\n        ans *= i // n\n    return ans\nassert f(g())\n",
        "emb": null,
        "idx_generation": 184,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[2, 4, 6, 8, 10], upper_bound=100) -> bool:\n    \"\"\"Check if n is divisible by all numbers in the list and is less than or equal to the upper_bound\"\"\"\n    return all((n % i == 0 for i in lst)) and 0 < n <= upper_bound",
        "solution_func": "def g(lst=[2, 4, 6, 8, 10], upper_bound=100):\n    ans = 1\n    for i in lst:\n        (m, n) = (min(i, ans), max(i, ans))\n        while m > 0:\n            (m, n) = (n % m, m)\n        ans *= i // n\n    return ans",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[5, 10, 15, 20, 25], upper_bound=500) -> bool:\n    \"\"\"Check if n is divisible by all numbers in the list and is less than or equal to the upper_bound\"\"\"\n    return all((n % i == 0 for i in lst)) and 0 < n <= upper_bound\ndef g(lst=[5, 10, 15, 20, 25], upper_bound=500):\n    ans = 1\n    for i in lst:\n        (m, n) = (min(i, ans), max(i, ans))\n        while m > 0:\n            (m, n) = (n % m, m)\n        ans *= i // n\n    return ans\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 184,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst=[5, 10, 15, 20, 25], upper_bound=500) -> bool:\n    \"\"\"Check if n is divisible by all numbers in the list and is less than or equal to the upper_bound\"\"\"\n    return all((n % i == 0 for i in lst)) and 0 < n <= upper_bound",
        "solution_func": "def g(lst=[5, 10, 15, 20, 25], upper_bound=500):\n    ans = 1\n    for i in lst:\n        (m, n) = (min(i, ans), max(i, ans))\n        while m > 0:\n            (m, n) = (n % m, m)\n        ans *= i // n\n    return ans",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list whose sum is equal to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=20):\n    return [10, 5, 8, 3, 2]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 184,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list whose sum is equal to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=20):\n    return [10, 5, 8, 3, 2]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='hello', num_duplicates=2) -> bool:\n    \"\"\"Check if a string contains the target string repeated multiple times.\"\"\"\n    return target*num_duplicates in s\n\ndef g(target='hello', num_duplicates=2):\n    return target*num_duplicates\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 184,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='hello', num_duplicates=2) -> bool:\n    \"\"\"Check if a string contains the target string repeated multiple times.\"\"\"\n    return target*num_duplicates in s",
        "solution_func": "def g(target='hello', num_duplicates=2):\n    return target*num_duplicates",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains a subsequence of consecutive numbers in ascending order.\"\"\"\n    sorted_nums = sorted(nums)\n    for i in range(len(nums)-1):\n        if sorted_nums[i+1] - sorted_nums[i] != 1:\n            return False\n    return True\n\ndef g():\n    return [5, 2, 3, 1, 4]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 184,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains a subsequence of consecutive numbers in ascending order.\"\"\"\n    sorted_nums = sorted(nums)\n    for i in range(len(nums)-1):\n        if sorted_nums[i+1] - sorted_nums[i] != 1:\n            return False\n    return True",
        "solution_func": "def g():\n    return [5, 2, 3, 1, 4]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if any two numbers in the list 'nums' have a sum greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] > target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 184,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if any two numbers in the list 'nums' have a sum greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] > target:\n                return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if all numbers in the list 'nums' are greater than the target value.\"\"\"\n    return all(num > target for num in nums)\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 184,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if all numbers in the list 'nums' are greater than the target value.\"\"\"\n    return all(num > target for num in nums)",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if the target value is greater than any number in the list 'nums'.\"\"\"\n    return any(target > num for num in nums)\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 184,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if the target value is greater than any number in the list 'nums'.\"\"\"\n    return any(target > num for num in nums)",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Determine if the given list contains a subsequence that has a product equal to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j // nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]\n\ndef g():\n    nums = [2, 3, 4, 5, 6]\n    return nums\n\nassert f(g(), 120)\n",
        "emb": null,
        "idx_generation": 184,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Determine if the given list contains a subsequence that has a product equal to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j // nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]",
        "solution_func": "def g():\n    nums = [2, 3, 4, 5, 6]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(inds: List[int], s='kibozekiboze', target='') -> bool:\n    \"\"\"Find the three slice indices that give the specific target in string s\"\"\"\n    (i, j, k) = inds\n    return s[i:j:k] == target\n\ndef g(s='kibozekiboze', target=''):\n    for i in range(len(s) - 2):\n        for j in range(i + 1, len(s) - 1):\n            for k in range(j + 1, len(s)):\n                if s[i:k] == target:\n                    return [i, j, k]\n    return [0, 0, 0]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 185,
        "target_skills": null,
        "problem_func": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(inds: List[int], s='kibozekiboze', target='') -> bool:\n    \"\"\"Find the three slice indices that give the specific target in string s\"\"\"\n    (i, j, k) = inds\n    return s[i:j:k] == target",
        "solution_func": "def g(s='kibozekiboze', target=''):\n    for i in range(len(s) - 2):\n        for j in range(i + 1, len(s) - 1):\n            for k in range(j + 1, len(s)):\n                if s[i:k] == target:\n                    return [i, j, k]\n    return [0, 0, 0]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there exist two numbers in the given list that sum up to the target.\"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 185,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there exist two numbers in the given list that sum up to the target.\"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there exist three numbers in the given list that sum up to the target.\"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            curr_sum = nums[i] + nums[left] + nums[right]\n            if curr_sum == target:\n                return True\n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 185,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find if there exist three numbers in the given list that sum up to the target.\"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            curr_sum = nums[i] + nums[left] + nums[right]\n            if curr_sum == target:\n                return True\n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[4, 8, 12, 16], target=2) -> bool:\n    \"\"\"Check if all numbers in the list are divisible by the target number.\"\"\"\n    return all((i % target == 0 for i in nums)) and target != 0\ndef g(nums=[4, 8, 12, 16], target=2):\n    return target\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 185,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[4, 8, 12, 16], target=2) -> bool:\n    \"\"\"Check if all numbers in the list are divisible by the target number.\"\"\"\n    return all((i % target == 0 for i in nums)) and target != 0",
        "solution_func": "def g(nums=[4, 8, 12, 16], target=2):\n    return target",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(s: str, target=\"Python\") -> bool:\n    \"\"\"Check if the target string is present at the start of the given string.\"\"\"\n    return s.startswith(target)\ndef g(target=\"Python\"):\n    return \"Python is a widely used programming language.\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 185,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\ndef f(s: str, target=\"Python\") -> bool:\n    \"\"\"Check if the target string is present at the start of the given string.\"\"\"\n    return s.startswith(target)",
        "solution_func": "def g(target=\"Python\"):\n    return \"Python is a widely used programming language.\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(i: int, li=[10, 20, 30, 40, 50], target=40) -> bool:\n    \"\"\"Check if the item at the given index in the list is equal to the target value.\"\"\"\n    return li[i] == target\ndef g(li=[10, 20, 30, 40, 50], target=40):\n    return li.index(target)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 185,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\ndef f(i: int, li=[10, 20, 30, 40, 50], target=40) -> bool:\n    \"\"\"Check if the item at the given index in the list is equal to the target value.\"\"\"\n    return li[i] == target",
        "solution_func": "def g(li=[10, 20, 30, 40, 50], target=40):\n    return li.index(target)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=3, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if the given string contains the target number of consecutive vowels from a provided list of vowels.\"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n            if count == target:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(target=3, vowels=['a', 'e', 'i', 'o', 'u']):\n    return \"aeiou\" * target\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 185,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target=3, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if the given string contains the target number of consecutive vowels from a provided list of vowels.\"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n            if count == target:\n                return True\n        else:\n            count = 0\n    return False",
        "solution_func": "def g(target=3, vowels=['a', 'e', 'i', 'o', 'u']):\n    return \"aeiou\" * target",
        "map_ix": [
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=3) -> bool:\n    \"\"\"Check if the given string contains the target number of consecutive consonants.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(s)):\n        if s[i] not in vowels:\n            count += 1\n            if count == target:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(target=3):\n    return \"bcdfghjklmnpqrstvwxyz\" * target\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 185,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target=3) -> bool:\n    \"\"\"Check if the given string contains the target number of consecutive consonants.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(s)):\n        if s[i] not in vowels:\n            count += 1\n            if count == target:\n                return True\n        else:\n            count = 0\n    return False",
        "solution_func": "def g(target=3):\n    return \"bcdfghjklmnpqrstvwxyz\" * target",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=3, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if the given string contains at least one instance of each vowel from a provided list of vowels.\"\"\"\n    vowel_count = {vowel: 0 for vowel in vowels}\n    for char in s:\n        if char in vowels:\n            vowel_count[char] += 1\n    return all(count > 0 for count in vowel_count.values())\n\ndef g(target=3, vowels=['a', 'e', 'i', 'o', 'u']):\n    return \"aeiou\" * target\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 185,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target=3, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if the given string contains at least one instance of each vowel from a provided list of vowels.\"\"\"\n    vowel_count = {vowel: 0 for vowel in vowels}\n    for char in s:\n        if char in vowels:\n            vowel_count[char] += 1\n    return all(count > 0 for count in vowel_count.values())",
        "solution_func": "def g(target=3, vowels=['a', 'e', 'i', 'o', 'u']):\n    return \"aeiou\" * target",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: Tuple[int, int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies inside a circle.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return ((x - a)**2 + (y - b)**2) <= c**2\ndef g(a=1, b=2, c=10):\n    return (a, b)\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 185,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(e: Tuple[int, int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies inside a circle.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return ((x - a)**2 + (y - b)**2) <= c**2",
        "solution_func": "def g(a=1, b=2, c=10):\n    return (a, b)",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 186,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False",
        "solution_func": "def g(target=100):\n    return [10, 20, 30, 40, 50, 60]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [-2, -3, 5, 1, 6]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 186,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    return [-2, -3, 5, 1, 6]",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is greater than or equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) >= target:\n                return True\n    return False\n\ndef g(target=50):\n    return [20, 30, 10, 40, 50, 60]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 186,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is greater than or equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) >= target:\n                return True\n    return False",
        "solution_func": "def g(target=50):\n    return [20, 30, 10, 40, 50, 60]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers from the list whose sum is equal to the target value.\"\"\"\n    return any((n1 + n2 == target for i, n1 in enumerate(numbers) for n2 in numbers[i+1:]))\n\ndef g(target=10):\n    return [(i, j) for i in range(target) for j in range(target) if i + j == target]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 186,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers from the list whose sum is equal to the target value.\"\"\"\n    return any((n1 + n2 == target for i, n1 in enumerate(numbers) for n2 in numbers[i+1:]))",
        "solution_func": "def g(target=10):\n    return [(i, j) for i in range(target) for j in range(target) if i + j == target]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], letter='a') -> bool:\n    \"\"\"Check if all words in the list contain the given letter.\"\"\"\n    return all((letter in word for word in words))\n\ndef g(letter='a'):\n    return ['apple', 'banana', 'orange', 'grapefruit']\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 186,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], letter='a') -> bool:\n    \"\"\"Check if all words in the list contain the given letter.\"\"\"\n    return all((letter in word for word in words))",
        "solution_func": "def g(letter='a'):\n    return ['apple', 'banana', 'orange', 'grapefruit']",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of three numbers from the list whose sum is equal to the target value.\"\"\"\n    return any((n1 + n2 + n3 == target for i, n1 in enumerate(nums) for j, n2 in enumerate(nums[i+1:]) for n3 in nums[i+j+2:]))\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 186,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of three numbers from the list whose sum is equal to the target value.\"\"\"\n    return any((n1 + n2 + n3 == target for i, n1 in enumerate(nums) for j, n2 in enumerate(nums[i+1:]) for n3 in nums[i+j+2:]))",
        "solution_func": "def g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=7) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose product is divisible by k.\"\"\"\n    prefix_product = 1\n    remainders = {1}\n    for num in nums:\n        prefix_product = (prefix_product * num) % k\n        if prefix_product in remainders:\n            return True\n        remainders.add(prefix_product)\n    return False\n\ndef g(k=7):\n    return [i+1 for i in range(1, k+1)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 186,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], k=7) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose product is divisible by k.\"\"\"\n    prefix_product = 1\n    remainders = {1}\n    for num in nums:\n        prefix_product = (prefix_product * num) % k\n        if prefix_product in remainders:\n            return True\n        remainders.add(prefix_product)\n    return False",
        "solution_func": "def g(k=7):\n    return [i+1 for i in range(1, k+1)]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=10) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k and contains at least 4 elements.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    count = 0\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            count += 1\n            if count >= 4:\n                return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=10):\n    return [i*2 for i in range(1, k+1)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 186,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], k=10) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k and contains at least 4 elements.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    count = 0\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            count += 1\n            if count >= 4:\n                return True\n        remainders.add(prefix_sum)\n    return False",
        "solution_func": "def g(k=10):\n    return [i*2 for i in range(1, k+1)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], k=4) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k and contains only prime numbers.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    prime_nums = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders and num not in prime_nums:\n            return False\n        remainders.add(prefix_sum)\n    return True\n\ndef g(k=4):\n    return [i for i in range(1, k+1)]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 186,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], k=4) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k and contains only prime numbers.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    prime_nums = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders and num not in prime_nums:\n            return False\n        remainders.add(prefix_sum)\n    return True",
        "solution_func": "def g(k=4):\n    return [i for i in range(1, k+1)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=4) -> bool:\n    \"\"\"Check if the given string contains the target number of consecutive vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n            if count == target:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(target=4):\n    return \"aeiou\" * target\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 186,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target=4) -> bool:\n    \"\"\"Check if the given string contains the target number of consecutive vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n            if count == target:\n                return True\n        else:\n            count = 0\n    return False",
        "solution_func": "def g(target=4):\n    return \"aeiou\" * target",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 187,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums",
        "map_ix": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='abc') -> bool:\n    \"\"\"Check if the substring is present in the given string.\"\"\"\n    return substr in string\ndef g(substr='abc'):\n    string = \"xyzabc123\"\n    return string\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 187,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substr='abc') -> bool:\n    \"\"\"Check if the substring is present in the given string.\"\"\"\n    return substr in string",
        "solution_func": "def g(substr='abc'):\n    string = \"xyzabc123\"\n    return string",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: List[int], n=5) -> bool:\n    \"\"\"Check if the given list contains exactly n prime numbers.\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in numbers if is_prime(num)]\n    return len(primes) == n\ndef g(n=5):\n    numbers = [2, 4, 5, 7, 10, 11, 13, 17, 19, 20]\n    return numbers\nassert f(g())\n",
        "emb": null,
        "idx_generation": 187,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], n=5) -> bool:\n    \"\"\"Check if the given list contains exactly n prime numbers.\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in numbers if is_prime(num)]\n    return len(primes) == n",
        "solution_func": "def g(n=5):\n    numbers = [2, 4, 5, 7, 10, 11, 13, 17, 19, 20]\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with a sum of zero.\"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum in prefix_sums or prefix_sum == 0:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\n\ndef g():\n    return [4, -2, -3, 1, 6]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 187,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with a sum of zero.\"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum in prefix_sums or prefix_sum == 0:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False",
        "solution_func": "def g():\n    return [4, -2, -3, 1, 6]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Given an integer n, check if it is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 187,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Given an integer n, check if it is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix of integers, check if it is a symmetric matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    if rows != cols:\n        return False\n\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 187,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix of integers, check if it is a symmetric matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    if rows != cols:\n        return False\n\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True",
        "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"Check if the sum of the n smallest numbers in the list is greater than or equal to n^2.\"\"\"\n    assert n <= len(nums), 'Hint: n is greater than or equal to the length of the list.'\n    nums.sort()\n    return sum(nums[:n]) >= n ** 2\ndef g(nums: List[int]):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 187,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"Check if the sum of the n smallest numbers in the list is greater than or equal to n^2.\"\"\"\n    assert n <= len(nums), 'Hint: n is greater than or equal to the length of the list.'\n    nums.sort()\n    return sum(nums[:n]) >= n ** 2",
        "solution_func": "def g(nums: List[int]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums: List[int], target: int):\n    return nums, target\nassert f(g())\n",
        "emb": null,
        "idx_generation": 187,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums: List[int], target: int):\n    return nums, target",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the sum of each row in the matrix is equal to a unique number.\"\"\"\n    sums = []\n    for row in matrix:\n        row_sum = sum(row)\n        if row_sum in sums:\n            return False\n        sums.append(row_sum)\n    return True\ndef g(matrix: List[List[int]]):\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 187,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(n: int, matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the sum of each row in the matrix is equal to a unique number.\"\"\"\n    sums = []\n    for row in matrix:\n        row_sum = sum(row)\n        if row_sum in sums:\n            return False\n        sums.append(row_sum)\n    return True",
        "solution_func": "def g(matrix: List[List[int]]):\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(array: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of integers in the array that sum up to the target value.\"\"\"\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            if array[i] + array[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), target=9)\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 187,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(array: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of integers in the array that sum up to the target value.\"\"\"\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            if array[i] + array[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Return True if there exists three elements in the list whose sum is equal to the target, and False otherwise.\"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 188,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Return True if there exists three elements in the list whose sum is equal to the target, and False otherwise.\"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(x: float, y: float, radius=5.0) -> bool:\n    \"\"\"Check if the given point (x, y) lies inside or on the circumference of a circle with the given radius.\"\"\"\n    distance = math.sqrt(x**2 + y**2)\n    return distance <= radius\ndef g(radius=5.0):\n    x = 3.0\n    y = 4.0\n    return x, y\nassert f(*g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 188,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\ndef f(x: float, y: float, radius=5.0) -> bool:\n    \"\"\"Check if the given point (x, y) lies inside or on the circumference of a circle with the given radius.\"\"\"\n    distance = math.sqrt(x**2 + y**2)\n    return distance <= radius",
        "solution_func": "def g(radius=5.0):\n    x = 3.0\n    y = 4.0\n    return x, y",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Return True if there exists a pair of elements in the list whose product is equal to the target, and False otherwise.\"\"\"\n    for i in range(len(nums)-1):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\ndef g(target=20):\n    nums = [2, 4, 6, 8, 10]\n    return nums\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 188,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Return True if there exists a pair of elements in the list whose product is equal to the target, and False otherwise.\"\"\"\n    for i in range(len(nums)-1):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=20):\n    nums = [2, 4, 6, 8, 10]\n    return nums",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=8, n=8) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=8, n=8):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(3, 3)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(3, 3)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 188,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=8, n=8) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]",
        "solution_func": "def g(m=8, n=8):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(3, 3)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(3, 3)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return tour[0] == [0, 0] and tour[-1] == [m-1, n-1]\ndef g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "emb": null,
        "idx_generation": 188,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return tour[0] == [0, 0] and tour[-1] == [m-1, n-1]",
        "solution_func": "def g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == 12\ndef g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == 12:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 188,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == 12",
        "solution_func": "def g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == 12:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])",
        "map_ix": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, target=100) -> bool:\n    \"\"\"Find the smallest number that can be divided by all numbers from 1 to n\"\"\"\n    num = 1\n    for i in range(1, n+1):\n        if num % i != 0:\n            num += 1\n            i = 1\n    return num == target\n\ndef g(n=10):\n    return n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 188,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, target=100) -> bool:\n    \"\"\"Find the smallest number that can be divided by all numbers from 1 to n\"\"\"\n    num = 1\n    for i in range(1, n+1):\n        if num % i != 0:\n            num += 1\n            i = 1\n    return num == target",
        "solution_func": "def g(n=10):\n    return n",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Find two numbers from the list that multiply to the target value\"\"\"\n    return any((numbers[i] * numbers[j] == target for i in range(len(numbers)) for j in range(i + 1, len(numbers))))\n\ndef g(numbers=[2, 4, 6, 8]):\n    return numbers\nassert f(g())\n",
        "emb": null,
        "idx_generation": 188,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Find two numbers from the list that multiply to the target value\"\"\"\n    return any((numbers[i] * numbers[j] == target for i in range(len(numbers)) for j in range(i + 1, len(numbers))))",
        "solution_func": "def g(numbers=[2, 4, 6, 8]):\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=2) -> bool:\n    \"\"\"What are the first two digits of 2^n?\"\"\"\n    return int(s) == 2 ** n\n\ndef g(n=2):\n    return str(2 ** n)[:2]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 188,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=2) -> bool:\n    \"\"\"What are the first two digits of 2^n?\"\"\"\n    return int(s) == 2 ** n",
        "solution_func": "def g(n=2):\n    return str(2 ** n)[:2]",
        "map_ix": [
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=5):\n    return [i**3 for i in range(1, k+1)]\n\nassert f(g())\n\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 188,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False",
        "solution_func": "def g(k=5):\n    return [i**3 for i in range(1, k+1)]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Determine if there exists a subset of numbers in the given array that adds up to the target sum\"\"\"\n    dp = [[False] * (target + 1) for _ in range(len(arr) + 1)]\n    for i in range(len(arr) + 1):\n        dp[i][0] = True\n    for i in range(1, len(arr) + 1):\n        for j in range(1, target + 1):\n            if arr[i-1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i-1]]\n    return dp[len(arr)][target]\n\ndef g(target=100):\n    return [i for i in range(1, target+1)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 189,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Determine if there exists a subset of numbers in the given array that adds up to the target sum\"\"\"\n    dp = [[False] * (target + 1) for _ in range(len(arr) + 1)]\n    for i in range(len(arr) + 1):\n        dp[i][0] = True\n    for i in range(1, len(arr) + 1):\n        for j in range(1, target + 1):\n            if arr[i-1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i-1]]\n    return dp[len(arr)][target]",
        "solution_func": "def g(target=100):\n    return [i for i in range(1, target+1)]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, k=0) -> bool:\n    \"\"\"Check if a string can be split into k equal parts\"\"\"\n    if len(s) % k != 0:\n        return False\n    part_length = len(s) // k\n    for i in range(k):\n        if s[i*part_length:(i+1)*part_length] != s[0:part_length]:\n            return False\n    return True\n\ndef g(k=0):\n    s = 'abc' * k\n    return s\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 189,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, k=0) -> bool:\n    \"\"\"Check if a string can be split into k equal parts\"\"\"\n    if len(s) % k != 0:\n        return False\n    part_length = len(s) // k\n    for i in range(k):\n        if s[i*part_length:(i+1)*part_length] != s[0:part_length]:\n            return False\n    return True",
        "solution_func": "def g(k=0):\n    s = 'abc' * k\n    return s",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the given array that adds up to the target number\"\"\"\n    seen = set()\n    for num in arr:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 189,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the given array that adds up to the target number\"\"\"\n    seen = set()\n    for num in arr:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['Hello', 'World']) -> bool:\n    \"\"\"Check if all words in the given list are present in the given string.\"\"\"\n    return all(word in s for word in words)\n\ndef g(words=['Hello', 'World']):\n    return \"Hello World!\"\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 189,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, words=['Hello', 'World']) -> bool:\n    \"\"\"Check if all words in the given list are present in the given string.\"\"\"\n    return all(word in s for word in words)",
        "solution_func": "def g(words=['Hello', 'World']):\n    return \"Hello World!\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers, find if there exist three numbers whose sum is equal to the target number.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [2, 5, 7, 11, 3, 9]\n\nassert f(g(), 20)\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 189,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers, find if there exist three numbers whose sum is equal to the target number.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False",
        "solution_func": "def g():\n    return [2, 5, 7, 11, 3, 9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[15, 25, 35, 45], upper_bound=100) -> bool:\n    \"\"\"Find a small common multiple of the list of integers.\"\"\"\n    return all((n % i == 0 for i in nums)) and n <= upper_bound\n\ndef g(nums=[15, 25, 35, 45], upper_bound=100):\n    n = max(nums)\n    while True:\n        if all((n % i == 0 for i in nums)):\n            return n\n        n += 1\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 189,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[15, 25, 35, 45], upper_bound=100) -> bool:\n    \"\"\"Find a small common multiple of the list of integers.\"\"\"\n    return all((n % i == 0 for i in nums)) and n <= upper_bound",
        "solution_func": "def g(nums=[15, 25, 35, 45], upper_bound=100):\n    n = max(nums)\n    while True:\n        if all((n % i == 0 for i in nums)):\n            return n\n        n += 1",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=10) -> bool:\n    \"\"\"Find n such that n is divisible by a and b, but not divisible by their difference.\"\"\"\n    return n % a == 0 and n % b == 0 and n % (b - a) != 0\n\ndef g(a=5, b=10):\n    return a * b\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 189,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=5, b=10) -> bool:\n    \"\"\"Find n such that n is divisible by a and b, but not divisible by their difference.\"\"\"\n    return n % a == 0 and n % b == 0 and n % (b - a) != 0",
        "solution_func": "def g(a=5, b=10):\n    return a * b",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], char='e') -> bool:\n    \"\"\"Check if any word in the list starts and ends with the specified character\"\"\"\n    return any(word[0] == char and word[-1] == char for word in words)\n\ndef g(char='e'):\n    return [\"elephant\", \"eagle\", \"banana\", \"apple\"]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 189,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], char='e') -> bool:\n    \"\"\"Check if any word in the list starts and ends with the specified character\"\"\"\n    return any(word[0] == char and word[-1] == char for word in words)",
        "solution_func": "def g(char='e'):\n    return [\"elephant\", \"eagle\", \"banana\", \"apple\"]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=7) -> bool:\n    \"\"\"Find n such that n is divisible by a, b, and the product of a and b.\"\"\"\n    return n % a == 0 and n % b == 0 and n % (a * b) == 0\n\ndef g(a=3, b=7):\n    return a * b\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 189,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=3, b=7) -> bool:\n    \"\"\"Find n such that n is divisible by a, b, and the product of a and b.\"\"\"\n    return n % a == 0 and n % b == 0 and n % (a * b) == 0",
        "solution_func": "def g(a=3, b=7):\n    return a * b",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=10) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=10):\n    return [i**2 for i in range(1, k+1)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 189,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=10) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False",
        "solution_func": "def g(k=10):\n    return [i**2 for i in range(1, k+1)]",
        "map_ix": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g():\n    return [2, 4, 6, 8]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 190,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g():\n    return [2, 4, 6, 8]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a number in the list that is divisible by the target value.\"\"\"\n    return any(num % target == 0 for num in nums)\n\ndef g():\n    return [3, 6, 9, 12]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 190,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a number in the list that is divisible by the target value.\"\"\"\n    return any(num % target == 0 for num in nums)",
        "solution_func": "def g():\n    return [3, 6, 9, 12]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a number in the list that is greater than the target value.\"\"\"\n    return any(num > target for num in nums)\n\ndef g():\n    return [5, 7, 9, 11]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 190,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a number in the list that is greater than the target value.\"\"\"\n    return any(num > target for num in nums)",
        "solution_func": "def g():\n    return [5, 7, 9, 11]",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\ndef f(n: int, m=4) -> bool:\n    \"\"\"Check if n is a power of m\"\"\"\n    return n > 0 and (m ** 0.5) ** int(math.log(n, m)) == n\ndef g(m=4):\n    return m ** 2\nassert f(g())\n",
        "emb": null,
        "idx_generation": 190,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\ndef f(n: int, m=4) -> bool:\n    \"\"\"Check if n is a power of m\"\"\"\n    return n > 0 and (m ** 0.5) ** int(math.log(n, m)) == n",
        "solution_func": "def g(m=4):\n    return m ** 2",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, k=3) -> bool:\n    \"\"\"Find if there exists a combination of k numbers in nums that add up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k))\ndef g(target=10, k=3):\n    return [2, 3, 5, 4, 1, 6]\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 190,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, k=3) -> bool:\n    \"\"\"Find if there exists a combination of k numbers in nums that add up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k))",
        "solution_func": "def g(target=10, k=3):\n    return [2, 3, 5, 4, 1, 6]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=1) -> bool:\n    \"\"\"Check if s is a palindrome after reversing it n times\"\"\"\n    return s == s[::-1] and n % 2 == 0\ndef g(n=1):\n    return 'racecar'\nassert f(g())\n",
        "emb": null,
        "idx_generation": 190,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=1) -> bool:\n    \"\"\"Check if s is a palindrome after reversing it n times\"\"\"\n    return s == s[::-1] and n % 2 == 0",
        "solution_func": "def g(n=1):\n    return 'racecar'",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=100, length=5) -> bool:\n    \"\"\"Check if there is a subsequence of the given numbers that sums up to the target and has the specified length.\"\"\"\n    for i in range(len(numbers) - length + 1):\n        if sum(numbers[i:i+length]) == target:\n            return True\n    return False\n\ndef g(target=100, length=5):\n    return list(range(1, length + 1)) + [target - sum(range(1, length + 1))]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 190,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=100, length=5) -> bool:\n    \"\"\"Check if there is a subsequence of the given numbers that sums up to the target and has the specified length.\"\"\"\n    for i in range(len(numbers) - length + 1):\n        if sum(numbers[i:i+length]) == target:\n            return True\n    return False",
        "solution_func": "def g(target=100, length=5):\n    return list(range(1, length + 1)) + [target - sum(range(1, length + 1))]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=0, length=3) -> bool:\n    \"\"\"Check if there is a subsequence of the given numbers that sums up to the target and has the specified length.\"\"\"\n    for i in range(len(numbers) - length + 1):\n        if sum(numbers[i:i+length]) == target:\n            return True\n    return False\n\ndef g(target=0, length=3):\n    return [target] * length\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 190,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=0, length=3) -> bool:\n    \"\"\"Check if there is a subsequence of the given numbers that sums up to the target and has the specified length.\"\"\"\n    for i in range(len(numbers) - length + 1):\n        if sum(numbers[i:i+length]) == target:\n            return True\n    return False",
        "solution_func": "def g(target=0, length=3):\n    return [target] * length",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10, length=4) -> bool:\n    \"\"\"Check if there is a subsequence of the given numbers that sums up to the target and has the specified length.\"\"\"\n    for i in range(len(numbers) - length + 1):\n        if sum(numbers[i:i+length]) == target:\n            return True\n    return False\n\ndef g(target=10, length=4):\n    return list(range(1, length + 1)) + [target - sum(range(1, length + 1))]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 190,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10, length=4) -> bool:\n    \"\"\"Check if there is a subsequence of the given numbers that sums up to the target and has the specified length.\"\"\"\n    for i in range(len(numbers) - length + 1):\n        if sum(numbers[i:i+length]) == target:\n            return True\n    return False",
        "solution_func": "def g(target=10, length=4):\n    return list(range(1, length + 1)) + [target - sum(range(1, length + 1))]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(num: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Find a number in the given list that is divisible by all the other numbers in the list.\"\"\"\n    return any(num % n == 0 for n in nums if n != num)\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums[0]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 190,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Find a number in the given list that is divisible by all the other numbers in the list.\"\"\"\n    return any(num % n == 0 for n in nums if n != num)",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums[0]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find three numbers in the given list that sum up to the target\"\"\"\n    return any(sum(combination) == target for combination in itertools.combinations(nums, 3))\n\ndef g(target=20):\n    return [10, 5, 5]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 191,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find three numbers in the given list that sum up to the target\"\"\"\n    return any(sum(combination) == target for combination in itertools.combinations(nums, 3))",
        "solution_func": "def g(target=20):\n    return [10, 5, 5]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import datetime\nfrom typing import*\ndef f(date: str, days=7) -> bool:\n    \"\"\"Check if the date given is exactly 7 days after the current date\"\"\"\n    current_date = datetime.date.today()\n    given_date = datetime.datetime.strptime(date, \"%Y-%m-%d\").date()\n    return (given_date - current_date).days == days\n\ndef g(days=7):\n    current_date = datetime.date.today()\n    return (current_date + datetime.timedelta(days=days)).strftime(\"%Y-%m-%d\")\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 191,
        "target_skills": null,
        "problem_func": "import datetime\nfrom typing import*\ndef f(date: str, days=7) -> bool:\n    \"\"\"Check if the date given is exactly 7 days after the current date\"\"\"\n    current_date = datetime.date.today()\n    given_date = datetime.datetime.strptime(date, \"%Y-%m-%d\").date()\n    return (given_date - current_date).days == days",
        "solution_func": "def g(days=7):\n    current_date = datetime.date.today()\n    return (current_date + datetime.timedelta(days=days)).strftime(\"%Y-%m-%d\")",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import re\nfrom typing import*\ndef f(emails: List[str], domain='example.com') -> bool:\n    \"\"\"Check if all the emails in the given list belong to the specified domain\"\"\"\n    return all(re.search(f\"@{domain}$\", email) for email in emails)\n\ndef g(domain='example.com'):\n    return [f\"user{i}@{domain}\" for i in range(1, 6)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 191,
        "target_skills": null,
        "problem_func": "import re\nfrom typing import*\ndef f(emails: List[str], domain='example.com') -> bool:\n    \"\"\"Check if all the emails in the given list belong to the specified domain\"\"\"\n    return all(re.search(f\"@{domain}$\", email) for email in emails)",
        "solution_func": "def g(domain='example.com'):\n    return [f\"user{i}@{domain}\" for i in range(1, 6)]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target sum.\"\"\"\n    return any((numbers[i] + numbers[j] == target_sum) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\n\ndef g(target_sum=10):\n    numbers = [1, 2, 3, 4, 5]\n    return numbers\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 191,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target sum.\"\"\"\n    return any((numbers[i] + numbers[j] == target_sum) for i in range(len(numbers)) for j in range(i+1, len(numbers)))",
        "solution_func": "def g(target_sum=10):\n    numbers = [1, 2, 3, 4, 5]\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 191,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list whose product is equal to the target.\"\"\"\n    n = len(numbers)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if numbers[i] * numbers[j] * numbers[k] == target:\n                    return True\n    return False\n\ndef g(target=50):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 191,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list whose product is equal to the target.\"\"\"\n    n = len(numbers)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if numbers[i] * numbers[j] * numbers[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=50):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g():\n    return [3, 6, 9, 12, 15]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 191,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g():\n    return [3, 6, 9, 12, 15]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g():\n    return [1, 3, 5, 7, 9]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 191,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g():\n    return [1, 3, 5, 7, 9]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g():\n    return [4, 8, 12, 16, 20]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 191,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g():\n    return [4, 8, 12, 16, 20]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target_sum=20) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_sum=20):\n    return [n for n in range(target_sum+1)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 191,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target_sum=20) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target_sum=20):\n    return [n for n in range(target_sum+1)]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list whose sum is equal to the target value.\"\"\"\n    return any(target - num1 - num2 in nums for num1, num2 in itertools.combinations(nums, 2))\n\ndef g(target=20):\n    return [i for i in range(1, target+1)]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 192,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list whose sum is equal to the target value.\"\"\"\n    return any(target - num1 - num2 in nums for num1, num2 in itertools.combinations(nums, 2))",
        "solution_func": "def g(target=20):\n    return [i for i in range(1, target+1)]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=-128) -> bool:\n    \"\"\"Check if the given number is the bitwise complement of a\"\"\"\n    return x == ~a\ndef g(a=-128):\n    return ~a\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 192,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=-128) -> bool:\n    \"\"\"Check if the given number is the bitwise complement of a\"\"\"\n    return x == ~a",
        "solution_func": "def g(a=-128):\n    return ~a",
        "map_ix": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='abcdefghi', target='') -> bool:\n    \"\"\"Find the three slice indices that give the specific target in string s\"\"\"\n    (i, j, k) = inds\n    return s[i:j] + s[j:k] == target\ndef g(s='abcdefghi', target=''):\n    from itertools import product\n    for (i, j, k) in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j] + s[j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 192,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='abcdefghi', target='') -> bool:\n    \"\"\"Find the three slice indices that give the specific target in string s\"\"\"\n    (i, j, k) = inds\n    return s[i:j] + s[j:k] == target",
        "solution_func": "def g(s='abcdefghi', target=''):\n    from itertools import product\n    for (i, j, k) in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j] + s[j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    return any(numbers[i] + numbers[j] == target for i in range(len(numbers)) for j in range(i+1, len(numbers)))\n\ndef g(target=10):\n    return random.sample(range(1, target+1), 5)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 192,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    return any(numbers[i] + numbers[j] == target for i in range(len(numbers)) for j in range(i+1, len(numbers)))",
        "solution_func": "def g(target=10):\n    return random.sample(range(1, target+1), 5)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\ndef f(radius: float, height: float, volume=500) -> bool:\n    \"\"\"Check if the volume of a cylinder is greater than a specified value\"\"\"\n    return math.pi * radius**2 * height > volume\n\ndef g(volume=500):\n    return (volume / (math.pi * 10**2))**(1/2)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 192,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\ndef f(radius: float, height: float, volume=500) -> bool:\n    \"\"\"Check if the volume of a cylinder is greater than a specified value\"\"\"\n    return math.pi * radius**2 * height > volume",
        "solution_func": "def g(volume=500):\n    return (volume / (math.pi * 10**2))**(1/2)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str], max_length=10) -> bool:\n    \"\"\"Check if there exists a word in the list that exceeds the maximum length\"\"\"\n    return any(len(word) > max_length for word in words)\n\ndef g(max_length=10):\n    return ['apple', 'banana', 'orange']\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 192,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], max_length=10) -> bool:\n    \"\"\"Check if there exists a word in the list that exceeds the maximum length\"\"\"\n    return any(len(word) > max_length for word in words)",
        "solution_func": "def g(max_length=10):\n    return ['apple', 'banana', 'orange']",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\ndef f(n: int, lst=[1, 4, 9, 16, 25, 36, 49, 64], k=2) -> bool:\n    \"\"\"Given a list of integers and an integer k, determine if there are exactly n integers in the list that are perfect squares.\"\"\"\n    return sum((1 for num in lst if sqrt(num).is_integer())) == n\ndef g(lst=[1, 4, 9, 16, 25, 36, 49, 64], k=2):\n    return len([num for num in lst if sqrt(num).is_integer()])\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 192,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\ndef f(n: int, lst=[1, 4, 9, 16, 25, 36, 49, 64], k=2) -> bool:\n    \"\"\"Given a list of integers and an integer k, determine if there are exactly n integers in the list that are perfect squares.\"\"\"\n    return sum((1 for num in lst if sqrt(num).is_integer())) == n",
        "solution_func": "def g(lst=[1, 4, 9, 16, 25, 36, 49, 64], k=2):\n    return len([num for num in lst if sqrt(num).is_integer()])",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\ndef f(n: int, lst=[1, 4, 9, 16, 25, 36, 49, 64], k=2) -> bool:\n    \"\"\"Given a list of integers and an integer k, determine if there are less than n integers in the list that are perfect squares.\"\"\"\n    return sum((1 for num in lst if sqrt(num).is_integer())) < n\ndef g(lst=[1, 4, 9, 16, 25, 36, 49, 64], k=2):\n    return len([num for num in lst if sqrt(num).is_integer()])\nassert f(g())\n",
        "emb": null,
        "idx_generation": 192,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\ndef f(n: int, lst=[1, 4, 9, 16, 25, 36, 49, 64], k=2) -> bool:\n    \"\"\"Given a list of integers and an integer k, determine if there are less than n integers in the list that are perfect squares.\"\"\"\n    return sum((1 for num in lst if sqrt(num).is_integer())) < n",
        "solution_func": "def g(lst=[1, 4, 9, 16, 25, 36, 49, 64], k=2):\n    return len([num for num in lst if sqrt(num).is_integer()])",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\ndef f(n: int, lst=[1, 4, 9, 16, 25, 36, 49, 64], k=2) -> bool:\n    \"\"\"Given a list of integers and an integer k, determine if there are more than n integers in the list that are perfect squares.\"\"\"\n    return sum((1 for num in lst if sqrt(num).is_integer())) > n\ndef g(lst=[1, 4, 9, 16, 25, 36, 49, 64], k=2):\n    return len([num for num in lst if sqrt(num).is_integer()])\nassert f(g())\n",
        "emb": null,
        "idx_generation": 192,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\ndef f(n: int, lst=[1, 4, 9, 16, 25, 36, 49, 64], k=2) -> bool:\n    \"\"\"Given a list of integers and an integer k, determine if there are more than n integers in the list that are perfect squares.\"\"\"\n    return sum((1 for num in lst if sqrt(num).is_integer())) > n",
        "solution_func": "def g(lst=[1, 4, 9, 16, 25, 36, 49, 64], k=2):\n    return len([num for num in lst if sqrt(num).is_integer()])",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target=1000) -> bool:\n    \"\"\"Check if the sum of all numbers in the list is equal to the target\"\"\"\n    return sum(lst) == target\n\ndef g(target=1000):\n    lst = [i for i in range(1, target+1)]\n    return lst\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 192,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target=1000) -> bool:\n    \"\"\"Check if the sum of all numbers in the list is equal to the target\"\"\"\n    return sum(lst) == target",
        "solution_func": "def g(target=1000):\n    lst = [i for i in range(1, target+1)]\n    return lst",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, n=0) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return string == string[::-1]\ndef g(n=0):\n    return 'racecar'\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 193,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, n=0) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return string == string[::-1]",
        "solution_func": "def g(n=0):\n    return 'racecar'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(string: str, n=0) -> bool:\n    \"\"\"Check if the given string is a palindrome of length n\"\"\"\n    return string == string[::-1] and len(string) == n\ndef g(n=0):\n    return 'level'\nassert f(g())\n",
        "emb": null,
        "idx_generation": 193,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, n=0) -> bool:\n    \"\"\"Check if the given string is a palindrome of length n\"\"\"\n    return string == string[::-1] and len(string) == n",
        "solution_func": "def g(n=0):\n    return 'level'",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, n=0) -> bool:\n    \"\"\"Check if the given string contains a palindrome of length n\"\"\"\n    for i in range(len(string) - n + 1):\n        if string[i:i+n] == string[i:i+n][::-1]:\n            return True\n    return False\ndef g(n=0):\n    return 'madam'\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 193,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, n=0) -> bool:\n    \"\"\"Check if the given string contains a palindrome of length n\"\"\"\n    for i in range(len(string) - n + 1):\n        if string[i:i+n] == string[i:i+n][::-1]:\n            return True\n    return False",
        "solution_func": "def g(n=0):\n    return 'madam'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == m*n\ndef g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == m*n:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 193,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == m*n",
        "solution_func": "def g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == m*n:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == m+n-1\ndef g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == m+n-1:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 193,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == m+n-1",
        "solution_func": "def g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == m+n-1:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == (m*n - 1)//2\ndef g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == (m*n - 1)//2:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 193,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == (m*n - 1)//2",
        "solution_func": "def g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == (m*n - 1)//2:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])",
        "map_ix": [
            1,
            1,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, factors: List[int]=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is divisible by the sum of the given factors.\n    - n: the number to be checked\n    - factors: list of factors\"\"\"\n    return n % sum(factors) == 0\n\ndef g(n: int, factors: List[int]=[2, 3, 5]):\n    return n\nassert f(g(15))\n",
        "emb": null,
        "idx_generation": 193,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, factors: List[int]=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is divisible by the sum of the given factors.\n    - n: the number to be checked\n    - factors: list of factors\"\"\"\n    return n % sum(factors) == 0",
        "solution_func": "def g(n: int, factors: List[int]=[2, 3, 5]):\n    return n",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, factors: List[int]=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is divisible by the product of the given factors.\n    - n: the number to be checked\n    - factors: list of factors\"\"\"\n    product = 1\n    for factor in factors:\n        product *= factor\n    return n % product == 0\n\ndef g(n: int, factors: List[int]=[2, 3, 5]):\n    return n\nassert f(g(15))\n",
        "emb": null,
        "idx_generation": 193,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, factors: List[int]=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is divisible by the product of the given factors.\n    - n: the number to be checked\n    - factors: list of factors\"\"\"\n    product = 1\n    for factor in factors:\n        product *= factor\n    return n % product == 0",
        "solution_func": "def g(n: int, factors: List[int]=[2, 3, 5]):\n    return n",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, factors: List[int]=[2, 3, 5]) -> bool:\n    \"\"\"Check if all the given factors are factors of the number.\n    - n: the number to be checked\n    - factors: list of factors\"\"\"\n    for factor in factors:\n        if n % factor != 0:\n            return False\n    return True\n\ndef g(n: int, factors: List[int]=[2, 3, 5]):\n    return n\nassert f(g(15))\n",
        "emb": null,
        "idx_generation": 193,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, factors: List[int]=[2, 3, 5]) -> bool:\n    \"\"\"Check if all the given factors are factors of the number.\n    - n: the number to be checked\n    - factors: list of factors\"\"\"\n    for factor in factors:\n        if n % factor != 0:\n            return False\n    return True",
        "solution_func": "def g(n: int, factors: List[int]=[2, 3, 5]):\n    return n",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5, m=3) -> bool:\n    \"\"\"Check if a substring appears in the given string s, n times, each with a length of m.\"\"\"\n    count = 0\n    for i in range(len(s)-m+1):\n        if s[i:i+m] == s[:m]:\n            count += 1\n    return count == n\ndef g(n=5, m=3):\n    return \"abcabcabcabcabc\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 193,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=5, m=3) -> bool:\n    \"\"\"Check if a substring appears in the given string s, n times, each with a length of m.\"\"\"\n    count = 0\n    for i in range(len(s)-m+1):\n        if s[i:i+m] == s[:m]:\n            count += 1\n    return count == n",
        "solution_func": "def g(n=5, m=3):\n    return \"abcabcabcabcabc\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two numbers in the list that add up to the target.\"\"\"\n    return any(target - num in numbers for num in numbers)\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 194,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two numbers in the list that add up to the target.\"\"\"\n    return any(target - num in numbers for num in numbers)",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], n=3) -> bool:\n    \"\"\"Check if there exists a subsequence of length n in the list that is in increasing order.\"\"\"\n    return any(numbers[i] < numbers[i+1] for i in range(len(numbers)-n+1))\n\ndef g(n=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 194,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], n=3) -> bool:\n    \"\"\"Check if there exists a subsequence of length n in the list that is in increasing order.\"\"\"\n    return any(numbers[i] < numbers[i+1] for i in range(len(numbers)-n+1))",
        "solution_func": "def g(n=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if there exists three numbers in the list that multiply to the target.\"\"\"\n    return any(target / (num1 * num2) == num3 for num1 in numbers for num2 in numbers for num3 in numbers)\n\ndef g(target=100):\n    return [1, 2, 4, 5, 10, 20, 25]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 194,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if there exists three numbers in the list that multiply to the target.\"\"\"\n    return any(target / (num1 * num2) == num3 for num1 in numbers for num2 in numbers for num3 in numbers)",
        "solution_func": "def g(target=100):\n    return [1, 2, 4, 5, 10, 20, 25]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target value exists in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 194,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target value exists in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Check if the substring exists in the given string\"\"\"\n    return substring in string\n\ndef g(substring='abc'):\n    return \"defghij\"\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 194,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Check if the substring exists in the given string\"\"\"\n    return substring in string",
        "solution_func": "def g(substring='abc'):\n    return \"defghij\"",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose sum is greater than or equal to k\"\"\"\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if sum(nums[i:j+1]) >= k:\n                return True\n    return False\n\ndef g(k=5):\n    return [1, 2, 3, 4]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 194,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose sum is greater than or equal to k\"\"\"\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if sum(nums[i:j+1]) >= k:\n                return True\n    return False",
        "solution_func": "def g(k=5):\n    return [1, 2, 3, 4]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the given list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=15):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 194,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the given list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=15):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return string == string[::-1]\ndef g():\n    string = \"racecar\"\n    return string\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 194,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return string == string[::-1]",
        "solution_func": "def g():\n    string = \"racecar\"\n    return string",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a subarray in the given list that sums up to zero\"\"\"\n    prefix_sum = 0\n    seen = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum in seen or prefix_sum == 0:\n            return True\n        seen.add(prefix_sum)\n    return False\ndef g():\n    nums = [1, -2, 3, 4, -5]\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 194,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a subarray in the given list that sums up to zero\"\"\"\n    prefix_sum = 0\n    seen = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum in seen or prefix_sum == 0:\n            return True\n        seen.add(prefix_sum)\n    return False",
        "solution_func": "def g():\n    nums = [1, -2, 3, 4, -5]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 194,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums",
        "map_ix": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], letter='a') -> bool:\n    \"\"\"Check if any word in the list starts with the given letter.\"\"\"\n    return any((word.startswith(letter) for word in words))\n\ndef g(letter='a'):\n    return ['apple', 'banana', 'orange', 'grapefruit']\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 195,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], letter='a') -> bool:\n    \"\"\"Check if any word in the list starts with the given letter.\"\"\"\n    return any((word.startswith(letter) for word in words))",
        "solution_func": "def g(letter='a'):\n    return ['apple', 'banana', 'orange', 'grapefruit']",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], letter='a') -> bool:\n    \"\"\"Check if any word in the list ends with the given letter.\"\"\"\n    return any((word.endswith(letter) for word in words))\n\ndef g(letter='a'):\n    return ['apple', 'banana', 'orange', 'grapefruit']\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 195,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], letter='a') -> bool:\n    \"\"\"Check if any word in the list ends with the given letter.\"\"\"\n    return any((word.endswith(letter) for word in words))",
        "solution_func": "def g(letter='a'):\n    return ['apple', 'banana', 'orange', 'grapefruit']",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(words: List[str], letter='a') -> bool:\n    \"\"\"Check if all words in the list have the given letter as their second character.\"\"\"\n    return all((len(word) > 1 and word[1] == letter for word in words))\n\ndef g(letter='a'):\n    return ['apple', 'banana', 'orange', 'grapefruit']\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 195,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], letter='a') -> bool:\n    \"\"\"Check if all words in the list have the given letter as their second character.\"\"\"\n    return all((len(word) > 1 and word[1] == letter for word in words))",
        "solution_func": "def g(letter='a'):\n    return ['apple', 'banana', 'orange', 'grapefruit']",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find a (closed) tour of knight moves on an m x n chess-board that visits each square once and ends at the starting square.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)] and tour[0] == tour[-1]\ndef g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n\n",
        "emb": null,
        "idx_generation": 195,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find a (closed) tour of knight moves on an m x n chess-board that visits each square once and ends at the starting square.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)] and tour[0] == tour[-1]",
        "solution_func": "def g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(path: List[int], edges=[[1, 1], [2, 0], [1, 0], [2, 2]], u=1, v=2, bound=3) -> bool:\n    \"\"\"Find a path from node u to node v, of a bounded length, in the given digraph on vertices 0, 1,..., n.\"\"\"\n    assert path[0] == u and path[-1] == v and all(([i, j] in edges for (i, j) in zip(path, path[1:])))\n    return len(path) <= bound\ndef g(edges=[[1, 1], [2, 0], [1, 0], [2, 2]], u=1, v=2, bound=3):\n    import heapq\n    from collections import defaultdict\n    queue = [(0, u, u)]\n    trails = {}\n    neighbors = defaultdict(set)\n    for (i, j) in edges:\n        neighbors[i].add(j)\n    while queue:\n        (dist, i, j) = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in neighbors[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + 1, j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]\nassert f(g())\n\n",
        "emb": null,
        "idx_generation": 195,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(path: List[int], edges=[[1, 1], [2, 0], [1, 0], [2, 2]], u=1, v=2, bound=3) -> bool:\n    \"\"\"Find a path from node u to node v, of a bounded length, in the given digraph on vertices 0, 1,..., n.\"\"\"\n    assert path[0] == u and path[-1] == v and all(([i, j] in edges for (i, j) in zip(path, path[1:])))\n    return len(path) <= bound",
        "solution_func": "def g(edges=[[1, 1], [2, 0], [1, 0], [2, 2]], u=1, v=2, bound=3):\n    import heapq\n    from collections import defaultdict\n    queue = [(0, u, u)]\n    trails = {}\n    neighbors = defaultdict(set)\n    for (i, j) in edges:\n        neighbors[i].add(j)\n    while queue:\n        (dist, i, j) = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in neighbors[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + 1, j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(seq: List[int], n=0, length=0) -> bool:\n    \"\"\"Find a sequence of 1's and 2's of a given length that that adds up to n\"\"\"\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length) and set(seq) == {1, 2}\ndef g(n=1, length=1):\n    return [1, 2]\nassert f(g())\n\n",
        "emb": null,
        "idx_generation": 195,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(seq: List[int], n=0, length=0) -> bool:\n    \"\"\"Find a sequence of 1's and 2's of a given length that that adds up to n\"\"\"\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length) and set(seq) == {1, 2}",
        "solution_func": "def g(n=1, length=1):\n    return [1, 2]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\n\ndef f(inds: List[int], s='abcdefghi', target='') -> bool:\n    \"\"\"Find the three slice indices that give the specific target in string s\"\"\"\n    (i, j, k) = inds\n    return s[i:j] + s[j:k] == target\n\ndef g(s='abcdefghi', target=''):\n    from itertools import product\n    for (i, j, k) in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j] + s[j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 195,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\n\ndef f(inds: List[int], s='abcdefghi', target='') -> bool:\n    \"\"\"Find the three slice indices that give the specific target in string s\"\"\"\n    (i, j, k) = inds\n    return s[i:j] + s[j:k] == target",
        "solution_func": "def g(s='abcdefghi', target=''):\n    from itertools import product\n    for (i, j, k) in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j] + s[j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\n\ndef f(inds: List[int], s='abcdefghi', target='') -> bool:\n    \"\"\"Find the four slice indices that give the specific target in string s\"\"\"\n    (i, j, k, l) = inds\n    return s[i:j] + s[j:k] + s[k:l] == target\n\ndef g(s='abcdefghi', target=''):\n    from itertools import product\n    for (i, j, k, l) in product(range(-len(s) - 1, len(s) + 1), repeat=4):\n        try:\n            if s[i:j] + s[j:k] + s[k:l] == target:\n                return [i, j, k, l]\n        except (IndexError, ValueError):\n            pass\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 195,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\n\ndef f(inds: List[int], s='abcdefghi', target='') -> bool:\n    \"\"\"Find the four slice indices that give the specific target in string s\"\"\"\n    (i, j, k, l) = inds\n    return s[i:j] + s[j:k] + s[k:l] == target",
        "solution_func": "def g(s='abcdefghi', target=''):\n    from itertools import product\n    for (i, j, k, l) in product(range(-len(s) - 1, len(s) + 1), repeat=4):\n        try:\n            if s[i:j] + s[j:k] + s[k:l] == target:\n                return [i, j, k, l]\n        except (IndexError, ValueError):\n            pass",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\n\ndef f(inds: List[int], s='abcdefghi', target='') -> bool:\n    \"\"\"Find the two slice indices that give the specific target in string s\"\"\"\n    (i, j) = inds\n    return s[i:j] == target\n\ndef g(s='abcdefghi', target=''):\n    from itertools import product\n    for (i, j) in product(range(-len(s) - 1, len(s) + 1), repeat=2):\n        try:\n            if s[i:j] == target:\n                return [i, j]\n        except (IndexError, ValueError):\n            pass\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 195,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\n\ndef f(inds: List[int], s='abcdefghi', target='') -> bool:\n    \"\"\"Find the two slice indices that give the specific target in string s\"\"\"\n    (i, j) = inds\n    return s[i:j] == target",
        "solution_func": "def g(s='abcdefghi', target=''):\n    from itertools import product\n    for (i, j) in product(range(-len(s) - 1, len(s) + 1), repeat=2):\n        try:\n            if s[i:j] == target:\n                return [i, j]\n        except (IndexError, ValueError):\n            pass",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=2, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if the given string contains at least the target number of consecutive vowels from a provided list of vowels.\"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n            if count >= target:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(target=2, vowels=['a', 'e', 'i', 'o', 'u']):\n    return \"aeiou\" * target\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 195,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target=2, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if the given string contains at least the target number of consecutive vowels from a provided list of vowels.\"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n            if count >= target:\n                return True\n        else:\n            count = 0\n    return False",
        "solution_func": "def g(target=2, vowels=['a', 'e', 'i', 'o', 'u']):\n    return \"aeiou\" * target",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, factors: List[int]=[2, 3, 5]) -> bool:\n    \"\"\"Check if all the given factors are factors of the number n.\n    - n: the number to be checked\n    - factors: list of factors\"\"\"\n    for factor in factors:\n        if n % factor != 0:\n            return False\n    return True\ndef g(n: int, factors: List[int]=[2, 3, 5]):\n    return n * factors[0]\nassert f(g(10))\n\n\n",
        "emb": null,
        "idx_generation": 196,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, factors: List[int]=[2, 3, 5]) -> bool:\n    \"\"\"Check if all the given factors are factors of the number n.\n    - n: the number to be checked\n    - factors: list of factors\"\"\"\n    for factor in factors:\n        if n % factor != 0:\n            return False\n    return True",
        "solution_func": "def g(n: int, factors: List[int]=[2, 3, 5]):\n    return n * factors[0]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, factors: List[int]=[2, 3, 5]) -> bool:\n    \"\"\"Check if none of the given factors are factors of the number n.\n    - n: the number to be checked\n    - factors: list of factors\"\"\"\n    for factor in factors:\n        if n % factor == 0:\n            return False\n    return True\ndef g(n: int, factors: List[int]=[2, 3, 5]):\n    return n + 1\nassert f(g(7))\n\n\n",
        "emb": null,
        "idx_generation": 196,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, factors: List[int]=[2, 3, 5]) -> bool:\n    \"\"\"Check if none of the given factors are factors of the number n.\n    - n: the number to be checked\n    - factors: list of factors\"\"\"\n    for factor in factors:\n        if n % factor == 0:\n            return False\n    return True",
        "solution_func": "def g(n: int, factors: List[int]=[2, 3, 5]):\n    return n + 1",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, factors: List[int]=[2, 3, 5]) -> bool:\n    \"\"\"Check if any of the given factors are factors of the number n.\n    - n: the number to be checked\n    - factors: list of factors\"\"\"\n    for factor in factors:\n        if n % factor == 0:\n            return True\n    return False\ndef g(n: int, factors: List[int]=[2, 3, 5]):\n    return n * factors[1]\nassert f(g(14))\n\n\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 196,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, factors: List[int]=[2, 3, 5]) -> bool:\n    \"\"\"Check if any of the given factors are factors of the number n.\n    - n: the number to be checked\n    - factors: list of factors\"\"\"\n    for factor in factors:\n        if n % factor == 0:\n            return True\n    return False",
        "solution_func": "def g(n: int, factors: List[int]=[2, 3, 5]):\n    return n * factors[1]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, k=5, lower=-100000000, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is maximal, possibly looping around\"\"\"\n    total = 0\n    for i in range(x, x + k):\n        total += seq[i]\n    return total >= lower\ndef g(k=5, lower=-100000000, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    def sum(x):\n        result = 0\n        for i in range(x, x + k):\n            result += seq[i]\n        return result\n    return max(range(-len(seq), len(seq) - k + 1), key=sum)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 196,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, k=5, lower=-100000000, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is maximal, possibly looping around\"\"\"\n    total = 0\n    for i in range(x, x + k):\n        total += seq[i]\n    return total >= lower",
        "solution_func": "def g(k=5, lower=-100000000, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    def sum(x):\n        result = 0\n        for i in range(x, x + k):\n            result += seq[i]\n        return result\n    return max(range(-len(seq), len(seq) - k + 1), key=sum)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(start: int, k=4, lower=-1000, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is minimal, possibly looping around\"\"\"\n    total = 0\n    for i in range(start, start + k):\n        total += seq[i]\n    return total <= lower\ndef g(k=4, lower=-1000, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    def sum(start):\n        result = 0\n        for i in range(start, start + k):\n            result += seq[i]\n        return result\n    return min(range(-len(seq), len(seq) - k + 1), key=sum)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 196,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(start: int, k=4, lower=-1000, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is minimal, possibly looping around\"\"\"\n    total = 0\n    for i in range(start, start + k):\n        total += seq[i]\n    return total <= lower",
        "solution_func": "def g(k=4, lower=-1000, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    def sum(start):\n        result = 0\n        for i in range(start, start + k):\n            result += seq[i]\n        return result\n    return min(range(-len(seq), len(seq) - k + 1), key=sum)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, k=6, lower=-100, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is odd, possibly looping around\"\"\"\n    total = 0\n    for i in range(x, x + k):\n        total += seq[i]\n    return total % 2 == 1\ndef g(k=6, lower=-100, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    def sum(x):\n        result = 0\n        for i in range(x, x + k):\n            result += seq[i]\n        return result\n    return max(range(-len(seq), len(seq) - k + 1), key=sum)\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 196,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, k=6, lower=-100, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is odd, possibly looping around\"\"\"\n    total = 0\n    for i in range(x, x + k):\n        total += seq[i]\n    return total % 2 == 1",
        "solution_func": "def g(k=6, lower=-100, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    def sum(x):\n        result = 0\n        for i in range(x, x + k):\n            result += seq[i]\n        return result\n    return max(range(-len(seq), len(seq) - k + 1), key=sum)",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, n=25) -> bool:\n    \"\"\"Find the square root of x and check if it is an integer divisible by n.\"\"\"\n    return x ** 0.5 % n == 0\ndef g(n=25):\n    return n ** 2\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 196,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, n=25) -> bool:\n    \"\"\"Find the square root of x and check if it is an integer divisible by n.\"\"\"\n    return x ** 0.5 % n == 0",
        "solution_func": "def g(n=25):\n    return n ** 2",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=500) -> bool:\n    \"\"\"Check if there is a pair of numbers in arr that multiply to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] == target:\n                return True\n    return False\n\ndef g(target=500):\n    arr = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return arr\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 196,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=500) -> bool:\n    \"\"\"Check if there is a pair of numbers in arr that multiply to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=500):\n    arr = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return arr",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, format='%Y-%m-%d') -> bool:\n    \"\"\"Check if the given date string matches the specified format.\"\"\"\n    try:\n        datetime.strptime(date, format)\n        return True\n    except ValueError:\n        return False\n\ndef g(format='%Y-%m-%d'):\n    return datetime.now().strftime(format)\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 196,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, format='%Y-%m-%d') -> bool:\n    \"\"\"Check if the given date string matches the specified format.\"\"\"\n    try:\n        datetime.strptime(date, format)\n        return True\n    except ValueError:\n        return False",
        "solution_func": "def g(format='%Y-%m-%d'):\n    return datetime.now().strftime(format)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a sum greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] > target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 196,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a sum greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] > target:\n                return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\nfrom typing import List, Tuple\n\ndef f(lst: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"Given a list of integers, an integer k, and a target sum, determine if there are at least k integers in the list that add up to the target sum.\"\"\"\n    def helper(nums: List[int], k: int, target_sum: int) -> bool:\n        if k == 0 and target_sum == 0:\n            return True\n        if k < 0 or target_sum < 0:\n            return False\n        if nums and helper(nums[1:], k - 1, target_sum - nums[0]):\n            return True\n        return helper(nums[1:], k, target_sum)\n    \n    return helper(lst, k, target_sum)\n\ndef g(lst=[1, 2, 3, 4, 5], k=3, target_sum=9):\n    return lst\n\nassert f(g())\n\n",
        "emb": null,
        "idx_generation": 197,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\nfrom typing import List, Tuple\n\ndef f(lst: List[int], k: int, target_sum: int) -> bool:\n    \"\"\"Given a list of integers, an integer k, and a target sum, determine if there are at least k integers in the list that add up to the target sum.\"\"\"\n    def helper(nums: List[int], k: int, target_sum: int) -> bool:\n        if k == 0 and target_sum == 0:\n            return True\n        if k < 0 or target_sum < 0:\n            return False\n        if nums and helper(nums[1:], k - 1, target_sum - nums[0]):\n            return True\n        return helper(nums[1:], k, target_sum)\n    \n    return helper(lst, k, target_sum)",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5], k=3, target_sum=9):\n    return lst",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target value.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(nums=[3, 5, 9, 2, 8], target=7):\n    return nums\n\nassert f(g())\n\n",
        "emb": null,
        "idx_generation": 197,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target value.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False",
        "solution_func": "def g(nums=[3, 5, 9, 2, 8], target=7):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\nfrom typing import List, Tuple\n\ndef f(points: List[Tuple[int, int]], threshold: int) -> bool:\n    \"\"\"Given a list of 2D points and a threshold value, determine if the sum of the Euclidean distances between any two points in the list is greater than the threshold.\"\"\"\n    def distance(p1: Tuple[int, int], p2: Tuple[int, int]) -> float:\n        return math.sqrt((p2[0] - p1[0]) ** 2 + (p2[1] - p1[1]) ** 2)\n    \n    total_distance = 0\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            total_distance += distance(points[i], points[j])\n    \n    return total_distance > threshold\n\ndef g(points=[(1, 2), (3, 4), (5, 6), (7, 8)], threshold=20):\n    return points\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 197,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\nfrom typing import List, Tuple\n\ndef f(points: List[Tuple[int, int]], threshold: int) -> bool:\n    \"\"\"Given a list of 2D points and a threshold value, determine if the sum of the Euclidean distances between any two points in the list is greater than the threshold.\"\"\"\n    def distance(p1: Tuple[int, int], p2: Tuple[int, int]) -> float:\n        return math.sqrt((p2[0] - p1[0]) ** 2 + (p2[1] - p1[1]) ** 2)\n    \n    total_distance = 0\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            total_distance += distance(points[i], points[j])\n    \n    return total_distance > threshold",
        "solution_func": "def g(points=[(1, 2), (3, 4), (5, 6), (7, 8)], threshold=20):\n    return points",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose product is equal to the target.\"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n        if product == target:\n            return True\n    return False\n\ndef g(target=10):\n    return [2, 5, 1, 3, 4]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 197,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose product is equal to the target.\"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n        if product == target:\n            return True\n    return False",
        "solution_func": "def g(target=10):\n    return [2, 5, 1, 3, 4]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target, and the subarray length is greater than 2.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+2, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 197,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target, and the subarray length is greater than 2.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+2, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False",
        "solution_func": "def g(target=100):\n    return [10, 20, 30, 40, 50]",
        "map_ix": [
            1,
            1,
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose length is equal to k and contains all distinct elements.\"\"\"\n    for i in range(len(nums)-k+1):\n        subarray = nums[i:i+k]\n        if len(subarray) == len(set(subarray)):\n            return True\n    return False\n\ndef g(k=3):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 197,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose length is equal to k and contains all distinct elements.\"\"\"\n    for i in range(len(nums)-k+1):\n        subarray = nums[i:i+k]\n        if len(subarray) == len(set(subarray)):\n            return True\n    return False",
        "solution_func": "def g(k=3):\n    return [1, 2, 3, 4, 5, 6]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is upper triangular\"\"\"\n    return all((matrix[i][j] == 0 for i in range(len(matrix)) for j in range(i + 1, len(matrix))))\ndef g():\n    matrix = [[1, 2, 3], [0, 4, 5], [0, 0, 6]]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 197,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is upper triangular\"\"\"\n    return all((matrix[i][j] == 0 for i in range(len(matrix)) for j in range(i + 1, len(matrix))))",
        "solution_func": "def g():\n    matrix = [[1, 2, 3], [0, 4, 5], [0, 0, 6]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a diagonal matrix\"\"\"\n    return all((matrix[i][j] == 0 for i in range(len(matrix)) for j in range(len(matrix)) if i != j))\ndef g():\n    matrix = [[1, 0, 0], [0, 4, 0], [0, 0, 6]]\n    return matrix\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 197,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a diagonal matrix\"\"\"\n    return all((matrix[i][j] == 0 for i in range(len(matrix)) for j in range(len(matrix)) if i != j))",
        "solution_func": "def g():\n    matrix = [[1, 0, 0], [0, 4, 0], [0, 0, 6]]\n    return matrix",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a lower triangular matrix\"\"\"\n    return all((matrix[i][j] == 0 for i in range(len(matrix)) for j in range(i) if i != j))\ndef g():\n    matrix = [[1, 0, 0], [2, 4, 0], [3, 5, 6]]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 197,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a lower triangular matrix\"\"\"\n    return all((matrix[i][j] == 0 for i in range(len(matrix)) for j in range(i) if i != j))",
        "solution_func": "def g():\n    matrix = [[1, 0, 0], [2, 4, 0], [3, 5, 6]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=3, c=15) -> bool:\n    \"\"\"Find n such that n * a == b * (the sum of the first c integers)\"\"\"\n    return n * a == sum([b * i for i in range(c)])\ndef g(a=10, b=3, c=15):\n    return sum([b * i for i in range(c)]) / a\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 197,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=10, b=3, c=15) -> bool:\n    \"\"\"Find n such that n * a == b * (the sum of the first c integers)\"\"\"\n    return n * a == sum([b * i for i in range(c)])",
        "solution_func": "def g(a=10, b=3, c=15):\n    return sum([b * i for i in range(c)]) / a",
        "map_ix": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g())\n\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 198,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols",
        "solution_func": "def g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a rectangular matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows != cols\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g())\n\n",
        "emb": null,
        "idx_generation": 198,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a rectangular matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows != cols",
        "solution_func": "def g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a diagonal matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    matrix = [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n    return matrix\n\nassert f(g())\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 198,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a diagonal matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True",
        "solution_func": "def g():\n    matrix = [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n    return matrix",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 20) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target value.\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\n\ndef g(target: int = 20):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 198,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 20) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target value.\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))",
        "solution_func": "def g(target: int = 20):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 15) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose difference is equal to the target\"\"\"\n    return any(abs(nums[i] - nums[j]) == target for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target: int = 15):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 198,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 15) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose difference is equal to the target\"\"\"\n    return any(abs(nums[i] - nums[j]) == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target: int = 15):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 100) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list whose product is equal to the target\"\"\"\n    return any(nums[i] * nums[j] * nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\n\ndef g(target: int = 100):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 198,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 100) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list whose product is equal to the target\"\"\"\n    return any(nums[i] * nums[j] * nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))",
        "solution_func": "def g(target: int = 100):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exist four numbers in the list whose sum is equal to the target\"\"\"\n    return any(a + b + c + d == target for i, a in enumerate(nums) for j, b in enumerate(nums[i+1:]) for k, c in enumerate(nums[i+j+2:]) for d in nums[i+j+k+3:])\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 198,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exist four numbers in the list whose sum is equal to the target\"\"\"\n    return any(a + b + c + d == target for i, a in enumerate(nums) for j, b in enumerate(nums[i+1:]) for k, c in enumerate(nums[i+j+2:]) for d in nums[i+j+k+3:])",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose difference is equal to the target\"\"\"\n    return any(a - b == target or b - a == target for i, a in enumerate(nums) for b in nums[i+1:])\ndef g(target=20):\n    return [10, 30, 25, 40, 15, 5]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 198,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose difference is equal to the target\"\"\"\n    return any(a - b == target or b - a == target for i, a in enumerate(nums) for b in nums[i+1:])",
        "solution_func": "def g(target=20):\n    return [10, 30, 25, 40, 15, 5]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, big_str='fatextemedyrotichipicecojon', index=5) -> bool:\n    \"\"\"Check if the string is a substring of the big string starting at index\"\"\"\n    return big_str[index:].startswith(s)\ndef g(big_str='fatextemedyrotichipicecojon', index=5):\n    return big_str[index:]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 198,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, big_str='fatextemedyrotichipicecojon', index=5) -> bool:\n    \"\"\"Check if the string is a substring of the big string starting at index\"\"\"\n    return big_str[index:].startswith(s)",
        "solution_func": "def g(big_str='fatextemedyrotichipicecojon', index=5):\n    return big_str[index:]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if the target list contains n as an element.\"\"\"\n    return n in target\ndef g(target=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return target[-1]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 198,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, target=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if the target list contains n as an element.\"\"\"\n    return n in target",
        "solution_func": "def g(target=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return target[-1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\nfrom typing import List\n\ndef f(emails: List[str], domain='example.com') -> bool:\n    \"\"\"Check if any of the emails in the given list belong to the specified domain\"\"\"\n    return any(re.search(f\"@{domain}$\", email) for email in emails)\n\ndef g(domain='example.com'):\n    return [f\"user{i}@{domain}\" for i in range(1, 6)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 199,
        "target_skills": null,
        "problem_func": "from typing import*\nimport re\nfrom typing import List\n\ndef f(emails: List[str], domain='example.com') -> bool:\n    \"\"\"Check if any of the emails in the given list belong to the specified domain\"\"\"\n    return any(re.search(f\"@{domain}$\", email) for email in emails)",
        "solution_func": "def g(domain='example.com'):\n    return [f\"user{i}@{domain}\" for i in range(1, 6)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\nfrom typing import List\n\ndef f(emails: List[str], domain='example.com') -> bool:\n    \"\"\"Check if none of the emails in the given list belong to the specified domain\"\"\"\n    return not any(re.search(f\"@{domain}$\", email) for email in emails)\n\ndef g(domain='example.com'):\n    return [f\"user{i}@gmail.com\" for i in range(1, 6)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 199,
        "target_skills": null,
        "problem_func": "from typing import*\nimport re\nfrom typing import List\n\ndef f(emails: List[str], domain='example.com') -> bool:\n    \"\"\"Check if none of the emails in the given list belong to the specified domain\"\"\"\n    return not any(re.search(f\"@{domain}$\", email) for email in emails)",
        "solution_func": "def g(domain='example.com'):\n    return [f\"user{i}@gmail.com\" for i in range(1, 6)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\nfrom typing import List\n\ndef f(emails: List[str], domain='example.com') -> bool:\n    \"\"\"Check if the number of emails in the given list belonging to the specified domain is greater than 2\"\"\"\n    return sum(1 for email in emails if re.search(f\"@{domain}$\", email)) > 2\n\ndef g(domain='example.com'):\n    return [f\"user{i}@{domain}\" for i in range(1, 6)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 199,
        "target_skills": null,
        "problem_func": "from typing import*\nimport re\nfrom typing import List\n\ndef f(emails: List[str], domain='example.com') -> bool:\n    \"\"\"Check if the number of emails in the given list belonging to the specified domain is greater than 2\"\"\"\n    return sum(1 for email in emails if re.search(f\"@{domain}$\", email)) > 2",
        "solution_func": "def g(domain='example.com'):\n    return [f\"user{i}@{domain}\" for i in range(1, 6)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Given a list of numbers, find a pair of numbers that sum up to a given target sum\"\"\"\n    return any((nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target_sum=10):\n    return [1, target_sum-1]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 199,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Given a list of numbers, find a pair of numbers that sum up to a given target sum\"\"\"\n    return any((nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums))))",
        "solution_func": "def g(target_sum=10):\n    return [1, target_sum-1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_value=0) -> bool:\n    \"\"\"Given a matrix, check if a given target value exists in the matrix\"\"\"\n    return any((target_value in row for row in matrix))\ndef g(target_value=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target_value]]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 199,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_value=0) -> bool:\n    \"\"\"Given a matrix, check if a given target value exists in the matrix\"\"\"\n    return any((target_value in row for row in matrix))",
        "solution_func": "def g(target_value=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target_value]]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(sentence: str, target_word=\"is\") -> bool:\n    \"\"\"Check if a given word exists in a sentence\"\"\"\n    return target_word in sentence.split()\ndef g(target_word=\"is\"):\n    return \"This sentence does not contain the target word.\"\nassert f(g())\n",
        "emb": null,
        "idx_generation": 199,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(sentence: str, target_word=\"is\") -> bool:\n    \"\"\"Check if a given word exists in a sentence\"\"\"\n    return target_word in sentence.split()",
        "solution_func": "def g(target_word=\"is\"):\n    return \"This sentence does not contain the target word.\"",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if the given string starts with the specified character.\"\"\"\n    return s.startswith(char)\ndef g(char='a'):\n    return char + 'bcdefghijklmnopqrstuvwxyz'\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 199,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if the given string starts with the specified character.\"\"\"\n    return s.startswith(char)",
        "solution_func": "def g(char='a'):\n    return char + 'bcdefghijklmnopqrstuvwxyz'",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if the given list contains exactly n unique elements.\"\"\"\n    return len(set(lst)) == n\ndef g(n=5):\n    return list(range(n))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 199,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if the given list contains exactly n unique elements.\"\"\"\n    return len(set(lst)) == n",
        "solution_func": "def g(n=5):\n    return list(range(n))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the given matrix is a square matrix of size n x n.\"\"\"\n    return all(len(row) == n for row in matrix) and len(matrix) == n\ndef g(n=3):\n    return [[1] * n for _ in range(n)]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            0.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 199,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the given matrix is a square matrix of size n x n.\"\"\"\n    return all(len(row) == n for row in matrix) and len(matrix) == n",
        "solution_func": "def g(n=3):\n    return [[1] * n for _ in range(n)]",
        "map_ix": [
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(arr: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the given list of lists is a magic square of size n.\"\"\"\n    target_sum = n * (n**2 + 1) // 2\n    row_sums = [sum(row) for row in arr]\n    col_sums = [sum(col) for col in zip(*arr)]\n    diagonal_sum1 = sum(arr[i][i] for i in range(n))\n    diagonal_sum2 = sum(arr[i][n-i-1] for i in range(n))\n    return all(sum == target_sum for sum in row_sums + col_sums + [diagonal_sum1, diagonal_sum2])\n\ndef g(n=3):\n    arr = [[0] * n for _ in range(n)]\n    elements = list(range(1, n**2 + 1))\n    random.shuffle(elements)\n    for i in range(n):\n        for j in range(n):\n            arr[i][j] = elements.pop()\n    return arr\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 199,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\nfrom typing import List\n\ndef f(arr: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the given list of lists is a magic square of size n.\"\"\"\n    target_sum = n * (n**2 + 1) // 2\n    row_sums = [sum(row) for row in arr]\n    col_sums = [sum(col) for col in zip(*arr)]\n    diagonal_sum1 = sum(arr[i][i] for i in range(n))\n    diagonal_sum2 = sum(arr[i][n-i-1] for i in range(n))\n    return all(sum == target_sum for sum in row_sums + col_sums + [diagonal_sum1, diagonal_sum2])",
        "solution_func": "def g(n=3):\n    arr = [[0] * n for _ in range(n)]\n    elements = list(range(1, n**2 + 1))\n    random.shuffle(elements)\n    for i in range(n):\n        for j in range(n):\n            arr[i][j] = elements.pop()\n    return arr",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of integers in the list such that their sum is equal to the target value.\"\"\"\n    complements = set()\n\n    for num in arr:\n        if num in complements:\n            return True\n        complements.add(target - num)\n\n    return False\n\ndef g(target=10):\n    arr = [random.randint(1, 9) for _ in range(10)]\n    return arr\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 200,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\nfrom typing import List\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of integers in the list such that their sum is equal to the target value.\"\"\"\n    complements = set()\n\n    for num in arr:\n        if num in complements:\n            return True\n        complements.add(target - num)\n\n    return False",
        "solution_func": "def g(target=10):\n    arr = [random.randint(1, 9) for _ in range(10)]\n    return arr",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target value.\"\"\"\n    prefixes = set([0])\n    curr_sum = 0\n\n    for num in nums:\n        curr_sum += num\n        if curr_sum - target in prefixes:\n            return True\n        prefixes.add(curr_sum)\n\n    return False\n\ndef g(target=0):\n    nums = [-1, 2, 3, -4, 5, 2, -2]\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 200,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target value.\"\"\"\n    prefixes = set([0])\n    curr_sum = 0\n\n    for num in nums:\n        curr_sum += num\n        if curr_sum - target in prefixes:\n            return True\n        prefixes.add(curr_sum)\n\n    return False",
        "solution_func": "def g(target=0):\n    nums = [-1, 2, 3, -4, 5, 2, -2]\n    return nums",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there exists a row in the matrix that contains all zeros.\"\"\"\n    for row in matrix:\n        if all(num == 0 for num in row):\n            return True\n\n    return False\n\ndef g(target=0):\n    matrix = [[1, 2, 3], [0, 0, 0], [4, 5, 6]]\n    return matrix\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 200,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there exists a row in the matrix that contains all zeros.\"\"\"\n    for row in matrix:\n        if all(num == 0 for num in row):\n            return True\n\n    return False",
        "solution_func": "def g(target=0):\n    matrix = [[1, 2, 3], [0, 0, 0], [4, 5, 6]]\n    return matrix",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if any two numbers in the list add up to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g():\n    return [3, 5, 2, 8, 4, 9]\nassert f(g(), 7)\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 200,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if any two numbers in the list add up to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g():\n    return [3, 5, 2, 8, 4, 9]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(strings: List[str], char='a') -> bool:\n    \"\"\"Check if any string in the list contains the given character.\"\"\"\n    return any(char in s for s in strings)\ndef g():\n    return [\"apple\", \"banana\", \"cherry\", \"durian\"]\nassert f(g(), 'b')\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 200,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(strings: List[str], char='a') -> bool:\n    \"\"\"Check if any string in the list contains the given character.\"\"\"\n    return any(char in s for s in strings)",
        "solution_func": "def g():\n    return [\"apple\", \"banana\", \"cherry\", \"durian\"]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if any number in the list is divisible by the target number.\"\"\"\n    return any(num % target == 0 for num in nums)\ndef g():\n    return [10, 15, 25, 30, 35, 40]\nassert f(g(), 5)\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 200,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if any number in the list is divisible by the target number.\"\"\"\n    return any(num % target == 0 for num in nums)",
        "solution_func": "def g():\n    return [10, 15, 25, 30, 35, 40]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Check if there exists three numbers in the list that adds up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[10, 15, 5, 8, 12]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 200,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Check if there exists three numbers in the list that adds up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(nums=[10, 15, 5, 8, 12]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if the sum of all the numbers in the list is equal to the target value.\"\"\"\n    return sum(nums) == target\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 200,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if the sum of all the numbers in the list is equal to the target value.\"\"\"\n    return sum(nums) == target",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(inds: List[int], string='  einliJSgeteq ne CAlti') -> bool:\n    \"\"\"Find decreasing indices to make the substring \"intelligent\" (with a surprise twist)\"\"\"\n    return inds == sorted(inds, reverse=True) and ''.join((string[i] for i in inds)) == 'intelligent'\ndef g(string='  einliJSgeteq ne CAlti'):\n    target = 'intelligent'\n    j = len(target) - 1\n    ans = []\n    for i in range(len(string)-1, -len(string)-1, -1):\n        while string[i] == target[j]:\n            ans.append(i)\n            j -= 1\n            if j < 0:\n                return ans\nassert f(g())\n",
        "emb": null,
        "idx_generation": 200,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(inds: List[int], string='  einliJSgeteq ne CAlti') -> bool:\n    \"\"\"Find decreasing indices to make the substring \"intelligent\" (with a surprise twist)\"\"\"\n    return inds == sorted(inds, reverse=True) and ''.join((string[i] for i in inds)) == 'intelligent'",
        "solution_func": "def g(string='  einliJSgeteq ne CAlti'):\n    target = 'intelligent'\n    j = len(target) - 1\n    ans = []\n    for i in range(len(string)-1, -len(string)-1, -1):\n        while string[i] == target[j]:\n            ans.append(i)\n            j -= 1\n            if j < 0:\n                return ans",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=3, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if the given string contains the target number of non-consecutive vowels from a provided list of vowels.\"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n            if count == target:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(target=3, vowels=['a', 'e', 'i', 'o', 'u']):\n    return \"aeioubcdfg\" * target\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 200,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target=3, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if the given string contains the target number of non-consecutive vowels from a provided list of vowels.\"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n            if count == target:\n                return True\n        else:\n            count = 0\n    return False",
        "solution_func": "def g(target=3, vowels=['a', 'e', 'i', 'o', 'u']):\n    return \"aeioubcdfg\" * target",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers, determine if there exist two numbers in the list whose sum is equal to the target.\"\"\"\n    seen = set()\n    for num in arr:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g(), 9)\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 201,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers, determine if there exist two numbers in the list whose sum is equal to the target.\"\"\"\n    seen = set()\n    for num in arr:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 4, 5, 6]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers, determine if there exist three numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(arr)-2):\n        for j in range(i+1, len(arr)-1):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g(), 12)\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 201,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers, determine if there exist three numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(arr)-2):\n        for j in range(i+1, len(arr)-1):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False",
        "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 4, 5, 6]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers, determine if there exist four numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(arr)-3):\n        for j in range(i+1, len(arr)-2):\n            for k in range(j+1, len(arr)-1):\n                for l in range(k+1, len(arr)):\n                    if arr[i] + arr[j] + arr[k] + arr[l] == target:\n                        return True\n    return False\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g(), 15)\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 201,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers, determine if there exist four numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(arr)-3):\n        for j in range(i+1, len(arr)-2):\n            for k in range(j+1, len(arr)-1):\n                for l in range(k+1, len(arr)):\n                    if arr[i] + arr[j] + arr[k] + arr[l] == target:\n                        return True\n    return False",
        "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 4, 5, 6]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 201,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [2, 4, 6, 8, 10]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is symmetric along its main diagonal.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 201,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is symmetric along its main diagonal.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True",
        "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]",
        "map_ix": [
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Determine if there are three numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 201,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Determine if there are three numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Tuple\n\ndef f(s: str, a='apple', b='banana', c='cherry') -> bool:\n    \"\"\"Check if a string contains all the given substrings\"\"\"\n    return all(sub in s for sub in [a, b, c])\n\ndef g(a='apple', b='banana', c='cherry'):\n    return f\"I love {a} and {b}, but I don't like {c}.\"\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 201,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import Tuple\n\ndef f(s: str, a='apple', b='banana', c='cherry') -> bool:\n    \"\"\"Check if a string contains all the given substrings\"\"\"\n    return all(sub in s for sub in [a, b, c])",
        "solution_func": "def g(a='apple', b='banana', c='cherry'):\n    return f\"I love {a} and {b}, but I don't like {c}.\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are three numbers in the list whose product is equal to the target value.\"\"\"\n    n = len(nums)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if nums[i] * nums[j] * nums[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 201,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are three numbers in the list whose product is equal to the target value.\"\"\"\n    n = len(nums)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if nums[i] * nums[j] * nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(d: Dict[str, int], target=100) -> bool:\n    \"\"\"Check if the sum of values in the dictionary is equal to the target value.\"\"\"\n    return sum(d.values()) == target\n\ndef g():\n    return {'apple': 20, 'banana': 30, 'cherry': 50}\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 201,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import Dict\n\ndef f(d: Dict[str, int], target=100) -> bool:\n    \"\"\"Check if the sum of values in the dictionary is equal to the target value.\"\"\"\n    return sum(d.values()) == target",
        "solution_func": "def g():\n    return {'apple': 20, 'banana': 30, 'cherry': 50}",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100, k=4) -> bool:\n    \"\"\"Find k numbers that sum up to the target value.\"\"\"\n    return sum(numbers) == target and len(numbers) == k and all((n in numbers for n in range(1, k+1)))\ndef g(target=100, k=4):\n    return list(range(1, k+1)) + [target - sum(range(1, k+1))]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 201,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=100, k=4) -> bool:\n    \"\"\"Find k numbers that sum up to the target value.\"\"\"\n    return sum(numbers) == target and len(numbers) == k and all((n in numbers for n in range(1, k+1)))",
        "solution_func": "def g(target=100, k=4):\n    return list(range(1, k+1)) + [target - sum(range(1, k+1))]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=45) -> bool:\n    \"\"\"Check if there exists a combination of two numbers from the list whose product is equal to the target value.\"\"\"\n    return any((n1 * n2 == target for i, n1 in enumerate(nums) for j, n2 in enumerate(nums[i+1:])))\n\ndef g(nums=[1, 5, 9, 10, 15, 20]):\n    return nums\n\nassert f(g())\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 202,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=45) -> bool:\n    \"\"\"Check if there exists a combination of two numbers from the list whose product is equal to the target value.\"\"\"\n    return any((n1 * n2 == target for i, n1 in enumerate(nums) for j, n2 in enumerate(nums[i+1:])))",
        "solution_func": "def g(nums=[1, 5, 9, 10, 15, 20]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Check if there exists a combination of four numbers from the list whose product is equal to the target value.\"\"\"\n    return any((n1 * n2 * n3 * n4 == target for i, n1 in enumerate(nums) for j, n2 in enumerate(nums[i+1:]) for k, n3 in enumerate(nums[i+j+2:]) for n4 in nums[i+j+k+3:]))\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g())\n\n",
        "emb": null,
        "idx_generation": 202,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Check if there exists a combination of four numbers from the list whose product is equal to the target value.\"\"\"\n    return any((n1 * n2 * n3 * n4 == target for i, n1 in enumerate(nums) for j, n2 in enumerate(nums[i+1:]) for k, n3 in enumerate(nums[i+j+2:]) for n4 in nums[i+j+k+3:]))",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a combination of four numbers from the list whose sum is equal to the target value.\"\"\"\n    return any((n1 + n2 + n3 + n4 == target for i, n1 in enumerate(nums) for j, n2 in enumerate(nums[i+1:]) for k, n3 in enumerate(nums[i+j+2:]) for n4 in nums[i+j+k+3:]))\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g())\n\n",
        "emb": null,
        "idx_generation": 202,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a combination of four numbers from the list whose sum is equal to the target value.\"\"\"\n    return any((n1 + n2 + n3 + n4 == target for i, n1 in enumerate(nums) for j, n2 in enumerate(nums[i+1:]) for k, n3 in enumerate(nums[i+j+2:]) for n4 in nums[i+j+k+3:]))",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find a list of integers where the product of any two numbers is a perfect square.\"\"\"\n    return all((int((a * b) ** 0.5) ** 2 == a * b for i, a in enumerate(nums) for b in nums[i + 1:]))\n\ndef g():\n    return [2, 3, 5, 6, 8, 10, 11, 15, 20, 24]\n    \nassert f(g())\n",
        "emb": null,
        "idx_generation": 202,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find a list of integers where the product of any two numbers is a perfect square.\"\"\"\n    return all((int((a * b) ** 0.5) ** 2 == a * b for i, a in enumerate(nums) for b in nums[i + 1:]))",
        "solution_func": "def g():\n    return [2, 3, 5, 6, 8, 10, 11, 15, 20, 24]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if all vowels in the string 's' are in uppercase.\"\"\"\n    return all((v in s and v.upper() == v for v in vowels))\n\ndef g():\n    return \"AEIOU\"\n    \nassert f(g())\n",
        "emb": null,
        "idx_generation": 202,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if all vowels in the string 's' are in uppercase.\"\"\"\n    return all((v in s and v.upper() == v for v in vowels))",
        "solution_func": "def g():\n    return \"AEIOU\"",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find a list of numbers where each number is divisible by all the previous numbers in the list.\"\"\"\n    return all((nums[i] % d == 0 for i, n in enumerate(nums) for d in nums[:i]))\n\ndef g():\n    return [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]\n    \nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 202,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find a list of numbers where each number is divisible by all the previous numbers in the list.\"\"\"\n    return all((nums[i] % d == 0 for i, n in enumerate(nums) for d in nums[:i]))",
        "solution_func": "def g():\n    return [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, substring='') -> bool:\n    \"\"\"Find a string that contains a certain substring at least twice.\"\"\"\n    return s.count(substring) >= 2\ndef g(substring=''):\n    return substring * 2\nassert f(g())\n",
        "emb": null,
        "idx_generation": 202,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring='') -> bool:\n    \"\"\"Find a string that contains a certain substring at least twice.\"\"\"\n    return s.count(substring) >= 2",
        "solution_func": "def g(substring=''):\n    return substring * 2",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=30) -> bool:\n    \"\"\"Find a list of integers where the sum of any three elements is equal to a target number.\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(len(nums)) for k in range(len(nums)) if i != j and i != k and j != k))\ndef g(target=30):\n    return [10, 20, target - 30]\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 202,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=30) -> bool:\n    \"\"\"Find a list of integers where the sum of any three elements is equal to a target number.\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(len(nums)) for k in range(len(nums)) if i != j and i != k and j != k))",
        "solution_func": "def g(target=30):\n    return [10, 20, target - 30]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(radius: float, area=50) -> bool:\n    \"\"\"Find a radius of a circle that has a certain area.\"\"\"\n    return math.pi * radius * radius == area\n\ndef g(area=50):\n    return math.sqrt(area / math.pi)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 202,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(radius: float, area=50) -> bool:\n    \"\"\"Find a radius of a circle that has a certain area.\"\"\"\n    return math.pi * radius * radius == area",
        "solution_func": "def g(area=50):\n    return math.sqrt(area / math.pi)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a subset of numbers in the given array that adds up to the target sum\"\"\"\n    dp = [[False] * (target + 1) for _ in range(len(arr) + 1)]\n    for i in range(len(arr) + 1):\n        dp[i][0] = True\n    for i in range(1, len(arr) + 1):\n        for j in range(1, target + 1):\n            if arr[i-1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i-1]]\n    return dp[len(arr)][target]\n\ndef g(target=10):\n    return [i for i in range(1, target+1)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 202,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a subset of numbers in the given array that adds up to the target sum\"\"\"\n    dp = [[False] * (target + 1) for _ in range(len(arr) + 1)]\n    for i in range(len(arr) + 1):\n        dp[i][0] = True\n    for i in range(1, len(arr) + 1):\n        for j in range(1, target + 1):\n            if arr[i-1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i-1]]\n    return dp[len(arr)][target]",
        "solution_func": "def g(target=10):\n    return [i for i in range(1, target+1)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target=500) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target value.\"\"\"\n    return any(x + y == target for x in lst for y in lst)\n    \ndef g(target=500):\n    return [100, 200, 50, 150]\n    \nassert f(g())\n",
        "emb": null,
        "idx_generation": 203,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target=500) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target value.\"\"\"\n    return any(x + y == target for x in lst for y in lst)",
        "solution_func": "def g(target=500):\n    return [100, 200, 50, 150]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target=1000) -> bool:\n    \"\"\"Check if there exists a subsequence of numbers in the list whose sum is equal to the target value.\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    \n    return subset_sum(lst, target)\n\ndef g(target=1000):\n    return [100, 200, 50, 150]\n    \nassert f(g())\n",
        "emb": null,
        "idx_generation": 203,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target=1000) -> bool:\n    \"\"\"Check if there exists a subsequence of numbers in the list whose sum is equal to the target value.\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    \n    return subset_sum(lst, target)",
        "solution_func": "def g(target=1000):\n    return [100, 200, 50, 150]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose difference is equal to the target value.\"\"\"\n    return any(abs(x - y) == target for x in lst for y in lst)\n    \ndef g(target=100):\n    return [10, 25, 4, 5]\n    \nassert f(g())\n",
        "emb": null,
        "idx_generation": 203,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose difference is equal to the target value.\"\"\"\n    return any(abs(x - y) == target for x in lst for y in lst)",
        "solution_func": "def g(target=100):\n    return [10, 25, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=1) -> bool:\n    \"\"\"Check if the sum of the first n odd numbers is equal to s.\"\"\"\n    return sum(range(1, 2*n, 2)) == int(s)\ndef g(n=1):\n    return str(n**2)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 203,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=1) -> bool:\n    \"\"\"Check if the sum of the first n odd numbers is equal to s.\"\"\"\n    return sum(range(1, 2*n, 2)) == int(s)",
        "solution_func": "def g(n=1):\n    return str(n**2)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\n\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there are three numbers in arr that sum up to target.\"\"\"\n    random.shuffle(arr)\n    for i in range(len(arr)-2):\n        for j in range(i+1, len(arr)-1):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\ndef g(target=0):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return arr\nassert f(g())\n",
        "emb": null,
        "idx_generation": 203,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\n\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there are three numbers in arr that sum up to target.\"\"\"\n    random.shuffle(arr)\n    for i in range(len(arr)-2):\n        for j in range(i+1, len(arr)-1):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=0):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return arr",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr=[3, 5, 7, 9, 11, 13, 15, 17, 19, 21], k=5) -> bool:\n    \"\"\"Check if there are at least k prime numbers in the first n elements of arr.\"\"\"\n    primes = [num for num in arr if all(num % i != 0 for i in range(2, int(num**0.5) + 1))]\n    return len(primes) >= k\ndef g(arr=[3, 5, 7, 9, 11, 13, 15, 17, 19, 21], k=5):\n    return arr\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 203,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, arr=[3, 5, 7, 9, 11, 13, 15, 17, 19, 21], k=5) -> bool:\n    \"\"\"Check if there are at least k prime numbers in the first n elements of arr.\"\"\"\n    primes = [num for num in arr if all(num % i != 0 for i in range(2, int(num**0.5) + 1))]\n    return len(primes) >= k",
        "solution_func": "def g(arr=[3, 5, 7, 9, 11, 13, 15, 17, 19, 21], k=5):\n    return arr",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 203,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(side1: float, side2: float, side3: float, area=10) -> bool:\n    \"\"\"Check if the area of a triangle with the given sides is equal to the target area.\"\"\"\n    s = (side1 + side2 + side3) / 2\n    calculated_area = math.sqrt(s * (s - side1) * (s - side2) * (s - side3))\n    return calculated_area == area\n\ndef g(area=10):\n    side1 = 4\n    side2 = 5\n    side3 = 6\n    return side1, side2, side3\n\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 203,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(side1: float, side2: float, side3: float, area=10) -> bool:\n    \"\"\"Check if the area of a triangle with the given sides is equal to the target area.\"\"\"\n    s = (side1 + side2 + side3) / 2\n    calculated_area = math.sqrt(s * (s - side1) * (s - side2) * (s - side3))\n    return calculated_area == area",
        "solution_func": "def g(area=10):\n    side1 = 4\n    side2 = 5\n    side3 = 6\n    return side1, side2, side3",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if the target number exists in the given matrix.\"\"\"\n    for row in matrix:\n        for num in row:\n            if num == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 203,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if the target number exists in the given matrix.\"\"\"\n    for row in matrix:\n        for num in row:\n            if num == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: Tuple[int, int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies inside a square.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of third decimal digit is required.\"\"\"\n    x, y = e\n    return (a <= x <= a+c) and (b <= y <= b+c)\ndef g(a=1, b=2, c=10):\n    return (a+c/2, b+c/2)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 203,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(e: Tuple[int, int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies inside a square.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of third decimal digit is required.\"\"\"\n    x, y = e\n    return (a <= x <= a+c) and (b <= y <= b+c)",
        "solution_func": "def g(a=1, b=2, c=10):\n    return (a+c/2, b+c/2)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=15, k=4) -> bool:\n    \"\"\"Find if there exists a combination of k numbers in nums that add up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k))\ndef g(target=15, k=4):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 204,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=15, k=4) -> bool:\n    \"\"\"Find if there exists a combination of k numbers in nums that add up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k))",
        "solution_func": "def g(target=15, k=4):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=20, k=2) -> bool:\n    \"\"\"Find if there exists a combination of k numbers in nums that add up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k))\ndef g(target=20, k=2):\n    return [10, 5, 3, 2, 1]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 204,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=20, k=2) -> bool:\n    \"\"\"Find if there exists a combination of k numbers in nums that add up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k))",
        "solution_func": "def g(target=20, k=2):\n    return [10, 5, 3, 2, 1]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, k=5) -> bool:\n    \"\"\"Find if there exists a combination of k numbers in nums that add up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k))\ndef g(target=100, k=5):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 204,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, k=5) -> bool:\n    \"\"\"Find if there exists a combination of k numbers in nums that add up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k))",
        "solution_func": "def g(target=100, k=5):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m=20) -> bool:\n    \"\"\"Check if the given number is divisible by m and is also a prime number.\"\"\"\n    if n == 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return n % m == 0\n\ndef g(m=20):\n    return m * 13\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 204,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=20) -> bool:\n    \"\"\"Check if the given number is divisible by m and is also a prime number.\"\"\"\n    if n == 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return n % m == 0",
        "solution_func": "def g(m=20):\n    return m * 13",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m=20) -> bool:\n    \"\"\"Check if the given number is divisible by m and is also a palindrome.\"\"\"\n    return n % m == 0 and str(n) == str(n)[::-1]\n\ndef g(m=20):\n    return m * 121\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 204,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=20) -> bool:\n    \"\"\"Check if the given number is divisible by m and is also a palindrome.\"\"\"\n    return n % m == 0 and str(n) == str(n)[::-1]",
        "solution_func": "def g(m=20):\n    return m * 121",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m=20) -> bool:\n    \"\"\"Check if the given number is divisible by m and is also a power of 2.\"\"\"\n    return n % m == 0 and n != 0 and (n & (n - 1)) == 0\n\ndef g(m=20):\n    return 2**m\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 204,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=20) -> bool:\n    \"\"\"Check if the given number is divisible by m and is also a power of 2.\"\"\"\n    return n % m == 0 and n != 0 and (n & (n - 1)) == 0",
        "solution_func": "def g(m=20):\n    return 2**m",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if the target list contains n as an element and n is even.\"\"\"\n    return n in target and n % 2 == 0\ndef g(target=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return target[1]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 204,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, target=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if the target list contains n as an element and n is even.\"\"\"\n    return n in target and n % 2 == 0",
        "solution_func": "def g(target=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return target[1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if the target list contains n as an element and the sum of the target list is greater than n.\"\"\"\n    return n in target and sum(target) > n\ndef g(target=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return target[2]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 204,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, target=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if the target list contains n as an element and the sum of the target list is greater than n.\"\"\"\n    return n in target and sum(target) > n",
        "solution_func": "def g(target=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return target[2]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, target=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if the target list contains n as an element and n is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g(target=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return target[3]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 204,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, target=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if the target list contains n as an element and n is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g(target=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return target[3]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=15) -> bool:\n    \"\"\"Check if there exists a pair of integers in the list whose sum is equal to the target_sum.\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=15):\n    return [i for i in range(1, target_sum+1)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 204,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target_sum=15) -> bool:\n    \"\"\"Check if there exists a pair of integers in the list whose sum is equal to the target_sum.\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=15):\n    return [i for i in range(1, target_sum+1)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10, n=3) -> bool:\n    \"\"\"Check if there are exactly 'n' numbers in the list that sum up to 'target'\"\"\"\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                count += 1\n    return count == n\n\ndef g(target=10, n=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 205,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10, n=3) -> bool:\n    \"\"\"Check if there are exactly 'n' numbers in the list that sum up to 'target'\"\"\"\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                count += 1\n    return count == n",
        "solution_func": "def g(target=10, n=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20, n=3) -> bool:\n    \"\"\"Check if there are exactly 'n' number of rows in the matrix that have a sum equal to 'target'\"\"\"\n    count = 0\n    for row in matrix:\n        if sum(row) == target:\n            count += 1\n    return count == n\n\ndef g(target=20, n=3):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 205,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20, n=3) -> bool:\n    \"\"\"Check if there are exactly 'n' number of rows in the matrix that have a sum equal to 'target'\"\"\"\n    count = 0\n    for row in matrix:\n        if sum(row) == target:\n            count += 1\n    return count == n",
        "solution_func": "def g(target=20, n=3):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=25, n=4) -> bool:\n    \"\"\"Check if there are exactly 'n' numbers in the list that multiply to 'target'\"\"\"\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                for l in range(k+1, len(nums)):\n                    if nums[i] * nums[j] * nums[k] * nums[l] == target:\n                        count += 1\n    return count == n\n\ndef g(target=25, n=4):\n    return [1, 2, 5, 10, 4, 3, 6]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 205,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=25, n=4) -> bool:\n    \"\"\"Check if there are exactly 'n' numbers in the list that multiply to 'target'\"\"\"\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                for l in range(k+1, len(nums)):\n                    if nums[i] * nums[j] * nums[k] * nums[l] == target:\n                        count += 1\n    return count == n",
        "solution_func": "def g(target=25, n=4):\n    return [1, 2, 5, 10, 4, 3, 6]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=42) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product equals the target number.\"\"\"\n    return any((numbers[i] * numbers[j] == target for i in range(len(numbers)) for j in range(i+1, len(numbers))))\n\ndef g(target=42):\n    numbers = [1, 2, 3, 4, 5]\n    return numbers\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 205,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=42) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product equals the target number.\"\"\"\n    return any((numbers[i] * numbers[j] == target for i in range(len(numbers)) for j in range(i+1, len(numbers))))",
        "solution_func": "def g(target=42):\n    numbers = [1, 2, 3, 4, 5]\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if the sum of any two distinct numbers in the list is equal to the target number.\"\"\"\n    return any((numbers[i] + numbers[j] == target for i in range(len(numbers)) for j in range(i+1, len(numbers))))\n\ndef g(target=100):\n    numbers = [10, 20, 30, 40, 50]\n    return numbers\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 205,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if the sum of any two distinct numbers in the list is equal to the target number.\"\"\"\n    return any((numbers[i] + numbers[j] == target for i in range(len(numbers)) for j in range(i+1, len(numbers))))",
        "solution_func": "def g(target=100):\n    numbers = [10, 20, 30, 40, 50]\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=25) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target number.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)+1):\n            if sum(numbers[i:j]) == target:\n                return True\n    return False\n\ndef g(target=25):\n    numbers = [5, 10, 15, 20, 25]\n    return numbers\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 205,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=25) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target number.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)+1):\n            if sum(numbers[i:j]) == target:\n                return True\n    return False",
        "solution_func": "def g(target=25):\n    numbers = [5, 10, 15, 20, 25]\n    return numbers",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(seq: List[int], target_sum=10) -> bool:\n    \"\"\"Find a subsequence of seq whose sum is equal to target_sum\"\"\"\n    for i in range(len(seq)):\n        for j in range(i+1, len(seq)+1):\n            if sum(seq[i:j]) == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 205,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(seq: List[int], target_sum=10) -> bool:\n    \"\"\"Find a subsequence of seq whose sum is equal to target_sum\"\"\"\n    for i in range(len(seq)):\n        for j in range(i+1, len(seq)+1):\n            if sum(seq[i:j]) == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            1,
            1,
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, substring='world') -> bool:\n    \"\"\"Check if the given substring is present in s in reverse order\"\"\"\n    return substring[::-1] in s\n\ndef g(substring='world'):\n    return 'hello world'\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 205,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring='world') -> bool:\n    \"\"\"Check if the given substring is present in s in reverse order\"\"\"\n    return substring[::-1] in s",
        "solution_func": "def g(substring='world'):\n    return 'hello world'",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(target=5):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 205,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False",
        "solution_func": "def g(target=5):\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], divisor=2) -> bool:\n    \"\"\"Check if all numbers in the list are divisible by the divisor\"\"\"\n    return all(num % divisor == 0 for num in nums)\ndef g(divisor=2):\n    return [2, 4, 6, 8, 10]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 205,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], divisor=2) -> bool:\n    \"\"\"Check if all numbers in the list are divisible by the divisor\"\"\"\n    return all(num % divisor == 0 for num in nums)",
        "solution_func": "def g(divisor=2):\n    return [2, 4, 6, 8, 10]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc', count=3) -> bool:\n    \"\"\"Check if the given string contains 'count' number of occurrences of the substring\"\"\"\n    return s.count(substring) == count\n\ndef g(substring='abc', count=3):\n    return substring * count + 'xyz' * (count - 1)\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 206,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring='abc', count=3) -> bool:\n    \"\"\"Check if the given string contains 'count' number of occurrences of the substring\"\"\"\n    return s.count(substring) == count",
        "solution_func": "def g(substring='abc', count=3):\n    return substring * count + 'xyz' * (count - 1)",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m=20) -> bool:\n    \"\"\"Check if the given number is divisible by m and is also a perfect square.\"\"\"\n    return n % m == 0 and int(n**0.5)**2 == n\n\ndef g(m=20):\n    return m**3\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 206,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=20) -> bool:\n    \"\"\"Check if the given number is divisible by m and is also a perfect square.\"\"\"\n    return n % m == 0 and int(n**0.5)**2 == n",
        "solution_func": "def g(m=20):\n    return m**3",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=20) -> bool:\n    \"\"\"Check if the given number is divisible by m and is also a perfect square.\"\"\"\n    return n % m == 0 and int(n**0.5)**2 == n\n\ndef g(m=10):\n    return m**2\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 206,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=20) -> bool:\n    \"\"\"Check if the given number is divisible by m and is also a perfect square.\"\"\"\n    return n % m == 0 and int(n**0.5)**2 == n",
        "solution_func": "def g(m=10):\n    return m**2",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int], target_sum: int = 10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target_sum=10):\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 206,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import *\ndef f(nums: List[int], target_sum: int = 10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target_sum=10):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 206,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import *\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols",
        "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(strings: List[str], length: int = 5) -> bool:\n    \"\"\"Check if any string in the list has a length greater than the specified length.\"\"\"\n    for string in strings:\n        if len(string) > length:\n            return True\n    return False\ndef g(strings=[\"apple\", \"banana\", \"cherry\"], length=5):\n    return strings\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 206,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import *\ndef f(strings: List[str], length: int = 5) -> bool:\n    \"\"\"Check if any string in the list has a length greater than the specified length.\"\"\"\n    for string in strings:\n        if len(string) > length:\n            return True\n    return False",
        "solution_func": "def g(strings=[\"apple\", \"banana\", \"cherry\"], length=5):\n    return strings",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=15):\n    return [1, 3, 5, 7, 9]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 206,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]",
        "solution_func": "def g(target=15):\n    return [1, 3, 5, 7, 9]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Check if there is a subarray of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=12):\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 206,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Check if there is a subarray of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]",
        "solution_func": "def g(target=12):\n    return [2, 4, 6, 8, 10]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=30) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=30):\n    return [3, 5, 7, 9, 11]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 206,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=30) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]",
        "solution_func": "def g(target=30):\n    return [3, 5, 7, 9, 11]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Check if a given 2D matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    n = len(nums)\n    target = sum(nums[0])\n    \n    # Check rows\n    for row in nums:\n        if sum(row) != target:\n            return False\n    \n    # Check columns\n    for col in range(n):\n        if sum(nums[i][col] for i in range(n)) != target:\n            return False\n    \n    # Check diagonals\n    diag1 = sum(nums[i][i] for i in range(n))\n    diag2 = sum(nums[i][n-i-1] for i in range(n))\n    if diag1 != target or diag2 != target:\n        return False\n    \n    return True\n\n\ndef g():\n    from itertools import permutations\n    possible_nums = list(range(1, 10))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+3] for i in range(0, 9, 3)]\n        if f(matrix):\n            return matrix\n    assert False, \"No magic square found\"\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 206,
        "target_skills": null,
        "problem_func": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Check if a given 2D matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    n = len(nums)\n    target = sum(nums[0])\n    \n    # Check rows\n    for row in nums:\n        if sum(row) != target:\n            return False\n    \n    # Check columns\n    for col in range(n):\n        if sum(nums[i][col] for i in range(n)) != target:\n            return False\n    \n    # Check diagonals\n    diag1 = sum(nums[i][i] for i in range(n))\n    diag2 = sum(nums[i][n-i-1] for i in range(n))\n    if diag1 != target or diag2 != target:\n        return False\n    \n    return True",
        "solution_func": "def g():\n    from itertools import permutations\n    possible_nums = list(range(1, 10))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+3] for i in range(0, 9, 3)]\n        if f(matrix):\n            return matrix",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\ndef f(x: int, a=25) -> bool:\n    \"\"\"Check if the square root of x is equal to a\"\"\"\n    return sqrt(x) == a\ndef g(a=25):\n    return a**2\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 207,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import sqrt\ndef f(x: int, a=25) -> bool:\n    \"\"\"Check if the square root of x is equal to a\"\"\"\n    return sqrt(x) == a",
        "solution_func": "def g(a=25):\n    return a**2",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: int, a=100) -> bool:\n    \"\"\"Check if x is a power of a\"\"\"\n    return x == a**int(x**(1/a))\ndef g(a=100):\n    return a**3\nassert f(g())\n",
        "emb": null,
        "idx_generation": 207,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=100) -> bool:\n    \"\"\"Check if x is a power of a\"\"\"\n    return x == a**int(x**(1/a))",
        "solution_func": "def g(a=100):\n    return a**3",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=10) -> bool:\n    \"\"\"Check if the sum of all digits in x is equal to a\"\"\"\n    return sum(int(digit) for digit in str(x)) == a\ndef g(a=10):\n    return int(\"1\" * a)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 207,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=10) -> bool:\n    \"\"\"Check if the sum of all digits in x is equal to a\"\"\"\n    return sum(int(digit) for digit in str(x)) == a",
        "solution_func": "def g(a=10):\n    return int(\"1\" * a)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(points: List[Tuple[int, int]]) -> bool:\n    \"\"\"Check if the given points form a rectangle.\"\"\"\n    if len(points) != 4:\n        return False\n    \n    x_values = [point[0] for point in points]\n    y_values = [point[1] for point in points]\n    \n    return len(set(x_values)) == 2 and len(set(y_values)) == 2\n\ndef g():\n    points = [(0, 0), (0, 1), (1, 0), (1, 1)]\n    return points\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 207,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List, Tuple\n\ndef f(points: List[Tuple[int, int]]) -> bool:\n    \"\"\"Check if the given points form a rectangle.\"\"\"\n    if len(points) != 4:\n        return False\n    \n    x_values = [point[0] for point in points]\n    y_values = [point[1] for point in points]\n    \n    return len(set(x_values)) == 2 and len(set(y_values)) == 2",
        "solution_func": "def g():\n    points = [(0, 0), (0, 1), (1, 0), (1, 1)]\n    return points",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is in increasing order.\"\"\"\n    return all(nums[i] < nums[i+1] for i in range(len(nums)-1))\n\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 207,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is in increasing order.\"\"\"\n    return all(nums[i] < nums[i+1] for i in range(len(nums)-1))",
        "solution_func": "def g():\n    nums = [1, 2, 3, 4, 5]\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    num_set = set()\n    \n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    \n    return False\n\ndef g(target: int):\n    nums = [1, 2, 3, 4, 5]\n    return nums, target\n\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 207,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target.\"\"\"\n    num_set = set()\n    \n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    \n    return False",
        "solution_func": "def g(target: int):\n    nums = [1, 2, 3, 4, 5]\n    return nums, target",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=100):\n    return [50, 25, target - 75, 10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 207,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=100):\n    return [50, 25, target - 75, 10]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=42) -> bool:\n    \"\"\"Check if any row or column in the matrix contains the target number.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    for col in zip(*matrix):\n        if target in col:\n            return True\n    return False\ndef g(target=42):\n    return [[1, 2, 3], [4, 5, target], [7, 8, 9]]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 207,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=42) -> bool:\n    \"\"\"Check if any row or column in the matrix contains the target number.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    for col in zip(*matrix):\n        if target in col:\n            return True\n    return False",
        "solution_func": "def g(target=42):\n    return [[1, 2, 3], [4, 5, target], [7, 8, 9]]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(lst: List[int], n=3) -> bool:\n    \"\"\"Check if there are exactly n numbers in the list that are divisible by 5.\"\"\"\n    count = 0\n    for num in lst:\n        if num % 5 == 0:\n            count += 1\n    return count == n\ndef g(n=3):\n    return [10, n * 5, 20, 25, 30]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 207,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], n=3) -> bool:\n    \"\"\"Check if there are exactly n numbers in the list that are divisible by 5.\"\"\"\n    count = 0\n    for num in lst:\n        if num % 5 == 0:\n            count += 1\n    return count == n",
        "solution_func": "def g(n=3):\n    return [10, n * 5, 20, 25, 30]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc', count=3) -> bool:\n    \"\"\"Check if the given string contains 'count' number of occurrences of the substring\"\"\"\n    return s.count(substring) == count\n\ndef g(substring='abc', count=3):\n    return substring * count + 'xyz' * (count - 1) + 'def'\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 207,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring='abc', count=3) -> bool:\n    \"\"\"Check if the given string contains 'count' number of occurrences of the substring\"\"\"\n    return s.count(substring) == count",
        "solution_func": "def g(substring='abc', count=3):\n    return substring * count + 'xyz' * (count - 1) + 'def'",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, factors: List[int]=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is divisible by all of the given factors.\n    - n: the number to be checked\n    - factors: list of factors\"\"\"\n    return all(n % factor == 0 for factor in factors)\ndef g(n: int, factors: List[int]=[2, 3, 5]):\n    return n\nassert f(g(30))\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 208,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, factors: List[int]=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is divisible by all of the given factors.\n    - n: the number to be checked\n    - factors: list of factors\"\"\"\n    return all(n % factor == 0 for factor in factors)",
        "solution_func": "def g(n: int, factors: List[int]=[2, 3, 5]):\n    return n",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, factors: List[int]=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is divisible by any of the given factors.\n    - n: the number to be checked\n    - factors: list of factors\"\"\"\n    return any(n % factor == 0 for factor in factors)\ndef g(n: int, factors: List[int]=[2, 3, 5]):\n    return n\nassert f(g(12))\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 208,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, factors: List[int]=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is divisible by any of the given factors.\n    - n: the number to be checked\n    - factors: list of factors\"\"\"\n    return any(n % factor == 0 for factor in factors)",
        "solution_func": "def g(n: int, factors: List[int]=[2, 3, 5]):\n    return n",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\ndef f(n: int, factors: List[int]=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is a perfect square and divisible by all of the given factors.\n    - n: the number to be checked\n    - factors: list of factors\"\"\"\n    return math.isqrt(n) ** 2 == n and all(n % factor == 0 for factor in factors)\ndef g(n: int, factors: List[int]=[2, 3, 5]):\n    return n ** 2\nassert f(g(36))\n",
        "emb": null,
        "idx_generation": 208,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\ndef f(n: int, factors: List[int]=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is a perfect square and divisible by all of the given factors.\n    - n: the number to be checked\n    - factors: list of factors\"\"\"\n    return math.isqrt(n) ** 2 == n and all(n % factor == 0 for factor in factors)",
        "solution_func": "def g(n: int, factors: List[int]=[2, 3, 5]):\n    return n ** 2",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='programming', length=5) -> bool:\n    \"\"\"Find a substring of the given length, starting from the beginning of the target string.\"\"\"\n    return target[:length] == s\ndef g(target='programming', length=5):\n    return target[:length]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 208,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='programming', length=5) -> bool:\n    \"\"\"Find a substring of the given length, starting from the beginning of the target string.\"\"\"\n    return target[:length] == s",
        "solution_func": "def g(target='programming', length=5):\n    return target[:length]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='programming', length=5) -> bool:\n    \"\"\"Find a substring of the given length, starting from the end of the target string.\"\"\"\n    return target[-length:] == s\ndef g(target='programming', length=5):\n    return target[-length:]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 208,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target='programming', length=5) -> bool:\n    \"\"\"Find a substring of the given length, starting from the end of the target string.\"\"\"\n    return target[-length:] == s",
        "solution_func": "def g(target='programming', length=5):\n    return target[-length:]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(s: str, target='programming', length=5) -> bool:\n    \"\"\"Find a substring of the given length, starting from a random position within the target string.\"\"\"\n    import random\n    start = random.randint(0, len(target) - length)\n    return target[start:start+length] == s\ndef g(target='programming', length=5):\n    import random\n    start = random.randint(0, len(target) - length)\n    return target[start:start+length]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 208,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(s: str, target='programming', length=5) -> bool:\n    \"\"\"Find a substring of the given length, starting from a random position within the target string.\"\"\"\n    import random\n    start = random.randint(0, len(target) - length)\n    return target[start:start+length] == s",
        "solution_func": "def g(target='programming', length=5):\n    import random\n    start = random.randint(0, len(target) - length)\n    return target[start:start+length]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], tot=100, n=5) -> bool:\n    \"\"\"Find n distinct integers that sum to tot\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot\ndef g(tot=100, n=5):\n    return list(range(1, n+1))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 208,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], tot=100, n=5) -> bool:\n    \"\"\"Find n distinct integers that sum to tot\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot",
        "solution_func": "def g(tot=100, n=5):\n    return list(range(1, n+1))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=18, max_nums=3, options=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Find a combination of at most max_nums numbers whose sum is the target value\"\"\"\n    for num in nums:\n        assert num in options\n    return len(nums) <= max_nums and sum(nums) == target\ndef g(target=18, max_nums=3, options=[2, 4, 6, 8, 10]):\n    from itertools import combinations\n    for n in range(1, max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 208,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=18, max_nums=3, options=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Find a combination of at most max_nums numbers whose sum is the target value\"\"\"\n    for num in nums:\n        assert num in options\n    return len(nums) <= max_nums and sum(nums) == target",
        "solution_func": "def g(target=18, max_nums=3, options=[2, 4, 6, 8, 10]):\n    from itertools import combinations\n    for n in range(1, max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=7) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sum up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=7):\n    nums = [1, 2, 3, 4, 5, 6]\n    return nums\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 208,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=7) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sum up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=7):\n    nums = [1, 2, 3, 4, 5, 6]\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose sum is equal to the target number.\"\"\"\n    return any(target - num in nums for num in nums)\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7], 10\nassert f(*g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 208,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose sum is equal to the target number.\"\"\"\n    return any(target - num in nums for num in nums)",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7], 10",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sums up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 209,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sums up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there is a subarray in the list that sums up to zero\"\"\"\n    for i in range(len(nums)):\n        current_sum = nums[i]\n        if current_sum == target:\n            return True\n        for j in range(i+1, len(nums)):\n            current_sum += nums[j]\n            if current_sum == target:\n                return True\n    return False\n\ndef g(target=0):\n    nums = [1, 2, -3, 4, 5]\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 209,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there is a subarray in the list that sums up to zero\"\"\"\n    for i in range(len(nums)):\n        current_sum = nums[i]\n        if current_sum == target:\n            return True\n        for j in range(i+1, len(nums)):\n            current_sum += nums[j]\n            if current_sum == target:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    nums = [1, 2, -3, 4, 5]\n    return nums",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if the given number is divisible by m and is also an even number.\"\"\"\n    return n % m == 0 and n % 2 == 0\n\ndef g(m=10):\n    return m*2\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 209,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if the given number is divisible by m and is also an even number.\"\"\"\n    return n % m == 0 and n % 2 == 0",
        "solution_func": "def g(m=10):\n    return m*2",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(string: str, a=5, b=2) -> bool:\n    \"\"\"Check if a given string has a length equal to b times the count of character a\"\"\"\n    return len(string) == a * string.count(b)\ndef g(a=5, b=2):\n    return 'a' * a + 'b' * b\nassert f(g())\n",
        "emb": null,
        "idx_generation": 209,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, a=5, b=2) -> bool:\n    \"\"\"Check if a given string has a length equal to b times the count of character a\"\"\"\n    return len(string) == a * string.count(b)",
        "solution_func": "def g(a=5, b=2):\n    return 'a' * a + 'b' * b",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if the sum of any three numbers in the list equals the target value\"\"\"\n    return any(x + y + z == target for x in arr for y in arr for z in arr)\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 209,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if the sum of any three numbers in the list equals the target value\"\"\"\n    return any(x + y + z == target for x in arr for y in arr for z in arr)",
        "solution_func": "def g(target=100):\n    return [10, 20, 30, 40, 50, 60]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=15, c=3) -> bool:\n    \"\"\"Find n such that n + a + b is divisible by c\"\"\"\n    return (n + a + b) % c == 0\ndef g(a=5, b=15, c=3):\n    return -a - b\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 209,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=5, b=15, c=3) -> bool:\n    \"\"\"Find n such that n + a + b is divisible by c\"\"\"\n    return (n + a + b) % c == 0",
        "solution_func": "def g(a=5, b=15, c=3):\n    return -a - b",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a sum greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] > target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 209,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a sum greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] > target:\n                return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a difference greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if abs(nums[i] - nums[j]) > target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 209,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a difference greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if abs(nums[i] - nums[j]) > target:\n                return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a quotient greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] / nums[j] > target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 209,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a quotient greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] / nums[j] > target:\n                return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 20) -> bool:\n    \"\"\"Given a list of integers, find two numbers that sum up to the target value.\n    Sample Input:\n    `[4, 7, 11, 15, 3, 9]`\n    Sample Output:\n    `True`\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums: List[int] = [4, 7, 11, 15, 3, 9], target: int = 20):\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 209,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 20) -> bool:\n    \"\"\"Given a list of integers, find two numbers that sum up to the target value.\n    Sample Input:\n    `[4, 7, 11, 15, 3, 9]`\n    Sample Output:\n    `True`\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums: List[int] = [4, 7, 11, 15, 3, 9], target: int = 20):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=42) -> bool:\n    \"\"\"Check if the sum of any three numbers in the list is equal to the target.\"\"\"\n    return any(sum(combination) == target for combination in combinations(numbers, 3))\ndef g(target=42):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 210,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=42) -> bool:\n    \"\"\"Check if the sum of any three numbers in the list is equal to the target.\"\"\"\n    return any(sum(combination) == target for combination in combinations(numbers, 3))",
        "solution_func": "def g(target=42):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(string: str, substring='hello') -> bool:\n    \"\"\"Check if the substring is present in the given string.\"\"\"\n    return substring in string\ndef g(substring='hello'):\n    return \"Hello, how are you doing today?\"\nassert f(g())\n",
        "emb": null,
        "idx_generation": 210,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring='hello') -> bool:\n    \"\"\"Check if the substring is present in the given string.\"\"\"\n    return substring in string",
        "solution_func": "def g(substring='hello'):\n    return \"Hello, how are you doing today?\"",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    return any(a + b == target for a in numbers for b in numbers if a != b)\ndef g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 210,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    return any(a + b == target for a in numbers for b in numbers if a != b)",
        "solution_func": "def g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if the string s is present in the list of words.\"\"\"\n    return s in words\n\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return 'cherry'\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 210,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if the string s is present in the list of words.\"\"\"\n    return s in words",
        "solution_func": "def g(words=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return 'cherry'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list nums whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [2, 4, 6, 8]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 210,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list nums whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [2, 4, 6, 8]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if the number n is divisible by m.\"\"\"\n    return n % m == 0\n\ndef g(m=10):\n    return 50\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 210,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if the number n is divisible by m.\"\"\"\n    return n % m == 0",
        "solution_func": "def g(m=10):\n    return 50",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m=4) -> bool:\n    \"\"\"Check if the sum of the first n natural numbers is divisible by m.\"\"\"\n    return sum(range(1, n+1)) % m == 0\ndef g(m=4):\n    return 10\nassert f(g())\n",
        "emb": null,
        "idx_generation": 210,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=4) -> bool:\n    \"\"\"Check if the sum of the first n natural numbers is divisible by m.\"\"\"\n    return sum(range(1, n+1)) % m == 0",
        "solution_func": "def g(m=4):\n    return 10",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s=10) -> bool:\n    \"\"\"Check if the sum of the digits of n is equal to s.\"\"\"\n    return sum(int(digit) for digit in str(n)) == s\ndef g(s=10):\n    return 37\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 210,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, s=10) -> bool:\n    \"\"\"Check if the sum of the digits of n is equal to s.\"\"\"\n    return sum(int(digit) for digit in str(n)) == s",
        "solution_func": "def g(s=10):\n    return 37",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\ndef f(a: float, b=1.5) -> bool:\n    \"\"\"Check if the square root of a is less than b.\"\"\"\n    return math.sqrt(a) < b\ndef g(b=1.5):\n    return 2.25\nassert f(g())\n",
        "emb": null,
        "idx_generation": 210,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\ndef f(a: float, b=1.5) -> bool:\n    \"\"\"Check if the square root of a is less than b.\"\"\"\n    return math.sqrt(a) < b",
        "solution_func": "def g(b=1.5):\n    return 2.25",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(x: int, a=81) -> bool:\n    \"\"\"Check if the cube root of x is equal to a\"\"\"\n    return math.isclose(x**(1/3), a)\ndef g(a=81):\n    return a**3\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 210,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\ndef f(x: int, a=81) -> bool:\n    \"\"\"Check if the cube root of x is equal to a\"\"\"\n    return math.isclose(x**(1/3), a)",
        "solution_func": "def g(a=81):\n    return a**3",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=27, max_nums=4, options=[3, 6, 9, 12, 15]) -> bool:\n    \"\"\"Find a combination of at most max_nums numbers whose sum is the target value\"\"\"\n    for num in nums:\n        assert num in options\n    return len(nums) <= max_nums and sum(nums) == target\ndef g(target=27, max_nums=4, options=[3, 6, 9, 12, 15]):\n    from itertools import combinations\n    for n in range(1, max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 211,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=27, max_nums=4, options=[3, 6, 9, 12, 15]) -> bool:\n    \"\"\"Find a combination of at most max_nums numbers whose sum is the target value\"\"\"\n    for num in nums:\n        assert num in options\n    return len(nums) <= max_nums and sum(nums) == target",
        "solution_func": "def g(target=27, max_nums=4, options=[3, 6, 9, 12, 15]):\n    from itertools import combinations\n    for n in range(1, max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=50, max_nums=5, options=[5, 10, 15, 20, 25]) -> bool:\n    \"\"\"Find a combination of at most max_nums numbers whose sum is the target value\"\"\"\n    for num in nums:\n        assert num in options\n    return len(nums) <= max_nums and sum(nums) == target\ndef g(target=50, max_nums=5, options=[5, 10, 15, 20, 25]):\n    from itertools import combinations\n    for n in range(1, max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 211,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=50, max_nums=5, options=[5, 10, 15, 20, 25]) -> bool:\n    \"\"\"Find a combination of at most max_nums numbers whose sum is the target value\"\"\"\n    for num in nums:\n        assert num in options\n    return len(nums) <= max_nums and sum(nums) == target",
        "solution_func": "def g(target=50, max_nums=5, options=[5, 10, 15, 20, 25]):\n    from itertools import combinations\n    for n in range(1, max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=12, max_nums=2, options=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find a combination of at most max_nums numbers whose sum is the target value\"\"\"\n    for num in nums:\n        assert num in options\n    return len(nums) <= max_nums and sum(nums) == target\ndef g(target=12, max_nums=2, options=[1, 2, 3, 4, 5]):\n    from itertools import combinations\n    for n in range(1, max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n\n",
        "emb": null,
        "idx_generation": 211,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=12, max_nums=2, options=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find a combination of at most max_nums numbers whose sum is the target value\"\"\"\n    for num in nums:\n        assert num in options\n    return len(nums) <= max_nums and sum(nums) == target",
        "solution_func": "def g(target=12, max_nums=2, options=[1, 2, 3, 4, 5]):\n    from itertools import combinations\n    for n in range(1, max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is upper triangular.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [0, 4, 5], [0, 0, 6]]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 211,
        "target_skills": null,
        "problem_func": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is upper triangular.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != 0:\n                return False\n    return True",
        "solution_func": "def g():\n    return [[1, 2, 3], [0, 4, 5], [0, 0, 6]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is lower triangular.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[j][i] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [2, 4, 0], [3, 5, 6]]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 211,
        "target_skills": null,
        "problem_func": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is lower triangular.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[j][i] != 0:\n                return False\n    return True",
        "solution_func": "def g():\n    return [[1, 0, 0], [2, 4, 0], [3, 5, 6]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is a magic square.\"\"\"\n    n = len(matrix)\n    target_sum = n * (n**2 + 1) // 2\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        column_sum = sum(matrix[i][j] for i in range(n))\n        if column_sum != target_sum:\n            return False\n\n    # Check diagonals\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    if diagonal_sum1 != target_sum or diagonal_sum2 != target_sum:\n        return False\n\n    return True\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 211,
        "target_skills": null,
        "problem_func": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is a magic square.\"\"\"\n    n = len(matrix)\n    target_sum = n * (n**2 + 1) // 2\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        column_sum = sum(matrix[i][j] for i in range(n))\n        if column_sum != target_sum:\n            return False\n\n    # Check diagonals\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    if diagonal_sum1 != target_sum or diagonal_sum2 != target_sum:\n        return False\n\n    return True",
        "solution_func": "def g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(corners: List[List[int]], m=100, n=100, a=10, target=100) -> bool:\n    \"\"\"Find a minimal list of corner locations for a\u00d7a tiles that covers [0, m] \u00d7 [0, n] and does not double-cover\nsquares.\nSample Input:\nm = 15\nn = 20\na = 3\ntarget = 6\nSample Output:\n[[0, 0], [0, 3], [0, 6], [0, 9], [0, 12], [0, 15]]\"\"\"\n    covered = {(i + x, j + y) for (i, j) in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, 'Double coverage'\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})\ndef g(m=100, n=100, a=10, target=100):\n    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 211,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(corners: List[List[int]], m=100, n=100, a=10, target=100) -> bool:\n    \"\"\"Find a minimal list of corner locations for a\u00d7a tiles that covers [0, m] \u00d7 [0, n] and does not double-cover\nsquares.\nSample Input:\nm = 15\nn = 20\na = 3\ntarget = 6\nSample Output:\n[[0, 0], [0, 3], [0, 6], [0, 9], [0, 12], [0, 15]]\"\"\"\n    covered = {(i + x, j + y) for (i, j) in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, 'Double coverage'\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})",
        "solution_func": "def g(m=100, n=100, a=10, target=100):\n    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\nfrom math import factorial\n\ndef f(nums: List[int], n=4) -> bool:\n    \"\"\"Given a list of numbers, check if the sum of the factorials of the numbers is divisible by n.\nSample Input:\n[1, 2, 3]\nSample Output:\nTrue\"\"\"\n    return sum(factorial(num) for num in nums) % n == 0\n\ndef g(n=4):\n    return [1, 2, 3]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 211,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\nfrom math import factorial\n\ndef f(nums: List[int], n=4) -> bool:\n    \"\"\"Given a list of numbers, check if the sum of the factorials of the numbers is divisible by n.\nSample Input:\n[1, 2, 3]\nSample Output:\nTrue\"\"\"\n    return sum(factorial(num) for num in nums) % n == 0",
        "solution_func": "def g(n=4):\n    return [1, 2, 3]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(sentence: str, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if a given sentence contains all the vowels at least once.\nSample Input:\n'This is a sample sentence'\nSample Output:\nTrue\"\"\"\n    sentence = sentence.lower()\n    return all(vowel in sentence for vowel in vowels)\n\ndef g():\n    return 'This is a sample sentence'\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 211,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(sentence: str, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if a given sentence contains all the vowels at least once.\nSample Input:\n'This is a sample sentence'\nSample Output:\nTrue\"\"\"\n    sentence = sentence.lower()\n    return all(vowel in sentence for vowel in vowels)",
        "solution_func": "def g():\n    return 'This is a sample sentence'",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list whose sum is equal to the target value.\"\"\"\n    return any((numbers[i] + numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 211,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list whose sum is equal to the target value.\"\"\"\n    return any((numbers[i] + numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))",
        "solution_func": "def g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=3, threshold=0.7, seq=[0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose average is greater than or equal to threshold\"\"\"\n    seq_avg = sum(seq[start:start+k]) / k\n    return seq_avg >= threshold\ndef g(k=3, threshold=0.7, seq=[0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5]):\n    def seq_avg(start):\n        return sum(seq[start:start+k]) / k\n    return max(range(len(seq) - k + 1), key=seq_avg)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 212,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(start: int, k=3, threshold=0.7, seq=[0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose average is greater than or equal to threshold\"\"\"\n    seq_avg = sum(seq[start:start+k]) / k\n    return seq_avg >= threshold",
        "solution_func": "def g(k=3, threshold=0.7, seq=[0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5]):\n    def seq_avg(start):\n        return sum(seq[start:start+k]) / k\n    return max(range(len(seq) - k + 1), key=seq_avg)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=4, threshold=0.6, seq=[0.0, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose average is greater than or equal to threshold\"\"\"\n    seq_avg = sum(seq[start:start+k]) / k\n    return seq_avg >= threshold\ndef g(k=4, threshold=0.6, seq=[0.0, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4]):\n    def seq_avg(start):\n        return sum(seq[start:start+k]) / k\n    return max(range(len(seq) - k + 1), key=seq_avg)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 212,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(start: int, k=4, threshold=0.6, seq=[0.0, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose average is greater than or equal to threshold\"\"\"\n    seq_avg = sum(seq[start:start+k]) / k\n    return seq_avg >= threshold",
        "solution_func": "def g(k=4, threshold=0.6, seq=[0.0, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4]):\n    def seq_avg(start):\n        return sum(seq[start:start+k]) / k\n    return max(range(len(seq) - k + 1), key=seq_avg)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=5, threshold=0.5, seq=[0.9, 1.1, 1.3, 1.5, 1.7, 1.9]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose average is greater than or equal to threshold\"\"\"\n    seq_avg = sum(seq[start:start+k]) / k\n    return seq_avg >= threshold\ndef g(k=5, threshold=0.5, seq=[0.9, 1.1, 1.3, 1.5, 1.7, 1.9]):\n    def seq_avg(start):\n        return sum(seq[start:start+k]) / k\n    return max(range(len(seq) - k + 1), key=seq_avg)\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 212,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(start: int, k=5, threshold=0.5, seq=[0.9, 1.1, 1.3, 1.5, 1.7, 1.9]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose average is greater than or equal to threshold\"\"\"\n    seq_avg = sum(seq[start:start+k]) / k\n    return seq_avg >= threshold",
        "solution_func": "def g(k=5, threshold=0.5, seq=[0.9, 1.1, 1.3, 1.5, 1.7, 1.9]):\n    def seq_avg(start):\n        return sum(seq[start:start+k]) / k\n    return max(range(len(seq) - k + 1), key=seq_avg)",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target, and the subarray length is greater than 3.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+3, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False\n\ndef g(target=50):\n    return [10, 20, 30, 40, 50, 60, 70, 80]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 212,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target, and the subarray length is greater than 3.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+3, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False",
        "solution_func": "def g(target=50):\n    return [10, 20, 30, 40, 50, 60, 70, 80]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target, and the subarray length is less than 5.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+2, len(nums)+1):\n            if sum(nums[i:j]) == target and len(nums[i:j]) < 5:\n                return True\n    return False\n\ndef g(target=0):\n    return [10, -20, 30, -40, 50, -60, 70, -80]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 212,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target, and the subarray length is less than 5.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+2, len(nums)+1):\n            if sum(nums[i:j]) == target and len(nums[i:j]) < 5:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    return [10, -20, 30, -40, 50, -60, 70, -80]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target, and the subarray length is even.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+2, len(nums)+1):\n            if sum(nums[i:j]) == target and len(nums[i:j]) % 2 == 0:\n                return True\n    return False\n\ndef g(target=0):\n    return [10, -20, 30, -40, 50, -60, 70, -80]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 212,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target, and the subarray length is even.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+2, len(nums)+1):\n            if sum(nums[i:j]) == target and len(nums[i:j]) % 2 == 0:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    return [10, -20, 30, -40, 50, -60, 70, -80]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a sum equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g(), target=10)\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 212,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a sum equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a difference greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if abs(nums[i] - nums[j]) > target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g(), target=2)\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 212,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a difference greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if abs(nums[i] - nums[j]) > target:\n                return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a number in 'nums' that is greater than the target value.\"\"\"\n    for num in nums:\n        if num > target:\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g(), target=10)\n",
        "emb": null,
        "idx_generation": 212,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a number in 'nums' that is greater than the target value.\"\"\"\n    for num in nums:\n        if num > target:\n            return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(points: List[Tuple[int, int]], target_len=5) -> bool:\n    \"\"\"Check if the points form a rectangle with an area greater than or equal to 10 square units.\nThe rectangle is formed by the given points, each represented as a tuple of (x, y) coordinates.\"\"\"\n    assert len(points) == 4, \"Exactly 4 points are required to form a rectangle.\"\n    x_coords = [point[0] for point in points]\n    y_coords = [point[1] for point in points]\n    min_x = min(x_coords)\n    max_x = max(x_coords)\n    min_y = min(y_coords)\n    max_y = max(y_coords)\n    width = max_x - min_x\n    height = max_y - min_y\n    area = width * height\n    return area >= 10 and len(set(points)) == 4\ndef g():\n    return [(0, 0), (0, 3), (4, 3), (4, 0)]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 212,
        "target_skills": null,
        "problem_func": "from typing import*\n\ndef f(points: List[Tuple[int, int]], target_len=5) -> bool:\n    \"\"\"Check if the points form a rectangle with an area greater than or equal to 10 square units.\nThe rectangle is formed by the given points, each represented as a tuple of (x, y) coordinates.\"\"\"\n    assert len(points) == 4, \"Exactly 4 points are required to form a rectangle.\"\n    x_coords = [point[0] for point in points]\n    y_coords = [point[1] for point in points]\n    min_x = min(x_coords)\n    max_x = max(x_coords)\n    min_y = min(y_coords)\n    max_y = max(y_coords)\n    width = max_x - min_x\n    height = max_y - min_y\n    area = width * height\n    return area >= 10 and len(set(points)) == 4",
        "solution_func": "def g():\n    return [(0, 0), (0, 3), (4, 3), (4, 0)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport itertools\nfrom typing import *\ndef f(matrix: List[List[int]], n=3, target=15) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2]) and len(rows) == n\n\ndef g(n=3, target=15):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix\n    assert False, f\"No magic square found for n={n}\"\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 213,
        "target_skills": null,
        "problem_func": "from typing import*\nimport itertools\nfrom typing import *\ndef f(matrix: List[List[int]], n=3, target=15) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2]) and len(rows) == n",
        "solution_func": "def g(n=3, target=15):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport itertools\nfrom typing import *\ndef f(matrix: List[List[int]], n=3, target=15) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2]) and len(rows) == n\n\ndef g(n=3, target=15):\n    from itertools import combinations\n    possible_nums = list(range(1, n**2+1))\n    for comb in combinations(possible_nums, n):\n        matrix = [list(comb)] * n\n        if f(matrix):\n            return matrix\n    assert False, f\"No magic square found for n={n}\"\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 213,
        "target_skills": null,
        "problem_func": "from typing import*\nimport itertools\nfrom typing import *\ndef f(matrix: List[List[int]], n=3, target=15) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2]) and len(rows) == n",
        "solution_func": "def g(n=3, target=15):\n    from itertools import combinations\n    possible_nums = list(range(1, n**2+1))\n    for comb in combinations(possible_nums, n):\n        matrix = [list(comb)] * n\n        if f(matrix):\n            return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import *\ndef f(matrix: List[List[int]], n=3, target=15) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2]) and len(rows) == n\n\ndef g(n=3, target=15):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [list(perm[i:i+n]) for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix\n    assert False, f\"No magic square found for n={n}\"\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 213,
        "target_skills": null,
        "problem_func": "from typing import*\nimport itertools\nfrom typing import *\ndef f(matrix: List[List[int]], n=3, target=15) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2]) and len(rows) == n",
        "solution_func": "def g(n=3, target=15):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [list(perm[i:i+n]) for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=4) -> bool:\n    \"\"\"Check if the given matrix is a square matrix of size n x n.\"\"\"\n    return all(len(row) == n for row in matrix) and len(matrix) == n\ndef g(n=4):\n    return [[1] * n for _ in range(n)]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 213,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=4) -> bool:\n    \"\"\"Check if the given matrix is a square matrix of size n x n.\"\"\"\n    return all(len(row) == n for row in matrix) and len(matrix) == n",
        "solution_func": "def g(n=4):\n    return [[1] * n for _ in range(n)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=5) -> bool:\n    \"\"\"Check if the given matrix is a square matrix of size n x n.\"\"\"\n    return all(len(row) == n for row in matrix) and len(matrix) == n\ndef g(n=5):\n    return [[1] * n for _ in range(n)]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 213,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=5) -> bool:\n    \"\"\"Check if the given matrix is a square matrix of size n x n.\"\"\"\n    return all(len(row) == n for row in matrix) and len(matrix) == n",
        "solution_func": "def g(n=5):\n    return [[1] * n for _ in range(n)]",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=6) -> bool:\n    \"\"\"Check if the given matrix is a square matrix of size n x n.\"\"\"\n    return all(len(row) == n for row in matrix) and len(matrix) == n\ndef g(n=6):\n    return [[1] * n for _ in range(n)]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 213,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=6) -> bool:\n    \"\"\"Check if the given matrix is a square matrix of size n x n.\"\"\"\n    return all(len(row) == n for row in matrix) and len(matrix) == n",
        "solution_func": "def g(n=6):\n    return [[1] * n for _ in range(n)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two numbers in the list that sum up to the target value.\"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(arr=[1, 2, 5, 7, 9]):\n    return arr\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 213,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two numbers in the list that sum up to the target value.\"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(arr=[1, 2, 5, 7, 9]):\n    return arr",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if the given string is a palindrome and has exactly k vowels.\"\"\"\n    vowels = set(\"aeiou\")\n    s = s.lower()\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return s == s[::-1] and count == k\n\ndef g(s=\"Racecar\"):\n    return s\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 213,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if the given string is a palindrome and has exactly k vowels.\"\"\"\n    vowels = set(\"aeiou\")\n    s = s.lower()\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return s == s[::-1] and count == k",
        "solution_func": "def g(s=\"Racecar\"):\n    return s",
        "map_ix": [
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Check if any row or column in the matrix contains the target value.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for row in matrix:\n        if target in row:\n            return True\n    for j in range(cols):\n        col = [matrix[i][j] for i in range(rows)]\n        if target in col:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 213,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Check if any row or column in the matrix contains the target value.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for row in matrix:\n        if target in row:\n            return True\n    for j in range(cols):\n        col = [matrix[i][j] for i in range(rows)]\n        if target in col:\n            return True\n    return False",
        "solution_func": "def g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if any combination of numbers in the list sums up to the target.\"\"\"\n    for r in range(1, len(nums) + 1):\n        for combination in combinations(nums, r):\n            if sum(combination) == target:\n                return True\n    return False\n\ndef g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8]\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 213,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if any combination of numbers in the list sums up to the target.\"\"\"\n    for r in range(1, len(nums) + 1):\n        for combination in combinations(nums, r):\n            if sum(combination) == target:\n                return True\n    return False",
        "solution_func": "def g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=10) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose product is greater than or equal to k\"\"\"\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            product = 1\n            for num in nums[i:j+1]:\n                product *= num\n            if product >= k:\n                return True\n    return False\n\ndef g(k=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 214,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], k=10) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose product is greater than or equal to k\"\"\"\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            product = 1\n            for num in nums[i:j+1]:\n                product *= num\n            if product >= k:\n                return True\n    return False",
        "solution_func": "def g(k=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=0) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose difference between the maximum and minimum elements is less than or equal to k\"\"\"\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            subsequence = nums[i:j+1]\n            if max(subsequence) - min(subsequence) <= k:\n                return True\n    return False\n\ndef g(k=0):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 214,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], k=0) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose difference between the maximum and minimum elements is less than or equal to k\"\"\"\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            subsequence = nums[i:j+1]\n            if max(subsequence) - min(subsequence) <= k:\n                return True\n    return False",
        "solution_func": "def g(k=0):\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], k=0) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose sum is divisible by k\"\"\"\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if sum(nums[i:j+1]) % k == 0:\n                return True\n    return False\n\ndef g(k=1):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 214,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], k=0) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose sum is divisible by k\"\"\"\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if sum(nums[i:j+1]) % k == 0:\n                return True\n    return False",
        "solution_func": "def g(k=1):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, n=5) -> bool:\n    \"\"\"Check if x is divisible by n without leaving a remainder.\"\"\"\n    return x % n == 0\ndef g(n=5):\n    return n ** 2\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 214,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, n=5) -> bool:\n    \"\"\"Check if x is divisible by n without leaving a remainder.\"\"\"\n    return x % n == 0",
        "solution_func": "def g(n=5):\n    return n ** 2",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, n=7) -> bool:\n    \"\"\"Find the square root of x and check if it is an integer divisible by n.\"\"\"\n    return x ** 0.5 % n == 0\ndef g(n=7):\n    return n ** 2\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 214,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, n=7) -> bool:\n    \"\"\"Find the square root of x and check if it is an integer divisible by n.\"\"\"\n    return x ** 0.5 % n == 0",
        "solution_func": "def g(n=7):\n    return n ** 2",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: int, n=10) -> bool:\n    \"\"\"Check if the sum of digits of x is divisible by n.\"\"\"\n    return sum([int(d) for d in str(x)]) % n == 0\ndef g(n=10):\n    return n ** 2\nassert f(g())\n",
        "emb": null,
        "idx_generation": 214,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, n=10) -> bool:\n    \"\"\"Check if the sum of digits of x is divisible by n.\"\"\"\n    return sum([int(d) for d in str(x)]) % n == 0",
        "solution_func": "def g(n=10):\n    return n ** 2",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 214,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that have a difference equal to the target value.\"\"\"\n    return any(abs(target - num) in nums for num in nums)\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 214,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that have a difference equal to the target value.\"\"\"\n    return any(abs(target - num) in nums for num in nums)",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiply to the target value.\"\"\"\n    return any(target / num in nums for num in nums)\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 214,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiply to the target value.\"\"\"\n    return any(target / num in nums for num in nums)",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: List[int], a=0, b=0, c=0, d=0) -> bool:\n    \"\"\"Check if a point lies on a specific line.\nSolution should be a tuple of the (x,y) coordinates.\nThe equation of the line is: ax + by + c = 0\"\"\"\n    x, y = e\n    return a*x + b*y + c == 0\ndef g(a=2, b=3, c=6):\n    return [a, b]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 214,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(e: List[int], a=0, b=0, c=0, d=0) -> bool:\n    \"\"\"Check if a point lies on a specific line.\nSolution should be a tuple of the (x,y) coordinates.\nThe equation of the line is: ax + by + c = 0\"\"\"\n    x, y = e\n    return a*x + b*y + c == 0",
        "solution_func": "def g(a=2, b=3, c=6):\n    return [a, b]",
        "map_ix": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=7, b=20, c=25) -> bool:\n    \"\"\"Find n such that n - a == b * (the sum of the first c integers)\"\"\"\n    return n - a == sum([b * i for i in range(c)])\ndef g(a=7, b=20, c=25):\n    return a + sum([b * i for i in range(c)])\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 215,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=7, b=20, c=25) -> bool:\n    \"\"\"Find n such that n - a == b * (the sum of the first c integers)\"\"\"\n    return n - a == sum([b * i for i in range(c)])",
        "solution_func": "def g(a=7, b=20, c=25):\n    return a + sum([b * i for i in range(c)])",
        "map_ix": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=12, c=30) -> bool:\n    \"\"\"Find n such that n * a == b * (the sum of the first c integers)\"\"\"\n    return n * a == sum([b * i for i in range(c)])\ndef g(a=5, b=12, c=30):\n    return sum([b * i for i in range(c)]) / a\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 215,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=5, b=12, c=30) -> bool:\n    \"\"\"Find n such that n * a == b * (the sum of the first c integers)\"\"\"\n    return n * a == sum([b * i for i in range(c)])",
        "solution_func": "def g(a=5, b=12, c=30):\n    return sum([b * i for i in range(c)]) / a",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=9, c=15) -> bool:\n    \"\"\"Find n such that n // a == b * (the sum of the first c integers)\"\"\"\n    return n // a == sum([b * i for i in range(c)])\ndef g(a=3, b=9, c=15):\n    return a * sum([b * i for i in range(c)])\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 215,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=3, b=9, c=15) -> bool:\n    \"\"\"Find n such that n // a == b * (the sum of the first c integers)\"\"\"\n    return n // a == sum([b * i for i in range(c)])",
        "solution_func": "def g(a=3, b=9, c=15):\n    return a * sum([b * i for i in range(c)])",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], tot=100, n=5) -> bool:\n    \"\"\"Find n distinct even integers that sum to tot\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i <= i % 2 == 0 for i in nums))\ndef g(tot=100, n=5):\n    return list(range(2, 2 * n + 1, 2))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 215,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], tot=100, n=5) -> bool:\n    \"\"\"Find n distinct even integers that sum to tot\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i <= i % 2 == 0 for i in nums))",
        "solution_func": "def g(tot=100, n=5):\n    return list(range(2, 2 * n + 1, 2))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], tot=24, n=4) -> bool:\n    \"\"\"Find n distinct prime numbers that sum to tot\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((is_prime(i) for i in nums))\ndef g(tot=24, n=4):\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n    return primes\nassert f(g())\n",
        "emb": null,
        "idx_generation": 215,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], tot=24, n=4) -> bool:\n    \"\"\"Find n distinct prime numbers that sum to tot\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((is_prime(i) for i in nums))",
        "solution_func": "def g(tot=24, n=4):\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n    return primes",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], tot=1000, n=10) -> bool:\n    \"\"\"Find n distinct Fibonacci numbers that sum to tot\"\"\"\n    def fibonacci(n):\n        fib = [0, 1]\n        for i in range(2, n + 1):\n            fib.append(fib[i-1] + fib[i-2])\n        return fib\n\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i in fibonacci(n) for i in nums))\ndef g(tot=1000, n=10):\n    fib_nums = fibonacci(n)\n    return fib_nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 215,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], tot=1000, n=10) -> bool:\n    \"\"\"Find n distinct Fibonacci numbers that sum to tot\"\"\"\n    def fibonacci(n):\n        fib = [0, 1]\n        for i in range(2, n + 1):\n            fib.append(fib[i-1] + fib[i-2])\n        return fib\n\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i in fibonacci(n) for i in nums))",
        "solution_func": "def g(tot=1000, n=10):\n    fib_nums = fibonacci(n)\n    return fib_nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 215,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    nums = [1, 2, 3, 4, 5]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(sentence: str, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if all vowels in the sentence appear in alphabetical order.\"\"\"\n    vowels_in_sentence = [v for v in sentence if v.lower() in vowels]\n    return vowels_in_sentence == sorted(vowels_in_sentence)\n\ndef g():\n    sentence = \"The quick brown fox jumps over the lazy dog\"\n    return sentence\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 215,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(sentence: str, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if all vowels in the sentence appear in alphabetical order.\"\"\"\n    vowels_in_sentence = [v for v in sentence if v.lower() in vowels]\n    return vowels_in_sentence == sorted(vowels_in_sentence)",
        "solution_func": "def g():\n    sentence = \"The quick brown fox jumps over the lazy dog\"\n    return sentence",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, divisors=[2, 3, 5]) -> bool:\n    \"\"\"Check if all the divisors divide the number evenly.\"\"\"\n    return all(n % d == 0 for d in divisors)\n\ndef g():\n    n = 30\n    return n\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 215,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, divisors=[2, 3, 5]) -> bool:\n    \"\"\"Check if all the divisors divide the number evenly.\"\"\"\n    return all(n % d == 0 for d in divisors)",
        "solution_func": "def g():\n    n = 30\n    return n",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target value.\"\"\"\n    return any(x + y == target for x in lst for y in lst)\n    \ndef g(target=100):\n    return [10, 25, 4, 5]\n    \nassert f(g())\n",
        "emb": null,
        "idx_generation": 215,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target value.\"\"\"\n    return any(x + y == target for x in lst for y in lst)",
        "solution_func": "def g(target=100):\n    return [10, 25, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\n\ndef f(nums: List[str], target=0) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose length is equal to the target value.\"\"\"\n    subarrays = []\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            subarray = nums[i:j+1]\n            if len(subarray) == target:\n                subarrays.append(subarray)\n    return subarrays\n\ndef g(target=0):\n    nums = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 216,
        "target_skills": null,
        "problem_func": "from typing import*\n\ndef f(nums: List[str], target=0) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose length is equal to the target value.\"\"\"\n    subarrays = []\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            subarray = nums[i:j+1]\n            if len(subarray) == target:\n                subarrays.append(subarray)\n    return subarrays",
        "solution_func": "def g(target=0):\n    nums = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose maximum value is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        subarray = nums[i:]\n        if max(subarray) == target:\n            return True\n    return False\n\ndef g(target=0):\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 216,
        "target_skills": null,
        "problem_func": "from typing import*\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose maximum value is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        subarray = nums[i:]\n        if max(subarray) == target:\n            return True\n    return False",
        "solution_func": "def g(target=0):\n    nums = [1, 2, 3, 4, 5]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is greater than or equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            subarray = nums[i:j+1]\n            if sum(subarray) >= target:\n                return True\n    return False\n\ndef g(target=0):\n    nums = [2, 4, 6, 8, 10]\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 216,
        "target_skills": null,
        "problem_func": "from typing import*\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is greater than or equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            subarray = nums[i:j+1]\n            if sum(subarray) >= target:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    nums = [2, 4, 6, 8, 10]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number is present in the given matrix.\n    The matrix is represented as a list of lists, where each inner list represents a row of the matrix.\"\"\"\n    return any(target in row for row in matrix)\ndef g(target=0):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 216,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number is present in the given matrix.\n    The matrix is represented as a list of lists, where each inner list represents a row of the matrix.\"\"\"\n    return any(target in row for row in matrix)",
        "solution_func": "def g(target=0):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='') -> bool:\n    \"\"\"Check if the given substring is present in the string.\"\"\"\n    return substring in string\ndef g(substring=''):\n    string = \"Hello, World!\"\n    return string\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 216,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring='') -> bool:\n    \"\"\"Check if the given substring is present in the string.\"\"\"\n    return substring in string",
        "solution_func": "def g(substring=''):\n    string = \"Hello, World!\"\n    return string",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(dictionary: Dict[str, int], target=0) -> bool:\n    \"\"\"Check if the target value is present in the given dictionary.\"\"\"\n    return target in dictionary.values()\ndef g(target=0):\n    dictionary = {'a': 1, 'b': 2, 'c': 3}\n    return dictionary\nassert f(g())\n",
        "emb": null,
        "idx_generation": 216,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(dictionary: Dict[str, int], target=0) -> bool:\n    \"\"\"Check if the target value is present in the given dictionary.\"\"\"\n    return target in dictionary.values()",
        "solution_func": "def g(target=0):\n    dictionary = {'a': 1, 'b': 2, 'c': 3}\n    return dictionary",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=30, c=15) -> bool:\n    \"\"\"Find n such that n - a == b * (the sum of the first c integers)\"\"\"\n    return n - a == sum([b * i for i in range(c)])\ndef g(a=10, b=30, c=15):\n    return a + sum([b * i for i in range(c)])\nassert f(g())\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 216,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=10, b=30, c=15) -> bool:\n    \"\"\"Find n such that n - a == b * (the sum of the first c integers)\"\"\"\n    return n - a == sum([b * i for i in range(c)])",
        "solution_func": "def g(a=10, b=30, c=15):\n    return a + sum([b * i for i in range(c)])",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=15, c=10) -> bool:\n    \"\"\"Find n such that n - a == b * (the sum of the first c integers)\"\"\"\n    return n - a == sum([b * i for i in range(c)])\ndef g(a=5, b=15, c=10):\n    return a + sum([b * i for i in range(c)])\nassert f(g())\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 216,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=5, b=15, c=10) -> bool:\n    \"\"\"Find n such that n - a == b * (the sum of the first c integers)\"\"\"\n    return n - a == sum([b * i for i in range(c)])",
        "solution_func": "def g(a=5, b=15, c=10):\n    return a + sum([b * i for i in range(c)])",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=12, c=30) -> bool:\n    \"\"\"Find n such that n - a == b * (the sum of the first c integers)\"\"\"\n    return n - a == sum([b * i for i in range(c)])\ndef g(a=3, b=12, c=30):\n    return a + sum([b * i for i in range(c)])\nassert f(g())\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 216,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=3, b=12, c=30) -> bool:\n    \"\"\"Find n such that n - a == b * (the sum of the first c integers)\"\"\"\n    return n - a == sum([b * i for i in range(c)])",
        "solution_func": "def g(a=3, b=12, c=30):\n    return a + sum([b * i for i in range(c)])",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target number.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(numbers=[1, 2, 3, 4, 5], target=9):\n    return numbers\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 216,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target number.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False",
        "solution_func": "def g(numbers=[1, 2, 3, 4, 5], target=9):\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=25):\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 217,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]",
        "solution_func": "def g(target=25):\n    return [2, 4, 6, 8, 10]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=40) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=40):\n    return [4, 8, 12, 16, 20]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 217,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=40) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]",
        "solution_func": "def g(target=40):\n    return [4, 8, 12, 16, 20]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=15):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 217,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]",
        "solution_func": "def g(target=15):\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target\"\"\"\n    num_set = set(nums)\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            complement = target - (nums[i] + nums[j])\n            if complement in num_set:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 217,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target\"\"\"\n    num_set = set(nums)\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            complement = target - (nums[i] + nums[j])\n            if complement in num_set:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find the maximum product of two numbers in the list\"\"\"\n    max_product = float('-inf')\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == 20\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 217,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find the maximum product of two numbers in the list\"\"\"\n    max_product = float('-inf')\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n    return max_product",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], n=100) -> bool:\n    \"\"\"Check if the list contains any duplicate elements\"\"\"\n    return len(lst) != len(set(lst))\n\ndef g():\n    return [1, 2, 3, 4, 5, 1]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 217,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], n=100) -> bool:\n    \"\"\"Check if the list contains any duplicate elements\"\"\"\n    return len(lst) != len(set(lst))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 1]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=5) -> bool:\n    \"\"\"Check if the given matrix is a square matrix of size n x n and if the sum of all elements in the matrix is divisible by n.\"\"\"\n    return all(len(row) == n for row in matrix) and len(matrix) == n and sum(sum(row) for row in matrix) % n == 0\ndef g(n=5):\n    return [[1] * n for _ in range(n)]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 217,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=5) -> bool:\n    \"\"\"Check if the given matrix is a square matrix of size n x n and if the sum of all elements in the matrix is divisible by n.\"\"\"\n    return all(len(row) == n for row in matrix) and len(matrix) == n and sum(sum(row) for row in matrix) % n == 0",
        "solution_func": "def g(n=5):\n    return [[1] * n for _ in range(n)]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=5) -> bool:\n    \"\"\"Check if the given matrix is a square matrix of size n x n and if the sum of the diagonal elements is equal to n.\"\"\"\n    return all(len(row) == n for row in matrix) and len(matrix) == n and sum(matrix[i][i] for i in range(n)) == n\ndef g(n=5):\n    return [[1 if i == j else 0 for j in range(n)] for i in range(n)]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 217,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=5) -> bool:\n    \"\"\"Check if the given matrix is a square matrix of size n x n and if the sum of the diagonal elements is equal to n.\"\"\"\n    return all(len(row) == n for row in matrix) and len(matrix) == n and sum(matrix[i][i] for i in range(n)) == n",
        "solution_func": "def g(n=5):\n    return [[1 if i == j else 0 for j in range(n)] for i in range(n)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=5) -> bool:\n    \"\"\"Check if the given matrix is a square matrix of size n x n and if all elements in the matrix are prime numbers.\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return all(len(row) == n for row in matrix) and len(matrix) == n and all(all(is_prime(element) for element in row) for row in matrix)\ndef g(n=5):\n    return [[2] * n for _ in range(n)]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 217,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=5) -> bool:\n    \"\"\"Check if the given matrix is a square matrix of size n x n and if all elements in the matrix are prime numbers.\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return all(len(row) == n for row in matrix) and len(matrix) == n and all(all(is_prime(element) for element in row) for row in matrix)",
        "solution_func": "def g(n=5):\n    return [[2] * n for _ in range(n)]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 217,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list such that their sum is equal to the target.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(target=10):\n    return [2, 4, 6, 8]\n\nassert f(g(), 12)\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0
        ],
        "idx_generation": 218,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list such that their sum is equal to the target.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False",
        "solution_func": "def g(target=10):\n    return [2, 4, 6, 8]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list such that their sum is equal to the target.\"\"\"\n    for i in range(len(nums) - 2):\n        for j in range(i + 1, len(nums) - 1):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 9)\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 218,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list such that their sum is equal to the target.\"\"\"\n    for i in range(len(nums) - 2):\n        for j in range(i + 1, len(nums) - 1):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there is a subsequence in the list that sums up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 10)\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 218,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there is a subsequence in the list that sums up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]",
        "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target: int):\n    return [2, 4, 6, 8, 10, 12, 14]\n\nassert f(g(16))\n\n",
        "emb": null,
        "idx_generation": 218,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target: int):\n    return [2, 4, 6, 8, 10, 12, 14]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if n is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for prime in primes:\n        if prime > math.isqrt(n):\n            break\n        if n % prime == 0:\n            return False\n    return True\n\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return primes[-1] + 2\n\nassert f(g())\n\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 218,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if n is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for prime in primes:\n        if prime > math.isqrt(n):\n            break\n        if n % prime == 0:\n            return False\n    return True",
        "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return primes[-1] + 2",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr=\"python\") -> bool:\n    \"\"\"Check if the given substring exists in the given string.\"\"\"\n    return substr in s\n\ndef g(substr=\"python\"):\n    return \"I am learning python programming.\"\n\nassert f(g())\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 218,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substr=\"python\") -> bool:\n    \"\"\"Check if the given substring exists in the given string.\"\"\"\n    return substr in s",
        "solution_func": "def g(substr=\"python\"):\n    return \"I am learning python programming.\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(text: str, count=3, target='!') -> bool:\n    \"\"\"Check if a target character appears in the given text for a specific number of times.\"\"\"\n    return text.count(target) == count\ndef g(count=3, target='!'):\n    return '!!' + target * count\nassert f(g())\n",
        "emb": null,
        "idx_generation": 218,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(text: str, count=3, target='!') -> bool:\n    \"\"\"Check if a target character appears in the given text for a specific number of times.\"\"\"\n    return text.count(target) == count",
        "solution_func": "def g(count=3, target='!'):\n    return '!!' + target * count",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if the sum of all numbers in the list is equal to the target value.\"\"\"\n    return sum(numbers) == target\ndef g(numbers: List[int]):\n    return numbers\nassert f(g([1, 2, 3, 4, 5]), target=15)\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 218,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if the sum of all numbers in the list is equal to the target value.\"\"\"\n    return sum(numbers) == target",
        "solution_func": "def g(numbers: List[int]):\n    return numbers",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import math\nfrom typing import*\ndef f(radius: float, volume=1000.0) -> bool:\n    \"\"\"Check if the volume of a sphere is equal to the given volume value.\"\"\"\n    calculated_volume = (4/3) * math.pi * (radius ** 3)\n    return calculated_volume == volume\ndef g(volume=1000.0):\n    radius = (volume * (3/(4 * math.pi))) ** (1/3)\n    return radius\nassert f(g())\n",
        "emb": null,
        "idx_generation": 218,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\ndef f(radius: float, volume=1000.0) -> bool:\n    \"\"\"Check if the volume of a sphere is equal to the given volume value.\"\"\"\n    calculated_volume = (4/3) * math.pi * (radius ** 3)\n    return calculated_volume == volume",
        "solution_func": "def g(volume=1000.0):\n    radius = (volume * (3/(4 * math.pi))) ** (1/3)\n    return radius",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(word_list: List[str], n=5) -> bool:\n    \"\"\"Check if all words in the list have length greater than n\"\"\"\n    return all(len(word) > n for word in word_list)\ndef g(n=5):\n    return ['apple', 'banana', 'cherry', 'grape']\nassert f(g())\n",
        "emb": null,
        "idx_generation": 218,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(word_list: List[str], n=5) -> bool:\n    \"\"\"Check if all words in the list have length greater than n\"\"\"\n    return all(len(word) > n for word in word_list)",
        "solution_func": "def g(n=5):\n    return ['apple', 'banana', 'cherry', 'grape']",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there is a subarray of numbers in the list that multiply up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j // nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=0):\n    return [2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 219,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there is a subarray of numbers in the list that multiply up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j // nums[i - 1]]\n\n    return dp[n][target]",
        "solution_func": "def g(target=0):\n    return [2, 3, 4, 5, 6]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], n=3) -> bool:\n    \"\"\"Given n, find n integers such that li[i] * li[i+1] + 1 == li[i+2], for i = 0, 1, ..., n-1\nwhere indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\nthat are multiples of 3 (as proven in the IMO problem).\nSample input:\n3\nSample output:\n[_, _, _]\n(Sample output hidden because showing sample output would give away too much information.)\"\"\"\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n=3):\n    return [-1, -1, 2] * (n // 3)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 219,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[int], n=3) -> bool:\n    \"\"\"Given n, find n integers such that li[i] * li[i+1] + 1 == li[i+2], for i = 0, 1, ..., n-1\nwhere indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\nthat are multiples of 3 (as proven in the IMO problem).\nSample input:\n3\nSample output:\n[_, _, _]\n(Sample output hidden because showing sample output would give away too much information.)\"\"\"\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))",
        "solution_func": "def g(n=3):\n    return [-1, -1, 2] * (n // 3)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='abcdefghi', target='') -> bool:\n    \"\"\"Find the two slice indices that give the specific target in string s\"\"\"\n    (i, j) = inds\n    return s[i:j] == target\ndef g(s='abcdefghi', target=''):\n    from itertools import product\n    for (i, j) in product(range(-len(s) - 1, len(s) + 1), repeat=2):\n        try:\n            if s[i:j] == target:\n                return [i, j]\n        except (IndexError, ValueError):\n            pass\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 219,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='abcdefghi', target='') -> bool:\n    \"\"\"Find the two slice indices that give the specific target in string s\"\"\"\n    (i, j) = inds\n    return s[i:j] == target",
        "solution_func": "def g(s='abcdefghi', target=''):\n    from itertools import product\n    for (i, j) in product(range(-len(s) - 1, len(s) + 1), repeat=2):\n        try:\n            if s[i:j] == target:\n                return [i, j]\n        except (IndexError, ValueError):\n            pass",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\ndef g(nums=[2, 4, 6, 8, 10]):\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 219,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)",
        "solution_func": "def g(nums=[2, 4, 6, 8, 10]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\ndef g(nums=[3, 6, 9, 12, 15]):\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 219,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)",
        "solution_func": "def g(nums=[3, 6, 9, 12, 15]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\ndef g(nums=[4, 8, 12, 16, 20]):\n    return nums\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 219,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)",
        "solution_func": "def g(nums=[4, 8, 12, 16, 20]):\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list that sum up to a given target.\"\"\"\n    return any(arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr)))\ndef g(target=10):\n    return [i for i in range(target//2)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 219,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list that sum up to a given target.\"\"\"\n    return any(arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr)))",
        "solution_func": "def g(target=10):\n    return [i for i in range(target//2)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if there exists a submatrix of size nxn that has all elements equal.\"\"\"\n    for i in range(len(matrix)-n+1):\n        for j in range(len(matrix[0])-n+1):\n            submatrix = [row[j:j+n] for row in matrix[i:i+n]]\n            if all(all(submatrix[x][y] == submatrix[0][0] for y in range(n)) for x in range(n)):\n                return True\n    return False\ndef g(n=3):\n    matrix = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]]\n    return matrix\nassert f(g())\n",
        "emb": null,
        "idx_generation": 219,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if there exists a submatrix of size nxn that has all elements equal.\"\"\"\n    for i in range(len(matrix)-n+1):\n        for j in range(len(matrix[0])-n+1):\n            submatrix = [row[j:j+n] for row in matrix[i:i+n]]\n            if all(all(submatrix[x][y] == submatrix[0][0] for y in range(n)) for x in range(n)):\n                return True\n    return False",
        "solution_func": "def g(n=3):\n    matrix = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(names: List[str], n=4) -> bool:\n    \"\"\"Check if there exists a group of n names that have the same first letter.\"\"\"\n    letter_count = {}\n    for name in names:\n        letter = name[0]\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n        if letter_count[letter] >= n:\n            return True\n    return False\ndef g(n=4):\n    names = [\"Alice\", \"Bob\", \"Charlie\", \"Dave\", \"Eve\", \"Frank\", \"George\", \"Harry\", \"Irene\", \"Jack\"]\n    return names\nassert f(g())\n",
        "emb": null,
        "idx_generation": 219,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(names: List[str], n=4) -> bool:\n    \"\"\"Check if there exists a group of n names that have the same first letter.\"\"\"\n    letter_count = {}\n    for name in names:\n        letter = name[0]\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n        if letter_count[letter] >= n:\n            return True\n    return False",
        "solution_func": "def g(n=4):\n    names = [\"Alice\", \"Bob\", \"Charlie\", \"Dave\", \"Eve\", \"Frank\", \"George\", \"Harry\", \"Irene\", \"Jack\"]\n    return names",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 219,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(numbers: List[int], n=3) -> bool:\n    \"\"\"Check if the given list contains exactly n elements that are divisible by 5.\"\"\"\n    return len([x for x in numbers if x % 5 == 0]) == n\ndef g(n=3):\n    return [10, 15, 20, 25, 30, 35, 40, 45, 50, 55][:n]\nassert f(g())\n\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 220,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\ndef f(numbers: List[int], n=3) -> bool:\n    \"\"\"Check if the given list contains exactly n elements that are divisible by 5.\"\"\"\n    return len([x for x in numbers if x % 5 == 0]) == n",
        "solution_func": "def g(n=3):\n    return [10, 15, 20, 25, 30, 35, 40, 45, 50, 55][:n]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if any two numbers in the list add up to the target number.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\ndef g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nassert f(g())\n\n",
        "emb": null,
        "idx_generation": 220,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if any two numbers in the list add up to the target number.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list contains any duplicate elements.\"\"\"\n    return len(numbers) != len(set(numbers))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11, 12, 13, 14, 15]\nassert f(g())\n\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 220,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list contains any duplicate elements.\"\"\"\n    return len(numbers) != len(set(numbers))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11, 12, 13, 14, 15]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there are two numbers in the list that multiply to give the target value\"\"\"\n    return any(nums[i] * nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums: List[int]):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == 20:\n                return (nums[i], nums[j])\nassert f(g([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 220,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there are two numbers in the list that multiply to give the target value\"\"\"\n    return any(nums[i] * nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(nums: List[int]):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == 20:\n                return (nums[i], nums[j])",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target value\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g(nums: List[int]):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == 100:\n                    return (nums[i], nums[j], nums[k])\nassert f(g([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]))\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 220,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target value\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))",
        "solution_func": "def g(nums: List[int]):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == 100:\n                    return (nums[i], nums[j], nums[k])",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there are two numbers in the list whose difference is equal to the target value\"\"\"\n    return any(nums[i] - nums[j] == target or nums[j] - nums[i] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums: List[int]):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] - nums[j] == 50 or nums[j] - nums[i] == 50:\n                return (nums[i], nums[j])\nassert f(g([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]))\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 220,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there are two numbers in the list whose difference is equal to the target value\"\"\"\n    return any(nums[i] - nums[j] == target or nums[j] - nums[i] == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(nums: List[int]):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] - nums[j] == 50 or nums[j] - nums[i] == 50:\n                return (nums[i], nums[j])",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100, k=3) -> bool:\n    \"\"\"Find k numbers in a list that sum up to the target value\"\"\"\n    return sum(numbers) == target and len(numbers) == k\ndef g(target=100, k=3):\n    return [25, 35, 40]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 220,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=100, k=3) -> bool:\n    \"\"\"Find k numbers in a list that sum up to the target value\"\"\"\n    return sum(numbers) == target and len(numbers) == k",
        "solution_func": "def g(target=100, k=3):\n    return [25, 35, 40]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring=\"python\") -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    return substring in string\ndef g(substring=\"python\"):\n    return \"I love python programming\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 220,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring=\"python\") -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    return substring in string",
        "solution_func": "def g(substring=\"python\"):\n    return \"I love python programming\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the list of numbers is sorted in ascending order\"\"\"\n    return numbers == sorted(numbers)\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 220,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the list of numbers is sorted in ascending order\"\"\"\n    return numbers == sorted(numbers)",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Given a list of numbers, check if there exists a pair of numbers that sum up to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=25):\n    return [2, 5, 8, 10, 15, 20, 25]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 220,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Given a list of numbers, check if there exists a pair of numbers that sum up to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=25):\n    return [2, 5, 8, 10, 15, 20, 25]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the array that sum up to the target\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 3, 5, 7, 9]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 221,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List, Tuple\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the array that sum up to the target\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 3, 5, 7, 9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if the given string contains the specified substring\"\"\"\n    return substring in s\n\ndef g(substring='abc'):\n    return \"defghijklmnopqrstuvwxyz\" + substring + \"qrstuvwxyz\"\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 221,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if the given string contains the specified substring\"\"\"\n    return substring in s",
        "solution_func": "def g(substring='abc'):\n    return \"defghijklmnopqrstuvwxyz\" + substring + \"qrstuvwxyz\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], n=10) -> bool:\n    \"\"\"Check if the given array has exactly n distinct elements\"\"\"\n    return len(set(arr)) == n\n\ndef g(n=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 221,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], n=10) -> bool:\n    \"\"\"Check if the given array has exactly n distinct elements\"\"\"\n    return len(set(arr)) == n",
        "solution_func": "def g(n=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target-9]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 221,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target-9]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find whether the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target]]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 221,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find whether the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target]]",
        "map_ix": [
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, target-150]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 221,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=100):\n    return [10, 20, 30, 40, 50, target-150]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(e: List[int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies outside a rectangle.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return x < a or x > a + c or y < b or y > b + d\ndef g(a=1, b=2, c=10, d=1000):\n    return [a + c, b + d]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 221,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(e: List[int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies outside a rectangle.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return x < a or x > a + c or y < b or y > b + d",
        "solution_func": "def g(a=1, b=2, c=10, d=1000):\n    return [a + c, b + d]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(e: List[int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies within a triangle.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return (b - a) * (x - a) + (d - b) * (y - b) >= 0 and (c - a) * (y - b) - (d - b) * (x - a) >= 0 and (c - a) * (y - d) - (d - b) * (x - c) >= 0\ndef g(a=1, b=2, c=10, d=1000):\n    return [a + 1, b + 1]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 221,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(e: List[int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies within a triangle.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return (b - a) * (x - a) + (d - b) * (y - b) >= 0 and (c - a) * (y - b) - (d - b) * (x - a) >= 0 and (c - a) * (y - d) - (d - b) * (x - c) >= 0",
        "solution_func": "def g(a=1, b=2, c=10, d=1000):\n    return [a + 1, b + 1]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: List[int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies within a parallelogram.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return (x - a) * (c - a) + (y - b) * (d - b) >= 0 and (x - c) * (a - c) + (y - d) * (b - d) >= 0\ndef g(a=1, b=2, c=10, d=1000):\n    return [a + 1, b + 1]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 221,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(e: List[int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies within a parallelogram.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return (x - a) * (c - a) + (y - b) * (d - b) >= 0 and (x - c) * (a - c) + (y - d) * (b - d) >= 0",
        "solution_func": "def g(a=1, b=2, c=10, d=1000):\n    return [a + 1, b + 1]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(x: List[int], n=5, s=19) -> bool:\n    \"\"\"Find a list of n positive integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=5, s=19):\n    x = [s] * n\n    return x\nassert f(g())\n",
        "emb": null,
        "idx_generation": 221,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: List[int], n=5, s=19) -> bool:\n    \"\"\"Find a list of n positive integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])",
        "solution_func": "def g(n=5, s=19):\n    x = [s] * n\n    return x",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> List[int]:\n    \"\"\"Find all numbers in the list that are divisible by n\"\"\"\n    return [num for num in nums if num % n == 0]\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[1::2]\nassert f(g()) == [2, 4, 6, 8, 10]\n",
        "emb": null,
        "idx_generation": 222,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> List[int]:\n    \"\"\"Find all numbers in the list that are divisible by n\"\"\"\n    return [num for num in nums if num % n == 0]",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[1::2]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if all numbers in the list are divisible by n\"\"\"\n    return all(num % n == 0 for num in nums)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[0] % 2 + 1\nassert f(g()) == False\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 222,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if all numbers in the list are divisible by n\"\"\"\n    return all(num % n == 0 for num in nums)",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[0] % 2 + 1",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> List[int]:\n    \"\"\"Find all numbers in the list that are not divisible by n\"\"\"\n    return [num for num in nums if num % n != 0]\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[1::3]\nassert f(g()) == [2, 5, 8]\n",
        "emb": null,
        "idx_generation": 222,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> List[int]:\n    \"\"\"Find all numbers in the list that are not divisible by n\"\"\"\n    return [num for num in nums if num % n != 0]",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[1::3]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there are exactly two numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 222,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there are exactly two numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]], threshold=5) -> bool:\n    \"\"\"Check if all points in the list are within the threshold distance from the origin.\"\"\"\n    return all((x ** 2 + y ** 2) ** 0.5 <= threshold for x, y in points)\ndef g(threshold=5):\n    return [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 222,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(points: List[Tuple[int, int]], threshold=5) -> bool:\n    \"\"\"Check if all points in the list are within the threshold distance from the origin.\"\"\"\n    return all((x ** 2 + y ** 2) ** 0.5 <= threshold for x, y in points)",
        "solution_func": "def g(threshold=5):\n    return [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s_case: str, s='riziP') -> bool:\n    \"\"\"Given a word, check if it is a palindrome and return True if it is, False otherwise.\"\"\"\n    return s_case == s_case[::-1]\ndef g(s='riziP'):\n    return s\nassert f(g())\n",
        "emb": null,
        "idx_generation": 222,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s_case: str, s='riziP') -> bool:\n    \"\"\"Given a word, check if it is a palindrome and return True if it is, False otherwise.\"\"\"\n    return s_case == s_case[::-1]",
        "solution_func": "def g(s='riziP'):\n    return s",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=15) -> bool:\n    \"\"\"Check if there exists three numbers in the list that add up to the target.\"\"\"\n    return any(target - num1 - num2 in numbers for i, num1 in enumerate(numbers) for num2 in numbers[i+1:])\n\ndef g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 222,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=15) -> bool:\n    \"\"\"Check if there exists three numbers in the list that add up to the target.\"\"\"\n    return any(target - num1 - num2 in numbers for i, num1 in enumerate(numbers) for num2 in numbers[i+1:])",
        "solution_func": "def g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=5) -> bool:\n    \"\"\"Check if there exists two numbers in the list that multiply to give the target.\"\"\"\n    return any(target / num in numbers for num in numbers)\n\ndef g(target=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 222,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=5) -> bool:\n    \"\"\"Check if there exists two numbers in the list that multiply to give the target.\"\"\"\n    return any(target / num in numbers for num in numbers)",
        "solution_func": "def g(target=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Check if there exists four numbers in the list that add up to the target.\"\"\"\n    return any(target - num1 - num2 - num3 in numbers for i, num1 in enumerate(numbers) for j, num2 in enumerate(numbers[i+1:]) for num3 in numbers[i+j+2:])\n\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 222,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Check if there exists four numbers in the list that add up to the target.\"\"\"\n    return any(target - num1 - num2 - num3 in numbers for i, num1 in enumerate(numbers) for j, num2 in enumerate(numbers[i+1:]) for num3 in numbers[i+j+2:])",
        "solution_func": "def g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            1,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 222,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if a matrix is a magic square of size n x n\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all((row_sum == col_sum == diagonal_sum1 == diagonal_sum2) for row_sum, col_sum in zip(row_sums, col_sums))\n\ndef g(n=3):\n    return [[4, 9, 2], [3, 5, 7], [8, 1, 6]]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 223,
        "target_skills": null,
        "problem_func": "from typing import*\n\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if a matrix is a magic square of size n x n\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all((row_sum == col_sum == diagonal_sum1 == diagonal_sum2) for row_sum, col_sum in zip(row_sums, col_sums))",
        "solution_func": "def g(n=3):\n    return [[4, 9, 2], [3, 5, 7], [8, 1, 6]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(palindrome: str) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return palindrome == palindrome[::-1]\n\ndef g():\n    return \"madam\"\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 223,
        "target_skills": null,
        "problem_func": "from typing import*\n\ndef f(palindrome: str) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return palindrome == palindrome[::-1]",
        "solution_func": "def g():\n    return \"madam\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target value\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 223,
        "target_skills": null,
        "problem_func": "from typing import*\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target value\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='abcdefghi', target='') -> bool:\n    \"\"\"Find the two slice indices that give the specific target in string s\"\"\"\n    (i, j) = inds\n    return s[i:j] == target\ndef g(s='abcdefghi', target=''):\n    from itertools import product\n    for (i, j) in product(range(-len(s) - 1, len(s) + 1), repeat=2):\n        try:\n            if s[i:j] == target:\n                return [i, j]\n        except (IndexError, ValueError):\n            pass\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 223,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='abcdefghi', target='') -> bool:\n    \"\"\"Find the two slice indices that give the specific target in string s\"\"\"\n    (i, j) = inds\n    return s[i:j] == target",
        "solution_func": "def g(s='abcdefghi', target=''):\n    from itertools import product\n    for (i, j) in product(range(-len(s) - 1, len(s) + 1), repeat=2):\n        try:\n            if s[i:j] == target:\n                return [i, j]\n        except (IndexError, ValueError):\n            pass",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='pythonprogramming', target='') -> bool:\n    \"\"\"Find the two slice indices that give the specific target in string s\"\"\"\n    (i, j) = inds\n    return s[i:j] == target\ndef g(s='pythonprogramming', target=''):\n    from itertools import product\n    for (i, j) in product(range(-len(s) - 1, len(s) + 1), repeat=2):\n        try:\n            if s[i:j] == target:\n                return [i, j]\n        except (IndexError, ValueError):\n            pass\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 223,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='pythonprogramming', target='') -> bool:\n    \"\"\"Find the two slice indices that give the specific target in string s\"\"\"\n    (i, j) = inds\n    return s[i:j] == target",
        "solution_func": "def g(s='pythonprogramming', target=''):\n    from itertools import product\n    for (i, j) in product(range(-len(s) - 1, len(s) + 1), repeat=2):\n        try:\n            if s[i:j] == target:\n                return [i, j]\n        except (IndexError, ValueError):\n            pass",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='programmingpuzzles', target='') -> bool:\n    \"\"\"Find the two slice indices that give the specific target in string s\"\"\"\n    (i, j) = inds\n    return s[i:j] == target\ndef g(s='programmingpuzzles', target=''):\n    from itertools import product\n    for (i, j) in product(range(-len(s) - 1, len(s) + 1), repeat=2):\n        try:\n            if s[i:j] == target:\n                return [i, j]\n        except (IndexError, ValueError):\n            pass\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 223,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='programmingpuzzles', target='') -> bool:\n    \"\"\"Find the two slice indices that give the specific target in string s\"\"\"\n    (i, j) = inds\n    return s[i:j] == target",
        "solution_func": "def g(s='programmingpuzzles', target=''):\n    from itertools import product\n    for (i, j) in product(range(-len(s) - 1, len(s) + 1), repeat=2):\n        try:\n            if s[i:j] == target:\n                return [i, j]\n        except (IndexError, ValueError):\n            pass",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100, k=3) -> bool:\n    \"\"\"Check if there are k consecutive numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(arr) - k + 1):\n        if sum(arr[i:i+k]) == target:\n            return True\n    return False\n\ndef g(target=100, k=3):\n    return list(range(1, k+1)) + [target - sum(range(1, k))]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 223,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=100, k=3) -> bool:\n    \"\"\"Check if there are k consecutive numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(arr) - k + 1):\n        if sum(arr[i:i+k]) == target:\n            return True\n    return False",
        "solution_func": "def g(target=100, k=3):\n    return list(range(1, k+1)) + [target - sum(range(1, k))]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=0) -> bool:\n    \"\"\"Check if there are three numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(lst) - 2):\n        for j in range(i+1, len(lst) - 1):\n            for k in range(j+1, len(lst)):\n                if lst[i] + lst[j] + lst[k] == target:\n                    return True\n    return False\n\ndef g(target=0):\n    return [target, -target, 0]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 223,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], target=0) -> bool:\n    \"\"\"Check if there are three numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(lst) - 2):\n        for j in range(i+1, len(lst) - 1):\n            for k in range(j+1, len(lst)):\n                if lst[i] + lst[j] + lst[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=0):\n    return [target, -target, 0]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=0) -> bool:\n    \"\"\"Check if there are two distinct numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [target // 2, target // 2 + (target % 2)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 223,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], target=0) -> bool:\n    \"\"\"Check if there are two distinct numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    return [target // 2, target // 2 + (target % 2)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there is a subsequence of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=100):\n    return [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 223,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there is a subsequence of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]",
        "solution_func": "def g(target=100):\n    return [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=50):\n    return list(range(1, target))\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 224,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=50):\n    return list(range(1, target))",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'imbe', 'jackfruit'], b=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'imbe', 'jackfruit', 'kiwi', 'lemon', 'mango', 'nectarine', 'orange', 'papaya', 'quince', 'raspberry', 'strawberry', 'tangerine']) -> bool:\n    \"\"\"Check if a string is present in both list a and list b\"\"\"\n    return s in a and s in b\n\ndef g(a=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'imbe', 'jackfruit'], b=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'imbe', 'jackfruit', 'kiwi', 'lemon', 'mango', 'nectarine', 'orange', 'papaya', 'quince', 'raspberry', 'strawberry', 'tangerine']):\n    return a[0]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 224,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, a=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'imbe', 'jackfruit'], b=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'imbe', 'jackfruit', 'kiwi', 'lemon', 'mango', 'nectarine', 'orange', 'papaya', 'quince', 'raspberry', 'strawberry', 'tangerine']) -> bool:\n    \"\"\"Check if a string is present in both list a and list b\"\"\"\n    return s in a and s in b",
        "solution_func": "def g(a=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'imbe', 'jackfruit'], b=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'imbe', 'jackfruit', 'kiwi', 'lemon', 'mango', 'nectarine', 'orange', 'papaya', 'quince', 'raspberry', 'strawberry', 'tangerine']):\n    return a[0]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_row=2, target_col=2) -> bool:\n    \"\"\"Check if the sum of elements in the target row and target column of the matrix is equal\"\"\"\n    row_sum = sum(matrix[target_row])\n    col_sum = sum([matrix[i][target_col] for i in range(len(matrix))])\n    return row_sum == col_sum\n\ndef g(target_row=2, target_col=2):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 224,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_row=2, target_col=2) -> bool:\n    \"\"\"Check if the sum of elements in the target row and target column of the matrix is equal\"\"\"\n    row_sum = sum(matrix[target_row])\n    col_sum = sum([matrix[i][target_col] for i in range(len(matrix))])\n    return row_sum == col_sum",
        "solution_func": "def g(target_row=2, target_col=2):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is symmetric along its secondary diagonal.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n-i-1):\n            if matrix[i][j] != matrix[n-j-1][n-i-1]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 224,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is symmetric along its secondary diagonal.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n-i-1):\n            if matrix[i][j] != matrix[n-j-1][n-i-1]:\n                return False\n    return True",
        "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is a diagonal matrix.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 224,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is a diagonal matrix.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True",
        "solution_func": "def g():\n    return [[1, 0, 0], [0, 2, 0], [0, 0, 3]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is an identity matrix.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i == j and matrix[i][j] != 1:\n                return False\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 224,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is an identity matrix.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i == j and matrix[i][j] != 1:\n                return False\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True",
        "solution_func": "def g():\n    return [[1, 0, 0], [0, 1, 0], [0, 0, 1]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if the sum of any three numbers in a list is equal to a given target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=20):\n    nums = [5, 10, 15, 3, 8, 2]\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 224,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if the sum of any three numbers in a list is equal to a given target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=20):\n    nums = [5, 10, 15, 3, 8, 2]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"Check if two strings are anagrams of each other\"\"\"\n    return sorted(s1) == sorted(s2)\n\ndef g(s1='listen', s2='silent'):\n    return s1, s2\n\nassert f(*g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 224,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"Check if two strings are anagrams of each other\"\"\"\n    return sorted(s1) == sorted(s2)",
        "solution_func": "def g(s1='listen', s2='silent'):\n    return s1, s2",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub: str) -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    return sub in s\n\ndef g(sub='world'):\n    s = \"Hello, world!\"\n    return s, sub\n\nassert f(*g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 224,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, sub: str) -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    return sub in s",
        "solution_func": "def g(sub='world'):\n    s = \"Hello, world!\"\n    return s, sub",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: List[str], n=5, m=3) -> bool:\n    \"\"\"Find a list of n strings, each of length m, such that their concatenation forms s\"\"\"\n    return len(s) == n and all([len(x) == m for x in s]) and ''.join(s) == ''.join([chr(ord('A') + i) * m for i in range(n)])\ndef g(n=5, m=3):\n    return [chr(ord('A') + i) * m for i in range(n)]\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 224,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: List[str], n=5, m=3) -> bool:\n    \"\"\"Find a list of n strings, each of length m, such that their concatenation forms s\"\"\"\n    return len(s) == n and all([len(x) == m for x in s]) and ''.join(s) == ''.join([chr(ord('A') + i) * m for i in range(n)])",
        "solution_func": "def g(n=5, m=3):\n    return [chr(ord('A') + i) * m for i in range(n)]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=5) -> bool:\n    \"\"\"Check if the given string is a palindrome and has a length greater than or equal to the target length\"\"\"\n    return len(s) >= target and s == s[::-1]\ndef g(target=5):\n    return \"racecar\"\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 225,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target=5) -> bool:\n    \"\"\"Check if the given string is a palindrome and has a length greater than or equal to the target length\"\"\"\n    return len(s) >= target and s == s[::-1]",
        "solution_func": "def g(target=5):\n    return \"racecar\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given matrix that sum up to the target\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i, rows):\n                for l in range(cols):\n                    if matrix[i][j] + matrix[k][l] == target:\n                        return True\n    return False\ndef g(target=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 225,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given matrix that sum up to the target\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i, rows):\n                for l in range(cols):\n                    if matrix[i][j] + matrix[k][l] == target:\n                        return True\n    return False",
        "solution_func": "def g(target=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that multiply to the target\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\ndef g(target=50):\n    nums = [5, 10, 15, 20, 25, 30]\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 225,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that multiply to the target\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] * nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=50):\n    nums = [5, 10, 15, 20, 25, 30]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=99) -> bool:\n    \"\"\"Check if all rows in the matrix contain the target number.\"\"\"\n    for row in matrix:\n        if target not in row:\n            return False\n    return True\ndef g(target=99):\n    return [[target, target, target], [target, target, target], [target, target, target]]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 225,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=99) -> bool:\n    \"\"\"Check if all rows in the matrix contain the target number.\"\"\"\n    for row in matrix:\n        if target not in row:\n            return False\n    return True",
        "solution_func": "def g(target=99):\n    return [[target, target, target], [target, target, target], [target, target, target]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=3) -> bool:\n    \"\"\"Check if the sum of all elements in the matrix is equal to the target number.\"\"\"\n    total = 0\n    for row in matrix:\n        total += sum(row)\n    return total == target\ndef g(target=3):\n    return [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 225,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=3) -> bool:\n    \"\"\"Check if the sum of all elements in the matrix is equal to the target number.\"\"\"\n    total = 0\n    for row in matrix:\n        total += sum(row)\n    return total == target",
        "solution_func": "def g(target=3):\n    return [[1, 1, 1], [1, 1, 1], [1, 1, 1]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the matrix is a square matrix and the sum of each diagonal is equal to the target number.\"\"\"\n    n = len(matrix)\n    if n != len(matrix[0]):\n        return False\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += matrix[i][i] + matrix[i][n-i-1]\n    return diagonal_sum == target\ndef g(target=0):\n    return [[1, 2, 1], [3, 4, 3], [1, 2, 1]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 225,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the matrix is a square matrix and the sum of each diagonal is equal to the target number.\"\"\"\n    n = len(matrix)\n    if n != len(matrix[0]):\n        return False\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += matrix[i][i] + matrix[i][n-i-1]\n    return diagonal_sum == target",
        "solution_func": "def g(target=0):\n    return [[1, 2, 1], [3, 4, 3], [1, 2, 1]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 225,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num_list: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(grades: Dict[str, int], passing_score=70) -> bool:\n    \"\"\"Check if all the students in the grades dictionary have passing scores.\"\"\"\n    return all((score >= passing_score for score in grades.values()))\n\ndef g(passing_score=70):\n    return {\"Alice\": 80, \"Bob\": 65, \"Charlie\": 90, \"Diana\": 75}\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 225,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(grades: Dict[str, int], passing_score=70) -> bool:\n    \"\"\"Check if all the students in the grades dictionary have passing scores.\"\"\"\n    return all((score >= passing_score for score in grades.values()))",
        "solution_func": "def g(passing_score=70):\n    return {\"Alice\": 80, \"Bob\": 65, \"Charlie\": 90, \"Diana\": 75}",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime, timedelta\n\ndef f(dates: List[datetime], time_diff=timedelta(hours=3)) -> bool:\n    \"\"\"Check if all the dates in the list are at least 3 hours apart from each other.\"\"\"\n    for i in range(len(dates)-1):\n        if dates[i+1] - dates[i] < time_diff:\n            return False\n    return True\n\ndef g(time_diff=timedelta(hours=3)):\n    return [datetime(2022, 1, 1, 10, 0, 0), datetime(2022, 1, 1, 13, 0, 0), datetime(2022, 1, 1, 16, 0, 0)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 225,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime, timedelta\n\ndef f(dates: List[datetime], time_diff=timedelta(hours=3)) -> bool:\n    \"\"\"Check if all the dates in the list are at least 3 hours apart from each other.\"\"\"\n    for i in range(len(dates)-1):\n        if dates[i+1] - dates[i] < time_diff:\n            return False\n    return True",
        "solution_func": "def g(time_diff=timedelta(hours=3)):\n    return [datetime(2022, 1, 1, 10, 0, 0), datetime(2022, 1, 1, 13, 0, 0), datetime(2022, 1, 1, 16, 0, 0)]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose sum is equal to the target sum\"\"\"\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            subsequence = nums[i:j+1]\n            if sum(subsequence) == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 225,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose sum is equal to the target sum\"\"\"\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            subsequence = nums[i:j+1]\n            if sum(subsequence) == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=15) -> bool:\n    \"\"\"Check if there exists three numbers in the list that add up to the target.\"\"\"\n    return any(target - num in numbers for num in numbers)\n\ndef g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 226,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=15) -> bool:\n    \"\"\"Check if there exists three numbers in the list that add up to the target.\"\"\"\n    return any(target - num in numbers for num in numbers)",
        "solution_func": "def g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Check if there exists four numbers in the list that add up to the target.\"\"\"\n    return any(target - num in numbers for num in numbers)\n\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 226,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Check if there exists four numbers in the list that add up to the target.\"\"\"\n    return any(target - num in numbers for num in numbers)",
        "solution_func": "def g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=12) -> bool:\n    \"\"\"Check if there exists two numbers in the list that multiply up to the target.\"\"\"\n    return any(target / num in numbers for num in numbers)\n\ndef g(target=12):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 226,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=12) -> bool:\n    \"\"\"Check if there exists two numbers in the list that multiply up to the target.\"\"\"\n    return any(target / num in numbers for num in numbers)",
        "solution_func": "def g(target=12):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=4) -> bool:\n    \"\"\"Check if the given matrix is a square matrix of size n x n and if the sum of each row is equal to the sum of each column.\"\"\"\n    if all(len(row) == n for row in matrix) and len(matrix) == n:\n        row_sums = [sum(row) for row in matrix]\n        col_sums = [sum(col) for col in zip(*matrix)]\n        return all(row_sum == col_sum for row_sum, col_sum in zip(row_sums, col_sums))\n    return False\ndef g(n=4):\n    return [[1, 2, 3, 4], [2, 3, 4, 1], [3, 4, 1, 2], [4, 1, 2, 3]]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 226,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], n=4) -> bool:\n    \"\"\"Check if the given matrix is a square matrix of size n x n and if the sum of each row is equal to the sum of each column.\"\"\"\n    if all(len(row) == n for row in matrix) and len(matrix) == n:\n        row_sums = [sum(row) for row in matrix]\n        col_sums = [sum(col) for col in zip(*matrix)]\n        return all(row_sum == col_sum for row_sum, col_sum in zip(row_sums, col_sums))\n    return False",
        "solution_func": "def g(n=4):\n    return [[1, 2, 3, 4], [2, 3, 4, 1], [3, 4, 1, 2], [4, 1, 2, 3]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(string: str, n=5) -> bool:\n    \"\"\"Check if the given string contains exactly n vowels.\"\"\"\n    vowels = set('aeiou')\n    count = sum(1 for char in string if char.lower() in vowels)\n    return count == n\ndef g(n=5):\n    return \"Hello, how are you?\"\nassert f(g())\n",
        "emb": null,
        "idx_generation": 226,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, n=5) -> bool:\n    \"\"\"Check if the given string contains exactly n vowels.\"\"\"\n    vowels = set('aeiou')\n    count = sum(1 for char in string if char.lower() in vowels)\n    return count == n",
        "solution_func": "def g(n=5):\n    return \"Hello, how are you?\"",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the given list, such that the sum of the subarray is divisible by k.\"\"\"\n    n = len(nums)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + nums[i - 1]\n    for i in range(0, n - k + 1):\n        subarray_sum = prefix_sum[i + k] - prefix_sum[i]\n        if subarray_sum % k == 0:\n            return True\n    return False\ndef g(k=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 226,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the given list, such that the sum of the subarray is divisible by k.\"\"\"\n    n = len(nums)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + nums[i - 1]\n    for i in range(0, n - k + 1):\n        subarray_sum = prefix_sum[i + k] - prefix_sum[i]\n        if subarray_sum % k == 0:\n            return True\n    return False",
        "solution_func": "def g(k=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import *\n\ndef f(numbers: List[int], target_sum=50) -> bool:\n    \"\"\"Check if a target sum can be obtained by adding any two numbers from a given list of integers.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\n\ndef g(numbers: List[int]):\n    return numbers\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 226,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import *\n\ndef f(numbers: List[int], target_sum=50) -> bool:\n    \"\"\"Check if a target sum can be obtained by adding any two numbers from a given list of integers.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(numbers: List[int]):\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import *\n\ndef f(string: str, substrings: List[str]) -> bool:\n    \"\"\"Check if a given string contains all the substrings from a given list.\"\"\"\n    return all(substring in string for substring in substrings)\n\ndef g(string: str, substrings: List[str]):\n    return string\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 226,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import *\n\ndef f(string: str, substrings: List[str]) -> bool:\n    \"\"\"Check if a given string contains all the substrings from a given list.\"\"\"\n    return all(substring in string for substring in substrings)",
        "solution_func": "def g(string: str, substrings: List[str]):\n    return string",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import *\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if a given list of numbers is a palindrome.\"\"\"\n    return numbers == numbers[::-1]\n\ndef g(numbers: List[int]):\n    return numbers\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 226,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import *\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if a given list of numbers is a palindrome.\"\"\"\n    return numbers == numbers[::-1]",
        "solution_func": "def g(numbers: List[int]):\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if any row in the matrix contains all even numbers.\"\"\"\n    for row in matrix:\n        if all(num % 2 == 0 for num in row):\n            return True\n    return False\n\ndef g(target=0):\n    matrix = [[2, 4, 6], [1, 3, 5], [8, 10, 12]]\n    return matrix\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 226,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if any row in the matrix contains all even numbers.\"\"\"\n    for row in matrix:\n        if all(num % 2 == 0 for num in row):\n            return True\n    return False",
        "solution_func": "def g(target=0):\n    matrix = [[2, 4, 6], [1, 3, 5], [8, 10, 12]]\n    return matrix",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=7, c=20) -> bool:\n    \"\"\"Find n such that n - a == b * (the sum of the first c integers)\"\"\"\n    return n - a == sum([b * i for i in range(c)])\ndef g(a=3, b=7, c=20):\n    return a + sum([b * i for i in range(c)])\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 227,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=3, b=7, c=20) -> bool:\n    \"\"\"Find n such that n - a == b * (the sum of the first c integers)\"\"\"\n    return n - a == sum([b * i for i in range(c)])",
        "solution_func": "def g(a=3, b=7, c=20):\n    return a + sum([b * i for i in range(c)])",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=5, c=100) -> bool:\n    \"\"\"Find n such that n * a == b * (the sum of the first c integers)\"\"\"\n    return n * a == sum([b * i for i in range(c)])\ndef g(a=10, b=5, c=100):\n    return sum([b * i for i in range(c)]) / a\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 227,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=10, b=5, c=100) -> bool:\n    \"\"\"Find n such that n * a == b * (the sum of the first c integers)\"\"\"\n    return n * a == sum([b * i for i in range(c)])",
        "solution_func": "def g(a=10, b=5, c=100):\n    return sum([b * i for i in range(c)]) / a",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=8, b=4, c=30) -> bool:\n    \"\"\"Find n such that n / a == b * (the sum of the first c integers)\"\"\"\n    return n / a == sum([b * i for i in range(c)])\ndef g(a=8, b=4, c=30):\n    return a * sum([b * i for i in range(c)])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 227,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=8, b=4, c=30) -> bool:\n    \"\"\"Find n such that n / a == b * (the sum of the first c integers)\"\"\"\n    return n / a == sum([b * i for i in range(c)])",
        "solution_func": "def g(a=8, b=4, c=30):\n    return a * sum([b * i for i in range(c)])",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=4, c=8) -> bool:\n    \"\"\"Find n such that n * a == b * (the sum of the first c integers)\"\"\"\n    return n * a == sum([b * i for i in range(c)])\ndef g(a=10, b=4, c=8):\n    return sum([b * i for i in range(c)]) // a\nassert f(g())\n",
        "emb": null,
        "idx_generation": 227,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=10, b=4, c=8) -> bool:\n    \"\"\"Find n such that n * a == b * (the sum of the first c integers)\"\"\"\n    return n * a == sum([b * i for i in range(c)])",
        "solution_func": "def g(a=10, b=4, c=8):\n    return sum([b * i for i in range(c)]) // a",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=2, c=10) -> bool:\n    \"\"\"Find n such that n - a == b * (the sum of the first c integers)\"\"\"\n    return n - a == sum([b * i for i in range(c)])\ndef g(a=3, b=2, c=10):\n    return a + sum([b * i for i in range(c)])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 227,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=3, b=2, c=10) -> bool:\n    \"\"\"Find n such that n - a == b * (the sum of the first c integers)\"\"\"\n    return n - a == sum([b * i for i in range(c)])",
        "solution_func": "def g(a=3, b=2, c=10):\n    return a + sum([b * i for i in range(c)])",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=7, c=15) -> bool:\n    \"\"\"Find n such that n * a == b * (the product of the first c integers)\"\"\"\n    prod = 1\n    for i in range(1, c+1):\n        prod *= i\n    return n * a == b * prod\ndef g(a=5, b=7, c=15):\n    prod = 1\n    for i in range(1, c+1):\n        prod *= i\n    return prod // a * b\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 227,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=5, b=7, c=15) -> bool:\n    \"\"\"Find n such that n * a == b * (the product of the first c integers)\"\"\"\n    prod = 1\n    for i in range(1, c+1):\n        prod *= i\n    return n * a == b * prod",
        "solution_func": "def g(a=5, b=7, c=15):\n    prod = 1\n    for i in range(1, c+1):\n        prod *= i\n    return prod // a * b",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(names: List[str], target_length=7) -> bool:\n    \"\"\"Find a name in the list that has the target length\"\"\"\n    for name in names:\n        if len(name) == target_length:\n            return True\n    return False\n\ndef g(target_length=7):\n    return ['Emma', 'Olivia', 'Sophia', 'Ava', 'Isabella', 'Mia', 'Charlotte', 'Amelia', 'Harper']\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 227,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(names: List[str], target_length=7) -> bool:\n    \"\"\"Find a name in the list that has the target length\"\"\"\n    for name in names:\n        if len(name) == target_length:\n            return True\n    return False",
        "solution_func": "def g(target_length=7):\n    return ['Emma', 'Olivia', 'Sophia', 'Ava', 'Isabella', 'Mia', 'Charlotte', 'Amelia', 'Harper']",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_value=5) -> bool:\n    \"\"\"Find a value in the matrix that matches the target value\"\"\"\n    for row in matrix:\n        if target_value in row:\n            return True\n    return False\n\ndef g(target_value=5):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 227,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_value=5) -> bool:\n    \"\"\"Find a value in the matrix that matches the target value\"\"\"\n    for row in matrix:\n        if target_value in row:\n            return True\n    return False",
        "solution_func": "def g(target_value=5):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(emails: List[str], target_domain='example.com') -> bool:\n    \"\"\"Find an email in the list that belongs to the target domain\"\"\"\n    for email in emails:\n        if target_domain in email:\n            return True\n    return False\n\ndef g(target_domain='example.com'):\n    return ['john.doe@example.com', 'jane.smith@example.com', 'alexander.brown@gmail.com']\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 227,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(emails: List[str], target_domain='example.com') -> bool:\n    \"\"\"Find an email in the list that belongs to the target domain\"\"\"\n    for email in emails:\n        if target_domain in email:\n            return True\n    return False",
        "solution_func": "def g(target_domain='example.com'):\n    return ['john.doe@example.com', 'jane.smith@example.com', 'alexander.brown@gmail.com']",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers and a target number, find if there exists a subset of the list that sums up to the target number.\"\"\"\n    return any(sum(comb) == target for i in range(len(nums)+1) for comb in itertools.combinations(nums, i))\n    \ndef g():\n    return [1, 2, 3, 4, 5], 9\n\nassert f(*g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 227,
        "target_skills": null,
        "problem_func": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers and a target number, find if there exists a subset of the list that sums up to the target number.\"\"\"\n    return any(sum(comb) == target for i in range(len(nums)+1) for comb in itertools.combinations(nums, i))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5], 9",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(arr: List[int], target=5) -> bool:\n    \"\"\"Check if there exist three numbers in the list whose sum is equal to the target value.\"\"\"\n    return any(target - x - y in arr for x in arr for y in arr)\ndef g(target=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 228,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\ndef f(arr: List[int], target=5) -> bool:\n    \"\"\"Check if there exist three numbers in the list whose sum is equal to the target value.\"\"\"\n    return any(target - x - y in arr for x in arr for y in arr)",
        "solution_func": "def g(target=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose difference is equal to the target value.\"\"\"\n    return any(x - y == target for x in arr for y in arr)\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 228,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose difference is equal to the target value.\"\"\"\n    return any(x - y == target for x in arr for y in arr)",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exist three numbers in the list whose product is equal to the target value.\"\"\"\n    return any(x * y * z == target for x in arr for y in arr for z in arr)\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 228,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exist three numbers in the list whose product is equal to the target value.\"\"\"\n    return any(x * y * z == target for x in arr for y in arr for z in arr)",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Check if there exists a subarray of numbers in the list whose sum is equal to the target.\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False\n\ndef g(target=12):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 228,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Check if there exists a subarray of numbers in the list whose sum is equal to the target.\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False",
        "solution_func": "def g(target=12):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(items: List[str], target='apple') -> bool:\n    \"\"\"Check if the target item exists in the given list.\"\"\"\n    return target in items\n\ndef g(target='apple'):\n    return ['banana', 'orange', 'apple', 'grape']\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 228,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(items: List[str], target='apple') -> bool:\n    \"\"\"Check if the target item exists in the given list.\"\"\"\n    return target in items",
        "solution_func": "def g(target='apple'):\n    return ['banana', 'orange', 'apple', 'grape']",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the matrix whose sum is equal to the target.\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    for i in range(m):\n        for j in range(n):\n            for k in range(i, m):\n                for l in range(n):\n                    if matrix[i][j] + matrix[k][l] == target:\n                        return True\n    return False\n\ndef g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 228,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the matrix whose sum is equal to the target.\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    for i in range(m):\n        for j in range(n):\n            for k in range(i, m):\n                for l in range(n):\n                    if matrix[i][j] + matrix[k][l] == target:\n                        return True\n    return False",
        "solution_func": "def g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(s: List[str], n=4, m=2) -> bool:\n    \"\"\"Find a list of n strings, each of length m, such that their concatenation forms s\"\"\"\n    return len(s) == n and all([len(x) == m for x in s]) and ''.join(s) == ''.join([chr(ord('A') + i) * m for i in range(n)])\ndef g(n=4, m=2):\n    return [chr(ord('A') + i) * m for i in range(n)]\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 228,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import *\ndef f(s: List[str], n=4, m=2) -> bool:\n    \"\"\"Find a list of n strings, each of length m, such that their concatenation forms s\"\"\"\n    return len(s) == n and all([len(x) == m for x in s]) and ''.join(s) == ''.join([chr(ord('A') + i) * m for i in range(n)])",
        "solution_func": "def g(n=4, m=2):\n    return [chr(ord('A') + i) * m for i in range(n)]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(s: List[str], n=2, m=4) -> bool:\n    \"\"\"Find a list of n strings, each of length m, such that their concatenation forms s\"\"\"\n    return len(s) == n and all([len(x) == m for x in s]) and ''.join(s) == ''.join([chr(ord('A') + i) * m for i in range(n)])\ndef g(n=2, m=4):\n    return [chr(ord('A') + i) * m for i in range(n)]\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 228,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import *\ndef f(s: List[str], n=2, m=4) -> bool:\n    \"\"\"Find a list of n strings, each of length m, such that their concatenation forms s\"\"\"\n    return len(s) == n and all([len(x) == m for x in s]) and ''.join(s) == ''.join([chr(ord('A') + i) * m for i in range(n)])",
        "solution_func": "def g(n=2, m=4):\n    return [chr(ord('A') + i) * m for i in range(n)]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(s: List[str], n=3, m=3) -> bool:\n    \"\"\"Find a list of n strings, each of length m, such that their concatenation forms s\"\"\"\n    return len(s) == n and all([len(x) == m for x in s]) and ''.join(s) == ''.join([chr(ord('A') + i) * m for i in range(n)])\ndef g(n=3, m=3):\n    return [chr(ord('A') + i) * m for i in range(n)]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 228,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import *\ndef f(s: List[str], n=3, m=3) -> bool:\n    \"\"\"Find a list of n strings, each of length m, such that their concatenation forms s\"\"\"\n    return len(s) == n and all([len(x) == m for x in s]) and ''.join(s) == ''.join([chr(ord('A') + i) * m for i in range(n)])",
        "solution_func": "def g(n=3, m=3):\n    return [chr(ord('A') + i) * m for i in range(n)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g():\n    return [23, 45, 12, 67, 89, 34, 56]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 228,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g():\n    return [23, 45, 12, 67, 89, 34, 56]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/3.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 1/3) ** 2 <= year_len\ndef g(year_len=365):\n    n = 1\n    distinct_prob = 1.0\n    best = (1/3, 1)\n    while distinct_prob > 1/3:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(1/3 - distinct_prob), n))\n    return best[1]\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 229,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/3.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 1/3) ** 2 <= year_len",
        "solution_func": "def g(year_len=365):\n    n = 1\n    distinct_prob = 1.0\n    best = (1/3, 1)\n    while distinct_prob > 1/3:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(1/3 - distinct_prob), n))\n    return best[1]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/4.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 1/4) ** 2 <= year_len\ndef g(year_len=365):\n    n = 1\n    distinct_prob = 1.0\n    best = (1/4, 1)\n    while distinct_prob > 1/4:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(1/4 - distinct_prob), n))\n    return best[1]\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 229,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/4.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 1/4) ** 2 <= year_len",
        "solution_func": "def g(year_len=365):\n    n = 1\n    distinct_prob = 1.0\n    best = (1/4, 1)\n    while distinct_prob > 1/4:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(1/4 - distinct_prob), n))\n    return best[1]",
        "map_ix": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/6.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 1/6) ** 2 <= year_len\ndef g(year_len=365):\n    n = 1\n    distinct_prob = 1.0\n    best = (1/6, 1)\n    while distinct_prob > 1/6:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(1/6 - distinct_prob), n))\n    return best[1]\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 229,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/6.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 1/6) ** 2 <= year_len",
        "solution_func": "def g(year_len=365):\n    n = 1\n    distinct_prob = 1.0\n    best = (1/6, 1)\n    while distinct_prob > 1/6:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(1/6 - distinct_prob), n))\n    return best[1]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in a list that add up to the target value\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 229,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in a list that add up to the target value\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string is a palindrome when reversed and concatenated to itself n times\"\"\"\n    return s[::-1] + s == s * n\ndef g(n=3):\n    return \"racecar\"\nassert f(g())\n",
        "emb": null,
        "idx_generation": 229,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string is a palindrome when reversed and concatenated to itself n times\"\"\"\n    return s[::-1] + s == s * n",
        "solution_func": "def g(n=3):\n    return \"racecar\"",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there are three numbers in a list that sum up to the target value\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g(target=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 229,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there are three numbers in a list that sum up to the target value\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))",
        "solution_func": "def g(target=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, strings=['hello', 'world', 'python', 'programming', 'puzzles', 'challenge', 'solution']) -> bool:\n    \"\"\"Check if the given string s is a substring of any string in the list.\"\"\"\n    return any(s in string for string in strings)\n\ndef g(strings=['hello', 'world', 'python', 'programming', 'puzzles', 'challenge', 'solution']):\n    return strings[0] + ' ' + strings[1]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 229,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, strings=['hello', 'world', 'python', 'programming', 'puzzles', 'challenge', 'solution']) -> bool:\n    \"\"\"Check if the given string s is a substring of any string in the list.\"\"\"\n    return any(s in string for string in strings)",
        "solution_func": "def g(strings=['hello', 'world', 'python', 'programming', 'puzzles', 'challenge', 'solution']):\n    return strings[0] + ' ' + strings[1]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(l: List[int]) -> bool:\n    \"\"\"Check if the given list l contains at least 3 consecutive odd numbers.\"\"\"\n    return any(l[i] % 2 != 0 and l[i+1] % 2 != 0 and l[i+2] % 2 != 0 for i in range(len(l)-2))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 229,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(l: List[int]) -> bool:\n    \"\"\"Check if the given list l contains at least 3 consecutive odd numbers.\"\"\"\n    return any(l[i] % 2 != 0 and l[i+1] % 2 != 0 and l[i+2] % 2 != 0 for i in range(len(l)-2))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if the given string s starts with any string in the list.\"\"\"\n    return any(s.startswith(string) for string in strings)\n\ndef g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return strings[-1]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 229,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if the given string s starts with any string in the list.\"\"\"\n    return any(s.startswith(string) for string in strings)",
        "solution_func": "def g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return strings[-1]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Find a row in the matrix where the sum of the elements is equal to the product of the elements.\"\"\"\n    for row in matrix:\n        if sum(row) == 1:\n            return True\n    return False\n\ndef g():\n    return [[1, 1, 1], [2, 2, 2], [3, 3, 3]]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 229,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Find a row in the matrix where the sum of the elements is equal to the product of the elements.\"\"\"\n    for row in matrix:\n        if sum(row) == 1:\n            return True\n    return False",
        "solution_func": "def g():\n    return [[1, 1, 1], [2, 2, 2], [3, 3, 3]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Check if there is a pair of numbers in the array that multiply to the target\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] * arr[j] == target:\n                return True\n    return False\n\ndef g(target=20):\n    return [2, 4, 5, 10]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 230,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Check if there is a pair of numbers in the array that multiply to the target\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] * arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=20):\n    return [2, 4, 5, 10]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=30) -> bool:\n    \"\"\"Check if there is a pair of numbers in the matrix that sum up to the target\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i, rows):\n                for l in range(cols):\n                    if matrix[i][j] + matrix[k][l] == target:\n                        return True\n    return False\n\ndef g(target=30):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 230,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=30) -> bool:\n    \"\"\"Check if there is a pair of numbers in the matrix that sum up to the target\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i, rows):\n                for l in range(cols):\n                    if matrix[i][j] + matrix[k][l] == target:\n                        return True\n    return False",
        "solution_func": "def g(target=30):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=15) -> bool:\n    \"\"\"Check if there is a triplet of numbers in the array that sum up to the target\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 230,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=15) -> bool:\n    \"\"\"Check if there is a triplet of numbers in the array that sum up to the target\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6], 9\n\nassert f(*g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 230,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6], 9",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the array contains any duplicate elements.\"\"\"\n    return len(arr) != len(set(arr))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 230,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the array contains any duplicate elements.\"\"\"\n    return len(arr) != len(set(arr))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the array is sorted in non-decreasing order.\"\"\"\n    return arr == sorted(arr)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 230,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the array is sorted in non-decreasing order.\"\"\"\n    return arr == sorted(arr)",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: List[int], a=0, b=0, c=0, d=0) -> bool:\n    \"\"\"Check if a point lies on a specific line.\nSolution should be a tuple of the (x,y) coordinates.\nThe equation of the line is: ax + by + c = 0\"\"\"\n    x, y = e\n    return a*x + b*y + c == 0\ndef g(a=4, b=5, c=10):\n    return [a, b]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 230,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(e: List[int], a=0, b=0, c=0, d=0) -> bool:\n    \"\"\"Check if a point lies on a specific line.\nSolution should be a tuple of the (x,y) coordinates.\nThe equation of the line is: ax + by + c = 0\"\"\"\n    x, y = e\n    return a*x + b*y + c == 0",
        "solution_func": "def g(a=4, b=5, c=10):\n    return [a, b]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: List[int], a=0, b=0, c=0, d=0) -> bool:\n    \"\"\"Check if a point lies on a specific line.\nSolution should be a tuple of the (x,y) coordinates.\nThe equation of the line is: ax + by + c = 0\"\"\"\n    x, y = e\n    return a*x + b*y + c == 0\ndef g(a=1, b=2, c=3):\n    return [a, b]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 230,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(e: List[int], a=0, b=0, c=0, d=0) -> bool:\n    \"\"\"Check if a point lies on a specific line.\nSolution should be a tuple of the (x,y) coordinates.\nThe equation of the line is: ax + by + c = 0\"\"\"\n    x, y = e\n    return a*x + b*y + c == 0",
        "solution_func": "def g(a=1, b=2, c=3):\n    return [a, b]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: List[int], a=0, b=0, c=0, d=0) -> bool:\n    \"\"\"Check if a point lies on a specific line.\nSolution should be a tuple of the (x,y) coordinates.\nThe equation of the line is: ax + by + c = 0\"\"\"\n    x, y = e\n    return a*x + b*y + c == 0\ndef g(a=7, b=8, c=9):\n    return [a, b]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 230,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(e: List[int], a=0, b=0, c=0, d=0) -> bool:\n    \"\"\"Check if a point lies on a specific line.\nSolution should be a tuple of the (x,y) coordinates.\nThe equation of the line is: ax + by + c = 0\"\"\"\n    x, y = e\n    return a*x + b*y + c == 0",
        "solution_func": "def g(a=7, b=8, c=9):\n    return [a, b]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m=15) -> bool:\n    \"\"\"Check if the given number is divisible by m and is also a prime number.\"\"\"\n    if n % m == 0:\n        return False\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(m=15):\n    return m**2 + 1\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 230,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=15) -> bool:\n    \"\"\"Check if the given number is divisible by m and is also a prime number.\"\"\"\n    if n % m == 0:\n        return False\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g(m=15):\n    return m**2 + 1",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(squares: List[List[int]], m=10, n=10) -> bool:\n    \"\"\"Position min(m, n) <= 10 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 3 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m=10, n=10):\n    k = min(m, n)\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 3 * k == len({t for (i, j) in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for (i, j) in enumerate(p)]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 231,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(squares: List[List[int]], m=10, n=10) -> bool:\n    \"\"\"Position min(m, n) <= 10 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 3 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})",
        "solution_func": "def g(m=10, n=10):\n    k = min(m, n)\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 3 * k == len({t for (i, j) in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for (i, j) in enumerate(p)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(squares: List[List[int]], m=6, n=6) -> bool:\n    \"\"\"Position min(m, n) <= 6 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 5 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m=6, n=6):\n    k = min(m, n)\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 5 * k == len({t for (i, j) in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for (i, j) in enumerate(p)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 231,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(squares: List[List[int]], m=6, n=6) -> bool:\n    \"\"\"Position min(m, n) <= 6 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 5 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})",
        "solution_func": "def g(m=6, n=6):\n    k = min(m, n)\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 5 * k == len({t for (i, j) in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for (i, j) in enumerate(p)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(squares: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Position min(m, n) <= 5 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 2 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m=5, n=5):\n    k = min(m, n)\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 2 * k == len({t for (i, j) in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for (i, j) in enumerate(p)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 231,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(squares: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Position min(m, n) <= 5 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 2 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})",
        "solution_func": "def g(m=5, n=5):\n    k = min(m, n)\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 2 * k == len({t for (i, j) in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for (i, j) in enumerate(p)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=20) -> bool:\n    \"\"\"Find three numbers from the list that add up to the target_sum\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target_sum:\n                    return True\n    return False\ndef g(nums: List[int]):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 231,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=20) -> bool:\n    \"\"\"Find three numbers from the list that add up to the target_sum\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target_sum:\n                    return True\n    return False",
        "solution_func": "def g(nums: List[int]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target_product=120) -> bool:\n    \"\"\"Find two numbers from the list that multiply to the target_product\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target_product:\n                return True\n    return False\ndef g(nums: List[int]):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 231,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_product=120) -> bool:\n    \"\"\"Find two numbers from the list that multiply to the target_product\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target_product:\n                return True\n    return False",
        "solution_func": "def g(nums: List[int]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find two numbers from the list that add up to the target\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\ndef g(nums: List[int], target: int):\n    return nums, target\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 231,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find two numbers from the list that add up to the target\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False",
        "solution_func": "def g(nums: List[int], target: int):\n    return nums, target",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target_sum\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 231,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target_sum\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if the target number exists in the given matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=10):\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 231,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if the target number exists in the given matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(target=10):\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], target_length=5) -> bool:\n    \"\"\"Check if there exists a name in the list with a length greater than or equal to the target_length\"\"\"\n    for name in names:\n        if len(name) >= target_length:\n            return True\n    return False\n\ndef g(target_length=5):\n    return ['John', 'Sarah', 'Michael', 'Amy']\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 231,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(names: List[str], target_length=5) -> bool:\n    \"\"\"Check if there exists a name in the list with a length greater than or equal to the target_length\"\"\"\n    for name in names:\n        if len(name) >= target_length:\n            return True\n    return False",
        "solution_func": "def g(target_length=5):\n    return ['John', 'Sarah', 'Michael', 'Amy']",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 231,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there is a pair of numbers in nums that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    nums = [-2, -1, 0, 1, 2, 3, 4, 5]\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 232,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there is a pair of numbers in nums that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    nums = [-2, -1, 0, 1, 2, 3, 4, 5]\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], prefix='Mr.') -> bool:\n    \"\"\"Check if all names in a list start with a given prefix.\"\"\"\n    return all(name.startswith(prefix) for name in names)\n\ndef g():\n    names = ['Mr. John', 'Mr. Smith', 'Mr. David', 'Mr. Michael']\n    return names\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 232,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(names: List[str], prefix='Mr.') -> bool:\n    \"\"\"Check if all names in a list start with a given prefix.\"\"\"\n    return all(name.startswith(prefix) for name in names)",
        "solution_func": "def g():\n    names = ['Mr. John', 'Mr. Smith', 'Mr. David', 'Mr. Michael']\n    return names",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if there is a pair of numbers in numbers that subtracts to the target.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] - numbers[j] == target:\n                return True\n    return False\n\ndef g(target=100):\n    numbers = [200, 150, 100, 50, 0, -50, -100, -150]\n    return numbers\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 232,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if there is a pair of numbers in numbers that subtracts to the target.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] - numbers[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=100):\n    numbers = [200, 150, 100, 50, 0, -50, -100, -150]\n    return numbers",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(points: List[Tuple[int, int]], target_len=5) -> bool:\n    \"\"\"Check if the points form a square with sides greater than or equal to 5 units.\nThe square is formed by the given points, each represented as a tuple of (x, y) coordinates.\"\"\"\n    assert len(points) == 4, \"Exactly 4 points are required to form a square.\"\n    x_coords = [point[0] for point in points]\n    y_coords = [point[1] for point in points]\n    min_x = min(x_coords)\n    max_x = max(x_coords)\n    min_y = min(y_coords)\n    max_y = max(y_coords)\n    width = max_x - min_x\n    height = max_y - min_y\n    return width >= 5 and height >= 5 and len(set(points)) == 4\ndef g():\n    return [(0, 0), (0, 5), (5, 5), (5, 0)]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 232,
        "target_skills": null,
        "problem_func": "from typing import*\n\ndef f(points: List[Tuple[int, int]], target_len=5) -> bool:\n    \"\"\"Check if the points form a square with sides greater than or equal to 5 units.\nThe square is formed by the given points, each represented as a tuple of (x, y) coordinates.\"\"\"\n    assert len(points) == 4, \"Exactly 4 points are required to form a square.\"\n    x_coords = [point[0] for point in points]\n    y_coords = [point[1] for point in points]\n    min_x = min(x_coords)\n    max_x = max(x_coords)\n    min_y = min(y_coords)\n    max_y = max(y_coords)\n    width = max_x - min_x\n    height = max_y - min_y\n    return width >= 5 and height >= 5 and len(set(points)) == 4",
        "solution_func": "def g():\n    return [(0, 0), (0, 5), (5, 5), (5, 0)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(points: List[Tuple[int, int]], target_len=5) -> bool:\n    \"\"\"Check if the points form a triangle with an area greater than or equal to 10 square units.\nThe triangle is formed by the given points, each represented as a tuple of (x, y) coordinates.\"\"\"\n    assert len(points) == 3, \"Exactly 3 points are required to form a triangle.\"\n    x_coords = [point[0] for point in points]\n    y_coords = [point[1] for point in points]\n    min_x = min(x_coords)\n    max_x = max(x_coords)\n    min_y = min(y_coords)\n    max_y = max(y_coords)\n    width = max_x - min_x\n    height = max_y - min_y\n    area = width * height / 2\n    return area >= 10 and len(set(points)) == 3\ndef g():\n    return [(0, 0), (0, 6), (8, 0)]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 232,
        "target_skills": null,
        "problem_func": "from typing import*\n\ndef f(points: List[Tuple[int, int]], target_len=5) -> bool:\n    \"\"\"Check if the points form a triangle with an area greater than or equal to 10 square units.\nThe triangle is formed by the given points, each represented as a tuple of (x, y) coordinates.\"\"\"\n    assert len(points) == 3, \"Exactly 3 points are required to form a triangle.\"\n    x_coords = [point[0] for point in points]\n    y_coords = [point[1] for point in points]\n    min_x = min(x_coords)\n    max_x = max(x_coords)\n    min_y = min(y_coords)\n    max_y = max(y_coords)\n    width = max_x - min_x\n    height = max_y - min_y\n    area = width * height / 2\n    return area >= 10 and len(set(points)) == 3",
        "solution_func": "def g():\n    return [(0, 0), (0, 6), (8, 0)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(points: List[Tuple[int, int]], target_len=5) -> bool:\n    \"\"\"Check if the points form a parallelogram with an area greater than or equal to 20 square units.\nThe parallelogram is formed by the given points, each represented as a tuple of (x, y) coordinates.\"\"\"\n    assert len(points) == 4, \"Exactly 4 points are required to form a parallelogram.\"\n    x_coords = [point[0] for point in points]\n    y_coords = [point[1] for point in points]\n    min_x = min(x_coords)\n    max_x = max(x_coords)\n    min_y = min(y_coords)\n    max_y = max(y_coords)\n    width = max_x - min_x\n    height = max_y - min_y\n    area = width * height\n    return area >= 20 and len(set(points)) == 4\ndef g():\n    return [(0, 0), (0, 4), (6, 4), (6, 0)]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 232,
        "target_skills": null,
        "problem_func": "from typing import*\n\ndef f(points: List[Tuple[int, int]], target_len=5) -> bool:\n    \"\"\"Check if the points form a parallelogram with an area greater than or equal to 20 square units.\nThe parallelogram is formed by the given points, each represented as a tuple of (x, y) coordinates.\"\"\"\n    assert len(points) == 4, \"Exactly 4 points are required to form a parallelogram.\"\n    x_coords = [point[0] for point in points]\n    y_coords = [point[1] for point in points]\n    min_x = min(x_coords)\n    max_x = max(x_coords)\n    min_y = min(y_coords)\n    max_y = max(y_coords)\n    width = max_x - min_x\n    height = max_y - min_y\n    area = width * height\n    return area >= 20 and len(set(points)) == 4",
        "solution_func": "def g():\n    return [(0, 0), (0, 4), (6, 4), (6, 0)]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Given a matrix of integers and a target value, determine if the target value is present in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 232,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Given a matrix of integers and a target value, determine if the target value is present in the matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Given a list of numbers, determine if any two numbers in the list sum up to the target value.\"\"\"\n    for i, num1 in enumerate(numbers):\n        for j, num2 in enumerate(numbers[i+1:]):\n            if num1 + num2 == target:\n                return True\n    return False\n\ndef g(target=20):\n    return [10, 5, 3, 8, 12]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 232,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Given a list of numbers, determine if any two numbers in the list sum up to the target value.\"\"\"\n    for i, num1 in enumerate(numbers):\n        for j, num2 in enumerate(numbers[i+1:]):\n            if num1 + num2 == target:\n                return True\n    return False",
        "solution_func": "def g(target=20):\n    return [10, 5, 3, 8, 12]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Given a string and a substring, determine if the substring is present in the string.\"\"\"\n    return substring in string\n\ndef g(substring='abc'):\n    return 'xyzabc123'\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 232,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Given a string and a substring, determine if the substring is present in the string.\"\"\"\n    return substring in string",
        "solution_func": "def g(substring='abc'):\n    return 'xyzabc123'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find if the number n is present in the list nums.\"\"\"\n    return n in nums\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[0]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 232,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find if the number n is present in the list nums.\"\"\"\n    return n in nums",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[0]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find the two numbers in the list that sum up to the target number\"\"\"\n    return sum(nums) == target\ndef g(target: int):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target]\n\nassert f(g(45))\n",
        "emb": null,
        "idx_generation": 233,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find the two numbers in the list that sum up to the target number\"\"\"\n    return sum(nums) == target",
        "solution_func": "def g(target: int):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists three numbers in the list that sum up to the target number\"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target: int):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target\n\nassert f(*g(18))\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 233,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists three numbers in the list that sum up to the target number\"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target: int):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a number in the list that is equal to the target number\"\"\"\n    return target in nums\n\ndef g(target: int):\n    return [1, 3, 5, 7, 9], target\n\nassert f(*g(7))\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 233,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a number in the list that is equal to the target number\"\"\"\n    return target in nums",
        "solution_func": "def g(target: int):\n    return [1, 3, 5, 7, 9], target",
        "map_ix": [
            1,
            1,
            0,
            0,
            1,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=5) -> bool:\n    \"\"\"Check if n is divisible by both a and b, but not their sum.\"\"\"\n    return n % a == 0 and n % b == 0 and n % (a + b) != 0\n\ndef g(a=10, b=5):\n    return a * b\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 233,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=10, b=5) -> bool:\n    \"\"\"Check if n is divisible by both a and b, but not their sum.\"\"\"\n    return n % a == 0 and n % b == 0 and n % (a + b) != 0",
        "solution_func": "def g(a=10, b=5):\n    return a * b",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=16, b=8) -> bool:\n    \"\"\"Check if n is divisible by a, and if the sum of the digits of n is divisible by b.\"\"\"\n    return n % a == 0 and sum(int(digit) for digit in str(n)) % b == 0\n\ndef g(a=16, b=8):\n    return a * b\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 233,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=16, b=8) -> bool:\n    \"\"\"Check if n is divisible by a, and if the sum of the digits of n is divisible by b.\"\"\"\n    return n % a == 0 and sum(int(digit) for digit in str(n)) % b == 0",
        "solution_func": "def g(a=16, b=8):\n    return a * b",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=7, b=9) -> bool:\n    \"\"\"Check if n is divisible by either a or b, but not both.\"\"\"\n    return (n % a == 0 and n % b != 0) or (n % a != 0 and n % b == 0)\n\ndef g(a=7, b=9):\n    return a + b\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 233,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=7, b=9) -> bool:\n    \"\"\"Check if n is divisible by either a or b, but not both.\"\"\"\n    return (n % a == 0 and n % b != 0) or (n % a != 0 and n % b == 0)",
        "solution_func": "def g(a=7, b=9):\n    return a + b",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if the given list contains a pair of numbers whose sum is equal to n.\"\"\"\n    return any(n - x in lst for x in lst)\ndef g(lst: List[int]):\n    return lst\nassert f(g())\n",
        "emb": null,
        "idx_generation": 233,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if the given list contains a pair of numbers whose sum is equal to n.\"\"\"\n    return any(n - x in lst for x in lst)",
        "solution_func": "def g(lst: List[int]):\n    return lst",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if the greatest common divisor of n and m is equal to 1.\"\"\"\n    return math.gcd(n, m) == 1\ndef g(m=3):\n    return 2 if m % 2 == 0 else 1\nassert f(g())\n",
        "emb": null,
        "idx_generation": 233,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\n\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if the greatest common divisor of n and m is equal to 1.\"\"\"\n    return math.gcd(n, m) == 1",
        "solution_func": "def g(m=3):\n    return 2 if m % 2 == 0 else 1",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, lst: List[str]) -> bool:\n    \"\"\"Check if any word in the given list starts and ends with the same character n times.\"\"\"\n    return any(len(word) >= n and word[0] == word[-1] for word in lst)\ndef g(lst: List[str]):\n    return lst\nassert f(g())\n",
        "emb": null,
        "idx_generation": 233,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, lst: List[str]) -> bool:\n    \"\"\"Check if any word in the given list starts and ends with the same character n times.\"\"\"\n    return any(len(word) >= n and word[0] == word[-1] for word in lst)",
        "solution_func": "def g(lst: List[str]):\n    return lst",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a difference less than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if abs(nums[i] - nums[j]) < target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g(), target=2)\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 233,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a difference less than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if abs(nums[i] - nums[j]) < target:\n                return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(seq: List[int], n=100, length=50) -> bool:\n    \"\"\"Check if a sequence of numbers is a palindrome and the sum of the sequence is equal to n\"\"\"\n    return seq == seq[::-1] and sum(seq) == n and len(seq) == length\ndef g(n=100, length=50):\n    return [i % 10 + 1 for i in range(length)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 234,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(seq: List[int], n=100, length=50) -> bool:\n    \"\"\"Check if a sequence of numbers is a palindrome and the sum of the sequence is equal to n\"\"\"\n    return seq == seq[::-1] and sum(seq) == n and len(seq) == length",
        "solution_func": "def g(n=100, length=50):\n    return [i % 10 + 1 for i in range(length)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(seq: List[str], n=10, length=5) -> bool:\n    \"\"\"Check if a sequence of strings has at least one uppercase letter and the length of the sequence is equal to n\"\"\"\n    return any((char.isupper() for string in seq for char in string)) and len(seq) == n\ndef g(n=10, length=5):\n    return ['abcde' for _ in range(n)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 234,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(seq: List[str], n=10, length=5) -> bool:\n    \"\"\"Check if a sequence of strings has at least one uppercase letter and the length of the sequence is equal to n\"\"\"\n    return any((char.isupper() for string in seq for char in string)) and len(seq) == n",
        "solution_func": "def g(n=10, length=5):\n    return ['abcde' for _ in range(n)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(seq: List[int], n=100, length=5) -> bool:\n    \"\"\"Check if a sequence of numbers contains all even numbers and the sum of the sequence is equal to n\"\"\"\n    return all((num % 2 == 0 for num in seq)) and sum(seq) == n and len(seq) == length\ndef g(n=100, length=5):\n    return [2 * i for i in range(length)]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 234,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(seq: List[int], n=100, length=5) -> bool:\n    \"\"\"Check if a sequence of numbers contains all even numbers and the sum of the sequence is equal to n\"\"\"\n    return all((num % 2 == 0 for num in seq)) and sum(seq) == n and len(seq) == length",
        "solution_func": "def g(n=100, length=5):\n    return [2 * i for i in range(length)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the given list is sorted in non-decreasing order.\"\"\"\n    return lst == sorted(lst)\ndef g():\n    return [1, 3, 2, 5, 4]\nassert not f(g())\n\nassert f(g()) == True",
        "emb": null,
        "idx_generation": 234,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the given list is sorted in non-decreasing order.\"\"\"\n    return lst == sorted(lst)",
        "solution_func": "def g():\n    return [1, 3, 2, 5, 4]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the given list that add up to the target number.\"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(target: int):\n    return [2, 4, 6, 8, 10]\nassert f(g(), 12)\n",
        "emb": null,
        "idx_generation": 234,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the given list that add up to the target number.\"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False",
        "solution_func": "def g(target: int):\n    return [2, 4, 6, 8, 10]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are any duplicate numbers in the given list.\"\"\"\n    num_set = set()\n    for num in nums:\n        if num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 5]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 234,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are any duplicate numbers in the given list.\"\"\"\n    num_set = set()\n    for num in nums:\n        if num in num_set:\n            return True\n        num_set.add(num)\n    return False",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 5]",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the sum of all elements in the matrix is equal to the target number.\"\"\"\n    return sum(sum(row) for row in matrix) == target\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 234,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the sum of all elements in the matrix is equal to the target number.\"\"\"\n    return sum(sum(row) for row in matrix) == target",
        "solution_func": "def g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if all elements in the matrix are divisible by the target number.\"\"\"\n    return all(all(element % target == 0 for element in row) for row in matrix)\ndef g(target=0):\n    return [[0, 0, 0], [0, 0, 0], [0, 0, 0]]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 234,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if all elements in the matrix are divisible by the target number.\"\"\"\n    return all(all(element % target == 0 for element in row) for row in matrix)",
        "solution_func": "def g(target=0):\n    return [[0, 0, 0], [0, 0, 0], [0, 0, 0]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the matrix is symmetric.\"\"\"\n    return (np.array(matrix) == np.array(matrix).T).all()\ndef g(target=0):\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 234,
        "target_skills": null,
        "problem_func": "from typing import*\nimport numpy as np\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the matrix is symmetric.\"\"\"\n    return (np.array(matrix) == np.array(matrix).T).all()",
        "solution_func": "def g(target=0):\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]",
        "map_ix": [
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(target=0):\n    return [0, 0, 0, 0, 0]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 234,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False",
        "solution_func": "def g(target=0):\n    return [0, 0, 0, 0, 0]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose sum is equal to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 9)\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 235,
        "target_skills": null,
        "problem_func": "from typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose sum is equal to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(names: List[str]) -> bool:\n    \"\"\"Check if all names in the list start with the same letter.\"\"\"\n    first_letter = names[0][0]\n    for name in names:\n        if name[0] != first_letter:\n            return False\n    return True\n\ndef g():\n    return [\"Alice\", \"Adam\", \"Alex\"]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 235,
        "target_skills": null,
        "problem_func": "from typing import*\n\ndef f(names: List[str]) -> bool:\n    \"\"\"Check if all names in the list start with the same letter.\"\"\"\n    first_letter = names[0][0]\n    for name in names:\n        if name[0] != first_letter:\n            return False\n    return True",
        "solution_func": "def g():\n    return [\"Alice\", \"Adam\", \"Alex\"]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the sum of each row in the matrix is equal to the sum of each column.\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return row_sums == col_sums\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 235,
        "target_skills": null,
        "problem_func": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the sum of each row in the matrix is equal to the sum of each column.\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return row_sums == col_sums",
        "solution_func": "def g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [5, 7, 8, 10, 12]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 235,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g():\n    return [5, 7, 8, 10, 12]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(string: str, char='a') -> bool:\n    \"\"\"Check if the given character is present in the string.\"\"\"\n    return char in string\n\ndef g(char='a'):\n    return \"Hello World!\"\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 235,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, char='a') -> bool:\n    \"\"\"Check if the given character is present in the string.\"\"\"\n    return char in string",
        "solution_func": "def g(char='a'):\n    return \"Hello World!\"",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 235,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g():\n    return [10, 20, 30, 40, 50]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if there exists a submatrix whose sum is equal to the target number\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    for r1 in range(rows):\n        for r2 in range(r1, rows):\n            for c1 in range(cols):\n                for c2 in range(c1, cols):\n                    submatrix_sum = 0\n                    for i in range(r1, r2+1):\n                        for j in range(c1, c2+1):\n                            submatrix_sum += matrix[i][j]\n                    if submatrix_sum == target:\n                        return True\n    return False\n\ndef g(target=20):\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 235,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if there exists a submatrix whose sum is equal to the target number\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    for r1 in range(rows):\n        for r2 in range(r1, rows):\n            for c1 in range(cols):\n                for c2 in range(c1, cols):\n                    submatrix_sum = 0\n                    for i in range(r1, r2+1):\n                        for j in range(c1, c2+1):\n                            submatrix_sum += matrix[i][j]\n                    if submatrix_sum == target:\n                        return True\n    return False",
        "solution_func": "def g(target=20):\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=5):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 235,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=5):\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=3) -> bool:\n    \"\"\"Check if there exists a substring of length 'target' that consists of only vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    for i in range(len(s)-target+1):\n        substring = s[i:i+target]\n        if all(char in vowels for char in substring):\n            return True\n    return False\n\ndef g(target=3):\n    return \"aeiou\"\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 235,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, target=3) -> bool:\n    \"\"\"Check if there exists a substring of length 'target' that consists of only vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    for i in range(len(s)-target+1):\n        substring = s[i:i+target]\n        if all(char in vowels for char in substring):\n            return True\n    return False",
        "solution_func": "def g(target=3):\n    return \"aeiou\"",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find the pair of distinct integers from the given list that sum up to 20.\"\"\"\n    return any((nums[i] + nums[j] == 20 for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g():\n    return [5, 10, 15, 20, 25]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 235,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find the pair of distinct integers from the given list that sum up to 20.\"\"\"\n    return any((nums[i] + nums[j] == 20 for i in range(len(nums)) for j in range(i+1, len(nums))))",
        "solution_func": "def g():\n    return [5, 10, 15, 20, 25]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find whether the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target]]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 236,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find whether the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target]]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Find whether the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=15):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target]]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 236,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Find whether the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(target=15):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target]]",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=25) -> bool:\n    \"\"\"Find whether the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=25):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target]]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 236,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=25) -> bool:\n    \"\"\"Find whether the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(target=25):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target]]",
        "map_ix": [
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=16) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the matrix whose product is equal to the target.\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    for i in range(m):\n        for j in range(n):\n            for k in range(i, m):\n                for l in range(n):\n                    if matrix[i][j] * matrix[k][l] == target:\n                        return True\n    return False\n\ndef g(target=16):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 236,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=16) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the matrix whose product is equal to the target.\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    for i in range(m):\n        for j in range(n):\n            for k in range(i, m):\n                for l in range(n):\n                    if matrix[i][j] * matrix[k][l] == target:\n                        return True\n    return False",
        "solution_func": "def g(target=16):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], target=15) -> bool:\n    \"\"\"Check if there exists a combination of n numbers in the list that sum up to the target.\"\"\"\n    import itertools\n    combinations = itertools.combinations(nums, n)\n    for c in combinations:\n        if sum(c) == target:\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], target=15):\n    return len(nums)\n\nassert f(g())\n\n",
        "emb": null,
        "idx_generation": 236,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], target=15) -> bool:\n    \"\"\"Check if there exists a combination of n numbers in the list that sum up to the target.\"\"\"\n    import itertools\n    combinations = itertools.combinations(nums, n)\n    for c in combinations:\n        if sum(c) == target:\n            return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], target=15):\n    return len(nums)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], target=50) -> bool:\n    \"\"\"Check if there exists a combination of n numbers in the list that multiply to the target.\"\"\"\n    import itertools\n    combinations = itertools.combinations(nums, n)\n    for c in combinations:\n        product = 1\n        for num in c:\n            product *= num\n        if product == target:\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], target=50):\n    return len(nums)\n\nassert f(g())\n\n",
        "emb": null,
        "idx_generation": 236,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], target=50) -> bool:\n    \"\"\"Check if there exists a combination of n numbers in the list that multiply to the target.\"\"\"\n    import itertools\n    combinations = itertools.combinations(nums, n)\n    for c in combinations:\n        product = 1\n        for num in c:\n            product *= num\n        if product == target:\n            return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], target=50):\n    return len(nums)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiply to the target value.\"\"\"\n    return any(target % num == 0 and target // num in nums for num in nums)\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 236,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiply to the target value.\"\"\"\n    return any(target % num == 0 and target // num in nums for num in nums)",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that have a difference of the target value.\"\"\"\n    return any(abs(num1 - num2) == target for i, num1 in enumerate(nums) for num2 in nums[i+1:])\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 236,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that have a difference of the target value.\"\"\"\n    return any(abs(num1 - num2) == target for i, num1 in enumerate(nums) for num2 in nums[i+1:])",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that have a product greater than the target value.\"\"\"\n    return any(num1 * num2 > target for i, num1 in enumerate(nums) for num2 in nums[i+1:])\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 236,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that have a product greater than the target value.\"\"\"\n    return any(num1 * num2 > target for i, num1 in enumerate(nums) for num2 in nums[i+1:])",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(n: int, a=3, b=4, c=6) -> bool:\n    \"\"\"Find n such that n + a is equal to the product of the first c integers multiplied by b\"\"\"\n    return n + a == b * math.prod(range(1, c+1))\ndef g(a=3, b=4, c=6):\n    return b * math.prod(range(1, c+1)) - a\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 236,
        "target_skills": null,
        "problem_func": "import math\nfrom typing import*\ndef f(n: int, a=3, b=4, c=6) -> bool:\n    \"\"\"Find n such that n + a is equal to the product of the first c integers multiplied by b\"\"\"\n    return n + a == b * math.prod(range(1, c+1))",
        "solution_func": "def g(a=3, b=4, c=6):\n    return b * math.prod(range(1, c+1)) - a",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if all numbers in the list are even.\"\"\"\n    for num in numbers:\n        if num % 2 != 0:\n            return False\n    return True\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 237,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if all numbers in the list are even.\"\"\"\n    for num in numbers:\n        if num % 2 != 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return [2, 4, 6, 8, 10]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    \"\"\"Check if all words in the list have the same number of characters.\"\"\"\n    length = len(words[0])\n    for word in words:\n        if len(word) != length:\n            return False\n    return True\n\ndef g():\n    return [\"apple\", \"banana\", \"cherry\"]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 237,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    \"\"\"Check if all words in the list have the same number of characters.\"\"\"\n    length = len(words[0])\n    for word in words:\n        if len(word) != length:\n            return False\n    return True",
        "solution_func": "def g():\n    return [\"apple\", \"banana\", \"cherry\"]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if all numbers in the list are positive.\"\"\"\n    for num in nums:\n        if num <= 0:\n            return False\n    return True\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 237,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if all numbers in the list are positive.\"\"\"\n    for num in nums:\n        if num <= 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a sum greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] > target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g(), target=2)\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 237,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a sum greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] > target:\n                return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a difference less than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if abs(nums[i] - nums[j]) < target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g(), target=2)\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 237,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a difference less than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if abs(nums[i] - nums[j]) < target:\n                return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find three numbers in the list 'nums' that have a difference greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if abs(nums[i] - nums[j]) > target and abs(nums[j] - nums[k]) > target and abs(nums[i] - nums[k]) > target:\n                    return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g(), target=2)\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 237,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find three numbers in the list 'nums' that have a difference greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if abs(nums[i] - nums[j]) > target and abs(nums[j] - nums[k]) > target and abs(nums[i] - nums[k]) > target:\n                    return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(words: List[str], suffix=\"y\") -> bool:\n    \"\"\"Check if any word in the list ends with the given suffix.\"\"\"\n    return any(word.endswith(suffix) for word in words)\n\ndef g(words=[\"sky\", \"cloudy\", \"rainy\", \"sunny\"]):\n    return words\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 237,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\nfrom typing import List\n\ndef f(words: List[str], suffix=\"y\") -> bool:\n    \"\"\"Check if any word in the list ends with the given suffix.\"\"\"\n    return any(word.endswith(suffix) for word in words)",
        "solution_func": "def g(words=[\"sky\", \"cloudy\", \"rainy\", \"sunny\"]):\n    return words",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(words: List[str], length=4) -> bool:\n    \"\"\"Check if any word in the list has a length greater than or equal to the given length.\"\"\"\n    return any(len(word) >= length for word in words)\n\ndef g(words=[\"apple\", \"banana\", \"cherry\", \"date\"]):\n    return words\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 237,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\nfrom typing import List\n\ndef f(words: List[str], length=4) -> bool:\n    \"\"\"Check if any word in the list has a length greater than or equal to the given length.\"\"\"\n    return any(len(word) >= length for word in words)",
        "solution_func": "def g(words=[\"apple\", \"banana\", \"cherry\", \"date\"]):\n    return words",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(words: List[str], target=\"moon\") -> bool:\n    \"\"\"Check if the target word is present in the list.\"\"\"\n    return target in words\n\ndef g(words=[\"sun\", \"moon\", \"star\", \"sky\"]):\n    return words\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 237,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\nfrom typing import List\n\ndef f(words: List[str], target=\"moon\") -> bool:\n    \"\"\"Check if the target word is present in the list.\"\"\"\n    return target in words",
        "solution_func": "def g(words=[\"sun\", \"moon\", \"star\", \"sky\"]):\n    return words",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there is a subset of numbers from the list that adds up to zero\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, 0)\ndef g(nums=[-1, 2, -3, 4, -5]):\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 237,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there is a subset of numbers from the list that adds up to zero\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, 0)",
        "solution_func": "def g(nums=[-1, 2, -3, 4, -5]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10) -> bool:\n    \"\"\"Check if the number is divisible by a\"\"\"\n    return n % a == 0\ndef g(a=10):\n    return a * 2\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 238,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=10) -> bool:\n    \"\"\"Check if the number is divisible by a\"\"\"\n    return n % a == 0",
        "solution_func": "def g(a=10):\n    return a * 2",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='hello') -> bool:\n    \"\"\"Check if the string starts with the given word\"\"\"\n    return s.startswith(word)\ndef g(word='hello'):\n    return word + ' world'\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 238,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, word='hello') -> bool:\n    \"\"\"Check if the string starts with the given word\"\"\"\n    return s.startswith(word)",
        "solution_func": "def g(word='hello'):\n    return word + ' world'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=7, c=10) -> bool:\n    \"\"\"Check if the number is equal to the sum of the first c multiples of a and b\"\"\"\n    return n == sum([a*i + b*i for i in range(c)])\ndef g(a=3, b=7, c=10):\n    return sum([a*i + b*i for i in range(c)])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 238,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=3, b=7, c=10) -> bool:\n    \"\"\"Check if the number is equal to the sum of the first c multiples of a and b\"\"\"\n    return n == sum([a*i + b*i for i in range(c)])",
        "solution_func": "def g(a=3, b=7, c=10):\n    return sum([a*i + b*i for i in range(c)])",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == 15\ndef g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == 15:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 238,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == 15",
        "solution_func": "def g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == 15:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == 8\ndef g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == 8:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 238,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == 8",
        "solution_func": "def g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == 8:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])",
        "map_ix": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            1
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == 6\ndef g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == 6:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 238,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == 6",
        "solution_func": "def g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == 6:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that add up to the target\"\"\"\n    return any(a + b == target for a in numbers for b in numbers if a != b)\n\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 238,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that add up to the target\"\"\"\n    return any(a + b == target for a in numbers for b in numbers if a != b)",
        "solution_func": "def g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(radius: float, target=100) -> bool:\n    \"\"\"Check if the area of a circle with the given radius is greater than the target\"\"\"\n    area = math.pi * radius ** 2\n    return area > target\n\ndef g(target=100):\n    return 6.5\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 238,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\ndef f(radius: float, target=100) -> bool:\n    \"\"\"Check if the area of a circle with the given radius is greater than the target\"\"\"\n    area = math.pi * radius ** 2\n    return area > target",
        "solution_func": "def g(target=100):\n    return 6.5",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\ndef f(date_str: str, target_year=2022) -> bool:\n    \"\"\"Check if the year of the given date is equal to the target year\"\"\"\n    date = datetime.strptime(date_str, '%Y-%m-%d')\n    return date.year == target_year\n\ndef g(target_year=2022):\n    return '2022-05-15'\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 238,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom datetime import datetime\ndef f(date_str: str, target_year=2022) -> bool:\n    \"\"\"Check if the year of the given date is equal to the target year\"\"\"\n    date = datetime.strptime(date_str, '%Y-%m-%d')\n    return date.year == target_year",
        "solution_func": "def g(target_year=2022):\n    return '2022-05-15'",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target_sum=100) -> bool:\n    \"\"\"Find n consecutive integers whose sum is equal to the target sum\"\"\"\n    start = 1\n    while start + n <= target_sum:\n        numbers = list(range(start, start + n))\n        if sum(numbers) == target_sum:\n            return True\n        start += 1\n    return False\n\ndef g(target_sum=100):\n    n = 2\n    while n <= target_sum:\n        if f(n, target_sum):\n            return n\n        n += 1\n    return -1\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 238,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, target_sum=100) -> bool:\n    \"\"\"Find n consecutive integers whose sum is equal to the target sum\"\"\"\n    start = 1\n    while start + n <= target_sum:\n        numbers = list(range(start, start + n))\n        if sum(numbers) == target_sum:\n            return True\n        start += 1\n    return False",
        "solution_func": "def g(target_sum=100):\n    n = 2\n    while n <= target_sum:\n        if f(n, target_sum):\n            return n\n        n += 1\n    return -1",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 239,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\nfrom typing import List\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport math\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a perfect square sequence.\"\"\"\n    for i in range(1, len(numbers)):\n        if math.isqrt(numbers[i]) != i:\n            return False\n    return True\n\ndef g():\n    return [1, 4, 9, 16, 25, 36, 49, 64, 81]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 239,
        "target_skills": null,
        "problem_func": "from typing import*\nimport math\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a perfect square sequence.\"\"\"\n    for i in range(1, len(numbers)):\n        if math.isqrt(numbers[i]) != i:\n            return False\n    return True",
        "solution_func": "def g():\n    return [1, 4, 9, 16, 25, 36, 49, 64, 81]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport random\nfrom typing import List, Tuple\n\ndef f(pairs: List[Tuple[int, int]], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list of pairs whose sum is equal to the target.\"\"\"\n    for pair in pairs:\n        if pair[0] + pair[1] == target:\n            return True\n    return False\n\ndef g(target=100):\n    return [(10, 20), (30, 40), (50, 60), (70, 80), (90, 100)]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 239,
        "target_skills": null,
        "problem_func": "from typing import*\nimport random\nfrom typing import List, Tuple\n\ndef f(pairs: List[Tuple[int, int]], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list of pairs whose sum is equal to the target.\"\"\"\n    for pair in pairs:\n        if pair[0] + pair[1] == target:\n            return True\n    return False",
        "solution_func": "def g(target=100):\n    return [(10, 20), (30, 40), (50, 60), (70, 80), (90, 100)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Given a list of integers, determine if there exists a pair of numbers whose sum is equal to a target value.\n    Return True if such a pair exists, and False otherwise.\"\"\"\n    target = 10\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 239,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Given a list of integers, determine if there exists a pair of numbers whose sum is equal to a target value.\n    Return True if such a pair exists, and False otherwise.\"\"\"\n    target = 10\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix of integers, determine if there exists a square submatrix where all elements are equal.\n    Return True if such a submatrix exists, and False otherwise.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    for i in range(rows):\n        for j in range(cols):\n            if i+1 < rows and j+1 < cols:\n                if matrix[i][j] == matrix[i+1][j] == matrix[i][j+1] == matrix[i+1][j+1]:\n                    return True\n    return False\n\ndef g():\n    return [[1, 2, 3], [4, 4, 3], [1, 2, 3]]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 239,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix of integers, determine if there exists a square submatrix where all elements are equal.\n    Return True if such a submatrix exists, and False otherwise.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    for i in range(rows):\n        for j in range(cols):\n            if i+1 < rows and j+1 < cols:\n                if matrix[i][j] == matrix[i+1][j] == matrix[i][j+1] == matrix[i+1][j+1]:\n                    return True\n    return False",
        "solution_func": "def g():\n    return [[1, 2, 3], [4, 4, 3], [1, 2, 3]]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Given a list of integers, determine if there exists a subsequence of three numbers in increasing order.\n    Return True if such a subsequence exists, and False otherwise.\"\"\"\n    n = len(nums)\n    min_val = float('inf')\n    second_min_val = float('inf')\n\n    for i in range(n):\n        if nums[i] <= min_val:\n            min_val = nums[i]\n        elif nums[i] <= second_min_val:\n            second_min_val = nums[i]\n        else:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 239,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Given a list of integers, determine if there exists a subsequence of three numbers in increasing order.\n    Return True if such a subsequence exists, and False otherwise.\"\"\"\n    n = len(nums)\n    min_val = float('inf')\n    second_min_val = float('inf')\n\n    for i in range(n):\n        if nums[i] <= min_val:\n            min_val = nums[i]\n        elif nums[i] <= second_min_val:\n            second_min_val = nums[i]\n        else:\n            return True\n    return False",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list whose sum equals the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target: int):\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), target=7)\n",
        "emb": null,
        "idx_generation": 239,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list whose sum equals the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target: int):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], prefix: str) -> bool:\n    \"\"\"Check if all words in the list start with the given prefix\"\"\"\n    return all(word.startswith(prefix) for word in words)\n\ndef g(prefix: str):\n    return ['python', 'programming', 'puzzle', 'prefix']\n\nassert f(g(), prefix='p')\n",
        "emb": null,
        "idx_generation": 239,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], prefix: str) -> bool:\n    \"\"\"Check if all words in the list start with the given prefix\"\"\"\n    return all(word.startswith(prefix) for word in words)",
        "solution_func": "def g(prefix: str):\n    return ['python', 'programming', 'puzzle', 'prefix']",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], k: int) -> bool:\n    \"\"\"Check if there are k consecutive numbers in the list\"\"\"\n    for i in range(len(numbers) - k + 1):\n        if numbers[i:i+k] == list(range(numbers[i], numbers[i]+k)):\n            return True\n    return False\n\ndef g(k: int):\n    return [1, 2, 3, 6, 8, 9, 10]\n\nassert f(g(), k=3)\n",
        "emb": null,
        "idx_generation": 239,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], k: int) -> bool:\n    \"\"\"Check if there are k consecutive numbers in the list\"\"\"\n    for i in range(len(numbers) - k + 1):\n        if numbers[i:i+k] == list(range(numbers[i], numbers[i]+k)):\n            return True\n    return False",
        "solution_func": "def g(k: int):\n    return [1, 2, 3, 6, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target\"\"\"\n    target = 100\n    for num1 in nums:\n        for num2 in nums:\n            if num1 * num2 == target:\n                return True\n    return False\n\ndef g():\n    return [i for i in range(1, 11)]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 239,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target\"\"\"\n    target = 100\n    for num1 in nums:\n        for num2 in nums:\n            if num1 * num2 == target:\n                return True\n    return False",
        "solution_func": "def g():\n    return [i for i in range(1, 11)]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(points: List[Tuple[int, int]]) -> bool:\n    \"\"\"Check if there exists a pair of points in the list whose Euclidean distance is equal to the target\"\"\"\n    target = 5\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            x1, y1 = points[i]\n            x2, y2 = points[j]\n            if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 == target:\n                return True\n    return False\n\ndef g():\n    return [(1, 2), (3, 4), (5, 6), (7, 8)]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 240,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List, Tuple\n\ndef f(points: List[Tuple[int, int]]) -> bool:\n    \"\"\"Check if there exists a pair of points in the list whose Euclidean distance is equal to the target\"\"\"\n    target = 5\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            x1, y1 = points[i]\n            x2, y2 = points[j]\n            if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 == target:\n                return True\n    return False",
        "solution_func": "def g():\n    return [(1, 2), (3, 4), (5, 6), (7, 8)]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[str], target='python') -> bool:\n    \"\"\"Check if there exists a string in the list whose reversed form is equal to the target string\"\"\"\n    for s in lst:\n        if s[::-1] == target:\n            return True\n    return False\n\ndef g():\n    return ['nohtyp', 'hello', 'world']\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 240,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[str], target='python') -> bool:\n    \"\"\"Check if there exists a string in the list whose reversed form is equal to the target string\"\"\"\n    for s in lst:\n        if s[::-1] == target:\n            return True\n    return False",
        "solution_func": "def g():\n    return ['nohtyp', 'hello', 'world']",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    target = 10\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 240,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    target = 10\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List, Tuple\ndef f(points: List[Tuple[int, int]], a=0, b=0, c=0, d=0) -> bool:\n    \"\"\"Check if all given points lie on a specific line.\nSolution should be a tuple of the (a, b, c) coefficients.\nThe equation of the line is: ax + by + c = 0\"\"\"\n    for x, y in points:\n        if a*x + b*y + c != 0:\n            return False\n    return True\ndef g(points: List[Tuple[int, int]]):\n    x_coords, y_coords = zip(*points)\n    a = (y_coords[1] - y_coords[0])\n    b = (x_coords[0] - x_coords[1])\n    c = (x_coords[1]*y_coords[0] - x_coords[0]*y_coords[1])\n    return (a, b, c)\nassert f(g([(1, 2), (3, 4), (5, 6)]))\n",
        "emb": null,
        "idx_generation": 240,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List, Tuple\ndef f(points: List[Tuple[int, int]], a=0, b=0, c=0, d=0) -> bool:\n    \"\"\"Check if all given points lie on a specific line.\nSolution should be a tuple of the (a, b, c) coefficients.\nThe equation of the line is: ax + by + c = 0\"\"\"\n    for x, y in points:\n        if a*x + b*y + c != 0:\n            return False\n    return True",
        "solution_func": "def g(points: List[Tuple[int, int]]):\n    x_coords, y_coords = zip(*points)\n    a = (y_coords[1] - y_coords[0])\n    b = (x_coords[0] - x_coords[1])\n    c = (x_coords[1]*y_coords[0] - x_coords[0]*y_coords[1])\n    return (a, b, c)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List, Tuple\ndef f(points: List[Tuple[int, int]], a=0, b=0, c=0, d=0) -> bool:\n    \"\"\"Check if any two given points lie on a specific line.\nSolution should be a tuple of the (a, b, c) coefficients.\nThe equation of the line is: ax + by + c = 0\"\"\"\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            x1, y1 = points[i]\n            x2, y2 = points[j]\n            if a*x1 + b*y1 + c == 0 and a*x2 + b*y2 + c == 0:\n                return True\n    return False\ndef g(points: List[Tuple[int, int]]):\n    x1, y1 = points[0]\n    x2, y2 = points[1]\n    a = (y2 - y1)\n    b = (x1 - x2)\n    c = (x2*y1 - x1*y2)\n    return (a, b, c)\nassert f(g([(1, 2), (3, 4), (5, 6)]))\n",
        "emb": null,
        "idx_generation": 240,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List, Tuple\ndef f(points: List[Tuple[int, int]], a=0, b=0, c=0, d=0) -> bool:\n    \"\"\"Check if any two given points lie on a specific line.\nSolution should be a tuple of the (a, b, c) coefficients.\nThe equation of the line is: ax + by + c = 0\"\"\"\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            x1, y1 = points[i]\n            x2, y2 = points[j]\n            if a*x1 + b*y1 + c == 0 and a*x2 + b*y2 + c == 0:\n                return True\n    return False",
        "solution_func": "def g(points: List[Tuple[int, int]]):\n    x1, y1 = points[0]\n    x2, y2 = points[1]\n    a = (y2 - y1)\n    b = (x1 - x2)\n    c = (x2*y1 - x1*y2)\n    return (a, b, c)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List, Tuple\ndef f(points: List[Tuple[int, int]], a=0, b=0, c=0, d=0) -> bool:\n    \"\"\"Check if all given points lie on a specific line.\nSolution should be a tuple of the (a, b, c) coefficients.\nThe equation of the line is: ax + by + c = 0\"\"\"\n    for x, y in points:\n        if a*x + b*y + c != 0:\n            return False\n    return True\ndef g(points: List[Tuple[int, int]]):\n    x_coords, y_coords = zip(*points)\n    a = (y_coords[1] - y_coords[0])\n    b = (x_coords[0] - x_coords[1])\n    c = (x_coords[1]*y_coords[0] - x_coords[0]*y_coords[1])\n    return (a, b, c)\nassert f(g([(1, 2), (3, 4), (5, 6)]))\n",
        "emb": null,
        "idx_generation": 240,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List, Tuple\ndef f(points: List[Tuple[int, int]], a=0, b=0, c=0, d=0) -> bool:\n    \"\"\"Check if all given points lie on a specific line.\nSolution should be a tuple of the (a, b, c) coefficients.\nThe equation of the line is: ax + by + c = 0\"\"\"\n    for x, y in points:\n        if a*x + b*y + c != 0:\n            return False\n    return True",
        "solution_func": "def g(points: List[Tuple[int, int]]):\n    x_coords, y_coords = zip(*points)\n    a = (y_coords[1] - y_coords[0])\n    b = (x_coords[0] - x_coords[1])\n    c = (x_coords[1]*y_coords[0] - x_coords[0]*y_coords[1])\n    return (a, b, c)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5, target]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 240,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5, target]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find the two smallest numbers in the list whose sum is greater than the target\"\"\"\n    nums.sort()\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] > target:\n                return True\n    return False\n\ndef g(target=0):\n    return [5, 10, 15, 20, 25, target-30]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 240,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find the two smallest numbers in the list whose sum is greater than the target\"\"\"\n    nums.sort()\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] > target:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    return [5, 10, 15, 20, 25, target-30]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are three distinct numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, target]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 240,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are three distinct numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, target]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=7) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 240,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=7) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=50) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_sum=50):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 241,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=50) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target_sum=50):\n    return [n for n in range(1, target_sum+1)]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=0) -> bool:\n    \"\"\"Check if the product of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] * nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_sum=0):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 241,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=0) -> bool:\n    \"\"\"Check if the product of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] * nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target_sum=0):\n    return [n for n in range(1, target_sum+1)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=3, n=3) -> bool:\n    \"\"\"Find a (closed) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=3, n=3):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if len(free) == 1 and (0, 0) in free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "emb": null,
        "idx_generation": 241,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=3, n=3) -> bool:\n    \"\"\"Find a (closed) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]",
        "solution_func": "def g(m=3, n=3):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if len(free) == 1 and (0, 0) in free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8], target=2) -> bool:\n    \"\"\"Check if any number in the list is divisible by the target number.\"\"\"\n    return any((i % target == 0 for i in nums)) and target != 0\ndef g(nums=[2, 4, 6, 8], target=2):\n    return target\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 241,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8], target=2) -> bool:\n    \"\"\"Check if any number in the list is divisible by the target number.\"\"\"\n    return any((i % target == 0 for i in nums)) and target != 0",
        "solution_func": "def g(nums=[2, 4, 6, 8], target=2):\n    return target",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, big_str='fatextemedyrotichipicecojon', index=24) -> bool:\n    \"\"\"Check if a string is present in big_str starting from the given index\"\"\"\n    return s in big_str[index:]\ndef g(big_str='fatextemedyrotichipicecojon', index=24):\n    return big_str[index:]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 241,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, big_str='fatextemedyrotichipicecojon', index=24) -> bool:\n    \"\"\"Check if a string is present in big_str starting from the given index\"\"\"\n    return s in big_str[index:]",
        "solution_func": "def g(big_str='fatextemedyrotichipicecojon', index=24):\n    return big_str[index:]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lb: List[bool], trips=[[1, 1, 1], [1, 0, 0], [1, 1, 1], [0, 0, 0]]) -> bool:\n    \"\"\"Given a list of lists of triples of integers, return True for each list with a total of less than 2 and False for each other list.\"\"\"\n    return len(lb) == len(trips) and all((b is True if sum(s) < 2 else b is False for (b, s) in zip(lb, trips)))\ndef g(trips=[[1, 1, 1], [1, 0, 0], [1, 1, 1], [0, 0, 0]]):\n    return [sum(s) < 2 for s in trips]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 241,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lb: List[bool], trips=[[1, 1, 1], [1, 0, 0], [1, 1, 1], [0, 0, 0]]) -> bool:\n    \"\"\"Given a list of lists of triples of integers, return True for each list with a total of less than 2 and False for each other list.\"\"\"\n    return len(lb) == len(trips) and all((b is True if sum(s) < 2 else b is False for (b, s) in zip(lb, trips)))",
        "solution_func": "def g(trips=[[1, 1, 1], [1, 0, 0], [1, 1, 1], [0, 0, 0]]):\n    return [sum(s) < 2 for s in trips]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there is a pair of numbers in nums that multiply up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    nums = [2, 3, 4, 5, 6]\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 241,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there is a pair of numbers in nums that multiply up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    nums = [2, 3, 4, 5, 6]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], target_length=5) -> bool:\n    \"\"\"Check if there is a name in the list that has length equal to target_length.\"\"\"\n    for name in names:\n        if len(name) == target_length:\n            return True\n    return False\n\ndef g(target_length=5):\n    names = [\"John\", \"Mary\", \"Alex\", \"Emma\", \"Ethan\"]\n    return names\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 241,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(names: List[str], target_length=5) -> bool:\n    \"\"\"Check if there is a name in the list that has length equal to target_length.\"\"\"\n    for name in names:\n        if len(name) == target_length:\n            return True\n    return False",
        "solution_func": "def g(target_length=5):\n    names = [\"John\", \"Mary\", \"Alex\", \"Emma\", \"Ethan\"]\n    return names",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=0) -> bool:\n    \"\"\"Check if there is a row in the matrix whose sum is equal to target_sum.\"\"\"\n    for row in matrix:\n        if sum(row) == target_sum:\n            return True\n    return False\n\ndef g(target_sum=0):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 241,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target_sum=0) -> bool:\n    \"\"\"Check if there is a row in the matrix whose sum is equal to target_sum.\"\"\"\n    for row in matrix:\n        if sum(row) == target_sum:\n            return True\n    return False",
        "solution_func": "def g(target_sum=0):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that adds up to the target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=20):\n    nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n    return nums\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 241,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that adds up to the target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=20):\n    nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n    return nums",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Determine if the given string is a palindrome and the first n characters of the string are in alphabetical order.\"\"\"\n    return s == s[::-1] and s[:n] == ''.join(sorted(s[:n]))\ndef g(n=3):\n    import string\n    return string.ascii_lowercase[:n][::-1] + string.ascii_lowercase\nassert f(g())\n",
        "emb": null,
        "idx_generation": 242,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Determine if the given string is a palindrome and the first n characters of the string are in alphabetical order.\"\"\"\n    return s == s[::-1] and s[:n] == ''.join(sorted(s[:n]))",
        "solution_func": "def g(n=3):\n    import string\n    return string.ascii_lowercase[:n][::-1] + string.ascii_lowercase",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find the sum of the elements in the matrix that are greater than the target value.\"\"\"\n    return sum([sum(row) for row in matrix if sum(row) > target]) > 0\ndef g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 242,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find the sum of the elements in the matrix that are greater than the target value.\"\"\"\n    return sum([sum(row) for row in matrix if sum(row) > target]) > 0",
        "solution_func": "def g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], n=3) -> bool:\n    \"\"\"Find the sum of the first n odd numbers in the given list.\"\"\"\n    return sum([num for num in nums if num % 2 != 0][:n]) > 10\ndef g(n=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 242,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], n=3) -> bool:\n    \"\"\"Find the sum of the first n odd numbers in the given list.\"\"\"\n    return sum([num for num in nums if num % 2 != 0][:n]) > 10",
        "solution_func": "def g(n=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=3, threshold=0.9, seq=[0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose average is greater than or equal to threshold\"\"\"\n    seq_avg = sum(seq[start:start+k]) / k\n    return seq_avg >= threshold\ndef g(k=3, threshold=0.9, seq=[0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5]):\n    def seq_avg(start):\n        return sum(seq[start:start+k]) / k\n    return max(range(len(seq) - k + 1), key=seq_avg)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 242,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(start: int, k=3, threshold=0.9, seq=[0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose average is greater than or equal to threshold\"\"\"\n    seq_avg = sum(seq[start:start+k]) / k\n    return seq_avg >= threshold",
        "solution_func": "def g(k=3, threshold=0.9, seq=[0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5]):\n    def seq_avg(start):\n        return sum(seq[start:start+k]) / k\n    return max(range(len(seq) - k + 1), key=seq_avg)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=4, threshold=0.7, seq=[0.3, 0.6, 0.9, 1.2, 1.5, 1.8, 2.1, 2.4]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose average is greater than or equal to threshold\"\"\"\n    seq_avg = sum(seq[start:start+k]) / k\n    return seq_avg >= threshold\ndef g(k=4, threshold=0.7, seq=[0.3, 0.6, 0.9, 1.2, 1.5, 1.8, 2.1, 2.4]):\n    def seq_avg(start):\n        return sum(seq[start:start+k]) / k\n    return max(range(len(seq) - k + 1), key=seq_avg)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 242,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(start: int, k=4, threshold=0.7, seq=[0.3, 0.6, 0.9, 1.2, 1.5, 1.8, 2.1, 2.4]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose average is greater than or equal to threshold\"\"\"\n    seq_avg = sum(seq[start:start+k]) / k\n    return seq_avg >= threshold",
        "solution_func": "def g(k=4, threshold=0.7, seq=[0.3, 0.6, 0.9, 1.2, 1.5, 1.8, 2.1, 2.4]):\n    def seq_avg(start):\n        return sum(seq[start:start+k]) / k\n    return max(range(len(seq) - k + 1), key=seq_avg)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=5, threshold=0.6, seq=[0.4, 0.8, 1.2, 1.6, 2.0, 2.4, 2.8, 3.2]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose average is greater than or equal to threshold\"\"\"\n    seq_avg = sum(seq[start:start+k]) / k\n    return seq_avg >= threshold\ndef g(k=5, threshold=0.6, seq=[0.4, 0.8, 1.2, 1.6, 2.0, 2.4, 2.8, 3.2]):\n    def seq_avg(start):\n        return sum(seq[start:start+k]) / k\n    return max(range(len(seq) - k + 1), key=seq_avg)\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 242,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(start: int, k=5, threshold=0.6, seq=[0.4, 0.8, 1.2, 1.6, 2.0, 2.4, 2.8, 3.2]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose average is greater than or equal to threshold\"\"\"\n    seq_avg = sum(seq[start:start+k]) / k\n    return seq_avg >= threshold",
        "solution_func": "def g(k=5, threshold=0.6, seq=[0.4, 0.8, 1.2, 1.6, 2.0, 2.4, 2.8, 3.2]):\n    def seq_avg(start):\n        return sum(seq[start:start+k]) / k\n    return max(range(len(seq) - k + 1), key=seq_avg)",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of integers in the list whose sum is equal to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=0):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 242,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of integers in the list whose sum is equal to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=2) -> bool:\n    \"\"\"Given a list of integers and a number k, find any sublist of length k whose elements are all even numbers.\"\"\"\n    return any(all(num % 2 == 0 for num in nums[i:i+k]) for i in range(len(nums) - k + 1))\ndef g(k=2):\n    return [2, 4, 6, 8, 10]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 242,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], k=2) -> bool:\n    \"\"\"Given a list of integers and a number k, find any sublist of length k whose elements are all even numbers.\"\"\"\n    return any(all(num % 2 == 0 for num in nums[i:i+k]) for i in range(len(nums) - k + 1))",
        "solution_func": "def g(k=2):\n    return [2, 4, 6, 8, 10]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of integers in the list whose product is equal to the target value.\"\"\"\n    return any((nums[i] * nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=0):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 242,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of integers in the list whose product is equal to the target value.\"\"\"\n    return any((nums[i] * nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target number, find if there exists a pair of numbers in the list such that their product is equal to the target.\nSample Input:\n[2, 4, 5, 6]\nSample Output:\nTrue\"\"\"\n    return any((nums[i] * nums[j] == target) for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(target=10):\n    return [2, 5]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 242,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target number, find if there exists a pair of numbers in the list such that their product is equal to the target.\nSample Input:\n[2, 4, 5, 6]\nSample Output:\nTrue\"\"\"\n    return any((nums[i] * nums[j] == target) for i in range(len(nums)) for j in range(i + 1, len(nums)))",
        "solution_func": "def g(target=10):\n    return [2, 5]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=625) -> bool:\n    \"\"\"Find a number that when squared is equal to a.\"\"\"\n    return x ** 2 == a\ndef g(a=625):\n    return int(a ** 0.5)\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 243,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=625) -> bool:\n    \"\"\"Find a number that when squared is equal to a.\"\"\"\n    return x ** 2 == a",
        "solution_func": "def g(a=625):\n    return int(a ** 0.5)",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Find a string that repeats n times.\"\"\"\n    return s * n == s + s + s + s + s\ndef g(n=5):\n    return \"abc\" * n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 243,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Find a string that repeats n times.\"\"\"\n    return s * n == s + s + s + s + s",
        "solution_func": "def g(n=5):\n    return \"abc\" * n",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], m=10) -> bool:\n    \"\"\"Find a number in the list that is greater than m.\"\"\"\n    return any(num > m for num in lst)\ndef g(m=10):\n    return [1, 5, 10, 15, 20]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 243,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(lst: List[int], m=10) -> bool:\n    \"\"\"Find a number in the list that is greater than m.\"\"\"\n    return any(num > m for num in lst)",
        "solution_func": "def g(m=10):\n    return [1, 5, 10, 15, 20]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum: int) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with a sum equal to the target sum.\"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum == target_sum or prefix_sum in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\n\ndef g(target_sum: int):\n    return [2, 4, -2, -3, 1, 6], target_sum\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 243,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum: int) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with a sum equal to the target sum.\"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum == target_sum or prefix_sum in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False",
        "solution_func": "def g(target_sum: int):\n    return [2, 4, -2, -3, 1, 6], target_sum",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with a sum greater than zero.\"\"\"\n    prefix_sum = 0\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum > 0:\n            return True\n    return False\n\ndef g():\n    return [-1, 2, -3, 4, 5]\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 243,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with a sum greater than zero.\"\"\"\n    prefix_sum = 0\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum > 0:\n            return True\n    return False",
        "solution_func": "def g():\n    return [-1, 2, -3, 4, 5]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum: int) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with a sum less than the target sum.\"\"\"\n    prefix_sum = 0\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum < target_sum:\n            return True\n    return False\n\ndef g(target_sum: int):\n    return [1, 2, 3, -4, 5], target_sum\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 243,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum: int) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with a sum less than the target sum.\"\"\"\n    prefix_sum = 0\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum < target_sum:\n            return True\n    return False",
        "solution_func": "def g(target_sum: int):\n    return [1, 2, 3, -4, 5], target_sum",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to find a combination of numbers that adds up to the target number.\"\"\"\n    def helper(numbers, target):\n        if target == 0:\n            return True\n        if target < 0 or len(numbers) == 0:\n            return False\n        return helper(numbers[1:], target - numbers[0]) or helper(numbers[1:], target)\n    return helper(numbers, target)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 243,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to find a combination of numbers that adds up to the target number.\"\"\"\n    def helper(numbers, target):\n        if target == 0:\n            return True\n        if target < 0 or len(numbers) == 0:\n            return False\n        return helper(numbers[1:], target - numbers[0]) or helper(numbers[1:], target)\n    return helper(numbers, target)",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(string: str, n=1) -> bool:\n    \"\"\"Check if the given string is a palindrome after removing n characters from it.\"\"\"\n    def is_palindrome(s):\n        return s == s[::-1]\n    return is_palindrome(string[:n] + string[n+1:])\n\ndef g(n=1):\n    return 'level' if n == 0 else 'racecar' if n == 1 else 'deed'\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 243,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(string: str, n=1) -> bool:\n    \"\"\"Check if the given string is a palindrome after removing n characters from it.\"\"\"\n    def is_palindrome(s):\n        return s == s[::-1]\n    return is_palindrome(string[:n] + string[n+1:])",
        "solution_func": "def g(n=1):\n    return 'level' if n == 0 else 'racecar' if n == 1 else 'deed'",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if it is possible to find a combination of numbers that multiplies to the target number.\"\"\"\n    def helper(numbers, target):\n        if target == 1:\n            return True\n        if target < 1 or len(numbers) == 0:\n            return False\n        if target % numbers[0] == 0:\n            return helper(numbers[1:], target // numbers[0]) or helper(numbers[1:], target)\n        else:\n            return helper(numbers[1:], target)\n    return helper(numbers, target)\n\ndef g():\n    return [2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 243,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if it is possible to find a combination of numbers that multiplies to the target number.\"\"\"\n    def helper(numbers, target):\n        if target == 1:\n            return True\n        if target < 1 or len(numbers) == 0:\n            return False\n        if target % numbers[0] == 0:\n            return helper(numbers[1:], target // numbers[0]) or helper(numbers[1:], target)\n        else:\n            return helper(numbers[1:], target)\n    return helper(numbers, target)",
        "solution_func": "def g():\n    return [2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=5, c=20) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(1, c + 1)])\ndef g(a=10, b=5, c=20):\n    return -a + sum([b * i for i in range(1, c + 1)])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 243,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=10, b=5, c=20) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(1, c + 1)])",
        "solution_func": "def g(a=10, b=5, c=20):\n    return -a + sum([b * i for i in range(1, c + 1)])",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=30) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list whose sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[10, 5, 15, 20, 25, 30], target=30):\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 244,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=30) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list whose sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(nums=[10, 5, 15, 20, 25, 30], target=30):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[10, 5, 15, 20, 25], target=50):\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 244,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums=[10, 5, 15, 20, 25], target=50):\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Check if there exists a subset of the given list whose elements multiply to the target number.\"\"\"\n    def subset_product(nums, target, n):\n        if target == 1:\n            return True\n        if n == 0:\n            return False\n        if nums[n-1] > target:\n            return subset_product(nums, target, n-1)\n        return subset_product(nums, target, n-1) or subset_product(nums, target//nums[n-1], n-1)\n    return subset_product(nums, target, len(nums))\n\ndef g(nums=[5, 2, 10, 1, 5], target=25):\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 244,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Check if there exists a subset of the given list whose elements multiply to the target number.\"\"\"\n    def subset_product(nums, target, n):\n        if target == 1:\n            return True\n        if n == 0:\n            return False\n        if nums[n-1] > target:\n            return subset_product(nums, target, n-1)\n        return subset_product(nums, target, n-1) or subset_product(nums, target//nums[n-1], n-1)\n    return subset_product(nums, target, len(nums))",
        "solution_func": "def g(nums=[5, 2, 10, 1, 5], target=25):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=5, c=20) -> bool:\n    \"\"\"Find n such that n + a is equal to the product of b and the sum of the first c integers\"\"\"\n    return n + a == b * sum([i for i in range(1, c + 1)])\ndef g(a=10, b=5, c=20):\n    return -a + b * sum([i for i in range(1, c + 1)])\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 244,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=10, b=5, c=20) -> bool:\n    \"\"\"Find n such that n + a is equal to the product of b and the sum of the first c integers\"\"\"\n    return n + a == b * sum([i for i in range(1, c + 1)])",
        "solution_func": "def g(a=10, b=5, c=20):\n    return -a + b * sum([i for i in range(1, c + 1)])",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=5, c=20) -> bool:\n    \"\"\"Find n such that n is equal to the difference between the sum of the first c integers and the product of b and a\"\"\"\n    return n == sum([i for i in range(1, c + 1)]) - a * b\ndef g(a=10, b=5, c=20):\n    return sum([i for i in range(1, c + 1)]) - a * b\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 244,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=10, b=5, c=20) -> bool:\n    \"\"\"Find n such that n is equal to the difference between the sum of the first c integers and the product of b and a\"\"\"\n    return n == sum([i for i in range(1, c + 1)]) - a * b",
        "solution_func": "def g(a=10, b=5, c=20):\n    return sum([i for i in range(1, c + 1)]) - a * b",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=5, c=20) -> bool:\n    \"\"\"Find n such that n is equal to a multiplied by the sum of the first c integers, divided by b\"\"\"\n    return n == (a * sum([i for i in range(1, c + 1)])) / b\ndef g(a=10, b=5, c=20):\n    return (a * sum([i for i in range(1, c + 1)])) / b\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 244,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=10, b=5, c=20) -> bool:\n    \"\"\"Find n such that n is equal to a multiplied by the sum of the first c integers, divided by b\"\"\"\n    return n == (a * sum([i for i in range(1, c + 1)])) / b",
        "solution_func": "def g(a=10, b=5, c=20):\n    return (a * sum([i for i in range(1, c + 1)])) / b",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=15482, b=23223, lower_bound=5) -> bool:\n    \"\"\"Check if n is a divisor of either a or b, and n is greater than or equal to lower_bound.\"\"\"\n    return (a % n == 0 or b % n == 0) and (n >= lower_bound)\ndef g(a=15482, b=23223, lower_bound=5):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 244,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=15482, b=23223, lower_bound=5) -> bool:\n    \"\"\"Check if n is a divisor of either a or b, and n is greater than or equal to lower_bound.\"\"\"\n    return (a % n == 0 or b % n == 0) and (n >= lower_bound)",
        "solution_func": "def g(a=15482, b=23223, lower_bound=5):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=15482, b=23223, lower_bound=5) -> bool:\n    \"\"\"Check if n is a divisor of either a or b, and n is less than or equal to lower_bound.\"\"\"\n    return (a % n == 0 or b % n == 0) and (n <= lower_bound)\ndef g(a=15482, b=23223, lower_bound=5):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 244,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=15482, b=23223, lower_bound=5) -> bool:\n    \"\"\"Check if n is a divisor of either a or b, and n is less than or equal to lower_bound.\"\"\"\n    return (a % n == 0 or b % n == 0) and (n <= lower_bound)",
        "solution_func": "def g(a=15482, b=23223, lower_bound=5):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, a=15482, b=23223, lower_bound=5) -> bool:\n    \"\"\"Check if n is a divisor of both a and b, and n is less than or equal to lower_bound.\"\"\"\n    return a % n == 0 and b % n == 0 and (n <= lower_bound)\ndef g(a=15482, b=23223, lower_bound=5):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 244,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, a=15482, b=23223, lower_bound=5) -> bool:\n    \"\"\"Check if n is a divisor of both a and b, and n is less than or equal to lower_bound.\"\"\"\n    return a % n == 0 and b % n == 0 and (n <= lower_bound)",
        "solution_func": "def g(a=15482, b=23223, lower_bound=5):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down or right in the grid.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j):\n        if i == rows - 1 and j == cols - 1:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            return False\n        return helper(i+1, j) or helper(i, j+1)\n\n    return helper(0, 0)\n\ndef g(nums=[[0, 1, 1], [1, 1, 0], [0, 1, 1]]):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 244,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down or right in the grid.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j):\n        if i == rows - 1 and j == cols - 1:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            return False\n        return helper(i+1, j) or helper(i, j+1)\n\n    return helper(0, 0)",
        "solution_func": "def g(nums=[[0, 1, 1], [1, 1, 0], [0, 1, 1]]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m=3) -> bool:\n    \"\"\"Check if the given number is divisible by m and also a power of m.\"\"\"\n    return n % m == 0 and m ** int(n ** 0.5) == n\n\ndef g(m=3):\n    return m ** 4\n\nassert f(g())\n\n",
        "emb": null,
        "idx_generation": 245,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=3) -> bool:\n    \"\"\"Check if the given number is divisible by m and also a power of m.\"\"\"\n    return n % m == 0 and m ** int(n ** 0.5) == n",
        "solution_func": "def g(m=3):\n    return m ** 4",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=8) -> bool:\n    \"\"\"Check if the given number is divisible by m and also a palindrome.\"\"\"\n    return n % m == 0 and str(n) == str(n)[::-1]\n\ndef g(m=8):\n    return int(str(m) * 4)\n\nassert f(g())\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 245,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=8) -> bool:\n    \"\"\"Check if the given number is divisible by m and also a palindrome.\"\"\"\n    return n % m == 0 and str(n) == str(n)[::-1]",
        "solution_func": "def g(m=8):\n    return int(str(m) * 4)",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, m=5) -> bool:\n    \"\"\"Check if the given number is divisible by m and also a prime number.\"\"\"\n    if n % m == 0:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(m=5):\n    return m ** 3\n\nassert f(g())\n\n",
        "emb": null,
        "idx_generation": 245,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, m=5) -> bool:\n    \"\"\"Check if the given number is divisible by m and also a prime number.\"\"\"\n    if n % m == 0:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g(m=5):\n    return m ** 3",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there is a subarray in the list that sums up to the given target\"\"\"\n    for i in range(len(nums)):\n        current_sum = nums[i]\n        if current_sum == target:\n            return True\n        for j in range(i+1, len(nums)):\n            current_sum += nums[j]\n            if current_sum == target:\n                return True\n    return False\n\ndef g(target=5):\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 245,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there is a subarray in the list that sums up to the given target\"\"\"\n    for i in range(len(nums)):\n        current_sum = nums[i]\n        if current_sum == target:\n            return True\n        for j in range(i+1, len(nums)):\n            current_sum += nums[j]\n            if current_sum == target:\n                return True\n    return False",
        "solution_func": "def g(target=5):\n    nums = [1, 2, 3, 4, 5]\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a subarray in the list that sums up to the given target\"\"\"\n    for i in range(len(nums)):\n        current_sum = nums[i]\n        if current_sum == target:\n            return True\n        for j in range(i+1, len(nums)):\n            current_sum += nums[j]\n            if current_sum == target:\n                return True\n    return False\n\ndef g(target=10):\n    nums = [1, 2, 3, -4, 5]\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 245,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a subarray in the list that sums up to the given target\"\"\"\n    for i in range(len(nums)):\n        current_sum = nums[i]\n        if current_sum == target:\n            return True\n        for j in range(i+1, len(nums)):\n            current_sum += nums[j]\n            if current_sum == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    nums = [1, 2, 3, -4, 5]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there is a subarray in the list that sums up to the given target\"\"\"\n    for i in range(len(nums)):\n        current_sum = nums[i]\n        if current_sum == target:\n            return True\n        for j in range(i+1, len(nums)):\n            current_sum += nums[j]\n            if current_sum == target:\n                return True\n    return False\n\ndef g(target=15):\n    nums = [5, 5, 5, 5, 5]\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 245,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there is a subarray in the list that sums up to the given target\"\"\"\n    for i in range(len(nums)):\n        current_sum = nums[i]\n        if current_sum == target:\n            return True\n        for j in range(i+1, len(nums)):\n            current_sum += nums[j]\n            if current_sum == target:\n                return True\n    return False",
        "solution_func": "def g(target=15):\n    nums = [5, 5, 5, 5, 5]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target number.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 245,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target number.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g():\n    nums = [1, 2, 3, 4, 5]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, divisor=10) -> bool:\n    \"\"\"Check if the given number is a multiple of the divisor.\"\"\"\n    return n % divisor == 0\n\ndef g(divisor=10):\n    return divisor * 5\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 245,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, divisor=10) -> bool:\n    \"\"\"Check if the given number is a multiple of the divisor.\"\"\"\n    return n % divisor == 0",
        "solution_func": "def g(divisor=10):\n    return divisor * 5",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='python') -> bool:\n    \"\"\"Check if the given substring exists in the given string.\"\"\"\n    return substring in s\n\ndef g():\n    s = \"I love python programming\"\n    return s\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 245,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, substring='python') -> bool:\n    \"\"\"Check if the given substring exists in the given string.\"\"\"\n    return substring in s",
        "solution_func": "def g():\n    s = \"I love python programming\"\n    return s",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find a subset of numbers in the list whose sum is equal to the target value.\"\"\"\n    n = len(arr)\n    for i in range(1, 2**n):\n        subset_sum = sum(arr[j] for j in range(n) if (i & (1 << j)) > 0)\n        if subset_sum == target:\n            return True\n    return False\n\ndef g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 245,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find a subset of numbers in the list whose sum is equal to the target value.\"\"\"\n    n = len(arr)\n    for i in range(1, 2**n):\n        subset_sum = sum(arr[j] for j in range(n) if (i & (1 << j)) > 0)\n        if subset_sum == target:\n            return True\n    return False",
        "solution_func": "def g(target=100):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target=10) -> bool:\n    \"\"\"Check if there exists a word in the list whose length is greater than or equal to the target.\"\"\"\n    for word in words:\n        if len(word) >= target:\n            return True\n    return False\n\ndef g(target=10):\n    return ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig']\n\nassert f(g())\n\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 246,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(words: List[str], target=10) -> bool:\n    \"\"\"Check if there exists a word in the list whose length is greater than or equal to the target.\"\"\"\n    for word in words:\n        if len(word) >= target:\n            return True\n    return False",
        "solution_func": "def g(target=10):\n    return ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig']",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists two numbers in the list whose sum is equal to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [25, 50, 75, 100, 125]\n\nassert f(g())\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 246,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists two numbers in the list whose sum is equal to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g():\n    return [25, 50, 75, 100, 125]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists three numbers in the list whose product is equal to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] * nums[j] * nums[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [1, 2, 4, 10, 25]\n\nassert f(g())\n\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 246,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists three numbers in the list whose product is equal to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] * nums[j] * nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g():\n    return [1, 2, 4, 10, 25]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down or right in the grid.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j):\n        if i == rows - 1 and j == cols - 1:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        return helper(i+1, j) or helper(i, j+1)\n\n    return helper(0, 0)\n\ndef g(nums=[[1, 0, 0], [1, 1, 0], [0, 1, 1]]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 246,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down or right in the grid.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j):\n        if i == rows - 1 and j == cols - 1:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        return helper(i+1, j) or helper(i, j+1)\n\n    return helper(0, 0)",
        "solution_func": "def g(nums=[[1, 0, 0], [1, 1, 0], [0, 1, 1]]):\n    return nums",
        "map_ix": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one):\n        if i == rows - 1 and j == cols - 1 and found_one:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        return helper(i+1, j, found_one or nums[i][j] == 1) or helper(i, j+1, found_one or nums[i][j] == 1)\n\n    return helper(0, 0, False)\n\ndef g(nums=[[1, 0, 0], [1, 1, 0], [0, 1, 1]]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 246,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one):\n        if i == rows - 1 and j == cols - 1 and found_one:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        return helper(i+1, j, found_one or nums[i][j] == 1) or helper(i, j+1, found_one or nums[i][j] == 1)\n\n    return helper(0, 0, False)",
        "solution_func": "def g(nums=[[1, 0, 0], [1, 1, 0], [0, 1, 1]]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the sum of the numbers in the path must be even.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and path_sum % 2 == 0:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        return helper(i+1, j, found_one or nums[i][j] == 1, path_sum + nums[i][j]) or helper(i, j+1, found_one or nums[i][j] == 1, path_sum + nums[i][j])\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[1, 0, 0], [1, 1, 0], [0, 1, 1]]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 246,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the sum of the numbers in the path must be even.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and path_sum % 2 == 0:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        return helper(i+1, j, found_one or nums[i][j] == 1, path_sum + nums[i][j]) or helper(i, j+1, found_one or nums[i][j] == 1, path_sum + nums[i][j])\n\n    return helper(0, 0, False, 0)",
        "solution_func": "def g(nums=[[1, 0, 0], [1, 1, 0], [0, 1, 1]]):\n    return nums",
        "map_ix": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 9\n\nassert f(*g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 246,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5], 9",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for col in range(n):\n        col_sum = 0\n        for row in range(n):\n            col_sum += matrix[row][col]\n        if col_sum != target_sum:\n            return False\n    \n    # Check diagonals\n    diagonal_sum = 0\n    anti_diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += matrix[i][i]\n        anti_diagonal_sum += matrix[i][n-i-1]\n    if diagonal_sum != target_sum or anti_diagonal_sum != target_sum:\n        return False\n    \n    return True\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "idx_generation": 246,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for col in range(n):\n        col_sum = 0\n        for row in range(n):\n            col_sum += matrix[row][col]\n        if col_sum != target_sum:\n            return False\n    \n    # Check diagonals\n    diagonal_sum = 0\n    anti_diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += matrix[i][i]\n        anti_diagonal_sum += matrix[i][n-i-1]\n    if diagonal_sum != target_sum or anti_diagonal_sum != target_sum:\n        return False\n    \n    return True",
        "solution_func": "def g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]",
        "map_ix": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(strings: List[str]) -> bool:\n    \"\"\"Check if the given list of strings forms a palindrome sequence.\n    A palindrome sequence reads the same forwards and backwards.\"\"\"\n    concatenated_string = ''.join(strings)\n    reversed_string = concatenated_string[::-1]\n    return concatenated_string == reversed_string\n\ndef g():\n    return ['A', 'na', 'ma', 'la', 'ya', 'a', 'na']\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 246,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(strings: List[str]) -> bool:\n    \"\"\"Check if the given list of strings forms a palindrome sequence.\n    A palindrome sequence reads the same forwards and backwards.\"\"\"\n    concatenated_string = ''.join(strings)\n    reversed_string = concatenated_string[::-1]\n    return concatenated_string == reversed_string",
        "solution_func": "def g():\n    return ['A', 'na', 'ma', 'la', 'ya', 'a', 'na']",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: List[int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies inside an ellipse.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return (((x - a) ** 2) / (c ** 2)) + (((y - b) ** 2) / (d ** 2)) <= 1\ndef g(a=1, b=2, c=10, d=1000):\n    return [a, b]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 246,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(e: List[int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies inside an ellipse.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return (((x - a) ** 2) / (c ** 2)) + (((y - b) ** 2) / (d ** 2)) <= 1",
        "solution_func": "def g(a=1, b=2, c=10, d=1000):\n    return [a, b]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there is a subarray in the list that sums up to the target value\"\"\"\n    for i in range(len(nums)):\n        current_sum = nums[i]\n        if current_sum == target:\n            return True\n        for j in range(i+1, len(nums)):\n            current_sum += nums[j]\n            if current_sum == target:\n                return True\n    return False\n\ndef g(target=0):\n    nums = [1, 2, -3, 4, 5]\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 247,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there is a subarray in the list that sums up to the target value\"\"\"\n    for i in range(len(nums)):\n        current_sum = nums[i]\n        if current_sum == target:\n            return True\n        for j in range(i+1, len(nums)):\n            current_sum += nums[j]\n            if current_sum == target:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    nums = [1, 2, -3, 4, 5]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there is a subarray in the list that sums up to zero\"\"\"\n    for i in range(len(nums)):\n        current_sum = nums[i]\n        if current_sum == target:\n            return True\n        for j in range(i+1, len(nums)):\n            current_sum += nums[j]\n            if current_sum == target:\n                return True\n    return False\n\ndef g(target=0):\n    nums = [5, 4, -3, 2, 1]\n    return nums\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 247,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there is a subarray in the list that sums up to zero\"\"\"\n    for i in range(len(nums)):\n        current_sum = nums[i]\n        if current_sum == target:\n            return True\n        for j in range(i+1, len(nums)):\n            current_sum += nums[j]\n            if current_sum == target:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    nums = [5, 4, -3, 2, 1]\n    return nums",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there is a subarray in the list that sums up to zero\"\"\"\n    for i in range(len(nums)):\n        current_sum = nums[i]\n        if current_sum == target:\n            return True\n        for j in range(i+1, len(nums)):\n            current_sum += nums[j]\n            if current_sum == target:\n                return True\n    return False\n\ndef g(target=0):\n    nums = [-1, -2, -3, -4, -5]\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 247,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there is a subarray in the list that sums up to zero\"\"\"\n    for i in range(len(nums)):\n        current_sum = nums[i]\n        if current_sum == target:\n            return True\n        for j in range(i+1, len(nums)):\n            current_sum += nums[j]\n            if current_sum == target:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    nums = [-1, -2, -3, -4, -5]\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=-128) -> bool:\n    \"\"\"Check if the given number is the bitwise AND of x and a\"\"\"\n    return x == x & a\ndef g(a=-128):\n    return a\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 247,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=-128) -> bool:\n    \"\"\"Check if the given number is the bitwise AND of x and a\"\"\"\n    return x == x & a",
        "solution_func": "def g(a=-128):\n    return a",
        "map_ix": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 247,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[str]) -> bool:\n    \"\"\"Check if all the strings in the list start with the letter 'A'\"\"\"\n    for string in nums:\n        if not string.startswith('A'):\n            return False\n    return True\ndef g():\n    return ['Apple', 'Apricot', 'Avocado']\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 247,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[str]) -> bool:\n    \"\"\"Check if all the strings in the list start with the letter 'A'\"\"\"\n    for string in nums:\n        if not string.startswith('A'):\n            return False\n    return True",
        "solution_func": "def g():\n    return ['Apple', 'Apricot', 'Avocado']",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int = 9) -> bool:\n    \"\"\"Given a list of numbers, find a pair of numbers that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums: List[int] = [2, 7, 11, 15], target: int = 9):\n    return nums\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 247,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int = 9) -> bool:\n    \"\"\"Given a list of numbers, find a pair of numbers that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(nums: List[int] = [2, 7, 11, 15], target: int = 9):\n    return nums",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grades: List[int], threshold: int = 80) -> bool:\n    \"\"\"Given a list of grades, check if the average grade is above the threshold.\"\"\"\n    average = sum(grades) / len(grades)\n    return average > threshold\ndef g(grades: List[int] = [90, 85, 92, 88, 79], threshold: int = 80):\n    return grades\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 247,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(grades: List[int], threshold: int = 80) -> bool:\n    \"\"\"Given a list of grades, check if the average grade is above the threshold.\"\"\"\n    average = sum(grades) / len(grades)\n    return average > threshold",
        "solution_func": "def g(grades: List[int] = [90, 85, 92, 88, 79], threshold: int = 80):\n    return grades",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], target: str = \"Alice\") -> bool:\n    \"\"\"Given a list of names, check if the target name is present.\"\"\"\n    return target in names\ndef g(names: List[str] = [\"Alice\", \"Bob\", \"Charlie\"], target: str = \"Alice\"):\n    return names\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 247,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(names: List[str], target: str = \"Alice\") -> bool:\n    \"\"\"Given a list of names, check if the target name is present.\"\"\"\n    return target in names",
        "solution_func": "def g(names: List[str] = [\"Alice\", \"Bob\", \"Charlie\"], target: str = \"Alice\"):\n    return names",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s='tExTYtOHahekomArof', t='TExTYTohaHeKomryGUSeteXTUrYgir') -> bool:\n    \"\"\"Ignoring case, compare s, t lexicographically. Output 0 if they are =, -1 if s < t, 1 if s > t.\"\"\"\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False\ndef g(s='tExTYtOHahekomArof', t='TExTYTohaHeKomryGUSeteXTUrYgir'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 247,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, s='tExTYtOHahekomArof', t='TExTYTohaHeKomryGUSeteXTUrYgir') -> bool:\n    \"\"\"Ignoring case, compare s, t lexicographically. Output 0 if they are =, -1 if s < t, 1 if s > t.\"\"\"\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False",
        "solution_func": "def g(s='tExTYtOHahekomArof', t='TExTYTohaHeKomryGUSeteXTUrYgir'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"Find whether the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=50):\n    return [[10, 20, 30], [40, 50, 60], [70, 80, target]]\n\nassert f(g())\n\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 248,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"Find whether the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(target=50):\n    return [[10, 20, 30], [40, 50, 60], [70, 80, target]]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Find whether the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=15):\n    return [[1, 3, 5], [7, 9, 11], [13, 15, target]]\n\nassert f(g())\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 248,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Find whether the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(target=15):\n    return [[1, 3, 5], [7, 9, 11], [13, 15, target]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=40) -> bool:\n    \"\"\"Find whether the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=40):\n    return [[4, 8, 12], [16, 20, 24], [28, 32, target]]\n\nassert f(g())\n\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 248,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=40) -> bool:\n    \"\"\"Find whether the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(target=40):\n    return [[4, 8, 12], [16, 20, 24], [28, 32, target]]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(n: int, a=4, b=9) -> bool:\n    \"\"\"Check if n is a perfect square and is divisible by both a and b\"\"\"\n    return n ** 0.5 == int(n ** 0.5) and n % a == 0 and n % b == 0\n\ndef g(a=4, b=9):\n    return a * b * a * b\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 248,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import *\ndef f(n: int, a=4, b=9) -> bool:\n    \"\"\"Check if n is a perfect square and is divisible by both a and b\"\"\"\n    return n ** 0.5 == int(n ** 0.5) and n % a == 0 and n % b == 0",
        "solution_func": "def g(a=4, b=9):\n    return a * b * a * b",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import *\ndef f(n: int, a=6, b=15) -> bool:\n    \"\"\"Check if n is a prime number and is divisible by the product of a and b\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return n % (a * b) == 0\n\ndef g(a=6, b=15):\n    return a * b * a * b * a * b\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 248,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import *\ndef f(n: int, a=6, b=15) -> bool:\n    \"\"\"Check if n is a prime number and is divisible by the product of a and b\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return n % (a * b) == 0",
        "solution_func": "def g(a=6, b=15):\n    return a * b * a * b * a * b",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import *\ndef f(n: int, a=7, b=14) -> bool:\n    \"\"\"Check if n is a multiple of both a and b and the sum of its digits is divisible by 3\"\"\"\n    return n % a == 0 and n % b == 0 and sum(int(digit) for digit in str(n)) % 3 == 0\n\ndef g(a=7, b=14):\n    return a * b * a * b * a * b * a * b\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 248,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import *\ndef f(n: int, a=7, b=14) -> bool:\n    \"\"\"Check if n is a multiple of both a and b and the sum of its digits is divisible by 3\"\"\"\n    return n % a == 0 and n % b == 0 and sum(int(digit) for digit in str(n)) % 3 == 0",
        "solution_func": "def g(a=7, b=14):\n    return a * b * a * b * a * b * a * b",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub: str, case_sensitive=True) -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    if not case_sensitive:\n        s = s.lower()\n        sub = sub.lower()\n    return sub in s\n\ndef g(sub='world', case_sensitive=True):\n    s = \"Hello, world!\"\n    return s, sub, case_sensitive\n\nassert f(*g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 248,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, sub: str, case_sensitive=True) -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    if not case_sensitive:\n        s = s.lower()\n        sub = sub.lower()\n    return sub in s",
        "solution_func": "def g(sub='world', case_sensitive=True):\n    s = \"Hello, world!\"\n    return s, sub, case_sensitive",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i, num in enumerate(numbers):\n        if target - num in numbers[i + 1:]:\n            return True\n    return False\n\ndef g():\n    numbers = [1, 2, 3, 4, 5]\n    target = 8\n    return numbers, target\n\nassert f(*g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 248,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i, num in enumerate(numbers):\n        if target - num in numbers[i + 1:]:\n            return True\n    return False",
        "solution_func": "def g():\n    numbers = [1, 2, 3, 4, 5]\n    target = 8\n    return numbers, target",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, divisors: list=[2, 3, 5, 7]) -> bool:\n    \"\"\"Check if the given number is divisible by all the divisors\"\"\"\n    for divisor in divisors:\n        if num % divisor != 0:\n            return False\n    return True\n\ndef g(divisors=[2, 3, 5, 7]):\n    num = 210\n    return num, divisors\n\nassert f(*g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 248,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num: int, divisors: list=[2, 3, 5, 7]) -> bool:\n    \"\"\"Check if the given number is divisible by all the divisors\"\"\"\n    for divisor in divisors:\n        if num % divisor != 0:\n            return False\n    return True",
        "solution_func": "def g(divisors=[2, 3, 5, 7]):\n    num = 210\n    return num, divisors",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100, n=5) -> bool:\n    \"\"\"Find n distinct positive even integers that sum to target\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target and all((i >= i % 2 == 0 for i in nums))\ndef g(target=100, n=5):\n    return list(range(2, 2 * n + 1, 2))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 248,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100, n=5) -> bool:\n    \"\"\"Find n distinct positive even integers that sum to target\"\"\"\n    return len(nums) == len(set(nums)) == n and sum(nums) == target and all((i >= i % 2 == 0 for i in nums))",
        "solution_func": "def g(target=100, n=5):\n    return list(range(2, 2 * n + 1, 2))",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(num_list: List[int], target=42, count=3) -> bool:\n    \"\"\"Find a list of count numbers whose sum equals target\"\"\"\n    return len(num_list) >= count and sum(num_list[:count]) == target\n\ndef g(target=42, count=3):\n    num_list = [10, -5, 20, 15, 7, -3, 0]\n    return num_list\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 249,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(num_list: List[int], target=42, count=3) -> bool:\n    \"\"\"Find a list of count numbers whose sum equals target\"\"\"\n    return len(num_list) >= count and sum(num_list[:count]) == target",
        "solution_func": "def g(target=42, count=3):\n    num_list = [10, -5, 20, 15, 7, -3, 0]\n    return num_list",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=25, count=3) -> bool:\n    \"\"\"Find a submatrix with count numbers whose sum equals target\"\"\"\n    for row in matrix:\n        for i in range(len(row) - count + 1):\n            if sum(row[i:i+count]) == target:\n                return True\n    return False\n\ndef g(target=25, count=3):\n    matrix = [\n        [1, 2, 3, 4, 5],\n        [6, 7, 8, 9, 10],\n        [11, 12, 13, 14, 15]\n    ]\n    return matrix\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 249,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=25, count=3) -> bool:\n    \"\"\"Find a submatrix with count numbers whose sum equals target\"\"\"\n    for row in matrix:\n        for i in range(len(row) - count + 1):\n            if sum(row[i:i+count]) == target:\n                return True\n    return False",
        "solution_func": "def g(target=25, count=3):\n    matrix = [\n        [1, 2, 3, 4, 5],\n        [6, 7, 8, 9, 10],\n        [11, 12, 13, 14, 15]\n    ]\n    return matrix",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=2) -> bool:\n    \"\"\"Find a string with count number of copies of a given substring\"\"\"\n    return string.count(substring) == count\n\ndef g(substring='abc', count=2):\n    return substring * count\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 249,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, substring='abc', count=2) -> bool:\n    \"\"\"Find a string with count number of copies of a given substring\"\"\"\n    return string.count(substring) == count",
        "solution_func": "def g(substring='abc', count=2):\n    return substring * count",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, lst=[3, 6, 9, 12, 15], upper_bound=1000) -> bool:\n    \"\"\"Check if n is a multiple of all numbers in the list and is less than or equal to the upper_bound\"\"\"\n    return all((n % i == 0 for i in lst)) and 0 < n <= upper_bound\n\ndef g(lst=[3, 6, 9, 12, 15], upper_bound=1000):\n    ans = 1\n    for i in lst:\n        (m, n) = (min(i, ans), max(i, ans))\n        while m > 0:\n            (m, n) = (n % m, m)\n        ans *= i // n\n    return ans\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 249,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(n: int, lst=[3, 6, 9, 12, 15], upper_bound=1000) -> bool:\n    \"\"\"Check if n is a multiple of all numbers in the list and is less than or equal to the upper_bound\"\"\"\n    return all((n % i == 0 for i in lst)) and 0 < n <= upper_bound",
        "solution_func": "def g(lst=[3, 6, 9, 12, 15], upper_bound=1000):\n    ans = 1\n    for i in lst:\n        (m, n) = (min(i, ans), max(i, ans))\n        while m > 0:\n            (m, n) = (n % m, m)\n        ans *= i // n\n    return ans",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a subset of the list whose sum is equal to the target_sum\"\"\"\n    def subset_sum(nums, n, target):\n        if target == 0:\n            return True\n        if n == 0 and target != 0:\n            return False\n        if nums[n-1] > target:\n            return subset_sum(nums, n-1, target)\n        return subset_sum(nums, n-1, target) or subset_sum(nums, n-1, target-nums[n-1])\n\n    return subset_sum(lst, len(lst), target_sum)\n\ndef g(target_sum=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 249,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a subset of the list whose sum is equal to the target_sum\"\"\"\n    def subset_sum(nums, n, target):\n        if target == 0:\n            return True\n        if n == 0 and target != 0:\n            return False\n        if nums[n-1] > target:\n            return subset_sum(nums, n-1, target)\n        return subset_sum(nums, n-1, target) or subset_sum(nums, n-1, target-nums[n-1])\n\n    return subset_sum(lst, len(lst), target_sum)",
        "solution_func": "def g(target_sum=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target_count=2) -> bool:\n    \"\"\"Check if the count of a given number in the list is equal to the target_count\"\"\"\n    return lst.count(5) == target_count\n\ndef g(target_count=2):\n    return [1, 2, 3, 4, 5, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0
        ],
        "idx_generation": 249,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target_count=2) -> bool:\n    \"\"\"Check if the count of a given number in the list is equal to the target_count\"\"\"\n    return lst.count(5) == target_count",
        "solution_func": "def g(target_count=2):\n    return [1, 2, 3, 4, 5, 5, 6, 7, 8, 9]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a subsequence in the list that adds up to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums) + 1):\n            subsequence = nums[i:j]\n            if sum(subsequence) == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [random.randint(1, 10) for _ in range(10)]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 249,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a subsequence in the list that adds up to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums) + 1):\n            subsequence = nums[i:j]\n            if sum(subsequence) == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [random.randint(1, 10) for _ in range(10)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nimport math\nfrom typing import*\ndef f(nums: List[float], target=100) -> bool:\n    \"\"\"Check if there exists a subsequence in the list such that the product of its elements is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums) + 1):\n            subsequence = nums[i:j]\n            product = math.prod(subsequence)\n            if product == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [random.uniform(1, 10) for _ in range(10)]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 249,
        "target_skills": null,
        "problem_func": "import random\nimport math\nfrom typing import*\ndef f(nums: List[float], target=100) -> bool:\n    \"\"\"Check if there exists a subsequence in the list such that the product of its elements is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums) + 1):\n            subsequence = nums[i:j]\n            product = math.prod(subsequence)\n            if product == target:\n                return True\n    return False",
        "solution_func": "def g(target=100):\n    return [random.uniform(1, 10) for _ in range(10)]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], n=3) -> bool:\n    \"\"\"Check if the list contains a subsequence of length n that is sorted in ascending order.\"\"\"\n    subsequences = []\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums) + 1):\n            subsequence = nums[i:j]\n            if sorted(subsequence) == subsequence and len(subsequence) == n:\n                subsequences.append(subsequence)\n    return len(subsequences) > 0\n\ndef g(n=3):\n    return random.sample(range(1, 10), 10)\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 249,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(nums: List[int], n=3) -> bool:\n    \"\"\"Check if the list contains a subsequence of length n that is sorted in ascending order.\"\"\"\n    subsequences = []\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums) + 1):\n            subsequence = nums[i:j]\n            if sorted(subsequence) == subsequence and len(subsequence) == n:\n                subsequences.append(subsequence)\n    return len(subsequences) > 0",
        "solution_func": "def g(n=3):\n    return random.sample(range(1, 10), 10)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=15):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 249,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target=15):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=10):\n    return [1, 2, 3, 4]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 250,
        "target_skills": null,
        "problem_func": "from typing import*\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=20):\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 250,
        "target_skills": null,
        "problem_func": "from typing import*\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]",
        "solution_func": "def g(target=20):\n    return [2, 4, 6, 8, 10]",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=100):\n    return [10, 20, 30, 40]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 250,
        "target_skills": null,
        "problem_func": "from typing import*\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]",
        "solution_func": "def g(target=100):\n    return [10, 20, 30, 40]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(li: List[int], n=4) -> bool:\n    \"\"\"Given n, find n integers such that li[i] + li[i+1] == li[i+2], for i = 0, 1, ..., n-1\nwhere indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\nthat are multiples of 3 (as proven in the IMO problem).\nSample input:\n6\nSample output:\n[_, _, _, _, _, _]\n(Sample output hidden because showing sample output would give away too much information.)\"\"\"\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == li[(i + 1) % n] + li[i] for i in range(n)))\ndef g(n=4):\n    return [1, 1, 1, 1] * (n // 4)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 250,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(li: List[int], n=4) -> bool:\n    \"\"\"Given n, find n integers such that li[i] + li[i+1] == li[i+2], for i = 0, 1, ..., n-1\nwhere indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\nthat are multiples of 3 (as proven in the IMO problem).\nSample input:\n6\nSample output:\n[_, _, _, _, _, _]\n(Sample output hidden because showing sample output would give away too much information.)\"\"\"\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == li[(i + 1) % n] + li[i] for i in range(n)))",
        "solution_func": "def g(n=4):\n    return [1, 1, 1, 1] * (n // 4)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(n: int, scores=[32, 32, 31, 30, 25, 25, 21, 20, 17, 17, 16, 15, 15, 14, 11, 2, 0], k=4) -> bool:\n    \"\"\"Given a list of non-increasing integers and given an integer k, determine how many negative integers in the list\nare at least as large as the kth.\"\"\"\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return all((s >= scores[k] and s < 0 for s in scores[:n])) and all((s < scores[k] or s >= 0 for s in scores[n:]))\ndef g(scores=[32, 32, 31, 30, 25, 25, 21, 20, 17, 17, 16, 15, 15, 14, 11, 2, 0], k=4):\n    threshold = min(scores[k], -1)\n    return sum((s >= threshold for s in scores))\nassert f(g())\n",
        "emb": null,
        "idx_generation": 250,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, scores=[32, 32, 31, 30, 25, 25, 21, 20, 17, 17, 16, 15, 15, 14, 11, 2, 0], k=4) -> bool:\n    \"\"\"Given a list of non-increasing integers and given an integer k, determine how many negative integers in the list\nare at least as large as the kth.\"\"\"\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return all((s >= scores[k] and s < 0 for s in scores[:n])) and all((s < scores[k] or s >= 0 for s in scores[n:]))",
        "solution_func": "def g(scores=[32, 32, 31, 30, 25, 25, 21, 20, 17, 17, 16, 15, 15, 14, 11, 2, 0], k=4):\n    threshold = min(scores[k], -1)\n    return sum((s >= threshold for s in scores))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=127) -> bool:\n    \"\"\"Check if the given number is the bitwise OR of x and a\"\"\"\n    return x == x | a\ndef g(a=127):\n    return a\n\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            0.0,
            1.0
        ],
        "idx_generation": 250,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=127) -> bool:\n    \"\"\"Check if the given number is the bitwise OR of x and a\"\"\"\n    return x == x | a",
        "solution_func": "def g(a=127):\n    return a",
        "map_ix": [
            0,
            1,
            0,
            1,
            1,
            1,
            1,
            1,
            0,
            1
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that subtracts to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] - nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 250,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that subtracts to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] - nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiplies to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 250,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiplies to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that divides to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] / nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 250,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that divides to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] / nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(n: int, a=4, b=9) -> bool:\n    \"\"\"Check if n is a perfect square and is divisible by both a and b\"\"\"\n    return n ** 0.5 == int(n ** 0.5) and n % a == 0 and n % b == 0\n\ndef g(a=4, b=9):\n    return a * b\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 250,
        "target_skills": null,
        "problem_func": "from typing import*\n\ndef f(n: int, a=4, b=9) -> bool:\n    \"\"\"Check if n is a perfect square and is divisible by both a and b\"\"\"\n    return n ** 0.5 == int(n ** 0.5) and n % a == 0 and n % b == 0",
        "solution_func": "def g(a=4, b=9):\n    return a * b",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a target number, check if there exists a pair of numbers in the list that sums up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    nums = [2, 4, 6, 8]\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 251,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a target number, check if there exists a pair of numbers in the list that sums up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    nums = [2, 4, 6, 8]\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given string s has at least n occurrences of the letter 'a'\"\"\"\n    return s.count('a') >= n\n\ndef g(n=3):\n    s = \"banana\"\n    return s\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 251,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given string s has at least n occurrences of the letter 'a'\"\"\"\n    return s.count('a') >= n",
        "solution_func": "def g(n=3):\n    s = \"banana\"\n    return s",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(li: List[int], n=5) -> bool:\n    \"\"\"Given n, check if there exists a subsequence of length n in the list such that the sum of its elements is equal to n\"\"\"\n    from itertools import combinations\n    for subset in combinations(li, n):\n        if sum(subset) == n:\n            return True\n    return False\n\ndef g(n=5):\n    li = [1, 2, 3, 4, 5]\n    return li\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 251,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(li: List[int], n=5) -> bool:\n    \"\"\"Given n, check if there exists a subsequence of length n in the list such that the sum of its elements is equal to n\"\"\"\n    from itertools import combinations\n    for subset in combinations(li, n):\n        if sum(subset) == n:\n            return True\n    return False",
        "solution_func": "def g(n=5):\n    li = [1, 2, 3, 4, 5]\n    return li",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list 'nums' whose sum is equal to the target_sum.\"\"\"\n    return any((nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums))))\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g(), target_sum=10)\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 251,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list 'nums' whose sum is equal to the target_sum.\"\"\"\n    return any((nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums))))",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_diff=5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list 'nums' whose difference is less than or equal to the target_diff.\"\"\"\n    return any((abs(nums[i] - nums[j]) <= target_diff for i in range(len(nums)) for j in range(i + 1, len(nums))))\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g(), target_diff=5)\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 251,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_diff=5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list 'nums' whose difference is less than or equal to the target_diff.\"\"\"\n    return any((abs(nums[i] - nums[j]) <= target_diff for i in range(len(nums)) for j in range(i + 1, len(nums))))",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target_product=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list 'nums' whose product is equal to the target_product.\"\"\"\n    return any((nums[i] * nums[j] == target_product for i in range(len(nums)) for j in range(i + 1, len(nums))))\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g(), target_product=100)\n",
        "emb": null,
        "idx_generation": 251,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target_product=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list 'nums' whose product is equal to the target_product.\"\"\"\n    return any((nums[i] * nums[j] == target_product for i in range(len(nums)) for j in range(i + 1, len(nums))))",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any(target - num in nums for num in nums)\n\ndef g(target=15):\n    return [3, 5, 7, 9, 11]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 251,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any(target - num in nums for num in nums)",
        "solution_func": "def g(target=15):\n    return [3, 5, 7, 9, 11]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any(target - num in nums for num in nums)\n\ndef g(target=20):\n    return [2, 4, 6, 8, 10, 12]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 251,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any(target - num in nums for num in nums)",
        "solution_func": "def g(target=20):\n    return [2, 4, 6, 8, 10, 12]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any(target - num in nums for num in nums)\n\ndef g(target=5):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 251,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any(target - num in nums for num in nums)",
        "solution_func": "def g(target=5):\n    return [1, 2, 3, 4, 5]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are three numbers in the list that adds up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 251,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are three numbers in the list that adds up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=67) -> bool:\n    \"\"\"Given a list of integers and a target value, find two numbers in the list that add up to the target.\n    Return True if such numbers exist, False otherwise.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=67):\n    return [23, 45, 12, 34, 56, 78, 89, 90, 43, 21]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 252,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=67) -> bool:\n    \"\"\"Given a list of integers and a target value, find two numbers in the list that add up to the target.\n    Return True if such numbers exist, False otherwise.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=67):\n    return [23, 45, 12, 34, 56, 78, 89, 90, 43, 21]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Given a matrix of integers and a target value, check if the target value exists in the matrix.\n    The matrix is sorted row-wise and column-wise in ascending order.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    row = 0\n    col = cols - 1\n    while row < rows and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    return False\ndef g(target=15):\n    return [[1, 4, 9, 12],\n            [2, 5, 10, 13],\n            [3, 6, 11, 14],\n            [7, 8, 15, 16]]\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 252,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Given a matrix of integers and a target value, check if the target value exists in the matrix.\n    The matrix is sorted row-wise and column-wise in ascending order.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    row = 0\n    col = cols - 1\n    while row < rows and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    return False",
        "solution_func": "def g(target=15):\n    return [[1, 4, 9, 12],\n            [2, 5, 10, 13],\n            [3, 6, 11, 14],\n            [7, 8, 15, 16]]",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"Given two strings s and t, check if t is an anagram of s.\"\"\"\n    return sorted(s) == sorted(t)\ndef g():\n    return \"listen\", \"silent\"\nassert f(*g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 252,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"Given two strings s and t, check if t is an anagram of s.\"\"\"\n    return sorted(s) == sorted(t)",
        "solution_func": "def g():\n    return \"listen\", \"silent\"",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the number 0 exactly three times.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, found_zero):\n        if i == rows - 1 and j == cols - 1 and found_one:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            found_zero += 1\n            if found_zero > 3:\n                return False\n        if nums[i][j] == 1:\n            found_one = True\n        return helper(i+1, j, found_one, found_zero) or helper(i, j+1, found_one, found_zero)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[1, 0, 0], [1, 1, 0], [0, 1, 1]]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 252,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the number 0 exactly three times.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, found_zero):\n        if i == rows - 1 and j == cols - 1 and found_one:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            found_zero += 1\n            if found_zero > 3:\n                return False\n        if nums[i][j] == 1:\n            found_one = True\n        return helper(i+1, j, found_one, found_zero) or helper(i, j+1, found_one, found_zero)\n\n    return helper(0, 0, False, 0)",
        "solution_func": "def g(nums=[[1, 0, 0], [1, 1, 0], [0, 1, 1]]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            1,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and all the numbers in the path must be even.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, all_even):\n        if i == rows - 1 and j == cols - 1 and found_one and all_even:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if nums[i][j] % 2 != 0:\n            all_even = False\n        return helper(i+1, j, found_one, all_even) or helper(i, j+1, found_one, all_even)\n\n    return helper(0, 0, False, True)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 6, 1]]):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 252,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and all the numbers in the path must be even.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, all_even):\n        if i == rows - 1 and j == cols - 1 and found_one and all_even:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if nums[i][j] % 2 != 0:\n            all_even = False\n        return helper(i+1, j, found_one, all_even) or helper(i, j+1, found_one, all_even)\n\n    return helper(0, 0, False, True)",
        "solution_func": "def g(nums=[[1, 0, 0], [2, 4, 0], [0, 6, 1]]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and every number in the path must be a power of 2.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one):\n        if i == rows - 1 and j == cols - 1 and found_one:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if not is_power_of_two(nums[i][j]):\n            return False\n        return helper(i+1, j, found_one) or helper(i, j+1, found_one)\n\n    return helper(0, 0, False)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\ndef is_power_of_two(n):\n    return n > 0 and (n & (n - 1)) == 0\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 252,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and every number in the path must be a power of 2.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one):\n        if i == rows - 1 and j == cols - 1 and found_one:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if not is_power_of_two(nums[i][j]):\n            return False\n        return helper(i+1, j, found_one) or helper(i, j+1, found_one)\n\n    return helper(0, 0, False)",
        "solution_func": "def g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\ndef is_power_of_two(n):\n    return n > 0 and (n & (n - 1)) == 0",
        "map_ix": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, edges=[[3, 5], [2, 1], [4, 5], [3, 6], [6, 7], [5, 3], [4, 3], [6, 2], [5, 2], [7, 0], [3, 4], [0, 5], [0, 0], [1, 0], [0, 2], [3, 1]]) -> bool:\n    \"\"\"Determine if a node with a given number 'n' exists in the graph.\"\"\"\n    return any(n in edge for edge in edges)\n\ndef g(edges=[[3, 5], [2, 1], [4, 5], [3, 6], [6, 7], [5, 3], [4, 3], [6, 2], [5, 2], [7, 0], [3, 4], [0, 5], [0, 0], [1, 0], [0, 2], [3, 1]]):\n    n = max((max(edge) for edge in edges))\n    return n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 252,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, edges=[[3, 5], [2, 1], [4, 5], [3, 6], [6, 7], [5, 3], [4, 3], [6, 2], [5, 2], [7, 0], [3, 4], [0, 5], [0, 0], [1, 0], [0, 2], [3, 1]]) -> bool:\n    \"\"\"Determine if a node with a given number 'n' exists in the graph.\"\"\"\n    return any(n in edge for edge in edges)",
        "solution_func": "def g(edges=[[3, 5], [2, 1], [4, 5], [3, 6], [6, 7], [5, 3], [4, 3], [6, 2], [5, 2], [7, 0], [3, 4], [0, 5], [0, 0], [1, 0], [0, 2], [3, 1]]):\n    n = max((max(edge) for edge in edges))\n    return n",
        "map_ix": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(path: List[int], edges=[[3, 5], [2, 1], [4, 5], [3, 6], [6, 7], [5, 3], [4, 3], [6, 2], [5, 2], [7, 0], [3, 4], [0, 5], [0, 0], [1, 0], [0, 2], [3, 1]]) -> bool:\n    \"\"\"Find the shortest path from node 0 to node n in a given digraph on vertices 0, 1,..., n.\"\"\"\n    distances = {0: 0}\n    for _ in range(len(path) - 1):\n        for (i, j) in edges:\n            if i in distances:\n                if j not in distances:\n                    distances[j] = distances[i] + 1\n                else:\n                    distances[j] = min(distances[j], distances[i] + 1)\n    return distances.get(max((max(edge) for edge in edges)))\n\ndef g(edges=[[3, 5], [2, 1], [4, 5], [3, 6], [6, 7], [5, 3], [4, 3], [6, 2], [5, 2], [7, 0], [3, 4], [0, 5], [0, 0], [1, 0], [0, 2], [3, 1]]):\n    n = max((max(edge) for edge in edges))\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for (i, j) in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 252,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(path: List[int], edges=[[3, 5], [2, 1], [4, 5], [3, 6], [6, 7], [5, 3], [4, 3], [6, 2], [5, 2], [7, 0], [3, 4], [0, 5], [0, 0], [1, 0], [0, 2], [3, 1]]) -> bool:\n    \"\"\"Find the shortest path from node 0 to node n in a given digraph on vertices 0, 1,..., n.\"\"\"\n    distances = {0: 0}\n    for _ in range(len(path) - 1):\n        for (i, j) in edges:\n            if i in distances:\n                if j not in distances:\n                    distances[j] = distances[i] + 1\n                else:\n                    distances[j] = min(distances[j], distances[i] + 1)\n    return distances.get(max((max(edge) for edge in edges)))",
        "solution_func": "def g(edges=[[3, 5], [2, 1], [4, 5], [3, 6], [6, 7], [5, 3], [4, 3], [6, 2], [5, 2], [7, 0], [3, 4], [0, 5], [0, 0], [1, 0], [0, 2], [3, 1]]):\n    n = max((max(edge) for edge in edges))\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for (i, j) in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the string 's' is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"madam\"\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 252,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the string 's' is a palindrome.\"\"\"\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"madam\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, num_dice=1, num_sides=6) -> bool:\n    \"\"\"Find n such that the probability of rolling a sum of 7 with num_dice dice of num_sides sides is near 1/6.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    count = 0\n    for i in range(K):\n        dice_sum = sum(random.randint(1, num_sides) for _ in range(num_dice))\n        if dice_sum == 7:\n            count += 1\n    prob = count / K\n    return (prob - 1/6) ** 2 <= 1/36\ndef g(num_dice=1, num_sides=6):\n    n = 1\n    prob = 0\n    best = (1/6, 1)\n    while prob < 1/6:\n        num_ways = num_sides ** num_dice\n        num_successful_outcomes = 0\n        for i in range(num_dice, 6 * num_dice + 1):\n            num_successful_outcomes += comb(i-1, num_dice-1)\n        prob = num_successful_outcomes / num_ways\n        n += 1\n        best = min(best, (abs(1/6 - prob), n))\n    return best[1]\nassert f(g())\n",
        "emb": null,
        "idx_generation": 252,
        "target_skills": null,
        "problem_func": "import random\nfrom typing import*\ndef f(n: int, num_dice=1, num_sides=6) -> bool:\n    \"\"\"Find n such that the probability of rolling a sum of 7 with num_dice dice of num_sides sides is near 1/6.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    count = 0\n    for i in range(K):\n        dice_sum = sum(random.randint(1, num_sides) for _ in range(num_dice))\n        if dice_sum == 7:\n            count += 1\n    prob = count / K\n    return (prob - 1/6) ** 2 <= 1/36",
        "solution_func": "def g(num_dice=1, num_sides=6):\n    n = 1\n    prob = 0\n    best = (1/6, 1)\n    while prob < 1/6:\n        num_ways = num_sides ** num_dice\n        num_successful_outcomes = 0\n        for i in range(num_dice, 6 * num_dice + 1):\n            num_successful_outcomes += comb(i-1, num_dice-1)\n        prob = num_successful_outcomes / num_ways\n        n += 1\n        best = min(best, (abs(1/6 - prob), n))\n    return best[1]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that add up to the target value.\"\"\"\n    return any((numbers[i] + numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 253,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that add up to the target value.\"\"\"\n    return any((numbers[i] + numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))",
        "solution_func": "def g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list such that their difference is equal to the target value.\"\"\"\n    return any((numbers[i] - numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\nassert f(g())\n",
        "emb": null,
        "idx_generation": 253,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list such that their difference is equal to the target value.\"\"\"\n    return any((numbers[i] - numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))",
        "solution_func": "def g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list such that their division results in the target value.\"\"\"\n    return any((numbers[i] / numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\nassert f(g())\n",
        "emb": null,
        "idx_generation": 253,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list such that their division results in the target value.\"\"\"\n    return any((numbers[i] / numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))",
        "solution_func": "def g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find three numbers in the list 'nums' that have a sum greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] > target:\n                    return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 253,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find three numbers in the list 'nums' that have a sum greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] > target:\n                    return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two consecutive numbers in the list 'nums' whose sum is greater than the target value.\"\"\"\n    for i in range(len(nums) - 1):\n        if nums[i] + nums[i + 1] > target:\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 253,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two consecutive numbers in the list 'nums' whose sum is greater than the target value.\"\"\"\n    for i in range(len(nums) - 1):\n        if nums[i] + nums[i + 1] > target:\n            return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if the list 'nums' contains any number that is a multiple of the target value.\"\"\"\n    for num in nums:\n        if num % target == 0:\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], target=10):\n    return nums, target\n\nassert f(*g())\n",
        "emb": null,
        "idx_generation": 253,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if the list 'nums' contains any number that is a multiple of the target value.\"\"\"\n    for num in nums:\n        if num % target == 0:\n            return True\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], target=10):\n    return nums, target",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers from the list that sums up to the target value.\"\"\"\n    return any((x + y == target for x in nums for y in nums if x != y))\ndef g(nums: List[int]):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 253,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers from the list that sums up to the target value.\"\"\"\n    return any((x + y == target for x in nums for y in nums if x != y))",
        "solution_func": "def g(nums: List[int]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(n: int, nums=[10, 20, 30, 40, 50], target=100) -> bool:\n    \"\"\"Find a combination of n numbers from the list that sums up to the target value.\"\"\"\n    from itertools import combinations\n    return any((sum(comb) == target for comb in combinations(nums, n)))\ndef g(nums=[10, 20, 30, 40, 50]):\n    return len(nums) // 2\nassert f(g())\n",
        "emb": null,
        "idx_generation": 253,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(n: int, nums=[10, 20, 30, 40, 50], target=100) -> bool:\n    \"\"\"Find a combination of n numbers from the list that sums up to the target value.\"\"\"\n    from itertools import combinations\n    return any((sum(comb) == target for comb in combinations(nums, n)))",
        "solution_func": "def g(nums=[10, 20, 30, 40, 50]):\n    return len(nums) // 2",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a subarray in the list that sums up to the target value.\"\"\"\n    for i in range(len(nums)):\n        sub_sum = 0\n        for j in range(i, len(nums)):\n            sub_sum += nums[j]\n            if sub_sum == target:\n                return True\n    return False\ndef g(nums: List[int]):\n    return nums\nassert f(g())\n",
        "emb": null,
        "idx_generation": 253,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a subarray in the list that sums up to the target value.\"\"\"\n    for i in range(len(nums)):\n        sub_sum = 0\n        for j in range(i, len(nums)):\n            sub_sum += nums[j]\n            if sub_sum == target:\n                return True\n    return False",
        "solution_func": "def g(nums: List[int]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n=10) -> bool:\n    \"\"\"Check if the list contains n distinct even numbers\"\"\"\n    return len(set(arr)) == n and all((num % 2 == 0 for num in arr))\ndef g(n=10):\n    return list(range(2, 2*n+1, 2))\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 253,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(arr: List[int], n=10) -> bool:\n    \"\"\"Check if the list contains n distinct even numbers\"\"\"\n    return len(set(arr)) == n and all((num % 2 == 0 for num in arr))",
        "solution_func": "def g(n=10):\n    return list(range(2, 2*n+1, 2))",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains a subarray with a sum of zero\"\"\"\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            subarray = nums[i:j+1]\n            if sum(subarray) == 0:\n                return True\n    return False\n\ndef g():\n    return [1, -2, 3, 4, -5]\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 254,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains a subarray with a sum of zero\"\"\"\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            subarray = nums[i:j+1]\n            if sum(subarray) == 0:\n                return True\n    return False",
        "solution_func": "def g():\n    return [1, -2, 3, 4, -5]",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=42) -> bool:\n    \"\"\"Find the number of steps required to reach the target number by repeatedly subtracting the largest power of 2\"\"\"\n    steps = 0\n    while n > target:\n        n = n - 2**int(n).bit_length()\n        steps += 1\n    return steps\n\ndef g(target=42):\n    return 100\n\nassert f(g())\n",
        "emb": [
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 254,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int, target=42) -> bool:\n    \"\"\"Find the number of steps required to reach the target number by repeatedly subtracting the largest power of 2\"\"\"\n    steps = 0\n    while n > target:\n        n = n - 2**int(n).bit_length()\n        steps += 1\n    return steps",
        "solution_func": "def g(target=42):\n    return 100",
        "map_ix": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, prefix='abc') -> bool:\n    \"\"\"Check if the given string starts with a specific prefix\"\"\"\n    return string.startswith(prefix)\n\ndef g(prefix='abc'):\n    return \"abcdef\"\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 254,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(string: str, prefix='abc') -> bool:\n    \"\"\"Check if the given string starts with a specific prefix\"\"\"\n    return string.startswith(prefix)",
        "solution_func": "def g(prefix='abc'):\n    return \"abcdef\"",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(matrix: List[List[int]], n=4, target=34) -> bool:\n    \"\"\"Determine if a given matrix is a magic square of size n.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2]) and target % 2 != 0\n\ndef g(n=4, target=34):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix\n    assert False, f\"No magic square found for n={n}\"\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 254,
        "target_skills": null,
        "problem_func": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(matrix: List[List[int]], n=4, target=34) -> bool:\n    \"\"\"Determine if a given matrix is a magic square of size n.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2]) and target % 2 != 0",
        "solution_func": "def g(n=4, target=34):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(matrix: List[List[int]], n=5, target=65) -> bool:\n    \"\"\"Determine if a given matrix is a magic square of size n.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2]) and target % 2 != 0\n\ndef g(n=5, target=65):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix\n    assert False, f\"No magic square found for n={n}\"\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 254,
        "target_skills": null,
        "problem_func": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(matrix: List[List[int]], n=5, target=65) -> bool:\n    \"\"\"Determine if a given matrix is a magic square of size n.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2]) and target % 2 != 0",
        "solution_func": "def g(n=5, target=65):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(matrix: List[List[int]], n=6, target=111) -> bool:\n    \"\"\"Determine if a given matrix is a magic square of size n.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2]) and target % 2 != 0\n\ndef g(n=6, target=111):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix\n    assert False, f\"No magic square found for n={n}\"\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 254,
        "target_skills": null,
        "problem_func": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(matrix: List[List[int]], n=6, target=111) -> bool:\n    \"\"\"Determine if a given matrix is a magic square of size n.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2]) and target % 2 != 0",
        "solution_func": "def g(n=6, target=111):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target, and the subarray length is greater than 1.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 254,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target, and the subarray length is greater than 1.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5]",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target, and the subarray length is less than or equal to 3.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target and j-i <= 3:\n                return True\n    return False\n\ndef g(target=50):\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        "idx_generation": 254,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target, and the subarray length is less than or equal to 3.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target and j-i <= 3:\n                return True\n    return False",
        "solution_func": "def g(target=50):\n    return [10, 20, 30, 40, 50]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target, and the subarray length is equal to 4.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target and j-i == 4:\n                return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7]\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 254,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target, and the subarray length is equal to 4.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target and j-i == 4:\n                return True\n    return False",
        "solution_func": "def g(target=0):\n    return [1, 2, 3, 4, 5, 6, 7]",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the target number is present in the list of numbers.\"\"\"\n    return target in nums\n\ndef g(nums: List[int], target: int):\n    return nums, target\n\nassert f(g([1, 2, 3, 4, 5], 3))\n",
        "emb": null,
        "idx_generation": 254,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the target number is present in the list of numbers.\"\"\"\n    return target in nums",
        "solution_func": "def g(nums: List[int], target: int):\n    return nums, target",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find a list of more than 1000 distinct integers between 1 and 10000, inclusive, such that the sum of any two integers in the list is divisible by 5.\"\"\"\n    return all(((i + j) % 5 == 0 for i in nums for j in nums if i != j)) and len(set(nums)) > 1000\n\ndef g():\n    return [5, 10] + list(range(15, 10001))\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 255,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find a list of more than 1000 distinct integers between 1 and 10000, inclusive, such that the sum of any two integers in the list is divisible by 5.\"\"\"\n    return all(((i + j) % 5 == 0 for i in nums for j in nums if i != j)) and len(set(nums)) > 1000",
        "solution_func": "def g():\n    return [5, 10] + list(range(15, 10001))",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers, find if there exist four numbers whose sum is equal to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                for l in range(k+1, len(nums)):\n                    if nums[i] + nums[j] + nums[k] + nums[l] == target:\n                        return True\n    return False\n\ndef g():\n    return [2, 5, 7, 11, 3, 9, 4, 6]\n\nassert f(g(), 30)\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 255,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers, find if there exist four numbers whose sum is equal to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                for l in range(k+1, len(nums)):\n                    if nums[i] + nums[j] + nums[k] + nums[l] == target:\n                        return True\n    return False",
        "solution_func": "def g():\n    return [2, 5, 7, 11, 3, 9, 4, 6]",
        "map_ix": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n",
        "emb": [
            1.0,
            1.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0
        ],
        "idx_generation": 255,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "map_ix": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0
        ]
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, max_nums=3, options=[10, 20, 30, 40, 50]) -> bool:\n    \"\"\"Find a combination of at most max_nums numbers whose sum is the target value\"\"\"\n    for num in nums:\n        assert num in options\n    return len(nums) <= max_nums and sum(nums) == target\ndef g(target=100, max_nums=3, options=[10, 20, 30, 40, 50]):\n    from itertools import combinations\n    for n in range(1, max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n",
        "emb": [
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 255,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, max_nums=3, options=[10, 20, 30, 40, 50]) -> bool:\n    \"\"\"Find a combination of at most max_nums numbers whose sum is the target value\"\"\"\n    for num in nums:\n        assert num in options\n    return len(nums) <= max_nums and sum(nums) == target",
        "solution_func": "def g(target=100, max_nums=3, options=[10, 20, 30, 40, 50]):\n    from itertools import combinations\n    for n in range(1, max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)",
        "map_ix": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=75, max_nums=4, options=[8, 12, 16, 20, 24]) -> bool:\n    \"\"\"Find a combination of at most max_nums numbers whose sum is the target value\"\"\"\n    for num in nums:\n        assert num in options\n    return len(nums) <= max_nums and sum(nums) == target\ndef g(target=75, max_nums=4, options=[8, 12, 16, 20, 24]):\n    from itertools import combinations\n    for n in range(1, max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 255,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=75, max_nums=4, options=[8, 12, 16, 20, 24]) -> bool:\n    \"\"\"Find a combination of at most max_nums numbers whose sum is the target value\"\"\"\n    for num in nums:\n        assert num in options\n    return len(nums) <= max_nums and sum(nums) == target",
        "solution_func": "def g(target=75, max_nums=4, options=[8, 12, 16, 20, 24]):\n    from itertools import combinations\n    for n in range(1, max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=90, max_nums=6, options=[3, 6, 9, 12, 15]) -> bool:\n    \"\"\"Find a combination of at most max_nums numbers whose sum is the target value\"\"\"\n    for num in nums:\n        assert num in options\n    return len(nums) <= max_nums and sum(nums) == target\ndef g(target=90, max_nums=6, options=[3, 6, 9, 12, 15]):\n    from itertools import combinations\n    for n in range(1, max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n",
        "emb": null,
        "idx_generation": 255,
        "target_skills": null,
        "problem_func": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=90, max_nums=6, options=[3, 6, 9, 12, 15]) -> bool:\n    \"\"\"Find a combination of at most max_nums numbers whose sum is the target value\"\"\"\n    for num in nums:\n        assert num in options\n    return len(nums) <= max_nums and sum(nums) == target",
        "solution_func": "def g(target=90, max_nums=6, options=[3, 6, 9, 12, 15]):\n    from itertools import combinations\n    for n in range(1, max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)",
        "map_ix": null
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target number\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7]):\n    return nums\n\nassert f(g())\n",
        "emb": null,
        "idx_generation": 255,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target number\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> int:\n    \"\"\"Find the maximum product of two distinct numbers in a given list of integers\"\"\"\n    max_product = float('-inf')\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7]):\n    return nums\n\nassert f(g()) == 42\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 255,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> int:\n    \"\"\"Find the maximum product of two distinct numbers in a given list of integers\"\"\"\n    max_product = float('-inf')\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n    return max_product",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7]):\n    return nums",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    },
    {
        "fitness": -Infinity,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> List[int]:\n    \"\"\"Find a pair of numbers in the list whose sum is equal to the target number\"\"\"\n    complement = {}\n    for i, num in enumerate(nums):\n        if num in complement:\n            return [complement[num], i]\n        complement[target - num] = i\n    return []\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7]):\n    return nums\n\nassert f(g()) == [3, 4]\n",
        "emb": null,
        "idx_generation": 255,
        "target_skills": null,
        "problem_func": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> List[int]:\n    \"\"\"Find a pair of numbers in the list whose sum is equal to the target number\"\"\"\n    complement = {}\n    for i, num in enumerate(nums):\n        if num in complement:\n            return [complement[num], i]\n        complement[target - num] = i\n    return []",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7]):\n    return nums",
        "map_ix": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=123456789) -> bool:\n    \"\"\"Check if the absolute value of x is equal to a\"\"\"\n    return abs(x) == a\n\ndef g(a=123456789):\n    return a\n\nassert f(g())\n",
        "emb": [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "idx_generation": 255,
        "target_skills": null,
        "problem_func": "from typing import*\ndef f(x: int, a=123456789) -> bool:\n    \"\"\"Check if the absolute value of x is equal to a\"\"\"\n    return abs(x) == a",
        "solution_func": "def g(a=123456789):\n    return a",
        "map_ix": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    }
]