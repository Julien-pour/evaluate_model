[
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one):\n        if i == rows - 1 and j == cols - 1 and found_one:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        return helper(i+1, j, found_one or nums[i][j] == 1) or helper(i, j+1, found_one or nums[i][j] == 1)\n\n    return helper(0, 0, False)\n\ndef g(nums=[[1, 0, 0], [1, 1, 0], [0, 1, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 246,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the sum of all positive numbers in the path must be greater than or equal to the sum of all negative numbers in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, positive_sum, negative_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and positive_sum >= negative_sum:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if nums[i][j] > 0:\n            positive_sum += nums[i][j]\n        else:\n            negative_sum += nums[i][j]\n        return helper(i+1, j, found_one, positive_sum, negative_sum) or helper(i, j+1, found_one, positive_sum, negative_sum)\n\n    return helper(0, 0, False, 0, 0)\n\ndef g(nums=[[1, 0, 0], [-2, 4, 0], [0, -8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 288,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the number 0 exactly four times.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, found_zero):\n        if i == rows - 1 and j == cols - 1 and found_one:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            found_zero += 1\n            if found_zero > 4:\n                return False\n        if nums[i][j] == 1:\n            found_one = True\n        return helper(i+1, j, found_one, found_zero) or helper(i, j+1, found_one, found_zero)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[1, 0, 0], [1, 1, 0], [0, 1, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 293,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the sum of all even numbers in the path must be greater than or equal to the sum of all odd numbers in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, even_sum, odd_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and even_sum >= odd_sum:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if nums[i][j] % 2 == 0:\n            even_sum += nums[i][j]\n        else:\n            odd_sum += nums[i][j]\n        return helper(i+1, j, found_one, even_sum, odd_sum) or helper(i, j+1, found_one, even_sum, odd_sum)\n\n    return helper(0, 0, False, 0, 0)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 281,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(words: List[str], prefix=\"s\") -> bool:\n    \"\"\"Check if any word in the list starts with the given prefix.\"\"\"\n    return any(word.startswith(prefix) for word in words)\ndef g(words=[\"sun\", \"moon\", \"star\", \"sky\"]):\n    return words\n\nassert f(g())\n",
        "idx_generation": 130,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='kibozekiboze', target='') -> bool:\n    \"\"\"Find the three slice indices that give the specific target in string s\"\"\"\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s='kibozekiboze', target=''):\n    from itertools import product\n    for (i, j, k) in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g())\n",
        "idx_generation": 61,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='programming', length=5) -> bool:\n    \"\"\"Find a substring of the given length centered within the target string.\"\"\"\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s\ndef g(target='programming', length=5):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]\nassert f(g())\n",
        "idx_generation": 181,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=2, b=3) -> bool:\n    \"\"\"Check if the given number is the bitwise AND of x, a, and b\"\"\"\n    return x == x & a & b\ndef g(a=2, b=3):\n    return a\n\nassert f(g())\n",
        "idx_generation": 461,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and every number in the path must be a power of 2.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one):\n        if i == rows - 1 and j == cols - 1 and found_one:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if not is_power_of_two(nums[i][j]):\n            return False\n        return helper(i+1, j, found_one) or helper(i, j+1, found_one)\n\n    return helper(0, 0, False)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\ndef is_power_of_two(n):\n    return n > 0 and (n & (n - 1)) == 0\n\nassert f(g())\n",
        "idx_generation": 252,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers. You can only move down or right in the grid. The path must contain the number 2 at least once and the product of all numbers along the path must be a prime number.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def helper(i, j, found_two, path_product):\n        if i == rows - 1 and j == cols - 1 and found_two and is_prime(path_product):\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            found_two = True\n        path_product *= nums[i][j]\n        return helper(i+1, j, found_two, path_product) or helper(i, j+1, found_two, path_product)\n\n    return helper(0, 0, False, 1)\n\ndef g(nums=[[1, 2, 1], [3, 2, 1], [1, 3, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 495,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, n=7) -> bool:\n    \"\"\"Check if a number is divisible by n.\"\"\"\n    return x % n == 0\ndef g(n=7):\n    return n * 9\nassert f(g())\n",
        "idx_generation": 7,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, year=2022) -> bool:\n    \"\"\"Check if the given date is in the specified year\"\"\"\n    return date.year == year\ndef g(year=2022):\n    return datetime.date(year, 1, 1)\n\nassert f(g())\n",
        "idx_generation": 84,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the number 0 exactly three times.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, found_zero):\n        if i == rows - 1 and j == cols - 1 and found_one:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            found_zero += 1\n            if found_zero > 3:\n                return False\n        if nums[i][j] == 1:\n            found_one = True\n        return helper(i+1, j, found_one, found_zero) or helper(i, j+1, found_one, found_zero)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[1, 0, 0], [1, 1, 0], [0, 1, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 252,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]], threshold=5) -> bool:\n    \"\"\"Check if any point in the list is outside the threshold distance from the origin.\"\"\"\n    return any((x ** 2 + y ** 2) ** 0.5 > threshold for x, y in points)\ndef g(threshold=5):\n    return [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]\nassert f(g())\n\n",
        "idx_generation": 69,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the sum of all positive numbers in the path must be greater than or equal to the sum of all negative numbers in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, positive_sum, negative_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and positive_sum >= negative_sum:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if nums[i][j] > 0:\n            positive_sum += nums[i][j]\n        else:\n            negative_sum += nums[i][j]\n        return helper(i+1, j, found_one, positive_sum, negative_sum) or helper(i, j+1, found_one, positive_sum, negative_sum)\n\n    return helper(0, 0, False, 0, 0)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, -8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 374,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=127) -> bool:\n    \"\"\"Check if the given number is the bitwise OR of x and a\"\"\"\n    return x == x | a\ndef g(a=127):\n    return a\n\nassert f(g())\n",
        "idx_generation": 429,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=2) -> bool:\n    \"\"\"What are the first two digits of 2^n?\"\"\"\n    return int(s) == 2 ** n\n\ndef g(n=2):\n    return str(2 ** n)[:2]\nassert f(g())\n",
        "idx_generation": 188,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == 8\ndef g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == 8:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[str]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of strings.\n    You can only move down or right in the grid. The path must contain the string 'end' at least once and the string 'start' exactly three times.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_end, found_start):\n        if i == rows - 1 and j == cols - 1 and found_end:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 'start':\n            found_start += 1\n            if found_start > 3:\n                return False\n        if nums[i][j] == 'end':\n            found_end = True\n        return helper(i+1, j, found_end, found_start) or helper(i, j+1, found_end, found_start)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[['start', 'path', 'path'], ['path', 'end', 'path'], ['path', 'start', 'end']]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 360,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the sum of all elements in the path must be divisible by 3.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and path_sum % 3 == 0:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_one, path_sum) or helper(i, j+1, found_one, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 392,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers. You can only move down or right in the grid. The path must contain the number 2 at least once and the sum of all numbers along the path must be divisible by 3.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_two, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_two and path_sum % 3 == 0:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            found_two = True\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_two, path_sum) or helper(i, j+1, found_two, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[2, 1, 1], [3, 2, 1], [1, 3, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 361,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(tour: List[List[int]], m=6, n=6) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == 2*(m+n)\n\ndef g(m=6, n=6):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == 2*(m+n):\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 295,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and every number in the path must be a power of 2.\n    \"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one):\n        if i == rows - 1 and j == cols - 1 and found_one:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if not is_power_of_two(nums[i][j]):\n            return False\n        return helper(i+1, j, found_one) or helper(i, j+1, found_one)\n\n    return helper(0, 0, False)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\ndef is_power_of_two(n):\n    return n > 0 and (n & (n - 1)) == 0\n\nassert f(g())\n",
        "idx_generation": 406,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers. You can only move down or right in the grid. The path must contain the number 2 at least once and the difference between the maximum and minimum numbers along the path must be a prime number.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def helper(i, j, found_two, path_max, path_min):\n        if i == rows - 1 and j == cols - 1 and found_two and is_prime(path_max - path_min):\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            found_two = True\n        path_max = max(path_max, nums[i][j])\n        path_min = min(path_min, nums[i][j])\n        return helper(i+1, j, found_two, path_max, path_min) or helper(i, j+1, found_two, path_max, path_min)\n\n    return helper(0, 0, False, float('-inf'), float('inf'))\n\ndef g(nums=[[2, 1, 1], [3, 2, 1], [1, 3, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 399,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if it is possible to find a combination of numbers that multiplies to the target number.\"\"\"\n    def helper(numbers, target):\n        if target == 1:\n            return True\n        if target < 1 or len(numbers) == 0:\n            return False\n        if target % numbers[0] == 0:\n            return helper(numbers[1:], target // numbers[0]) or helper(numbers[1:], target)\n        else:\n            return helper(numbers[1:], target)\n    return helper(numbers, target)\n\ndef g():\n    return [2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 243,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[11, 23, 35, 47, 59, 71, 83, 95, 107, 119], target_sum=330) -> bool:\n    \"\"\"Find if there exists a combination of numbers from the list that adds up to the target sum\"\"\"\n    def subset_sum(nums, n, target_sum):\n        if target_sum == 0:\n            return True\n        if n == 0 and target_sum != 0:\n            return False\n        if nums[n-1] > target_sum:\n            return subset_sum(nums, n-1, target_sum)\n        return subset_sum(nums, n-1, target_sum) or subset_sum(nums, n-1, target_sum-nums[n-1])\n    return subset_sum(nums, len(nums), target_sum)\ndef g(nums=[11, 23, 35, 47, 59, 71, 83, 95, 107, 119], target_sum=330):\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums)))\nassert f(g())\n",
        "idx_generation": 12,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 2 at least once and the number 1 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_two, found_one):\n        if i == rows - 1 and j == cols - 1 and found_two:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one += 1\n            if found_one > 2:\n                return False\n        if nums[i][j] == 2:\n            found_two = True\n        return helper(i+1, j, found_two, found_one) or helper(i, j+1, found_two, found_one)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[2, 0, 0], [1, 2, 0], [0, 1, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 363,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 3 at least once and the number 1 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_three, found_one):\n        if i == rows - 1 and j == cols - 1 and found_three:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one += 1\n            if found_one > 2:\n                return False\n        if nums[i][j] == 3:\n            found_three = True\n        return helper(i+1, j, found_three, found_one) or helper(i, j+1, found_three, found_one)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[3, 0, 0], [1, 3, 0], [0, 1, 3]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 415,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(inds: List[int], string='hellothere') -> bool:\n    \"\"\"Find increasing indices to make the substring \"there\" (with a surprise twist)\"\"\"\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'there'\ndef g(string='hellothere'):\n    target = 'there'\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans\nassert f(g())\n",
        "idx_generation": 70,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='abcdefghi', target='') -> bool:\n    \"\"\"Find the two slice indices that give the specific target in string s\"\"\"\n    (i, j) = inds\n    return s[i:j] == target\ndef g(s='abcdefghi', target=''):\n    from itertools import product\n    for (i, j) in product(range(-len(s) - 1, len(s) + 1), repeat=2):\n        try:\n            if s[i:j] == target:\n                return [i, j]\n        except (IndexError, ValueError):\n            pass\nassert f(g())\n",
        "idx_generation": 136,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if it is possible to obtain the target sum by adding a subset of the given numbers in the list.\"\"\"\n    n = len(arr)\n    for i in range(1 << n):\n        subset_sum = sum(arr[j] for j in range(n) if (i & (1 << j)) != 0)\n        if subset_sum == target:\n            return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 473,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\nimport itertools\n\ndef f(nums: List[int], target: int, k: int) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose sum of elements is equal to the target number,\n    and the length of the subsequence is equal to k.\"\"\"\n    for r in range(1, len(nums) + 1):\n        for subset in itertools.combinations(nums, r):\n            if sum(subset) == target and len(subset) == k:\n                return True\n    return False\n\ndef g(target: int, k: int):\n    return [5, 10, 15, 20], target, k\n\nassert f(*g(30, 2))\n",
        "idx_generation": 426,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=127) -> bool:\n    \"\"\"Check if the given number is the bitwise OR of x and a\"\"\"\n    return x == x | a\ndef g(a=127):\n    return a\n\nassert f(g())\n",
        "idx_generation": 250,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(moves: List[List[int]], initial_state=[2, 5, 3, 7, 0]) -> bool:\n    \"\"\"Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\nremoving one or more objects from a single non-empty heap. The player who takes the last object wins.\n- initial_state is list of numbers of objects in each heap\n- moves is a list of your moves: [heap, number of objects to take]\n- you play first\"\"\"\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state=[2, 5, 3, 7, 0]):\n    state = initial_state[:]\n    moves = []\n    def bot_move():\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    def losing(h):\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g())\n",
        "idx_generation": 67,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if it is possible to find two numbers in a given list that sum up to a target sum.\n    Return True if such pair exists, False otherwise.\"\"\"\n    nums.sort()\n    left = 0\n    right = len(nums) - 1\n    while left < right:\n        current_sum = nums[left] + nums[right]\n        if current_sum == target_sum:\n            return True\n        elif current_sum < target_sum:\n            left += 1\n        else:\n            right -= 1\n    return False\ndef g(nums: List[int], target_sum=10):\n    nums = list(set(nums))\n    return nums\nassert f(g([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n",
        "idx_generation": 277,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=7) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sum up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=7):\n    nums = [1, 2, 3, 4, 5, 6]\n    return nums\nassert f(g())\n",
        "idx_generation": 208,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the sum of all even numbers in the path must be greater than or equal to the sum of all odd numbers in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, even_sum, odd_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and even_sum >= odd_sum:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if nums[i][j] % 2 == 0:\n            even_sum += nums[i][j]\n        else:\n            odd_sum += nums[i][j]\n        return helper(i+1, j, found_one, even_sum, odd_sum) or helper(i, j+1, found_one, even_sum, odd_sum)\n\n    return helper(0, 0, False, 0, 0)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 350,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the sum of all even numbers in the path must be greater than the sum of all odd numbers in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, even_sum, odd_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and even_sum > odd_sum:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if nums[i][j] % 2 == 0:\n            even_sum += nums[i][j]\n        else:\n            odd_sum += nums[i][j]\n        return helper(i+1, j, found_one, even_sum, odd_sum) or helper(i, j+1, found_one, even_sum, odd_sum)\n\n    return helper(0, 0, False, 0, 0)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 262,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the number 0 exactly four times.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, found_zero):\n        if i == rows - 1 and j == cols - 1 and found_one:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            found_zero += 1\n            if found_zero > 4:\n                return False\n        if nums[i][j] == 1:\n            found_one = True\n        return helper(i+1, j, found_one, found_zero) or helper(i, j+1, found_one, found_zero)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[1, 0, 0], [1, 1, 0], [0, 1, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 279,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and every number in the path must be a power of 2.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one):\n        if i == rows - 1 and j == cols - 1 and found_one:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if not is_power_of_two(nums[i][j]):\n            return False\n        return helper(i+1, j, found_one) or helper(i, j+1, found_one)\n\n    return helper(0, 0, False)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\ndef is_power_of_two(n):\n    return n > 0 and (n & (n - 1)) == 0\n\nassert f(g())\n",
        "idx_generation": 379,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(inds: List[int], string='puzzlemutation') -> bool:\n    \"\"\"Find increasing indices to make the substring \"emt\" (with a surprise twist)\"\"\"\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'emt'\ndef g(string='puzzlemutation'):\n    target = 'emt'\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans\nassert f(g())\n",
        "idx_generation": 384,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], n=3) -> bool:\n    \"\"\"Check if there are exactly n even numbers in the list.\"\"\"\n    evens = [num for num in li if num % 2 == 0]\n    return len(evens) == n\n\ndef g(n=3):\n    return [2, 4, 6] + [1] * (n - 3)\n\nassert f(g())\n",
        "idx_generation": 41,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(inds: List[int], string='puzzlemutation') -> bool:\n    \"\"\"Find increasing indices to make the substring \"zm\" (with a surprise twist)\"\"\"\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'zm'\ndef g(string='puzzlemutation'):\n    target = 'zm'\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans\nassert f(g())\n",
        "idx_generation": 70,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the maximum even number in the path must be greater than or equal to the minimum odd number in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, max_even, min_odd):\n        if i == rows - 1 and j == cols - 1 and found_one and max_even >= min_odd:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if nums[i][j] % 2 == 0 and nums[i][j] > max_even:\n            max_even = nums[i][j]\n        elif nums[i][j] % 2 != 0 and nums[i][j] < min_odd:\n            min_odd = nums[i][j]\n        return helper(i+1, j, found_one, max_even, min_odd) or helper(i, j+1, found_one, max_even, min_odd)\n\n    return helper(0, 0, False, float('-inf'), float('inf'))\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 374,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=42) -> bool:\n    \"\"\"Check if any row or column in the matrix contains the target number.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    for col in zip(*matrix):\n        if target in col:\n            return True\n    return False\ndef g(target=42):\n    return [[1, 2, 3], [4, 5, target], [7, 8, 9]]\nassert f(g())\n",
        "idx_generation": 207,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(moves: List[List[int]], initial_state=[2, 5, 3, 7, 0]) -> bool:\n    \"\"\"Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\nremoving one or more objects from a single non-empty heap. The player who takes the last object wins.\n- initial_state is list of numbers of objects in each heap\n- moves is a list of your moves: [heap, number of objects to take]\n- you play first\"\"\"\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state=[2, 5, 3, 7, 0]):\n    state = initial_state[:]\n    moves = []\n    def bot_move():\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    def losing(h):\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g())\n",
        "idx_generation": 37,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=6, n=6) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=6, n=6):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 54,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: List[int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies inside a circle.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return ((x - a) ** 2) + ((y - b) ** 2) <= (c ** 2)\ndef g(a=1, b=2, c=10):\n    return [a, b]\nassert f(g())\n",
        "idx_generation": 148,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers. You can only move down or right in the grid. The path must contain the number 2 at least once and the product of all numbers along the path must be a prime number.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def helper(i, j, found_two, path_product):\n        if i == rows - 1 and j == cols - 1 and found_two and is_prime(path_product):\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            found_two = True\n        path_product *= nums[i][j]\n        return helper(i+1, j, found_two, path_product) or helper(i, j+1, found_two, path_product)\n\n    return helper(0, 0, False, 1)\n\ndef g(nums=[[2, 1, 1], [3, 2, 1], [1, 3, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 399,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=25) -> bool:\n    \"\"\"Find whether the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=25):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target]]\n\nassert f(g())\n",
        "idx_generation": 236,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Find two numbers in the list 'nums' whose difference is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if abs(nums[i] - nums[j]) == target:\n                return True\n    return False\n\ndef g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 74,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=6, n=6) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=6, n=6):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 28,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the sum of all even numbers in the path must be greater than or equal to the sum of all odd numbers in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, even_sum, odd_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and even_sum >= odd_sum:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if nums[i][j] % 2 == 0:\n            even_sum += nums[i][j]\n        else:\n            odd_sum += nums[i][j]\n        return helper(i+1, j, found_one, even_sum, odd_sum) or helper(i, j+1, found_one, even_sum, odd_sum)\n\n    return helper(0, 0, False, 0, 0)\n\ndef g(nums=[[1, 3, 5], [2, 4, 6], [0, 8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 350,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 177,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Find whether the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target]]\n\nassert f(g())\n",
        "idx_generation": 221,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=7, n=7) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=7, n=7):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 14,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the product of all even numbers in the path must be greater than or equal to the product of all odd numbers in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, even_prod, odd_prod):\n        if i == rows - 1 and j == cols - 1 and found_one and even_prod >= odd_prod:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if nums[i][j] % 2 == 0:\n            even_prod *= nums[i][j]\n        else:\n            odd_prod *= nums[i][j]\n        return helper(i+1, j, found_one, even_prod, odd_prod) or helper(i, j+1, found_one, even_prod, odd_prod)\n\n    return helper(0, 0, False, 1, 1)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 353,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=2) -> bool:\n    \"\"\"Check if a matrix is symmetric of size n x n\"\"\"\n    return all((matrix[i][j] == matrix[j][i]) for i in range(n) for j in range(n))\ndef g(n=2):\n    return [[1, 2], [2, 3]]\nassert f(g())\n",
        "idx_generation": 53,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray) -> bool:\n    \"\"\"\n    Check if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of each row, each column, and both diagonals are equal.\n    \"\"\"\n    n = matrix.shape[0]\n    target_sum = n * (n**2 + 1) // 2\n\n    # Check rows sum\n    row_sums = np.sum(matrix, axis=1)\n    if not np.all(row_sums == target_sum):\n        return False\n\n    # Check columns sum\n    col_sums = np.sum(matrix, axis=0)\n    if not np.all(col_sums == target_sum):\n        return False\n\n    # Check diagonal sums\n    diag_sum1 = np.trace(matrix)\n    diag_sum2 = np.trace(np.fliplr(matrix))\n    if diag_sum1 != target_sum or diag_sum2 != target_sum:\n        return False\n\n    return True\n\ndef g():\n    matrix = np.array([[2, 7, 6], [9, 5, 1], [4, 3, 8]])\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 463,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers. You can only move down or right in the grid. The path must contain the number 2 exactly once and the sum of all numbers along the path must be a prime number.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def helper(i, j, found_two, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_two and is_prime(path_sum):\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            if found_two:\n                return False\n            found_two = True\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_two, path_sum) or helper(i, j+1, found_two, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[2, 1, 1], [3, 2, 1], [1, 3, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 478,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers. You can only move down or right in the grid. The path must contain the number 2 at least once and the sum of all numbers along the path must be a prime number.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def helper(i, j, found_two, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_two and is_prime(path_sum):\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            found_two = True\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_two, path_sum) or helper(i, j+1, found_two, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[2, 1, 1], [3, 2, 1], [1, 3, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 409,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=5):\n    return [i**3 for i in range(1, k+1)]\n\nassert f(g())\n",
        "idx_generation": 140,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list such that their sum is equal to the target.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(target=10):\n    return [2, 4, 6, 8]\n\nassert f(g(), 12)\n",
        "idx_generation": 218,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose sum is equal to the target value.\"\"\"\n    return any(target - x in arr for x in arr)\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 11,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that multiply to the target.\"\"\"\n    seen = set()\n    for num in numbers:\n        if num == 0 and target == 0:\n            return True\n        if target % num == 0:\n            complement = target // num\n            if complement in seen:\n                return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g(), target=80)\n",
        "idx_generation": 447,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 57,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if any row in the matrix contains all even numbers.\"\"\"\n    for row in matrix:\n        if all(num % 2 == 0 for num in row):\n            return True\n    return False\n\ndef g(target=0):\n    matrix = [[2, 4, 6], [1, 3, 5], [8, 10, 12]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 226,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[2, 5, 10, 20, 40], upper_bound=10000) -> bool:\n    \"\"\"Check if n is a multiple of all numbers in the list and is less than or equal to the upper_bound\"\"\"\n    return all((n % i == 0 for i in lst)) and 0 < n <= upper_bound\ndef g(lst=[2, 5, 10, 20, 40], upper_bound=10000):\n    ans = 1\n    for i in lst:\n        (m, n) = (min(i, ans), max(i, ans))\n        while m > 0:\n            (m, n) = (n % m, m)\n        ans *= i // n\n    return ans\nassert f(g())\n",
        "idx_generation": 424,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are two consecutive numbers in the list that multiply to give a negative number.\"\"\"\n    for i in range(len(nums)-1):\n        if nums[i] * nums[i+1] < 0:\n            return True\n    return False\n\ndef g():\n    return [1, -2, 3, -4, 5, -6]\n\nassert f(g())\n",
        "idx_generation": 130,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a product greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] * nums[j] > target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 101,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, factors=[2, 3, 5]) -> bool:\n    \"\"\"Check if the given number can be expressed as a product of only the specified factors.\"\"\"\n    while n % 2 == 0:\n        n = n // 2\n    while n % 3 == 0:\n        n = n // 3\n    while n % 5 == 0:\n        n = n // 5\n    return n == 1\n\ndef g():\n    return 120\n\nassert f(g())\n",
        "idx_generation": 417,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, factors: List[int]=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is a multiple of any of the given factors.\n    - n: the number to be checked\n    - factors: list of factors\"\"\"\n    for factor in factors:\n        if n % factor == 0:\n            return True\n    return False\ndef g(n: int, factors: List[int]=[2, 3, 5]):\n    return n\nassert f(g(15))\n\n",
        "idx_generation": 88,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=5):\n    return [i**2 for i in range(1, k+1)]\n\nassert f(g())\n",
        "idx_generation": 93,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Determine if the given list contains a subsequence that sums up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]\n\ndef g():\n    nums = [1, 5, 7, 9, 2]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 60,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 4, 7, 3, 9, 2, 5], 10\n\nassert f(*g())\n",
        "idx_generation": 71,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=11) -> bool:\n    \"\"\"Check if the sum of n and the product of a and b is divisible by n\"\"\"\n    return (n + (a * b)) % n == 0\n\ndef g(a=5, b=11):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 80,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\nA matrix is a magic square if the sums of its rows, columns, and diagonals are all equal.\"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])  # sum of the first row\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for col in range(n):\n        col_sum = sum(matrix[i][col] for i in range(n))\n        if col_sum != target_sum:\n            return False\n\n    # Check diagonals\n    diag_sum1 = sum(matrix[i][i] for i in range(n))\n    diag_sum2 = sum(matrix[i][n-1-i] for i in range(n))\n    if diag_sum1 != target_sum or diag_sum2 != target_sum:\n        return False\n\n    return True\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g())\n",
        "idx_generation": 316,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Given a list of numbers, check if all the numbers in the list are divisible by the target\"\"\"\n    for num in nums:\n        if num % target != 0:\n            return False\n    return True\n\ndef g(target=20):\n    return [40, 60, 80, 100]\n\nassert f(g())\n",
        "idx_generation": 448,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=3, b=7) -> bool:\n    \"\"\"Check if the sum of x and the product of a and b is divisible by x\"\"\"\n    return (x + (a * b)) % x == 0\n\ndef g(a=3, b=7):\n    return a * b\n\nassert f(g())\n\n",
        "idx_generation": 46,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Check if there exists four numbers in the list that add up to the target.\"\"\"\n    return any(target - num1 - num2 - num3 in numbers for i, num1 in enumerate(numbers) for j, num2 in enumerate(numbers[i+1:]) for num3 in numbers[i+j+2:])\n\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 222,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Find whether the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=15):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target]]\n\nassert f(g())\n",
        "idx_generation": 236,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=10) -> bool:\n    \"\"\"Check if the given number is a power of 2.\"\"\"\n    return x != 0 and (x & (x - 1)) == 0\n\ndef g(a=10):\n    return 2 ** a\n\nassert f(g())\n",
        "idx_generation": 402,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    \"\"\"Learning parity with noise: Given binary vectors, find the secret set $S$ of indices such that, for at least\n3/4 of the vectors, $$sum_{i \\\\in S} x_i = 1 (mod 2)$$\"\"\"\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) <= len(vecs) * 3 / 4\n\ndef g(vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    d = 0\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[n >> i & 1 for i in range(d)] for n in vecs]\n    import random\n    rand = random.Random(0)\n    target = len(vecs) * 3 // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum((sum((v[i] for i in ans)) % 2 for v in vecs)) <= len(vecs) * 3 / 4:\n            return ans\nassert f(g())\n",
        "idx_generation": 381,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that multiply to the target value.\"\"\"\n    return any((numbers[i] * numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\nassert f(g())\n",
        "idx_generation": 126,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == (m*n - 1)//2\ndef g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == (m*n - 1)//2:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 389,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down, right, or diagonally down-right in the grid. The path must contain the number 2 at least once and the number 1 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_two, found_one):\n        if i == rows - 1 and j == cols - 1 and found_two:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one += 1\n            if found_one > 2:\n                return False\n        if nums[i][j] == 2:\n            found_two = True\n        return helper(i+1, j, found_two, found_one) or helper(i, j+1, found_two, found_one) or helper(i+1, j+1, found_two, found_one)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[2, 0, 0], [1, 3, 0], [0, 1, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 420,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(squares: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Position min(m, n) <= 5 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m=5, n=5):\n    k = min(m, n)\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len({t for (i, j) in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for (i, j) in enumerate(p)]\nassert f(g())\n",
        "idx_generation": 258,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(squares: List[List[int]], m=10, n=10) -> bool:\n    \"\"\"Position min(m, n) <= 10 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\n\ndef g(m=10, n=10):\n    k = min(m, n)\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len({t for (i, j) in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for (i, j) in enumerate(p)]\n\nassert f(g())\n",
        "idx_generation": 95,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the product of all even numbers in the path must be greater than or equal to the product of all odd numbers in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, even_product, odd_product):\n        if i == rows - 1 and j == cols - 1 and found_one and even_product >= odd_product:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if nums[i][j] % 2 == 0:\n            even_product *= nums[i][j]\n        else:\n            odd_product *= nums[i][j]\n        return helper(i+1, j, found_one, even_product, odd_product) or helper(i, j+1, found_one, even_product, odd_product)\n\n    return helper(0, 0, False, 1, 1)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the sum of the numbers in the path must be even.\n    Additionally, the path must visit at least one cell in the top row.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, path_sum, visited_top_row):\n        if i == rows - 1 and j == cols - 1 and found_one and path_sum % 2 == 0 and visited_top_row:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        return helper(i+1, j, found_one or nums[i][j] == 1, path_sum + nums[i][j], visited_top_row or i == 0) or helper(i, j+1, found_one or nums[i][j] == 1, path_sum + nums[i][j], visited_top_row or i == 0)\n\n    return helper(0, 0, False, 0, False)\n\ndef g(nums=[[1, 0, 0], [1, 1, 0], [0, 1, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 288,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=15) -> bool:\n    \"\"\"Check if there is a subset of 'k' numbers in the list that sum up to zero\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(k + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][k]\n\ndef g():\n    return [10, 5, 2, 7, 3, 9]\n\nassert f(g(), k=15)\n",
        "idx_generation": 472,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target, and the subarray length is greater than 2.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+2, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 197,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=18) -> bool:\n    \"\"\"Check if any three numbers in the list add up to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [4, 7, 2, 9, 1, 5]\n\nassert f(g(), 17)\n",
        "idx_generation": 482,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the maximum number in the path must be greater than or equal to the sum of all other numbers in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, max_num, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and max_num >= path_sum - max_num:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        max_num = max(max_num, nums[i][j])\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_one, max_num, path_sum) or helper(i, j+1, found_one, max_num, path_sum)\n\n    return helper(0, 0, False, float('-inf'), 0)\n\ndef g(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 455,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], n=3, target=15) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2]) and target % 2 != 0\ndef g(n=3, target=15):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix\n    assert False, f\"No magic square found for n={n}\"\nassert f(g())\n",
        "idx_generation": 159,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the given matrix is a square matrix of size n x n.\"\"\"\n    return all(len(row) == n for row in matrix) and len(matrix) == n\ndef g(n=3):\n    return [[1] * n for _ in range(n)]\nassert f(g())\n",
        "idx_generation": 199,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, factors: List[int]=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is divisible by all of the given factors.\n    - n: the number to be checked\n    - factors: list of factors\"\"\"\n    return all(n % factor == 0 for factor in factors)\ndef g(n: int, factors: List[int]=[2, 3, 5]):\n    return n\nassert f(g(30))\n",
        "idx_generation": 208,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=15482, b=23223, lower_bound=5) -> bool:\n    \"\"\"Check if n is a divisor of both a and b, and n is greater than or equal to lower_bound.\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a=15482, b=23223, lower_bound=5):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n\nassert f(g())\n",
        "idx_generation": 153,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a subset of numbers from the list whose sum is greater than or equal to the target_sum\"\"\"\n    n = len(arr)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[n][target_sum]\ndef g(target_sum=100):\n    return list(range(1, target_sum+1))\nassert f(g()) == True\n",
        "idx_generation": 27,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 3 at least once and the number 1 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_three, found_one):\n        if i == rows - 1 and j == cols - 1 and found_three >= 1:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one += 1\n            if found_one > 2:\n                return False\n        if nums[i][j] == 3:\n            found_three += 1\n        return helper(i+1, j, found_three, found_one) or helper(i, j+1, found_three, found_one)\n\n    return helper(0, 0, 0, 0)\n\ndef g(nums=[[3, 0, 0], [1, 3, 0], [0, 1, 3]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 406,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down, right, or diagonally down-right in the grid.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j):\n        if i == rows - 1 and j == cols - 1:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        return helper(i+1, j) or helper(i, j+1) or helper(i+1, j+1)\n\n    return helper(0, 0)\n\ndef g(nums=[[1, 0, 0], [1, 1, 0], [0, 1, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 270,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the maximum number in the path must be greater than the minimum number in the path.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    def helper(i, j, found_one, min_num, max_num):\n        if i == rows - 1 and j == cols - 1 and found_one and max_num > min_num:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if matrix[i][j] == 0:\n            return False\n        if matrix[i][j] == 1:\n            found_one = True\n        if matrix[i][j] < min_num:\n            min_num = matrix[i][j]\n        if matrix[i][j] > max_num:\n            max_num = matrix[i][j]\n        return helper(i+1, j, found_one, min_num, max_num) or helper(i, j+1, found_one, min_num, max_num)\n\n    return helper(0, 0, False, float('inf'), float('-inf'))\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 1]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 311,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the sum of all positive numbers in the path must be greater than or equal to the sum of all negative numbers in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, positive_sum, negative_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and positive_sum >= negative_sum:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if nums[i][j] > 0:\n            positive_sum += nums[i][j]\n        else:\n            negative_sum += nums[i][j]\n        return helper(i+1, j, found_one, positive_sum, negative_sum) or helper(i, j+1, found_one, positive_sum, negative_sum)\n\n    return helper(0, 0, False, 0, 0)\n\ndef g(nums=[[1, 0, 0], [-2, 4, 0], [0, -8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 301,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the sum of all even numbers in the path must be greater than the sum of all odd numbers in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, even_sum, odd_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and even_sum > odd_sum:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if nums[i][j] % 2 == 0:\n            even_sum += nums[i][j]\n        else:\n            odd_sum += nums[i][j]\n        return helper(i+1, j, found_one, even_sum, odd_sum) or helper(i, j+1, found_one, even_sum, odd_sum)\n\n    return helper(0, 0, False, 0, 0)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 378,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, n=4) -> bool:\n    \"\"\"Check if a string is a palindrome of length n\"\"\"\n    return string == string[::-1] and len(string) == n\ndef g(n=4):\n    return 'abba'\nassert f(g())\n",
        "idx_generation": 53,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=25) -> bool:\n    \"\"\"Check if the XOR of any three numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] ^ nums[j] ^ nums[k] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\n\ndef g(target_sum=25):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n",
        "idx_generation": 385,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=4, c=6) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])\ndef g(a=3, b=4, c=6):\n    return -a + sum([b * i for i in range(c)])\nassert f(g())\n",
        "idx_generation": 23,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there is a subsequence of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=20):\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 163,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: List[int], a=5, b=-4, c=4, d=2024) -> bool:\n    \"\"\"Check if a point lies inside an ellipse.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fifth decimal digit is required.\"\"\"\n    x, y = e\n    return ((x - a) ** 2) / (c ** 2) + ((y - b) ** 2) / (d ** 2) < 1\ndef g(a=5, b=-4, c=4, d=2024):\n    return [a, b]\nassert f(g())\n",
        "idx_generation": 35,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers. You can only move down or right in the grid. The path must contain the number 2 at least once and the sum of all numbers along the path must be a prime number.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_two, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_two and is_prime(path_sum):\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            found_two = True\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_two, path_sum) or helper(i, j+1, found_two, path_sum)\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[2, 1, 1], [3, 2, 1], [1, 3, 2]]):\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 397,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(s: str, n=0) -> bool:\n    \"\"\"Determine if a string is a palindrome\"\"\"\n    return s == s[::-1]\ndef g(n=0):\n    s = str(math.factorial(n))\n    return s\nassert f(g())\n",
        "idx_generation": 42,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(tour: List[List[int]], m=6, n=6) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == 2*(m+n)\n\ndef g(m=6, n=6):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == 2*(m+n):\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 321,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == (m*n - 1)//2\ndef g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == (m*n - 1)//2:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 389,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers. You can only move down or right in the grid. The path must contain the number 3 at least once and the number 0 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_three, found_zero):\n        if i == rows - 1 and j == cols - 1 and found_three:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            found_zero += 1\n            if found_zero > 2:\n                return False\n        if nums[i][j] == 3:\n            found_three = True\n        return helper(i+1, j, found_three, found_zero) or helper(i, j+1, found_three, found_zero)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[3, 0, 0], [1, 3, 0], [0, 1, 3]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 331,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(tour: List[List[int]], m=8, n=8) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == 2*(m+n)\n\ndef g(m=8, n=8):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == 2*(m+n):\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 362,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and every number in the path must be a power of 2.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one):\n        if i == rows - 1 and j == cols - 1 and found_one:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if not is_power_of_two(nums[i][j]):\n            return False\n        return helper(i+1, j, found_one) or helper(i, j+1, found_one)\n\n    return helper(0, 0, False)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\ndef is_power_of_two(n):\n    return n > 0 and (n & (n - 1)) == 0\n\nassert f(g())\n",
        "idx_generation": 444,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == m*n\n\ndef g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == m*n:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 281,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=50, max_nums=5, options=[5, 10, 15, 20, 25]) -> bool:\n    \"\"\"Find a combination of at most max_nums numbers whose sum is the target value\"\"\"\n    for num in nums:\n        assert num in options\n    return len(nums) <= max_nums and sum(nums) == target\ndef g(target=50, max_nums=5, options=[5, 10, 15, 20, 25]):\n    from itertools import combinations\n    for n in range(1, max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n\n",
        "idx_generation": 211,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 3 at least once and the number 1 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_three, found_one):\n        if i == rows - 1 and j == cols - 1 and found_three:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one += 1\n            if found_one > 2:\n                return False\n        if nums[i][j] == 3:\n            found_three = True\n        return helper(i+1, j, found_three, found_one) or helper(i, j+1, found_three, found_one)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[3, 0, 0], [1, 3, 0], [0, 1, 3]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 446,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 3 at least once and the number 0 exactly once.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_three, found_zero):\n        if i == rows - 1 and j == cols - 1 and found_three:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            found_zero += 1\n            if found_zero > 1:\n                return False\n        if nums[i][j] == 3:\n            found_three = True\n        return helper(i+1, j, found_three, found_zero) or helper(i, j+1, found_three, found_zero)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[3, 0, 0], [1, 3, 0], [0, 1, 3]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 363,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, s1='kuc', s2='qu', count1=63, count2=58) -> bool:\n    \"\"\"Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and starts and ends with\nthe same 5 characters\"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[:5] == s[-5:])\ndef g(s1='kuc', s2='qu', count1=63, count2=58):\n    if s1 == s2:\n        ans = (s1 + '?') * count1\n    elif s1.count(s2):\n        ans = (s1 + '?') * count1\n        ans += (s2 + '?') * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + '?') * count2\n        ans += (s1 + '?') * (count1 - ans.count(s1))\n    return '?' * 5 + ans + '?' * 5\nassert f(g())\n",
        "idx_generation": 153,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(inds: List[int], string='applebananacherry') -> bool:\n    \"\"\"Find the indices that will make the substring \"cherry\" (with a surprise twist)\"\"\"\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'cherry'\ndef g(string='applebananacherry'):\n    target = 'cherry'\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans\nassert f(g())\n",
        "idx_generation": 302,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nimport random\n\ndef f(num_list: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers in the list that adds up to the target value\"\"\"\n    random.shuffle(num_list)\n    for i in range(1, len(num_list) + 1):\n        for combination in itertools.combinations(num_list, i):\n            if sum(combination) == target:\n                return True\n    return False\n\ndef g():\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 487,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=3) -> bool:\n    \"\"\"Check if the given string contains the target number of consecutive vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n            if count == target:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(target=3):\n    return \"aeiou\" * target\n\nassert f(g())\n",
        "idx_generation": 112,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if the sum of any three numbers in the given list is equal to the target\"\"\"\n    assert len(nums) >= 3\n    return any(sum(random.sample(nums, 3)) == target for _ in range(100))\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 373,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == 12\ndef g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == 12:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 188,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 54,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Determine if a target number exists in a 2D matrix. The matrix is sorted in non-decreasing order from left to right and top to bottom.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    def binary_search(row: int, target: int) -> bool:\n        left = 0\n        right = cols - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if matrix[row][mid] == target:\n                return True\n            elif matrix[row][mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False\n\n    for i in range(rows):\n        if matrix[i][0] <= target <= matrix[i][cols-1]:\n            if binary_search(i, target):\n                return True\n    return False\n\ndef g(matrix=[[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50]], target=16):\n    return matrix, target\n\nassert f(*g())\n",
        "idx_generation": 310,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(grid: List[List[int]], k=2) -> bool:\n    \"\"\"Check if there exists a subgrid of size k x k in the grid where all elements are the same.\"\"\"\n    for i in range(len(grid) - k + 1):\n        for j in range(len(grid[0]) - k + 1):\n            subgrid = [row[j:j+k] for row in grid[i:i+k]]\n            if all(elem == subgrid[0][0] for row in subgrid for elem in row):\n                return True\n    return False\n\ndef g(k=2):\n    return [[1, 1, 1, 2, 2],\n            [1, 1, 1, 2, 2],\n            [1, 1, 1, 3, 3],\n            [4, 4, 4, 3, 3],\n            [4, 4, 4, 3, 3]]\n\nassert f(g())\n",
        "idx_generation": 324,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and every number in the path must be a power of 2.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one):\n        if i == rows - 1 and j == cols - 1 and found_one:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if not is_power_of_two(nums[i][j]):\n            return False\n        return helper(i+1, j, found_one) or helper(i, j+1, found_one)\n\n    return helper(0, 0, False)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\ndef is_power_of_two(n):\n    return n > 0 and (n & (n - 1)) == 0\n\nassert f(g())\n",
        "idx_generation": 379,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, lst=['apple', 'banana', 'cherry', 'durian', 'elderberry'], target='cherry') -> bool:\n    \"\"\"Find the index of a fruit in a list. Any such index is fine.\"\"\"\n    return lst[s] == target\ndef g(lst=['apple', 'banana', 'cherry', 'durian', 'elderberry'], target='cherry'):\n    return lst.index(target)\nassert f(g())\n",
        "idx_generation": 53,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target value.\"\"\"\n    return any(x * y == target for x in lst for y in lst)\n    \ndef g(target=100):\n    return [10, 25, 4, 5]\n    \nassert f(g())\n",
        "idx_generation": 149,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and every number in the path must be a power of 2.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one):\n        if i == rows - 1 and j == cols - 1 and found_one:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if not is_power_of_two(nums[i][j]):\n            return False\n        return helper(i+1, j, found_one) or helper(i, j+1, found_one)\n\n    return helper(0, 0, False)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\ndef is_power_of_two(n):\n    return n > 0 and (n & (n - 1)) == 0\n\nassert f(g())\n",
        "idx_generation": 379,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the maximum number in the path must be greater than or equal to the sum of all other numbers in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, max_num, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and max_num >= path_sum - max_num:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        max_num = max(max_num, nums[i][j])\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_one, max_num, path_sum) or helper(i, j+1, found_one, max_num, path_sum)\n\n    return helper(0, 0, False, float('-inf'), 0)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 404,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(inds: List[int], string='programming') -> bool:\n    \"\"\"Find increasing indices to make the substring \"gramming\" (with a surprise twist)\"\"\"\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'gramming'\ndef g(string='programming'):\n    target = 'gramming'\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans\nassert f(g())\n",
        "idx_generation": 70,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with a sum equal to the target.\"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\n\ndef g(target=0):\n    return [3, -1, 2, 1, -5, 4]\n\nassert f(g())\n",
        "idx_generation": 363,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=4) -> bool:\n    \"\"\"Check if a matrix is a magic square of size n x n\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all((row_sum == col_sum == diagonal_sum1 == diagonal_sum2) for row_sum, col_sum in zip(row_sums, col_sums))\ndef g(n=4):\n    return [[1, 15, 14, 4], [12, 6, 7, 9], [8, 10, 11, 5], [13, 3, 2, 16]]\nassert f(g())\n",
        "idx_generation": 372,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], row=2) -> bool:\n    \"\"\"Check if a given row of a matrix contains only even numbers\"\"\"\n    return all(num % 2 == 0 for num in matrix[row])\ndef g(row=2):\n    matrix = [[1, 2, 3], [4, 5, 6], [8, 10, 12]]\n    return matrix\nassert f(g())\n",
        "idx_generation": 138,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n",
        "idx_generation": 187,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=8, n=8) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=8, n=8):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 14,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if a matrix is a magic square of size n x n\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all((row_sum == col_sum == diagonal_sum1 == diagonal_sum2) for row_sum, col_sum in zip(row_sums, col_sums))\ndef g(n=3):\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\nassert f(g())\n",
        "idx_generation": 68,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers\n    while only moving down or right in the grid. The path must contain the number 1 at least once and the sum of all \n    numbers in the path must be even.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    def helper(i, j, found_one, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and path_sum % 2 == 0:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if matrix[i][j] == 1:\n            found_one = True\n        path_sum += matrix[i][j]\n\n        return helper(i+1, j, found_one, path_sum) or helper(i, j+1, found_one, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(matrix=[[1, 3, 5], [2, 4, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 377,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the product of all even numbers in the path must be greater than the product of all odd numbers in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, even_prod, odd_prod):\n        if i == rows - 1 and j == cols - 1 and found_one and even_prod > odd_prod:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if nums[i][j] % 2 == 0:\n            even_prod *= nums[i][j]\n        else:\n            odd_prod *= nums[i][j]\n        return helper(i+1, j, found_one, even_prod, odd_prod) or helper(i, j+1, found_one, even_prod, odd_prod)\n\n    return helper(0, 0, False, 1, 1)\n\ndef g(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 342,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=4, lower=-100000, seq=[2, 4, 6, 8, 10, 12, 14, 16]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose difference is greater than or equal to lower\"\"\"\n    diff = max(seq[start:start+k]) - min(seq[start:start+k])\n    return diff >= lower\ndef g(k=4, lower=-100000, seq=[2, 4, 6, 8, 10, 12, 14, 16]):\n    def seq_diff(start):\n        return max(seq[start:start+k]) - min(seq[start:start+k])\n    return max(range(len(seq) - k + 1), key=seq_diff)\nassert f(g())\n",
        "idx_generation": 77,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix\"\"\"\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[i])))\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "idx_generation": 38,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: Tuple[int, int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies inside a rectangle.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return (a <= x <= a+c) and (b <= y <= b+c)\ndef g(a=1, b=2, c=10):\n    return (a+c, b+c)\nassert f(g())\n",
        "idx_generation": 168,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(seq: List[int], n=100, length=10) -> bool:\n    \"\"\"Check if the given sequence is a subsequence of [1, 2, 3, ..., n] and its length is equal to length.\"\"\"\n    return all((i in range(1, n + 1) for i in seq)) and len(seq) == length\n\ndef g(n=100, length=10):\n    return list(range(1, length + 1))\n\nassert f(g())\n",
        "idx_generation": 173,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, k=6, lower=-100, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is odd, possibly looping around\"\"\"\n    total = 0\n    for i in range(x, x + k):\n        total += seq[i]\n    return total % 2 == 1\ndef g(k=6, lower=-100, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    def sum(x):\n        result = 0\n        for i in range(x, x + k):\n            result += seq[i]\n        return result\n    return max(range(-len(seq), len(seq) - k + 1), key=sum)\nassert f(g())\n",
        "idx_generation": 196,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    return any(a + b == target for i, a in enumerate(nums) for b in nums[i+1:])\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 48,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_sum=10):\n    return [n for n in range(target_sum+1)]\n\nassert f(g())\n",
        "idx_generation": 116,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(grid: List[List[int]], k=3) -> bool:\n    \"\"\"Check if there exists a subgrid of size k x k in the grid where all elements are the same.\"\"\"\n    for i in range(len(grid) - k + 1):\n        for j in range(len(grid[0]) - k + 1):\n            subgrid = [row[j:j+k] for row in grid[i:i+k]]\n            if all(elem == subgrid[0][0] for row in subgrid for elem in row):\n                return True\n    return False\n\ndef g(k=3):\n    return [[1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1]]\n\nassert f(g())\n",
        "idx_generation": 331,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with exactly three elements whose product is a perfect square.\"\"\"\n    for i in range(len(arr)):\n        subarray_product = 1\n        for j in range(i, len(arr)):\n            subarray_product *= arr[j]\n            if math.isqrt(subarray_product) ** 2 == subarray_product:\n                return True\n    return False\n\ndef g():\n    return [2, 4, 9, 16, 5]\n\nassert f(g())\n",
        "idx_generation": 388,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if it is possible to obtain the target sum by adding a subset of the given numbers in each row of the matrix.\"\"\"\n    m, n = len(matrix), len(matrix[0])\n    for row in matrix:\n        for i in range(1 << n):\n            subset_sum = sum(row[j] for j in range(n) if (i & (1 << j)) != 0)\n            if subset_sum == target:\n                break\n        else:\n            return False\n    return True\n\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 348,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a number in the list that is equal to the target number\"\"\"\n    return target in nums\n\ndef g(target: int):\n    return [1, 3, 5, 7, 9], target\n\nassert f(*g(7))\n",
        "idx_generation": 233,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(nums=[10, 15, 5, 7]):\n    return nums\nassert f(g())\n",
        "idx_generation": 268,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if the given number is a multiple of m.\"\"\"\n    return n % m == 0\n\ndef g(m=10):\n    return 2 * m\n\nassert f(g())\n",
        "idx_generation": 82,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=6) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=6):\n    return [3**i for i in range(1, k+1)]\n\nassert f(g())\n\n",
        "idx_generation": 172,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=100, b=20) -> bool:\n    \"\"\"Find n such that n is divisible by a, b, and their sum.\"\"\"\n    return n % a == 0 and n % b == 0 and n % (a + b) == 0\n\ndef g(a=100, b=20):\n    return a * b * (a + b)\n\nassert f(g())\n",
        "idx_generation": 175,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are four consecutive numbers in the list that form a geometric sequence with a common ratio of 2.\"\"\"\n    for i in range(len(nums)-3):\n        if nums[i+1] / nums[i] == 2 and nums[i+2] / nums[i+1] == 2 and nums[i+3] / nums[i+2] == 2:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 4, 8, 16, 32, 64]\n\nassert f(g())\n",
        "idx_generation": 130,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(grades: List[int], passing_grade: int = 70) -> bool:\n    \"\"\"Check if all grades in the list are above or equal to the passing grade.\"\"\"\n    return all(grade >= passing_grade for grade in grades)\n\ndef g(passing_grade=70):\n    grades = [80, 90, 75, 85]\n    return grades\n\nassert f(g())\n",
        "idx_generation": 448,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=20) -> bool:\n    \"\"\"Check if the given number is divisible by m and is also a perfect square.\"\"\"\n    return n % m == 0 and int(n**0.5)**2 == n\n\ndef g(m=20):\n    return m**2\n\nassert f(g())\n",
        "idx_generation": 121,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=16) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list whose sum is equal to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[2, 4, 6, 8, 10, 12, 14, 16]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 11,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\ndef f(matrix: List[List[int]], target_row=1, target_col=1) -> bool:\n    \"\"\"Check if the element at the target_row and target_col index in the matrix is a perfect square\"\"\"\n    return int(np.sqrt(matrix[target_row][target_col])) ** 2 == matrix[target_row][target_col]\n\ndef g(target_row=1, target_col=1):\n    matrix = np.array([[1, 4, 9], [4, 16, 25], [9, 25, 36]])\n    return matrix.tolist()\n\nassert f(g())\n",
        "idx_generation": 437,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if any row in the matrix contains all odd numbers.\"\"\"\n    for row in matrix:\n        if all(num % 2 != 0 for num in row):\n            return True\n    return False\n\ndef g(target=0):\n    matrix = [[1, 3, 5], [2, 4, 6], [7, 9, 11]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 292,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(tour: List[List[int]], m=8, n=8) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == 2*(m+n)\n\ndef g(m=8, n=8):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == 2*(m+n):\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(random.choice(candidates))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 403,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 3 at least once and the number 1 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_three, found_one):\n        if i == rows - 1 and j == cols - 1 and found_three:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one += 1\n            if found_one > 2:\n                return False\n        if nums[i][j] == 3:\n            found_three = True\n        return helper(i+1, j, found_three, found_one) or helper(i, j+1, found_three, found_one)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[3, 0, 0], [1, 3, 0], [0, 1, 3]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 446,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(num_list: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k elements in the list whose sum is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(num_list, k))\ndef g(k: int = 3):\n    return [1, 2, 3, 4, 5]\nassert f(g(), 9)\n",
        "idx_generation": 141,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    n = len(arr)\n    visited = set()\n    for i in range(n):\n        complement = target - arr[i]\n        if complement in visited:\n            return True\n        visited.add(arr[i])\n    return False\n\ndef g(target=10):\n    return [i for i in range(1, target + 1)]\n\nassert f(g())\n",
        "idx_generation": 35,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(seq: List[str], k=3, target='abc') -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose concatenation forms the target string\"\"\"\n    for i in range(len(seq) - k + 1):\n        if ''.join(seq[i:i+k]) == target:\n            return True\n    return False\ndef g(k=3, target='abc'):\n    seq = ['a', 'b', 'c', 'd', 'e', 'f']\n    return seq\nassert f(g())\n",
        "idx_generation": 413,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(inds: List[int], li=[1, 2, 3, 4, 5], target=[3, 4, 5]) -> bool:\n    \"\"\"Find three indices to achieve a given list slice.\"\"\"\n    (i, j, k) = inds\n    return li[i:j:k] == target\n\ndef g(li=[1, 2, 3, 4, 5], target=[3, 4, 5]):\n    from itertools import product\n    for (i, j, k) in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\n\nassert f(g())\n",
        "idx_generation": 120,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(squares: List[List[int]], m=4, n=4) -> bool:\n    \"\"\"Position min(m, n) <= 4 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m=4, n=4):\n    k = min(m, n)\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len({t for (i, j) in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for (i, j) in enumerate(p)]\nassert f(g())\n",
        "idx_generation": 258,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if a matrix is a magic square of size n x n\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all((row_sum == col_sum == diagonal_sum1 == diagonal_sum2) for row_sum, col_sum in zip(row_sums, col_sums))\n\ndef g(n=3):\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g())\n",
        "idx_generation": 394,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number is present in the given matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g(), 5)\n",
        "idx_generation": 307,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray where the sum of all elements is a multiple of 10.\"\"\"\n    for i in range(len(arr)):\n        subarray_sum = 0\n        for j in range(i, len(arr)):\n            subarray_sum += arr[j]\n            if subarray_sum % 10 == 0:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 475,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\nassert f(g())\n",
        "idx_generation": 132,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down, right, or diagonally down-right or diagonally down-left in the grid.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j):\n        if i == rows - 1 and j == cols - 1:\n            return True\n        if i >= rows or j < 0 or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        return helper(i+1, j) or helper(i, j+1) or helper(i+1, j-1)\n\n    return helper(0, 0)\n\ndef g(nums=[[1, 0, 0], [1, 1, 0], [0, 1, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 270,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers. You can only move down or right in the grid. The path must contain the number 2 at least once and the sum of all numbers along the path must be a palindrome.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def helper(i, j, found_two, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_two and is_palindrome(path_sum):\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            found_two = True\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_two, path_sum) or helper(i, j+1, found_two, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[2, 1, 1], [3, 2, 1], [1, 3, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 361,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the number 0 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, found_zero):\n        if i == rows - 1 and j == cols - 1 and found_one:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            found_zero += 1\n            if found_zero > 2:\n                return False\n        if nums[i][j] == 1:\n            found_one = True\n        return helper(i+1, j, found_one, found_zero) or helper(i, j+1, found_one, found_zero)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[1, 0, 0], [1, 1, 0], [0, 1, 1]]):\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 327,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down, right, or diagonally down-right in the grid. The path must contain the number 3 at least once and the number 2 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_three, found_two):\n        if i == rows - 1 and j == cols - 1 and found_three:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            found_two += 1\n            if found_two > 2:\n                return False\n        if nums[i][j] == 3:\n            found_three = True\n        return helper(i+1, j, found_three, found_two) or helper(i, j+1, found_three, found_two) or helper(i+1, j+1, found_three, found_two)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[3, 0, 0], [2, 3, 0], [0, 2, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 485,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='abcdef', target='') -> bool:\n    \"\"\"Find the two slice indices that give the specific target in string s\"\"\"\n    (i, j) = inds\n    return s[i:j] == target\ndef g(s='abcdef', target=''):\n    from itertools import product\n    for (i, j) in product(range(-len(s) - 1, len(s) + 1), repeat=2):\n        try:\n            if s[i:j] == target:\n                return [i, j]\n        except (IndexError, ValueError):\n            pass\nassert f(g())\n",
        "idx_generation": 396,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a power of two.\"\"\"\n    return n > 0 and n & (n - 1) == 0\n\ndef g():\n    return 16\n\nassert f(g())\n",
        "idx_generation": 99,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and every number in the path must be a power of 2.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one):\n        if i == rows - 1 and j == cols - 1 and found_one:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if not is_power_of_two(nums[i][j]):\n            return False\n        return helper(i+1, j, found_one) or helper(i, j+1, found_one)\n\n    return helper(0, 0, False)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\ndef is_power_of_two(n):\n    return n > 0 and (n & (n - 1)) == 0\n\nassert f(g())\n",
        "idx_generation": 444,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if all numbers in the list are divisible by n\"\"\"\n    return all(num % n == 0 for num in nums)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[0]\nassert f(g())\n",
        "idx_generation": 274,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=20):\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 250,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: Tuple[int, int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies inside a square.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return (a <= x <= a+c) and (b <= y <= b+c)\ndef g(a=1, b=2, c=10):\n    return (a, b)\nassert f(g())\n",
        "idx_generation": 168,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down, right, or diagonally (down-right) in the grid. The path must contain the number 1 at least once and the maximum number in the path must be prime.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def helper(i, j, found_one, max_num):\n        if i == rows - 1 and j == cols - 1 and found_one and is_prime(max_num):\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        max_num = max(max_num, nums[i][j])\n        return helper(i+1, j, found_one, max_num) or helper(i, j+1, found_one, max_num) or helper(i+1, j+1, found_one, max_num)\n\n    return helper(0, 0, False, float('-inf'))\n\ndef g(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 400,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=5, c=20) -> bool:\n    \"\"\"Find n such that n + a is equal to the product of b and the sum of the first c integers\"\"\"\n    return n + a == b * sum([i for i in range(1, c + 1)])\ndef g(a=10, b=5, c=20):\n    return -a + b * sum([i for i in range(1, c + 1)])\nassert f(g())\n",
        "idx_generation": 244,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(tri: List[int], edges=[[1, 2], [2, 3], [3, 1]]) -> bool:\n    \"\"\"Check if the given triangle exists in the directed graph.\"\"\"\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and [c, a] in edges\ndef g(edges=[[1, 2], [2, 3], [3, 1]]):\n    return [1, 2, 3]\nassert f(g())\n",
        "idx_generation": 1,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 3 at least once and the number 2 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_three, found_two):\n        if i == rows - 1 and j == cols - 1 and found_three:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            found_two += 1\n            if found_two > 2:\n                return False\n        if nums[i][j] == 3:\n            found_three = True\n        return helper(i+1, j, found_three, found_two) or helper(i, j+1, found_three, found_two)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[3, 0, 0], [1, 2, 0], [0, 1, 3]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 419,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the sum of all even numbers in the path must be greater than the sum of all odd numbers in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, even_sum, odd_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and even_sum > odd_sum:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if nums[i][j] % 2 == 0:\n            even_sum += nums[i][j]\n        else:\n            odd_sum += nums[i][j]\n        return helper(i+1, j, found_one, even_sum, odd_sum) or helper(i, j+1, found_one, even_sum, odd_sum)\n\n    return helper(0, 0, False, 0, 0)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 342,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 5 at least once and the number 1 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_five, found_one):\n        if i == rows - 1 and j == cols - 1 and found_five:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one += 1\n            if found_one > 2:\n                return False\n        if nums[i][j] == 5:\n            found_five = True\n        return helper(i+1, j, found_five, found_one) or helper(i, j+1, found_five, found_one)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[5, 0, 0], [1, 1, 0], [0, 1, 5]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 419,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[2, 4, 8, 16, 32], upper_bound=1024) -> bool:\n    \"\"\"Check if n is a power of all numbers in the list and is less than or equal to the upper_bound\"\"\"\n    return all((n % i == 0 for i in lst)) and 0 < n <= upper_bound\ndef g(lst=[2, 4, 8, 16, 32], upper_bound=1024):\n    ans = 1\n    for i in lst:\n        (m, n) = (min(i, ans), max(i, ans))\n        while m > 0:\n            (m, n) = (n % m, m)\n        ans *= i // n\n    return ans\nassert f(g())\n",
        "idx_generation": 72,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=50) -> bool:\n    \"\"\"Given a list of integers, find a combination of numbers that adds up to the target number.\"\"\"\n    def helper(arr, target, path):\n        if target == 0:\n            return True\n        if target < 0:\n            return False\n        for i in range(len(arr)):\n            if helper(arr[i+1:], target-arr[i], path + [arr[i]]):\n                return True\n        return False\n\n    return helper(arr, target, [])\n\ndef g(arr=[10, 20, 30, 40, 50]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 306,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 3 at least once and the number 1 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_three, found_one):\n        if i == rows - 1 and j == cols - 1 and found_three:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one += 1\n            if found_one > 2:\n                return False\n        if nums[i][j] == 3:\n            found_three = True\n        return helper(i+1, j, found_three, found_one) or helper(i, j+1, found_three, found_one)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[3, 0, 0], [1, 3, 0], [0, 1, 3]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 377,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, words=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Given a string and a list of words, determine if the string can be formed by concatenating the words in the list.\n    Each word in the list can be used only once.\"\"\"\n    word_count = {}\n    for word in words:\n        if word not in word_count:\n            word_count[word] = 0\n        word_count[word] += 1\n\n    i = 0\n    while i < len(string):\n        found_word = False\n        for word in word_count:\n            if string[i:i+len(word)] == word:\n                if word_count[word] > 0:\n                    word_count[word] -= 1\n                    i += len(word)\n                    found_word = True\n                    break\n        if not found_word:\n            return False\n\n    for count in word_count.values():\n        if count > 0:\n            return False\n\n    return True\n\ndef g(words=['apple', 'banana', 'cherry', 'date']):\n    return ''.join(words)\n\nassert f(g())\n",
        "idx_generation": 19,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that sum up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70]\n\nassert f(g())\n",
        "idx_generation": 88,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import *\ndef f(nums: List[int], target=50, max_nums=3, options=[10, 20, 30, 40, 50]) -> bool:\n    \"\"\"Find a combination of at most max_nums numbers whose sum is the target value\"\"\"\n    for num in nums:\n        assert num in options\n    return len(nums) <= max_nums and sum(nums) == target\ndef g(target=50, max_nums=3, options=[10, 20, 30, 40, 50]):\n    from itertools import combinations\n    for n in range(1, max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n",
        "idx_generation": 378,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=3, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if the given string contains the target number of consecutive vowels from a provided list of vowels.\"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n            if count == target:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(target=3, vowels=['a', 'e', 'i', 'o', 'u']):\n    return \"aeiou\" * target\n\nassert f(g())\n",
        "idx_generation": 185,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down, right, or diagonally (down-right) in the grid. The path must contain the number 1 at least once and the product of the numbers in the path must be even.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, path_product):\n        if i == rows - 1 and j == cols - 1 and found_one and path_product % 2 == 0:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        path_product *= nums[i][j]\n        return helper(i+1, j, found_one, path_product) or helper(i, j+1, found_one, path_product) or helper(i+1, j+1, found_one, path_product)\n\n    return helper(0, 0, False, 1)\n\ndef g(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 421,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]], target: int) -> bool:\n    \"\"\"Determine if a target number exists in a 2D array. The array is sorted in non-decreasing order from top to bottom and left to right.\"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n\n    def binary_search(row: int, target: int) -> bool:\n        left = 0\n        right = cols - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[row][mid] == target:\n                return True\n            elif arr[row][mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False\n\n    for i in range(rows):\n        if arr[i][0] <= target <= arr[i][cols-1]:\n            if binary_search(i, target):\n                return True\n    return False\n\ndef g(arr=[[1, 3, 5, 7], [2, 4, 6, 8], [9, 10, 11, 12]], target=6):\n    return arr, target\n\nassert f(*g())\n",
        "idx_generation": 384,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], rows=4, cols=4) -> bool:\n    \"\"\"Check if the given matrix is a magic square, where the sum of every row, column, and diagonal are equal.\"\"\"\n    target_sum = sum(matrix[0])\n    for i in range(1, rows):\n        if sum(matrix[i]) != target_sum:\n            return False\n    for j in range(cols):\n        if sum(matrix[i][j] for i in range(rows)) != target_sum:\n            return False\n    if sum(matrix[i][i] for i in range(rows)) != target_sum:\n        return False\n    if sum(matrix[i][rows-i-1] for i in range(rows)) != target_sum:\n        return False\n    return True\ndef g(rows=4, cols=4):\n    matrix = [\n        [16, 3, 2, 13],\n        [5, 10, 11, 8],\n        [9, 6, 7, 12],\n        [4, 15, 14, 1]\n    ]\n    return matrix\nassert f(g())\n",
        "idx_generation": 381,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grid: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 4 at least once and the number 9 exactly once.\"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n\n    def helper(i, j, found_four, found_nine):\n        if i == rows - 1 and j == cols - 1 and found_nine:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if grid[i][j] == 9:\n            found_nine = True\n        if grid[i][j] == 4:\n            found_four += 1\n        return helper(i+1, j, found_four, found_nine) or helper(i, j+1, found_four, found_nine)\n\n    return helper(0, 0, 0, False)\n\ndef g(grid=[[4, 0, 0], [9, 1, 0], [0, 9, 0]]):\n    return grid\n\nassert f(g())\n\n",
        "idx_generation": 493,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70]\n\nassert f(g())\n",
        "idx_generation": 88,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, words=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Given a string and a list of words, determine if the string can be formed by concatenating the words in the list.\n    Each word in the list can be used only once.\"\"\"\n    word_count = {}\n    for word in words:\n        if word not in word_count:\n            word_count[word] = 0\n        word_count[word] += 1\n\n    i = 0\n    while i < len(string):\n        found_word = False\n        for word in word_count:\n            if string[i:i+len(word)] == word:\n                if word_count[word] > 0:\n                    word_count[word] -= 1\n                    i += len(word)\n                    found_word = True\n                    break\n        if not found_word:\n            return False\n\n    for count in word_count.values():\n        if count > 0:\n            return False\n\n    return True\n\ndef g(words=['apple', 'banana', 'cherry', 'date']):\n    return ''.join(words)\n\nassert f(g())\n",
        "idx_generation": 4,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=42) -> bool:\n    \"\"\"Find the number of steps required to reach the target number by repeatedly subtracting the largest power of 2\"\"\"\n    steps = 0\n    while n > target:\n        n = n - 2**int(n).bit_length()\n        steps += 1\n    return steps\n\ndef g(target=42):\n    return 100\n\nassert f(g())\n",
        "idx_generation": 254,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target.\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    \n    return subset_sum(nums, target)\n\ndef g(nums=[10, 20, 30, 40, 50]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 149,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with exactly three elements whose product is a perfect square.\"\"\"\n    for i in range(len(arr)):\n        subarray_product = 1\n        for j in range(i, len(arr)):\n            subarray_product *= arr[j]\n            if math.isqrt(subarray_product) ** 2 == subarray_product:\n                return True\n    return False\n\ndef g():\n    return [2, 3, 8, 5, 6, 10]\n\nassert f(g())\n",
        "idx_generation": 477,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=50, b=2, c=5) -> bool:\n    \"\"\"Find n such that (the sum of the first b multiples of c) - a == n\"\"\"\n    return sum([c * i for i in range(b)]) - a == n\ndef g(a=50, b=2, c=5):\n    return sum([c * i for i in range(b)]) - a\nassert f(g())\n\n",
        "idx_generation": 147,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers, find if there exist three numbers whose product is equal to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] * nums[j] * nums[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [2, 4, 6, 8, 10, 12, 14]\n\nassert f(g(), 96)\n",
        "idx_generation": 479,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=6, n=6) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=6, n=6):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 14,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 134,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and every number in the path must be a power of 2.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one):\n        if i == rows - 1 and j == cols - 1 and found_one:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if not is_power_of_two(nums[i][j]):\n            return False\n        return helper(i+1, j, found_one) or helper(i, j+1, found_one)\n\n    return helper(0, 0, False)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\ndef is_power_of_two(n):\n    return n > 0 and (n & (n - 1)) == 0\n\nassert f(g())\n",
        "idx_generation": 390,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]], max_steps=5) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the number of steps taken to reach the bottom-right corner must be less than or equal to the max_steps.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, steps):\n        if i == rows - 1 and j == cols - 1 and found_one and steps <= max_steps:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        return helper(i+1, j, found_one, steps+1) or helper(i, j+1, found_one, steps+1)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 370,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is a symmetric matrix\"\"\"\n    n = len(matrix)\n    return all(matrix[i][j] == matrix[j][i] for i in range(n) for j in range(n))\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n\n",
        "idx_generation": 122,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers. You can only move down or right in the grid. The path must contain the number 2 at least once and the number 1 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_two, found_one):\n        if i == rows - 1 and j == cols - 1 and found_two:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one += 1\n            if found_one > 2:\n                return False\n        if nums[i][j] == 2:\n            found_two = True\n        return helper(i+1, j, found_two, found_one) or helper(i, j+1, found_two, found_one)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[2, 1, 1], [3, 2, 1], [1, 3, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 339,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a subset in the given list that sums up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    \n    return dp[n][target]\n\ndef g(target=10):\n    return [3, 1, 5, 4, 2]\n\nassert f(g())\n",
        "idx_generation": 42,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], n=3, target=15) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2]) and len(rows) == n\ndef g(n=3, target=15):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix\n    assert False, f\"No magic square found for n={n}\"\nassert f(g())\n",
        "idx_generation": 183,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], n=3, target=15) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2])\ndef g(n=3, target=15):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix\n    assert False, f\"No magic square found for n={n}\"\nassert f(g())\n",
        "idx_generation": 11,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list arr whose sum is equal to the target.\"\"\"\n    num_set = set()\n    for num in arr:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(arr: List[int]):\n    return arr\n\nassert f(g([1, 2, 3, 4, 5]), target=9)\n",
        "idx_generation": 75,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=2, threshold=0.8, seq=[0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose average is greater than or equal to threshold\"\"\"\n    seq_avg = sum(seq[start:start+k]) / k\n    return seq_avg >= threshold\ndef g(k=2, threshold=0.8, seq=[0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6]):\n    def seq_avg(start):\n        return sum(seq[start:start+k]) / k\n    return max(range(len(seq) - k + 1), key=seq_avg)\nassert f(g())\n",
        "idx_generation": 161,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if it is possible to obtain the target sum by adding a subset of the given numbers in the list.\"\"\"\n    n = len(arr)\n    for i in range(1 << n):\n        subset_sum = sum(arr[j] for j in range(n) if (i & (1 << j)) != 0)\n        if subset_sum <= target:\n            return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 473,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a number in the list that is divisible by the target number\"\"\"\n    return any(num % target == 0 for num in nums)\n\ndef g(target: int):\n    return [14, 21, 35, 42, 56], target\n\nassert f(*g(7))\n",
        "idx_generation": 351,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=4) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=4):\n    return [i**3 for i in range(1, k+1)]\n\nassert f(g())\n",
        "idx_generation": 286,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k: int=3) -> bool:\n    \"\"\"Given an array of integers and a number k, check if there are two distinct indices i and j in the array such that arr[i] - arr[j] = k.\"\"\"\n    seen = set()\n    for num in arr:\n        if num - k in seen or num + k in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(arr: List[int]=[1, 3, 5, 6, 9]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 177,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\"\"\"\n    n = len(matrix)\n    target_sum = n * (n ** 2 + 1) // 2\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != target_sum:\n            return False\n\n    # Check diagonals\n    diag_sum = sum(matrix[i][i] for i in range(n))\n    anti_diag_sum = sum(matrix[i][n - i - 1] for i in range(n))\n    if diag_sum != target_sum or anti_diag_sum != target_sum:\n        return False\n\n    return True\n\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\n\nassert f(g())\n",
        "idx_generation": 287,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a pangram.\"\"\"\n    alphabet = set('abcdefghijklmnopqrstuvwxyz')\n    return set(s.lower()) >= alphabet\n\ndef g():\n    return \"The quick brown fox jumps over the lazy dog\"\n\nassert f(g())\n",
        "idx_generation": 170,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=8) -> bool:\n    \"\"\"Find a pair of numbers from the list whose sum is equal to the target\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[2, 4, 6, 3, 1, 5]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 79,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if any row in the matrix contains all even numbers.\"\"\"\n    for row in matrix:\n        if all(num % 2 == 0 for num in row):\n            return True\n    return False\n\ndef g(target=0):\n    matrix = [[2, 4, 6], [1, 3, 5], [8, 10, 12]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 324,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"Find the first index where the target integer occurs in a list of integers.\"\"\"\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return i\n    return -1\n\ndef g(nums=[1, 3, 5, 7, 9, 2, 4], target=2):\n    return nums, target\n\nassert f(*g()) == 5\n",
        "idx_generation": 481,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], n=3, target=15, row_idx=1) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2]) and rows[row_idx] == target\ndef g(n=3, target=15):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix\n    assert False, f\"No magic square found for n={n}\"\nassert f(g(), row_idx=2)\n",
        "idx_generation": 159,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(squares: List[List[int]], m=8, n=4, target=32) -> bool:\n    \"\"\"Tile an m x n checkerboard with 2 x 1 tiles. The solution is a list of fourtuples [i1, j1, i2, j2] with\ni2 == i1 and j2 == j1 + 1 or i2 == i1 + 1 and j2 == j1 with no overlap.\"\"\"\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target\ndef g(m=8, n=4, target=32):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans\nassert f(g())\n",
        "idx_generation": 58,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the maximum number in the path must be greater than or equal to the sum of all other numbers in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, max_num, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and max_num >= path_sum - max_num:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        max_num = max(max_num, nums[i][j])\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_one, max_num, path_sum) or helper(i, j+1, found_one, max_num, path_sum)\n\n    return helper(0, 0, False, float('-inf'), 0)\n\ndef g(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 455,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find a number in the list that is divisible by n\"\"\"\n    return any(num % n == 0 for num in nums)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[0]\nassert f(g())\n",
        "idx_generation": 136,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=4) -> bool:\n    \"\"\"Check if the matrix is a magic square of size n x n\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    return all(sum(matrix[i][j] for j in range(n)) == row_sum for i, row_sum in enumerate(row_sums)) and all(sum(matrix[j][i] for j in range(n)) == col_sum for i, col_sum in enumerate(col_sums))\n\ndef g(n=4):\n    return [[16, 3, 2, 13], [5, 10, 11, 8], [9, 6, 7, 12], [4, 15, 14, 1]]\n\nassert f(g())\n",
        "idx_generation": 454,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the sum of all even numbers in the path must be greater than or equal to the product of all odd numbers in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, even_sum, odd_prod):\n        if i == rows - 1 and j == cols - 1 and found_one and even_sum >= odd_prod:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if nums[i][j] % 2 == 0:\n            even_sum += nums[i][j]\n        else:\n            odd_prod *= nums[i][j]\n        return helper(i+1, j, found_one, even_sum, odd_prod) or helper(i, j+1, found_one, even_sum, odd_prod)\n\n    return helper(0, 0, False, 0, 1)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 401,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the maximum number in the path must be greater than or equal to the sum of all other numbers in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, max_num, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and max_num >= path_sum - max_num:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        max_num = max(max_num, nums[i][j])\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_one, max_num, path_sum) or helper(i, j+1, found_one, max_num, path_sum)\n\n    return helper(0, 0, False, float('-inf'), 0)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 404,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two numbers in the list that add up to the target.\"\"\"\n    return any(target - num in numbers for num in numbers)\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 194,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down or right in the matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    def helper(i, j):\n        if i == rows - 1 and j == cols - 1:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if matrix[i][j] == 0:\n            return False\n        return helper(i+1, j) or helper(i, j+1)\n\n    return helper(0, 0)\n\ndef g(matrix=[[1, 0, 0], [1, 1, 0], [0, 1, 1]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 277,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers. You can only move down or right in the grid. The path must contain the number 2 at least once and the sum of all numbers along the path must be a multiple of 3.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def is_multiple_of_three(n):\n        return n % 3 == 0\n\n    def helper(i, j, found_two, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_two and is_multiple_of_three(path_sum):\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            found_two = True\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_two, path_sum) or helper(i, j+1, found_two, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[2, 1, 1], [3, 2, 1], [1, 3, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 454,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers. You can only move down or right in the grid. The path must contain the number 4 at least once and the number 0 exactly four times.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_four, found_zero):\n        if i == rows - 1 and j == cols - 1 and found_four:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            found_zero += 1\n            if found_zero > 4:\n                return False\n        if nums[i][j] == 4:\n            found_four = True\n        return helper(i+1, j, found_four, found_zero) or helper(i, j+1, found_four, found_zero)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[4, 0, 0], [1, 4, 0], [0, 1, 4]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 331,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 6 at least once and the number 2 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_six, found_two):\n        if i == rows - 1 and j == cols - 1 and found_six:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            found_two += 1\n            if found_two > 2:\n                return False\n        if nums[i][j] == 6:\n            found_six = True\n        return helper(i+1, j, found_six, found_two) or helper(i, j+1, found_six, found_two)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[6, 0, 0], [2, 6, 0], [0, 2, 6]]):\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 495,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=-128) -> bool:\n    \"\"\"Check if the given number is the bitwise complement of a\"\"\"\n    return x == ~a\ndef g(a=-128):\n    return ~a\nassert f(g())\n",
        "idx_generation": 192,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers. You can only move down or right in the grid. The path must contain the number 2 at least once and the sum of all numbers along the path must be a prime number.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def helper(i, j, found_two, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_two and is_prime(path_sum):\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            found_two = True\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_two, path_sum) or helper(i, j+1, found_two, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[2, 1, 1], [3, 2, 1], [1, 3, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 361,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: List[int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies within a parallelogram.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return (x - a) * (c - a) + (y - b) * (d - b) >= 0 and (x - c) * (a - c) + (y - d) * (b - d) >= 0\ndef g(a=1, b=2, c=10, d=1000):\n    return [a + 1, b + 1]\nassert f(g())\n",
        "idx_generation": 221,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and every number in the path must be a perfect square.\n    \"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one):\n        if i == rows - 1 and j == cols - 1 and found_one:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if not is_perfect_square(nums[i][j]):\n            return False\n        return helper(i+1, j, found_one) or helper(i, j+1, found_one)\n\n    return helper(0, 0, False)\n\ndef g(nums=[[1, 0, 0], [4, 9, 0], [0, 16, 1]]):\n    return nums\n\ndef is_perfect_square(n):\n    return n > 0 and int(n**0.5)**2 == n\n\nassert f(g())\n",
        "idx_generation": 433,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(numbers: List[float], target_value=10) -> bool:\n    \"\"\"Check if there exists a number in the list that is greater than or equal to the square root of target_value\"\"\"\n    return any(num >= math.sqrt(target_value) for num in numbers)\ndef g(target_value=10):\n    return [2.5, 5.0, 7.5, 10.0, 12.5]\nassert f(g())\n",
        "idx_generation": 354,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 13,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 2 at least once and the number 1 exactly three times.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_two, found_one):\n        if i == rows - 1 and j == cols - 1 and found_two:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one += 1\n            if found_one > 3:\n                return False\n        if nums[i][j] == 2:\n            found_two = True\n        return helper(i+1, j, found_two, found_one) or helper(i, j+1, found_two, found_one)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[2, 0, 0], [1, 2, 0], [0, 1, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 376,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 4 at least once and the number of steps in the path must be a perfect square.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_four, steps):\n        if i == rows - 1 and j == cols - 1 and found_four and int(steps**0.5)**2 == steps:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 4:\n            found_four = True\n        return helper(i+1, j, found_four, steps+1) or helper(i, j+1, found_four, steps+1)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 480,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list nums whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 341,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import List, Tuple\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose maximum element is equal to the target number\"\"\"\n    for r in range(1, len(nums) + 1):\n        for subset in itertools.combinations(nums, r):\n            max_num = max(subset)\n            if max_num == target:\n                return True\n    return False\n\ndef g(target: int):\n    return [10, 20, 30, 40, 50], target\n\nassert f(*g(40))\n",
        "idx_generation": 373,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]], target=5) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number target at least once and the number 1 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_target, found_one):\n        if i == rows - 1 and j == cols - 1 and found_target:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one += 1\n            if found_one > 2:\n                return False\n        if nums[i][j] == target:\n            found_target = True\n        return helper(i+1, j, found_target, found_one) or helper(i, j+1, found_target, found_one)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[5, 0, 0], [1, 5, 0], [0, 1, 5]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 461,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, n=3) -> bool:\n    \"\"\"Check if a given string has exactly n consecutive vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(string)):\n        if string[i] in vowels:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False\ndef g(n=3):\n    return \"aiou\"\nassert f(g())",
        "idx_generation": 101,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[3, 6, 9, 12, 15], upper_bound=1000) -> bool:\n    \"\"\"Check if n is divisible by all numbers in the list and is less than or equal to the upper_bound\"\"\"\n    return all((n % i == 0 for i in lst)) and 0 < n <= upper_bound\ndef g(lst=[3, 6, 9, 12, 15], upper_bound=1000):\n    ans = 1\n    for i in lst:\n        (m, n) = (min(i, ans), max(i, ans))\n        while m > 0:\n            (m, n) = (n % m, m)\n        ans *= i // n\n    return ans\nassert f(g())\n\n",
        "idx_generation": 132,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if the given string is a palindrome and has exactly k vowels.\"\"\"\n    vowels = set(\"aeiou\")\n    s = s.lower()\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return s == s[::-1] and count == k\n\ndef g(s=\"Racecar\"):\n    return s\n\nassert f(g())\n",
        "idx_generation": 213,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the sum of the numbers in the path must be even.\n    Additionally, the path must visit at least one cell in the top row.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, path_sum, visited_top_row):\n        if i == rows - 1 and j == cols - 1 and found_one and path_sum % 2 == 0 and visited_top_row:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        return helper(i+1, j, found_one or nums[i][j] == 1, path_sum + nums[i][j], visited_top_row or i == 0) or helper(i, j+1, found_one or nums[i][j] == 1, path_sum + nums[i][j], visited_top_row or i == 0)\n\n    return helper(0, 0, False, 0, False)\n\ndef g(nums=[[1, 0, 0], [1, 1, 0], [0, 1, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 491,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if the sum of any two numbers in the list is equal to the target value.\"\"\"\n    return any((numbers[i] + numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\nassert f(g())\n",
        "idx_generation": 127,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=12) -> bool:\n    \"\"\"Check if there exist three numbers in the list whose sum is equal to the target value.\"\"\"\n    return any(target - x - y in arr for x in arr for y in arr)\ndef g(target=12):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 29,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"Given a list of integers, find the maximum sum of a contiguous subarray.\"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum += num\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum\n\ndef g(nums=[-2, 1, -3, 4, -1, 2, 1, -5, 4]):\n    return nums\n\nassert f(g()) == 6\n",
        "idx_generation": 447,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Given a list of integers and a number k, find any sublist of length k whose sum is divisible by k.\nSample Input:\n[1, 2, 3, 4, 5]\nSample Output:\n[2, 3, 4]\"\"\"\n    return any((sum(nums[i:i+k]) % k == 0) for i in range(len(nums) - k + 1))\ndef g(k=3):\n    return [2, 3, 4]\nassert f(g())\n",
        "idx_generation": 3,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=10) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=10):\n    return [i**2 for i in range(1, k+1)]\n\nassert f(g())\n",
        "idx_generation": 189,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(moves: List[List[int]], initial_state=[2, 5, 3, 7, 0]) -> bool:\n    \"\"\"Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\nremoving one or more objects from a single non-empty heap. The player who takes the last object wins.\n- initial_state is list of numbers of objects in each heap\n- moves is a list of your moves: [heap, number of objects to take]\n- you play first\"\"\"\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state=[2, 5, 3, 7, 0]):\n    state = initial_state[:]\n    moves = []\n    def bot_move():\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    def losing(h):\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g())\n",
        "idx_generation": 37,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=7, n=7) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == 24\ndef g(m=7, n=7):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == 24:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 293,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the maximum number in the path must be greater than or equal to the sum of all other numbers in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, max_num, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and max_num >= path_sum - max_num:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        max_num = max(max_num, nums[i][j])\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_one, max_num, path_sum) or helper(i, j+1, found_one, max_num, path_sum)\n\n    return helper(0, 0, False, float('-inf'), 0)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 392,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]], max_steps=5) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down, right, or diagonally (down-right) in the grid. The path must contain the number 1 at least once and the number of steps taken to reach the bottom-right corner must be less than or equal to the max_steps.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, steps):\n        if i == rows - 1 and j == cols - 1 and found_one and steps <= max_steps:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        return helper(i+1, j, found_one, steps+1) or helper(i, j+1, found_one, steps+1) or helper(i+1, j+1, found_one, steps+1)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 390,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric\"\"\"\n    return all((matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(i + 1, len(matrix))))\ndef g():\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n    return matrix\nassert f(g())\n",
        "idx_generation": 147,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and every number in the path must be a power of 2.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one):\n        if i == rows - 1 and j == cols - 1 and found_one:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if not is_power_of_two(nums[i][j]):\n            return False\n        return helper(i+1, j, found_one) or helper(i, j+1, found_one)\n\n    return helper(0, 0, False)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\ndef is_power_of_two(n):\n    return n > 0 and (n & (n - 1)) == 0\n\nassert f(g())\n",
        "idx_generation": 390,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a subset of numbers from the list whose sum is equal to the target_sum\"\"\"\n    n = len(arr)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[n][target_sum]\n\ndef g(target_sum=100):\n    return list(range(1, target_sum+1))\n\nassert f(g()) == True\n",
        "idx_generation": 66,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import *\ndef f(matrix: List[List[int]], n=3, target=15) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2]) and len(rows) == n\n\ndef g(n=3, target=15):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [list(perm[i:i+n]) for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix\n    assert False, f\"No magic square found for n={n}\"\n\nassert f(g())\n",
        "idx_generation": 213,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], n=3, target=15) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2])\ndef g(n=3, target=15):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix\n    assert False, f\"No magic square found for n={n}\"\nassert f(g())\n",
        "idx_generation": 128,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], length=5) -> bool:\n    \"\"\"Check if any word in the list words has a length greater than the given length.\"\"\"\n    for word in words:\n        if len(word) > length:\n            return True\n    return False\n\ndef g(length=5):\n    return ['apple', 'banana', 'cherry']\n\nassert f(g())\n",
        "idx_generation": 100,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find two distinct numbers such that their sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [i for i in range(1, target+1)]\n\nassert f(g())\n",
        "idx_generation": 278,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(num_list: List[int], n=3) -> bool:\n    \"\"\"Check if all numbers in the list are divisible by n\"\"\"\n    return all([num % n == 0 for num in num_list])\n\ndef g(num_list=[6, 9, 12, 15, 18]):\n    return num_list\n\nassert f(g())\n",
        "idx_generation": 398,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray in a list whose length is equal to a given value.\"\"\"\n    n = len(arr)\n    for i in range(n-k+1):\n        if len(arr[i:i+k]) == k:\n            return True\n    return False\n\ndef g(k=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8]\n\nassert f(g())\n",
        "idx_generation": 291,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that multiply to the target\"\"\"\n    n = len(numbers)\n    for i in range(n):\n        for j in range(i+1, n):\n            if numbers[i] * numbers[j] == target:\n                return True\n    return False\n\ndef g(target=20):\n    numbers = [2, 4, 5, 10, 25]\n    return numbers\n\nassert f(g())\n\n",
        "idx_generation": 279,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\ndef f(n: int, lst=[1, 4, 9, 16, 25, 36, 49, 64], k=2) -> bool:\n    \"\"\"Given a list of integers and an integer k, determine if there are exactly n integers in the list that are perfect squares.\"\"\"\n    return sum((1 for num in lst if sqrt(num).is_integer())) == n\ndef g(lst=[1, 4, 9, 16, 25, 36, 49, 64], k=2):\n    return len([num for num in lst if sqrt(num).is_integer()])\nassert f(g())\n",
        "idx_generation": 192,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=100, b=3, c=4) -> bool:\n    \"\"\"Find n such that (the sum of the first b multiples of c) - a == n\"\"\"\n    return sum([c * i for i in range(b)]) - a == n\ndef g(a=100, b=3, c=4):\n    return sum([c * i for i in range(b)]) - a\nassert f(g())\n",
        "idx_generation": 137,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(password: str) -> bool:\n    \"\"\"Check if the given password meets the specified criteria.\n    - password: string containing the password\"\"\"\n\n    def has_lowercase_letter(password):\n        return any(char.islower() for char in password)\n\n    def has_uppercase_letter(password):\n        return any(char.isupper() for char in password)\n\n    def has_digit(password):\n        return any(char.isdigit() for char in password)\n\n    def has_special_char(password):\n        special_chars = \"!@#$%^&*()_+-=[]{}|\\\\;':\\\",./<>?\"\n        return any(char in special_chars for char in password)\n\n    def is_valid_length(password):\n        return len(password) >= 8\n\n    return (has_lowercase_letter(password) and\n            has_uppercase_letter(password) and\n            has_digit(password) and\n            has_special_char(password) and\n            is_valid_length(password))\n\ndef g():\n    return \"Passw0rd!\"\nassert f(g())\n",
        "idx_generation": 9,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=12, b=5, c=10) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c even integers)\"\"\"\n    return n + a == sum([b * (2*i) for i in range(1, c+1)])\ndef g(a=12, b=5, c=10):\n    return -a + sum([b * (2*i) for i in range(1, c+1)])\nassert f(g())\n",
        "idx_generation": 104,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(arr: List[float], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target.\"\"\"\n    return any((math.isclose(arr[i] * arr[j], target) for i in range(len(arr)) for j in range(i+1, len(arr))))\ndef g(target=10):\n    arr = [0.5, 2, 4, 3, 5]\n    return arr\nassert f(g())\n",
        "idx_generation": 394,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == (m*n - 1)//2\ndef g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == (m*n - 1)//2:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 193,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list that sum up to the target\"\"\"\n    seen = set()\n    for num in numbers:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    return [2, 4, 6, 8]\n\nassert f(g())\n",
        "idx_generation": 103,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down, right, or diagonally down-right in the grid. The path must contain the number 3 at least once and the number 1 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_three, found_one):\n        if i == rows - 1 and j == cols - 1 and found_three:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one += 1\n            if found_one > 2:\n                return False\n        if nums[i][j] == 3:\n            found_three = True\n        return helper(i+1, j, found_three, found_one) or helper(i, j+1, found_three, found_one) or helper(i+1, j+1, found_three, found_one)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[3, 0, 0], [1, 3, 0], [0, 1, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 482,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the number 0 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, found_zero):\n        if i == rows - 1 and j == cols - 1 and found_one:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            found_zero += 1\n            if found_zero > 2:\n                return False\n        if nums[i][j] == 1:\n            found_one = True\n        return helper(i+1, j, found_one, found_zero) or helper(i, j+1, found_one, found_zero)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[1, 0, 0], [1, 3, 0], [0, 1, 3]]):\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 476,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=18) -> bool:\n    \"\"\"Check if the given matrix contains a row or column that sums up to the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum == target:\n            return True\n    return False\ndef g(target=18):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "idx_generation": 38,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grid: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the number 4 exactly once.\"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n\n    def helper(i, j, found_one, found_four):\n        if i == rows - 1 and j == cols - 1 and found_four:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if grid[i][j] == 4:\n            found_four = True\n        if grid[i][j] == 1:\n            found_one += 1\n        return helper(i+1, j, found_one, found_four) or helper(i, j+1, found_one, found_four)\n\n    return helper(0, 0, 0, False)\n\ndef g(grid=[[1, 0, 0], [4, 1, 0], [0, 4, 0]]):\n    return grid\n\nassert f(g())\n",
        "idx_generation": 462,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(grid: List[List[int]], k=2) -> bool:\n    \"\"\"Check if there exists a subgrid of size k x k in the grid where the sum of its elements is divisible by k.\"\"\"\n    for i in range(len(grid) - k + 1):\n        for j in range(len(grid[0]) - k + 1):\n            subgrid = [row[j:j+k] for row in grid[i:i+k]]\n            if sum(sum(row) for row in subgrid) % k == 0:\n                return True\n    return False\n\ndef g(k=2):\n    return [[1, 2, 3, 4, 5],\n            [6, 7, 8, 9, 10],\n            [11, 12, 13, 14, 15],\n            [16, 17, 18, 19, 20],\n            [21, 22, 23, 24, 25]]\n\nassert f(g())\n\n",
        "idx_generation": 408,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=7) -> bool:\n    \"\"\"Check if the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 0,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find if there exists a subsequence of numbers in the list whose sum is equal to the target.\"\"\"\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in numbers:\n        for i in range(target, num-1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    return dp[target]\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80]\n\nassert f(g())\n",
        "idx_generation": 357,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least twice and the number 0 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, found_zero):\n        if i == rows - 1 and j == cols - 1 and found_one >= 2:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            found_zero += 1\n            if found_zero > 2:\n                return False\n        if nums[i][j] == 1:\n            found_one += 1\n        return helper(i+1, j, found_one, found_zero) or helper(i, j+1, found_one, found_zero)\n\n    return helper(0, 0, 0, 0)\n\ndef g(nums=[[1, 0, 0], [1, 1, 0], [0, 1, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 279,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers. You can only move down or right in the grid. The path must contain the number 5 at least once and the number 0 exactly once.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_five, found_zero):\n        if i == rows - 1 and j == cols - 1 and found_five:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            found_zero += 1\n            if found_zero > 1:\n                return False\n        if nums[i][j] == 5:\n            found_five = True\n        return helper(i+1, j, found_five, found_zero) or helper(i, j+1, found_five, found_zero)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[5, 4, 0], [1, 5, 2], [3, 1, 0]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 339,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=-128) -> bool:\n    \"\"\"Check if the given number is the bitwise AND of x and a\"\"\"\n    return x == x & a\ndef g(a=-128):\n    return a\n\nassert f(g())\n",
        "idx_generation": 247,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: List[int], a=0, b=0, c=0, d=0) -> bool:\n    \"\"\"Check if a point lies on a specific line.\nSolution should be a tuple of the (x,y) coordinates.\nThe equation of the line is: ax + by + c = 0\"\"\"\n    x, y = e\n    return a*x + b*y + c == 0\ndef g(a=1, b=2, c=3):\n    return [a, b]\nassert f(g())\n",
        "idx_generation": 230,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers. You can only move down or right in the grid. The path must contain the number 3 at least once and the sum of all numbers along the path must be a multiple of 3.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    def is_multiple_of_three(n):\n        return n % 3 == 0\n\n    def helper(i, j, found_three, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_three and is_multiple_of_three(path_sum):\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if matrix[i][j] == 3:\n            found_three = True\n        path_sum += matrix[i][j]\n        return helper(i+1, j, found_three, path_sum) or helper(i, j+1, found_three, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(matrix=[[1, 2, 3], [4, 3, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 447,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    \"\"\"Find a path with an odd number of nodes from nodes 0 to 1 in the given digraph on vertices 0, 1,..., n.\"\"\"\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    odd_paths = {}\n    even_paths = {0: [0]}\n    n = 1\n    for _ in range(max((max(e) for e in edges)) + 1):\n        for (i, j) in edges:\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n    return even_paths.get(n)\nassert f(g())\n",
        "idx_generation": 82,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and every number in the path must be a power of 2.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one):\n        if i == rows - 1 and j == cols - 1 and found_one:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if not is_power_of_two(nums[i][j]):\n            return False\n        return helper(i+1, j, found_one) or helper(i, j+1, found_one)\n\n    return helper(0, 0, False)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\ndef is_power_of_two(n):\n    return n > 0 and (n & (n - 1)) == 0\n\nassert f(g())\n",
        "idx_generation": 390,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/2.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len=365):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n    return best[1]\nassert f(g())\n",
        "idx_generation": 360,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 3/4.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 3/4) ** 2 <= year_len\ndef g(year_len=365):\n    n = 1\n    distinct_prob = 1.0\n    best = (3/4, 1)\n    while distinct_prob > 3/4:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(3/4 - distinct_prob), n))\n    return best[1]\nassert f(g())\n",
        "idx_generation": 329,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and every number in the path must be a perfect square.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one):\n        if i == rows - 1 and j == cols - 1 and found_one:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if not is_perfect_square(nums[i][j]):\n            return False\n        return helper(i+1, j, found_one) or helper(i, j+1, found_one)\n\n    return helper(0, 0, False)\n\ndef g(nums=[[1, 0, 0], [4, 9, 0], [0, 16, 1]]):\n    return nums\n\ndef is_perfect_square(n):\n    return int(n ** 0.5) ** 2 == n\n\nassert f(g())\n",
        "idx_generation": 471,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=3) -> bool:\n    \"\"\"Check if the given string contains the target number of consecutive consonants.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(s)):\n        if s[i] not in vowels:\n            count += 1\n            if count == target:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(target=3):\n    return \"bcdfghjklmnpqrstvwxyz\" * target\n\nassert f(g())\n",
        "idx_generation": 185,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\nassert f(g())\n",
        "idx_generation": 194,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=20, b=4, c=3) -> bool:\n    \"\"\"Find n such that (the sum of the first b multiples of c) - a == n\"\"\"\n    return sum([c * i for i in range(b)]) - a == n\ndef g(a=20, b=4, c=3):\n    return sum([c * i for i in range(b)]) - a\nassert f(g())\n",
        "idx_generation": 312,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target=0, start=0) -> bool:\n    \"\"\"Find the index of the last occurrence of the target number in a sequence.\"\"\"\n    return lst[::-1].index(target, len(lst)-start-1) == len(lst)-start-1\n\ndef g(target=0, start=0):\n    return [i for i in range(10)] + [target]\n\nassert f(g())\n",
        "idx_generation": 415,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(words: List[str], target_word=\"PYTHON\") -> bool:\n    \"\"\"Check if a target word can be formed by concatenating words from a given list. Each word can be used only once.\n    Return True if the target word can be formed, False otherwise.\"\"\"\n    def is_valid(current_word, remaining_words):\n        if current_word == target_word:\n            return True\n        for word in remaining_words:\n            if target_word.startswith(current_word + word):\n                if is_valid(current_word + word, [w for w in remaining_words if w != word]):\n                    return True\n        return False\n    return is_valid(\"\", words)\ndef g(words: List[str], target_word=\"PYTHON\"):\n    def shuffle_word(word):\n        word = list(word)\n        random.shuffle(word)\n        return ''.join(word)\n    words = list(set(words))\n    words.sort()\n    shuffled_words = [shuffle_word(word) for word in words]\n    return shuffled_words\nassert f(g([\"P\", \"Y\", \"T\", \"H\", \"O\", \"N\"]))\n\n",
        "idx_generation": 76,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"Find the last index where the target integer occurs in a list of integers.\"\"\"\n    last_index = -1\n    for i in range(len(nums)):\n        if nums[i] == target:\n            last_index = i\n    return last_index\n\ndef g(nums=[1, 3, 2, 7, 9, 2, 4], target=2):\n    return nums, target\n\nassert f(*g()) == 5\n",
        "idx_generation": 493,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[float]], target=0.5) -> bool:\n    \"\"\"Find a matrix where the average value of all the elements is equal to the target.\"\"\"\n    total_sum = 0\n    num_elements = 0\n    for row in matrix:\n        for element in row:\n            total_sum += element\n            num_elements += 1\n    average = total_sum / num_elements\n    return average == target\ndef g(target=0.5):\n    return [[0.5, 0.5], [0.5, 0.5]]\nassert f(g())\n",
        "idx_generation": 36,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\ndef g(nums=[4, 8, 12, 16, 20]):\n    return nums\nassert f(g())\n",
        "idx_generation": 219,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=5) -> bool:\n    \"\"\"Check if a matrix is a magic square of size n x n\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all((row_sum == col_sum == diagonal_sum1 == diagonal_sum2) for row_sum, col_sum in zip(row_sums, col_sums))\ndef g(n=5):\n    return [[17, 24, 1, 8, 15], [23, 5, 7, 14, 16], [4, 6, 13, 20, 22], [10, 12, 19, 21, 3], [11, 18, 25, 2, 9]]\nassert f(g())\n",
        "idx_generation": 81,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 2 at least once and the number 1 exactly three times.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_two, found_one):\n        if i == rows - 1 and j == cols - 1 and found_two:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one += 1\n            if found_one > 3:\n                return False\n        if nums[i][j] == 2:\n            found_two = True\n        return helper(i+1, j, found_two, found_one) or helper(i, j+1, found_two, found_one)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[2, 0, 0], [1, 2, 0], [0, 1, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 311,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the sum of all even numbers in the path must be greater than or equal to the product of all odd numbers in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, even_sum, odd_prod):\n        if i == rows - 1 and j == cols - 1 and found_one and even_sum >= odd_prod:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if nums[i][j] % 2 == 0:\n            even_sum += nums[i][j]\n        else:\n            odd_prod *= nums[i][j]\n        return helper(i+1, j, found_one, even_sum, odd_prod) or helper(i, j+1, found_one, even_sum, odd_prod)\n\n    return helper(0, 0, False, 0, 1)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 415,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is symmetric along its main diagonal.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 201,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a subset of numbers from the list whose sum is less than or equal to the target_sum\"\"\"\n    n = len(arr)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[n][target_sum]\n\ndef g(target_sum=100):\n    return list(range(1, target_sum+1))\n\nassert f(g()) == True\n",
        "idx_generation": 66,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=7) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=7):\n    return [i**2 for i in range(1, k+1)]\n\nassert f(g())\n",
        "idx_generation": 352,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 exactly three times and the number 0 exactly once.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, found_zero):\n        if i == rows - 1 and j == cols - 1 and found_one == 3:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            found_zero += 1\n            if found_zero > 1:\n                return False\n        if nums[i][j] == 1:\n            found_one += 1\n        return helper(i+1, j, found_one, found_zero) or helper(i, j+1, found_one, found_zero)\n\n    return helper(0, 0, 0, 0)\n\ndef g(nums=[[1, 0, 0], [1, 1, 0], [0, 1, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 279,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(words: List[str], prefix=\"a\") -> bool:\n    \"\"\"Find a word from the list that starts with the given prefix.\"\"\"\n    return any(word.startswith(prefix) for word in words)\ndef g(words=[\"apple\", \"banana\", \"cherry\", \"date\"]):\n    return words\n\nassert f(g())\n",
        "idx_generation": 121,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[5, 10, 15, 7, 3]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 0,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, k=5, lower=0, seq=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is even, possibly looping around\"\"\"\n    total = 0\n    for i in range(x, x + k):\n        total += seq[i]\n    return total % 2 == 0\ndef g(k=5, lower=0, seq=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    def sum(x):\n        result = 0\n        for i in range(x, x + k):\n            result += seq[i]\n        return result\n    return max(range(-len(seq), len(seq) - k + 1), key=sum)\nassert f(g())\n",
        "idx_generation": 303,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, result=2022) -> bool:\n    \"\"\"Check if the given number is the result of multiplying 2 by n\"\"\"\n    return result == 2 * n\n\ndef g(result=2022):\n    return result // 2\n\nassert f(g())\n",
        "idx_generation": 449,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    \"\"\"Check if a number n is a common divisor of both a and b, and is greater than or equal to the lower_bound\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a=247586288427023352, b=372021520735824432, lower_bound=1709054537):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n\nassert f(g())\n",
        "idx_generation": 20,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=5) -> bool:\n    \"\"\"Check if a number is a multiple of k.\"\"\"\n    return n % k == 0\ndef g(k=5):\n    return k * 10\nassert f(g())\n",
        "idx_generation": 314,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=4, lower=-10000, seq=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose product is maximal, possibly looping around\"\"\"\n    prod = 1\n    for i in range(start, start + k):\n        prod *= seq[i]\n    return prod >= lower\n\ndef g(k=4, lower=-10000, seq=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]):\n    def prod(start):\n        ans = 1\n        for i in range(start, start + k):\n            ans *= seq[i]\n        return ans\n    return max(range(-len(seq), len(seq) - k + 1), key=prod)\n\nassert f(g())\n",
        "idx_generation": 460,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, n=25) -> bool:\n    \"\"\"Find the square root of x and check if it is an integer divisible by n.\"\"\"\n    return x ** 0.5 % n == 0\ndef g(n=25):\n    return n ** 2\nassert f(g())\n",
        "idx_generation": 196,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=100) -> bool:\n    \"\"\"Determine if the absolute value of x is equal to a\"\"\"\n    return abs(x) == a\ndef g(a=100):\n    return a\nassert f(g())\n",
        "idx_generation": 17,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=5):\n    return [i**2 for i in range(1, k+1)]\n\nassert f(g())\n",
        "idx_generation": 143,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]], target=0) -> bool:\n    \"\"\"Find whether the target number is present in the 2D array\"\"\"\n    return any(target in row for row in arr)\n\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target]]\n\nassert f(g())\n",
        "idx_generation": 432,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: Tuple[int, int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies inside a rectangle.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return (a <= x <= a+c) and (b <= y <= b+c)\ndef g(a=1, b=2, c=10):\n    return (a+c//2, b+c//2)\nassert f(g())\n",
        "idx_generation": 168,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grid: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 3 at least once and the number 8 exactly once.\"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n\n    def helper(i, j, found_three, found_eight):\n        if i == rows - 1 and j == cols - 1 and found_eight:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if grid[i][j] == 8:\n            found_eight = True\n        if grid[i][j] == 3:\n            found_three += 1\n        return helper(i+1, j, found_three, found_eight) or helper(i, j+1, found_three, found_eight)\n\n    return helper(0, 0, 0, False)\n\ndef g(grid=[[3, 0, 0], [8, 1, 0], [0, 8, 0]]):\n    return grid\n\nassert f(g())\n\n",
        "idx_generation": 493,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any(target - num in nums for num in nums)\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 182,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grid: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 6 at least once and the number 7 exactly once.\"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n\n    def helper(i, j, found_six, found_seven):\n        if i == rows - 1 and j == cols - 1 and found_seven:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if grid[i][j] == 7:\n            found_seven = True\n        if grid[i][j] == 6:\n            found_six += 1\n        return helper(i+1, j, found_six, found_seven) or helper(i, j+1, found_six, found_seven)\n\n    return helper(0, 0, 0, False)\n\ndef g(grid=[[6, 0, 0], [7, 1, 0], [0, 7, 0]]):\n    return grid\n\nassert f(g())\n\n",
        "idx_generation": 493,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the maximum number in the path must be greater than or equal to the sum of all other numbers in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, max_num, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and max_num >= path_sum - max_num:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        max_num = max(max_num, nums[i][j])\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_one, max_num, path_sum) or helper(i, j+1, found_one, max_num, path_sum)\n\n    return helper(0, 0, False, float('-inf'), 0)\n\ndef g(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 439,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=10) -> bool:\n    \"\"\"Determine if x is greater than a\"\"\"\n    return x > a\ndef g(a=10):\n    return a + 1\nassert f(g())\n",
        "idx_generation": 17,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: List[int], a=5, b=4, c=-3, d=2024) -> bool:\n    \"\"\"Check if the given point is contained within the triangle formed by three points.\nSolution should be a boolean value: True if the point is contained within the triangle, False otherwise.\"\"\"\n    x = e[0]\n    y = e[1]\n    x1, y1 = 0, c\n    x2, y2 = d // b, 0\n    x3, y3 = d // b, c\n    area_triangle = abs((x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2)) / 2)\n    area_sub_triangle1 = abs((x*(y1-y3) + x1*(y3-y) + x3*(y-y1)) / 2)\n    area_sub_triangle2 = abs((x1*(y-y2) + x*(y2-y1) + x2*(y1-y)) / 2)\n    area_sub_triangle3 = abs((x*(y2-y3) + x2*(y3-y) + x3*(y-y2)) / 2)\n    return area_sub_triangle1 + area_sub_triangle2 + area_sub_triangle3 == area_triangle\n\ndef g(a=5, b=4, c=-3, d=2024):\n    return [d // b, c // a]\n\nassert f(g())\n",
        "idx_generation": 56,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the number 0 at least once.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, found_zero):\n        if i == rows - 1 and j == cols - 1 and found_one >= 1 and found_zero >= 1:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            found_zero += 1\n        if nums[i][j] == 1:\n            found_one += 1\n        return helper(i+1, j, found_one, found_zero) or helper(i, j+1, found_one, found_zero)\n\n    return helper(0, 0, 0, 0)\n\ndef g(nums=[[1, 0, 0], [1, 1, 0], [0, 1, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 288,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 2 at least twice and the number 0 exactly once.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    def helper(i, j, found_two, found_zero):\n        if i == rows - 1 and j == cols - 1 and found_two >= 2:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if matrix[i][j] == 0:\n            found_zero += 1\n            if found_zero > 1:\n                return False\n        if matrix[i][j] == 2:\n            found_two += 1\n        return helper(i+1, j, found_two, found_zero) or helper(i, j+1, found_two, found_zero)\n\n    return helper(0, 0, 0, 0)\n\ndef g(target=10):\n    return [[2, 0, 0], [2, 2, 0], [0, 2, 2]]\n\nassert f(g())\n",
        "idx_generation": 364,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=-128) -> bool:\n    \"\"\"Check if the given number is the bitwise OR of x and a\"\"\"\n    return x == x | a\ndef g(a=-128):\n    return a\n\nassert f(g())\n",
        "idx_generation": 259,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: List[int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies inside an ellipse.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return (((x - a) ** 2) / (c ** 2)) + (((y - b) ** 2) / (d ** 2)) <= 1\ndef g(a=1, b=2, c=10, d=1000):\n    return [a, b]\nassert f(g())\n",
        "idx_generation": 246,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers. You can only move down or right in the grid. The path must contain the number 2 at least once and the sum of all numbers along the path must be divisible by 3.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    def helper(i, j, found_two, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_two and path_sum % 3 == 0:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if matrix[i][j] == 2:\n            found_two = True\n        path_sum += matrix[i][j]\n        return helper(i+1, j, found_two, path_sum) or helper(i, j+1, found_two, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(matrix=[[1, 2, 3], [4, 3, 6], [7, 8, 2]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 464,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(p: List[int], edges=[[1, 6], [2, 3], [2, 7], [0, 8], [7, 8], [7, 2], [1, 5], [8, 7], [7, 0], [0, 0], [8, 1], [5, 7], [4, 7], [6, 1], [4, 4], [7, 4]]) -> bool:\n    \"\"\"Check if there is a path from node 0 to node 1 in the given digraph on vertices 0, 1,..., n.\"\"\"\n    return p[0] == 0 and p[-1] == 1 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges=[[1, 6], [2, 3], [2, 7], [0, 8], [7, 8], [7, 2], [1, 5], [8, 7], [7, 0], [0, 0], [8, 1], [5, 7], [4, 7], [6, 1], [4, 4], [7, 4]]):\n    paths = {}\n    paths[0] = [0]\n    for _ in range(max((max(e) for e in edges)) + 1):\n        for (i, j) in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(1)\nassert f(g())\n",
        "idx_generation": 112,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> int:\n    \"\"\"Find the maximum sum of a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. Each cell can be visited only once.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, curr_sum):\n        if i == rows - 1 and j == cols - 1:\n            return curr_sum + nums[i][j]\n        if i >= rows or j >= cols:\n            return float('-inf')\n        return max(helper(i+1, j, curr_sum + nums[i][j]), helper(i, j+1, curr_sum + nums[i][j]))\n\n    return helper(0, 0, 0)\n\ndef g(nums=[[3, 7, 2], [1, 8, 4], [2, 5, 6]]):\n    return nums\n\nassert f(g()) == 29\n\n",
        "idx_generation": 420,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of four people having the same birthday in a group of n is near 1/10.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 1/10) ** 2 <= year_len\ndef g(year_len=365):\n    n = 1\n    distinct_prob = 1.0\n    best = (1/10, 1)\n    while distinct_prob > 1/10:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(1/10 - distinct_prob), n))\n    return best[1]\nassert f(g())\n",
        "idx_generation": 350,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down, right, or diagonally down-right in the grid. The path must contain the number 2 at least once and the number 1 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_two, found_one):\n        if i == rows - 1 and j == cols - 1 and found_two:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one += 1\n            if found_one > 2:\n                return False\n        if nums[i][j] == 2:\n            found_two = True\n        return helper(i+1, j, found_two, found_one) or helper(i, j+1, found_two, found_one) or helper(i+1, j+1, found_two, found_one)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[2, 0, 0], [1, 2, 0], [0, 1, 3]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 485,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='abcdefghi', target='') -> bool:\n    \"\"\"Find the three slice indices that give the specific target in string s\"\"\"\n    (i, j, k) = inds\n    return s[i:j] + s[j:k] == target\ndef g(s='abcdefghi', target=''):\n    from itertools import product\n    for (i, j, k) in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j] + s[j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g())\n",
        "idx_generation": 192,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=-2, c=10) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])\ndef g(a=5, b=-2, c=10):\n    return -a + sum([b * i for i in range(c)])\nassert f(g())\n",
        "idx_generation": 9,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/3.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 1/3) ** 2 <= year_len\ndef g(year_len=365):\n    n = 1\n    distinct_prob = 1.0\n    best = (1/3, 1)\n    while distinct_prob > 1/3:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(1/3 - distinct_prob), n))\n    return best[1]\nassert f(g())\n",
        "idx_generation": 329,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Given a list of numbers, find a pair of numbers that add up to the target sum\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 434,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=10) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=10):\n    return [i**3 for i in range(1, k+1)]\n\nassert f(g())\n",
        "idx_generation": 104,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list whose sum is greater than the target.\"\"\"\n    return any(nums[i] + nums[j] > target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 47,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a combination of numbers whose sum is equal to the target sum\"\"\"\n    def number_combination(numbers, target_sum):\n        if target_sum == 0:\n            return True\n        if not numbers or target_sum < 0:\n            return False\n        return number_combination(numbers[1:], target_sum - numbers[0]) or number_combination(numbers[1:], target_sum)\n    return number_combination(numbers, target_sum)\ndef g(numbers=[10, 20, 30, 40, 50]):\n    return numbers\nassert f(g())\n",
        "idx_generation": 275,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=5) -> bool:\n    \"\"\"Check if a matrix is a magic square of size n x n\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all((row_sum == col_sum == diagonal_sum1 == diagonal_sum2) for row_sum, col_sum in zip(row_sums, col_sums))\ndef g(n=5):\n    return [[17, 24, 1, 8, 15], [23, 5, 7, 14, 16], [4, 6, 13, 20, 22], [10, 12, 19, 21, 3], [11, 18, 25, 2, 9]]\nassert f(g())\n",
        "idx_generation": 172,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers. You can only move down or right in the grid. The path must contain the number 2 at least once, and the sum of all numbers along the path must be even.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_two, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_two and path_sum % 2 == 0:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            found_two = True\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_two, path_sum) or helper(i, j+1, found_two, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[2, 1, 1], [3, 2, 1], [1, 3, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 402,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 3 at least once and the number 4 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_three, found_four):\n        if i == rows - 1 and j == cols - 1 and found_three:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 4:\n            found_four += 1\n            if found_four > 2:\n                return False\n        if nums[i][j] == 3:\n            found_three = True\n        return helper(i+1, j, found_three, found_four) or helper(i, j+1, found_three, found_four)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[3, 0, 0], [4, 3, 0], [0, 4, 3]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 444,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the matrix is symmetric.\"\"\"\n    return (np.array(matrix) == np.array(matrix).T).all()\ndef g(target=0):\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "idx_generation": 234,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5) -> bool:\n    \"\"\"Check if n is a power of a\"\"\"\n    while (n % a == 0):\n        n = n / a\n    return n == 1\ndef g(a=5):\n    return a ** 8\nassert f(g())\n",
        "idx_generation": 99,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down, right, or diagonally (down-right) in the grid. The path must contain the number 1 at least once and the sum of the numbers in the path must be even.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and path_sum % 2 == 0:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_one, path_sum) or helper(i, j+1, found_one, path_sum) or helper(i+1, j+1, found_one, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[1, 1, 1], [2, 2, 2], [3, 3, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 400,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(x: int, k=4, lower=-100, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is even, possibly looping around\"\"\"\n    total = 0\n    for i in range(x, x + k):\n        total += seq[i]\n    return total % 2 == 0\n\ndef g(k=4, lower=-100, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> int:\n    def sum(x):\n        result = 0\n        for i in range(x, x + k):\n            result += seq[i]\n        return result\n    return max(range(-len(seq), len(seq) - k + 1), key=sum)\n\nassert f(g())\n",
        "idx_generation": 279,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if the target list contains n as an element.\"\"\"\n    return n in target\ndef g(target=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return target[0]\nassert f(g())\n",
        "idx_generation": 133,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=8) -> bool:\n    \"\"\"Given a list of integers and a target number, find any pair of numbers in the list that multiply to the target.\nSample Input:\n[2, 4, 3, 5]\nSample Output:\n(2, 4)\"\"\"\n    return any((nums[i] * nums[j] == target) for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(target=8):\n    return [2, 4]\nassert f(g())\n",
        "idx_generation": 8,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=5) -> bool:\n    \"\"\"Check if the sum of the first a multiples of b is equal to n.\"\"\"\n    return sum([i*b for i in range(1, a+1)]) == n\n\ndef g(a=3, b=5):\n    return sum([i*b for i in range(1, a+1)])\n\nassert f(g())\n",
        "idx_generation": 410,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=7, c=9) -> bool:\n    \"\"\"Check if the given number n is divisible by a, b, and c\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\ndef g(a=3, b=7, c=9):\n    return a * b * c\n\nassert f(g())\n\n",
        "idx_generation": 483,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=5):\n    return [i**2 for i in range(1, k+1)] + [j**3 for j in range(1, k+1)]\n\nassert f(g())\n",
        "idx_generation": 140,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=7) -> bool:\n    \"\"\"Check if a number is a multiple of k.\"\"\"\n    return n % k == 0\ndef g(k=7):\n    return k * 2\nassert f(g())\n\n\n",
        "idx_generation": 371,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target: int):\n    return [1, 3, 5, 7, 9], target\n\nassert f(*g(10))\n",
        "idx_generation": 298,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the list whose sum is equal to zero.\"\"\"\n    n = len(arr)\n    for i in range(n - k + 1):\n        subarray = arr[i:i+k]\n        if sum(subarray) == 0:\n            return True\n    return False\n\ndef g(k=3):\n    return [i for i in range(-k, k+1)]\n\nassert f(g())\n",
        "idx_generation": 57,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(d: Dict[str, int], target=100) -> bool:\n    \"\"\"Check if the sum of values in the dictionary is equal to the target value.\"\"\"\n    return sum(d.values()) == target\n\ndef g():\n    return {'apple': 20, 'banana': 30, 'cherry': 50}\n\nassert f(g())\n",
        "idx_generation": 201,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(seq: List[int], target_sum=10) -> bool:\n    \"\"\"Find a subsequence of seq whose sum is equal to target_sum\"\"\"\n    for i in range(len(seq)):\n        for j in range(i+1, len(seq)+1):\n            if sum(seq[i:j]) == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 205,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 4 at least once and the number 2 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_four, found_two):\n        if i == rows - 1 and j == cols - 1 and found_four:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            found_two += 1\n            if found_two > 2:\n                return False\n        if nums[i][j] == 4:\n            found_four = True\n        return helper(i+1, j, found_four, found_two) or helper(i, j+1, found_four, found_two)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[4, 0, 0], [2, 4, 0], [0, 2, 4]]):\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 495,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list such that their product is equal to the target.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        if num != 0 and target % num == 0:\n            complement = target // num\n            if complement in num_set:\n                return True\n    return False\n\ndef g(target=50):\n    return [1, 2, 3, 4, 5, 10, 20]\n\nassert f(g(), 100)\n",
        "idx_generation": 347,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the sum of all elements in the path must be divisible by 3.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and path_sum % 3 == 0:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_one, path_sum) or helper(i, j+1, found_one, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 496,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to target and the length of the subarray is greater than 1.\"\"\"\n    prefix_sum = 0\n    sums = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target or (prefix_sum - target) in sums:\n            if len(nums) > 1:\n                return True\n        sums.add(prefix_sum)\n    return False\n\ndef g(target=100):\n    return [i for i in range(1, 20)] + [target - 190]\n\nassert f(g())\n",
        "idx_generation": 456,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, digit=1) -> bool:\n    \"\"\"Find an integer whose perfect square begins with a specific digit in its decimal representation.\"\"\"\n    return str(n * n).startswith(str(digit))\ndef g(digit=1):\n    return int(int(str(digit) + '0' * 9) ** 0.5) + 1\nassert f(g())\n",
        "idx_generation": 31,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(points: List[List[int]]) -> bool:\n    \"\"\"Check if all the points in the list form a rectangle.\"\"\"\n    if len(points) != 4:\n        return False\n    x_coords = [point[0] for point in points]\n    y_coords = [point[1] for point in points]\n    return len(set(x_coords)) == 2 and len(set(y_coords)) == 2\n\ndef g():\n    points = [[0, 0], [0, 1], [1, 0], [1, 1]]\n    return points\n\nassert f(g())\n",
        "idx_generation": 94,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least three times and the number 0 exactly once.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, found_zero):\n        if i == rows - 1 and j == cols - 1 and found_one >= 3 and found_zero == 1:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            found_zero += 1\n        if nums[i][j] == 1:\n            found_one += 1\n        return helper(i+1, j, found_one, found_zero) or helper(i, j+1, found_one, found_zero)\n\n    return helper(0, 0, 0, 0)\n\ndef g(nums=[[1, 0, 0], [1, 1, 0], [0, 1, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 288,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 2 at least once and the number 3 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_two, found_three):\n        if i == rows - 1 and j == cols - 1 and found_two:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 3:\n            found_three += 1\n            if found_three > 2:\n                return False\n        if nums[i][j] == 2:\n            found_two = True\n        return helper(i+1, j, found_two, found_three) or helper(i, j+1, found_two, found_three)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[2, 0, 0], [3, 2, 0], [0, 3, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 377,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=5) -> bool:\n    \"\"\"Check if the given number is the bitwise AND of x and a\"\"\"\n    return x == x & a\ndef g(a=5):\n    return a\n\nassert f(g())\n",
        "idx_generation": 345,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(points: List[List[int]], n=4) -> bool:\n    \"\"\"Check if the given points form a square in a 2D plane\"\"\"\n    assert all(len(p) == 2 for p in points) and len(points) == n\n    sides = []\n    for i in range(n):\n        for j in range(i+1, n):\n            d = (points[i][0] - points[j][0])**2 + (points[i][1] - points[j][1])**2\n            sides.append(d)\n    return len(set(sides)) == 2 and sides.count(max(sides)) == 2\n\ndef g(n=4):\n    return [[0, 0], [0, 1], [1, 1], [1, 0]]\n\nassert f(g())\n",
        "idx_generation": 373,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers. You can only move down or right in the grid. The path must contain the number 2 at least once and the sum of all numbers along the path must be a prime number.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def helper(i, j, found_two, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_two and is_prime(path_sum):\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            found_two = True\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_two, path_sum) or helper(i, j+1, found_two, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[2, 1, 1], [3, 2, 1], [1, 3, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 478,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grid: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down or right in the grid.\"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n\n    def helper(i, j):\n        if i == rows - 1 and j == cols - 1:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if grid[i][j] == 0:\n            return False\n        return helper(i+1, j) or helper(i, j+1)\n\n    return helper(0, 0)\n\ndef g(grid=[[1, 0, 0], [1, 1, 0], [0, 1, 1]]):\n    return grid\n\nassert f(g())\n",
        "idx_generation": 157,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=8, n=8) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=8, n=8):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 54,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]], target=10) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 3 at least once and the sum of all numbers along the path must be greater than the target.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_three, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_three >= 1 and path_sum > target:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 3:\n            found_three += 1\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_three, path_sum) or helper(i, j+1, found_three, path_sum)\n\n    return helper(0, 0, 0, 0)\n\ndef g(target=10):\n    return [[2, 4, 1], [5, 3, 2], [1, 2, 3]]\n\nassert f(g())\n",
        "idx_generation": 424,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target=0) -> List[int]:\n    \"\"\"Return a list containing the indices of all occurrences of the target number in the given list\"\"\"\n    indices = []\n    for i in range(len(nums)):\n        if nums[i] == target:\n            indices.append(i)\n    return indices\n\ndef g(target=0):\n    return [1, 0, 3, 0, 5, 0, 7, 0, 9]\n\nassert f(g()) == [1, 3, 5, 7]\n",
        "idx_generation": 397,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int]) -> bool:\n    \"\"\"Find a list of integers containing at least four distinct values, such that no integer repeats\nthrice consecutively among the first fourteen entries. (So the list needs to have length greater than thirteen.)\"\"\"\n    return all([li[i] != li[i + 1] != li[i + 2] for i in range(13)]) and len(set(li)) >= 4\ndef g():\n    return [0, 1, 2, 3] * 5\nassert f(g())\n",
        "idx_generation": 50,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/2.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 1/2) ** 2 <= year_len\ndef g(year_len=365):\n    n = 1\n    distinct_prob = 1.0\n    best = (1/2, 1)\n    while distinct_prob > 1/2:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(1/2 - distinct_prob), n))\n    return best[1]\nassert f(g())\n",
        "idx_generation": 358,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"Find all indices where the target integer occurs in a list of integers.\"\"\"\n    indices = []\n    for i in range(len(nums)):\n        if nums[i] == target:\n            indices.append(i)\n    return indices\n\ndef g(nums=[2, 4, 2, 6, 2, 8, 2], target=2):\n    return nums, target\n\nassert f(*g()) == [0, 2, 4, 6]\n",
        "idx_generation": 451,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with a sum of zero.\"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum in prefix_sums or prefix_sum == 0:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\n\ndef g():\n    return [4, -2, -3, 1, 6]\n\nassert f(g())\n",
        "idx_generation": 187,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=2, b=5) -> bool:\n    \"\"\"Check if the difference between x and the product of a and b is less than x\"\"\"\n    return abs(x - (a * b)) < x\n\ndef g(a=2, b=5):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 64,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(seq: List[int], target_sum=25) -> bool:\n    \"\"\"Find a subsequence of seq whose sum is greater than target_sum\"\"\"\n    for i in range(len(seq)):\n        for j in range(i+1, len(seq)+1):\n            if sum(seq[i:j]) > target_sum:\n                return True\n    return False\n\ndef g(target_sum=25):\n    return [1, 2, 3, 4, 5, 6, 7]\n\nassert f(g())\n",
        "idx_generation": 284,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Determine if there exists a subset of numbers in the given array that multiplies up to the target product\"\"\"\n    dp = [[False] * (target + 1) for _ in range(len(arr) + 1)]\n    for i in range(len(arr) + 1):\n        dp[i][1] = True\n    for i in range(1, len(arr) + 1):\n        for j in range(2, target + 1):\n            if arr[i-1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j // arr[i-1]]\n    return dp[len(arr)][target]\n\ndef g(target=20):\n    return [i for i in range(1, target+1)]\n\nassert f(g())\n",
        "idx_generation": 256,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a combination of numbers from the list whose sum is equal to the target.\"\"\"\n    n = len(arr)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[n][target]\n\ndef g(target=10):\n    return list(range(1, target+1))\n\nassert f(g()) == True\n\n",
        "idx_generation": 432,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 5 at least once and the number 1 exactly once.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_five, found_one):\n        if i == rows - 1 and j == cols - 1 and found_five and found_one:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if nums[i][j] == 5:\n            found_five = True\n        return helper(i+1, j, found_five, found_one) or helper(i, j+1, found_five, found_one)\n\n    return helper(0, 0, False, False)\n\ndef g(nums=[[5, 0, 0], [1, 1, 0], [0, 1, 5]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 449,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=6, n=6) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == 18\ndef g(m=6, n=6):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == 18:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 275,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=10, lower=-8326797433194240, seq=[49, -99, 80, 26, 54, 13, 37, 13, -52, -47]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is maximal, possibly looping around\"\"\"\n    total = 0\n    for i in range(start, start + k):\n        total += seq[i]\n    return total >= lower\n\ndef g(k=10, lower=-8326797433194240, seq=[49, -99, 80, 26, 54, 13, 37, 13, -52, -47]):\n    def sum_consecutive(start):\n        ans = 0\n        for i in range(start, start + k):\n            ans += seq[i]\n        return ans\n    return max(range(-len(seq), len(seq) - k + 1), key=sum_consecutive)\n\nassert f(g())\n",
        "idx_generation": 120,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down, right, or diagonally (down-right) in the grid. The path must contain the number 4 at least once and the sum of the numbers in the path must be odd.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_four, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_four and path_sum % 2 != 0:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 4:\n            found_four = True\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_four, path_sum) or helper(i, j+1, found_four, path_sum) or helper(i+1, j+1, found_four, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[1, 2, 1], [2, 4, 2], [3, 3, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 455,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(squares: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Position min(m, n) <= 5 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 5 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j), ('diag', i - j + m - 1)]})\ndef g(m=5, n=5):\n    k = min(m, n)\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 5 * k == len({t for (i, j) in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j), ('diag', i - j + m - 1)]}):\n            return [[i, j] for (i, j) in enumerate(p)]\nassert f(g())\n",
        "idx_generation": 338,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(target=5):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 205,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if a number is a multiple of any element in a list.\"\"\"\n    return any(n % x == 0 for x in lst)\ndef g(lst=[2, 4, 6, 8, 10]):\n    return min(lst)\nassert f(g())\n",
        "idx_generation": 10,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=15) -> bool:\n    \"\"\"Find a row or column in the matrix whose sum is equal to the target_sum.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        row_sum = sum(matrix[i])\n        if row_sum == target_sum:\n            return True\n    for j in range(cols):\n        col_sum = sum(matrix[i][j] for i in range(rows))\n        if col_sum == target_sum:\n            return True\n    return False\ndef g(target_sum=15):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "idx_generation": 11,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Determine if the given list contains a subsequence that sums up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]\n\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 175,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if n is a power of m.\"\"\"\n    while n % m == 0 and n > 1:\n        n /= m\n    return n == 1\n\ndef g(m=10):\n    return m * m\n\nassert f(g())\n",
        "idx_generation": 424,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> List[int]:\n    \"\"\"Find all the indices of the target number in the list\"\"\"\n    indices = []\n    for i in range(len(nums)):\n        if nums[i] == target:\n            indices.append(i)\n    return indices\ndef g(target=0):\n    return [1, 0, 3, 0, 5, 0, 7, 0, 9]\nassert f(g()) == [1, 3, 5, 7]\n",
        "idx_generation": 335,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the list whose sum is greater than or equal to zero.\"\"\"\n    n = len(arr)\n    for i in range(n - k + 1):\n        subarray = arr[i:i+k]\n        if sum(subarray) >= 0:\n            return True\n    return False\n\ndef g(k=5):\n    return [i for i in range(-k, k+1)]\n\nassert f(g())\n",
        "idx_generation": 73,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there is a subarray in the list that sums up to zero\"\"\"\n    for i in range(len(nums)):\n        current_sum = nums[i]\n        if current_sum == target:\n            return True\n        for j in range(i+1, len(nums)):\n            current_sum += nums[j]\n            if current_sum == target:\n                return True\n    return False\n\ndef g(target=0):\n    nums = [1, 2, -3, 4, 5]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 209,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 2 at least once and the number 0 exactly three times.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_two, found_zero):\n        if i == rows - 1 and j == cols - 1 and found_two:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            found_zero += 1\n            if found_zero > 3:\n                return False\n        if nums[i][j] == 2:\n            found_two = True\n        return helper(i+1, j, found_two, found_zero) or helper(i, j+1, found_two, found_zero)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[2, 0, 0], [1, 2, 0], [0, 1, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 304,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=25) -> bool:\n    \"\"\"Check if the product of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] * nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_sum=25):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n",
        "idx_generation": 349,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], k=3) -> bool:\n    \"\"\"Check if a given matrix is a magic square.\n    A magic square is a square matrix in which the sums of each row, each column, and both diagonals are the same.\"\"\"\n    n = len(matrix)\n    target_sum = k * (k**2 + 1) // 2\n    return all((sum(row) == target_sum for row in matrix)) and all((sum(col) == target_sum for col in zip(*matrix))) and sum(matrix[i][i] for i in range(n)) == target_sum and sum(matrix[i][n-i-1] for i in range(n)) == target_sum\ndef g(k=3):\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\nassert f(g())\n",
        "idx_generation": 458,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=987654321) -> bool:\n    \"\"\"Determine if a number is a multiple of a given factor.\"\"\"\n    return n % a == 0\ndef g(a=987654321):\n    return a * 2\nassert f(g())\n",
        "idx_generation": 36,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]]) -> bool:\n    \"\"\"Check if the given points form a rectangle.\"\"\"\n    x_values = [x for x, _ in points]\n    y_values = [y for _, y in points]\n    return len(set(x_values)) == 2 and len(set(y_values)) == 2\n\ndef g():\n    return [(1, 1), (1, 4), (4, 1), (4, 4)]\n\nassert f(g())\n",
        "idx_generation": 99,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least twice and the number 0 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, found_zero):\n        if i == rows - 1 and j == cols - 1 and found_one >= 2:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            found_zero += 1\n            if found_zero > 2:\n                return False\n        if nums[i][j] == 1:\n            found_one += 1\n        return helper(i+1, j, found_one, found_zero) or helper(i, j+1, found_one, found_zero)\n\n    return helper(0, 0, 0, 0)\n\ndef g(nums=[[1, 0, 0], [1, 1, 0], [0, 1, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 293,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 2 at least twice and the number 1 at least once.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_two, found_one):\n        if i == rows - 1 and j == cols - 1 and found_two >= 2 and found_one >= 1:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one += 1\n        if nums[i][j] == 2:\n            found_two += 1\n        return helper(i+1, j, found_two, found_one) or helper(i, j+1, found_two, found_one)\n\n    return helper(0, 0, 0, 0)\n\ndef g(nums=[[2, 0, 0], [1, 2, 0], [0, 1, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 379,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Check if it is possible to obtain the target sum by adding a subset of the given numbers.\"\"\"\n    n = len(numbers)\n    for i in range(1 << n):\n        subset_sum = sum(numbers[j] for j in range(n) if (i & (1 << j)) != 0)\n        if subset_sum == target:\n            return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 348,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom typing import List\n\ndef f(grid: List[List[int]], k=3) -> bool:\n    \"\"\"Check if there exists a subgrid of size k x k in the grid where the product of its elements is divisible by k.\"\"\"\n    for i in range(len(grid) - k + 1):\n        for j in range(len(grid[0]) - k + 1):\n            subgrid = [row[j:j+k] for row in grid[i:i+k]]\n            if math.prod([val for subrow in subgrid for val in subrow]) % k == 0:\n                return True\n    return False\n\ndef g(k=3):\n    return [[1, 2, 3, 4, 5],\n            [6, 7, 8, 9, 10],\n            [11, 12, 13, 14, 15],\n            [16, 17, 18, 19, 20],\n            [21, 22, 23, 24, 25]]\n\nassert f(g())\n",
        "idx_generation": 425,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]], target=100) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down, right, or diagonally down-right in the grid. The path must contain numbers whose sum is equal to the target value.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, current_sum):\n        if i == rows - 1 and j == cols - 1 and current_sum == target:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        current_sum += nums[i][j]\n        return helper(i+1, j, current_sum) or helper(i, j+1, current_sum) or helper(i+1, j+1, current_sum)\n\n    return helper(0, 0, 0)\n\ndef g(nums=[[10, 20, 30], [40, 50, 60], [70, 80, 90]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 495,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, edges=[[3, 5], [2, 1], [4, 5], [3, 6], [6, 7], [5, 3], [4, 3], [6, 2], [5, 2], [7, 0], [3, 4], [0, 5], [0, 0], [1, 0], [0, 2], [3, 1]]) -> bool:\n    \"\"\"Determine if a node with a given number 'n' exists in the graph.\"\"\"\n    return any(n in edge for edge in edges)\n\ndef g(edges=[[3, 5], [2, 1], [4, 5], [3, 6], [6, 7], [5, 3], [4, 3], [6, 2], [5, 2], [7, 0], [3, 4], [0, 5], [0, 0], [1, 0], [0, 2], [3, 1]]):\n    n = max((max(edge) for edge in edges))\n    return n\nassert f(g())\n",
        "idx_generation": 252,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if there exists a path in the matrix that sums up to the target value\"\"\"\n    m, n = len(matrix), len(matrix[0])\n\n    def dfs(i, j, curr_sum):\n        if i < 0 or i >= m or j < 0 or j >= n:\n            return False\n        if curr_sum + matrix[i][j] == target:\n            return True\n        return dfs(i + 1, j, curr_sum + matrix[i][j]) or dfs(i, j + 1, curr_sum + matrix[i][j])\n\n    return dfs(0, 0, 0)\n\ndef g(target=20):\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 141,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(tri: List[int], edges=[[4, 4], [5, 5], [3, 5], [3, 1], [0, 1], [4, 0], [3, 2], [5, 3], [1, 3], [2, 5], [2, 0]]) -> bool:\n    \"\"\"Find any triangle in the given directed graph, but this time the edges are reversed.\"\"\"\n    (a, b, c) = tri\n    return [b, a] in edges and [c, b] in edges and ([a, c] in edges) and (a != b != c != a)\n\ndef g(edges=[[4, 4], [5, 5], [3, 5], [3, 1], [0, 1], [4, 0], [3, 2], [5, 3], [1, 3], [2, 5], [2, 0]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for (i, j) in edges:\n        if j != i:\n            outs[j].add(i)\n            ins[i].add(j)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g())\n",
        "idx_generation": 179,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers. You can only move down, right, or diagonally down-right in the grid. The path must contain the number 3 at least once and the sum of all numbers along the path must be divisible by 3.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_three, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_three and path_sum % 3 == 0:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 3:\n            found_three = True\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_three, path_sum) or helper(i, j+1, found_three, path_sum) or helper(i+1, j+1, found_three, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 3]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 430,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n=5) -> bool:\n    \"\"\"Find a list arr containing exactly n distinct values\"\"\"\n    return len(set(arr)) == n\ndef g(n=5):\n    return list(range(n))\nassert f(g())\n",
        "idx_generation": 9,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=3, s=15) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=3, s=15):\n    x = [s - n + 1, 1, 1]\n    return x\nassert f(g())\n",
        "idx_generation": 51,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(rectangle: Tuple[int, int], area=20, perimeter=18) -> bool:\n    \"\"\"Check if the given rectangle has the specified area and perimeter\"\"\"\n    length, width = rectangle\n    return (length * width == area) and (2 * (length + width) == perimeter)\ndef g(area=20, perimeter=18):\n    for length in range(1, area + 1):\n        if area % length == 0:\n            width = area // length\n            if 2 * (length + width) == perimeter:\n                return (length, width)\nassert f(g())\n",
        "idx_generation": 361,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g(nums=[1, 2, 3, 2, 1]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 487,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if it is possible to obtain the target value by rearranging the numbers\n    and performing multiplication and division operations.\n    Each number in the list can be used only once.\"\"\"\n    def helper(numbers, target):\n        if len(numbers) == 0:\n            return target == 0\n        for i, num in enumerate(numbers):\n            remaining = numbers[:i] + numbers[i+1:]\n            if target % num == 0 and helper(remaining, target // num):\n                return True\n            if helper(remaining, target * num):\n                return True\n        return False\n\n    return helper(numbers, target)\n\ndef g(numbers=[2, 3, 5, 10]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 391,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=100) -> bool:\n    \"\"\"Check if a number is divisible by the sum of its digits\"\"\"\n    return n % sum(int(digit) for digit in str(n)) == 0\ndef g(m=100):\n    return m * 123\nassert f(g())\n",
        "idx_generation": 78,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the remainder when divided by target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=12):\n    return [2, 3, 5, 7, 9]\n\nassert f(g())\n",
        "idx_generation": 315,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers\n    while only moving down or right in the grid. The path must contain the number 1 at least once and the sum of all \n    numbers in the path must be greater than or equal to 10.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    def helper(i, j, found_one, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and path_sum >= 10:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if matrix[i][j] == 1:\n            found_one = True\n        path_sum += matrix[i][j]\n\n        return helper(i+1, j, found_one, path_sum) or helper(i, j+1, found_one, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 377,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers. You can only move down or right in the grid. The path must contain the number 1 at least once and the sum of all numbers along the path must be even.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def is_sum_even(n):\n        return n % 2 == 0\n\n    def helper(i, j, found_one, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and is_sum_even(path_sum):\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_one, path_sum) or helper(i, j+1, found_one, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[2, 1, 1], [3, 2, 1], [1, 3, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 459,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 9 at least once and the number 6 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_nine, found_six):\n        if i == rows - 1 and j == cols - 1 and found_nine >= 1:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 6:\n            found_six += 1\n            if found_six > 2:\n                return False\n        if nums[i][j] == 9:\n            found_nine += 1\n        return helper(i+1, j, found_nine, found_six) or helper(i, j+1, found_nine, found_six)\n\n    return helper(0, 0, 0, 0)\n\ndef g(nums=[[9, 0, 0], [6, 9, 0], [0, 6, 9]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 453,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix\"\"\"\n    n = len(matrix)\n\n    for i in range(n):\n        for j in range(i, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    \n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 325,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 33,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=15):\n    return [1, 3, 5, 7, 9]\n\nassert f(g())\n",
        "idx_generation": 206,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the sum of all even numbers in the path must be greater than or equal to the sum of all odd numbers in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, even_sum, odd_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and even_sum >= odd_sum:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if nums[i][j] % 2 == 0:\n            even_sum += nums[i][j]\n        else:\n            odd_sum += nums[i][j]\n        return helper(i+1, j, found_one, even_sum, odd_sum) or helper(i, j+1, found_one, even_sum, odd_sum)\n\n    return helper(0, 0, False, 0, 0)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 392,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], target_length=5) -> bool:\n    \"\"\"Check if there is a name in the list that has length equal to target_length.\"\"\"\n    for name in names:\n        if len(name) == target_length:\n            return True\n    return False\n\ndef g(target_length=5):\n    names = [\"John\", \"Mary\", \"Alex\", \"Emma\", \"Ethan\"]\n    return names\n\nassert f(g())\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=15) -> bool:\n    \"\"\"Find two numbers in the given list whose sum is equal to the target.\"\"\"\n    return any(arr[i] + arr[j] == target for i in range(len(arr)) for j in range(i + 1, len(arr)))\ndef g(target=15):\n    return [5, 10]\nassert f(g())\n",
        "idx_generation": 11,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the list that multiply to the target value\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] * li[j] == target:\n                return True\n    return False\ndef g(target=100):\n    return [target//2, 2]\nassert f(g())\n",
        "idx_generation": 33,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[3, 6, 9, 12, 15], upper_bound=1000) -> bool:\n    \"\"\"Check if n is divisible by all numbers in the list and is less than or equal to the upper_bound\"\"\"\n    return all((n % i == 0 for i in lst)) and 0 < n <= upper_bound\ndef g(lst=[3, 6, 9, 12, 15], upper_bound=1000):\n    ans = 1\n    for i in lst:\n        (m, n) = (min(i, ans), max(i, ans))\n        while m > 0:\n            (m, n) = (n % m, m)\n        ans *= i // n\n    return ans\nassert f(g())\n",
        "idx_generation": 184,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with all elements being perfect squares.\"\"\"\n    for i in range(len(arr)):\n        subarray_product = 1\n        for j in range(i, len(arr)):\n            subarray_product *= arr[j]\n            if math.isqrt(subarray_product) ** 2 == subarray_product:\n                return True\n    return False\n\ndef g():\n    return [2, 4, 9, 16, 5]\n\nassert f(g())\n",
        "idx_generation": 382,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=5) -> bool:\n    \"\"\"Check if the given number is a power of m.\"\"\"\n    return n % m == 0 and m != 0\n\ndef g(m=5):\n    return pow(m, 3)\n\nassert f(g())\n",
        "idx_generation": 92,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], a=-70138, s=4868, e=498910) -> bool:\n    \"\"\"Create a list that is a subrange of an arithmetic sequence.\"\"\"\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])\ndef g(a=-70138, s=4868, e=498910):\n    return list(range(a, e + 1, s))\nassert f(g())\n",
        "idx_generation": 277,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the sum of all even numbers in the path must be greater than the sum of all odd numbers in the path.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    def helper(i, j, found_one, even_sum, odd_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and even_sum > odd_sum:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if matrix[i][j] == 0:\n            return False\n        if matrix[i][j] == 1:\n            found_one = True\n        if matrix[i][j] % 2 == 0:\n            even_sum += matrix[i][j]\n        else:\n            odd_sum += matrix[i][j]\n        return helper(i+1, j, found_one, even_sum, odd_sum) or helper(i, j+1, found_one, even_sum, odd_sum)\n\n    return helper(0, 0, False, 0, 0)\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 1]]):\n    return matrix\n\nassert f(g())\n\n",
        "idx_generation": 336,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=4) -> bool:\n    \"\"\"Check if a matrix is a magic square of size n x n\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all((row_sum == col_sum == diagonal_sum1 == diagonal_sum2) for row_sum, col_sum in zip(row_sums, col_sums))\ndef g(n=4):\n    return [[16, 3, 2, 13], [5, 10, 11, 8], [9, 6, 7, 12], [4, 15, 14, 1]]\nassert f(g())\n",
        "idx_generation": 372,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the sum of all positive numbers in the path must be greater than or equal to the sum of all negative numbers in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, positive_sum, negative_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and positive_sum >= negative_sum:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if nums[i][j] > 0:\n            positive_sum += nums[i][j]\n        else:\n            negative_sum += nums[i][j]\n        return helper(i+1, j, found_one, positive_sum, negative_sum) or helper(i, j+1, found_one, positive_sum, negative_sum)\n\n    return helper(0, 0, False, 0, 0)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, -8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 466,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=5, s=25) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=5, s=25):\n    x = [s - n + 1, 1, 1, 1, 1]\n    return x\nassert f(g())\n",
        "idx_generation": 40,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(x: List[int], target=50) -> bool:\n    \"\"\"Find a subsequence of numbers in the list x that sum up to the target\"\"\"\n    n = len(x)\n    dp = [False]*(target+1)\n    dp[0] = True\n    for i in range(1, n+1):\n        for j in range(target, x[i-1]-1, -1):\n            if dp[j] or (j-x[i-1] >= 0 and dp[j-x[i-1]]):\n                dp[j] = True\n    return dp[target]\ndef g(target=50):\n    return [10, 20, 30, 40, 50]\nassert f(g())\n",
        "idx_generation": 7,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=8, n=8) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=8, n=8):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 109,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least three times and the number 0 exactly once.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, found_zero):\n        if i == rows - 1 and j == cols - 1 and found_one >= 3:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            found_zero += 1\n            if found_zero > 1:\n                return False\n        if nums[i][j] == 1:\n            found_one += 1\n        return helper(i+1, j, found_one, found_zero) or helper(i, j+1, found_one, found_zero)\n\n    return helper(0, 0, 0, 0)\n\ndef g(nums=[[1, 0, 0], [1, 1, 0], [0, 1, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 293,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 2 exactly once and the number 1 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_two, found_one):\n        if i == rows - 1 and j == cols - 1 and found_two:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one += 1\n            if found_one > 2:\n                return False\n        if nums[i][j] == 2:\n            found_two = True\n        return helper(i+1, j, found_two, found_one) or helper(i, j+1, found_two, found_one)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[2, 0, 0], [1, 2, 0], [0, 1, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 386,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Check if it is possible to obtain the target sum by subtracting a subset of the given numbers from the target.\"\"\"\n    n = len(numbers)\n    for i in range(1 << n):\n        subset_sum = target\n        for j in range(n):\n            if (i & (1 << j)) != 0:\n                subset_sum -= numbers[j]\n        if subset_sum == 0:\n            return True\n    return False\n\ndef g(target=0):\n    return [10, 8, 6, 4, 2]\n\nassert f(g())\n\n",
        "idx_generation": 349,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 2 at least once and every number in the path must be a prime number.\n    \"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_two):\n        if i == rows - 1 and j == cols - 1 and found_two:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 2:\n            found_two = True\n        if not is_prime(nums[i][j]):\n            return False\n        return helper(i+1, j, found_two) or helper(i, j+1, found_two)\n\n    return helper(0, 0, False)\n\ndef g(nums=[[2, 0, 0], [3, 5, 0], [0, 7, 2]]):\n    return nums\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nassert f(g())\n",
        "idx_generation": 433,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[str], target='python', count=3) -> bool:\n    \"\"\"Find a list with a certain number of target strings\"\"\"\n    return li.count(target) == count and len(li) >= count\ndef g(target='python', count=3):\n    return [target] * count\nassert f(g())\n",
        "idx_generation": 7,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == 8\n\ndef g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == 8:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 264,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down or right in the grid.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j):\n        if i == rows - 1 and j == cols - 1:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        return helper(i+1, j) or helper(i, j+1)\n\n    return helper(0, 0)\n\ndef g(nums=[[1, 0, 0], [1, 1, 0], [0, 1, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 170,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down or right in the grid.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j):\n        if i == rows - 1 and j == cols - 1:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        return helper(i+1, j) or helper(i, j+1)\n\n    return helper(0, 0)\n\ndef g(nums=[[1, 0, 0], [1, 1, 0], [0, 1, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 246,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 3 at least once and the number 1 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_three, found_one):\n        if i == rows - 1 and j == cols - 1 and found_three:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one += 1\n            if found_one > 2:\n                return False\n        if nums[i][j] == 3:\n            found_three = True\n        return helper(i+1, j, found_three, found_one) or helper(i, j+1, found_three, found_one)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[3, 0, 0], [1, 3, 0], [0, 1, 3]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 444,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 5, 8, 11, 14, 17, 20, 23, 26, 29], target_sum=87) -> bool:\n    \"\"\"Find if there exists a combination of numbers from the list that adds up to the target sum\"\"\"\n    def subset_sum(nums, n, target_sum):\n        if target_sum == 0:\n            return True\n        if n == 0 and target_sum != 0:\n            return False\n        if nums[n-1] > target_sum:\n            return subset_sum(nums, n-1, target_sum)\n        return subset_sum(nums, n-1, target_sum) or subset_sum(nums, n-1, target_sum-nums[n-1])\n    return subset_sum(nums, len(nums), target_sum)\ndef g(nums=[2, 5, 8, 11, 14, 17, 20, 23, 26, 29], target_sum=87):\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums)))\nassert f(g())\n",
        "idx_generation": 19,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=4, c=6) -> bool:\n    \"\"\"Find n such that n - a == b * (the sum of the first c integers)\"\"\"\n    return n - a == sum([b * i for i in range(c)])\ndef g(a=3, b=4, c=6):\n    return a + sum([b * i for i in range(c)])\nassert f(g())\n",
        "idx_generation": 78,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/2.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 1/2) ** 2 <= year_len\ndef g(year_len=365):\n    n = 1\n    distinct_prob = 1.0\n    best = (1/2, 1)\n    while distinct_prob > 1/2:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(1/2 - distinct_prob), n))\n    return best[1]\nassert f(g())\n",
        "idx_generation": 374,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=10) -> bool:\n    \"\"\"Check if the sum of two numbers is equal to a given number\"\"\"\n    return n + a == b\ndef g(a=3, b=10):\n    return b - a\nassert f(g())\n",
        "idx_generation": 9,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the product of the numbers at the given indices is greater than 100\"\"\"\n    product = 1\n    for i in x:\n        product *= nums[i]\n    return product > 100\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return [i for i,v in enumerate(nums) if v % 2 == 1]\n\nassert f(g())\n",
        "idx_generation": 97,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\n\ndef g(nums=[-5, -10, -15, -20, -25, -30, -35, -40, -45]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 334,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 2 at least twice and the number 1 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_two, found_one):\n        if i == rows - 1 and j == cols - 1 and found_two >= 2:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one += 1\n            if found_one > 2:\n                return False\n        if nums[i][j] == 2:\n            found_two += 1\n        return helper(i+1, j, found_two, found_one) or helper(i, j+1, found_two, found_one)\n\n    return helper(0, 0, 0, 0)\n\ndef g(nums=[[2, 0, 0], [1, 2, 0], [0, 1, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 379,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers. You can only move down or right in the grid. The path must contain the number 2 at least once and the sum of all numbers along the path must be an even number.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def is_even(n):\n        return n % 2 == 0\n\n    def helper(i, j, found_two, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_two and is_even(path_sum):\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            found_two = True\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_two, path_sum) or helper(i, j+1, found_two, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[2, 1, 1], [3, 2, 1], [1, 3, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 454,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the sum of all positive numbers in the path must be greater than or equal to the sum of all negative numbers in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, pos_sum, neg_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and pos_sum >= neg_sum:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if nums[i][j] > 0:\n            pos_sum += nums[i][j]\n        else:\n            neg_sum += nums[i][j]\n        return helper(i+1, j, found_one, pos_sum, neg_sum) or helper(i, j+1, found_one, pos_sum, neg_sum)\n\n    return helper(0, 0, False, 0, 0)\n\ndef g(nums=[[1, 0, 0], [2, -4, 0], [0, 8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 353,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Find three numbers in the given list whose sum is equal to the target.\"\"\"\n    return any(arr[i] + arr[j] + arr[k] == target for i in range(len(arr)) for j in range(i + 1, len(arr)) for k in range(j + 1, len(arr)))\ndef g(target=20):\n    return [5, 10, 5]\nassert f(g())\n",
        "idx_generation": 50,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100, count=5) -> bool:\n    \"\"\"Find a list of count numbers that sum up to target_sum\"\"\"\n    return sum(nums) == target_sum and len(nums) == count\n\ndef g(target_sum=100, count=5):\n    return [target_sum // count] * count\n\nassert f(g())\n",
        "idx_generation": 2,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers. You can only move down or right in the grid. The path must contain the number 2 at least once and the product of all numbers along the path must be a multiple of 4.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def is_multiple_of_four(n):\n        return n % 4 == 0\n\n    def helper(i, j, found_two, path_product):\n        if i == rows - 1 and j == cols - 1 and found_two and is_multiple_of_four(path_product):\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            found_two = True\n        path_product *= nums[i][j]\n        return helper(i+1, j, found_two, path_product) or helper(i, j+1, found_two, path_product)\n\n    return helper(0, 0, False, 1)\n\ndef g(nums=[[2, 1, 1], [3, 2, 1], [1, 3, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 475,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target_count=2) -> bool:\n    \"\"\"Check if the count of a given number in the list is equal to the target_count\"\"\"\n    return lst.count(5) == target_count\n\ndef g(target_count=2):\n    return [1, 2, 3, 4, 5, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 249,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False\ndef g(target=100):\n    return [1, target-1]\nassert f(g())\n",
        "idx_generation": 17,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the given matrix is an n x n identity matrix.\"\"\"\n    return all((matrix[i][j] == 1 if i == j else matrix[i][j] == 0) for i in range(n) for j in range(n))\ndef g(n=3):\n    matrix = [[1 if i == j else 0 for j in range(n)] for i in range(n)]\n    return matrix\nassert f(g())\n",
        "idx_generation": 35,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a difference greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if abs(nums[i] - nums[j]) > target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g(), target=2)\n",
        "idx_generation": 212,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with all elements being prime numbers.\"\"\"\n    primes = set([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\n    \n    for i in range(len(arr)):\n        subarray_product = 1\n        for j in range(i, len(arr)):\n            subarray_product *= arr[j]\n            if subarray_product in primes:\n                return True\n    return False\n\ndef g():\n    return [2, 3, 4, 5, 6, 7]\n\nassert f(g())\n",
        "idx_generation": 449,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=12, b=8, c=15) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c even integers)\"\"\"\n    return n + a == sum([b * (2*i) for i in range(c)])\ndef g(a=12, b=8, c=15):\n    return -a + sum([b * (2*i) for i in range(c)])\nassert f(g())\n",
        "idx_generation": 99,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sum up to the target.\"\"\"\n    seen = set()\n    for num in numbers:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g(), target=12)\n",
        "idx_generation": 394,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least twice and the number 0 exactly once.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    def helper(i, j, found_one, found_zero):\n        if i == rows - 1 and j == cols - 1 and found_one >= 2:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if matrix[i][j] == 0:\n            found_zero += 1\n            if found_zero > 1:\n                return False\n        if matrix[i][j] == 1:\n            found_one += 1\n        return helper(i+1, j, found_one, found_zero) or helper(i, j+1, found_one, found_zero)\n\n    return helper(0, 0, 0, 0)\n\ndef g(target=10):\n    return [[1, 0, 0], [1, 1, 0], [0, 1, 1]]\n\nassert f(g())\n",
        "idx_generation": 339,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down, right, or diagonally (down-right) in the grid. The path must contain the number 1 at least once and the product of all the numbers in the path must be a perfect square.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def is_perfect_square(n):\n        return int(n**0.5)**2 == n\n\n    def helper(i, j, found_one, path_product):\n        if i == rows - 1 and j == cols - 1 and found_one and is_perfect_square(path_product):\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        path_product *= nums[i][j]\n        return helper(i+1, j, found_one, path_product) or helper(i, j+1, found_one, path_product) or helper(i+1, j+1, found_one, path_product)\n\n    return helper(0, 0, False, 1)\n\ndef g(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 411,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the sum of the numbers in the path must be even.\n    Additionally, the path must visit at least one cell in the top row.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, path_sum, visited_top_row):\n        if i == rows - 1 and j == cols - 1 and found_one and path_sum % 2 == 0 and visited_top_row:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        return helper(i+1, j, found_one or nums[i][j] == 1, path_sum + nums[i][j], visited_top_row or i == 0) or helper(i, j+1, found_one or nums[i][j] == 1, path_sum + nums[i][j], visited_top_row or i == 0)\n\n    return helper(0, 0, False, 0, False)\n\ndef g(nums=[[1, 0, 0], [1, 1, 0], [0, 1, 1]]):\n    return nums\n\nassert f(g())",
        "idx_generation": 491,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given number is present in the list of numbers\"\"\"\n    return n in numbers\ndef g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return 5\nassert f(g())\n",
        "idx_generation": 62,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose sum is equal to the target.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    return dp[n][target]\ndef g(target=5):\n    return [i for i in range(1, target + 1)]\nassert f(g())\n",
        "idx_generation": 10,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: Tuple[float, float], a=0, b=0, c=1, d=1) -> bool:\n    \"\"\"Check if a point lies inside a circle.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fifth decimal digit is required.\"\"\"\n    x, y = e\n    return (x - a) ** 2 + (y - b) ** 2 < c ** 2\ndef g(a=0, b=0, c=1, d=1):\n    return (a, b)\nassert f(g())\n",
        "idx_generation": 110,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the sum of all positive numbers in the path must be greater than or equal to the sum of all negative numbers in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, positive_sum, negative_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and positive_sum >= negative_sum:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if nums[i][j] > 0:\n            positive_sum += nums[i][j]\n        else:\n            negative_sum += nums[i][j]\n        return helper(i+1, j, found_one, positive_sum, negative_sum) or helper(i, j+1, found_one, positive_sum, negative_sum)\n\n    return helper(0, 0, False, 0, 0)\n\ndef g(nums=[[1, 0, 0], [-2, 4, 0], [0, -8, 1]]):\n    return [[1 if num == 0 else num for num in row] for row in nums]\n\nassert f(g())\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers. You can only move down or right in the grid. The path must contain the number 2 at least once, and the sum of all numbers along the path must be odd.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_two, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_two and path_sum % 2 != 0:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            found_two = True\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_two, path_sum) or helper(i, j+1, found_two, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[2, 1, 1], [3, 2, 1], [1, 3, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 387,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_word='python') -> bool:\n    \"\"\"Check if it is possible to form the target_word using the given list of words.\n    A word can be formed by concatenating multiple words from the given list.\n    - words: list of words\n    - target_word: word to be formed\"\"\"\n    def is_word_formed(word):\n        if word == '':\n            return True\n        for i in range(1, len(word) + 1):\n            if word[:i] in words and is_word_formed(word[i:]):\n                return True\n        return False\n    return is_word_formed(target_word)\ndef g(words=['py', 'th', 'on']):\n    return words\nassert f(g())\n",
        "idx_generation": 9,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=25) -> bool:\n    \"\"\"Check if the XOR of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] ^ nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_sum=25):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n",
        "idx_generation": 366,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, k=3) -> bool:\n    \"\"\"Check if a string contains exactly k occurrences of a specific character.\"\"\"\n    return string.count('a') == k\ndef g(k=3):\n    return 'a' * k\nassert f(g())\n",
        "idx_generation": 10,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(path: List[int], edges=[[3, 5], [2, 1], [4, 5], [3, 6], [6, 7], [5, 3], [4, 3], [6, 2], [5, 2], [7, 0], [3, 4], [0, 5], [0, 0], [1, 0], [0, 2], [3, 1]]) -> bool:\n    \"\"\"Check if the given path is a Hamiltonian path in the graph\"\"\"\n    visited = []\n    for i in range(len(path)):\n        if path[i] in visited:\n            return False\n        visited.append(path[i])\n        if i < len(path) - 1 and [path[i], path[i+1]] not in edges:\n            return False\n    return len(visited) == len(set(visited)) and visited[0] == 0 and visited[-1] == max(max(edge) for edge in edges)\n\ndef g(edges=[[3, 5], [2, 1], [4, 5], [3, 6], [6, 7], [5, 3], [4, 3], [6, 2], [5, 2], [7, 0], [3, 4], [0, 5], [0, 0], [1, 0], [0, 2], [3, 1]]):\n    n = max((max(edge) for edge in edges))\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for (i, j) in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n, [])\n\nassert f(g())\n",
        "idx_generation": 341,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down, right, or diagonally down-right or diagonally up-right in the grid.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j):\n        if i == rows - 1 and j == cols - 1:\n            return True\n        if i < 0 or j < 0 or i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        return helper(i+1, j) or helper(i, j+1) or helper(i-1, j+1)\n\n    return helper(0, 0)\n\ndef g(nums=[[1, 0, 0], [1, 1, 0], [0, 1, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 270,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the sum of the numbers in the path must be even.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and path_sum % 2 == 0:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        return helper(i+1, j, found_one or nums[i][j] == 1, path_sum + nums[i][j]) or helper(i, j+1, found_one or nums[i][j] == 1, path_sum + nums[i][j])\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[1, 0, 0], [1, 1, 0], [0, 1, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 246,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 2 at least once and the number 4 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_two, found_four):\n        if i == rows - 1 and j == cols - 1 and found_two >= 1:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 4:\n            found_four += 1\n            if found_four > 2:\n                return False\n        if nums[i][j] == 2:\n            found_two += 1\n        return helper(i+1, j, found_two, found_four) or helper(i, j+1, found_two, found_four)\n\n    return helper(0, 0, 0, 0)\n\ndef g(nums=[[2, 0, 0], [4, 2, 0], [0, 4, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 453,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], target_sum=40) -> bool:\n    \"\"\"Find if there exists a combination of numbers from the list that adds up to the target sum\"\"\"\n    def subset_sum(nums, n, target_sum):\n        if target_sum == 0:\n            return True\n        if n == 0 and target_sum != 0:\n            return False\n        if nums[n-1] > target_sum:\n            return subset_sum(nums, n-1, target_sum)\n        return subset_sum(nums, n-1, target_sum) or subset_sum(nums, n-1, target_sum-nums[n-1])\n    return subset_sum(nums, len(nums), target_sum)\ndef g(nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], target_sum=40):\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums)))\nassert f(g())\n",
        "idx_generation": 28,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=5, c=8) -> bool:\n    \"\"\"Find n such that n - a == b * (the sum of the first c integers)\"\"\"\n    return n - a == sum([b * i for i in range(1, c+1)])\ndef g(a=2, b=5, c=8):\n    return a + sum([b * i for i in range(1, c+1)])\nassert f(g())\n",
        "idx_generation": 95,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) and subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\n\ndef g(nums=[-5, -10, -15, -20, -25, -30, -35, -40, -45]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 441,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array whose sum is greater than the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] > target:\n                return True\n    return False\ndef g(arr=[5, 10, 15, 20, 25, 30, 35, 40, 45, 50], target=20):\n    return arr\nassert f(g())\n",
        "idx_generation": 37,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_product=24) -> bool:\n    \"\"\"Find three numbers in the list that multiply to give the target product\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] * nums[j] * nums[k] == target_product:\n                    return True\n    return False\n\ndef g(target_product=24):\n    return [1, 2, 3, 4, 5, 6, 7, 8]\n\nassert f(g())\n",
        "idx_generation": 98,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray in the given list that sums up to k.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            if sum(arr[i:j]) == k:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 451,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the number 3 exactly once.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, found_three):\n        if i == rows - 1 and j == cols - 1 and found_three:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 3:\n            found_three = True\n        if nums[i][j] == 1:\n            found_one += 1\n        return helper(i+1, j, found_one, found_three) or helper(i, j+1, found_one, found_three)\n\n    return helper(0, 0, 0, False)\n\ndef g(nums=[[1, 0, 0], [3, 1, 0], [0, 3, 0]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 415,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the maximum number in the path must be greater than or equal to the sum of all other numbers in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, max_num, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and max_num >= path_sum - max_num:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        max_num = max(max_num, nums[i][j])\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_one, max_num, path_sum) or helper(i, j+1, found_one, max_num, path_sum)\n\n    return helper(0, 0, False, float('-inf'), 0)\n\ndef g(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 455,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int = 20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target: int = 20):\n    return [10, 5, 8, 12, 3]\n\nassert f(g())\n\n",
        "idx_generation": 364,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=25) -> bool:\n    \"\"\"Check if there exist two numbers in the matrix whose product is equal to the target value.\"\"\"\n    return any(x * y == target for x in [num for row in matrix for num in row] for y in [num for row in matrix for num in row])\n\ndef g(target=25):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 55,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a given number is a prime number.\"\"\"\n\n    if n < 2:\n        return False\n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n\n    return True\n\ndef g():\n    \"\"\"\n    Generate a random prime number.\n    \"\"\"\n    import random\n    while True:\n        num = random.randint(2, 100)\n        if f(num):\n            return num\n\nassert f(g())\n",
        "idx_generation": 14,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers. You can only move down or right in the grid. The path must contain the number 2 at least once and the sum of all numbers along the path must be a prime number. Additionally, the path must not contain any negative numbers.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def helper(i, j, found_two, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_two and is_prime(path_sum):\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            found_two = True\n        if nums[i][j] < 0:\n            return False\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_two, path_sum) or helper(i, j+1, found_two, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[2, 1, 1], [3, 2, 1], [1, 3, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 478,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_count=3) -> bool:\n    \"\"\"Check if there are at least target_count number of even numbers in the list.\n    - numbers: list of numbers\n    - target_count: the desired count of even numbers\"\"\"\n    return sum(1 for num in numbers if num % 2 == 0) >= target_count\n\ndef g(numbers: List[int], target_count=3):\n    return numbers\n\nassert f(g([1, 2, 3, 4, 5, 6, 7, 8]))\n",
        "idx_generation": 280,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sum up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n",
        "idx_generation": 37,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=7) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list whose quotient is equal to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        if num == 0:\n            continue\n        complement = target / num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 42,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n",
        "idx_generation": 255,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_divisor=5) -> bool:\n    \"\"\"Check if there exists a number in the list that is divisible by the target_divisor.\"\"\"\n    return any((num % target_divisor == 0) for num in numbers)\ndef g(target_divisor=5):\n    numbers = [10, 15, 20, 25, 30, 35, 40]\n    return numbers\nassert f(g())\n",
        "idx_generation": 100,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"Given a list of integers and a target number n, determine if there exists a pair of numbers in the list whose sum is equal to n.\n    Return True if such a pair exists, otherwise return False.\"\"\"\n    num_set = set()\n    for num in nums:\n        if n - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums=[2, 4, 6, 8, 10], n=12):\n    return n, nums\n\nassert f(*g())\n",
        "idx_generation": 464,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the number 0 exactly once.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    def helper(i, j, found_one, found_zero):\n        if i == rows - 1 and j == cols - 1 and found_one >= 1:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if matrix[i][j] == 0:\n            found_zero += 1\n            if found_zero > 1:\n                return False\n        if matrix[i][j] == 1:\n            found_one += 1\n        return helper(i+1, j, found_one, found_zero) or helper(i, j+1, found_one, found_zero)\n\n    return helper(0, 0, 0, 0)\n\ndef g(target=10):\n    return [[1, 0, 0], [1, 1, 0], [0, 1, 1]]\n\nassert f(g())\n",
        "idx_generation": 364,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the sum of all numbers in the list is divisible by n\"\"\"\n    return sum(nums) % n == 0\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return sum(nums)\nassert f(g())\n",
        "idx_generation": 440,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down or right in the matrix. The path must contain the number 1 at least once and the sum of the numbers in the path must be even.\n    Additionally, the path must visit at least one cell in the top row.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    def helper(i, j, found_one, path_sum, visited_top_row):\n        if i == rows - 1 and j == cols - 1 and found_one and path_sum % 2 == 0 and visited_top_row:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if matrix[i][j] == 0:\n            return False\n        return helper(i+1, j, found_one or matrix[i][j] == 1, path_sum + matrix[i][j], visited_top_row or i == 0) or helper(i, j+1, found_one or matrix[i][j] == 1, path_sum + matrix[i][j], visited_top_row or i == 0)\n\n    return helper(0, 0, False, 0, False)\n\ndef g(matrix=[[1, 0, 0], [1, 1, 0], [1, 1, 1]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 494,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, a=10, b=3) -> bool:\n    \"\"\"Check if n is a perfect square and if its square root, when divided by b, is equal to a\"\"\"\n    return math.isqrt(n)**2 == n and math.isqrt(n) / b == a\ndef g(a=10, b=3):\n    return (a * b)**2\nassert f(g())\n",
        "idx_generation": 65,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a subset of the given list whose elements add up to the target number\"\"\"\n    def subset_sum(nums, target, n):\n        if target == 0:\n            return True\n        if n == 0:\n            return False\n        if nums[n-1] > target:\n            return subset_sum(nums, target, n-1)\n        return subset_sum(nums, target, n-1) or subset_sum(nums, target-nums[n-1], n-1)\n    return subset_sum(nums, target, len(nums))\n\ndef g(nums=[10, 5, 15, 20], target=20):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 16,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: List[int], a=3, b=2, c=10, d=100) -> bool:\n    \"\"\"Check if a point lies inside a rectangle.\nSolution should be a tuple of the (x,y) coordinates.\"\"\"\n    x, y = e\n    return (a <= x <= c) and (b <= y <= d)\ndef g(a=3, b=2, c=10, d=100):\n    return [a, b]\nassert f(g())\n",
        "idx_generation": 148,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the sum of all positive numbers in the path must be greater than or equal to the sum of all negative numbers in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, positive_sum, negative_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and positive_sum >= negative_sum:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if nums[i][j] > 0:\n            positive_sum += nums[i][j]\n        else:\n            negative_sum += nums[i][j]\n        return helper(i+1, j, found_one, positive_sum, negative_sum) or helper(i, j+1, found_one, positive_sum, negative_sum)\n\n    return helper(0, 0, False, 0, 0)\n\ndef g(nums=[[1, 0, 0], [-2, 4, 0], [0, -8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 301,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers. You can only move down or right in the grid. The path must contain the number 1 at least once, and the sum of all numbers along the path must be odd.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and path_sum % 2 != 0:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_one, path_sum) or helper(i, j+1, found_one, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[2, 1, 1], [3, 2, 1], [1, 3, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 402,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_word='python') -> bool:\n    \"\"\"Check if it is possible to form the target_word using the given list of words.\n    A word can be formed by concatenating multiple words from the given list.\n    - words: list of words\n    - target_word: word to be formed\"\"\"\n    def is_word_formed(word):\n        if word == '':\n            return True\n        for i in range(1, len(word) + 1):\n            if word[:i] in words and is_word_formed(word[i:]):\n                return True\n        return False\n    return is_word_formed(target_word)\ndef g(words=['py', 'th', 'on']):\n    return words[::-1]\nassert f(g())\n",
        "idx_generation": 13,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if it is possible to obtain the target sum by adding a subset of the given numbers in each column of the matrix.\"\"\"\n    m, n = len(matrix), len(matrix[0])\n    for j in range(n):\n        column = [matrix[i][j] for i in range(m)]\n        for i in range(1 << m):\n            subset_sum = sum(column[k] for k in range(m) if (i & (1 << k)) != 0)\n            if subset_sum == target:\n                break\n        else:\n            return False\n    return True\n\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 407,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=4, b=9) -> bool:\n    \"\"\"Check if the difference between x and the product of a and b is divisible by x\"\"\"\n    return (x - (a * b)) % x == 0\n\ndef g(a=4, b=9):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 115,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 exactly twice and the number 0 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, found_zero):\n        if i == rows - 1 and j == cols - 1 and found_one == 2 and found_zero == 2:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            found_zero += 1\n        if nums[i][j] == 1:\n            found_one += 1\n        return helper(i+1, j, found_one, found_zero) or helper(i, j+1, found_one, found_zero)\n\n    return helper(0, 0, 0, 0)\n\ndef g(nums=[[1, 0, 0], [1, 1, 0], [0, 1, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 288,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(path: List[int], edges=[[3, 5], [2, 1], [4, 5], [3, 6], [6, 7], [5, 3], [4, 3], [6, 2], [5, 2], [7, 0], [3, 4], [0, 5], [0, 0], [1, 0], [0, 2], [3, 1]]) -> bool:\n    \"\"\"Check if the given path is a Hamiltonian path in the graph\"\"\"\n    visited = []\n    for i in range(len(path)):\n        if path[i] in visited:\n            return False\n        visited.append(path[i])\n        if i < len(path) - 1 and [path[i], path[i+1]] not in edges:\n            return False\n    return len(visited) == len(set(visited)) and visited[0] == 0 and visited[-1] == max(max(edge) for edge in edges)\n\ndef g(edges=[[3, 5], [2, 1], [4, 5], [3, 6], [6, 7], [5, 3], [4, 3], [6, 2], [5, 2], [7, 0], [3, 4], [0, 5], [0, 0], [1, 0], [0, 2], [3, 1]]):\n    n = max((max(edge) for edge in edges))\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for (i, j) in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n, [])\n\nassert f(g())\n",
        "idx_generation": 383,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down, right, or diagonally (down-right) in the grid. The path must contain the number 1 at least once and the sum of the numbers in the path must be odd.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and path_sum % 2 != 0:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_one, path_sum) or helper(i, j+1, found_one, path_sum) or helper(i+1, j+1, found_one, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[1, 1, 1], [2, 2, 2], [3, 3, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 453,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(counts: List[int], target_prob=0.75) -> bool:\n    \"\"\"Suppose a list of m 1's and n -1's are permuted at random.\nWhat is the probability that the difference between the number of 1's and -1's is less than or equal to 2?\nThe goal is to find counts = [m, n] that make the probability of the difference condition close to target_prob.\"\"\"\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06\ndef g(target_prob=0.75):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-06:\n            return [m, n]\nassert f(g())\n",
        "idx_generation": 28,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=25, b=30, c=10) -> bool:\n    \"\"\"Find n such that n - a == b * (the sum of the first c integers)\"\"\"\n    return n - a == sum([b * i for i in range(c)])\ndef g(a=25, b=30, c=10):\n    return a + sum([b * i for i in range(c)])\nassert f(g())\n",
        "idx_generation": 99,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list whose difference is equal to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = num - target\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[50, 75, 100, 125, 150, 175, 200]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 42,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], num_rows=4, num_cols=4) -> bool:\n    \"\"\"Check if the given matrix is a magic square\"\"\"\n    row_sum = sum(matrix[0])\n    col_sum = sum(matrix[i][0] for i in range(num_rows))\n    diag_sum1 = sum(matrix[i][i] for i in range(num_rows))\n    diag_sum2 = sum(matrix[i][num_rows-i-1] for i in range(num_rows))\n    return all(sum(matrix[i]) == row_sum for i in range(num_rows)) and \\\n           all(sum(matrix[i][j] for i in range(num_rows)) == col_sum for j in range(num_cols)) and \\\n           diag_sum1 == diag_sum2 == row_sum\ndef g(num_rows=4, num_cols=4):\n    matrix = [[1] * num_cols for _ in range(num_rows)]\n    return matrix\nassert f(g())\n",
        "idx_generation": 101,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down, right, or diagonally (down-right) in the grid. The path must contain the number 3 at least once and the sum of the numbers in the path must be odd.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_three, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_three and path_sum % 2 != 0:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 3:\n            found_three = True\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_three, path_sum) or helper(i, j+1, found_three, path_sum) or helper(i+1, j+1, found_three, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[1, 2, 1], [2, 3, 2], [3, 3, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 490,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down, right, or diagonally (down-right) in the grid. The path must contain the number 2 at least once and the sum of the numbers in the path must be even.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_two, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_two and path_sum % 2 == 0:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            found_two = True\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_two, path_sum) or helper(i, j+1, found_two, path_sum) or helper(i+1, j+1, found_two, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[1, 2, 1], [2, 2, 2], [3, 3, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 455,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix (2D list of integers), determine if it is a symmetric matrix.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 418,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list that add up to the target\"\"\"\n    complements = set()\n    for num in nums:\n        complement = target - num\n        if complement in complements:\n            return True\n        complements.add(num)\n    return False\ndef g(target=10):\n    return [2, 4, 6, 8]\nassert f(g())\n",
        "idx_generation": 68,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19]) -> bool:\n    \"\"\"Check if n is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19]):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return next((n for n in range(max(primes)+1, 10**6) if is_prime(n)))\nassert f(g())\n",
        "idx_generation": 18,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in a list that sum up to the target value.\"\"\"\n    return any((nums[i]+nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target-9]\nassert f(g())\n",
        "idx_generation": 284,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=5) -> bool:\n    \"\"\"Check if all numbers in the list are greater than a given number\"\"\"\n    return all(num > n for num in x)\ndef g(n=5):\n    return [i for i in range(n+1, 2*n+1)]\nassert f(g())\n",
        "idx_generation": 9,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if there exist two numbers in the matrix whose sum is equal to the target value.\"\"\"\n    return any(target - x - y in [num for row in matrix for num in row] for x in [num for row in matrix for num in row] for y in [num for row in matrix for num in row])\n\ndef g(target=20):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 54,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=4) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the list whose sum is divisible by 3.\"\"\"\n    n = len(arr)\n    for i in range(n - k + 1):\n        subarray = arr[i:i+k]\n        if sum(subarray) % 3 == 0:\n            return True\n    return False\n\ndef g(k=4):\n    return [i for i in range(-k, k+1)]\n\nassert f(g())\n",
        "idx_generation": 73,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the sum of all numbers in a list is a multiple of 10\"\"\"\n    return sum(numbers) % 10 == 0\n\ndef g():\n    return [15, 25, 30, 20]\n\nassert f(g())\n",
        "idx_generation": 291,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3) -> bool:\n    \"\"\"Check if n is divisible by a\"\"\"\n    return n % a == 0\ndef g(a=3):\n    return a * 8\nassert f(g())\n",
        "idx_generation": 103,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g() -> Tuple[List[int], int]:\n    return ([1, 2, 3, 4, 5], 9)\n\nassert f(*g())\n",
        "idx_generation": 499,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the number 3 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, found_three):\n        if i == rows - 1 and j == cols - 1 and found_three:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if nums[i][j] == 3:\n            found_three += 1\n            if found_three > 2:\n                return False\n        return helper(i+1, j, found_one, found_three) or helper(i, j+1, found_one, found_three)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[1, 0, 0], [3, 1, 0], [0, 3, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 377,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down or right in the matrix. The path must contain the number 1 at least once and the sum of the numbers in the path must be even.\n    Additionally, the path must visit at least one cell in the top row.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    def helper(i, j, found_one, path_sum, visited_top_row):\n        if i == rows - 1 and j == cols - 1 and found_one and path_sum % 2 == 0 and visited_top_row:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if matrix[i][j] == 0:\n            return False\n        return helper(i+1, j, found_one or matrix[i][j] == 1, path_sum + matrix[i][j], visited_top_row or i == 0) or helper(i, j+1, found_one or matrix[i][j] == 1, path_sum + matrix[i][j], visited_top_row or i == 0)\n\n    return helper(0, 0, False, 0, False)\n\ndef g(matrix=[[1, 1, 0], [0, 1, 0], [1, 1, 1]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 494,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> bool:\n    \"\"\"Check if n exists in the matrix\"\"\"\n    for row in matrix:\n        if n in row:\n            return True\n    return False\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix[0][0]\nassert f(g())\n",
        "idx_generation": 66,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Find a subset of numbers in the list whose sum is equal to the target_sum\"\"\"\n    n = len(arr)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[n][target_sum]\ndef g(target_sum=100):\n    return list(range(1, target_sum+1))\nassert f(g())\n",
        "idx_generation": 20,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: Tuple[int, int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies inside a rectangle.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return (a <= x <= a+c) and (b <= y <= b+c)\ndef g(a=1, b=2, c=10):\n    return (a+c//2, b+c//2)\nassert f(g())\n",
        "idx_generation": 155,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down, right, or diagonally down-right in the grid.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j):\n        if i == rows - 1 and j == cols - 1:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        return helper(i+1, j) or helper(i, j+1) or helper(i+1, j+1)\n\n    return helper(0, 0)\n\ndef g(nums=[[1, 0, 0], [1, 1, 0], [0, 1, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 330,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 2 at least once and the number 1 exactly four times.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_two, found_one):\n        if i == rows - 1 and j == cols - 1 and found_two >= 1:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one += 1\n            if found_one > 4:\n                return False\n        if nums[i][j] == 2:\n            found_two += 1\n        return helper(i+1, j, found_two, found_one) or helper(i, j+1, found_two, found_one)\n\n    return helper(0, 0, 0, 0)\n\ndef g(nums=[[2, 0, 0], [1, 1, 0], [0, 1, 2]]):\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 410,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='pl') -> bool:\n    \"\"\"Check if the word is a prefix of s\"\"\"\n    return s.startswith(word)\ndef g(word='pl'):\n    return word\nassert f(g())\n",
        "idx_generation": 24,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=127) -> bool:\n    \"\"\"Check if the given number is the bitwise AND of x and a\"\"\"\n    return x == x & a\ndef g(a=127):\n    return a\n\nassert f(g())\n",
        "idx_generation": 409,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc', count=3) -> bool:\n    \"\"\"Check if the given string contains 'count' number of occurrences of the substring\"\"\"\n    return s.count(substring) == count\n\ndef g(substring='abc', count=3):\n    return substring * count + 'def' * (count - 1)\n\nassert f(g())\n",
        "idx_generation": 159,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(tour: List[List[int]], m=6, n=6) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == 2*(m+n)\n\ndef g(m=6, n=6):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == 2*(m+n):\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 321,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    \"\"\"Find a path with the maximum number of nodes from nodes 0 to 1 in the given digraph on vertices 0, 1,..., n.\"\"\"\n    return p[0] == 0 and p[-1] == 1 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    from collections import defaultdict\n    graph = defaultdict(list)\n    for (a, b) in edges:\n        graph[a].append(b)\n    max_path = []\n    stack = [(0, [0])]\n    while stack:\n        node, path = stack.pop()\n        if node == 1 and len(path) > len(max_path):\n            max_path = path\n        for neighbor in graph[node]:\n            stack.append((neighbor, path + [neighbor]))\n    return max_path\nassert f(g())\n",
        "idx_generation": 408,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down, right, or diagonally (down-right) in the grid. The path must contain the number 3 at least once and the sum of the numbers in the path must be even.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_three, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_three and path_sum % 2 == 0:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 3:\n            found_three = True\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_three, path_sum) or helper(i, j+1, found_three, path_sum) or helper(i+1, j+1, found_three, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[1, 1, 1], [2, 2, 2], [3, 3, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 453,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=5, s=25) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=5, s=25):\n    x = [s - n + 1, 1, 1, 1, 1]\n    return x\nassert f(g())\n",
        "idx_generation": 51,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=7, b=3, c=20) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c odd integers)\"\"\"\n    return n + a == sum([b * (2*i + 1) for i in range(c)])\ndef g(a=7, b=3, c=20):\n    return -a + sum([b * (2*i + 1) for i in range(c)])\nassert f(g())\n",
        "idx_generation": 99,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=9) -> bool:\n    \"\"\"Check if there is a subarray in the given list that sums up to the target value.\"\"\"\n    n = len(nums)\n    dp = [False] * (target + 1)\n    dp[0] = True\n\n    for i in range(n):\n        for j in range(target, nums[i] - 1, -1):\n            dp[j] |= dp[j - nums[i]]\n    \n    return dp[target]\n\ndef g(target=9):\n    return [2, 3, 1, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 42,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, weekday=2) -> bool:\n    \"\"\"Check if the given date falls on a specified weekday\n    - date: datetime.date object representing the date\n    - weekday: integer representing the weekday (0 - Monday, 6 - Sunday)\"\"\"\n\n    return date.weekday() == weekday\n\ndef g(weekday=2):\n    return datetime.date(2022, 3, 23)  # March 23, 2022 is a Wednesday\n\nassert f(g())\n",
        "idx_generation": 106,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grid: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 0 at least once and the number -1 exactly once.\"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n\n    def helper(i, j, found_zero, found_minus_one):\n        if i == rows - 1 and j == cols - 1 and found_minus_one:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if grid[i][j] == -1:\n            found_minus_one = True\n        if grid[i][j] == 0:\n            found_zero += 1\n        return helper(i+1, j, found_zero, found_minus_one) or helper(i, j+1, found_zero, found_minus_one)\n\n    return helper(0, 0, 0, False)\n\ndef g(grid=[[0, 1, 0], [1, 0, 0], [0, -1, 0]]):\n    return grid\n\nassert f(g())\n",
        "idx_generation": 492,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 444,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are three consecutive numbers in the list that add up to 0.\"\"\"\n    for i in range(len(nums)-2):\n        if nums[i] + nums[i+1] + nums[i+2] == 0:\n            return True\n    return False\n\ndef g():\n    return [1, 2, -3, 4, -1, -2, -4, 3]\n\nassert f(g())\n",
        "idx_generation": 83,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=100, s=5050) -> bool:\n    \"\"\"Construct a list of n distinct integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n=100, s=5050):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n    x = x + [s - sum(x)]\n    return x\nassert f(g())\n",
        "idx_generation": 33,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers contains a duplicate\"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5, 5]\n\nassert f(g())\n",
        "idx_generation": 326,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=4, lower=-100, seq=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose average is greater than or equal to the lower threshold\"\"\"\n    avg = sum(seq[start:start+k]) / k\n    return avg >= lower\ndef g(k=4, lower=-100, seq=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]):\n    max_avg = float('-inf')\n    max_start = None\n    for i in range(len(seq)-k+1):\n        curr_avg = sum(seq[i:i+k]) / k\n        if curr_avg > max_avg:\n            max_avg = curr_avg\n            max_start = i\n    return max_start\nassert f(g())\n",
        "idx_generation": 14,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in a given list that add up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 62,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if a matrix is a magic square of size n x n\"\"\"\n    target_sum = n * (n**2 + 1) // 2\n    row_sums = [sum(matrix[i]) for i in range(n)]\n    col_sums = [sum(matrix[i][j] for i in range(n)) for j in range(n)]\n    diag_sum_1 = sum(matrix[i][i] for i in range(n))\n    diag_sum_2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all((row_sums[i] == target_sum and col_sums[i] == target_sum) for i in range(n)) and diag_sum_1 == diag_sum_2 == target_sum\ndef g(n=3):\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\nassert f(g())\n",
        "idx_generation": 79,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with all elements being Fibonacci numbers.\"\"\"\n    for i in range(len(arr)):\n        subarray_product = 1\n        for j in range(i, len(arr)):\n            subarray_product *= arr[j]\n            if is_fibonacci(subarray_product):\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 5, 8]\n\ndef is_fibonacci(n: int) -> bool:\n    \"\"\"Check if a number is a Fibonacci number.\"\"\"\n    if n < 0:\n        return False\n    a, b = 0, 1\n    while b < n:\n        a, b = b, a + b\n    return b == n\n\nassert f(g())\n",
        "idx_generation": 414,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=3, c=7) -> bool:\n    \"\"\"Check if n is equal to the sum of the first c even integers multiplied by b and added to a\"\"\"\n    return n == a + sum([b * (2*i) for i in range(1, c+1)])\ndef g(a=5, b=3, c=7):\n    return a + sum([b * (2*i) for i in range(1, c+1)])\nassert f(g())\n\n",
        "idx_generation": 119,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down, right, or diagonally down-right in the grid. The path must contain the number 5 at least once and the number 4 exactly twice.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    def helper(i, j, found_five, found_four):\n        if i == rows - 1 and j == cols - 1 and found_five:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if matrix[i][j] == 4:\n            found_four += 1\n            if found_four > 2:\n                return False\n        if matrix[i][j] == 5:\n            found_five = True\n        return helper(i+1, j, found_five, found_four) or helper(i, j+1, found_five, found_four) or helper(i+1, j+1, found_five, found_four)\n\n    return helper(0, 0, False, 0)\n\ndef g(matrix=[[5, 0, 0], [4, 5, 0], [0, 4, 1]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 489,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if a matrix is diagonally dominant of size n x n\"\"\"\n    return all((abs(matrix[i][i]) > sum(abs(matrix[i][j]) for j in range(n) if i != j)) for i in range(n))\ndef g(n=3):\n    return [[10, 2, 3], [4, 15, 6], [7, 8, 20]]\nassert f(g())\n",
        "idx_generation": 79,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Find a combination of numbers that can be used with arithmetic operations to achieve the target value\"\"\"\n    operators = ['+', '-', '*', '/']\n    def dfs(idx, total):\n        if idx == len(nums):\n            return total == target\n        for op in operators:\n            if op == '+':\n                if dfs(idx + 1, total + nums[idx]):\n                    return True\n            elif op == '-':\n                if dfs(idx + 1, total - nums[idx]):\n                    return True\n            elif op == '*':\n                if dfs(idx + 1, total * nums[idx]):\n                    return True\n            elif op == '/':\n                if nums[idx] != 0 and total % nums[idx] == 0 and dfs(idx + 1, total // nums[idx]):\n                    return True\n        return False\n    return dfs(1, nums[0])\ndef g(target=24):\n    return [5, 7, 2, 4]\nassert f(g())\n",
        "idx_generation": 34,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=6, n=6) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=6, n=6):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 176,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers. You can only move down or right in the grid. The path must contain the number 2 at least once and the number 1 exactly three times.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_two, found_one):\n        if i == rows - 1 and j == cols - 1 and found_two:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one += 1\n            if found_one > 3:\n                return False\n        if nums[i][j] == 2:\n            found_two = True\n        return helper(i+1, j, found_two, found_one) or helper(i, j+1, found_two, found_one)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[2, 0, 1], [1, 1, 0], [0, 1, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 331,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the sum of all numbers in the path must be divisible by 3.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and path_sum % 3 == 0:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        return helper(i+1, j, found_one, path_sum + nums[i][j]) or helper(i, j+1, found_one, path_sum + nums[i][j])\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 419,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Find an integer whose factorial ends with 000.\"\"\"\n    factorial = 1\n    for i in range(2, n+1):\n        factorial *= i\n    return str(factorial).endswith('000')\ndef g(m=10):\n    i = 1\n    factorial = 1\n    while not str(factorial).endswith('000'):\n        i += 1\n        factorial *= i\n    return i\nassert f(g())\n",
        "idx_generation": 65,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=127) -> bool:\n    \"\"\"Check if the given number is the bitwise OR of x and a\"\"\"\n    return x == x | a\ndef g(a=127):\n    return a\n\nassert f(g())\n\n",
        "idx_generation": 431,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=3, b=7) -> bool:\n    \"\"\"Check if the difference between x and the product of a and b is divisible by x\"\"\"\n    return (x - (a * b)) % x == 0\n\ndef g(a=3, b=7):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 22,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Find a string that repeats n times.\"\"\"\n    return s * n == s + s + s + s + s\ndef g(n=5):\n    return \"abc\" * n\nassert f(g())\n",
        "idx_generation": 243,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(tour: List[List[int]], m=6, n=6) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == 2*(m+n)\n\ndef g(m=6, n=6):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == 2*(m+n):\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 330,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [3, 4], [4, 6], [5, 6], [5, 7], [6, 8], [7, 8], [8, 9]]) -> bool:\n    \"\"\"Find a path with the minimum number of nodes from nodes 0 to 9 in the given digraph on vertices 0, 1,..., n.\"\"\"\n    return p[0] == 0 and p[-1] == 9 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges=[[0, 1], [0, 2], [1, 3], [3, 4], [4, 6], [5, 6], [5, 7], [6, 8], [7, 8], [8, 9]]):\n    from collections import defaultdict\n    graph = defaultdict(list)\n    for (a, b) in edges:\n        graph[a].append(b)\n    min_path = []\n    stack = [(0, [0])]\n    while stack:\n        node, path = stack.pop()\n        if node == 9 and (len(path) < len(min_path) or len(min_path) == 0):\n            min_path = path\n        for neighbor in graph[node]:\n            stack.append((neighbor, path + [neighbor]))\n    return min_path\nassert f(g())\n",
        "idx_generation": 489,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 3 at least once and the number 2 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_three, found_two):\n        if i == rows - 1 and j == cols - 1 and found_three:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            found_two += 1\n            if found_two > 2:\n                return False\n        if nums[i][j] == 3:\n            found_three = True\n        return helper(i+1, j, found_three, found_two) or helper(i, j+1, found_three, found_two)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[3, 0, 0], [2, 3, 0], [0, 2, 3]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 461,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(moves: List[List[int]], initial_state=[5, 8, 3, 0]) -> bool:\n    \"\"\"Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\nremoving one or more objects from a single non-empty heap. The player who takes the last object wins.\n- initial_state is list of numbers of objects in each heap\n- moves is a list of your moves: [heap, number of objects to take]\n- you play first\"\"\"\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state=[5, 8, 3, 0]):\n    state = initial_state[:]\n    moves = []\n    def bot_move():\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    def losing(h):\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g())\n",
        "idx_generation": 61,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=3, c=7) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c odd integers)\"\"\"\n    return n + a == sum([b * (2*i+1) for i in range(c)])\ndef g(a=5, b=3, c=7):\n    return -a + sum([b * (2*i+1) for i in range(c)])\nassert f(g())\n",
        "idx_generation": 114,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a subset of numbers from the list whose sum is greater than the target_sum\"\"\"\n    n = len(arr)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[n][target_sum]\n\ndef g(target_sum=100):\n    return list(range(1, target_sum+1))\n\nassert f(g()) == True\n",
        "idx_generation": 66,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(x: int, result=4.605170185988092) -> bool:\n    \"\"\"Determine if the natural logarithm of x is equal to the target result.\"\"\"\n    return abs(math.log(x) - result) < 1e-06\ndef g(result=4.605170185988092):\n    x = 100\n    return x\nassert f(g())\n",
        "idx_generation": 134,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the sum of all positive numbers in the path must be greater than or equal to the sum of all negative numbers in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, positive_sum, negative_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and positive_sum >= negative_sum:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if nums[i][j] > 0:\n            positive_sum += nums[i][j]\n        else:\n            negative_sum += nums[i][j]\n        return helper(i+1, j, found_one, positive_sum, negative_sum) or helper(i, j+1, found_one, positive_sum, negative_sum)\n\n    return helper(0, 0, False, 0, 0)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, -8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 466,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=20) -> bool:\n    \"\"\"Check if any three numbers in the list sums up to the target sum\"\"\"\n    return any((numbers[i] + numbers[j] + numbers[k] == target_sum) for i in range(len(numbers)) for j in range(i+1, len(numbers)) for k in range(j+1, len(numbers)))\ndef g(target_sum=20):\n    numbers = [10, 5, 15, 7, 3, 8]\n    return numbers\nassert f(g())\n",
        "idx_generation": 156,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Check if there is a subsequence in the list that sums up to the target value.\"\"\"\n    n = len(li)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(target + 1):\n            if j < li[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - li[i - 1]]\n    \n    return dp[n][target]\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 41,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    return any(target - num in numbers for num in numbers)\n\ndef g(target=20):\n    return [5, 10, 15, 25, 30, 35]\n\nassert f(g())\n",
        "idx_generation": 354,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]\ndef g():\n    return \"racecar\"\nassert f(g())\n",
        "idx_generation": 44,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Check if the given matrix contains a row or column that sums up to the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum == target:\n            return True\n    return False\ndef g(target=15):\n    matrix = [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\n    return matrix\nassert f(g())\n",
        "idx_generation": 85,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Check if there is a row in the matrix where the sum of all elements is equal to the target.\"\"\"\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False\ndef g(target=15):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "idx_generation": 80,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n=5) -> bool:\n    \"\"\"Given n, find n integers such that the sum of any two consecutive numbers is equal to the next number in the list.\nSample input:\n6\nSample output:\n[_, _, _, _, _, _]\n(Sample output hidden because showing sample output would give away too much information.)\"\"\"\n    return len(arr) == n and all((arr[i] + arr[i+1] == arr[i+2] for i in range(n-2)))\n\ndef g(n=5):\n    return [1, 1, 2, 3, 5] * (n // 5)\n\nassert f(g())\n",
        "idx_generation": 479,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if the given number is divisible by m or m+1.\"\"\"\n    return n % m == 0 or n % (m+1) == 0\n\ndef g(m=10):\n    return 2 * m\n\nassert f(g())\n",
        "idx_generation": 129,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find a list of integers containing exactly four distinct values, such that no integer repeats\ntwice consecutively among the first twelve entries. (So the list needs to have length greater than eleven.)\"\"\"\n    return all([nums[i] != nums[i + 1] for i in range(11)]) and len(set(nums)) == 4\ndef g():\n    return list(range(4)) * 3\nassert f(g())\n",
        "idx_generation": 86,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(moves: List[List[int]], initial_state=[2, 5, 3, 7, 0]) -> bool:\n    \"\"\"Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\nremoving one or more objects from a single non-empty heap. The player who takes the last object wins.\n- initial_state is list of numbers of objects in each heap\n- moves is a list of your moves: [heap, number of objects to take]\n- you play first\"\"\"\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state=[2, 5, 3, 7, 0]):\n    state = initial_state[:]\n    moves = []\n    def bot_move():\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    def losing(h):\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g())\n",
        "idx_generation": 37,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: List[int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies inside a triangle.\nSolution should be a list of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return (0 <= x <= a) and (0 <= y <= b) and (x/a + y/b <= 1)\ndef g(a=1, b=2, c=10, d=1000):\n    return [a//2, b//2]\nassert f(g())\n",
        "idx_generation": 183,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the sum of all numbers in the path must be greater than the product of the minimum and maximum number in the path.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    def helper(i, j, found_one, min_num, max_num, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and path_sum > min_num * max_num:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if matrix[i][j] == 0:\n            return False\n        if matrix[i][j] == 1:\n            found_one = True\n        if matrix[i][j] < min_num:\n            min_num = matrix[i][j]\n        if matrix[i][j] > max_num:\n            max_num = matrix[i][j]\n        path_sum += matrix[i][j]\n        return helper(i+1, j, found_one, min_num, max_num, path_sum) or helper(i, j+1, found_one, min_num, max_num, path_sum)\n\n    return helper(0, 0, False, float('inf'), float('-inf'), 0)\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 1]]):\n    return matrix\n\nassert f(g())\n\n",
        "idx_generation": 336,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the maximum number in the path must be greater than or equal to the sum of all other numbers in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, max_num, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and max_num >= path_sum - max_num:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        max_num = max(max_num, nums[i][j])\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_one, max_num, path_sum) or helper(i, j+1, found_one, max_num, path_sum)\n\n    return helper(0, 0, False, float('-inf'), 0)\n\ndef g(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 439,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target=\"python\") -> bool:\n    \"\"\"Check if there exists a word in the list that contains the target substring\"\"\"\n    return any(target in word for word in words)\ndef g(target=\"python\"):\n    return [\"hello\", \"world\", \"python\", \"programming\"]\nassert f(g())\n\n",
        "idx_generation": 69,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, b=2) -> bool:\n    \"\"\"Check if the given number is the bitwise AND of x and b\"\"\"\n    return x == x & b\ndef g(b=2):\n    return b\n\nassert f(g())\n",
        "idx_generation": 457,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    \"\"\"Check if a number n is a common divisor of both a and b, and is greater than or equal to the lower_bound\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a=247586288427023352, b=372021520735824432, lower_bound=1709054537):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n\nassert f(g())\n",
        "idx_generation": 49,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=14, b=50, c=47) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the squares of the first c integers)\"\"\"\n    return n + a == sum([b * i**2 for i in range(c)])\ndef g(a=14, b=50, c=47):\n    return -a + sum([b * i**2 for i in range(c)])\nassert f(g())\n",
        "idx_generation": 465,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(indices: List[int], a0=1703235) -> bool:\n    \"\"\"Find a repeating integer in an infinite sequence of integers, specifically the indices for which the same value\noccurs 1000 times. The sequence is defined by a starting value a_0 and each subsequent term is:\na_{n+1} = the square root of a_n if the a_n is a perfect square, and a_n + 3 otherwise.\nFor a given a_0 (that is a multiple of 3), the goal is to find 1000 indices where the a_i's are all equal.\nSample input:\n9\nSample output:\n[0, 3, 6, ..., 2997]\nThe sequence starting with a0=9 is [9, 3, 6, 9, 3, 6, 9, ...] thus a_n at where n is a multiple of 3 are\nall equal in this case.\"\"\"\n    assert a0 >= 0 and a0 % 3 == 0, 'Hint: a_0 is a multiple of 3.'\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and len({s[i] for i in indices}) == 1\ndef g(a0=1703235):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 9:\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans\nassert f(g())",
        "idx_generation": 388,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down, right, or diagonally (down-right) in the grid. The path must contain the number 2 at least once and the sum of the numbers in the path must be even.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_two, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_two and path_sum % 2 == 0:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            found_two = True\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_two, path_sum) or helper(i, j+1, found_two, path_sum) or helper(i+1, j+1, found_two, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[1, 2, 1], [2, 3, 2], [3, 3, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 491,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=2, s=10) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=2, s=10):\n    x = [s - n + 1, 1]\n    return x\nassert f(g())\n",
        "idx_generation": 63,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import *\ndef f(matrix: List[List[int]], n=3, target=15) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of the first row, the sum of the first column, and the sum of the diagonal is the same.\"\"\"\n    first_row_sum = sum(matrix[0])\n    first_col_sum = sum(col[0] for col in matrix)\n    diag_sum = sum(matrix[i][i] for i in range(n))\n    return first_row_sum == first_col_sum == diag_sum == target\ndef g(n=3, target=15):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix\n    assert False, f\"No magic square found for n={n}\"\nassert f(g())\n",
        "idx_generation": 128,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Determine if the given list contains a subsequence that sums up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]\n\ndef g():\n    nums = [4, 8, 12, 16, 20]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 78,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(dates: List[datetime.date]) -> bool:\n    \"\"\"Check if all dates in the list are in the past.\"\"\"\n    today = datetime.date.today()\n    for date in dates:\n        if date >= today:\n            return False\n    return True\n\ndef g():\n    return [datetime.date(2021, 1, 1), datetime.date(2022, 1, 1), datetime.date(2023, 1, 1)]\n\nassert f(g())\n",
        "idx_generation": 143,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 9 at least once and each number in the path must be a perfect square.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def is_perfect_square(n):\n        return n**0.5 == int(n**0.5)\n\n    def helper(i, j, found_nine):\n        if i == rows - 1 and j == cols - 1 and found_nine:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 9:\n            found_nine = True\n        return helper(i+1, j, found_nine) or helper(i, j+1, found_nine)\n\n    for i in range(rows):\n        for j in range(cols):\n            if not is_perfect_square(nums[i][j]):\n                nums[i][j] = 0\n\n    return helper(0, 0, False)\n\ndef g(nums=[[1, 4, 9], [16, 25, 36], [49, 64, 81]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 479,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_word=\"PYTHON\") -> bool:\n    \"\"\"Check if a target word can be formed by concatenating words from a given list. Each word can be used only once.\n    Return True if the target word can be formed, False otherwise.\"\"\"\n    def is_valid(current_word, remaining_words):\n        if current_word == target_word:\n            return True\n        for word in remaining_words:\n            if target_word.startswith(current_word + word):\n                if is_valid(current_word + word, [w for w in remaining_words if w != word]):\n                    return True\n        return False\n    return is_valid(\"\", words)\ndef g(words: List[str], target_word=\"PYTHON\"):\n    def reverse_word(word):\n        return word[::-1]\n    words = list(set(words))\n    words.sort()\n    reversed_words = [reverse_word(word) for word in words]\n    return reversed_words\nassert f(g([\"P\", \"Y\", \"T\", \"H\", \"O\", \"N\"]))\n\n\n",
        "idx_generation": 162,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list whose product is equal to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target / num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[2, 3, 4, 6, 8, 10, 12]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 45,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if a given string can be split into k equal parts.\"\"\"\n    assert len(s) % k == 0, 'Hint: The length of the string should be divisible by k'\n    return all((s[i:i+len(s)//k] == s[:len(s)//k] for i in range(0, len(s), len(s)//k)))\ndef g(k=3):\n    return 'abc' * k\nassert f(g())\n",
        "idx_generation": 458,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(seq: List[int], n=0, length=0) -> bool:\n    \"\"\"Find a sequence of 1's and 2's of a given length that that adds up to n\"\"\"\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)\ndef g(n=0, length=0):\n    return [2] * (n - length) + [1] * (2 * length - n)\nassert f(g())\n",
        "idx_generation": 61,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Determine if there are two numbers in the given list that add up to the target value.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g(), target=7)\n",
        "idx_generation": 91,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=4) -> bool:\n    \"\"\"Check if a matrix is a magic square of size n x n\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all((row_sum == col_sum == diagonal_sum1 == diagonal_sum2) for row_sum, col_sum in zip(row_sums, col_sums))\ndef g(n=4):\n    return [[16, 2, 3, 13], [5, 11, 10, 8], [9, 7, 6, 12], [4, 14, 15, 1]]\nassert f(g())\n\n",
        "idx_generation": 81,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if it is possible to obtain the target sum by subtracting a subset of the given numbers in the list.\"\"\"\n    n = len(arr)\n    for i in range(1 << n):\n        subset_sum = 0\n        for j in range(n):\n            if (i & (1 << j)) != 0:\n                subset_sum -= arr[j]\n        if subset_sum == target:\n            return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 488,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=25, b=5) -> bool:\n    \"\"\"Check if n is divisible by both a and b.\"\"\"\n    return n % a == 0 and n % b == 0\ndef g(a=25, b=5):\n    return a * b\nassert f(g())\n",
        "idx_generation": 135,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2) -> bool:\n    \"\"\"Check if n is a perfect square and is divisible by a\"\"\"\n    return (n ** 0.5).is_integer() and n % a == 0\ndef g(a=2):\n    return a ** 6\nassert f(g())\n",
        "idx_generation": 100,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=4, s=20) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=4, s=20):\n    x = [s - n + 1, 1, 1, 1]\n    return x\nassert f(g())\n",
        "idx_generation": 40,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(points: List[Tuple[int, int]]) -> bool:\n    \"\"\"Check if the given points form a rectangle.\"\"\"\n    if len(points) != 4:\n        return False\n    \n    x_values = [point[0] for point in points]\n    y_values = [point[1] for point in points]\n    \n    return len(set(x_values)) == 2 and len(set(y_values)) == 2\n\ndef g():\n    points = [(0, 0), (0, 1), (1, 0), (1, 1)]\n    return points\n\nassert f(g())\n",
        "idx_generation": 207,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and there must be an even number of negative numbers in the path.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    def helper(i, j, found_one, neg_count):\n        if i == rows - 1 and j == cols - 1 and found_one and neg_count % 2 == 0:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if matrix[i][j] == 0:\n            return False\n        if matrix[i][j] == 1:\n            found_one = True\n        if matrix[i][j] < 0:\n            neg_count += 1\n        return helper(i+1, j, found_one, neg_count) or helper(i, j+1, found_one, neg_count)\n\n    return helper(0, 0, False, 0)\n\ndef g(matrix=[[1, -2, 3], [4, -5, 6], [7, 8, 1]]):\n    return matrix\n\nassert f(g())\n\n",
        "idx_generation": 336,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers. You can only move down or right in the grid. The path must contain the number 2 at least once and the sum of all numbers along the path must be greater than the sum of all numbers in the first row of the grid.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def is_sum_greater(n, row_sum):\n        return n > row_sum\n\n    def helper(i, j, found_two, path_sum, row_sum):\n        if i == rows - 1 and j == cols - 1 and found_two and is_sum_greater(path_sum, row_sum):\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            found_two = True\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_two, path_sum, row_sum) or helper(i, j+1, found_two, path_sum, row_sum)\n\n    first_row_sum = sum(nums[0])\n    return helper(0, 0, False, 0, first_row_sum)\n\ndef g(nums=[[2, 1, 1], [3, 2, 1], [1, 3, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 459,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return string == string[::-1]\ndef g():\n    return \"racecar\"\nassert f(g())\n",
        "idx_generation": 107,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if it is possible to obtain the target sum by subtracting a subset of the given numbers in the list.\"\"\"\n    n = len(arr)\n    for i in range(1 << n):\n        subset_diff = 0\n        for j in range(n):\n            if (i & (1 << j)) != 0:\n                subset_diff -= arr[j]\n        if subset_diff == target:\n            return True\n    return False\n\ndef g(target=0):\n    return [10, 9, 8, 7, 6]\n\nassert f(g())\n",
        "idx_generation": 496,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    \"\"\"Check if a number n is a common divisor of both a and b, and is greater than or equal to the lower_bound\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a=247586288427023352, b=372021520735824432, lower_bound=1709054537):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n\nassert f(g())\n",
        "idx_generation": 50,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(tour: List[List[int]], m=8, n=8) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == 2*(m+n)\n\ndef g(m=8, n=8):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == 2*(m+n):\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 403,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, result=24) -> bool:\n    \"\"\"Check if it is possible to obtain the result by performing arithmetic operations on the digits of n\"\"\"\n    digits = [int(d) for d in str(n)]\n    return evaluate_expression(digits, result)\n\ndef g(result=24):\n    return 1234\n\ndef evaluate_expression(digits, result):\n    n = len(digits)\n    if n == 1:\n        return digits[0] == result\n    operators = ['+', '-', '*', '/']\n    for i in range(n):\n        for j in range(i+1, n):\n            a = digits[i]\n            b = digits[j]\n            remaining = [digits[k] for k in range(n) if k != i and k != j]\n            for op in operators:\n                if op == '+':\n                    current_result = a + b\n                elif op == '-':\n                    current_result = a - b\n                elif op == '*':\n                    current_result = a * b\n                elif op == '/':\n                    if b != 0:\n                        current_result = a / b\n                    else:\n                        continue\n                if evaluate_expression([current_result] + remaining, result):\n                    return True\n                if op == '/' and b != 0 and evaluate_expression([current_result] + remaining, math.floor(result)):\n                    return True\n    return False\n\nassert f(g())\n",
        "idx_generation": 76,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=100, b=10) -> bool:\n    \"\"\"Check if the difference between a and b is equal to n.\"\"\"\n    return abs(a - b) == n\ndef g(a=100, b=10):\n    return a - b\nassert f(g())\n",
        "idx_generation": 135,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' whose sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g(), target=10)\n",
        "idx_generation": 82,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target.\"\"\"\n    prefix_sum = 0\n    for i in range(len(nums)):\n        prefix_sum = 0\n        for j in range(i, len(nums)):\n            prefix_sum += nums[j]\n            if prefix_sum == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [i+1 for i in range(target)]\n\nassert f(g())\n",
        "idx_generation": 151,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 4 at least once and the number 2 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_four, found_two):\n        if i == rows - 1 and j == cols - 1 and found_four:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            found_two += 1\n            if found_two > 2:\n                return False\n        if nums[i][j] == 4:\n            found_four = True\n        return helper(i+1, j, found_four, found_two) or helper(i, j+1, found_four, found_two)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[4, 0, 0], [2, 4, 0], [0, 2, 4]]):\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 483,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Return True if there exists a pair of elements in the list whose product is equal to the target, and False otherwise.\"\"\"\n    for i in range(len(nums)-1):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\ndef g(target=20):\n    nums = [2, 4, 6, 8, 10]\n    return nums\nassert f(g())\n",
        "idx_generation": 188,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[100, 99, 90, 80, 70, 50, 30, 20], k=4) -> bool:\n    \"\"\"Given a list of non-increasing integers and given an integer k, determine how many positive integers in the list\nare at least as large as the kth.\"\"\"\n    assert all((nums[i] >= nums[i + 1] for i in range(len(nums) - 1))), 'Hint: nums are non-decreasing'\n    return all((s >= nums[k] and s > 0 for s in nums[:n])) and all((s < nums[k] or s <= 0 for s in nums[n:]))\ndef g(nums=[100, 99, 90, 80, 70, 50, 30, 20], k=4):\n    threshold = max(nums[k], 1)\n    return sum((s >= threshold for s in nums))\nassert f(g())\n",
        "idx_generation": 46,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(x: List[int], target=25) -> bool:\n    \"\"\"Find a pair of numbers in the list x that sum up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(x, 2))\ndef g(target=25):\n    return [10, 5, 15, 20]\nassert f(g())\n",
        "idx_generation": 1,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target value\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=100):\n    return [20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g())\n",
        "idx_generation": 463,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if a given string contains all the vowels\"\"\"\n    return all(vowel in s for vowel in vowels)\ndef g(vowels=['a', 'e', 'i', 'o', 'u']):\n    return ''.join(vowels)\nassert f(g())\n",
        "idx_generation": 62,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=50):\n    return [5, 10, 15, 20, 25, 30, 35]\n\nassert f(g())\n",
        "idx_generation": 92,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Given a list of integers, find whether there exists a subsequence of length 3 such that the sum of the subsequence is equal to zero.\"\"\"\n    n = len(nums)\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if nums[i] + nums[j] + nums[k] == 0:\n                    return True\n    return False\ndef g():\n    return [1, 2, -3, 4, -1, 5]\nassert f(g())\n",
        "idx_generation": 86,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], k=3) -> bool:\n    \"\"\"Check if the list contains a subarray with a sum greater than or equal to k\"\"\"\n    return any(sum(lst[i:j]) >= k for i in range(len(lst)) for j in range(i+1, len(lst)+1))\ndef g(k=3):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 492,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=10, c=15) -> bool:\n    \"\"\"Find n such that n - a == b * (the sum of the first c integers)\"\"\"\n    return n - a == sum([b * i for i in range(c)])\ndef g(a=5, b=10, c=15):\n    return a + sum([b * i for i in range(c)])\nassert f(g())\n",
        "idx_generation": 151,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix.\"\"\"\n    rows = len(matrix)\n    for row in matrix:\n        if len(row) != rows:\n            return False\n    return True\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\nassert f(g([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n",
        "idx_generation": 102,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10], target_sum=20) -> bool:\n    \"\"\"Find if there exists a combination of numbers from the list that adds up to the target sum\"\"\"\n    def subset_sum(nums, n, target_sum):\n        if target_sum == 0:\n            return True\n        if n == 0 and target_sum != 0:\n            return False\n        if nums[n-1] > target_sum:\n            return subset_sum(nums, n-1, target_sum)\n        return subset_sum(nums, n-1, target_sum) or subset_sum(nums, n-1, target_sum-nums[n-1])\n    return subset_sum(nums, len(nums), target_sum)\ndef g(nums=[2, 4, 6, 8, 10], target_sum=20):\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums)))\nassert f(g())\n",
        "idx_generation": 44,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(points: List[Tuple[int, int]], target_len=5) -> bool:\n    \"\"\"Check if the points form a rectangle with an area greater than or equal to 10 square units.\nThe rectangle is formed by the given points, each represented as a tuple of (x, y) coordinates.\"\"\"\n    assert len(points) == 4, \"Exactly 4 points are required to form a rectangle.\"\n    x_coords = [point[0] for point in points]\n    y_coords = [point[1] for point in points]\n    min_x = min(x_coords)\n    max_x = max(x_coords)\n    min_y = min(y_coords)\n    max_y = max(y_coords)\n    width = max_x - min_x\n    height = max_y - min_y\n    area = width * height\n    return area >= 10 and len(set(points)) == 4\ndef g():\n    return [(0, 0), (0, 3), (4, 3), (4, 0)]\nassert f(g())\n",
        "idx_generation": 212,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers. You can only move down or right in the grid. The path must contain the number 5 at least once and the number 0 exactly once.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_five, found_zero):\n        if i == rows - 1 and j == cols - 1 and found_five:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            found_zero += 1\n            if found_zero > 1:\n                return False\n        if nums[i][j] == 5:\n            found_five = True\n        return helper(i+1, j, found_five, found_zero) or helper(i, j+1, found_five, found_zero)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[5, 4, 1], [1, 5, 2], [3, 1, 0]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 345,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]], target=5) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number target at least once and the number 1 exactly once.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_target, found_one):\n        if i == rows - 1 and j == cols - 1 and found_target and found_one:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if nums[i][j] == target:\n            found_target = True\n        return helper(i+1, j, found_target, found_one) or helper(i, j+1, found_target, found_one)\n\n    return helper(0, 0, False, False)\n\ndef g(nums=[[5, 0, 0], [1, 5, 0], [0, 1, 5]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 468,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, strings=['hello', 'world', 'python', 'programming']) -> bool:\n    \"\"\"Check if a given string is a substring of any string in the list\"\"\"\n    return any(s in string for string in strings)\ndef g(strings=['hello', 'world', 'python', 'programming']):\n    return 'prog'\nassert f(g())\n\n",
        "idx_generation": 122,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(radius: float, volume=113.09733552923254) -> bool:\n    \"\"\"Determine if the volume of a sphere with the given radius is equal to the target volume.\"\"\"\n    return abs((4/3) * math.pi * (radius**3) - volume) < 1e-06\ndef g(volume=113.09733552923254):\n    radius = 3\n    return radius\nassert f(g())\n",
        "idx_generation": 126,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    \"\"\"Find a path with an odd number of nodes from nodes 0 to 1 in the given digraph on vertices 0, 1,..., n.\"\"\"\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    from collections import defaultdict\n    graph = defaultdict(list)\n    for (a, b) in edges:\n        graph[a].append(b)\n    odd_paths = []\n    stack = [(0, [0])]\n    while stack:\n        node, path = stack.pop()\n        if node == 1 and len(path) % 2 != 0:\n            odd_paths.append(path)\n        for neighbor in graph[node]:\n            stack.append((neighbor, path + [neighbor]))\n    return odd_paths[-1]\nassert f(g())\n",
        "idx_generation": 408,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int, k: int) -> bool:\n    \"\"\"Check if there are 'k' numbers in the list that add up to the target\"\"\"\n    if k == 0:\n        return target == 0\n    if len(nums) < k:\n        return False\n    for i in range(len(nums)):\n        if f(nums[i+1:], target-nums[i], k-1):\n            return True\n    return False\n\ndef g():\n    return [1, 4, 7, 3, 9, 2, 5], 10, 3\n\nassert f(*g())\n",
        "idx_generation": 81,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=200) -> bool:\n    \"\"\"Check if there are four numbers in the list whose sum is equal to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                for l in range(k+1, len(arr)):\n                    if arr[i] + arr[j] + arr[k] + arr[l] == target:\n                        return True\n    return False\ndef g(target=200):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g())\n",
        "idx_generation": 136,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers from the list that sum up to the target value\"\"\"\n    return any((numbers[i] + numbers[j] == target for i in range(len(numbers)) for j in range(i + 1, len(numbers))))\ndef g(numbers=[2, 4, 6, 8]):\n    return numbers\nassert f(g())\n",
        "idx_generation": 0,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=7) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in arr:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=7):\n    return [i for i in range(1, k+1)]\n\nassert f(g())\n",
        "idx_generation": 90,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], n=3, target=15) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all(sum_val == target for sum_val in rows + cols + [diag1, diag2]) and len(rows) == n\ndef g(n=3, target=15):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix\n    assert False, f\"No magic square found for n={n}\"\nassert f(g())\n",
        "idx_generation": 159,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    if rows != cols:\n        return False\n\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 490,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers, determine if there exist four numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(arr)-3):\n        for j in range(i+1, len(arr)-2):\n            for k in range(j+1, len(arr)-1):\n                for l in range(k+1, len(arr)):\n                    if arr[i] + arr[j] + arr[k] + arr[l] == target:\n                        return True\n    return False\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g(), 15)\n",
        "idx_generation": 201,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=4, s=30) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=4, s=30):\n    x = [s - n + 1, 1, 1, 1]\n    return x\nassert f(g())\n",
        "idx_generation": 51,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_length=5) -> bool:\n    \"\"\"Find a word in the list of words whose length is equal to the target_length.\"\"\"\n    return any(len(word) == target_length for word in words)\ndef g(target_length=5):\n    return [\"apple\", \"orange\", \"banana\", \"grape\"]\nassert f(g())\n",
        "idx_generation": 11,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], pattern='ABBA') -> bool:\n    \"\"\"Check if the given list of words follow the given pattern\"\"\"\n    if len(words) != len(pattern):\n        return False\n    \n    pattern_map = {}\n    word_map = {}\n\n    for i in range(len(pattern)):\n        if pattern[i] not in pattern_map:\n            pattern_map[pattern[i]] = words[i]\n        else:\n            if pattern_map[pattern[i]] != words[i]:\n                return False\n\n        if words[i] not in word_map:\n            word_map[words[i]] = pattern[i]\n        else:\n            if word_map[words[i]] != pattern[i]:\n                return False\n\n    return True\n\ndef g(pattern='ABBA'):\n    words = ['red', 'blue', 'blue', 'red']\n    return words\n\nassert f(g())\n",
        "idx_generation": 70,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums: List[int]):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == 10:\n                return (nums[i], nums[j])\nassert f(g([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n",
        "idx_generation": 93,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=93252338, b=4, c=5) -> bool:\n    \"\"\"Check if x divided by b and then multiplied by c is equal to a\"\"\"\n    return x / b * c == a\ndef g(a=93252338, b=4, c=5):\n    return a / c * b\nassert f(g())\n",
        "idx_generation": 87,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=2, c='z') -> bool:\n    \"\"\"Check if the character c appears n times consecutively in the given string s\"\"\"\n    return s.count(c * n) > 0\ndef g(n=2, c='z'):\n    return c * n\nassert f(g())\n",
        "idx_generation": 167,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=4) -> bool:\n    \"\"\"Check if n is a perfect square\"\"\"\n    return n ** 0.5 == int(n ** 0.5)\ndef g(a=4):\n    return a * a\nassert f(g())\n",
        "idx_generation": 103,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 3, 5, 7, 9], target_sum=15) -> bool:\n    \"\"\"Determine if there exists a combination of numbers from the list that adds up to the target sum\"\"\"\n    def subset_sum(nums, n, target_sum):\n        if target_sum == 0:\n            return True\n        if n == 0 and target_sum != 0:\n            return False\n        if nums[n-1] > target_sum:\n            return subset_sum(nums, n-1, target_sum)\n        return subset_sum(nums, n-1, target_sum) or subset_sum(nums, n-1, target_sum-nums[n-1])\n    return subset_sum(nums, len(nums), target_sum)\ndef g(nums=[1, 3, 5, 7, 9], target_sum=15):\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums)))\nassert f(g())\n",
        "idx_generation": 45,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(points: List[Tuple[int, int]], target_len=5) -> bool:\n    \"\"\"Check if the points form a square with sides greater than or equal to 5 units.\nThe square is formed by the given points, each represented as a tuple of (x, y) coordinates.\"\"\"\n    assert len(points) == 4, \"Exactly 4 points are required to form a square.\"\n    x_coords = [point[0] for point in points]\n    y_coords = [point[1] for point in points]\n    min_x = min(x_coords)\n    max_x = max(x_coords)\n    min_y = min(y_coords)\n    max_y = max(y_coords)\n    width = max_x - min_x\n    height = max_y - min_y\n    return width >= 5 and height >= 5 and len(set(points)) == 4\ndef g():\n    return [(0, 0), (0, 5), (5, 5), (5, 0)]\nassert f(g())\n",
        "idx_generation": 232,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]], target=10) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers. You can only move down or right in the grid. The path must contain the target number at least once and the number 0 exactly once.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_target, found_zero):\n        if i == rows - 1 and j == cols - 1 and found_target:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            found_zero += 1\n            if found_zero > 1:\n                return False\n        if nums[i][j] == target:\n            found_target = True\n        return helper(i+1, j, found_target, found_zero) or helper(i, j+1, found_target, found_zero)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[10, 4, 0], [1, 10, 2], [3, 1, 0]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 346,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 4 at least once and the number 2 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_four, found_two):\n        if i == rows - 1 and j == cols - 1 and found_four:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            found_two += 1\n            if found_two > 2:\n                return False\n        if nums[i][j] == 4:\n            found_four = True\n        return helper(i+1, j, found_four, found_two) or helper(i, j+1, found_four, found_two)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[4, 0, 0], [2, 2, 0], [0, 2, 4]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 473,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(names: List[str], prefix=\"J\") -> bool:\n    \"\"\"Check if any name in the list starts with the given prefix.\"\"\"\n    return any(name.startswith(prefix) for name in names)\ndef g(names=[\"John\", \"Jane\", \"Jack\", \"Jill\"]):\n    return names\n\nassert f(g())\n",
        "idx_generation": 130,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target.\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    \n    return subset_sum(nums, target)\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 149,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if it is possible to obtain the target value by rearranging the numbers\n    and performing addition and subtraction operations.\n    Each number in the list can be used only once.\"\"\"\n    def helper(numbers, target):\n        if len(numbers) == 0:\n            return target == 0\n        for i, num in enumerate(numbers):\n            remaining = numbers[:i] + numbers[i+1:]\n            if helper(remaining, target - num):\n                return True\n            if helper(remaining, target + num):\n                return True\n        return False\n\n    return helper(numbers, target)\n\ndef g(numbers=[2, 3, 5, 10]):\n    return numbers\n\nassert f(g(), target=4)\n\n",
        "idx_generation": 452,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], k=4) -> bool:\n    \"\"\"Find k non-negative integers such that each integer divides (the product of the rest plus 1)\"\"\"\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return all(((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))\ndef g(k=4):\n    n = 1\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans\nassert f(g())\n",
        "idx_generation": 88,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=5, b=20, c=10) -> bool:\n    \"\"\"Find x such that x * a == (the sum of the first b multiples of c)\"\"\"\n    return x * a == sum([c * i for i in range(b)])\ndef g(a=5, b=20, c=10):\n    return sum([c * i for i in range(b)]) // a\nassert f(g())\n",
        "idx_generation": 137,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=3) -> bool:\n    \"\"\"Find the n smallest numbers in the list x\"\"\"\n    return sorted(x)[:n] == [1, 2, 3]\ndef g(n=3):\n    return [5, 1, 3, 2, 4]\nassert f(g())\n",
        "idx_generation": 1,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are two consecutive numbers in the list that multiply to give 20.\"\"\"\n    for i in range(len(nums)-1):\n        if nums[i] * nums[i+1] == 20:\n            return True\n    return False\n\ndef g():\n    return [2, 3, 4, 5, -1, -2, -5, 10]\n\nassert f(g())\n",
        "idx_generation": 104,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=3, c=15) -> bool:\n    \"\"\"Find n such that n * a == b * (the sum of the first c integers)\"\"\"\n    return n * a == sum([b * i for i in range(c)])\ndef g(a=10, b=3, c=15):\n    return sum([b * i for i in range(c)]) / a\nassert f(g())\n",
        "idx_generation": 197,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=25) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target number.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)+1):\n            if sum(numbers[i:j]) == target:\n                return True\n    return False\n\ndef g(target=25):\n    numbers = [5, 10, 15, 20, 25]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 205,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there is a subsequence in the list whose sum is equal to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target+1)] for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = True\n    for i in range(1, n+1):\n        for j in range(1, target+1):\n            if nums[i-1] > j:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i-1]]\n    return dp[n][target]\n    \ndef g():\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 60,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, words=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Given a string and a list of words, determine if the string can be formed by concatenating the words in the list.\n    Each word in the list can be used only once.\"\"\"\n    word_count = {}\n    for word in words:\n        if word not in word_count:\n            word_count[word] = 0\n        word_count[word] += 1\n\n    i = 0\n    while i < len(string):\n        found_word = False\n        for word in word_count:\n            if string[i:i+len(word)] == word:\n                if word_count[word] > 0:\n                    word_count[word] -= 1\n                    i += len(word)\n                    found_word = True\n                    break\n        if not found_word:\n            return False\n\n    for count in word_count.values():\n        if count > 0:\n            return False\n\n    return True\n\ndef g(words=['apple', 'banana', 'cherry', 'date']):\n    return ''.join(words)\n\nassert f(g())\n",
        "idx_generation": 19,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a subsequence in the list whose sum is equal to the target number.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n    for i in range(1, n + 1):\n        dp[i][0] = True\n        for j in range(1, target + 1):\n            if j >= nums[i - 1]:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]\n\ndef g(nums=[2, 4, 6, 8, 10, 12, 14, 16], target=20):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 72,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Find a subsequence of the given list where the sum of its elements is divisible by 5.\"\"\"\n    for r in range(1, len(arr) + 1):\n        for subseq in itertools.combinations(arr, r):\n            if sum(subseq) % 5 == 0:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 94,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], k=4) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in numbers:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=4):\n    return [i for i in range(1, k+1)]\n\nassert f(g())\n",
        "idx_generation": 90,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome and all its characters are uppercase.\"\"\"\n    return s == s[::-1] and s.isupper()\n\ndef g():\n    return 'MADAM'\n\nassert f(g())\n",
        "idx_generation": 179,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a diagonal matrix\"\"\"\n    return all(matrix[i][j] == 0 for i in range(len(matrix)) for j in range(len(matrix[i])) if i != j)\ndef g():\n    return [[1, 0, 0], [0, 4, 0], [0, 0, 6]]\nassert f(g())\n\n",
        "idx_generation": 106,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(moves: List[List[int]], initial_state=[2, 5, 3, 7, 0]) -> bool:\n    \"\"\"Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\nremoving one or more objects from a single non-empty heap. The player who takes the last object wins.\n- initial_state is list of numbers of objects in each heap\n- moves is a list of your moves: [heap, number of objects to take]\n- you play first\"\"\"\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state=[2, 5, 3, 7, 0]):\n    state = initial_state[:]\n    moves = []\n    def bot_move():\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    def losing(h):\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g())\n",
        "idx_generation": 71,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(points: List[Tuple[int, int]], target_len=5) -> bool:\n    \"\"\"Check if the points form a triangle with an area greater than or equal to 10 square units.\nThe triangle is formed by the given points, each represented as a tuple of (x, y) coordinates.\"\"\"\n    assert len(points) == 3, \"Exactly 3 points are required to form a triangle.\"\n    x_coords = [point[0] for point in points]\n    y_coords = [point[1] for point in points]\n    min_x = min(x_coords)\n    max_x = max(x_coords)\n    min_y = min(y_coords)\n    max_y = max(y_coords)\n    width = max_x - min_x\n    height = max_y - min_y\n    area = width * height / 2\n    return area >= 10 and len(set(points)) == 3\ndef g():\n    return [(0, 0), (0, 6), (8, 0)]\nassert f(g())\n",
        "idx_generation": 232,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the sum of all even numbers in the path must be greater than or equal to the sum of all odd numbers in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, even_sum, odd_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and even_sum >= odd_sum:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if nums[i][j] % 2 == 0:\n            even_sum += nums[i][j]\n        else:\n            odd_sum += nums[i][j]\n        return helper(i+1, j, found_one, even_sum, odd_sum) or helper(i, j+1, found_one, even_sum, odd_sum)\n\n    return helper(0, 0, False, 0, 0)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 3]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 350,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there is a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 3 at least once and the number 2 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_three, found_two):\n        if i == rows - 1 and j == cols - 1 and found_three:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            found_two += 1\n            if found_two > 2:\n                return False\n        if nums[i][j] == 3:\n            found_three = True\n        return helper(i+1, j, found_three, found_two) or helper(i, j+1, found_three, found_two)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[3, 0, 0], [2, 2, 0], [0, 2, 3]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 491,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='python', count=2) -> bool:\n    \"\"\"Check if the given string contains the specified substring the given number of times\"\"\"\n    return s.count(substring) == count\ndef g(substring='python', count=2):\n    return substring * count\nassert f(g())\n",
        "idx_generation": 135,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, year_len=4) -> bool:\n    \"\"\"Find n such that the probability of three people having the same birthday in a group of n is near 1/2.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len=4):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n    return best[1]\nassert f(g())\n",
        "idx_generation": 153,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]], target=12) -> bool:\n    \"\"\"Determine if there exists a path in the given matrix that forms the target number by concatenating the numbers along the path\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n\n    def backtrack(row, col, curr_num):\n        if curr_num == target:\n            return True\n        if row < 0 or col < 0 or row >= m or col >= n or curr_num > target:\n            return False\n        curr_num = curr_num * 10 + matrix[row][col]\n        return (\n            backtrack(row + 1, col, curr_num)\n            or backtrack(row, col + 1, curr_num)\n            or backtrack(row - 1, col, curr_num)\n            or backtrack(row, col - 1, curr_num)\n        )\n\n    for i in range(m):\n        for j in range(n):\n            if backtrack(i, j, 0):\n                return True\n    return False\n\ndef g(target=12):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 484,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if any combination of the given list elements adds up to the target value.\"\"\"\n    n = len(arr)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(target + 1):\n            if j < arr[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    \n    return dp[n][target]\n\ndef g(target=100):\n    return random.sample(range(1, 101), 10)\n\nassert f(g())\n",
        "idx_generation": 94,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if any combination of numbers in the list sums up to the target.\"\"\"\n    for r in range(1, len(nums) + 1):\n        for combination in combinations(nums, r):\n            if sum(combination) == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 143,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=8) -> bool:\n    \"\"\"Given a list of integers, find three numbers such that their sum is equal to the target number.\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i + 1, len(nums)) for k in range(j + 1, len(nums))))\ndef g(target=8):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 3,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in non-decreasing order\"\"\"\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 105,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a sum greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] > target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 209,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=15) -> bool:\n    \"\"\"Check if there exists three numbers in the list that add up to the target.\"\"\"\n    return any(target - num1 - num2 in numbers for i, num1 in enumerate(numbers) for num2 in numbers[i+1:])\n\ndef g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 222,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=4, s=20) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=4, s=20):\n    x = [s - n + 1, 1, 1, 1]\n    return x\nassert f(g())\n",
        "idx_generation": 63,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if a given string s contains all vowels\"\"\"\n    return all((vowel in s for vowel in vowels))\ndef g(vowels=['a', 'e', 'i', 'o', 'u']):\n    return ''.join(vowels)\nassert f(g())\n",
        "idx_generation": 23,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string contains at least n consecutive vowels\"\"\"\n    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False\ndef g(n=3):\n    return 'aaeeii' + 'o' * (n - 6)\nassert f(g())\n",
        "idx_generation": 78,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list 'numbers' that sum up to the target value.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(numbers=[5, 2, 8, 4, 7, 1]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 109,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(nums: List[int], mean=10, threshold=5) -> bool:\n    \"\"\"Determine if the mean of the numbers in 'nums' is within 'threshold' units of 'mean'\"\"\"\n    return math.isclose(sum(nums)/len(nums), mean, abs_tol=threshold)\ndef g(nums=[5, 10, 15, 20, 25], mean=10, threshold=5):\n    return nums\nassert f(g())\n",
        "idx_generation": 116,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if all numbers in the list 'nums' are greater than the target value.\"\"\"\n    return all(num > target for num in nums)\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 184,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if all the numbers in the given list are positive integers.\"\"\"\n    for num in nums:\n        if num <= 0:\n            return False\n    return True\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 137,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there is a subset of the list that sums up to the target\"\"\"\n    def isSubsetSum(nums, n, target):\n        if target == 0:\n            return True\n        if n == 0 and target != 0:\n            return False\n        if nums[n-1] > target:\n            return isSubsetSum(nums, n-1, target)\n        return isSubsetSum(nums, n-1, target) or isSubsetSum(nums, n-1, target-nums[n-1])\n\n    return isSubsetSum(nums, len(nums), target)\n\ndef g():\n    return [3, 34, 4, 12, 5, 2], 9\n\nassert f(*g())\n",
        "idx_generation": 71,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == 2*(m+n)\n\ndef g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == 2*(m+n):\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 281,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 2 at least once and the number 0 exactly three times.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_two, found_zero):\n        if i == rows - 1 and j == cols - 1 and found_two:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            found_zero += 1\n            if found_zero > 3:\n                return False\n        if nums[i][j] == 2:\n            found_two = True\n        return helper(i+1, j, found_two, found_zero) or helper(i, j+1, found_two, found_zero)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[2, 0, 0], [1, 2, 0], [0, 1, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 355,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, n=3) -> bool:\n    \"\"\"Check if there exists a substring of length n that is a palindrome.\"\"\"\n    for i in range(len(string) - n + 1):\n        substring = string[i:i+n]\n        if substring == substring[::-1]:\n            return True\n    return False\n\ndef g(n=3):\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 150,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if it is possible to obtain the target value by rearranging the numbers\n    and performing addition, subtraction, multiplication, and division operations.\n    Each number in the list can be used only once.\"\"\"\n    def helper(numbers, target):\n        if len(numbers) == 0:\n            return target == 0\n        for i, num in enumerate(numbers):\n            remaining = numbers[:i] + numbers[i+1:]\n            if helper(remaining, target - num):\n                return True\n            if helper(remaining, target + num):\n                return True\n            if helper(remaining, target * num):\n                return True\n            if num != 0 and target % num == 0 and helper(remaining, target // num):\n                return True\n        return False\n\n    return helper(numbers, target)\n\ndef g(numbers=[1, 2, 3, 4]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 165,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down, right, or diagonally down-right in the grid. The path must contain the number 2 at least once and the number 1 exactly once.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_two, found_one):\n        if i == rows - 1 and j == cols - 1 and found_two:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one += 1\n            if found_one > 1:\n                return False\n        if nums[i][j] == 2:\n            found_two = True\n        return helper(i+1, j, found_two, found_one) or helper(i, j+1, found_two, found_one) or helper(i+1, j+1, found_two, found_one)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[2, 0, 0], [1, 2, 0], [0, 1, 3]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 485,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"Find a combination of numbers in the list x that sum up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for r in range(1, len(x) + 1) for c in combinations(x, r))\ndef g(target=100):\n    return [10, 20, 30, 40]\nassert f(g())\n",
        "idx_generation": 1,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, k: int) -> bool:\n    \"\"\"Check if there are k numbers in the list that add up to the target\"\"\"\n    def helper(nums, target, k):\n        if k == 0:\n            return target == 0\n        if target < 0 or k > len(nums):\n            return False\n        if helper(nums[1:], target - nums[0], k - 1):\n            return True\n        return helper(nums[1:], target, k)\n    \n    return helper(nums, target, k)\n\ndef g():\n    return [1, 4, 7, 3, 9, 2, 5], 10, 3\n\nassert f(*g())\n",
        "idx_generation": 102,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=7, b=20, c=25) -> bool:\n    \"\"\"Find n such that n - a == b * (the sum of the first c integers)\"\"\"\n    return n - a == sum([b * i for i in range(c)])\ndef g(a=7, b=20, c=25):\n    return a + sum([b * i for i in range(c)])\nassert f(g())\n",
        "idx_generation": 215,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if a list of numbers is sorted in ascending order.\"\"\"\n    return nums == sorted(nums)\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 3,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 107,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: List[int], a=0, b=0, c=0, d=0) -> bool:\n    \"\"\"Check if a point lies on a specific line.\nSolution should be a tuple of the (x,y) coordinates.\nThe equation of the line is: ax + by + c = 0\"\"\"\n    x, y = e\n    return a*x + b*y + c == 0\ndef g(a=2, b=3, c=6):\n    return [a, b]\nassert f(g())\n",
        "idx_generation": 214,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers and a target number, find if there exists a subset of the list that sums up to the target number.\"\"\"\n    return any(sum(comb) == target for i in range(len(nums)+1) for comb in itertools.combinations(nums, i))\n    \ndef g():\n    return [1, 2, 3, 4, 5], 9\n\nassert f(*g())\n",
        "idx_generation": 227,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum=50) -> bool:\n    \"\"\"Check if there exists a subset of numbers from the list whose sum is greater than or equal to the target_sum\"\"\"\n    n = len(arr)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[n][target_sum]\n\ndef g(target_sum=50):\n    return list(range(1, target_sum+1))\n\nassert f(g()) == True\n",
        "idx_generation": 74,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, k=3) -> bool:\n    \"\"\"Check if a string contains exactly k occurrences of a specific character.\"\"\"\n    return string.count('a') == k\ndef g(k=3):\n    return 'a' * k\nassert f(g())\n",
        "idx_generation": 25,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], pattern=\"abc\") -> bool:\n    \"\"\"Check if all the words in the list follow a specific pattern.\"\"\"\n    for word in words:\n        if len(word) != len(pattern):\n            return False\n        char_map = {}\n        for i in range(len(word)):\n            if pattern[i] not in char_map:\n                char_map[pattern[i]] = word[i]\n            elif char_map[pattern[i]] != word[i]:\n                return False\n    return True\n\ndef g(pattern=\"abc\"):\n    return [\"xyz\", \"def\", \"mno\"]\n\nassert f(g())\n",
        "idx_generation": 125,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiply to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [2, 5, 10, 20, 25, 50, 100]\n\nassert f(g())\n",
        "idx_generation": 115,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there is a subarray in the list that adds up to zero.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if sum(nums[i:j+1]) == 0:\n                return True\n    return False\n\ndef g():\n    return [1, 2, -3, 4, -1, -2, -4, 3]\n\nassert f(g())\n\n",
        "idx_generation": 119,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], letter='a') -> bool:\n    \"\"\"Check if all words in the list contain the given letter.\"\"\"\n    return all((letter in word for word in words))\n\ndef g(letter='a'):\n    return ['apple', 'banana', 'orange', 'grapefruit']\n\nassert f(g())\n",
        "idx_generation": 186,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that add up to the target value.\"\"\"\n    complements = set()\n    for num in nums:\n        complement = target - num\n        if complement in complements:\n            return True\n        complements.add(num)\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 158,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum=50) -> bool:\n    \"\"\"Check if there exists a subset of numbers from the list whose sum is greater than or equal to the target_sum\"\"\"\n    n = len(arr)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[n][target_sum]\n\ndef g(target_sum=50):\n    return list(range(1, target_sum+1))\n\nassert f(g()) == True\n",
        "idx_generation": 71,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(tour: List[List[int]], m=8, n=8) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == 2*(m+n)\n\ndef g(m=8, n=8):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == 2*(m+n):\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 321,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the number 2 exactly once.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, found_two):\n        if i == rows - 1 and j == cols - 1 and found_one:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if nums[i][j] == 2:\n            found_two += 1\n            if found_two > 1:\n                return False\n        return helper(i+1, j, found_one, found_two) or helper(i, j+1, found_one, found_two)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[2, 0, 0], [1, 2, 0], [0, 1, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 363,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, a=\"hello\") -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return x == x[::-1]\ndef g(a=\"hello\"):\n    return a + a[::-1]\nassert f(g())\n",
        "idx_generation": 165,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if it is possible to obtain the target value by rearranging the numbers\n    and performing addition, subtraction, multiplication, and division operations.\n    Each number in the list can be used multiple times.\"\"\"\n    def helper(numbers, target):\n        if target == 0:\n            return True\n        for num in numbers:\n            if target - num >= 0 and helper(numbers, target - num):\n                return True\n            if helper(numbers, target + num):\n                return True\n            if helper(numbers, target * num):\n                return True\n            if num != 0 and target % num == 0 and helper(numbers, target // num):\n                return True\n        return False\n\n    return helper(numbers, target)\n\ndef g(numbers=[1, 2, 3, 4]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 165,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down, right, or diagonally (down-right) in the grid. The path must contain the number 2 at least once and the product of the numbers in the path must be even.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_two, path_product):\n        if i == rows - 1 and j == cols - 1 and found_two and path_product % 2 == 0:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            found_two = True\n        path_product *= nums[i][j]\n        return helper(i+1, j, found_two, path_product) or helper(i, j+1, found_two, path_product) or helper(i+1, j+1, found_two, path_product)\n\n    return helper(0, 0, False, 1)\n\ndef g(nums=[[1, 2, 1], [2, 2, 2], [3, 3, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 490,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], x=10, y=5, z=3) -> bool:\n    \"\"\"Given a list of integers, check if there are at least x numbers greater than y and at least z numbers smaller than y.\"\"\"\n    greater = sum((num > y for num in nums))\n    smaller = sum((num < y for num in nums))\n    return greater >= x and smaller >= z\ndef g(x=10, y=5, z=3):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    return nums\nassert f(g())\n",
        "idx_generation": 6,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are three numbers in the list that multiply to the target\"\"\"\n    def helper(nums, target, count):\n        if count == 0:\n            return target == 1\n        if target < 1 or count > len(nums):\n            return False\n        if helper(nums[1:], target / nums[0], count - 1):\n            return True\n        return helper(nums[1:], target, count)\n    \n    return helper(nums, target, 3)\n\ndef g():\n    return [2, 4, 6, 3, 9, 2, 5], 48\n\nassert f(*g())\n",
        "idx_generation": 103,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/4.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 1/4) ** 2 <= year_len\ndef g(year_len=365):\n    n = 1\n    distinct_prob = 1.0\n    best = (1/4, 1)\n    while distinct_prob > 1/4:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(1/4 - distinct_prob), n))\n    return best[1]\nassert f(g())\n",
        "idx_generation": 229,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=21) -> bool:\n    \"\"\"Find two numbers from the list that add up to the target\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums=[3, 5, 8, 13, 2, 10]):\n    return nums\nassert f(g())\n",
        "idx_generation": 12,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Determine if there is a subset of nums that adds up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]\n\ndef g():\n    nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 123,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if a list contains at least one prime number.\"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]\n    for num in arr:\n        if num in primes:\n            return True\n    return False\n\ndef g():\n    return [4, 8, 15, 16, 23, 42]\n\nassert f(g())\n",
        "idx_generation": 269,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists three numbers in the list whose product is equal to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] * nums[j] * nums[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [1, 2, 4, 10, 25]\n\nassert f(g())\n\n",
        "idx_generation": 246,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n=5) -> bool:\n    \"\"\"Check if there are at least n consecutive numbers in a list\"\"\"\n    return any(arr[i] == arr[i-1] + 1 == arr[i-2] + 2 == arr[i-3] + 3 == arr[i-4] + 4 for i in range(n, len(arr)))\ndef g(n=5):\n    return [i for i in range(n-1)] + [i for i in range(n)]\nassert f(g())\n",
        "idx_generation": 78,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_length=6) -> bool:\n    \"\"\"Find a word in the list words that has a length equal to the target_length\"\"\"\n    return any(len(word) == target_length for word in words)\ndef g(target_length=6):\n    return ['apple', 'banana', 'cherry', 'date']\nassert f(g())\n",
        "idx_generation": 25,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import *\ndef f(matrix: List[List[int]], n=3, target=15) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of the first column, the sum of the second row, and the sum of the diagonal is the same.\"\"\"\n    first_col_sum = sum(col[0] for col in matrix)\n    second_row_sum = sum(matrix[1])\n    diag_sum = sum(matrix[i][i] for i in range(n))\n    return first_col_sum == second_row_sum == diag_sum == target\ndef g(n=3, target=15):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix\n    assert False, f\"No magic square found for n={n}\"\nassert f(g())\n",
        "idx_generation": 128,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list 'nums' whose sum is equal to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(len(nums)) if i != j))\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 117,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(n: int, result=120) -> bool:\n    \"\"\"Determine if the factorial of n is equal to the target result.\"\"\"\n    return math.factorial(n) == result\ndef g(result=120):\n    n = 5\n    return n\nassert f(g())\n",
        "idx_generation": 134,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, factors: List[int]=[2, 3, 5]) -> bool:\n    \"\"\"Check if any of the given factors are factors of the number n.\n    - n: the number to be checked\n    - factors: list of factors\"\"\"\n    for factor in factors:\n        if n % factor == 0:\n            return True\n    return False\ndef g(n: int, factors: List[int]=[2, 3, 5]):\n    return n * factors[1]\nassert f(g(14))\n\n\n",
        "idx_generation": 196,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Find the smallest positive integer that cannot be expressed as the sum of any two numbers in the list\"\"\"\n    s = set(li)\n    i = 1\n    while True:\n        if i not in s:\n            return i\n        i += 1\ndef g(target=100):\n    return [10, target-10]\nassert f(g())\n",
        "idx_generation": 166,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum=200) -> bool:\n    \"\"\"Check if there exists a subset of numbers from the list whose sum is greater than the target_sum\"\"\"\n    n = len(arr)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[n][target_sum]\n\ndef g(target_sum=200):\n    return list(range(1, target_sum+1))\n\nassert f(g()) == True\n",
        "idx_generation": 74,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: Tuple[int, int, int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies inside a 3D box.\nSolution should be a tuple of the (x,y,z) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y, z = e\n    return (a <= x <= a+c) and (b <= y <= b+c) and (d <= z <= d+c)\ndef g(a=1, b=2, c=10, d=1000):\n    return (a+c, b+c, d+c)\nassert f(g())\n",
        "idx_generation": 323,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the sum of all even numbers in the path must be greater than or equal to the sum of all odd numbers in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, even_sum, odd_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and even_sum >= odd_sum:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if nums[i][j] % 2 == 0:\n            even_sum += nums[i][j]\n        else:\n            odd_sum += nums[i][j]\n        return helper(i+1, j, found_one, even_sum, odd_sum) or helper(i, j+1, found_one, even_sum, odd_sum)\n\n    return helper(0, 0, False, 0, 0)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 374,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='abcdefghi', target='') -> bool:\n    \"\"\"Find the three slice indices that give the specific target in string s\"\"\"\n    (i, j, k) = inds\n    return s[i:j] + s[j:k] == target\n\ndef g(s='abcdefghi', target=''):\n    from itertools import product\n    for (i, j, k) in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j] + s[j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\n\nassert f(g())\n",
        "idx_generation": 176,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\ndef f(x: int, a=25) -> bool:\n    \"\"\"Check if the square root of x is equal to a\"\"\"\n    return sqrt(x) == a\ndef g(a=25):\n    return a**2\nassert f(g())\n",
        "idx_generation": 207,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D matrix of integers.\n    You can only move down or right in the matrix. The path must contain the number 0 at least once and the number 1 exactly once.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    def helper(i, j, found_zero, found_one):\n        if i == rows - 1 and j == cols - 1 and found_one:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if matrix[i][j] == 1:\n            found_one = True\n        if matrix[i][j] == 0:\n            found_zero += 1\n        return helper(i+1, j, found_zero, found_one) or helper(i, j+1, found_zero, found_one)\n\n    return helper(0, 0, 0, False)\n\ndef g(matrix=[[0, 0, 0], [1, 1, 0], [0, 1, 0]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 496,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(x: List[int], target=100) -> bool:\n    \"\"\"Find a triplet of numbers in the list x that sum up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(c) == target for c in combinations(x, 3))\ndef g(target=100):\n    return [10, 20, 30, 40, 50]\nassert f(g())\n",
        "idx_generation": 7,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=7, c=6) -> bool:\n    \"\"\"Find n such that n + a == (the product of the first c integers) * b\"\"\"\n    return n + a == (b ** c) - 1\ndef g(a=3, b=7, c=6):\n    return (b ** c) - a - 1\nassert f(g())\n",
        "idx_generation": 137,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=5, c=20) -> bool:\n    \"\"\"Find n such that n - a is equal to the product of b and the sum of the first c integers\"\"\"\n    return n - a == b * sum([i for i in range(1, c + 1)])\ndef g(a=10, b=5, c=20):\n    return a + b * sum([i for i in range(1, c + 1)])\nassert f(g())\n\n",
        "idx_generation": 261,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Find a pair of numbers from the matrix that add up to the target\"\"\"\n    return any((matrix[i][j] + matrix[k][l] == target) for i in range(len(matrix)) for j in range(len(matrix[i])) for k in range(len(matrix)) for l in range(len(matrix[k])) if (i != k) or (j != l))\ndef g(matrix=[[1, 6, 3], [2, 8, 5], [4, 7, 9]]):\n    return matrix\nassert f(g())\n",
        "idx_generation": 12,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Determine if there exists a subset of numbers in the given array that adds up to the target sum\"\"\"\n    dp = [[False] * (target + 1) for _ in range(len(arr) + 1)]\n    for i in range(len(arr) + 1):\n        dp[i][0] = True\n    for i in range(1, len(arr) + 1):\n        for j in range(1, target + 1):\n            if arr[i-1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i-1]]\n    return dp[len(arr)][target]\n\ndef g(target=100):\n    return [i for i in range(1, target+1)]\n\nassert f(g())\n",
        "idx_generation": 189,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(points: List[Tuple[float, float]], radius: float) -> bool:\n    \"\"\"Check if there exists a point in the list that lies within the given radius\"\"\"\n    return any((math.sqrt((x - 0)**2 + (y - 0)**2) <= radius) for (x, y) in points)\n\ndef g(radius: float):\n    return [(1, 2), (3, 4), (5, 6)], radius\n\nassert f(*g(5.0))\n",
        "idx_generation": 270,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(seq: List[int], target_sum=10) -> bool:\n    \"\"\"Find a subsequence of seq whose sum is greater than or equal to target_sum\"\"\"\n    for i in range(len(seq)):\n        for j in range(i+1, len(seq)+1):\n            if sum(seq[i:j]) >= target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 263,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Determine if the given list contains a subsequence that sums up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]\n\ndef g():\n    nums = [1, 2, 3, 4, 5, 6, 7]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 82,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, s1='apple', s2='orange', count1=3, count2=5) -> bool:\n    \"\"\"Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and starts and ends with the same 5 characters\"\"\"\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[:5] == s[-5:])\ndef g(s1='apple', s2='orange', count1=3, count2=5):\n    if s1 == s2:\n        ans = (s1 + '?') * count1\n    elif s1.count(s2):\n        ans = (s1 + '?') * count1\n        ans += (s2 + '?') * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + '?') * count2\n        ans += (s1 + '?') * (count1 - ans.count(s1))\n    return '?' * 5 + ans + '?' * 5\nassert f(g())\n",
        "idx_generation": 33,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nimport itertools\nfrom typing import*\ndef f(num_list: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k elements in the list whose product is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(math.prod(comb) == target for comb in combinations(num_list, k))\ndef g(k: int = 3):\n    return [2, 3, 4, 5, 6]\nassert f(g(), 120)\n",
        "idx_generation": 148,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], prefix='Mr.', suffix='Jr.') -> bool:\n    \"\"\"Check if all names in the list start with the prefix and end with the suffix\"\"\"\n    return all(name.startswith(prefix) and name.endswith(suffix) for name in names)\n\ndef g(prefix='Mr.', suffix='Jr.'):\n    return [prefix + name + suffix for name in ['John', 'Jane', 'James']]\n\nassert f(g())\n",
        "idx_generation": 119,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nimport math\nfrom typing import*\ndef f(num_list: List[int], target: int, k: int = 4) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k elements in the list whose product is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(math.prod(comb) == target for comb in combinations(num_list, k))\ndef g(k: int = 4):\n    return [1, 2, 3, 4, 5, 6]\nassert f(g(), 120)\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=7, c=20) -> bool:\n    \"\"\"Find n such that n - a == b * (the sum of the first c integers)\"\"\"\n    return n - a == sum([b * i for i in range(c)])\ndef g(a=3, b=7, c=20):\n    return a + sum([b * i for i in range(c)])\nassert f(g())\n",
        "idx_generation": 227,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if any row in the matrix contains the target number.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    matrix.append([10, 11, 12])\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 174,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum=75) -> bool:\n    \"\"\"Check if there exists a subset of numbers from the list whose sum is equal to the target_sum\"\"\"\n    n = len(arr)\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[n][target_sum]\n\ndef g(target_sum=75):\n    return list(range(1, target_sum+1))\n\nassert f(g()) == True\n",
        "idx_generation": 74,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(grid: List[List[int]], k=2) -> bool:\n    \"\"\"Check if there exists a subgrid of size k x k in the grid where all elements are even.\"\"\"\n    for i in range(len(grid) - k + 1):\n        for j in range(len(grid[0]) - k + 1):\n            subgrid = [row[j:j+k] for row in grid[i:i+k]]\n            if all(elem % 2 == 0 for row in subgrid for elem in row):\n                return True\n    return False\n\ndef g(k=2):\n    return [[2, 2, 2, 4, 4],\n            [2, 2, 2, 4, 4],\n            [2, 2, 2, 6, 6],\n            [8, 8, 8, 6, 6],\n            [8, 8, 8, 6, 6]]\n\nassert f(g())\n",
        "idx_generation": 331,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 2 at least once and the number 1 exactly four times.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_two, found_one):\n        if i == rows - 1 and j == cols - 1 and found_two:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one += 1\n            if found_one > 4:\n                return False\n        if nums[i][j] == 2:\n            found_two = True\n        return helper(i+1, j, found_two, found_one) or helper(i, j+1, found_two, found_one)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[2, 0, 0], [1, 2, 0], [0, 1, 2], [1, 0, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 379,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\nfrom typing import List\n\ndef f(emails: List[str], domain='example.com') -> bool:\n    \"\"\"Check if the number of emails in the given list belonging to the specified domain is greater than 2\"\"\"\n    return sum(1 for email in emails if re.search(f\"@{domain}$\", email)) > 2\n\ndef g(domain='example.com'):\n    return [f\"user{i}@{domain}\" for i in range(1, 6)]\n\nassert f(g())\n",
        "idx_generation": 199,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\ndef g(nums=[2, 4, 6, 8, 10]):\n    return nums\nassert f(g())\n",
        "idx_generation": 219,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list whose product is equal to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[2, 4, 6, 8, 10, 12, 14, 16]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 26,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(num_list: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k+1 elements in the list whose sum is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(num_list, k+1))\ndef g(k: int = 3):\n    return [1, 2, 3, 4, 5, 6, 7]\nassert f(g(), 20)\n",
        "idx_generation": 142,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], n=4, s=10) -> bool:\n    \"\"\"Find a list of n positive integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\n\ndef g(n=4, s=10):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\n\nassert f(g())\n",
        "idx_generation": 268,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target number, find any two numbers from the list that add up to the target.\nSample Input:\n[2, 4, 6, 8]\nSample Output:\n[2, 8]\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [2, 8]\n\nassert f(g())\n",
        "idx_generation": 12,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], n=3) -> bool:\n    \"\"\"Check if there exists a subsequence of length n in the list that is in increasing order.\"\"\"\n    return any(numbers[i] < numbers[i+1] for i in range(len(numbers)-n+1))\n\ndef g(n=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 194,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value, where the sum is a perfect square.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if math.isqrt(nums[i] + nums[j]) ** 2 == (nums[i] + nums[j]):\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 273,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n",
        "idx_generation": 277,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Given a list of integers, find whether the list contains a subsequence of length 4 that forms an arithmetic progression.\"\"\"\n    n = len(nums)\n    for i in range(n - 3):\n        diff = nums[i + 1] - nums[i]\n        if nums[i + 2] - nums[i + 1] == diff and nums[i + 3] - nums[i + 2] == diff:\n            return True\n    return False\ndef g():\n    return [1, 3, 5, 7, 2, 4, 6, 8]\nassert f(g())\n",
        "idx_generation": 86,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, words=['apple', 'banana', 'orange', 'grape', 'kiwi', 'melon'], k=4) -> bool:\n    \"\"\"Given a list of words and given an integer k, determine whether there exists two words in the list whose lengths differ by at most k.\"\"\"\n    for i in range(len(words)):\n        for j in range(i+1, len(words)):\n            if abs(len(words[i]) - len(words[j])) <= k:\n                return True\n    return False\ndef g(words=['apple', 'banana', 'orange', 'grape', 'kiwi', 'melon'], k=4):\n    return words\nassert f(g())\n",
        "idx_generation": 39,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(num_list: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k elements in the list whose difference is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(abs(comb[0] - comb[1]) == target for comb in combinations(num_list, k))\ndef g(k: int = 3):\n    return [10, 20, 30, 40, 50]\nassert f(g(), 20)\n",
        "idx_generation": 148,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if a string contains at least n consecutive consonants\"\"\"\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    count = 0\n    for char in s:\n        if char.lower() in consonants:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False\ndef g(n=5):\n    return 'bdcfgh' + 'a' * (n - 6)\nassert f(g())\n",
        "idx_generation": 126,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nimport math\nfrom typing import*\ndef f(num_list: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k elements in the list whose product is divisible by the target number.\"\"\"\n    from itertools import combinations\n    return any(math.prod(comb) % target == 0 for comb in combinations(num_list, k))\ndef g(k: int = 3):\n    return [1, 2, 3, 4, 5, 6]\nassert f(g(), 6)\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=5) -> bool:\n    \"\"\"Check if n is divisible by both a and b, but not their sum.\"\"\"\n    return n % a == 0 and n % b == 0 and n % (a + b) != 0\n\ndef g(a=10, b=5):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 233,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, big_str='hello world', index=6) -> bool:\n    \"\"\"Find a string whose *first* index in big_str is index\"\"\"\n    return big_str.find(s) == index\ndef g(big_str='hello world', index=6):\n    return big_str[index:]\nassert f(g())\n",
        "idx_generation": 180,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target_sum=100) -> bool:\n    \"\"\"Find a subset of numbers from 1 to n whose sum is equal to the target_sum\"\"\"\n    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            if i > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - i]\n    return dp[n][target_sum]\n\ndef g(target_sum=100):\n    return 5050\n\nassert f(g())\n",
        "idx_generation": 76,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(circle: List[int], center_x=0, center_y=0, radius=5) -> bool:\n    \"\"\"Check if a point lies inside a circle.\"\"\"\n    x, y = circle\n    return ((x - center_x) ** 2) + ((y - center_y) ** 2) <= radius ** 2\ndef g(center_x=0, center_y=0, radius=5):\n    return [3, 4]\nassert f(g())\n",
        "idx_generation": 332,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 2 at least once and the number 1 exactly four times.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_two, found_one):\n        if i == rows - 1 and j == cols - 1 and found_two:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one += 1\n            if found_one > 4:\n                return False\n        if nums[i][j] == 2:\n            found_two = True\n        return helper(i+1, j, found_two, found_one) or helper(i, j+1, found_two, found_one)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[2, 0, 0], [1, 2, 0], [0, 1, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 386,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='abcdefghi', target='') -> bool:\n    \"\"\"Find the two slice indices that give the specific target in string s\"\"\"\n    (i, j) = inds\n    return s[i:j] == target\ndef g(s='abcdefghi', target=''):\n    from itertools import product\n    for (i, j) in product(range(-len(s) - 1, len(s) + 1), repeat=2):\n        try:\n            if s[i:j] == target:\n                return [i, j]\n        except (IndexError, ValueError):\n            pass\nassert f(g())\n",
        "idx_generation": 219,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\ndef g(nums=[3, 6, 9, 12, 15]):\n    return nums\nassert f(g())\n",
        "idx_generation": 219,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=2, s=10) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=2, s=10):\n    x = [s - n + 1, 1]\n    return x\nassert f(g())\n",
        "idx_generation": 31,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a combination of three numbers from the list whose sum is equal to the target value.\"\"\"\n    return any((n1 + n2 + n3 == target for i, n1 in enumerate(nums) for j, n2 in enumerate(nums[i+1:]) for n3 in nums[i+j+2:]))\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g())\n",
        "idx_generation": 186,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=1, b=7, c=25) -> bool:\n    \"\"\"Find n such that n + a is equal to the product of b and the sum of the first c prime numbers\"\"\"\n    primes = []\n    num = 2\n    while len(primes) < c:\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                break\n        else:\n            primes.append(num)\n        num += 1\n    return n + a == b * sum(primes)\ndef g(a=1, b=7, c=25):\n    primes = []\n    num = 2\n    while len(primes) < c:\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                break\n        else:\n            primes.append(num)\n        num += 1\n    return -a + b * sum(primes)\nassert f(g())\n",
        "idx_generation": 315,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Check if it is possible to find two numbers in the list whose sum is equal to the target number.\n    - numbers: list of integers\n    - target: target sum\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\ndef g():\n    return [-2, 3, 1, 5, -1]\nassert f(g())\n",
        "idx_generation": 13,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=0) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose difference between the maximum and minimum elements is less than or equal to k\"\"\"\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            subsequence = nums[i:j+1]\n            if max(subsequence) - min(subsequence) <= k:\n                return True\n    return False\n\ndef g(k=0):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 214,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(indices: List[int], string='the quick brown fox jumps over the lazy dog') -> bool:\n    \"\"\"Find the increasing indices that spell out the word 'fox'\"\"\"\n    return indices == sorted(indices) and ''.join((string[i] for i in indices)) == 'fox'\ndef g(string='the quick brown fox jumps over the lazy dog'):\n    target = 'fox'\n    j = 0\n    ans = []\n    for i in range(len(string)):\n        if string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans\nassert f(g())\n",
        "idx_generation": 0,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[3, 5, 7, 11, 13, 17, 19, 23, 29, 31]) -> bool:\n    \"\"\"Find if a number is a prime number in the given list\"\"\"\n    return n in nums\ndef g(nums=[3, 5, 7, 11, 13, 17, 19, 23, 29, 31]):\n    return nums[0]\nassert f(g())\n",
        "idx_generation": 286,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in a list that sum up to the target value.\"\"\"\n    return any((nums[i]+nums[j]+nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))\ndef g(target=100):\n    return [i for i in range(1, 101)]\nassert f(g())\n",
        "idx_generation": 284,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=4, s=15) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=4, s=15):\n    x = [3] * n\n    x[0] = s - 3 * (n-1)\n    return x\nassert f(g())\n",
        "idx_generation": 87,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target value.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\n    \ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 60,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a subsequence in the list that sums up to the target value.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if sum(lst[i:j]) == target:\n                return True\n    return False\n    \ndef g(target=50):\n    return [10, 20, 30, 40, 50]\n    \nassert f(g())\n",
        "idx_generation": 149,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists k consecutive even numbers in the list\"\"\"\n    return any(all(arr[i+j] % 2 == 0 for j in range(k)) for i in range(len(arr)-k+1))\ndef g(k=3):\n    return [2*i for i in range(k)]\nassert f(g())\n",
        "idx_generation": 140,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if there exists a row in the matrix where the sum of its elements is divisible by 3.\"\"\"\n    for row in matrix:\n        if sum(row) % 3 == 0:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(nums: List[int], x=5) -> bool:\n    \"\"\"Check if there exists a subarray in a list whose sum is equal to a given value.\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(nums[i:j]) == x:\n                return True\n    return False\n\ndef g(x=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8]\n\nassert f(g())\n",
        "idx_generation": 291,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose product is divisible by k.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            subseq = nums[i:j]\n            product = 1\n            for num in subseq:\n                product *= num\n            if product % k == 0:\n                return True\n    return False\n\ndef g(k=3):\n    return [i for i in range(1, k+1)]\n\nassert f(g())\n",
        "idx_generation": 180,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a subsequence of the list whose sum is equal to the target\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=5):\n    nums = [1, 2, 3, 4]\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 76,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: List[int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies inside a rectangle.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return a <= x <= a + c and b <= y <= b + d\ndef g(a=1, b=2, c=10, d=1000):\n    return [a, b]\nassert f(g())\n",
        "idx_generation": 370,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers. You can only move down or right in the grid. The path must contain the number 2 at least once, and the sum of all numbers along the path must be divisible by 3.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_two, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_two and path_sum % 3 == 0:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            found_two = True\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_two, path_sum) or helper(i, j+1, found_two, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[2, 1, 1], [3, 2, 1], [1, 3, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 387,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], target_length=5) -> bool:\n    \"\"\"Check if there exists a string in the list that has a length greater than or equal to target_length\"\"\"\n    return any(len(s) >= target_length for s in strings)\ndef g(target_length=5):\n    return ['apple', 'banana', 'cherry', 'date', 'elderberry']\nassert f(g())\n",
        "idx_generation": 328,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, num_sides=6) -> bool:\n    \"\"\"Find n such that the probability of rolling the same number on two dice in a row is near 1/2.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((random.randint(1, num_sides) == random.randint(1, num_sides) for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= num_sides\ndef g(num_sides=6):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)\n    while distinct_prob > 0.5:\n        distinct_prob *= (num_sides - 1) / num_sides\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n    return best[1]\nassert f(g())\n",
        "idx_generation": 256,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, scores=[15, 14, 13, 12, 11, 10, 9, 8], k=1) -> bool:\n    \"\"\"Given a list of non-increasing integers and given an integer k, determine how many positive integers in the list\nare at least as large as the kth.\"\"\"\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return all((s >= scores[k] and s > 0 for s in scores[:n])) and all((s < scores[k] or s <= 0 for s in scores[n:]))\ndef g(scores=[15, 14, 13, 12, 11, 10, 9, 8], k=1):\n    threshold = max(scores[k], 1)\n    return sum((s >= threshold for s in scores))\nassert f(g())\n",
        "idx_generation": 46,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=30) -> bool:\n    \"\"\"Find a list of integers where the sum of any three elements is equal to a target number.\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(len(nums)) for k in range(len(nums)) if i != j and i != k and j != k))\ndef g(target=30):\n    return [10, 20, target - 30]\nassert f(g())\n",
        "idx_generation": 202,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=5, c=10) -> bool:\n    \"\"\"Find n such that n + a == the product of the first c positive odd integers multiplied by b\"\"\"\n    odd_product = 1\n    for i in range(1, 2*c, 2):\n        odd_product *= i\n    return n + a == odd_product * b\n\ndef g(a=3, b=5, c=10):\n    odd_product = 1\n    for i in range(1, 2*c, 2):\n        odd_product *= i\n    return -a + odd_product * b\n\nassert f(g())\n",
        "idx_generation": 325,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list is a sorted list in non-decreasing order. Return True if it is, otherwise return False.\"\"\"\n    for i in range(len(numbers)-1):\n        if numbers[i] > numbers[i+1]:\n            return False\n    return True\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 16,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with a sum greater than zero.\"\"\"\n    prefix_sum = 0\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum > 0:\n            return True\n    return False\n\ndef g():\n    return [-1, 2, -3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 243,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, a=\"racecar\") -> bool:\n    \"\"\"Check if x is a palindrome\"\"\"\n    return x == x[::-1]\ndef g(a=\"racecar\"):\n    return a\nassert f(g())\n",
        "idx_generation": 17,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> int:\n    \"\"\"Find the maximum product of any three numbers in a given list of integers.\"\"\"\n    arr.sort()\n    n = len(arr)\n    return max(arr[0] * arr[1] * arr[n-1], arr[n-1] * arr[n-2] * arr[n-3])\n\ndef g():\n    return [2, 4, 3, 1, 5, 6, -1, 0]\n\nassert f(g()) == 120\n",
        "idx_generation": 294,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(nums=[5, 10, 15, 20, 25]):\n    return nums\nassert f(g())\n",
        "idx_generation": 287,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=6, s=30) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=6, s=30):\n    x = [5] * n\n    x[0] = s - 5 * (n-1)\n    return x\nassert f(g())\n",
        "idx_generation": 87,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nimport random\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Determine if it is possible to split the given list of integers into two sublists, \n       such that the sums of the two sublists are equal and each sublist contains only unique values.\"\"\"\n    for i in range(2, len(nums)):\n        for comb in itertools.combinations(nums, i):\n            if sum(comb) == target and len(set(comb)) == len(comb):\n                return True\n    return False\n\ndef g():\n    nums = [random.randint(1, 50) for _ in range(10)]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 60,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], n=3) -> bool:\n    \"\"\"Check if there exists a subsequence in the list with exactly n distinct numbers.\"\"\"\n    subsequences = []\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums) + 1):\n            subsequence = nums[i:j]\n            if len(set(subsequence)) == n:\n                subsequences.append(subsequence)\n    return len(subsequences) > 0\n\ndef g(n=3):\n    return [i for i in range(1, n + 1)]\n\nassert f(g())\n",
        "idx_generation": 155,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if the product of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] * nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_sum=10):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n",
        "idx_generation": 144,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=14, b=50, c=47) -> bool:\n    \"\"\"Find n such that n + a is divisible by the sum of the first c integers multiplied by b\"\"\"\n    return (n + a) % (sum([i for i in range(c+1)]) * b) == 0\ndef g(a=14, b=50, c=47):\n    return (sum([i for i in range(c+1)]) * b) - a\nassert f(g())\n",
        "idx_generation": 151,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that multiply to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if num != 0 and target % num == 0 and target // num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6]\n    return nums\nassert f(g())\n",
        "idx_generation": 301,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [-2, -3, 5, 1, 6]\n\nassert f(g())\n",
        "idx_generation": 186,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Determine if the given list contains a subsequence that sums up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]\n\ndef g():\n    nums = [2, 4, 6, 8, 10]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 78,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: List[int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies inside a circle.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return ((x - a) ** 2) + ((y - b) ** 2) <= (c ** 2)\ndef g(a=1, b=2, c=10, d=1000):\n    return [a, b]\nassert f(g())\n",
        "idx_generation": 370,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and every number in the path must be odd.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one):\n        if i == rows - 1 and j == cols - 1 and found_one:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if nums[i][j] % 2 == 0:\n            return False\n        return helper(i+1, j, found_one) or helper(i, j+1, found_one)\n\n    return helper(0, 0, False)\n\ndef g(nums=[[1, 0, 0], [3, 5, 0], [0, 7, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 389,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, big_str='fatextemedyrotichipicecojon', index=24) -> bool:\n    \"\"\"Check if the string s is present in big_str starting from index\"\"\"\n    return s in big_str[index:]\ndef g(big_str='fatextemedyrotichipicecojon', index=24):\n    return big_str[index:]\nassert f(g())\n",
        "idx_generation": 356,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=30) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target\"\"\"\n    def subset_sum(arr, target):\n        if target == 0:\n            return True\n        if not arr or target < 0:\n            return False\n        return subset_sum(arr[1:], target - arr[0]) or subset_sum(arr[1:], target)\n    return subset_sum(arr, target)\n\ndef g(arr=[5, 10, 15, 20, 25]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 306,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(arr: List[int], target=24) -> bool:\n    \"\"\"Find a combination of four numbers from a given list that evaluates to a given target\"\"\"\n    for comb in itertools.combinations(arr, 4):\n        if sum(comb) == target:\n            return True\n    return False\ndef g(target=24):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 47,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=9, c=15) -> bool:\n    \"\"\"Find n such that n // a == b * (the sum of the first c integers)\"\"\"\n    return n // a == sum([b * i for i in range(c)])\ndef g(a=3, b=9, c=15):\n    return a * sum([b * i for i in range(c)])\nassert f(g())\n",
        "idx_generation": 215,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/4.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 1/4) ** 2 <= year_len\ndef g(year_len=365):\n    n = 1\n    distinct_prob = 1.0\n    best = (1/4, 1)\n    while distinct_prob > 1/4:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(1/4 - distinct_prob), n))\n    return best[1]\nassert f(g())\n",
        "idx_generation": 329,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list is a sorted list in non-increasing order. Return True if it is, otherwise return False.\"\"\"\n    for i in range(len(numbers)-1):\n        if numbers[i] < numbers[i+1]:\n            return False\n    return True\n\ndef g():\n    return [5, 4, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 24,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=30) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=30):\n    return [3, 6, 9, 12, 15, 18, 21, 24]\n\nassert f(g())\n",
        "idx_generation": 289,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Determine if a given string is a palindrome.\"\"\"\n    return s == s[::-1]\ndef g():\n    return \"racecar\"\nassert f(g())\n",
        "idx_generation": 21,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=12, b=4, c=15) -> bool:\n    \"\"\"Find n such that n + a is equal to the product of b and the sum of the first c prime numbers\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    return n + a == b * sum(primes[:c])\ndef g(a=12, b=4, c=15):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    return -a + b * sum(primes[:c])\nassert f(g())\n",
        "idx_generation": 299,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a product equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 290,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose sum is divisible by k.\"\"\"\n    dp = [0] * k\n    dp[0] = 1\n    prefix_sum = 0\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        dp[prefix_sum] += 1\n    return dp[0] > 1 or any(count >= 2 for count in dp[1:])\n\ndef g(k=3):\n    return [i for i in range(1, k+1)]\n\nassert f(g())\n",
        "idx_generation": 89,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], target='puzzle') -> bool:\n    \"\"\"Given a list of strings and a target string, determine if there exists a string in the list that is an anagram of the target string.\"\"\"\n    for string in strings:\n        if sorted(string) == sorted(target):\n            return True\n    return False\n\ndef g(strings=['puzzle', 'lzzupe', 'uzelpl', 'zlpel']):\n    return strings\n\nassert f(g())\n",
        "idx_generation": 69,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(arr: List[int], target=100, n=3) -> bool:\n    \"\"\"Check if there exists a combination of n numbers in the list that sum up to the target\"\"\"\n    from itertools import combinations\n    for combo in combinations(arr, n):\n        if sum(combo) == target:\n            return True\n    return False\n\ndef g(target=100, n=3):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n\nassert f(g())\n",
        "idx_generation": 159,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=20) -> bool:\n    \"\"\"Check if any pair of numbers in the list sums up to the target sum\"\"\"\n    return any((numbers[i] + numbers[j] == target_sum) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target_sum=20):\n    numbers = [10, 5, 15, 7, 3, 8]\n    return numbers\nassert f(g())\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there is a number in the list that is divisible by both 2 and 3.\"\"\"\n    return any((num % 2 == 0 and num % 3 == 0 for num in nums))\n\ndef g():\n    return [2, 4, 6, 8, 9, 12]\n\nassert f(g())\n",
        "idx_generation": 163,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False\n\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 315,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a number in the list that is greater than the target value.\"\"\"\n    return any(num > target for num in nums)\n\ndef g():\n    return [5, 7, 9, 11]\n\nassert f(g())\n",
        "idx_generation": 190,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Determine if the given list contains a subsequence that sums up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]\n\ndef g():\n    nums = [3, 6, 9, 12, 15]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 78,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=6) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == (m*n - 1)//2\ndef g(m=5, n=6):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == (m*n - 1)//2:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 380,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]], max_steps=5) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down, right, or diagonally (down-right) in the grid. The path must contain the number 1 at least once and the number of steps taken to reach the bottom-right corner must be less than or equal to the max_steps.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, steps):\n        if i == rows - 1 and j == cols - 1 and found_one and steps <= max_steps:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        return helper(i+1, j, found_one, steps+1) or helper(i, j+1, found_one, steps+1) or helper(i+1, j+1, found_one, steps+1)\n\n    return helper(0, 0, False, 1)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 396,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abcde') -> bool:\n    \"\"\"Check if the substring is present in the string\"\"\"\n    return substring in string\n\ndef g(substring='abcde'):\n    string = 'abcdefghijklmnopqrstuvwxyz'\n    return string\n\nassert f(g())\n",
        "idx_generation": 367,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(res: int, n=1) -> bool:\n    \"\"\"Find the sum of the first n Fibonacci numbers.\"\"\"\n    fib_sequence = [0, 1]\n    for i in range(2, n):\n        fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2])\n    return res == sum(fib_sequence[:n])\ndef g(n=1):\n    fib_sequence = [0, 1]\n    for i in range(2, n):\n        fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2])\n    return sum(fib_sequence[:n])\nassert f(g())\n",
        "idx_generation": 339,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=5, s=25) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=5, s=25):\n    x = [s - n + 1, 1, 1, 1, 1]\n    return x\nassert f(g())\n",
        "idx_generation": 63,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=12) -> bool:\n    \"\"\"Check if it is possible to find a combination of numbers that adds up to the target number.\"\"\"\n    def helper(numbers, target):\n        if target == 0:\n            return True\n        if target < 0 or len(numbers) == 0:\n            return False\n        if target - numbers[0] >= 0:\n            return helper(numbers[1:], target - numbers[0]) or helper(numbers[1:], target)\n        else:\n            return helper(numbers[1:], target)\n    return helper(numbers, target)\n\ndef g():\n    return [2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 278,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\n\ndef g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 329,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Find a pair of numbers in the list numbers that sum up to the target_sum.\"\"\"\n    return any((x + y) == target_sum for x in numbers for y in numbers)\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 26,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=30) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 331,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(i: int, li=[-68, 81, 13, -5, 81, 75, -3, -73, -89, 72], target=13) -> bool:\n    \"\"\"Check if the value at index i in the list is equal to the target value.\"\"\"\n    return li[i] == target\ndef g(li=[-68, 81, 13, -5, 81, 75, -3, -73, -89, 72], target=13):\n    return li.index(target)\nassert f(g())\n",
        "idx_generation": 49,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=20, b=2, c=8) -> bool:\n    \"\"\"Find n such that n + a is equal to the product of b and the sum of the squares of the first c positive integers\"\"\"\n    return n + a == b * sum([i**2 for i in range(1, c+1)])\ndef g(a=20, b=2, c=8):\n    return -a + b * sum([i**2 for i in range(1, c+1)])\nassert f(g())\n",
        "idx_generation": 299,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(n: int, words=['apple', 'banana', 'orange', 'grape', 'kiwi', 'melon'], k=5) -> bool:\n    \"\"\"Given a list of words and given an integer k, determine whether there exists two words in the list whose lengths differ by at most k.\"\"\"\n    for i in range(len(words)):\n        for j in range(i+1, len(words)):\n            if abs(len(words[i]) - len(words[j])) <= k:\n                return True\n    return False\ndef g(words=['apple', 'banana', 'orange', 'grape', 'kiwi', 'melon'], k=5):\n    return words\nassert f(g())\n",
        "idx_generation": 300,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(squares: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Position min(m, n) <= 5 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\n\ndef g(m=5, n=5):\n    k = min(m, n)\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len({t for (i, j) in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for (i, j) in enumerate(p)]\n\nassert f(g())\n",
        "idx_generation": 95,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Find a string that contains all the substrings in any order\"\"\"\n    return all((sub in s for sub in substrings))\ndef g(substrings=['apple', 'banana', 'cherry']):\n    return ''.join(substrings)\nassert f(g())\n",
        "idx_generation": 74,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5, c='a') -> bool:\n    \"\"\"Check if the character c appears n times consecutively in the given string s\"\"\"\n    return s.count(c * n) > 0\ndef g(n=5, c='a'):\n    return c * n\nassert f(g())\n",
        "idx_generation": 166,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], x=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose length is divisible by x.\"\"\"\n    if len(nums) % x == 0:\n        return True\n    return False\n\ndef g(x=5):\n    return [i for i in range(1, x+1)]\n\nassert f(g())\n",
        "idx_generation": 151,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose product is divisible by k.\"\"\"\n    prefix_product = 1\n    remainders = {1}\n    for num in nums:\n        prefix_product = (prefix_product * num) % k\n        if prefix_product in remainders:\n            return True\n        remainders.add(prefix_product)\n    return False\n\ndef g(k=5):\n    return [i**2 for i in range(1, k+1)]\n\nassert f(g())\n",
        "idx_generation": 166,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Check if the sum of all numbers in a list is equal to the target_sum\"\"\"\n    return sum(numbers) == target_sum\n\ndef g(target_sum=100):\n    return [10, 20, 30, 40]\n\nassert f(g())\n",
        "idx_generation": 340,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=500) -> bool:\n    \"\"\"Check if there is a pair of numbers in arr that multiply to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] == target:\n                return True\n    return False\n\ndef g(target=500):\n    arr = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return arr\n\nassert f(g())\n",
        "idx_generation": 196,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Determine if the given list contains a subsequence that sums up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]\n\ndef g():\n    nums = [2, 4, 6, 8, 10, 12]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 82,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 2 exactly twice and the number 1 exactly once.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_two, found_one):\n        if i == rows - 1 and j == cols - 1 and found_two:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one += 1\n            if found_one > 1:\n                return False\n        if nums[i][j] == 2:\n            found_two += 1\n            if found_two > 2:\n                return False\n        return helper(i+1, j, found_two, found_one) or helper(i, j+1, found_two, found_one)\n\n    return helper(0, 0, 0, 0)\n\ndef g(nums=[[2, 0, 0], [1, 2, 0], [0, 1, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 386,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the product of all even numbers in the path must be greater than the sum of all odd numbers in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, even_prod, odd_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and even_prod > odd_sum:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if nums[i][j] % 2 == 0:\n            even_prod *= nums[i][j]\n        else:\n            odd_sum += nums[i][j]\n        return helper(i+1, j, found_one, even_prod, odd_sum) or helper(i, j+1, found_one, even_prod, odd_sum)\n\n    return helper(0, 0, False, 1, 0)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 401,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string s is a palindrome and has length n.\"\"\"\n    return s == s[::-1] and len(s) == n\ndef g(n=3):\n    return \"aba\"[:n]\nassert f(g())\n",
        "idx_generation": 376,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and every number in the path must be a perfect square.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one):\n        if i == rows - 1 and j == cols - 1 and found_one:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if not is_perfect_square(nums[i][j]):\n            return False\n        return helper(i+1, j, found_one) or helper(i, j+1, found_one)\n\n    return helper(0, 0, False)\n\ndef g(nums=[[1, 0, 0], [4, 9, 0], [0, 16, 1]]):\n    return nums\n\ndef is_perfect_square(n):\n    return int(n**0.5) ** 2 == n\n\nassert f(g())\n",
        "idx_generation": 359,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], n=4, s=30) -> bool:\n    \"\"\"Check if the given list of integers satisfies the conditions.\nThe list should contain n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a >= 0 for a in x])\n\ndef g(n=4, s=30):\n    x = [s // n] * n\n    remainder = s % n\n    for i in range(remainder):\n        x[i] += 1\n    return x\n\nassert f(g())\n",
        "idx_generation": 67,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=15) -> bool:\n    \"\"\"Check if it is possible to find a combination of numbers that divides the target number.\"\"\"\n    def helper(numbers, target):\n        if target == 1:\n            return True\n        if target <= 0 or len(numbers) == 0:\n            return False\n        if numbers[0] != 0 and target % numbers[0] == 0:\n            return helper(numbers[1:], target // numbers[0]) or helper(numbers[1:], target)\n        else:\n            return helper(numbers[1:], target)\n    return helper(numbers, target)\n\ndef g():\n    return [2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 278,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of three people having the same birthday in a group of n is near 1/2.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 1/2) ** 2 <= year_len\ndef g(year_len=365):\n    n = 1\n    distinct_prob = 1.0\n    best = (1/2, 1)\n    while distinct_prob > 1/2:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(1/2 - distinct_prob), n))\n    return best[1]\nassert f(g())\n",
        "idx_generation": 337,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target value and are divisible by 5\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if (li[i] + li[j]) % 5 == 0 and li[i] + li[j] == target:\n                return True\n    return False\ndef g(target=100):\n    return [50, target-50]\nassert f(g())\n",
        "idx_generation": 30,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Determine if a target number exists in a 2D matrix. The matrix is sorted in non-decreasing order from left to right and top to bottom.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    def binary_search(row: int, target: int) -> bool:\n        left = 0\n        right = cols - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if matrix[row][mid] == target:\n                return True\n            elif matrix[row][mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False\n\n    for i in range(rows):\n        if matrix[i][0] <= target <= matrix[i][cols-1]:\n            if binary_search(i, target):\n                return True\n    return False\n\ndef g(matrix=[[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50]], target=30):\n    return matrix, target\n\nassert f(*g())\n",
        "idx_generation": 337,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, words=['dog', 'cat', 'bird', 'elephant']) -> bool:\n    \"\"\"Given a string and a list of words, determine if the string can be formed by concatenating the words in the list.\n    Each word in the list can be used only once.\"\"\"\n    word_count = {}\n    for word in words:\n        if word not in word_count:\n            word_count[word] = 0\n        word_count[word] += 1\n\n    i = 0\n    while i < len(string):\n        found_word = False\n        for word in word_count:\n            if string[i:i+len(word)] == word:\n                if word_count[word] > 0:\n                    word_count[word] -= 1\n                    i += len(word)\n                    found_word = True\n                    break\n        if not found_word:\n            return False\n\n    for count in word_count.values():\n        if count > 0:\n            return False\n\n    return True\n\ndef g(words=['dog', 'cat', 'bird', 'elephant']):\n    return ''.join(words)\n\nassert f(g())\n",
        "idx_generation": 55,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import factorial\n\ndef f(n: int, a=6) -> bool:\n    \"\"\"Check if n is a factorial of a\"\"\"\n    return factorial(a) == n\n\ndef g(a=6):\n    return factorial(a)\n\nassert f(g())\n",
        "idx_generation": 341,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(target=10):\n    return [i for i in range(target)]\n\nassert f(g())\n",
        "idx_generation": 304,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], n: int) -> bool:\n    \"\"\"Check if the sum of any n consecutive numbers in the list is divisible by n.\"\"\"\n    for i in range(len(numbers) - n + 1):\n        if sum(numbers[i:i+n]) % n == 0:\n            return True\n    return False\n\ndef g(numbers: List[int]):\n    return numbers\n\nassert f(g([1, 2, 3, 4, 5]), n=3)\n",
        "idx_generation": 102,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the list whose sum is divisible by 3.\"\"\"\n    n = len(arr)\n    for i in range(n - k + 1):\n        subarray = arr[i:i+k]\n        if sum(subarray) % 3 == 0:\n            return True\n    return False\n\ndef g(k=3):\n    return [i for i in range(1, 2*k+1)]\n\nassert f(g())\n",
        "idx_generation": 86,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=2) -> bool:\n    \"\"\"Check if the given string contains the target number of consecutive consonants.\"\"\"\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    count = 0\n    for i in range(len(s)):\n        if s[i] in consonants:\n            count += 1\n            if count == target:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(target=2):\n    return \"bcdfghjklmnpqrstvwxyz\" * target\n\nassert f(g())\n",
        "idx_generation": 174,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], x=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose maximum value is divisible by x.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if max(nums[i:j]) % x == 0:\n                return True\n    return False\n\ndef g(x=5):\n    return [i for i in range(1, x+1)]\n\nassert f(g())\n\n",
        "idx_generation": 169,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\ndef f(n: int, lst=[1, 4, 9, 16, 25, 36, 49, 64], k=2) -> bool:\n    \"\"\"Given a list of integers and an integer k, determine if there are at least n integers in the list that are perfect squares.\"\"\"\n    return sum((1 for num in lst if sqrt(num).is_integer())) >= n\ndef g(lst=[1, 4, 9, 16, 25, 36, 49, 64], k=2):\n    return len([num for num in lst if sqrt(num).is_integer()])\nassert f(g())\n",
        "idx_generation": 173,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], n=3) -> bool:\n    \"\"\"Check if the sum of the first n elements in the list equals the product of the remaining elements.\"\"\"\n    return sum(nums[:n]) == 0 and all(nums[n:]) and len(nums) >= n + 1\ndef g(n=3):\n    return [0] * n + [1]\n\nassert f(g())\n",
        "idx_generation": 345,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a diagonal matrix\"\"\"\n    return all((matrix[i][j] == 0 for i in range(len(matrix)) for j in range(len(matrix)) if i != j))\ndef g():\n    matrix = [[1, 0, 0], [0, 4, 0], [0, 0, 6]]\n    return matrix\nassert f(g())\n",
        "idx_generation": 197,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=30) -> bool:\n    \"\"\"Determine if the given list contains a subsequence that sums up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]\n\ndef g():\n    nums = [5, 10, 15, 20, 25, 30]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 82,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == (m*n - 1)//2\ndef g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == (m*n - 1)//2:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 389,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the maximum number in the path must be greater than or equal to the sum of all other numbers in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, max_num, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and max_num >= path_sum - max_num:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        max_num = max(max_num, nums[i][j])\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_one, max_num, path_sum) or helper(i, j+1, found_one, max_num, path_sum)\n\n    return helper(0, 0, False, float('-inf'), 0)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 404,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Check if the target word can be formed by concatenating words from the given list\"\"\"\n    def can_form_word(word, words):\n        if word == '':\n            return True\n        for i in range(1, len(word) + 1):\n            if word[:i] in words and can_form_word(word[i:], words):\n                return True\n        return False\n    return can_form_word(target, words)\n\ndef g(words=['py', 'th', 'on']):\n    return words\n\nassert f(g())\n",
        "idx_generation": 480,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, max_num=1000) -> bool:\n    \"\"\"Find n such that the sum of all numbers from 1 to n is a multiple of max_num\"\"\"\n    return sum(range(1, n+1)) % max_num == 0\ndef g(max_num=1000):\n    n = 1\n    while True:\n        if sum(range(1, n+1)) % max_num == 0:\n            return n\n        n += 1\nassert f(g())\n",
        "idx_generation": 365,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(moves: List[List[int]], initial_state=[2, 5, 3, 7, 0]) -> bool:\n    \"\"\"Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\nremoving one or more objects from a single non-empty heap. The player who takes the last object wins.\n- initial_state is list of numbers of objects in each heap\n- moves is a list of your moves: [heap, number of objects to take]\n- you play first\"\"\"\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state=[2, 5, 3, 7, 0]):\n    state = initial_state[:]\n    moves = []\n    def bot_move():\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    def losing(h):\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g())",
        "idx_generation": 67,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=100) -> bool:\n    \"\"\"Given a list of numbers, find a combination of numbers that adds up to the target number.\"\"\"\n    def helper(arr, target, path):\n        if target == 0:\n            return True\n        if target < 0:\n            return False\n        for i in range(len(arr)):\n            if helper(arr[i+1:], target-arr[i], path + [arr[i]]):\n                return True\n        return False\n\n    return helper(n, target, [])\n\ndef g(target=100):\n    return [i for i in range(1, target + 1)]\n\nassert f(g())\n",
        "idx_generation": 287,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of four people having the same birthday in a group of n is near 1/8.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 1/8) ** 2 <= year_len\ndef g(year_len=365):\n    n = 1\n    distinct_prob = 1.0\n    best = (1/8, 1)\n    while distinct_prob > 1/8:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(1/8 - distinct_prob), n))\n    return best[1]\nassert f(g())\n",
        "idx_generation": 337,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Check if any two numbers in the list add up to the target_sum\"\"\"\n    return any((numbers[i] + numbers[j] == target_sum for i in range(len(numbers)) for j in range(i+1, len(numbers))))\ndef g(target_sum=100):\n    return [10, 20, 30, 40, 50, 60]\nassert f(g())\n",
        "idx_generation": 35,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=50) -> bool:\n    \"\"\"Check if there exists a combination of numbers whose sum is equal to the target sum\"\"\"\n    def number_combination(numbers, target_sum):\n        if target_sum == 0:\n            return True\n        if not numbers or target_sum < 0:\n            return False\n        return number_combination(numbers[1:], target_sum - numbers[0]) or number_combination(numbers[1:], target_sum)\n    return number_combination(numbers, target_sum)\n\ndef g(numbers=[5, 10, 15, 20, 25]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 352,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(substrings: List[str], s='world', count=10) -> bool:\n    \"\"\"Find a list of >= count distinct strings that are all contained in s\"\"\"\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s='world', count=10):\n    return [''] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g())\n",
        "idx_generation": 63,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=7) -> bool:\n    \"\"\"Check if n is divisible by a prime number\"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return n % a == 0 and a in primes\n\ndef g(a=7):\n    return a * 3\n\nassert f(g())\n",
        "idx_generation": 348,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], a=-10, s=2, e=20) -> bool:\n    \"\"\"Check if the list is a permutation of a given arithmetic sequence.\"\"\"\n    return sorted(x) == list(range(a, e + 1, s))\ndef g(a=-10, s=2, e=20):\n    return list(range(a, e + 1, s))\nassert f(g())\n",
        "idx_generation": 316,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=12):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 103,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string contains a substring that appears exactly n times.\"\"\"\n    count = s.count(s[:n])\n    return count == n\ndef g(n=3):\n    return 'abcabcabc'\nassert f(g())\n",
        "idx_generation": 89,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target_sum=5) -> bool:\n    \"\"\"Check if the sum of any three numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\n\ndef g(target_sum=5):\n    return [n for n in range(target_sum+1)]\n\nassert f(g())\n",
        "idx_generation": 176,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if the difference between any two numbers in the list is equal to target_sum\"\"\"\n    return any(abs(nums[i] - nums[j]) == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_sum=10):\n    return [n for n in range(target_sum+1)]\n\nassert f(g())\n",
        "idx_generation": 182,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target value.\"\"\"\n    prefixes = set([0])\n    curr_sum = 0\n\n    for num in nums:\n        curr_sum += num\n        if curr_sum - target in prefixes:\n            return True\n        prefixes.add(curr_sum)\n\n    return False\n\ndef g(target=0):\n    nums = [-1, 2, 3, -4, 5, 2, -2]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 200,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=10) -> bool:\n    \"\"\"Check if n is a power of a and a is a factor of b\"\"\"\n    return n == a ** int(n ** 0.5) and b % a == 0\n\ndef g(a=2, b=10):\n    return a ** 4\n\nassert f(g())\n",
        "idx_generation": 348,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of integers in the list such that their sum is equal to the target value.\"\"\"\n    complements = set()\n\n    for num in arr:\n        if num in complements:\n            return True\n        complements.add(target - num)\n\n    return False\n\ndef g(target=10):\n    arr = [random.randint(1, 9) for _ in range(10)]\n    return arr\n\nassert f(g())\n",
        "idx_generation": 200,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=5):\n    return [math.factorial(i) for i in range(1, k+1)]\n\nassert f(g())\n",
        "idx_generation": 93,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(grid: List[List[int]], k=2) -> bool:\n    \"\"\"Check if there exists a subgrid of size k x k in the grid where all elements are greater than or equal to k.\"\"\"\n    for i in range(len(grid) - k + 1):\n        for j in range(len(grid[0]) - k + 1):\n            subgrid = [row[j:j+k] for row in grid[i:i+k]]\n            if all(elem >= k for row in subgrid for elem in row):\n                return True\n    return False\n\ndef g(k=2):\n    return [[2, 2, 2, 2, 2],\n            [2, 2, 2, 2, 2],\n            [2, 2, 2, 2, 2],\n            [2, 2, 2, 2, 2],\n            [2, 2, 2, 2, 2]]\n\nassert f(g())\n\n",
        "idx_generation": 408,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers. You can only move down or right in the grid. The path must contain the number 2 at least once and the sum of all numbers along the path must be a multiple of 4.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def is_multiple_of_four(n):\n        return n % 4 == 0\n\n    def helper(i, j, found_two, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_two and is_multiple_of_four(path_sum):\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            found_two = True\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_two, path_sum) or helper(i, j+1, found_two, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[2, 1, 1], [3, 2, 1], [1, 3, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 409,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], target='challenge') -> bool:\n    \"\"\"Check if the target word can be formed by concatenating words from the given list\"\"\"\n    def can_form_word(word, words):\n        if word == '':\n            return True\n        for i in range(1, len(word) + 1):\n            if word[:i] in words and can_form_word(word[i:], words):\n                return True\n        return False\n    return can_form_word(target, words)\n\ndef g(words=['ch', 'al', 'len', 'ge']):\n    return words\n\nassert f(g())\n",
        "idx_generation": 485,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, divisor=7) -> bool:\n    \"\"\"Find n such that the sum of all numbers from 1 to n is divisible by a specific divisor\"\"\"\n    return sum(range(1, n+1)) % divisor == 0\ndef g(divisor=7):\n    n = 1\n    while True:\n        if sum(range(1, n+1)) % divisor == 0:\n            return n\n        n += 1\nassert f(g())\n",
        "idx_generation": 365,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(inds: List[int], nums=[4, 3, 2, 5, 6, 8, 7, 1, 0, 9]) -> bool:\n    \"\"\"Check if the sum of the numbers at the given indices is greater than 10\"\"\"\n    return sum((nums[i] for i in inds)) > 10\ndef g(nums=[4, 3, 2, 5, 6, 8, 7, 1, 0, 9]):\n    return [i for i,v in enumerate(nums) if v > 5]\nassert f(g())\n",
        "idx_generation": 96,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\n\ndef g(nums=[5, 10, 15, 20, 25, 30, 35, 40, 45]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 329,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose sum is equal to the target number\"\"\"\n    for r in range(1, len(nums) + 1):\n        for subset in itertools.combinations(nums, r):\n            if sum(subset) == target:\n                return True\n    return False\n\ndef g(target: int):\n    return [1, 3, 5, 7, 9], target\n\nassert f(*g(10))\n",
        "idx_generation": 342,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=15) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any((numbers[i] + numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target=15):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return numbers\nassert f(g())\n",
        "idx_generation": 35,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, letter_count={'a': 1, 'b': 2, 'c': 3}) -> bool:\n    \"\"\"Check if the given word contains all the letters specified in letter_count\"\"\"\n    return all(letter in word for letter in letter_count.keys())\ndef g(letter_count={'a': 1, 'b': 2, 'c': 3}):\n    return ''.join([letter * count for letter, count in letter_count.items()])\nassert f(g())\n",
        "idx_generation": 361,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='') -> bool:\n    \"\"\"Check if any word in the list words starts with the given prefix.\"\"\"\n    for word in words:\n        if word.startswith(prefix):\n            return True\n    return False\n\ndef g(words: List[str]):\n    return words\n\nassert f(g(['apple', 'banana', 'cherry']), prefix='b')\n",
        "idx_generation": 75,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=10) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=10):\n    return [i**3 for i in range(1, k+1)]\n\nassert f(g())\n",
        "idx_generation": 352,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find if there exists three numbers in the list whose sum is equal to the target sum\"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1,len(nums)-1):\n            for k in range(j+1,len(nums)):\n                if nums[i]+nums[j]+nums[k]==target:\n                    return True\n    return False\n\ndef g(target=15):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=100) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=100):\n    return [i**2 for i in range(1, k+1)]\n\nassert f(g())\n",
        "idx_generation": 104,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(s: str, n=4) -> bool:\n    \"\"\"Check if the given string contains any duplicate characters.\n    Solution should be a boolean value: True if the string contains duplicates, False otherwise.\"\"\"\n    return len(set(s)) < len(s)\n\ndef g(n=4):\n    return \"abcd\" * n\n\nassert f(g())\n",
        "idx_generation": 90,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Check if a given 2D matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    n = len(nums)\n    target = sum(nums[0])\n    \n    # Check rows\n    for row in nums:\n        if sum(row) != target:\n            return False\n    \n    # Check columns\n    for col in range(n):\n        if sum(nums[i][col] for i in range(n)) != target:\n            return False\n    \n    # Check diagonals\n    diag1 = sum(nums[i][i] for i in range(n))\n    diag2 = sum(nums[i][n-i-1] for i in range(n))\n    if diag1 != target or diag2 != target:\n        return False\n    \n    return True\n\n\ndef g():\n    from itertools import permutations\n    possible_nums = list(range(1, 10))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+3] for i in range(0, 9, 3)]\n        if f(matrix):\n            return matrix\n    assert False, \"No magic square found\"\n\nassert f(g())\n",
        "idx_generation": 206,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target_sum=20) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_sum=20):\n    return [n for n in range(target_sum+1)]\n\nassert f(g())\n",
        "idx_generation": 191,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=5) -> bool:\n    \"\"\"Check if the given matrix is a square matrix of size n x n and if the sum of all elements in the matrix is divisible by n.\"\"\"\n    return all(len(row) == n for row in matrix) and len(matrix) == n and sum(sum(row) for row in matrix) % n == 0\ndef g(n=5):\n    return [[1] * n for _ in range(n)]\nassert f(g())\n",
        "idx_generation": 217,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=5) -> bool:\n    \"\"\"Check if a number is divisible by k.\"\"\"\n    return n % k == 0\ndef g(k=5):\n    return k ** 2\nassert f(g())\n\n\n",
        "idx_generation": 371,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=5) -> bool:\n    \"\"\"Check if the given matrix is a square matrix of size n x n.\"\"\"\n    return all(len(row) == n for row in matrix) and len(matrix) == n\ndef g(n=5):\n    return [[1] * n for _ in range(n)]\nassert f(g())\n",
        "idx_generation": 213,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Determine if the given list contains a subsequence that sums up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]\n\ndef g():\n    nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 123,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(grid: List[List[int]], n=3) -> bool:\n    \"\"\"Check if there exists a subgrid of size n x n in the grid where the product of its elements is divisible by n.\"\"\"\n    for i in range(len(grid) - n + 1):\n        for j in range(len(grid[0]) - n + 1):\n            subgrid = [row[j:j+n] for row in grid[i:i+n]]\n            product = 1\n            for row in subgrid:\n                for element in row:\n                    product *= element\n            if product % n == 0:\n                return True\n    return False\n\ndef g(n=3):\n    return [[1, 2, 3, 4, 5],\n            [6, 7, 8, 9, 10],\n            [11, 12, 13, 14, 15],\n            [16, 17, 18, 19, 20],\n            [21, 22, 23, 24, 25]]\n\nassert f(g())\n",
        "idx_generation": 411,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers. You can only move down or right in the grid. The path must contain the number 2 at least once and the sum of all numbers along the path must be a perfect square.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def is_perfect_square(n):\n        return n ** 0.5 == int(n ** 0.5)\n\n    def helper(i, j, found_two, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_two and is_perfect_square(path_sum):\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            found_two = True\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_two, path_sum) or helper(i, j+1, found_two, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[2, 1, 1], [3, 2, 1], [1, 3, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 409,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if the sum of the digits of n is equal to the sum of the digits of m\"\"\"\n    sum_n = sum(int(x) for x in str(n))\n    sum_m = sum(int(x) for x in str(m))\n    return sum_n == sum_m\n\ndef g():\n    return 1234, 4321\n\nassert f(*g())\n",
        "idx_generation": 496,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the product of all numbers in the list is divisible by n\"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n    return product % n == 0\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[0]\nassert f(g())\n",
        "idx_generation": 382,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=42) -> bool:\n    \"\"\"Find a combination of numbers that adds up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for r in range(len(nums)+1) for comb in combinations(nums, r))\ndef g(target=42):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target-45]\nassert f(g())\n",
        "idx_generation": 101,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if there exists three numbers in the list whose sum is equal to the target value.\"\"\"\n    return any(arr[i] + arr[j] + arr[k] == target for i in range(len(arr)) for j in range(i+1, len(arr)) for k in range(j+1, len(arr)))\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g())\n",
        "idx_generation": 350,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of three people having the same birthday in a group of n is near 1/2.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len=365):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n    return best[1]\nassert f(g())\n",
        "idx_generation": 384,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the array whose sum is equal to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\ndef g(arr=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target=100):\n    return arr\nassert f(g())\n",
        "idx_generation": 37,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the sum of all numbers in the list is divisible by n\"\"\"\n    return sum(nums) % n == 0\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[0]\nassert f(g())\n",
        "idx_generation": 382,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(substrings: List[str], s='rywixekugagethathulisitextanyp', count=451) -> bool:\n    \"\"\"Find a list of >= count distinct strings that are all contained in s\"\"\"\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\n    \ndef g(s='rywixekugagethathulisitextanyp', count=451):\n    return [''] + sorted(set(s[j:i] for i in range(len(s) + 1) for j in range(i)))\n\nassert f(g())\n",
        "idx_generation": 115,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=20) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=20):\n    return [i for i in range(1, k+1)]\n\nassert f(g())\n",
        "idx_generation": 352,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=50, count=2) -> bool:\n    \"\"\"Check if there are exactly 'count' numbers in the list that sum up to the target value.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(numbers, count))\n\ndef g(numbers=[10, 20, 30, 40]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 340,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there is a subset of nums whose sum is exactly equal to the target value.\"\"\"\n    def subsetSum(nums, target, n):\n        if target == 0:\n            return True\n        if n == 0:\n            return False\n        if nums[n-1] > target:\n            return subsetSum(nums, target, n-1)\n        return subsetSum(nums, target, n-1) or subsetSum(nums, target-nums[n-1], n-1)\n    \n    return subsetSum(nums, target, len(nums))\n\ndef g():\n    nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 139,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target=\"python\") -> bool:\n    \"\"\"Check if there exists a word in the list that is an anagram of the target word\"\"\"\n    for word in words:\n        if sorted(word) == sorted(target):\n            return True\n    return False\n\ndef g(target=\"python\"):\n    return [\"typhon\", \"pyton\", \"python\", \"nhopty\", \"phony\"]\n\nassert f(g())\n",
        "idx_generation": 92,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, target-150]\n\nassert f(g())\n",
        "idx_generation": 221,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list whose sum is equal to the target value.\"\"\"\n    return any(target - num1 - num2 in nums for num1, num2 in itertools.combinations(nums, 2))\n\ndef g(target=20):\n    return [i for i in range(1, target+1)]\nassert f(g())\n",
        "idx_generation": 192,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there is a subarray in the list that sums up to zero\"\"\"\n    for i in range(len(nums)):\n        current_sum = nums[i]\n        if current_sum == target:\n            return True\n        for j in range(i+1, len(nums)):\n            current_sum += nums[j]\n            if current_sum == target:\n                return True\n    return False\n\ndef g(target=0):\n    nums = [5, 4, -3, 2, 1]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 247,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=10) -> bool:\n    \"\"\"Check if a number is greater than k.\"\"\"\n    return n > k\ndef g(k=10):\n    return k + 5\nassert f(g())\n\n\n",
        "idx_generation": 371,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are any duplicate numbers in the given list.\"\"\"\n    num_set = set()\n    for num in nums:\n        if num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 5]\nassert f(g())\n",
        "idx_generation": 234,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Given a list of numbers, find if there exists a subset whose sum is equal to the target_sum.\"\"\"\n    def subset_sum(numbers, target_sum, index, current_sum):\n        if current_sum == target_sum:\n            return True\n        if current_sum > target_sum or index >= len(numbers):\n            return False\n        include = subset_sum(numbers, target_sum, index + 1, current_sum + numbers[index])\n        exclude = subset_sum(numbers, target_sum, index + 1, current_sum)\n        return include or exclude\n\n    return subset_sum(numbers, target_sum, 0, 0)\n\ndef g(target_sum=100):\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 129,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 2 at least once and the number 3 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_two, found_three):\n        if i == rows - 1 and j == cols - 1 and found_two:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 3:\n            found_three += 1\n            if found_three > 2:\n                return False\n        if nums[i][j] == 2:\n            found_two = True\n        return helper(i+1, j, found_two, found_three) or helper(i, j+1, found_two, found_three)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[2, 0, 0], [3, 2, 0], [0, 3, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 415,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down, right, or diagonally (down-right) in the grid. The path must contain the number 1 at least once and the sum of all the numbers in the path must be a multiple of 3.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and path_sum % 3 == 0:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_one, path_sum) or helper(i, j+1, found_one, path_sum) or helper(i+1, j+1, found_one, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 411,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=9876, b=5432, upper_bound=10000) -> bool:\n    \"\"\"Check if n is a divisor of both a and b, and n is less than or equal to the upper_bound.\"\"\"\n    return a % n == 0 and b % n == 0 and (n <= upper_bound)\ndef g(a=9876, b=5432, upper_bound=10000):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n\nassert f(g())\n",
        "idx_generation": 382,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nimport itertools\nfrom typing import*\ndef f(nums: List[int], target=42) -> bool:\n    \"\"\"Find a combination of numbers that multiplies up to the target\"\"\"\n    from itertools import combinations\n    return any(math.prod(comb) == target for r in range(1, len(nums)+1) for comb in combinations(nums, r))\ndef g(target=42):\n    return [1, 2, target//2]\nassert f(g())\n",
        "idx_generation": 111,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of three people having the same birthday in a group of n is near 1/2.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 1/2) ** 2 <= year_len\ndef g(year_len=365):\n    n = 1\n    distinct_prob = 1.0\n    best = (1/2, 1)\n    while distinct_prob > 1/2:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(1/2 - distinct_prob), n))\n    return best[1]\nassert f(g())\n",
        "idx_generation": 350,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 4, 9, 16, 25, 36, 49, 64], k=2) -> bool:\n    \"\"\"Given a list of integers and an integer k, determine if there are exactly n integers in the list that are perfect cubes.\"\"\"\n    return sum((1 for num in lst if num**(1/3) == int(num**(1/3)))) == n\ndef g(lst=[1, 4, 9, 16, 25, 36, 49, 64], k=2):\n    return len([num for num in lst if num**(1/3) == int(num**(1/3))])\nassert f(g())\n",
        "idx_generation": 396,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[3, 6, 9, 12, 15, 18, 21, 24, 27, 30], k=4) -> bool:\n    \"\"\"Given a list of non-decreasing integers and given an integer k, determine whether there exists two numbers in the list whose absolute difference is less than or equal to k.\"\"\"\n    assert all((nums[i] <= nums[i + 1] for i in range(len(nums) - 1))), 'Hint: nums are non-decreasing'\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if abs(nums[i] - nums[j]) <= k:\n                return True\n    return False\ndef g(nums=[3, 6, 9, 12, 15, 18, 21, 24, 27, 30], k=4):\n    return nums\nassert f(g())\n",
        "idx_generation": 39,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Tuple\n\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if it is possible to find a quadruple in a given list that sums up to a target sum.\n    Return True if such quadruple exists, False otherwise.\"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n - 3):\n        for j in range(i + 1, n - 2):\n            left = j + 1\n            right = n - 1\n            while left < right:\n                current_sum = nums[i] + nums[j] + nums[left] + nums[right]\n                if current_sum == target_sum:\n                    return True\n                elif current_sum < target_sum:\n                    left += 1\n                else:\n                    right -= 1\n    return False\n\ndef g(nums: List[int], target_sum=10) -> Tuple:\n    nums = list(set(nums))\n    return nums, target_sum\n\nassert f(*g([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n",
        "idx_generation": 392,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Check if the given string contains the given substring.\"\"\"\n    return substring in string\n\ndef g(substring='abc'):\n    return \"abcdefghi\"\n\nassert f(g())\n",
        "idx_generation": 124,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is greater than or equal to the target.\"\"\"\n    prefix_sum = 0\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum >= target:\n            return True\n    return False\n\ndef g(target=50):\n    return [10, 15, 20, 5, 25, 30]\n\nassert f(g())\n",
        "idx_generation": 372,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 345,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there is a subset of nums that adds up to the target value without using recursion.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n    for i in range(1, n + 1):\n        dp[i][0] = True\n    for i in range(1, target + 1):\n        dp[0][i] = False\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]\n\ndef g():\n    nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 139,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if the given string is a palindrome and has a length greater than or equal to n.\"\"\"\n    return s == s[::-1] and len(s) >= n\ndef g(n=5):\n    return 'racecar'\nassert f(g())\n",
        "idx_generation": 112,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=5, threshold=0.6, seq=[0.4, 0.8, 1.2, 1.6, 2.0, 2.4, 2.8, 3.2]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose average is greater than or equal to threshold\"\"\"\n    seq_avg = sum(seq[start:start+k]) / k\n    return seq_avg >= threshold\ndef g(k=5, threshold=0.6, seq=[0.4, 0.8, 1.2, 1.6, 2.0, 2.4, 2.8, 3.2]):\n    def seq_avg(start):\n        return sum(seq[start:start+k]) / k\n    return max(range(len(seq) - k + 1), key=seq_avg)\nassert f(g())\n",
        "idx_generation": 242,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose sum is equal to the target number.\"\"\"\n    return any(target - num in nums for num in nums)\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7], 10\nassert f(*g())\n",
        "idx_generation": 208,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(seq: List[int], target_sum=10) -> bool:\n    \"\"\"Find the number of subsequences of seq whose sum is equal to target_sum\"\"\"\n    count = 0\n    for i in range(len(seq)):\n        for j in range(i+1, len(seq)+1):\n            if sum(seq[i:j]) == target_sum:\n                count += 1\n    return count\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 263,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], x=5) -> bool:\n    \"\"\"Check if the product of all elements in the list is divisible by x.\"\"\"\n    product = 1\n    for num in lst:\n        product *= num\n    return product % x == 0\n\ndef g(x=5):\n    return [x, x, x, x]\n\nassert f(g())\n",
        "idx_generation": 424,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(words: List[str], target=\"moon\") -> bool:\n    \"\"\"Check if the target word is present in the list.\"\"\"\n    return target in words\n\ndef g(words=[\"sun\", \"moon\", \"star\", \"sky\"]):\n    return words\n\nassert f(g())\n",
        "idx_generation": 237,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subset of numbers in the given list that adds up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(target + 1):\n            if j >= nums[i - 1]:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    return dp[n][target]\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 134,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(grid: List[List[int]], k=3) -> bool:\n    \"\"\"Check if there exists a subgrid of size k x k in the grid where the sum of its elements is divisible by k.\"\"\"\n    for i in range(len(grid) - k + 1):\n        for j in range(len(grid[0]) - k + 1):\n            subgrid = [row[j:j+k] for row in grid[i:i+k]]\n            if sum([val for subrow in subgrid for val in subrow]) % k == 0:\n                return True\n    return False\n\ndef g(k=3):\n    return [[1, 2, 3, 4, 5],\n            [6, 7, 8, 9, 10],\n            [11, 12, 13, 14, 15],\n            [16, 17, 18, 19, 20],\n            [21, 22, 23, 24, 25]]\n\nassert f(g())\n",
        "idx_generation": 425,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down, right, or diagonally (down-right) in the grid. The path must contain the number 1 at least once and the sum of all the numbers in the path must be a prime number.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def helper(i, j, found_one, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and is_prime(path_sum):\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_one, path_sum) or helper(i, j+1, found_one, path_sum) or helper(i+1, j+1, found_one, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 411,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=12345, b=67890, lower_bound=10) -> bool:\n    \"\"\"Check if n is a divisor of both a and b, and n is greater than or equal to lower_bound.\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a=12345, b=67890, lower_bound=10):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n\nassert f(g())\n",
        "idx_generation": 382,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[3, 6, 9, 12, 15], target_sum=27) -> bool:\n    \"\"\"Find if there exists a combination of numbers from the list that adds up to the target sum\"\"\"\n    def subset_sum(nums, n, target_sum):\n        if target_sum == 0:\n            return True\n        if n == 0 and target_sum != 0:\n            return False\n        if nums[n-1] > target_sum:\n            return subset_sum(nums, n-1, target_sum)\n        return subset_sum(nums, n-1, target_sum) or subset_sum(nums, n-1, target_sum-nums[n-1])\n    return subset_sum(nums, len(nums), target_sum)\ndef g(nums=[3, 6, 9, 12, 15], target_sum=27):\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums)))\nassert f(g())\n",
        "idx_generation": 114,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    \"\"\"Learning majority with noise: Given binary vectors, find the secret set $S$ of indices such that, for at least\n3/4 of the vectors, $$sum_{i \\\\in S} x_i = 1$$\"\"\"\n    return sum((sum((v >> i & 1 for i in inds)) for v in vecs)) >= len(vecs) * 3 / 4\ndef g(vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    d = 0\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[n >> i & 1 for i in range(d)] for n in vecs]\n    import random\n    rand = random.Random(0)\n    target = len(vecs) * 3 // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum((sum((v[i] for i in ans)) for v in vecs)) >= len(vecs) * 3 / 4:\n            return ans\nassert f(g())\n",
        "idx_generation": 388,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int, k: int) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose sum of elements is equal to the target number, \n    and the length of the subsequence is less than or equal to k.\"\"\"\n    for r in range(1, len(nums) + 1):\n        for subset in itertools.combinations(nums, r):\n            if sum(subset) == target and len(subset) <= k:\n                return True\n    return False\n\ndef g(target: int, k: int):\n    return [10, 20, 30, 40, 50], target, k\n\nassert f(*g(70, 3))\n",
        "idx_generation": 408,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(li: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(li)):\n        for j in range(i + 1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, target - 1]\n\nassert f(g())\n",
        "idx_generation": 41,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if it is possible to find three numbers in a given list that sum up to a target sum.\n    Return True if such triplet exists, False otherwise.\"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target_sum:\n                return True\n            elif current_sum < target_sum:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(nums: List[int], target_sum=10):\n    nums = list(set(nums))\n    return nums\n\nassert f(g([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n",
        "idx_generation": 428,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if a given number is present in the list\"\"\"\n    return n in nums\ndef g(nums=[1, 2, 3, 4, 5]):\n    return 3\nassert f(g())\n",
        "idx_generation": 125,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]], target: int) -> bool:\n    \"\"\"Determine if a target number exists in a 2D array. The array is sorted in non-decreasing order from top to bottom and left to right.\"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n\n    def binary_search(row: int, target: int) -> bool:\n        left = 0\n        right = cols - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[row][mid] == target:\n                return True\n            elif arr[row][mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False\n\n    for i in range(rows):\n        if arr[i][0] <= target <= arr[i][cols-1]:\n            if binary_search(i, target):\n                return True\n    return False\n\ndef g(arr=[[1, 3, 5, 7], [2, 4, 6, 8], [9, 10, 11, 12]], target=12):\n    return arr, target\n\nassert f(*g())\n",
        "idx_generation": 401,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 357,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=5):\n    return [i**2 + i**3 for i in range(1, k+1)]\n\nassert f(g())\n",
        "idx_generation": 140,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string contains a substring that appears n or more times.\"\"\"\n    return any(s.count(substring) >= n for substring in set(s))\ndef g(n=3):\n    return \"abracadabra\"\nassert f(g())\n",
        "idx_generation": 115,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the matrix that sums up to the target_sum\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            for x in range(len(matrix)):\n                for y in range(len(matrix[0])):\n                    if i != x and j != y and matrix[i][j] + matrix[x][y] == target_sum:\n                        return True\n    return False\n\ndef g(target_sum=100):\n    return [[10, 20, 30], [40, 50, 60], [70, 80, 90]], target_sum\n\nassert f(*g())\n",
        "idx_generation": 259,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if the sum of any three numbers in the list equals the target value\"\"\"\n    return any(x + y + z == target for x in arr for y in arr for z in arr)\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60]\nassert f(g())\n",
        "idx_generation": 209,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=5) -> bool:\n    \"\"\"Find n such that n is divisible by a, b, and their difference.\"\"\"\n    return n % a == 0 and n % b == 0 and n % (a - b) == 0\n\ndef g(a=10, b=5):\n    return a * b * (a - b)\n\nassert f(g())\n",
        "idx_generation": 267,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, factors: List[int]=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is divisible by any of the given factors.\n    - n: the number to be checked\n    - factors: list of factors\"\"\"\n    return any(n % factor == 0 for factor in factors)\ndef g(n: int, factors: List[int]=[2, 3, 5]):\n    return n\nassert f(g(30))\n",
        "idx_generation": 452,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10) -> bool:\n    \"\"\"Check if the number is divisible by a\"\"\"\n    return n % a == 0\ndef g(a=10):\n    return a * 2\nassert f(g())\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find the minimum number of elements required from nums to add up to the target value.\"\"\"\n    def minSubset(nums, target, n):\n        if target == 0:\n            return 0\n        if n == 0:\n            return float('inf')\n        if nums[n-1] > target:\n            return minSubset(nums, target, n-1)\n        return min(minSubset(nums, target, n-1), 1+minSubset(nums, target-nums[n-1], n-1))\n    \n    result = minSubset(nums, target, len(nums))\n    return result if result != float('inf') else -1\n\ndef g():\n    nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 139,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 5 at least once and the number 2 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_five, found_two):\n        if i == rows - 1 and j == cols - 1 and found_five:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            found_two += 1\n            if found_two > 2:\n                return False\n        if nums[i][j] == 5:\n            found_five = True\n        return helper(i+1, j, found_five, found_two) or helper(i, j+1, found_five, found_two)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[5, 0, 0], [2, 5, 0], [0, 2, 5]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 425,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the sum of all numbers in the path must be divisible by 3.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and path_sum % 3 == 0:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        return helper(i+1, j, found_one, path_sum + nums[i][j]) or helper(i, j+1, found_one, path_sum + nums[i][j])\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 416,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[15, 27, 102], upper_bound=5000) -> bool:\n    \"\"\"Check if n is a multiple of all numbers in the given list, and the result is within the specified upper bound.\"\"\"\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums=[15, 27, 102], upper_bound=5000):\n    ans = 1\n    for i in nums:\n        (m, n) = (min(i, ans), max(i, ans))\n        while m > 0:\n            (m, n) = (n % m, m)\n        ans *= i // n\n    return ans\nassert f(g())\n",
        "idx_generation": 388,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find two numbers in the list that can be multiplied together to equal the target value.\"\"\"\n    return any(x * y == target for x in nums for y in nums)\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n\n",
        "idx_generation": 130,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=3) -> bool:\n    \"\"\"Determine if there exists a subsequence of numbers in the list whose length is equal to the target.\"\"\"\n    n = len(nums)\n    dp = [[0] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    \n    return dp[n][target]\n\ndef g(target=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8]\n\nassert f(g())\n",
        "idx_generation": 406,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, s='Python') -> bool:\n    \"\"\"Check if a string contains a specific substring.\"\"\"\n    return s in x\ndef g(s='Python'):\n    return \"Hello \" + s\nassert f(g())\n",
        "idx_generation": 7,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a combination of numbers in the list that adds up to the target value.\"\"\"\n    for r in range(len(nums) + 1):\n        for combination in itertools.combinations(nums, r):\n            if sum(combination) == target:\n                return True\n    return False\n\ndef g(nums=[2, 5, 3, 1, 4]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 426,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that multiply to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target % num == 0 and target // num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=20):\n    nums = [2, 4, 5, 6, 10, 12]\n    return nums\nassert f(g())\n",
        "idx_generation": 43,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Check if it is possible to find four numbers in a given list that sum up to a target sum.\n    Return True if such quadruplet exists, False otherwise.\"\"\"\n    nums = sorted(numbers)\n    n = len(nums)\n    for i in range(n - 3):\n        for j in range(i + 1, n - 2):\n            left = j + 1\n            right = n - 1\n            while left < right:\n                current_sum = nums[i] + nums[j] + nums[left] + nums[right]\n                if current_sum == target_sum:\n                    return True\n                elif current_sum < target_sum:\n                    left += 1\n                else:\n                    right -= 1\n    return False\n\ndef g(numbers: List[int], target_sum=100):\n    nums = list(set(numbers))\n    return nums\n\nassert f(g([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]))\n",
        "idx_generation": 429,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are two consecutive numbers in the list that have a difference of exactly 2.\"\"\"\n    for i in range(len(nums)-1):\n        if abs(nums[i] - nums[i+1]) == 2:\n            return True\n    return False\n\ndef g():\n    return [1, 3, 5, 7, 9, 11]\n\nassert f(g())\n",
        "idx_generation": 130,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, limit=100) -> bool:\n    \"\"\"Check if n is a prime number within the given limit.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(limit)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(limit=100):\n    return 17\n\nassert f(g())\n",
        "idx_generation": 427,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that add up to the target value.\"\"\"\n    return any((numbers[i] + numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\n\ndef g(target=100):\n    numbers = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 370,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(num_list: List[int], target: int, k: int = 2) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k elements in the list whose sum is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(num_list, k))\ndef g(k: int = 2):\n    return [1, 2, 3, 4, 5]\nassert f(g(), 7)\n",
        "idx_generation": 142,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='vuzogaguzechicowejeguthemeralic', b='kybyjifidoquifwejeguthemelihitextodeju', length=11) -> bool:\n    \"\"\"Find a string of length length that is in both strings a and b\"\"\"\n    return len(s) == length and s in a and (s in b)\ndef g(a='vuzogaguzechicowejeguthemeralic', b='kybyjifidoquifwejeguthemelihitextodeju', length=11):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]\nassert f(g())\n",
        "idx_generation": 130,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='abcdefghi', target='') -> bool:\n    \"\"\"Find the two slice indices that give the specific target in string s\"\"\"\n    (i, j) = inds\n    return s[i:j] == target\ndef g(s='abcdefghi', target=''):\n    from itertools import product\n    for (i, j) in product(range(-len(s) - 1, len(s) + 1), repeat=2):\n        try:\n            if s[i:j] == target:\n                return [i, j]\n        except (IndexError, ValueError):\n            pass\nassert f(g())\n",
        "idx_generation": 259,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=5, threshold=0.5, seq=[0.9, 1.1, 1.3, 1.5, 1.7, 1.9]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose average is greater than or equal to threshold\"\"\"\n    seq_avg = sum(seq[start:start+k]) / k\n    return seq_avg >= threshold\ndef g(k=5, threshold=0.5, seq=[0.9, 1.1, 1.3, 1.5, 1.7, 1.9]):\n    def seq_avg(start):\n        return sum(seq[start:start+k]) / k\n    return max(range(len(seq) - k + 1), key=seq_avg)\nassert f(g())\n",
        "idx_generation": 212,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=15, b=3) -> bool:\n    \"\"\"Find n such that n is divisible by a, b, and their product.\"\"\"\n    return n % a == 0 and n % b == 0 and n % (a * b) == 0\n\ndef g(a=15, b=3):\n    return a * b * (a + b)\n\nassert f(g())\n",
        "idx_generation": 267,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the sum of all numbers in the list is divisible by n\"\"\"\n    return sum(nums) % n == 0\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[0]\nassert f(g())\n",
        "idx_generation": 460,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for col in range(n):\n        col_sum = 0\n        for row in range(n):\n            col_sum += matrix[row][col]\n        if col_sum != target_sum:\n            return False\n    \n    # Check diagonals\n    diagonal_sum = 0\n    anti_diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += matrix[i][i]\n        anti_diagonal_sum += matrix[i][n-i-1]\n    if diagonal_sum != target_sum or anti_diagonal_sum != target_sum:\n        return False\n    \n    return True\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g())\n",
        "idx_generation": 246,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target_sum=20) -> bool:\n    \"\"\"Find if there exists a combination of numbers from the list that adds up to the target sum\"\"\"\n    def subset_sum(nums, n, target_sum):\n        if target_sum == 0:\n            return True\n        if n == 0 and target_sum != 0:\n            return False\n        if nums[n-1] > target_sum:\n            return subset_sum(nums, n-1, target_sum)\n        return subset_sum(nums, n-1, target_sum) or subset_sum(nums, n-1, target_sum-nums[n-1])\n    return subset_sum(nums, len(nums), target_sum)\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target_sum=20):\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums)))\n\nassert f(g())\n",
        "idx_generation": 150,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: List[float], a=1.5, b=2.5) -> bool:\n    \"\"\"Check if a point lies inside a rectangle.\"\"\"\n    x, y = e\n    return a <= x <= b\n\ndef g(a=1.5, b=2.5):\n    return [a + 0.5, b - 0.5]\n\nassert f(g())\n",
        "idx_generation": 428,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 4 at least once and the number 1 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_four, found_one):\n        if i == rows - 1 and j == cols - 1 and found_four:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one += 1\n            if found_one > 2:\n                return False\n        if nums[i][j] == 4:\n            found_four = True\n        return helper(i+1, j, found_four, found_one) or helper(i, j+1, found_four, found_one)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[4, 0, 0], [1, 1, 0], [0, 1, 4]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 419,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: float, a=25) -> bool:\n    \"\"\"Find a number that when squared is equal to a.\"\"\"\n    return x ** 2 == a\ndef g(a=25):\n    return a ** 0.5\nassert f(g())\n",
        "idx_generation": 420,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(num_list: List[int], target: int, k: int = 4) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k elements in the list whose sum is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(num_list, k))\ndef g(k: int = 4):\n    return [1, 2, 3, 4, 5, 6]\nassert f(g(), 15)\n",
        "idx_generation": 142,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import *\ndef f(nums: List[int], target: int, k: int) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose sum of elements is equal to the target number, \n    and the length of the subsequence is exactly k.\"\"\"\n    for r in range(1, len(nums) + 1):\n        for subset in itertools.combinations(nums, r):\n            if sum(subset) == target and len(subset) == k:\n                return True\n    return False\n\ndef g(target: int, k: int):\n    return [10, 20, 30, 40, 50], target, k\n\nassert f(*g(70, 3))\n",
        "idx_generation": 416,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['python', 'programming']) -> bool:\n    \"\"\"Find a string that contains each string in substrings alternating, e.g., 'pytroming' for 'python' and 'programming'\"\"\"\n    return all((sub in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))\ndef g(substrings=['python', 'programming']):\n    m = max((len(s) for s in substrings))\n    return ''.join([s[i] if i < len(s) else ' ' for i in range(m) for s in substrings])\nassert f(g())\n",
        "idx_generation": 28,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of three people having the same birthday in a group of n is near 1/2.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len=365):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n    return best[1]\nassert f(g())\n",
        "idx_generation": 440,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that differ by the target\"\"\"\n    seen = set()\n    for num in nums:\n        if num + target in seen or num - target in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=25):\n    nums = [5, 10, 15, 20, 30, 35]\n    return nums\nassert f(g())\n",
        "idx_generation": 43,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to target.\"\"\"\n    prefix_sum = 0\n    sums = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == target or (prefix_sum - target) in sums:\n            return True\n        sums.add(prefix_sum)\n    return False\n\ndef g(target=100):\n    return [i for i in range(1, 20)] + [target - 190]\n\nassert f(g())\n",
        "idx_generation": 453,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, lst=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Check if the given string x is present in the list lst\"\"\"\n    return x in lst\ndef g(lst=['apple', 'banana', 'cherry', 'date']):\n    return lst[1]\nassert f(g())\n",
        "idx_generation": 131,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=42) -> bool:\n    \"\"\"Find the number of steps required to reach the target number by repeatedly subtracting the largest prime number\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    steps = 0\n    while n > target:\n        largest_prime = max([x for x in range(2, n+1) if is_prime(x)])\n        n = n - largest_prime\n        steps += 1\n    return steps\n\ndef g(target=42):\n    return 500\n\nassert f(g())\n",
        "idx_generation": 435,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 0) -> bool:\n    \"\"\"Find three numbers in the list 'nums' that have a product greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] * nums[j] * nums[k] > target:\n                    return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 380,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the given matrix is a magic square of size n, where all rows, columns, and diagonals have the same sum\"\"\"\n    target_sum = sum(matrix[0])\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum != target_sum:\n            return False\n    # Check diagonals\n    diag_sum1 = 0\n    diag_sum2 = 0\n    for i in range(n):\n        diag_sum1 += matrix[i][i]\n        diag_sum2 += matrix[i][n-i-1]\n    if diag_sum1 != target_sum or diag_sum2 != target_sum:\n        return False\n    return True\ndef g(matrix=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix\nassert f(g())\n\n",
        "idx_generation": 142,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], k=5) -> bool:\n    \"\"\"Check if there exists a word in the list whose length is divisible by k.\"\"\"\n    for word in words:\n        if len(word) % k == 0:\n            return True\n    return False\n\ndef g(k=5):\n    return ['apple', 'banana', 'cherry', 'date', 'elderberry']\n\nassert f(g())\n",
        "idx_generation": 133,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=16) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that adds up to the target.\"\"\"\n    for r in range(1, len(nums) + 1):\n        for combination in itertools.combinations(nums, r):\n            if sum(combination) == target:\n                return True\n    return False\n\ndef g(target=16):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 261,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=15) -> bool:\n    \"\"\"Check if there exists three numbers in the list that add up to the target.\"\"\"\n    return any(target - num in numbers for num in numbers)\n\ndef g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 226,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if all numbers in a list are divisible by 5\"\"\"\n    return all([num % 5 == 0 for num in numbers])\n\ndef g():\n    return [20, 25, 30, 35]\n\nassert f(g())\n",
        "idx_generation": 298,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the sum of the positive numbers in the list is greater than the sum of the negative numbers.\"\"\"\n    pos_sum = sum(num for num in nums if num > 0)\n    neg_sum = sum(num for num in nums if num < 0)\n    return pos_sum > neg_sum\n\ndef g():\n    return [1, -2, 3, -4, 5, -6, 7, -8, 9, -10]\n\nassert f(g())\n",
        "idx_generation": 462,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if the given number is divisible by m and is also a prime number.\"\"\"\n    if n % m == 0:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(m=10):\n    return m + 1\n\nassert f(g())\n",
        "idx_generation": 265,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if it is possible to obtain the target value by rearranging the numbers\n    and performing addition and subtraction operations.\n    Each number in the list can be used only once.\"\"\"\n    def helper(numbers, target):\n        if len(numbers) == 0:\n            return target == 0\n        for i, num in enumerate(numbers):\n            remaining = numbers[:i] + numbers[i+1:]\n            if helper(remaining, target - num):\n                return True\n            if helper(remaining, target + num):\n                return True\n        return False\n\n    return helper(numbers, target)\n\ndef g(numbers=[1, 2, 3, 4]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 157,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 and 2 consecutively.\"\"\"\n    rows = int(len(nums)**0.5)\n    cols = int(len(nums)**0.5)\n\n    def helper(i, j, found_one):\n        if i == rows - 1 and j == cols - 1 and found_one:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i*cols + j] == 0:\n            return False\n        if nums[i*cols + j] == 1:\n            if nums[(i+1)*cols + j] != 2 and nums[i*cols + j+1] != 2:\n                return False\n            found_one = True\n        return helper(i+1, j, found_one) or helper(i, j+1, found_one)\n\n    return helper(0, 0, False)\n\ndef g(nums=[1, 0, 0, 2, 4, 0, 0, 8, 1]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 463,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers. You can only move down, right, or diagonally down-right in the grid. The path must contain the number 2 at least once and the sum of all numbers along the path must be even.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_two, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_two and path_sum % 2 == 0:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            found_two = True\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_two, path_sum) or helper(i, j+1, found_two, path_sum) or helper(i+1, j+1, found_two, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[2, 1, 1], [3, 2, 1], [1, 3, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 423,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[3, 6, 12, 24, 48], upper_bound=100000) -> bool:\n    \"\"\"Check if n is divisible by all numbers in the list and is less than or equal to the upper_bound\"\"\"\n    return all((n % i == 0 for i in lst)) and 0 < n <= upper_bound\ndef g(lst=[3, 6, 12, 24, 48], upper_bound=100000):\n    ans = 1\n    for i in lst:\n        (m, n) = (min(i, ans), max(i, ans))\n        while m > 0:\n            (m, n) = (n % m, m)\n        ans *= i // n\n    return ans\nassert f(g())\n",
        "idx_generation": 424,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(num_list: List[int], target: int, k: int = 4) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k+1 elements in the list whose sum is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(num_list, k+1))\ndef g(k: int = 4):\n    return [1, 2, 3, 4, 5, 6, 7]\nassert f(g(), 25)\n\n",
        "idx_generation": 160,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/3.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 1/3) ** 2 <= year_len\ndef g(year_len=365):\n    n = 1\n    distinct_prob = 1.0\n    best = (1/3, 1)\n    while distinct_prob > 1/3:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(1/3 - distinct_prob), n))\n    return best[1]\nassert f(g())\n",
        "idx_generation": 440,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['abc', 'def', 'ghi', 'jkl']) -> bool:\n    \"\"\"Determine whether the given string contains all the substrings in any order\"\"\"\n    return all((sub in s for sub in substrings))\ndef g(substrings=['abc', 'def', 'ghi', 'jkl']):\n    return ''.join(substrings)\nassert f(g())\n",
        "idx_generation": 41,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/4.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 1/4) ** 2 <= year_len\ndef g(year_len=365):\n    n = 1\n    distinct_prob = 1.0\n    best = (1/4, 1)\n    while distinct_prob > 1/4:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(1/4 - distinct_prob), n))\n    return best[1]\nassert f(g())\n",
        "idx_generation": 440,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list whose difference is equal to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = num - target\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[10, 15, 20, 25, 30, 35, 40, 45]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 45,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the target number exists in the given matrix.\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=0):\n    return [[i + j for i in range(5)] for j in range(5)]\n\nassert f(g())\n",
        "idx_generation": 465,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, a='racecar') -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return x == x[::-1]\ndef g(a='racecar'):\n    return a\nassert f(g())\n",
        "idx_generation": 152,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=25):\n    return [5, 10, 15, 20, 25]\n\nassert f(g())\n",
        "idx_generation": 459,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(numbers: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any((numbers[i] + numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\n\ndef g():\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g())\n\n",
        "idx_generation": 437,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=7) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k and the length is greater than 1.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    count = 0\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        count += 1\n        if prefix_sum in remainders and count > 1:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=7):\n    return [i**2 for i in range(1, k+1)]\n\nassert f(g())\n",
        "idx_generation": 160,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"Given two strings, check if one string is a permutation of the other.\"\"\"\n    return sorted(s1) == sorted(s2)\ndef g(s1=\"abcde\", s2=\"edcba\"):\n    return s1, s2\nassert f(*g())\n",
        "idx_generation": 150,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], n=3, s=12) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a >= 0 for a in x])\n\ndef g(n=3, s=12):\n    x = [s // n] * n\n    x[0] += s % n\n    return x\n\nassert f(g())\n",
        "idx_generation": 268,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the matrix whose sum is equal to the target.\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    for i in range(m):\n        for j in range(n):\n            for k in range(i, m):\n                for l in range(n):\n                    if matrix[i][j] + matrix[k][l] == target:\n                        return True\n    return False\n\ndef g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 228,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix of integers, determine if it is a magic square.\n    A magic square is a square matrix where the sum of each row, each column, and both diagonals are the same.\n    Return True if the matrix is a magic square, and False otherwise.\"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != target_sum:\n            return False\n    # Check diagonals\n    diag_sum1 = sum(matrix[i][i] for i in range(n))\n    diag_sum2 = sum(matrix[i][n - i - 1] for i in range(n))\n    if diag_sum1 != target_sum or diag_sum2 != target_sum:\n        return False\n    return True\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g())\n",
        "idx_generation": 322,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=253532, b=1230200) -> bool:\n    \"\"\"Check if the given x, a, and b satisfy the equation x + a = b.\"\"\"\n    return x + a == b\ndef g(a=253532, b=1230200):\n    return b - a\nassert f(g())\n",
        "idx_generation": 481,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the matrix is a diagonal matrix.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(target=0):\n    return [[1, 0, 0], [0, 4, 0], [0, 0, 6]]\n\nassert f(g())\n",
        "idx_generation": 272,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a subset of numbers in the given list that adds up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(target + 1):\n            if j >= nums[i - 1]:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    return dp[n][target]\n\ndef g(target=50):\n    return [5, 10, 15, 20, 25, 30]\n\nassert f(g())\n",
        "idx_generation": 169,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(grid: List[List[int]], k=2) -> bool:\n    \"\"\"Check if there exists a subgrid of size k x k in the grid where all elements are the same.\"\"\"\n    for i in range(len(grid) - k + 1):\n        for j in range(len(grid[0]) - k + 1):\n            subgrid = [row[j:j+k] for row in grid[i:i+k]]\n            if all(elem == subgrid[0][0] for row in subgrid for elem in row):\n                return True\n    return False\n\ndef g(k=2):\n    return [[1, 1, 1, 1],\n            [1, 1, 1, 1],\n            [1, 1, 1, 1],\n            [1, 1, 1, 1]]\n\nassert f(g())\n",
        "idx_generation": 478,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and every number in the path must be a perfect square.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one):\n        if i == rows - 1 and j == cols - 1 and found_one:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if not is_perfect_square(nums[i][j]):\n            return False\n        return helper(i+1, j, found_one) or helper(i, j+1, found_one)\n\n    return helper(0, 0, False)\n\ndef g(nums=[[1, 0, 0], [4, 9, 0], [0, 16, 1]]):\n    return nums\n\ndef is_perfect_square(n):\n    return n > 0 and int(n**0.5)**2 == n\n\nassert f(g())\n\n",
        "idx_generation": 431,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=3) -> bool:\n    \"\"\"Check if the given number is divisible by a.\"\"\"\n    return x % a == 0\n\ndef g(a=3):\n    return a ** 4\n\nassert f(g())\n",
        "idx_generation": 428,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(num_list: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k elements in the list whose sum is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(num_list, k))\ndef g(k: int = 3):\n    return [1, 2, 3, 4, 5, 6, 7]\nassert f(g(), 15)\n\n",
        "idx_generation": 160,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100, k=3) -> bool:\n    \"\"\"Check if there exists a k-sized combination of numbers in the list that sum up to the target\"\"\"\n    def dfs(nums, k, target, start, path):\n        if k == 0 and target == 0:\n            return True\n        if k < 0 or target < 0:\n            return False\n        for i in range(start, len(nums)):\n            if dfs(nums, k - 1, target - nums[i], i + 1, path + [nums[i]]):\n                return True\n        return False\n    return dfs(nums, k, target, 0, [])\n\ndef g(nums=[10, 20, 30, 40, 50], target=100, k=3):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 441,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the given string contains all the characters of the target string in order.\"\"\"\n    target_index = 0\n    for c in s:\n        if c == target[target_index]:\n            target_index += 1\n            if target_index == len(target):\n                return True\n    return False\n\ndef g(target='python'):\n    return 'yptihoonmlkpythonsjgk'\n\nassert f(g())\n",
        "idx_generation": 45,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], target='python', length=6) -> bool:\n    \"\"\"Check if the given target string exists in the list of strings and has a length less than or equal to the given length.\"\"\"\n    return target in strings and len(target) <= length\n\ndef g(strings=['java', 'python', 'ruby', 'javascript']):\n    return strings, 'python', 6\n\nassert f(*g())\n",
        "idx_generation": 444,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix, return True if all the elements in each row are in increasing order, and False otherwise.\"\"\"\n    return all(all(matrix[i][j] < matrix[i][j+1] for j in range(len(matrix[i])-1)) for i in range(len(matrix)))\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "idx_generation": 46,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Check if all the substrings are present in the given string in any order\"\"\"\n    return all((sub in s for sub in substrings))\ndef g(substrings=['apple', 'banana', 'cherry']):\n    return ''.join(substrings)\nassert f(g())\n",
        "idx_generation": 156,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with exactly three elements whose product is a perfect square.\"\"\"\n    for i in range(len(arr)):\n        subarray_product = 1\n        for j in range(i, len(arr)):\n            subarray_product *= arr[j]\n            if math.isqrt(subarray_product) ** 2 == subarray_product:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7]\n\nassert f(g())\n",
        "idx_generation": 477,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in ascending order and does not contain any duplicates\"\"\"\n    return sorted(lst) == lst and len(set(lst)) == len(lst)\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 438,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 163,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Check if all words in the list start with the given prefix.\"\"\"\n    return all(word.startswith(prefix) for word in words)\n\ndef g(prefix='pre'):\n    return ['prefix', 'preparation', 'pretend', 'present']\n\nassert f(g())\n",
        "idx_generation": 158,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(words: List[str], n=5) -> bool:\n    \"\"\"Check if all words in the list have length greater than or equal to n.\"\"\"\n    return all(len(word) >= n for word in words)\ndef g(n=5):\n    return [\"hello\", \"world\", \"python\"]\nassert f(g())\n",
        "idx_generation": 282,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=2) -> bool:\n    \"\"\"Given a list of integers and a number k, find any sublist of length k whose elements are all even numbers.\"\"\"\n    return any(all(num % 2 == 0 for num in nums[i:i+k]) for i in range(len(nums) - k + 1))\ndef g(k=2):\n    return [2, 4, 6, 8, 10]\nassert f(g())\n",
        "idx_generation": 242,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, factors: List[int]=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is divisible by all of the given factors.\n    - n: the number to be checked\n    - factors: list of factors\"\"\"\n    return all(n % factor == 0 for factor in factors)\ndef g(n: int, factors: List[int]=[2, 3, 5]):\n    return n\nassert f(g(30))\n",
        "idx_generation": 323,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the matrix is a lower triangular matrix.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(target=0):\n    return [[1, 0, 0], [2, 4, 0], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 272,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Given a list of integers, find if there exists a subset whose sum is equal to the target_sum\"\"\"\n    def subset_sum(nums, target_sum):\n        if target_sum == 0:\n            return True\n        if not nums or target_sum < 0:\n            return False\n        return subset_sum(nums[1:], target_sum - nums[0]) or subset_sum(nums[1:], target_sum)\n\n    return subset_sum(nums, target_sum)\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4]\n\nassert f(g())\n",
        "idx_generation": 174,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there is a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 3 at least once and the number 2 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_three, found_two):\n        if i == rows - 1 and j == cols - 1 and found_three:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            found_two += 1\n            if found_two > 2:\n                return False\n        if nums[i][j] == 3:\n            found_three = True\n        return helper(i+1, j, found_three, found_two) or helper(i, j+1, found_three, found_two)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[3, 0, 0], [2, 2, 0], [0, 2, 3]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 479,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 7 at least once and the number 4 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_seven, found_four):\n        if i == rows - 1 and j == cols - 1 and found_seven:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 4:\n            found_four += 1\n            if found_four > 2:\n                return False\n        if nums[i][j] == 7:\n            found_seven = True\n        return helper(i+1, j, found_seven, found_four) or helper(i, j+1, found_seven, found_four)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[7, 0, 0], [4, 4, 0], [0, 4, 7]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 432,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target + nums[0])\n    return subset_sum(nums, target)\n\ndef g(nums=[-5, -10, -15, -20, -25, -30, -35, -40, -45]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 441,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(num_list: List[int], target: int, k: int = 2) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k+1 elements in the list whose sum is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(num_list, k+1))\ndef g(k: int = 2):\n    return [1, 2, 3, 4, 5, 6, 7]\nassert f(g(), 10)\n\n",
        "idx_generation": 160,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50, k=2) -> bool:\n    \"\"\"Check if there exists a k-sized combination of numbers in the list that sum up to the target\"\"\"\n    def dfs(nums, k, target, start, path):\n        if k == 0 and target == 0:\n            return True\n        if k < 0 or target < 0:\n            return False\n        for i in range(start, len(nums)):\n            if dfs(nums, k - 1, target - nums[i], i + 1, path + [nums[i]]):\n                return True\n        return False\n    return dfs(nums, k, target, 0, [])\n\ndef g(nums=[10, 20, 30, 40, 50], target=50, k=2):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 451,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_length=5) -> bool:\n    \"\"\"Find a substring of length target_length in s that contains only vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(s) - target_length + 1):\n        if all([c in vowels for c in s[i:i+target_length]]):\n            return True\n    return False\ndef g(target_length=5):\n    return \"aeiou\" * (target_length // 5)\nassert f(g())\n",
        "idx_generation": 48,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=10, upper=1111111111111111, seq=[49, -99, 80, 26, 54, 13, 37, 13, -52, -47]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is lesser than the given upper limit, possibly looping around\"\"\"\n    total = 0\n    for i in range(start, start + k):\n        total += seq[i]\n    return total < upper\n\ndef g(k=10, upper=1111111111111111, seq=[49, -99, 80, 26, 54, 13, 37, 13, -52, -47]):\n    def sum_consecutive(start):\n        ans = 0\n        for i in range(start, start + k):\n            ans += seq[i]\n        return ans\n    return min(range(-len(seq), len(seq) - k + 1), key=sum_consecutive)\n\nassert f(g())\n",
        "idx_generation": 477,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, scores=[10, 9, 8, 7, 6, 5, 4, 3], k=3) -> bool:\n    \"\"\"Given a list of non-increasing integers and given an integer k, determine how many positive integers in the list\nare at least as large as the kth.\"\"\"\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return all((s >= scores[k] and s > 0 for s in scores[:n])) and all((s < scores[k] or s <= 0 for s in scores[n:]))\ndef g(scores=[10, 9, 8, 7, 6, 5, 4, 3], k=3):\n    threshold = max(scores[k], 1)\n    return sum((s >= threshold for s in scores))\nassert f(g())\n",
        "idx_generation": 46,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], prefix='in') -> bool:\n    \"\"\"Check if all words in a list start with a given prefix.\"\"\"\n    return all(word.startswith(prefix) for word in words)\n\ndef g():\n    words = ['incredible', 'intact', 'indoor', 'influence']\n    return words\n\nassert f(g())\n",
        "idx_generation": 166,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that add up to the target\"\"\"\n    n = len(numbers)\n    for i in range(n):\n        for j in range(i+1, n):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target=20):\n    numbers = [2, 4, 5, 10, 25]\n    return numbers\n\nassert f(g(), target=15)\n",
        "idx_generation": 448,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Find the sum of all pairs of numbers in the list that are divisible by the target value\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if (li[i] + li[j]) % target == 0:\n                return True\n    return False\ndef g(target=100):\n    return [25, target-25]\nassert f(g())\n",
        "idx_generation": 166,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lists: List[List[int]], items=[5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length=4) -> bool:\n    \"\"\"Given a list of integers and a target length, create of the given length such that:\n    * The first list must be all the same number.\n    * The second must be all the different numbers.\n    * The two lists together comprise a sublist of all the list items\"\"\"\n    (a, b) = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == 1\n    assert len(set(b)) == length\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True\ndef g(items=[5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length=4):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and (not seen.add(i))]\n    return [[a] * length, (dedup + [a])[:length]]\nassert f(g())\n",
        "idx_generation": 162,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=20) -> bool:\n    \"\"\"Check if the sum of any three numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\n\ndef g(target_sum=20):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n",
        "idx_generation": 289,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], m=10) -> bool:\n    \"\"\"Find a number in the list that is greater than m.\"\"\"\n    return any(num > m for num in lst)\ndef g(m=10):\n    return [1, 5, 10, 15, 20]\nassert f(g())\n",
        "idx_generation": 243,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=7, b=3, c=20) -> bool:\n    \"\"\"Find n such that n + a is divisible by b and c\"\"\"\n    return (n + a) % b == 0 and (n + a) % c == 0\n\ndef g(a=7, b=3, c=20):\n    return b * c - a\n\nassert f(g())\n",
        "idx_generation": 325,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y: int, target=1000) -> bool:\n    \"\"\"Check if the sum of x and y is equal to the target\"\"\"\n    return x + y == target\n\ndef g(x: int, target=1000):\n    return target - x\n\nassert f(g(500), 500)\n",
        "idx_generation": 280,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10, length=4) -> bool:\n    \"\"\"Check if there is a subsequence of the given numbers that sums up to the target and has the specified length.\"\"\"\n    for i in range(len(numbers) - length + 1):\n        if sum(numbers[i:i+length]) == target:\n            return True\n    return False\n\ndef g(target=10, length=4):\n    return list(range(1, length + 1)) + [target - sum(range(1, length + 1))]\n\nassert f(g())\n",
        "idx_generation": 190,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the sum of all numbers in the path must be greater than a given threshold.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n    threshold = 10\n\n    def helper(i, j, found_one, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and path_sum > threshold:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_one, path_sum) or helper(i, j+1, found_one, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 434,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with all elements being prime numbers.\"\"\"\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    for i in range(len(lst)):\n        subarray_sum = 0\n        for j in range(i, len(lst)):\n            subarray_sum += lst[j]\n            if is_prime(subarray_sum):\n                return True\n    return False\n\ndef g():\n    return [2, 4, 9, 16, 5]\n\nassert f(g())\n",
        "idx_generation": 445,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if any combination of numbers in the list sums up to the target minus 5.\"\"\"\n    for r in range(1, len(nums) + 1):\n        for combination in itertools.combinations(nums, r):\n            if sum(combination) == target - 5:\n                return True\n    return False\n\ndef g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 176,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[:-1], target - nums[-1]) or subset_sum(nums[:-1], target)\n    return subset_sum(nums, target)\n\ndef g(nums=[10, 20, 30, 40, 50]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 451,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Check if any word in the list contains all the letters of the target string in the same order.\"\"\"\n    return any(target in word for word in words)\n\ndef g(target='python'):\n    return ['python', 'programming', 'puzzle']\n\nassert f(g())\n",
        "idx_generation": 54,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list whose sum is less than the target.\"\"\"\n    return any(nums[i] + nums[j] < target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g():\n    return [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\nassert f(g())\n",
        "idx_generation": 47,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the target value is present in the list of numbers.\"\"\"\n    return target in nums\n    \ndef g(nums: List[int]):\n    return nums\n\nassert f(g([1, 2, 3, 4, 5]), target=3)\n",
        "idx_generation": 175,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\nimport itertools\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list of integers contains a subarray whose sum is divisible by 4\"\"\"\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            subarray_sum = sum(arr[i:j+1])\n            if subarray_sum % 4 == 0:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 450,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=7) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=7):\n    return [2**i for i in range(1, k+1)]\n\nassert f(g())\n\n",
        "idx_generation": 172,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], target_length=10) -> bool:\n    \"\"\"Check if any two strings in the list can be combined to form a string of the target length\"\"\"\n    return any((len(strings[i]) + len(strings[j]) == target_length) for i in range(len(strings)) for j in range(i+1, len(strings)))\ndef g(target_length=10):\n    strings = ['hello', 'world', 'python', 'programming']\n    return strings\nassert f(g())\n",
        "idx_generation": 162,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose product is divisible by the target value.\"\"\"\n    product = 1\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            product *= nums[j]\n            if product % target == 0:\n                return True\n    return False\n\ndef g(target=100):\n    return [i for i in range(1, target+1)]\n\nassert f(g())\n",
        "idx_generation": 354,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 247,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Determine if there exists a triplet in the given list of integers such that the sum of the three numbers \n       is equal to the target value.\"\"\"\n    return any((nums[i]+nums[j]+nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60]\nassert f(g())\n",
        "idx_generation": 326,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(primes: List[int], limit=100) -> bool:\n    \"\"\"Check if all prime numbers in the given list are less than or equal to the specified limit.\"\"\"\n    return all(prime <= limit for prime in primes)\n\ndef g(limit=100):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    return [num for num in range(2, limit + 1) if is_prime(num)]\n\nassert f(g())\n",
        "idx_generation": 281,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if there exists three numbers in the list that multiply to the target.\"\"\"\n    return any(target / (num1 * num2) == num3 for num1 in numbers for num2 in numbers for num3 in numbers)\n\ndef g(target=100):\n    return [1, 2, 4, 5, 10, 20, 25]\n\nassert f(g())\n",
        "idx_generation": 194,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grid: List[List[int]], k=3) -> bool:\n    \"\"\"Check if all the elements in the kth column of the grid are even\"\"\"\n    for i in range(len(grid)):\n        if grid[i][k] % 2 != 0:\n            return False\n    return True\n\ndef g(k=3):\n    return [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\n\nassert f(g())\n",
        "idx_generation": 435,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]) -> bool:\n    \"\"\"Check if the nth number in the list is a Fibonacci number\"\"\"\n    fib = [1, 1]\n    while len(fib) < n:\n        fib.append(fib[-1] + fib[-2])\n    return lst[n-1] in fib\ndef g(lst=[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]):\n    return lst.index(8)\nassert f(g())\n",
        "idx_generation": 445,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, k=3) -> bool:\n    \"\"\"Find if there exists a combination of k numbers in nums that add up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k))\ndef g(target=10, k=3):\n    return [2, 3, 5, 4, 1, 6]\nassert f(g())\n",
        "idx_generation": 190,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(seq: List[int], target_sum=10) -> bool:\n    \"\"\"Find a subsequence of seq whose sum is less than or equal to target_sum and the length of the subsequence is odd.\"\"\"\n    for i in range(len(seq)):\n        for j in range(i+1, len(seq)+1):\n            if sum(seq[i:j]) <= target_sum and (j-i) % 2 != 0:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7]\n\nassert f(g())\n",
        "idx_generation": 456,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Given a list of words and a target word, determine if there exists a word in the list that contains all the letters of the target word in any order.\"\"\"\n    for word in words:\n        if set(target).issubset(set(word)):\n            return True\n    return False\n\ndef g(words=['python', 'programming', 'puzzle', 'code']):\n    return words\n\nassert f(g())\n",
        "idx_generation": 69,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list whose difference is equal to the target.\"\"\"\n    return any(abs(nums[i] - nums[j]) == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g():\n    return [1, 5, 9, 12, 15, 18, 22, 25, 28, 30]\nassert f(g())\n",
        "idx_generation": 47,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=4, c='x') -> bool:\n    \"\"\"Check if the character c appears at least n times in the given string s\"\"\"\n    return s.count(c) >= n\n\ndef g(n=4, c='x'):\n    return c * n\nassert f(g())\n",
        "idx_generation": 177,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int = 10) -> bool:\n    \"\"\"Check if any two numbers in the list add up to the target.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [2, 5, 8, 3]\n\nassert f(g())\n",
        "idx_generation": 470,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subset of numbers in the given list that adds up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(target + 1):\n            if j >= nums[i - 1]:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    return dp[n][target]\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60]\n\nassert f(g())\n",
        "idx_generation": 174,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_word=\"python\") -> bool:\n    \"\"\"Given a list of words, find if there exists a word that is an anagram of the target_word\"\"\"\n    def is_anagram(word1, word2):\n        return sorted(word1) == sorted(word2)\n\n    return any(is_anagram(word, target_word) for word in words)\n\ndef g(target_word=\"python\"):\n    return [\"nhotyp\", \"java\", \"pyhton\", \"python\"]\n\nassert f(g())\n",
        "idx_generation": 174,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['abcd', 'efgh', 'ijkl', 'mnop']) -> bool:\n    \"\"\"Find a string that contains all the substrings reversed and forward\"\"\"\n    return all((sub in s and sub[::-1] in s for sub in substrings))\ndef g(substrings=['abcd', 'efgh', 'ijkl', 'mnop']):\n    return ''.join(substrings + [s[::-1] for s in substrings])\nassert f(g())\n",
        "idx_generation": 358,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target, and the subarray length is less than or equal to 3.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target and j-i <= 3:\n                return True\n    return False\n\ndef g(target=50):\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 254,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(l: List[int]) -> bool:\n    \"\"\"Find a list of more than 200 distinct integers between 0 and 999, inclusive, such that each pair of integers\nhave cubes that differ by at least 10.\"\"\"\n    return all((i in range(1000) and abs(i ** 3 - j ** 3) >= 10 for i in l for j in l if i != j)) and len(set(l)) > 200\ndef g():\n    return [0, 3] + list(range(6, 1000, 3))\nassert f(g())\n",
        "idx_generation": 327,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=99) -> bool:\n    \"\"\"Check if all rows and columns in the matrix contain the target number.\"\"\"\n    for row in matrix:\n        if target not in row:\n            return False\n    for col in zip(*matrix):\n        if target not in col:\n            return False\n    return True\ndef g(target=99):\n    return [[target, target, target], [target, target, target], [target, target, target]]\nassert f(g())\n",
        "idx_generation": 288,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a subset of numbers in the given array that adds up to the target sum\"\"\"\n    dp = [[False] * (target + 1) for _ in range(len(arr) + 1)]\n    for i in range(len(arr) + 1):\n        dp[i][0] = True\n    for i in range(1, len(arr) + 1):\n        for j in range(1, target + 1):\n            if arr[i-1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i-1]]\n    return dp[len(arr)][target]\n\ndef g(target=10):\n    return [i for i in range(1, target+1)]\n\nassert f(g())\n",
        "idx_generation": 202,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the maximum number in the path must be greater than or equal to the sum of all other numbers in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, max_num, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and max_num >= path_sum - max_num:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        max_num = max(max_num, nums[i][j])\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_one, max_num, path_sum) or helper(i, j+1, found_one, max_num, path_sum)\n\n    return helper(0, 0, False, float('-inf'), 0)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 435,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[:-1], target - nums[-1]) or subset_sum(nums[:-1], target)\n    return subset_sum(nums, target)\n\ndef g(nums=[-5, -10, -15, -20, -25, -30, -35, -40, -45]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 446,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=15, k=4) -> bool:\n    \"\"\"Find if there exists a combination of k numbers in nums that add up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k))\ndef g(target=15, k=4):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 204,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a subset of the list whose sum is equal to the target number\"\"\"\n    for r in range(1, len(nums)+1):\n        for subset in itertools.combinations(nums, r):\n            if sum(subset) == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 468,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str]) -> bool:\n    \"\"\"Check if all words in the list are palindromes\"\"\"\n    return all(word == word[::-1] for word in words)\ndef g():\n    return ['level', 'deed', 'rotor']\nassert f(g())\n",
        "idx_generation": 73,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list whose sum is equal to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g())\n",
        "idx_generation": 47,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: Tuple[int, int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies inside a circle.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return ((x - a)**2 + (y - b)**2) <= c**2\ndef g(a=1, b=2, c=10):\n    return (a, b)\nassert f(g())\n",
        "idx_generation": 185,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a triple of numbers in the list whose sum is equal to the target.\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 489,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=7) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose product is divisible by k.\"\"\"\n    prefix_product = 1\n    remainders = {1}\n    for num in nums:\n        prefix_product = (prefix_product * num) % k\n        if prefix_product in remainders:\n            return True\n        remainders.add(prefix_product)\n    return False\n\ndef g(k=7):\n    return [i+1 for i in range(1, k+1)]\n\nassert f(g())\n",
        "idx_generation": 186,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nimport itertools\nfrom typing import*\ndef f(nums: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k+1 elements in the list such that their product is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(math.prod(comb) == target for comb in combinations(nums, k+1))\ndef g(k: int = 3):\n    return [1, 2, 3, 4, 5, 6, 7]\nassert f(g(), 120)\n",
        "idx_generation": 182,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target: int = 50) -> bool:\n    \"\"\"Check if the product of any two numbers in the list is less than the target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] * lst[j] < target:\n                return True\n    return False\n\ndef g(lst: List[int] = [2, 4, 6, 8, 10, 12, 14, 16, 18]):\n    return lst\n\nassert f(g())\n",
        "idx_generation": 365,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Given a list of integers, determine if there exists a pair of numbers in the list whose product is equal to the target value.\"\"\"\n    return any((lst[i] * lst[j] == target) for i in range(len(lst)) for j in range(i+1, len(lst)))\ndef g(lst=[2, 5, 10, 20, 25, 50, 100, 200, 400], target=100):\n    return lst\nassert f(g())\n\n",
        "idx_generation": 260,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if the sum of all numbers in the list 'nums' is greater than the target value.\"\"\"\n    total_sum = sum(nums)\n    return total_sum > target\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], target=20):\n    return nums\n\nassert f(g()) == True\n",
        "idx_generation": 339,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 296,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Check if there is a subarray of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=12):\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 206,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the maximum number in the path must be greater than or equal to the sum of all other numbers in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, max_num, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and max_num >= path_sum - max_num:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        max_num = max(max_num, nums[i][j])\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_one, max_num, path_sum) or helper(i, j+1, found_one, max_num, path_sum)\n\n    return helper(0, 0, False, float('-inf'), 0)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 435,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if it is possible to obtain the target value by rearranging the numbers\n    and performing logical AND and OR operations.\n    Each number in the list can be used only once.\"\"\"\n    def helper(nums, target):\n        if len(nums) == 0:\n            return target == 0\n        for i, num in enumerate(nums):\n            remaining = nums[:i] + nums[i+1:]\n            if helper(remaining, target & num):\n                return True\n            if helper(remaining, target | num):\n                return True\n        return False\n\n    return helper(nums, target)\n\ndef g(nums=[1, 2, 3]):\n    return nums\n\nassert f(g(), target=3)\n",
        "idx_generation": 467,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=18, max_nums=3, options=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Find a combination of at most max_nums numbers whose sum is the target value\"\"\"\n    for num in nums:\n        assert num in options\n    return len(nums) <= max_nums and sum(nums) == target\ndef g(target=18, max_nums=3, options=[2, 4, 6, 8, 10]):\n    from itertools import combinations\n    for n in range(1, max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n",
        "idx_generation": 208,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], substring=\"apple\") -> bool:\n    \"\"\"Check if any word in the list contains the given substring.\"\"\"\n    return any((substring in word) for word in words)\n\ndef g(substring=\"apple\"):\n    words = [\"pineapple\", \"banana\", \"orange\", \"grape\"]\n    return words\n\nassert f(g())\n",
        "idx_generation": 80,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=50) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is greater than or equal to the target value.\"\"\"\n    return any(x + y >= target for x in arr for y in arr)\ndef g(target=50):\n    return [5, 10, 15, 20, 25, 30, 35, 40, 45]\nassert f(g())\n",
        "idx_generation": 47,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import re\nfrom typing import*\ndef f(emails: List[str], domain='example.com') -> bool:\n    \"\"\"Check if all the emails in the given list belong to the specified domain\"\"\"\n    return all(re.search(f\"@{domain}$\", email) for email in emails)\n\ndef g(domain='example.com'):\n    return [f\"user{i}@{domain}\" for i in range(1, 6)]\n\nassert f(g())\n",
        "idx_generation": 191,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=5):\n    return [i**3 for i in range(1, k+1)]\n\nassert f(g())\n\n",
        "idx_generation": 188,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 20) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target value.\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\n\ndef g(target: int = 20):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 198,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, max_nums=4, options=[10, 20, 30, 40, 50]) -> bool:\n    \"\"\"Find a combination of at most max_nums numbers whose sum is the target value\"\"\"\n    for num in nums:\n        assert num in options\n    return len(nums) <= max_nums and sum(nums) == target\ndef g(target=100, max_nums=4, options=[10, 20, 30, 40, 50]):\n    from itertools import combinations\n    for n in range(1, max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n",
        "idx_generation": 369,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list contains any duplicate elements.\"\"\"\n    return len(arr) != len(set(arr))\n\ndef g():\n    return [i for i in range(10)] + [i for i in range(5, 15)]\n\nassert f(g())\n",
        "idx_generation": 264,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10) -> bool:\n    \"\"\"Check if n is a multiple of a\"\"\"\n    return n % a == 0\ndef g(a=10):\n    return a * 2\nassert f(g())\n",
        "idx_generation": 341,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find whether the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target]]\n\nassert f(g())\n\n",
        "idx_generation": 312,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=30) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=30):\n    return [3, 5, 7, 9, 11]\n\nassert f(g())\n",
        "idx_generation": 206,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down, right, or diagonally (down-right) in the grid. The path must contain the number 1 at least once and the sum of all the numbers in the path must be a prime number.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def helper(i, j, found_one, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and is_prime(path_sum):\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_one, path_sum) or helper(i, j+1, found_one, path_sum) or helper(i+1, j+1, found_one, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 436,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=10):\n    return [2, 4, 6, 8]\n\nassert f(g())\n",
        "idx_generation": 468,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom itertools import combinations\n\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if any combination of numbers in the list sums up to the target.\"\"\"\n    for r in range(1, len(nums) + 1):\n        for combination in combinations(nums, r):\n            if sum(combination) == target:\n                return True\n    return False\n\ndef g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8]\n\nassert f(g())\n",
        "idx_generation": 213,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='xyz', count=50, length=150) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring='xyz', count=50, length=150):\n    c = chr(1 + max((ord(c) for c in substring or 'a')))\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g())\n",
        "idx_generation": 88,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find the number of pairs in the list whose sum is equal to the target value.\"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                count += 1\n    return count\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g()) == 4\n",
        "idx_generation": 47,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if the given string starts with the specified character.\"\"\"\n    return s.startswith(char)\ndef g(char='a'):\n    return char + 'bcdefghijklmnopqrstuvwxyz'\nassert f(g())\n",
        "idx_generation": 199,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose sum is greater than or equal to k\"\"\"\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if sum(nums[i:j+1]) >= k:\n                return True\n    return False\n\ndef g(k=5):\n    return [1, 2, 3, 4]\n\nassert f(g())\n",
        "idx_generation": 194,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc', count=3) -> bool:\n    \"\"\"Check if the given string contains 'count' number of occurrences of the substring\"\"\"\n    return s.count(substring) == count\n\ndef g(substring='abc', count=3):\n    return substring * count + 'xyz' * (count - 1) + 'def'\n\nassert f(g())\n",
        "idx_generation": 207,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_product=100) -> bool:\n    \"\"\"Check if the product of any two numbers in the list is equal to target_product\"\"\"\n    return any(nums[i] * nums[j] == target_product for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_product=100):\n    return [n for n in range(1, target_product+1)]\n\nassert f(g())\n",
        "idx_generation": 387,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sum up to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=12):\n    nums = [2, 4, 6, 8, 10]\n    return nums\nassert f(g())\n",
        "idx_generation": 266,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=4) -> bool:\n    \"\"\"Check if a number is a power of k.\"\"\"\n    return n % k == 0\ndef g(k=4):\n    return k ** 3\nassert f(g())\n\n",
        "idx_generation": 352,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sum up to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n\nassert f(g())\n",
        "idx_generation": 313,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there is a subsequence in the list that sums up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 10)\n",
        "idx_generation": 218,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 0 at least once and the sum of all the numbers in the path must be divisible by the maximum number in the path.\"\"\"\n    rows = len(arr)\n    cols = len(arr[0])\n\n    def helper(i, j, found_zero, max_num, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_zero and path_sum % max_num == 0:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if arr[i][j] == 0:\n            found_zero = True\n        max_num = max(max_num, arr[i][j])\n        path_sum += arr[i][j]\n        return helper(i+1, j, found_zero, max_num, path_sum) or helper(i, j+1, found_zero, max_num, path_sum)\n\n    return helper(0, 0, False, float('-inf'), 0)\n\ndef g(arr=[[1, 2, 3], [4, 5, 6], [7, 0, 9]]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 438,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=15):\n    return [1, 3, 5, 7, 9]\n\nassert f(g())\n",
        "idx_generation": 484,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/3.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 1/3) ** 2 <= year_len\ndef g(year_len=365):\n    n = 1\n    distinct_prob = 1.0\n    best = (1/3, 1)\n    while distinct_prob > 1/3:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(1/3 - distinct_prob), n))\n    return best[1]\nassert f(g())\n",
        "idx_generation": 229,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(strings: List[str], prefix=\"abc\") -> bool:\n    \"\"\"Check if all strings in the list start with the given prefix\"\"\"\n    return all(string.startswith(prefix) for string in strings)\ndef g(prefix=\"abc\"):\n    strings = [\"abcde\", \"abcdefg\", \"abcxyz\"]\n    return strings\nassert f(g())\n",
        "idx_generation": 97,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "idx_generation": 48,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if there exists a row in the matrix that contains all zeros.\"\"\"\n    for row in matrix:\n        if all(num == 0 for num in row):\n            return True\n\n    return False\n\ndef g(target=0):\n    matrix = [[1, 2, 3], [0, 0, 0], [4, 5, 6]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 200,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=40) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=40):\n    return [4, 8, 12, 16, 20]\n\nassert f(g())\n",
        "idx_generation": 217,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(numbers: List[int], n=3) -> bool:\n    \"\"\"Check if the given list contains exactly n elements that are divisible by 5.\"\"\"\n    return len([x for x in numbers if x % 5 == 0]) == n\ndef g(n=3):\n    return [10, 15, 20, 25, 30, 35, 40, 45, 50, 55][:n]\nassert f(g())\n\n",
        "idx_generation": 220,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if it is possible to obtain the target sum by adding a subset of the given numbers in each row and column of the matrix, considering only positive numbers.\"\"\"\n    m, n = len(matrix), len(matrix[0])\n    for row in matrix:\n        for i in range(1 << n):\n            subset_sum = sum(row[j] for j in range(n) if (i & (1 << j)) != 0)\n            if subset_sum == target:\n                break\n        else:\n            return False\n    for j in range(n):\n        column = [matrix[i][j] for i in range(m)]\n        for i in range(1 << m):\n            subset_sum = sum(column[k] for k in range(m) if (i & (1 << k)) != 0)\n            if subset_sum == target:\n                break\n        else:\n            return False\n    return True\n\ndef g(target=0):\n    return [[1, 2, 3], [4, -5, 6], [7, 8, -9]]\n\nassert f(g())\n",
        "idx_generation": 407,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    return any(target - num in nums for num in nums)\ndef g(target=100):\n    return [i for i in range(target // 2)] + [target // 2]\nassert f(g())\n",
        "idx_generation": 269,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(arr: List[int], target_sum=20) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with all elements being perfect squares and the sum of the subarray is less than or equal to the target sum.\"\"\"\n    for i in range(len(arr)):\n        subarray_sum = 0\n        subarray_product = 1\n        for j in range(i, len(arr)):\n            subarray_sum += arr[j]\n            subarray_product *= arr[j]\n            if math.isqrt(subarray_product) ** 2 == subarray_product and subarray_sum <= target_sum:\n                return True\n    return False\n\ndef g():\n    return [2, 4, 9, 16, 5]\n\nassert f(g())\n",
        "idx_generation": 387,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a subsequence of numbers in the list that sum up to the target value\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        dp[i][0] = True\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=10):\n    return [3, 4, 2, 5, 1]\n\nassert f(g())\n",
        "idx_generation": 313,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there is a subarray of numbers in the list that multiply up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j // nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=0):\n    return [2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 219,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the maximum number in the path must be greater than or equal to the sum of all other numbers in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, max_num, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and max_num >= path_sum - max_num:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        max_num = max(max_num, nums[i][j])\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_one, max_num, path_sum) or helper(i, j+1, found_one, max_num, path_sum)\n\n    return helper(0, 0, False, float('-inf'), 0)\n\ndef g(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 439,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=20):\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 484,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/6.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 1/6) ** 2 <= year_len\ndef g(year_len=365):\n    n = 1\n    distinct_prob = 1.0\n    best = (1/6, 1)\n    while distinct_prob > 1/6:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(1/6 - distinct_prob), n))\n    return best[1]\nassert f(g())\n",
        "idx_generation": 229,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, k=2) -> bool:\n    \"\"\"Check if a string contains at most k occurrences of a specific character.\"\"\"\n    return string.count('c') <= k\ndef g(k=2):\n    return 'c' * k\nassert f(g())\n",
        "idx_generation": 103,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list whose product is greater than the target.\"\"\"\n    return any(nums[i] * nums[j] > target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 50,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_value=5) -> bool:\n    \"\"\"Find a value in the matrix that matches the target value\"\"\"\n    for row in matrix:\n        if target_value in row:\n            return True\n    return False\n\ndef g(target_value=5):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 227,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=15):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 217,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime, timedelta\n\ndef f(dates: List[datetime], time_diff=timedelta(hours=3)) -> bool:\n    \"\"\"Check if all the dates in the list are at least 3 hours apart from each other.\"\"\"\n    for i in range(len(dates)-1):\n        if dates[i+1] - dates[i] < time_diff:\n            return False\n    return True\n\ndef g(time_diff=timedelta(hours=3)):\n    return [datetime(2022, 1, 1, 10, 0, 0), datetime(2022, 1, 1, 13, 0, 0), datetime(2022, 1, 1, 16, 0, 0)]\n\nassert f(g())\n",
        "idx_generation": 225,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(seq: List[int], k=5, lower=10000) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is greater than or equal to a lower limit\"\"\"\n    return sum(seq[:k]) >= lower\ndef g(k=5, lower=10000):\n    return [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]\nassert f(g())\n",
        "idx_generation": 412,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Check if there exists two numbers in the list that add up to the target.\"\"\"\n    return any(target - num in numbers for num in numbers)\n\ndef g(target=20):\n    return [0, 10, 15, 5]\n\nassert f(g())\n",
        "idx_generation": 271,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if there exists three numbers in the list such that their sum is zero.\"\"\"\n    n = len(arr)\n    return any((arr[i] + arr[j] + arr[k] == 0 for i in range(n) for j in range(i+1, n) for k in range(j+1, n)))\ndef g():\n    arr = [random.randint(-10, 10) for _ in range(10)]\n    return arr\nassert f(g())\n",
        "idx_generation": 394,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_word: str = 'python') -> bool:\n    \"\"\"Check if the target word is present in the list of words.\"\"\"\n    return target_word in words\n\ndef g(words=['hello', 'world', 'python', 'programming']):\n    return words\n\nassert f(g())\n\n",
        "idx_generation": 320,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there is a subsequence of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=100):\n    return [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n\nassert f(g())\n",
        "idx_generation": 223,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the number 2 exactly once.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, found_two):\n        if i == rows - 1 and j == cols - 1 and found_two:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if nums[i][j] == 2:\n            found_two = True\n        return helper(i+1, j, found_one, found_two) or helper(i, j+1, found_one, found_two)\n\n    return helper(0, 0, False, False)\n\ndef g(nums=[[1, 0, 0], [2, 1, 0], [0, 2, 1]]):\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 440,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=5, c=7) -> bool:\n    \"\"\"Check if the given number n is divisible by a, b, and c\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\ndef g(a=3, b=5, c=7):\n    return a * b * c\n\nassert f(g())\n",
        "idx_generation": 485,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, max_nums=3, options=[10, 20, 30, 40, 50]) -> bool:\n    \"\"\"Find a combination of at most max_nums numbers whose sum is the target value\"\"\"\n    for num in nums:\n        assert num in options\n    return len(nums) <= max_nums and sum(nums) == target\ndef g(target=100, max_nums=3, options=[10, 20, 30, 40, 50]):\n    from itertools import combinations\n    for n in range(1, max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n",
        "idx_generation": 255,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, k=5) -> bool:\n    \"\"\"Check if a string contains more than k occurrences of a specific character.\"\"\"\n    return string.count('d') > k\ndef g(k=5):\n    return 'd' * (k + 1)\nassert f(g())\n",
        "idx_generation": 103,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2) -> bool:\n    \"\"\"Given a list of non-increasing integers and given an integer k, determine how many positive integers in the list\nare strictly larger than the kth.\"\"\"\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return all((s > scores[k] and s > 0 for s in scores[:n])) and all((s <= scores[k] or s <= 0 for s in scores[n:]))\ndef g(scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2):\n    threshold = max(scores[k], 1)\n    return sum((s > threshold for s in scores))\nassert f(g())\n",
        "idx_generation": 51,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(items: List[str], target='apple') -> bool:\n    \"\"\"Check if the target item exists in the given list.\"\"\"\n    return target in items\n\ndef g(target='apple'):\n    return ['banana', 'orange', 'apple', 'grape']\n\nassert f(g())\n",
        "idx_generation": 228,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers, find if there exist four numbers whose sum is equal to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                for l in range(k+1, len(nums)):\n                    if nums[i] + nums[j] + nums[k] + nums[l] == target:\n                        return True\n    return False\n\ndef g():\n    return [2, 5, 7, 11, 3, 9, 4, 6]\n\nassert f(g(), 30)\n",
        "idx_generation": 255,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exist three numbers in the list whose product is equal to the target value.\"\"\"\n    return any(x * y * z == target for x in arr for y in arr for z in arr)\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 228,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import *\ndef f(nums: List[int], target: int, k: int) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose sum of even indexed elements is equal to the target number, \n    and the length of the subsequence is less than or equal to k.\"\"\"\n    for r in range(1, len(nums) + 1):\n        for subset in itertools.combinations(nums, r):\n            even_index_sum = sum(subset[::2])\n            if even_index_sum == target and len(subset) <= k:\n                return True\n    return False\n\ndef g(target: int, k: int):\n    return [10, 20, 30, 40, 50], target, k\n\nassert f(*g(70, 3))\n",
        "idx_generation": 416,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(seq: List[int], target_sum=20) -> bool:\n    \"\"\"Find a subsequence of seq whose sum is less than target_sum\"\"\"\n    for i in range(len(seq)):\n        for j in range(i+1, len(seq)+1):\n            if sum(seq[i:j]) < target_sum:\n                return True\n    return False\n\ndef g(target_sum=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 278,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=7, b=3, c=15) -> bool:\n    \"\"\"Find n such that n + a is divisible by b and c\"\"\"\n    return (n + a) % b == 0 and (n + a) % c == 0\ndef g(a=7, b=3, c=15):\n    return (b * c) - a\nassert f(g())\n",
        "idx_generation": 424,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> List[int]:\n    \"\"\"Find the first occurrence of the target number in the list\"\"\"\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return [i]\n    return []\n\ndef g(target=0):\n    return [1, 0, 3, 0, 5, 0, 7, 0, 9]\n\nassert f(g()) == [1]\n",
        "idx_generation": 346,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there is a subset of numbers from the list that adds up to zero\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, 0)\ndef g(nums=[-1, 2, -3, 4, -5]):\n    return nums\nassert f(g())\n",
        "idx_generation": 237,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down, right, or diagonally (down-right) in the grid. The path must contain the number 1 at least once and the sum of the numbers in the path must be even.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and path_sum % 2 == 0:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_one, path_sum) or helper(i, j+1, found_one, path_sum) or helper(i+1, j+1, found_one, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 442,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list whose product is equal to the target number\"\"\"\n    return any(a * b * c == target for (a, b, c) in itertools.combinations(numbers, 3))\n\ndef g(target: int):\n    return [2, 3, 4, 5, 6], target\n\nassert f(*g(120))\n",
        "idx_generation": 273,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='puzzle', count=2, length=14) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring='puzzle', count=2, length=14):\n    c = chr(1 + max((ord(c) for c in substring or 'a')))\n    return substring * count + (length - len(substring) * count) * c\nassert f(g())\n",
        "idx_generation": 104,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target number, find any two numbers in the list that add up to the target.\nSample Input:\n[2, 4, 6, 8, 10]\nSample Output:\nTrue\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    return [2, 8]\nassert f(g())\n",
        "idx_generation": 53,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], target_length=5) -> bool:\n    \"\"\"Check if there exists a name in the list with a length greater than or equal to the target_length\"\"\"\n    for name in names:\n        if len(name) >= target_length:\n            return True\n    return False\n\ndef g(target_length=5):\n    return ['John', 'Sarah', 'Michael', 'Amy']\n\nassert f(g())\n",
        "idx_generation": 231,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Determine if there exists a subset of numbers in the given array that divides evenly into the target product\"\"\"\n    dp = [[False] * (target + 1) for _ in range(len(arr) + 1)]\n    for i in range(len(arr) + 1):\n        dp[i][1] = True\n    for i in range(1, len(arr) + 1):\n        for j in range(2, target + 1):\n            if arr[i-1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j // arr[i-1]]\n    return dp[len(arr)][target]\n\ndef g(target=20):\n    return [i for i in range(1, target+1)]\n\nassert f(g())\n",
        "idx_generation": 272,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=3) -> bool:\n    \"\"\"Check if there exists a substring of length 'target' that consists of only vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    for i in range(len(s)-target+1):\n        substring = s[i:i+target]\n        if all(char in vowels for char in substring):\n            return True\n    return False\n\ndef g(target=3):\n    return \"aeiou\"\n\nassert f(g())\n",
        "idx_generation": 235,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=15) -> bool:\n    \"\"\"Check if it is possible to find two numbers in a given list that multiply to give the target product.\n    Return True if such pair exists, False otherwise.\"\"\"\n    nums = set(numbers)\n    for num in nums:\n        if target_sum % num == 0 and target_sum // num in nums:\n            return True\n    return False\n\ndef g(numbers: List[int], target_sum=15):\n    return numbers\n\nassert f(g([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n",
        "idx_generation": 429,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two different numbers in the list 'nums' that have a product equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g(), target=20)\n",
        "idx_generation": 287,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if the given matrix is a magic square.\n    A magic square is a square matrix where the sum of each row, each column, and both diagonals are the same.\"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for j in range(n):\n        if sum(matrix[i][j] for i in range(n)) != target_sum:\n            return False\n    \n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    \n    if sum(matrix[i][n-i-1] for i in range(n)) != target_sum:\n        return False\n    \n    return True\n\ndef g(matrix=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 426,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=7) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=7):\n    return [i**3 for i in range(1, k+1)]\n\nassert f(g())\n",
        "idx_generation": 352,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Check if there exists a subset of the given list whose elements multiply to the target number.\"\"\"\n    def subset_product(nums, target, n):\n        if target == 1:\n            return True\n        if n == 0:\n            return False\n        if nums[n-1] > target:\n            return subset_product(nums, target, n-1)\n        return subset_product(nums, target, n-1) or subset_product(nums, target//nums[n-1], n-1)\n    return subset_product(nums, target, len(nums))\n\ndef g(nums=[5, 2, 10, 1, 5], target=25):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 244,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 2 at least once and the number 3 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_two, found_three):\n        if i == rows - 1 and j == cols - 1 and found_two:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 3:\n            found_three += 1\n            if found_three > 2:\n                return False\n        if nums[i][j] == 2:\n            found_two = True\n        return helper(i+1, j, found_two, found_three) or helper(i, j+1, found_two, found_three)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[2, 0, 0], [3, 2, 0], [0, 3, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 444,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=100) -> bool:\n    \"\"\"Given a list of numbers, find a combination of numbers that adds up to the target number.\"\"\"\n    def helper(arr, target, path):\n        if target == 0:\n            return True\n        if target < 0:\n            return False\n        for i in range(len(arr)):\n            if helper(arr[i+1:], target-arr[i], path + [arr[i]]):\n                return True\n        return False\n\n    return helper(n, target, [])\n\ndef g(target=100):\n    return [i for i in range(1, target + 1)]\n\nassert f(g())\n",
        "idx_generation": 280,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(substring: str, string='nyvyfytibuquyquuchudemixyzychumanachozyquiquowutextyvomyzychyme', count=4, start=0) -> bool:\n    \"\"\"Find a substring with a certain count in a given string, starting from a specific index\"\"\"\n    return string.count(substring, start) == count\n\ndef g(string='nyvyfytibuquyquuchudemixyzychumanachozyquiquowutextyvomyzychyme', count=4, start=10):\n    for i in range(start, len(string)):\n        for j in range(i + 1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False\n\nassert f(g())\n",
        "idx_generation": 105,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose sum is equal to the target value.\"\"\"\n    return any(target - x in numbers for x in numbers)\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 54,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(points: List[Tuple[int, int]], target_len=5) -> bool:\n    \"\"\"Check if the points form a parallelogram with an area greater than or equal to 20 square units.\nThe parallelogram is formed by the given points, each represented as a tuple of (x, y) coordinates.\"\"\"\n    assert len(points) == 4, \"Exactly 4 points are required to form a parallelogram.\"\n    x_coords = [point[0] for point in points]\n    y_coords = [point[1] for point in points]\n    min_x = min(x_coords)\n    max_x = max(x_coords)\n    min_y = min(y_coords)\n    max_y = max(y_coords)\n    width = max_x - min_x\n    height = max_y - min_y\n    area = width * height\n    return area >= 20 and len(set(points)) == 4\ndef g():\n    return [(0, 0), (0, 4), (6, 4), (6, 0)]\nassert f(g())\n",
        "idx_generation": 232,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(seq: List[int], target_sum=15) -> bool:\n    \"\"\"Find a subsequence of seq whose sum is greater than or equal to target_sum\"\"\"\n    for i in range(len(seq)):\n        for j in range(i+1, len(seq)+1):\n            if sum(seq[i:j]) >= target_sum:\n                return True\n    return False\n\ndef g(target_sum=15):\n    return [1, 2, 3, 4, 5, 6, 7]\n\nassert f(g())\n",
        "idx_generation": 278,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that adds up to the target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=20):\n    nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n    return nums\nassert f(g())\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list of integers contains a subarray that forms a palindrome\"\"\"\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            subarray = arr[i:j+1]\n            if subarray == subarray[::-1]:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 2, 1, 4]\n\nassert f(g())\n",
        "idx_generation": 450,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=25):\n    return [5, 10, 15, 20, 25, 30, 35, 40]\n\nassert f(g())\n",
        "idx_generation": 290,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray where the sum of all elements is a multiple of 5.\"\"\"\n    for i in range(len(arr)):\n        subarray_sum = 0\n        for j in range(i, len(arr)):\n            subarray_sum += arr[j]\n            if subarray_sum % 5 == 0:\n                return True\n    return False\n\ndef g():\n    return [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]\n\nassert f(g())\n",
        "idx_generation": 479,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], max_length=10) -> bool:\n    \"\"\"Check if all the names in the list have length less than or equal to max_length\"\"\"\n    return all(len(name) <= max_length for name in names)\ndef g(max_length=10):\n    return ['John', 'Jane', 'Michael']\nassert f(g())\n",
        "idx_generation": 361,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a subset of the list whose sum is equal to the target_sum\"\"\"\n    def subset_sum(nums, n, target):\n        if target == 0:\n            return True\n        if n == 0 and target != 0:\n            return False\n        if nums[n-1] > target:\n            return subset_sum(nums, n-1, target)\n        return subset_sum(nums, n-1, target) or subset_sum(nums, n-1, target-nums[n-1])\n\n    return subset_sum(lst, len(lst), target_sum)\n\ndef g(target_sum=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n\nassert f(g())\n",
        "idx_generation": 249,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and every number in the path must be a power of 2.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one):\n        if i == rows - 1 and j == cols - 1 and found_one:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if not is_power_of_two(nums[i][j]):\n            return False\n        return helper(i+1, j, found_one) or helper(i, j+1, found_one)\n\n    return helper(0, 0, False)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\ndef is_power_of_two(n):\n    return n > 0 and (n & (n - 1)) == 0\n\nassert f(g())\n",
        "idx_generation": 444,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=15, b=3, c=10) -> bool:\n    \"\"\"Find n such that n + a is equal to the product of b and the sum of the first c odd numbers\"\"\"\n    return n + a == b * sum([i for i in range(1, 2*c+1) if i%2==1])\ndef g(a=15, b=3, c=10):\n    return -a + b * sum([i for i in range(1, 2*c+1) if i%2==1])\nassert f(g())\n",
        "idx_generation": 299,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(substrings: List[str], s='rywixekugagethathulisitextanyp', count=451) -> bool:\n    \"\"\"Find a list of >= count distinct strings that are all contained in s. Additionally, the strings should have at least one vowel in them.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings)) and any((any((vowel in sub for vowel in vowels)) for sub in substrings))\n    \ndef g(s='rywixekugagethathulisitextanyp', count=451):\n    return [''] + sorted(set(s[j:i] for i in range(len(s) + 1) for j in range(i)))\n\nassert f(g())\n",
        "idx_generation": 122,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n=5) -> bool:\n    \"\"\"Check if the sum of n smallest elements in a list is divisible by 3\"\"\"\n    return sum(sorted(arr)[:n]) % 3 == 0\ndef g(n=5):\n    return list(range(1, n+1))\nassert f(g())\n",
        "idx_generation": 54,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"Find whether the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=50):\n    return [[10, 20, 30], [40, 50, 60], [70, 80, target]]\n\nassert f(g())\n\n",
        "idx_generation": 248,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=20):\n    return [2, 4, 6, 8, 10, 12, 14, 16]\n\nassert f(g())\n",
        "idx_generation": 290,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target number, find if there exists a pair of numbers in the list such that their product is equal to the target.\nSample Input:\n[2, 4, 5, 6]\nSample Output:\nTrue\"\"\"\n    return any((nums[i] * nums[j] == target) for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(target=10):\n    return [2, 5]\nassert f(g())\n",
        "idx_generation": 242,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> List[int]:\n    \"\"\"Return a list containing the indices of all occurrences of the target number in the given list\"\"\"\n    indices = []\n    for i in range(len(nums)):\n        if nums[i] == target:\n            indices.append(i)\n    return indices\n\ndef g(target=0):\n    return [1, 0, 3, 0, 5, 0, 7, 0, 9]\n\nassert f(g()) == [1, 3, 5, 7]\n",
        "idx_generation": 469,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that divide the target\"\"\"\n    seen = set()\n    for num in nums:\n        if num != 0 and target % num == 0 and target // num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=15):\n    nums = [1, 2, 3, 4, 5, 6]\n    return nums\nassert f(g())\n",
        "idx_generation": 301,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]]) -> bool:\n    \"\"\"Check if all elements in the 2D array are even numbers.\"\"\"\n    for row in arr:\n        for num in row:\n            if num % 2 != 0:\n                return False\n    return True\n\ndef g():\n    return [[2, 4, 6], [8, 10, 12], [14, 16, 18]]\n\nassert f(g())\n",
        "idx_generation": 486,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=15) -> bool:\n    \"\"\"Check if there exists a row in the matrix that has a sum equal to the target_sum.\"\"\"\n    return any(sum(row) == target_sum for row in matrix)\n\ndef g(target_sum=15):\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9],\n            [10, 11, 12]]\n\nassert f(g())\n",
        "idx_generation": 407,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=10):\n    return [1, 2, 3, 4]\n\nassert f(g())\n",
        "idx_generation": 250,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 3 at least once and the number 1 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_three, found_one):\n        if i == rows - 1 and j == cols - 1 and found_three:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one += 1\n            if found_one > 2:\n                return False\n        if nums[i][j] == 3:\n            found_three = True\n        return helper(i+1, j, found_three, found_one) or helper(i, j+1, found_three, found_one)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[3, 0, 0], [1, 3, 0], [0, 1, 3]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 446,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Find if there exists a subset of numbers whose sum is equal to 10\"\"\"\n    return any(sum(comb) == 10 for r in range(len(numbers) + 1) for comb in itertools.combinations(numbers, r))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 300,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(items: List[str], target_item='apple') -> bool:\n    \"\"\"Check if the target item is in the list 'items' and if the number of occurrences of the target item is greater than 2.\"\"\"\n    count = items.count(target_item)\n    return count > 2\n\ndef g(items=['apple', 'banana', 'cherry', 'apple', 'date', 'apple']):\n    return items\n\nassert f(g())\n",
        "idx_generation": 123,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is greater than the target\"\"\"\n    return any(a * b > target for i, a in enumerate(nums) for b in nums[i+1:])\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nassert f(g())\n",
        "idx_generation": 59,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, t: str) -> bool:\n    \"\"\"Given two strings s and t, check if t is an anagram of s.\"\"\"\n    return sorted(s) == sorted(t)\ndef g():\n    return \"listen\", \"silent\"\nassert f(*g())\n",
        "idx_generation": 252,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=40) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=40):\n    return [4, 8, 12, 16, 20, 24, 28, 32]\n\nassert f(g())\n",
        "idx_generation": 290,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[str]) -> bool:\n    \"\"\"Check if all the strings in the list start with the letter 'A'\"\"\"\n    for string in nums:\n        if not string.startswith('A'):\n            return False\n    return True\ndef g():\n    return ['Apple', 'Apricot', 'Avocado']\nassert f(g())\n",
        "idx_generation": 247,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in a list that multiply to give the target value.\"\"\"\n    return any((nums[i] * nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\n\ndef g(target=10):\n    return [1, 2, 5, target//5]\n\nassert f(g())\n",
        "idx_generation": 305,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if the sum of any two elements in the list is divisible by 7.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i] + arr[j]) % 7 == 0:\n                return True\n    return False\n\ndef g():\n    return [3, 6, 2, 9, 5, 1, 4, 8, 7, 10]\n\nassert f(g())\n",
        "idx_generation": 499,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Determine if there exists a triplet of numbers in the list that sum up to the target value.\"\"\"\n    return any((numbers[i] + numbers[j] + numbers[k] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)) for k in range(j+1, len(numbers)))\n\ndef g(target=100):\n    numbers = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 408,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=100):\n    return [10, 20, 30, 40]\n\nassert f(g())\n",
        "idx_generation": 250,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 5 at least once and the number 2 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_five, found_two):\n        if i == rows - 1 and j == cols - 1 and found_five >= 1:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            found_two += 1\n            if found_two > 2:\n                return False\n        if nums[i][j] == 5:\n            found_five += 1\n        return helper(i+1, j, found_five, found_two) or helper(i, j+1, found_five, found_two)\n\n    return helper(0, 0, 0, 0)\n\ndef g(nums=[[5, 0, 0], [2, 5, 0], [0, 2, 5]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 453,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, max_nums=6, options=[10, 20, 30, 40, 50]) -> bool:\n    \"\"\"Find a combination of at most max_nums numbers whose sum is the target value\"\"\"\n    for num in nums:\n        assert num in options\n    return len(nums) <= max_nums and sum(nums) == target\ndef g(target=100, max_nums=6, options=[10, 20, 30, 40, 50]):\n    from itertools import combinations\n    for n in range(1, max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n",
        "idx_generation": 304,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, string='banana') -> bool:\n    \"\"\"Check if the given string contains exactly n occurrences of the letter 'a'.\"\"\"\n    return n == string.count('a')\ndef g(string='banana'):\n    return string.count('a')\nassert f(g())\n",
        "idx_generation": 128,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any(x + y == target for x in nums for y in nums)\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 66,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'jujube', 'kiwi']) -> bool:\n    \"\"\"Check if a given string is a concatenation of two words from a list.\"\"\"\n    for i in range(len(s)):\n        word1 = s[:i]\n        word2 = s[i:]\n        if word1 in words and word2 in words:\n            return True\n    return False\n\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'jujube', 'kiwi']):\n    return 'applefig'\n\nassert f(g())\n",
        "idx_generation": 267,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Determine if the given list contains a subsequence that sums up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]\n\ndef g():\n    nums = [2, 4, 6, 8, 10]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 312,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list 'nums' whose sum is equal to the target_sum.\"\"\"\n    return any((nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums))))\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g(), target_sum=10)\n",
        "idx_generation": 251,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sums up to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=10):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 307,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target=0, start=0) -> bool:\n    \"\"\"Check if the target number is present in the given list starting from the specified index.\"\"\"\n    return target in lst[start:]\n\ndef g(target=0, start=0):\n    return [i for i in range(10)] + [target]\n\nassert f(g())\n",
        "idx_generation": 415,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=12, b=4) -> bool:\n    \"\"\"Find n such that n is divisible by a, b, and their average.\"\"\"\n    return n % a == 0 and n % b == 0 and n % ((a + b) / 2) == 0\n\ndef g(a=12, b=4):\n    return a * b * (a + b)\n\nassert f(g())\n",
        "idx_generation": 267,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down, right, or diagonally (down-right) in the grid. The path must contain the number 2 at least once and the sum of the numbers in the path must be odd.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_two, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_two and path_sum % 2 != 0:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            found_two = True\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_two, path_sum) or helper(i, j+1, found_two, path_sum) or helper(i+1, j+1, found_two, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[1, 2, 1], [2, 2, 2], [3, 3, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 453,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find if there exists four numbers in the list whose sum is equal to the target sum\"\"\"\n    for i in range(len(nums)-3):\n        for j in range(i+1,len(nums)-2):\n            for k in range(j+1,len(nums)-1):\n                for l in range(k+1,len(nums)):\n                    if nums[i]+nums[j]+nums[k]+nums[l]==target:\n                        return True\n    return False\n\ndef g(target=20):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 319,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='a', count=5, length=50) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring='a', count=5, length=50):\n    c = chr(1 + max((ord(c) for c in substring or 'a')))\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g())\n",
        "idx_generation": 134,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(moves: List[List[int]], initial_state=[2, 5, 3, 7, 0]) -> bool:\n    \"\"\"Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\nremoving one or more objects from a single non-empty heap. The player who takes the last object wins.\n- initial_state is list of numbers of objects in each heap\n- moves is a list of your moves: [heap, number of objects to take]\n- you play first\"\"\"\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state=[2, 5, 3, 7, 0]):\n    state = initial_state[:]\n    moves = []\n    def bot_move():\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    def losing(h):\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g())\n",
        "idx_generation": 67,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], target: str) -> bool:\n    \"\"\"Check if there exists a string in the list that is equal to the target string\"\"\"\n    return target in strings\n\ndef g(target: str):\n    return ['apple', 'banana', 'orange'], target\n\nassert f(*g('banana'))\n",
        "idx_generation": 270,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target modulo 7\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 315,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(nums: List[int], n=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose difference is greater than n.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if abs(nums[i] - nums[j]) > n:\n                return True\n    return False\n\ndef g(n=10):\n    return [1, 11, 21, 31, 41, 51, 61, 71, 81, 91]\n\nassert f(g())\n",
        "idx_generation": 261,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiply to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(target=15):\n    return [1, 3, 5, 7, 9, 11]\n\nassert f(g())\n",
        "idx_generation": 308,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with all elements being odd numbers.\"\"\"\n    for i in range(len(arr)):\n        subarray_product = 1\n        for j in range(i, len(arr)):\n            subarray_product *= arr[j]\n            if subarray_product % 2 != 0:\n                return True\n    return False\n\ndef g():\n    return [2, 4, 9, 16, 5]\n\nassert f(g())\n",
        "idx_generation": 433,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Determine if there exists a subset of numbers in the given array that adds up to the target sum\"\"\"\n    dp = [[False] * (target + 1) for _ in range(len(arr) + 1)]\n    for i in range(len(arr) + 1):\n        dp[i][0] = True\n    for i in range(1, len(arr) + 1):\n        for j in range(1, target + 1):\n            if arr[i-1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i-1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[len(arr)][target]\n\ndef g(target=20):\n    return [i for i in range(1, target+1)]\n\nassert f(g())\n",
        "idx_generation": 272,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down, right, or diagonally (down-right) in the grid. The path must contain the number 3 at least once and the sum of the numbers in the path must be even.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_three, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_three and path_sum % 2 == 0:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 3:\n            found_three = True\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_three, path_sum) or helper(i, j+1, found_three, path_sum) or helper(i+1, j+1, found_three, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[1, 2, 1], [2, 3, 2], [3, 3, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 455,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of no two people having the same birthday in a group of n is near 1/4.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) == n for j in range(K))) / K\n    return (prob - 1/4) ** 2 <= year_len\ndef g(year_len=365):\n    n = 1\n    distinct_prob = 1.0\n    best = (1/4, 1)\n    while distinct_prob > 1/4:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(1/4 - distinct_prob), n))\n    return best[1]\nassert f(g())\n",
        "idx_generation": 337,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(strings: List[str], target='python') -> bool:\n    \"\"\"Check if any string in the list contains the target substring\"\"\"\n    return any((target in s for s in strings))\ndef g(strings=['hello', 'world', 'python', 'programming']):\n    return strings\nassert f(g())\n",
        "idx_generation": 144,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(moves: List[List[int]], initial_state=[2, 5, 3, 7, 0]) -> bool:\n    \"\"\"Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\nremoving one or more objects from a single non-empty heap. The player who takes the last object wins.\n- initial_state is list of numbers of objects in each heap\n- moves is a list of your moves: [heap, number of objects to take]\n- you play first\"\"\"\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state=[2, 5, 3, 7, 0]):\n    state = initial_state[:]\n    moves = []\n    def bot_move():\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    def losing(h):\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n    def optimal_move():\n        assert not losing(state)\n        for i in reversed(range(len(state))):\n            for n in reversed(range(1, state[i] + 1)):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g())\n",
        "idx_generation": 71,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target number\"\"\"\n    return any((a + b == target) for (a, b) in itertools.combinations(numbers, 2))\n\ndef g(target: int):\n    return [2, 4, 6, 8, 10], target\n\nassert f(*g(12))\n",
        "idx_generation": 270,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=20):\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18]\n\nassert f(g())\n\n",
        "idx_generation": 322,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if a list contains duplicate elements.\"\"\"\n    return len(arr) != len(set(arr))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]\n\nassert f(g())\n",
        "idx_generation": 261,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [25, 75, 40, 10]\n\nassert f(g())\n",
        "idx_generation": 309,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with all elements being even numbers.\"\"\"\n    for i in range(len(arr)):\n        subarray_product = 1\n        for j in range(i, len(arr)):\n            subarray_product *= arr[j]\n            if subarray_product % 2 == 0:\n                return True\n    return False\n\ndef g():\n    return [2, 4, 9, 16, 5]\n\nassert f(g())\n",
        "idx_generation": 433,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Determine if there exists a subset of numbers in the given array that subtracts down to the target difference\"\"\"\n    dp = [[False] * (target + 1) for _ in range(len(arr) + 1)]\n    for i in range(len(arr) + 1):\n        dp[i][0] = True\n    for i in range(1, len(arr) + 1):\n        for j in range(1, target + 1):\n            if arr[i-1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i-1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[len(arr)][target]\n\ndef g(target=20):\n    return [i for i in range(1, target+1)]\n\nassert f(g())\n",
        "idx_generation": 272,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]], target=4) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 3 at least once and the number target exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_three, found_target):\n        if i == rows - 1 and j == cols - 1 and found_three:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == target:\n            found_target += 1\n            if found_target > 2:\n                return False\n        if nums[i][j] == 3:\n            found_three = True\n        return helper(i+1, j, found_three, found_target) or helper(i, j+1, found_three, found_target)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[3, 0, 0], [4, 3, 0], [0, 4, 3]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 461,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(numbers: List[int], target_sum=100, group_size=3) -> bool:\n    \"\"\"Find a list of group_size numbers from numbers that add up to target_sum\"\"\"\n    return any(sum(group) == target_sum for group in itertools.combinations(numbers, group_size))\n\ndef g(target_sum=100, group_size=3):\n    numbers = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 340,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if a string contains exactly n vowels.\nSolution should be a string with n vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count == n\n\ndef g(n=5):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join(vowels[:n])\n\nassert f(g())\n",
        "idx_generation": 152,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if it is possible to find two numbers in a given list that sum up to a target sum.\n    Return True if such pair exists, False otherwise.\"\"\"\n    numbers.sort()\n    left = 0\n    right = len(numbers) - 1\n    while left < right:\n        current_sum = numbers[left] + numbers[right]\n        if current_sum == target_sum:\n            return True\n        elif current_sum < target_sum:\n            left += 1\n        else:\n            right -= 1\n    return False\ndef g(numbers: List[int], target_sum=10):\n    numbers = list(set(numbers))\n    return numbers\nassert f(g([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\n",
        "idx_generation": 76,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, n=5) -> bool:\n    \"\"\"Check if a string is a palindrome of length n\"\"\"\n    return string == string[::-1] and len(string) == n\ndef g(n=5):\n    return 'level'\nassert f(g())\n",
        "idx_generation": 275,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(seq: List[int], target_sum=15) -> bool:\n    \"\"\"Find a subsequence of seq whose sum is equal to target_sum\"\"\"\n    for i in range(len(seq)):\n        for j in range(i+1, len(seq)+1):\n            if sum(seq[i:j]) == target_sum:\n                return True\n    return False\n\ndef g(target_sum=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 343,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(numbers: List[int], target: int, k: int) -> bool:\n    \"\"\"Check if there exists a k-sized combination of numbers in the list whose sum is equal to the target number\"\"\"\n    return any(sum(comb) == target for comb in itertools.combinations(numbers, k))\n\ndef g(target: int, k: int):\n    return [1, 3, 5, 7, 9], target, k\n\nassert f(*g(15, 3))\n",
        "idx_generation": 273,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=10):\n    return [3, 4, 2, 5, 1]\n\nassert f(g())\n",
        "idx_generation": 309,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:\n    \"\"\"Given a list of integers, return a new list where each element is the product of all other elements in the original list.\"\"\"\n    n = len(nums)\n    left_product = [1] * n\n    right_product = [1] * n\n    result = [1] * n\n\n    for i in range(1, n):\n        left_product[i] = left_product[i - 1] * nums[i - 1]\n\n    for i in range(n - 2, -1, -1):\n        right_product[i] = right_product[i + 1] * nums[i + 1]\n\n    for i in range(n):\n        result[i] = left_product[i] * right_product[i]\n\n    return result\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == [120, 60, 40, 30, 24]\n",
        "idx_generation": 447,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=16) -> bool:\n    \"\"\"Check if it is possible to find a combination of numbers that adds up to the target number.\"\"\"\n    def helper(numbers, target):\n        if target == 0:\n            return True\n        if target < 0 or len(numbers) == 0:\n            return False\n        return helper(numbers[1:], target - numbers[0]) or helper(numbers[1:], target)\n    return helper(numbers, target)\n\ndef g():\n    return [2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 283,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grid: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 2 at least once and the number 4 exactly once.\"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n\n    def helper(i, j, found_two, found_four):\n        if i == rows - 1 and j == cols - 1 and found_four:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if grid[i][j] == 4:\n            found_four = True\n        if grid[i][j] == 2:\n            found_two += 1\n        return helper(i+1, j, found_two, found_four) or helper(i, j+1, found_two, found_four)\n\n    return helper(0, 0, 0, False)\n\ndef g(grid=[[2, 0, 0], [4, 2, 0], [0, 4, 0]]):\n    return grid\n\nassert f(g())\n",
        "idx_generation": 462,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list whose sum is less than the target.\"\"\"\n    return any(nums[i] + nums[j] < target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g():\n    return [10, 12, 15, 8, 5]\nassert f(g())\n",
        "idx_generation": 347,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\n\ndef f(inds: List[int], s='kibozekiboze', target='') -> bool:\n    \"\"\"Check if the three slice indices in the given list give the specific target in string s\"\"\"\n    (i, j, k) = inds\n    return s[i:j:k] == target\n\ndef g(s='kibozekiboze', target=''):\n    for (i, j, k) in itertools.product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\n\nassert f(g())\n",
        "idx_generation": 157,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in nums that add up to target.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=10):\n    nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n    return nums\nassert f(g())\n",
        "idx_generation": 79,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(items: List[str], max_length=10) -> bool:\n    \"\"\"Find an item in the list that has a length less than or equal to a given maximum length\"\"\"\n    return any(len(item) <= max_length for item in items)\ndef g(max_length=10):\n    return ['apple', 'banana', 'orange', 'grape']\nassert f(g())\n",
        "idx_generation": 285,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if the list can be divided into two subarrays with equal sums.\"\"\"\n    total_sum = sum(nums)\n    if total_sum % 2 != 0:\n        return False\n    half_sum = total_sum // 2\n    n = len(nums)\n    dp = [[False for _ in range(half_sum + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, half_sum + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][half_sum]\n\ndef g(target=50):\n    return [10, 20, 30, 40, 50, 60, 70, 80]\n\nassert f(g())\n",
        "idx_generation": 344,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], letter='a') -> bool:\n    \"\"\"Check if any word in the given list starts with the given letter.\"\"\"\n    return any(word.startswith(letter) for word in words)\n\ndef g(letter='a'):\n    return ['apple', 'banana', 'orange', 'grape']\n\nassert f(g())\n",
        "idx_generation": 276,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Find a pair of numbers in a list that add up to the target value.\"\"\"\n    return any((nums[i]+nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\n    \ndef g(target=50):\n    return [10, 20, 30, 40, target//2]\n\nassert f(g())\n",
        "idx_generation": 319,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is a symmetric matrix.\"\"\"\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix)))\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 454,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Check if it is possible to find a combination of numbers that subtracts from the target number.\"\"\"\n    def helper(numbers, target):\n        if target == 0:\n            return True\n        if target < 0 or len(numbers) == 0:\n            return False\n        return helper(numbers[1:], target - numbers[0]) or helper(numbers[1:], target)\n    return helper(numbers, target)\n\ndef g():\n    return [2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 283,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers. You can only move down or right in the grid. The path must contain the number 4 at least once and the sum of all numbers along the path must be a multiple of 4.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    def is_multiple_of_four(n):\n        return n % 4 == 0\n\n    def helper(i, j, found_four, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_four and is_multiple_of_four(path_sum):\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if matrix[i][j] == 4:\n            found_four = True\n        path_sum += matrix[i][j]\n        return helper(i+1, j, found_four, path_sum) or helper(i, j+1, found_four, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(matrix=[[1, 2, 4], [4, 3, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 463,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/3.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 1/3) ** 2 <= year_len\ndef g(year_len=365):\n    n = 1\n    distinct_prob = 1.0\n    best = (1/3, 1)\n    while distinct_prob > 1/3:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(1/3 - distinct_prob), n))\n    return best[1]\nassert f(g())\n",
        "idx_generation": 350,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3, c='b') -> bool:\n    \"\"\"Check if the character c appears n times consecutively in the given string s\"\"\"\n    return s.count(c * n) > 0\ndef g(n=3, c='b'):\n    return c * n\nassert f(g())\n",
        "idx_generation": 167,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=7) -> bool:\n    \"\"\"Check if there are two numbers in nums that sum up to target.\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\ndef g(target=7):\n    nums = [1, 2, 3, 4, 5, 6]\n    return nums\nassert f(g())\n",
        "idx_generation": 80,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(inds: List[int], string='programming') -> bool:\n    \"\"\"Find indices to make the substring \"gra\" (with a surprise twist)\"\"\"\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'gra'\ndef g(string='programming'):\n    target = 'gra'\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans\nassert f(g())\n",
        "idx_generation": 289,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], n=6, s=18) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a % 2 == 0 for a in x])\ndef g(n=6, s=18):\n    x = [2] * (n-1)\n    x.append(s - 2*(n-1))\n    return x\nassert f(g())\n",
        "idx_generation": 351,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], char_count=5) -> bool:\n    \"\"\"Check if there exists a word in the list that has a character count equal to the specified value\"\"\"\n    for word in words:\n        if len(word) == char_count:\n            return True\n    return False\n\ndef g(char_count=5):\n    words = [\"apple\", \"banana\", \"cherry\", \"grape\", \"kiwi\"]\n    return words\n\nassert f(g())\n\n",
        "idx_generation": 279,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int=10) -> bool:\n    \"\"\"Find a pair of numbers from the list whose sum is equal to the target\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums: List[int]=[2, 4, 6, 3, 1, 5]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 323,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=6, lower=100, seq=[-5, -10, 15, 20, -25, -30, 35, 40, -45, -50]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose product is maximal, possibly looping around\"\"\"\n    prod = 1\n    for i in range(start, start + k):\n        prod *= seq[i]\n    return prod >= lower\n\ndef g(k=6, lower=100, seq=[-5, -10, 15, 20, -25, -30, 35, 40, -45, -50]):\n    def prod(start):\n        ans = 1\n        for i in range(start, start + k):\n            ans *= seq[i]\n        return ans\n    return max(range(-len(seq), len(seq) - k + 1), key=prod)\n\nassert f(g())\n",
        "idx_generation": 460,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=15):\n    return [1, 3, 5, 7, 9, 11]\n\nassert f(g())\n",
        "idx_generation": 289,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers. You can only move down or right in the grid. The path must contain the number 2 at least once and the sum of all numbers along the path must be a multiple of 2.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    def is_multiple_of_two(n):\n        return n % 2 == 0\n\n    def helper(i, j, found_two, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_two and is_multiple_of_two(path_sum):\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if matrix[i][j] == 2:\n            found_two = True\n        path_sum += matrix[i][j]\n        return helper(i+1, j, found_two, path_sum) or helper(i, j+1, found_two, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(matrix=[[1, 2, 3], [4, 3, 6], [7, 8, 2]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 463,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10, k=3) -> bool:\n    \"\"\"Check if there exists a combination of k numbers in nums that add up to the target\"\"\"\n    from itertools import combinations\n    return any(sum(comb) == target for comb in combinations(nums, k))\ndef g(target=10, k=3):\n    return [5, 2, 1, 3, 4, 6]\nassert f(g())\n",
        "idx_generation": 360,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5, c='y') -> bool:\n    \"\"\"Check if the character c appears at most n times in the given string s\"\"\"\n    return s.count(c) <= n\n\ndef g(n=5, c='y'):\n    return c * n\nassert f(g())\n",
        "idx_generation": 177,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are three numbers in nums that sum up to target.\"\"\"\n    nums = sorted(nums)\n    for i in range(len(nums)-2):\n        left = i + 1\n        right = len(nums) - 1\n        while left < right:\n            curr_sum = nums[i] + nums[left] + nums[right]\n            if curr_sum == target:\n                return True\n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n",
        "idx_generation": 80,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 299,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose sum is equal to the target.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n    return dp[n][target]\ndef g(target=10):\n    return [i for i in range(1, target + 1)]\nassert f(g())\n",
        "idx_generation": 360,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, words=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Given a string and a list of words, determine if the string can be formed by concatenating the words in the list.\n    Each word in the list can be used only once, and the string can contain additional characters.\"\"\"\n    word_count = {}\n    for word in words:\n        if word not in word_count:\n            word_count[word] = 0\n        word_count[word] += 1\n\n    i = 0\n    while i < len(string):\n        found_word = False\n        for word in word_count:\n            if string[i:i+len(word)] == word:\n                if word_count[word] > 0:\n                    word_count[word] -= 1\n                    i += len(word)\n                    found_word = True\n                    break\n        if not found_word:\n            i += 1\n\n    for count in word_count.values():\n        if count > 0:\n            return False\n\n    return True\n\ndef g(words=['apple', 'banana', 'cherry', 'date']):\n    return ''.join(words)\n\nassert f(g())\n",
        "idx_generation": 313,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=25) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_sum=25):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n",
        "idx_generation": 325,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with a sum equal to the target.\"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\n\ndef g(target=0):\n    return [2, 4, -1, 7, 3, 0]\n\nassert f(g())\n",
        "idx_generation": 466,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that multiply to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][1] = True\n\n    for i in range(1, n + 1):\n        for j in range(2, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j // nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=100):\n    return [2, 4, 5, 10, 20, 25, 50, 100]\n\nassert f(g())\n",
        "idx_generation": 295,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers. You can only move down or right in the grid. The path must contain the number 2 at least once and the sum of all numbers along the path must be greater than 10.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    def helper(i, j, found_two, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_two and path_sum > 10:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if matrix[i][j] == 2:\n            found_two = True\n        path_sum += matrix[i][j]\n        return helper(i+1, j, found_two, path_sum) or helper(i, j+1, found_two, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(matrix=[[1, 2, 3], [4, 3, 6], [7, 8, 2]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 464,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='fyzihurothevirechahfyzihurothevirechah', target='') -> bool:\n    \"\"\"Find the three slice indices that give the specific target in string s\"\"\"\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s='fyzihurothevirechahfyzihurothevirechah', target=''):\n    from itertools import product\n    for (i, j, k) in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g())\n",
        "idx_generation": 361,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=2, length=10) -> bool:\n    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring='abc', count=2, length=10):\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g())\n",
        "idx_generation": 181,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that adds up to the target sum\"\"\"\n    return any(numbers[i] + numbers[j] == target_sum for i in range(len(numbers)) for j in range(i + 1, len(numbers)))\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 81,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(inds: List[int], string='programmingpuzzles') -> bool:\n    \"\"\"Find increasing indices to make the substring \"puzzles\" (with a surprise twist)\"\"\"\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'puzzles'\ndef g(string='programmingpuzzles'):\n    target = 'puzzles'\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans\nassert f(g())\n",
        "idx_generation": 301,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\nfrom collections import Counter\n\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there are k elements in the given list that occur more than n/k times\"\"\"\n    assert k > 0\n    counts = Counter(nums)\n    n = len(nums)\n    return any(count > n//k for count in counts.values())\n\ndef g(k=3):\n    return [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n\nassert f(g())\n",
        "idx_generation": 373,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a=['cat', 'dot', 'bird'], b=['tree', 'fly', 'dot']) -> bool:\n    \"\"\"Find an item that is in both lists a and b\"\"\"\n    return s in a and s in b\ndef g(a=['cat', 'dot', 'bird'], b=['tree', 'fly', 'dot']):\n    return next((s for s in b if s in a))\nassert f(g())\n",
        "idx_generation": 320,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in a list that multiply to the target value.\"\"\"\n    return any((nums[i]*nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target//9]\nassert f(g())\n",
        "idx_generation": 326,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=10, c=15) -> bool:\n    \"\"\"Check if the given number n is divisible by a, b, and c\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\ndef g(a=5, b=10, c=15):\n    return a * b * c\n\nassert f(g())\n\n",
        "idx_generation": 483,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[5, 4, 3, 2, 1], target=10) -> bool:\n    \"\"\"Determine if there exists a subset of nums that adds up to the target number\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if target < 0 or not nums:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\ndef g(nums=[5, 4, 3, 2, 1], target=10):\n    return nums\nassert f(g())\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the sum of all positive numbers in the path must be greater than or equal to the sum of all negative numbers in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, positive_sum, negative_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and positive_sum >= negative_sum:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if nums[i][j] > 0:\n            positive_sum += nums[i][j]\n        else:\n            negative_sum += nums[i][j]\n        return helper(i+1, j, found_one, positive_sum, negative_sum) or helper(i, j+1, found_one, positive_sum, negative_sum)\n\n    return helper(0, 0, False, 0, 0)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, -8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 466,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there is a subset of numbers that sums up to the target value.\"\"\"\n    n = len(numbers)\n    for r in range(1, n+1):\n        for subset in itertools.combinations(numbers, r):\n            if sum(subset) == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4]\nassert f(g())\n",
        "idx_generation": 364,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='abcdefghi', target='') -> bool:\n    \"\"\"Find the four slice indices that give the specific target in string s\"\"\"\n    (i, j, k, l) = inds\n    return s[i:j] + s[k:l] == target\n\ndef g(s='abcdefghi', target=''):\n    from itertools import product\n    for (i, j, k, l) in product(range(-len(s) - 1, len(s) + 1), repeat=4):\n        try:\n            if s[i:j] + s[k:l] == target:\n                return [i, j, k, l]\n        except (IndexError, ValueError):\n            pass\n\nassert f(g())\n",
        "idx_generation": 183,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], x=5) -> bool:\n    \"\"\"Check if the given list contains the given number.\"\"\"\n    return x in nums\n\ndef g(x=5):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 82,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(inds: List[int], string='applebananacherry') -> bool:\n    \"\"\"Find increasing indices to make the substring \"apple\" (with a surprise twist)\"\"\"\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'apple'\ndef g(string='applebananacherry'):\n    target = 'apple'\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans\nassert f(g())\n",
        "idx_generation": 302,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum: int) -> bool:\n    \"\"\"Check if there exist three numbers in the list whose sum is equal to the target sum.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target_sum:\n                    return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g(), 12)\n",
        "idx_generation": 387,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='py', suffix='on') -> bool:\n    \"\"\"Check if there exists a word in the list that starts with the prefix and ends with the suffix.\"\"\"\n    return any(word.startswith(prefix) and word.endswith(suffix) for word in words)\n\ndef g(prefix='py', suffix='on'):\n    return ['python', 'pycharm', 'jupyter', 'notebook', 'pandas']\n\nassert f(g())\n",
        "idx_generation": 322,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in a list that have a difference equal to the target value.\"\"\"\n    return any((abs(nums[i]-nums[j]) == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target+1]\nassert f(g())\n",
        "idx_generation": 326,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list such that their difference is equal to the target.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = num - target\n        if complement in num_set:\n            return True\n    return False\n\ndef g(target=0):\n    return [2, 4, 6, 8]\n\nassert f(g(), 2)\n",
        "idx_generation": 490,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the sum of all positive numbers in the path must be greater than or equal to the sum of all negative numbers in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, positive_sum, negative_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and positive_sum >= negative_sum:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if nums[i][j] > 0:\n            positive_sum += nums[i][j]\n        else:\n            negative_sum += nums[i][j]\n        return helper(i+1, j, found_one, positive_sum, negative_sum) or helper(i, j+1, found_one, positive_sum, negative_sum)\n\n    return helper(0, 0, False, 0, 0)\n\ndef g(nums=[[1, 0, 0], [-2, 4, 0], [0, -8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 301,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]], target=5) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number target at least once and the number 1 exactly once.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_target, found_one):\n        if i == rows - 1 and j == cols - 1 and found_target and found_one:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if nums[i][j] == target:\n            found_target = True\n        return helper(i+1, j, found_target, found_one) or helper(i, j+1, found_target, found_one) or helper(i+1, j+1, found_target, found_one)\n\n    return helper(0, 0, False, False)\n\ndef g(nums=[[5, 0, 0], [1, 5, 0], [0, 1, 5]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 468,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], target: int, subset_length: int) -> bool:\n    \"\"\"Check if there exists a subset in the list whose sum is equal to the target number and has a specific length\"\"\"\n    for subset in itertools.combinations(nums, subset_length):\n        if sum(subset) == target:\n            return True\n    return False\n\ndef g(target: int, subset_length: int):\n    return [2, 4, 6, 8, 10], target, subset_length\n\nassert f(*g(20, 3))\n",
        "idx_generation": 369,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=3, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if the given string contains at least one instance of each vowel from a provided list of vowels.\"\"\"\n    vowel_count = {vowel: 0 for vowel in vowels}\n    for char in s:\n        if char in vowels:\n            vowel_count[char] += 1\n    return all(count > 0 for count in vowel_count.values())\n\ndef g(target=3, vowels=['a', 'e', 'i', 'o', 'u']):\n    return \"aeiou\" * target\n\nassert f(g())\n",
        "idx_generation": 185,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is sorted in non-decreasing order.\"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 83,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(inds: List[int], string='applebananacherry') -> bool:\n    \"\"\"Find increasing indices to make the substring \"cherry\" (with a surprise twist)\"\"\"\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'cherry'\ndef g(string='applebananacherry'):\n    target = 'cherry'\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans\nassert f(g())",
        "idx_generation": 302,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=40) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=40):\n    return [4, 8, 12, 16, 20, 24, 28, 32]\n\nassert f(g())\n",
        "idx_generation": 393,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find three numbers in the list 'nums' that have a product less than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] * nums[j] * nums[k] < target:\n                    return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 356,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with an equal number of even and odd elements.\"\"\"\n    count = 0\n    count_dict = {0: -1}\n    max_length = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            count += 1\n        else:\n            count -= 1\n        if count in count_dict:\n            max_length = max(max_length, i - count_dict[count])\n        else:\n            count_dict[count] = i\n    return max_length > 0\n\ndef g():\n    return [2, 4, 6, 1, 3, 5]\n\nassert f(g())\n",
        "idx_generation": 334,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, n=20, m=5) -> bool:\n    \"\"\"Check if the given number is divisible by both n and m\"\"\"\n    return x % n == 0 and x % m == 0\ndef g(n=20, m=5):\n    return n * m\nassert f(g())\n",
        "idx_generation": 497,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the sum of all prime numbers in the path must be divisible by the sum of all composite numbers in the path.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def helper(i, j, found_one, prime_sum, composite_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and prime_sum % composite_sum == 0:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if matrix[i][j] == 0:\n            return False\n        if matrix[i][j] == 1:\n            found_one = True\n        if is_prime(matrix[i][j]):\n            prime_sum += matrix[i][j]\n        else:\n            composite_sum += matrix[i][j]\n        return helper(i+1, j, found_one, prime_sum, composite_sum) or helper(i, j+1, found_one, prime_sum, composite_sum)\n\n    return helper(0, 0, False, 0, 0)\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 1]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 311,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]], target=5) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number target exactly once and the number 1 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_target, found_one):\n        if i == rows - 1 and j == cols - 1 and found_target and found_one:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one += 1\n            if found_one > 2:\n                return False\n        if nums[i][j] == target:\n            found_target = True\n        return helper(i+1, j, found_target, found_one) or helper(i, j+1, found_target, found_one)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[5, 0, 0], [1, 5, 0], [0, 1, 5]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 468,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List, Tuple\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose product is equal to the target number\"\"\"\n    for r in range(1, len(nums) + 1):\n        for subset in itertools.combinations(nums, r):\n            product = 1\n            for num in subset:\n                product *= num\n            if product == target:\n                return True\n    return False\n\ndef g(target: int):\n    return [2, 3, 4, 5, 6], target\n\nassert f(*g(120))\n",
        "idx_generation": 373,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=4) -> bool:\n    \"\"\"Check if the given string contains the target number of consecutive vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n            if count == target:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(target=4):\n    return \"aeiou\" * target\n\nassert f(g())\n",
        "idx_generation": 186,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if all the numbers in the list are divisible by 5.\"\"\"\n    return all((num % 5 == 0 for num in nums))\n\ndef g():\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 83,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(words: List[str], length=5) -> bool:\n    \"\"\"Check if any word in the list has a length greater than the specified length.\"\"\"\n    return any(len(word) > length for word in words)\ndef g(length=5):\n    words = ['apple', 'banana', 'cherry', 'date', 'elderberry']\n    random.shuffle(words)\n    return words\nassert f(g())\n",
        "idx_generation": 305,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=5) -> bool:\n    \"\"\"Determine if there exists a subsequence of numbers whose sum is equal to the target value.\"\"\"\n    n = len(numbers)\n    dp = [[False] * (target+1) for _ in range(n+1)]\n    dp[0][0] = True\n\n    for i in range(1, n+1):\n        for j in range(target+1):\n            dp[i][j] = dp[i-1][j]\n            if j >= numbers[i-1]:\n                dp[i][j] = dp[i][j] or dp[i-1][j-numbers[i-1]]\n\n    return dp[n][target]\n\ndef g(target=5):\n    numbers = [1, 2, 3, 4, 5]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 402,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=25) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_sum=25):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n",
        "idx_generation": 366,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[float], target=100) -> bool:\n    \"\"\"Find a pair of numbers from a list that add up to the target number.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\ndef g(target=100):\n    return [50, 50]\nassert f(g())\n",
        "idx_generation": 345,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to twice the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=20):\n    return [1, 4, 6, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 315,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 2 at least once and the path sum must be divisible by 3.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_two, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_two and path_sum % 3 == 0:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            found_two = True\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_two, path_sum) or helper(i, j+1, found_two, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[2, 1, 1], [3, 2, 1], [1, 3, 2]]):\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 480,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of n people having different birthdays in a group of n is near 1/2.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) == n for j in range(K))) / K\n    return (prob - 1/2) ** 2 <= year_len\ndef g(year_len=365):\n    n = 1\n    distinct_prob = 1.0\n    best = (1/2, 1)\n    while distinct_prob > 1/2:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(1/2 - distinct_prob), n))\n    return best[1]\nassert f(g())\n",
        "idx_generation": 374,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], letter='a') -> bool:\n    \"\"\"Check if any word in the list starts with the given letter.\"\"\"\n    return any((word.startswith(letter) for word in words))\n\ndef g(letter='a'):\n    return ['apple', 'banana', 'orange', 'grapefruit']\n\nassert f(g())\n",
        "idx_generation": 195,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target_sum.\"\"\"\n    n = len(arr)\n    prefix_sum = 0\n    prefix_sums = set()\n    for i in range(n):\n        prefix_sum += arr[i]\n        if prefix_sum == target_sum or prefix_sum - target_sum in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\n\ndef g(target_sum=100):\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 83,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a=['dog', 'cat', 'bird'], b=['tree', 'fly', 'dog']) -> bool:\n    \"\"\"Find an item that is in both lists a and b\"\"\"\n    return s in a and s in b\ndef g(a=['dog', 'cat', 'bird'], b=['tree', 'fly', 'dog']):\n    return next((s for s in b if s in a))\nassert f(g())\n",
        "idx_generation": 320,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if it is possible to obtain the target sum by adding a subset of the given numbers in each row and column of the matrix.\"\"\"\n    m, n = len(matrix), len(matrix[0])\n    for row in matrix:\n        for i in range(1 << n):\n            subset_sum = sum(row[j] for j in range(n) if (i & (1 << j)) != 0)\n            if subset_sum == target:\n                break\n        else:\n            return False\n    for j in range(n):\n        column = [matrix[i][j] for i in range(m)]\n        for i in range(1 << m):\n            subset_sum = sum(column[k] for k in range(m) if (i & (1 << k)) != 0)\n            if subset_sum == target:\n                break\n        else:\n            return False\n    return True\n\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 407,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\n\ndef f(nums: List[int], target: int, m: int) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose minimum element is equal to the target number minus m\"\"\"\n    for r in range(1, len(nums) + 1):\n        for subset in itertools.combinations(nums, r):\n            min_num = min(subset)\n            if min_num == target - m:\n                return True\n    return False\n\ndef g(target: int, m: int):\n    return [1, 3, 5, 7, 9], target, m\n\nassert f(*g(7, 2))\n",
        "idx_generation": 375,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target_sum: int) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_sum: int):\n    return [3, 7, 9, 12, 15], target_sum\n\nassert f(*g(18))\n",
        "idx_generation": 351,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=50) -> bool:\n    \"\"\"Determine if there exists a subset of numbers in the given array that adds up to the target sum\"\"\"\n    dp = [[False] * (target + 1) for _ in range(len(arr) + 1)]\n    for i in range(len(arr) + 1):\n        dp[i][0] = True\n    for i in range(1, len(arr) + 1):\n        for j in range(1, target + 1):\n            if arr[i-1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i-1]]\n    return dp[len(arr)][target]\n\ndef g(target=50):\n    return [i for i in range(1, target+1)]\n\nassert f(g())\n",
        "idx_generation": 317,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down, right, or diagonally down-right in the grid. The path must contain the number 2 at least once and the number 3 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_two, found_three):\n        if i == rows - 1 and j == cols - 1 and found_two:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 3:\n            found_three += 1\n            if found_three > 2:\n                return False\n        if nums[i][j] == 2:\n            found_two = True\n        return helper(i+1, j, found_two, found_three) or helper(i, j+1, found_two, found_three) or helper(i+1, j+1, found_two, found_three)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[2, 0, 0], [3, 3, 0], [0, 3, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 482,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\n\ndef f(nums: List[int], target_sum=0) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that sums up to the target sum.\"\"\"\n    for r in range(len(nums) + 1):\n        for combination in itertools.combinations(nums, r):\n            if sum(combination) == target_sum:\n                return True\n    return False\n\ndef g(target_sum=0):\n    nums = [1, 2, 3, 4, 5]\n\n    return nums\n\nassert f(g())\n",
        "idx_generation": 377,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\n\ndef f(inds: List[int], s='abcdefghi', target='') -> bool:\n    \"\"\"Find the three slice indices that give the specific target in string s\"\"\"\n    (i, j, k) = inds\n    return s[i:j] + s[j:k] == target\n\ndef g(s='abcdefghi', target=''):\n    from itertools import product\n    for (i, j, k) in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j] + s[j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\n\nassert f(g())\n",
        "idx_generation": 195,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    n = len(arr)\n    visited = set()\n    for i in range(n):\n        if target - arr[i] in visited:\n            return True\n        visited.add(arr[i])\n    return False\n\ndef g(target=5):\n    return [1, 2, 3, 4]\n\nassert f(g())\n",
        "idx_generation": 83,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a palindrome\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 326,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a subarray in the given list such that the sum of all elements in the subarray is divisible by 7 and the subarray has an odd number of elements\"\"\"\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            subarray = nums[i:j+1]\n            if sum(subarray) % 7 == 0 and len(subarray) % 2 != 0:\n                count += 1\n    return count > 0\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 413,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings: List[str], count=5) -> bool:\n    \"\"\"Check if there are at least 'count' number of distinct substrings present in the given string 's'\"\"\"\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\n\ndef g(count=5):\n    return ['a', 'b', 'c', 'd', 'e']\n\nassert f('abcde', g())\n",
        "idx_generation": 393,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of numbers, check if there exists a pair of numbers that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 10):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 355,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Determine if there exists a subset of numbers in the given array that divides the target number\"\"\"\n    dp = [[False] * (target + 1) for _ in range(len(arr) + 1)]\n    for i in range(len(arr) + 1):\n        dp[i][1] = True\n    for i in range(1, len(arr) + 1):\n        for j in range(2, target + 1):\n            if arr[i-1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j // arr[i-1]]\n    return dp[len(arr)][target]\n\ndef g(target=100):\n    return [i for i in range(1, target+1)]\n\nassert f(g())\n",
        "idx_generation": 317,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the sum of the numbers in the path must be even.\n    Additionally, the path must visit at least one cell in the top row.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, path_sum, visited_top_row):\n        if i == rows - 1 and j == cols - 1 and found_one and path_sum % 2 == 0 and visited_top_row:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        return helper(i+1, j, found_one or nums[i][j] == 1, path_sum + nums[i][j], visited_top_row or i == 0) or helper(i, j+1, found_one or nums[i][j] == 1, path_sum + nums[i][j], visited_top_row or i == 0)\n\n    return helper(0, 0, False, 0, False)\n\ndef g(nums=[[1, 0, 0], [1, 1, 0], [0, 1, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 491,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if there is a pair of numbers in the list whose product is equal to the target value.\"\"\"\n    return any((numbers[i] * numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\nassert f(g())\n",
        "idx_generation": 386,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\n\ndef f(inds: List[int], s='abcdefghi', target='') -> bool:\n    \"\"\"Find the four slice indices that give the specific target in string s\"\"\"\n    (i, j, k, l) = inds\n    return s[i:j] + s[j:k] + s[k:l] == target\n\ndef g(s='abcdefghi', target=''):\n    from itertools import product\n    for (i, j, k, l) in product(range(-len(s) - 1, len(s) + 1), repeat=4):\n        try:\n            if s[i:j] + s[j:k] + s[k:l] == target:\n                return [i, j, k, l]\n        except (IndexError, ValueError):\n            pass\n\nassert f(g())\n",
        "idx_generation": 195,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target.\"\"\"\n    n = len(nums)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums: List[int]):\n    return nums\n\nassert f(g([1, 2, 3, 4, 5, 6, 7, 8, 9]), target=15)\n",
        "idx_generation": 84,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(rectangle: List[List[int]], x1=0, y1=0, x2=10, y2=10) -> bool:\n    \"\"\"Check if a point lies inside a rectangle.\"\"\"\n    x, y = rectangle\n    return x1 <= x <= x2 and y1 <= y <= y2\ndef g(x1=0, y1=0, x2=10, y2=10):\n    return [5, 5]\nassert f(g())\n",
        "idx_generation": 332,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a subset of numbers from the list 'numbers' that adds up to the target value.\"\"\"\n    n = len(numbers)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if numbers[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - numbers[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    return dp[n][target]\n\ndef g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 416,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(words: List[str], length=5) -> bool:\n    \"\"\"Check if any word in the list has a length greater than the given length.\"\"\"\n    return any(len(word) > length for word in words)\ndef g(words=[\"apple\", \"banana\", \"cherry\", \"date\"]):\n    return words\n\nassert f(g())\n",
        "idx_generation": 429,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a difference greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if abs(nums[i] - nums[j]) > target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 357,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a subset of numbers in the given array that subtracts from the target number\"\"\"\n    dp = [[False] * (target + 1) for _ in range(len(arr) + 1)]\n    for i in range(len(arr) + 1):\n        dp[i][0] = True\n    for i in range(1, len(arr) + 1):\n        for j in range(1, target + 1):\n            if arr[i-1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i-1]]\n    return dp[len(arr)][target]\n\ndef g(target=10):\n    return [i for i in range(1, target+1)]\n\nassert f(g())\n",
        "idx_generation": 317,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there is a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 3 at least once and the number 2 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_three, found_two):\n        if i == rows - 1 and j == cols - 1 and found_three:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            found_two += 1\n            if found_two > 2:\n                return False\n        if nums[i][j] == 3:\n            found_three = True\n        return helper(i+1, j, found_three, found_two) or helper(i, j+1, found_three, found_two)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[3, 0, 0], [2, 2, 0], [0, 2, 3]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 491,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, max_nums=4, options=[10, 20, 30, 40, 50]) -> bool:\n    \"\"\"Find a combination of at most max_nums numbers whose sum is the target value\"\"\"\n    for num in nums:\n        assert num in options\n    return len(nums) <= max_nums and sum(nums) == target\ndef g(target=100, max_nums=4, options=[10, 20, 30, 40, 50]):\n    from itertools import combinations\n    for n in range(1, max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n",
        "idx_generation": 392,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=2, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if the given string contains at least the target number of consecutive vowels from a provided list of vowels.\"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n            if count >= target:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(target=2, vowels=['a', 'e', 'i', 'o', 'u']):\n    return \"aeiou\" * target\n\nassert f(g())\n",
        "idx_generation": 195,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array whose sum is equal to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr=random.choices(range(1, 100), k=10), target=100):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 84,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import *\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a number in the list that is greater than the target number\"\"\"\n    for num in nums:\n        if num > target:\n            return True\n    return False\n\ndef g(target: int):\n    return [5, 10, 15, 20, 25], target\n\nassert f(*g(12))\n",
        "idx_generation": 332,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Given a list of numbers and a target value, determine if there is a subset of the list that adds up to the target.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(target + 1):\n            if j < nums[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=20):\n    return [4, 5, 7, 9, 11]\n\nassert f(g())\n",
        "idx_generation": 418,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Given a list of integers, determine if it is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g(nums=[1, 2, 3, 2, 1]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 431,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], target: int, subset_length: int) -> bool:\n    \"\"\"Check if there exists a subset in the list whose sum is equal to the target number and has a specific length, considering duplicates\"\"\"\n    for subset in itertools.combinations_with_replacement(nums, subset_length):\n        if sum(subset) == target:\n            return True\n    return False\n\ndef g(target: int, subset_length: int):\n    return [1, 2, 3, 4], target, subset_length\n\nassert f(*g(10, 3))\n",
        "idx_generation": 369,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Given an array of integers arr and a target integer, find a subset of arr that adds up to the target\"\"\"\n    if target == 0:\n        return True\n    if len(arr) == 0:\n        return False\n    if arr[0] > target:\n        return f(arr[1:], target)\n    return f(arr[1:], target) or f(arr[1:], target - arr[0])\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g())\n",
        "idx_generation": 317,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there is a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 3 at least once and the number 2 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_three, found_two):\n        if i == rows - 1 and j == cols - 1 and found_three:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            found_two += 1\n            if found_two > 2:\n                return False\n        if nums[i][j] == 3:\n            found_three = True\n        return helper(i+1, j, found_three, found_two) or helper(i, j+1, found_three, found_two)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[3, 2, 0], [2, 0, 0], [0, 2, 3]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 491,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that sum up to the target value.\"\"\"\n    for r in range(1, len(nums) + 1):\n        for combination in itertools.combinations(nums, r):\n            if sum(combination) == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=10):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 397,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(strings: List[str], char='a') -> bool:\n    \"\"\"Check if any string in the list contains the given character.\"\"\"\n    return any(char in s for s in strings)\ndef g():\n    return [\"apple\", \"banana\", \"cherry\", \"durian\"]\nassert f(g(), 'b')\n",
        "idx_generation": 200,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(num_list: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers from the list that add up to the target\"\"\"\n    return any((num_list[i] + num_list[j] == target) for i in range(len(num_list)) for j in range(len(num_list)) if i != j)\ndef g(num_list=[1, 6, 3, 2, 8, 5, 4, 7, 9]):\n    return num_list\n\nassert f(g())\n",
        "idx_generation": 84,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=8) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to less than the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return any(dp[n][i] for i in range(target + 1) if i < target)\n\ndef g(target=5):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 421,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]], target=0) -> bool:\n    \"\"\"Find the average of all numbers in the 2D array\"\"\"\n    total_sum = sum(sum(row) for row in arr)\n    num_elements = sum(len(row) for row in arr)\n    average = total_sum / num_elements\n    return average == target\n\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g(), target=5)\n",
        "idx_generation": 471,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    return any(target - num in numbers for num in numbers)\n\ndef g(target=100):\n    return [50, 25, 10, 5, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 372,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=-5741705983914418) -> bool:\n    \"\"\"Solve a unary negation problem\"\"\"\n    return -x == a\ndef g(a=-5741705983914418):\n    return -a\nassert f(g())\n",
        "idx_generation": 320,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 5 at least once and the number 2 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_five, found_two):\n        if i == rows - 1 and j == cols - 1 and found_five:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            found_two += 1\n            if found_two > 2:\n                return False\n        if nums[i][j] == 5:\n            found_five = True\n        return helper(i+1, j, found_five, found_two) or helper(i, j+1, found_five, found_two)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[5, 0, 0], [2, 5, 0], [0, 2, 5]]):\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 495,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substrings=['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']) -> bool:\n    \"\"\"Check if a given string contains all the substrings from the given list.\"\"\"\n    return all(substring in string for substring in substrings)\n\ndef g(substrings=['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']):\n    return ''.join(substrings)\n\nassert f(g())\n",
        "idx_generation": 1,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import List, Tuple\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose minimum element is equal to the target number\"\"\"\n    for r in range(1, len(nums) + 1):\n        for subset in itertools.combinations(nums, r):\n            min_num = min(subset)\n            if min_num == target:\n                return True\n    return False\n\ndef g(target: int):\n    return [10, 20, 30, 40, 50], target\n\nassert f(*g(40))\n\n",
        "idx_generation": 400,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=3, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if the given string contains the target number of non-consecutive vowels from a provided list of vowels.\"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n            if count == target:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(target=3, vowels=['a', 'e', 'i', 'o', 'u']):\n    return \"aeioubcdfg\" * target\n\nassert f(g())\n",
        "idx_generation": 200,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=5):\n    return [i for i in range(1, k+1)]\n\nassert f(g())\n",
        "idx_generation": 90,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\ndef g():\n    return \"racecar\"\nassert f(g())\n",
        "idx_generation": 337,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], k=1) -> bool:\n    \"\"\"Check if there exist k numbers in the list whose sum is equal to zero.\"\"\"\n    for subset in itertools.combinations(nums, k):\n        if sum(subset) == 0:\n            return True\n    return False\n\ndef g(k=1):\n    return [1, -1, 2, -2]\n\nassert f(g(), 2)\n",
        "idx_generation": 428,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with all elements being even numbers.\"\"\"\n    for i in range(len(arr)):\n        subarray_product = 1\n        for j in range(i, len(arr)):\n            subarray_product *= arr[j]\n            if subarray_product % 2 == 0:\n                return True\n    return False\n\ndef g():\n    return [3, 5, 8, 12, 7]\n\nassert f(g())\n",
        "idx_generation": 382,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=-6219026986205627) -> bool:\n    \"\"\"Solve a unary negation problem\"\"\"\n    return -x == a\ndef g(a=-6219026986205627):\n    return -a\nassert f(g())\n",
        "idx_generation": 320,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]], target=5) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down, right, or diagonally down-right in the grid. The path must contain the number 5 exactly once.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_five):\n        if i == rows - 1 and j == cols - 1 and found_five:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 5:\n            found_five = True\n        return helper(i+1, j, found_five) or helper(i, j+1, found_five) or helper(i+1, j+1, found_five)\n\n    return helper(0, 0, False)\n\ndef g(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 495,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='Python') -> bool:\n    \"\"\"Check if a given word is present in a string.\"\"\"\n    return word in s\ndef g(word='Python'):\n    return 'Hello ' + word\nassert f(g())\n",
        "idx_generation": 3,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import List, Tuple\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose sum of elements is equal to the target number\"\"\"\n    for r in range(1, len(nums) + 1):\n        for subset in itertools.combinations(nums, r):\n            if sum(subset) == target:\n                return True\n    return False\n\ndef g(target: int):\n    return [10, 20, 30, 40, 50], target\n\nassert f(*g(70))\n\n",
        "idx_generation": 400,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc', count=3) -> bool:\n    \"\"\"Check if the given string contains 'count' number of occurrences of the substring\"\"\"\n    return s.count(substring) == count\n\ndef g(substring='abc', count=3):\n    return substring * count + 'xyz' * (count - 1)\n\nassert f(g())\n",
        "idx_generation": 206,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=10, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    \"\"\"Find a pair of numbers from the given list that sums up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], target=10):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 93,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(letters: List[str], s='hello_world!', target='') -> bool:\n    \"\"\"Find the indices of the letters in the string s that form the target word\"\"\"\n    indices = [s.index(letter) for letter in letters]\n    return ''.join([s[i] for i in indices]) == target\ndef g(s='hello_world!', target=''):\n    letters = list(set(target))\n    return letters\nassert f(g())\n",
        "idx_generation": 341,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Check if it is possible to find three numbers in a given list that sum up to a target sum.\n    Return True if such triplet exists, False otherwise.\"\"\"\n    nums = sorted(numbers)\n    n = len(nums)\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                current_sum = nums[i] + nums[j] + nums[k]\n                if current_sum == target_sum:\n                    return True\n    return False\n\ndef g(numbers: List[int], target_sum=100):\n    nums = list(set(numbers))\n    return nums\n\nassert f(g([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]))\n",
        "idx_generation": 436,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [2, 4, 6, 8]\n\nassert f(g())\n",
        "idx_generation": 389,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=30) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=30):\n    return [5, 10, 15, 20, 25]\n\nassert f(g())\n",
        "idx_generation": 322,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, substr='apple') -> bool:\n    \"\"\"Check if a string contains a specific substring.\"\"\"\n    return substr in x\ndef g(substr='apple'):\n    return \"I like to eat \" + substr\nassert f(g())\n",
        "idx_generation": 5,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=100, b=20) -> bool:\n    \"\"\"Check if the sum of n and a is divisible by b\"\"\"\n    return (n + a) % b == 0\ndef g(a=100, b=20):\n    return b - a\nassert f(g())\n",
        "idx_generation": 1,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import List, Tuple\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose product of elements is equal to the target number\"\"\"\n    for r in range(1, len(nums) + 1):\n        for subset in itertools.combinations(nums, r):\n            product = 1\n            for num in subset:\n                product *= num\n            if product == target:\n                return True\n    return False\n\ndef g(target: int):\n    return [10, 20, 30, 40, 50], target\n\nassert f(*g(6000))\n\n",
        "idx_generation": 400,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=27, max_nums=4, options=[3, 6, 9, 12, 15]) -> bool:\n    \"\"\"Find a combination of at most max_nums numbers whose sum is the target value\"\"\"\n    for num in nums:\n        assert num in options\n    return len(nums) <= max_nums and sum(nums) == target\ndef g(target=27, max_nums=4, options=[3, 6, 9, 12, 15]):\n    from itertools import combinations\n    for n in range(1, max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n\n",
        "idx_generation": 211,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that adds up to the target.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\ndef g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\nassert f(g())\n",
        "idx_generation": 94,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_word='python') -> bool:\n    \"\"\"Check if the target_word is present in the list\"\"\"\n    return target_word in words\ndef g(target_word='python'):\n    return ['java', 'c++', 'python', 'javascript', 'ruby']\nassert f(g())\n",
        "idx_generation": 354,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find a triplet of numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(nums=[3, 5, 7, 9, 11]):\n    return nums\nassert f(g())\n",
        "idx_generation": 438,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Find two numbers in the list 'nums' whose sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[10, 15, 20, 30, 35, 40]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 391,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the number 0 exactly four times.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, found_zero):\n        if i == rows - 1 and j == cols - 1 and found_one:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            found_zero += 1\n            if found_zero > 4:\n                return False\n        if nums[i][j] == 1:\n            found_one = True\n        return helper(i+1, j, found_one, found_zero) or helper(i, j+1, found_one, found_zero)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[1, 0, 0], [1, 1, 0], [0, 1, 1], [0, 0, 1]]):\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 327,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(s: str, target='abcdefg', length=4) -> bool:\n    \"\"\"Check if the given string is a substring of the target string, starting at the center\"\"\"\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s\ndef g(target='abcdefg', length=4):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]\nassert f(g())\n",
        "idx_generation": 5,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=3) -> bool:\n    \"\"\"Solve an equation problem\"\"\"\n    return (a ** n) % b == (a ** (n % b)) % b\ndef g(a=2, b=3):\n    return a\nassert f(g())\n",
        "idx_generation": 2,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=100, max_nums=3, options=[10, 20, 30, 40, 50, 60, 70, 80, 90]) -> bool:\n    \"\"\"Find a combination of at most max_nums numbers whose sum is the target value\"\"\"\n    for num in nums:\n        assert num in options\n    return len(nums) <= max_nums and sum(nums) == target\ndef g(target=100, max_nums=3, options=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    from itertools import combinations\n    for n in range(1, max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n\n",
        "idx_generation": 405,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: List[str], n=5, m=3) -> bool:\n    \"\"\"Find a list of n strings, each of length m, such that their concatenation forms s\"\"\"\n    return len(s) == n and all([len(x) == m for x in s]) and ''.join(s) == ''.join([chr(ord('A') + i) * m for i in range(n)])\ndef g(n=5, m=3):\n    return [chr(ord('A') + i) * m for i in range(n)]\nassert f(g())\n",
        "idx_generation": 224,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\nfrom typing import List\n\ndef f(tour: List[List[int]], m=8, n=8) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\n\ndef g(m=8, n=8):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 94,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5) -> bool:\n    \"\"\"Check if the given target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g(), target=5)\n",
        "idx_generation": 355,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with all elements being prime numbers.\"\"\"\n    for i in range(len(arr)):\n        subarray_product = 1\n        for j in range(i, len(arr)):\n            subarray_product *= arr[j]\n            if is_prime(subarray_product):\n                return True\n    return False\n\ndef g():\n    return [2, 3, 5, 7, 9]\n\ndef is_prime(n: int) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nassert f(g())\n",
        "idx_generation": 439,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(target=12):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g(), 12)\n",
        "idx_generation": 393,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 327,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='hello') -> bool:\n    \"\"\"Check if a given string contains a target substring.\"\"\"\n    return target in s\ndef g(target='hello'):\n    s = \"This is a hello world program.\"\n    return s\nassert f(g())\n",
        "idx_generation": 8,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a perfect square.\"\"\"\n    return n >= 0 and int(n**0.5)**2 == n\ndef g():\n    return 81\nassert f(g())\n",
        "idx_generation": 3,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import *\ndef f(nums: List[int], target: int, k: int) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose sum of elements is greater than or equal to the target number, \n    and the length of the subsequence is less than or equal to k.\"\"\"\n    for r in range(1, len(nums) + 1):\n        for subset in itertools.combinations(nums, r):\n            if sum(subset) >= target and len(subset) <= k:\n                return True\n    return False\n\ndef g(target: int, k: int):\n    return [10, 20, 30, 40, 50], target, k\n\nassert f(*g(70, 3))\n",
        "idx_generation": 416,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(s: List[str], n=4, m=2) -> bool:\n    \"\"\"Find a list of n strings, each of length m, such that their concatenation forms s\"\"\"\n    return len(s) == n and all([len(x) == m for x in s]) and ''.join(s) == ''.join([chr(ord('A') + i) * m for i in range(n)])\ndef g(n=4, m=2):\n    return [chr(ord('A') + i) * m for i in range(n)]\nassert f(g())\n",
        "idx_generation": 228,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target value.\"\"\"\n    return any(target - num in nums for num in nums)\n\ndef g(target=10):\n    return [i for i in range(1, target+1)]\nassert f(g())\n",
        "idx_generation": 96,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], target_name='Alice') -> bool:\n    \"\"\"Check if the target name is present in the list of names.\"\"\"\n    return target_name in names\n\ndef g(target_name='Alice'):\n    return ['Bob', 'Charlie', 'Dave', 'Eve', 'Alice']\n\nassert f(g())\n",
        "idx_generation": 362,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with all elements being odd numbers.\"\"\"\n    for i in range(len(arr)):\n        subarray_sum = 0\n        for j in range(i, len(arr)):\n            subarray_sum += arr[j]\n            if subarray_sum % 2 != 0:\n                return True\n    return False\n\ndef g():\n    return [1, 3, 2, 8, 7]\n\nassert f(g())\n",
        "idx_generation": 442,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_sum=10):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n",
        "idx_generation": 407,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], target='Alice') -> bool:\n    \"\"\"Check if the target name is present in the list of names\"\"\"\n    return target in names\ndef g(names=['Alice', 'Bob', 'Charlie']):\n    return names\nassert f(g())\n",
        "idx_generation": 0,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 327,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, a='hello', b='world') -> bool:\n    \"\"\"Check if a string contains a given substring\"\"\"\n    return a in x or b in x\ndef g(a='hello', b='world'):\n    return a + ' ' + b\nassert f(g())\n",
        "idx_generation": 9,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, x=1, y=10) -> bool:\n    \"\"\"Find n such that the sum of all numbers from x to n (inclusive) is equal to y.\"\"\"\n    return (n * (n + 1)) / 2 == y - ((x * (x - 1)) / 2)\ndef g(x=1, y=10):\n    n = (2 * y - x**2 + x) ** 0.5 - x + 1\n    return int(n)\nassert f(g())\n",
        "idx_generation": 4,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\nimport itertools\n\ndef f(nums: List[int], target: int, k: int) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose sum of elements is less than the target number,\n    and the length of the subsequence is greater than k.\"\"\"\n    for r in range(1, len(nums) + 1):\n        for subset in itertools.combinations(nums, r):\n            if sum(subset) < target and len(subset) > k:\n                return True\n    return False\n\ndef g(target: int, k: int):\n    return [2, 4, 6, 8, 10], target, k\n\nassert f(*g(25, 2))\n",
        "idx_generation": 426,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(s: List[str], n=2, m=4) -> bool:\n    \"\"\"Find a list of n strings, each of length m, such that their concatenation forms s\"\"\"\n    return len(s) == n and all([len(x) == m for x in s]) and ''.join(s) == ''.join([chr(ord('A') + i) * m for i in range(n)])\ndef g(n=2, m=4):\n    return [chr(ord('A') + i) * m for i in range(n)]\nassert f(g())\n",
        "idx_generation": 228,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target value\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 101,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, words=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Given a string and a list of words, determine if the string can be formed by concatenating the words in the list.\n    Each word in the list can be used multiple times, and the string can contain additional characters.\"\"\"\n    word_count = {}\n    for word in words:\n        if word not in word_count:\n            word_count[word] = 0\n        word_count[word] += 1\n\n    i = 0\n    while i < len(string):\n        found_word = False\n        for word in word_count:\n            if string[i:i+len(word)] == word:\n                if word_count[word] > 0:\n                    word_count[word] -= 1\n                    i += len(word)\n                    found_word = True\n                    break\n        if not found_word:\n            i += 1\n\n    for count in word_count.values():\n        if count > 0:\n            return False\n\n    return True\n\ndef g(words=['apple', 'banana', 'cherry', 'date']):\n    return ''.join(words)\n\nassert f(g())\n",
        "idx_generation": 369,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=200) -> bool:\n    \"\"\"Find if there exists a subsequence of numbers in the list whose sum is equal to the target.\"\"\"\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in numbers:\n        for i in range(target, num-1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    return dp[target]\n\ndef g(target=200):\n    return [25, 50, 75, 100, 125, 150, 175, 200]\n\nassert f(g())\n",
        "idx_generation": 456,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g():\n    return [2, 4, 6, 8]\n\nassert f(g())\n",
        "idx_generation": 410,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_diff=10) -> bool:\n    \"\"\"Check if the difference between any two numbers in the list is equal to target_diff\"\"\"\n    return any(abs(nums[i] - nums[j]) == target_diff for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_diff=10):\n    return [n for n in range(target_diff+1)]\n\nassert f(g())\n",
        "idx_generation": 2,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 327,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if a given word can be formed by concatenating two words from a list.\"\"\"\n    for i in range(1, len(word)):\n        if word[:i] in words and word[i:] in words:\n            return True\n    return False\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return words[1] + words[2]\nassert f(g())\n",
        "idx_generation": 11,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=987654321) -> bool:\n    \"\"\"Find a positive number that when squared is close to a.\"\"\"\n    return abs(x ** 2 - a) < 10 ** (-4) and x > 0\ndef g(a=987654321):\n    return a ** 0.5\nassert f(g())\n",
        "idx_generation": 8,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\nimport itertools\n\ndef f(nums: List[int], target: int, k: int) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose sum of elements is divisible by the target number,\n    and the length of the subsequence is a multiple of k.\"\"\"\n    for r in range(1, len(nums) + 1):\n        for subset in itertools.combinations(nums, r):\n            if sum(subset) % target == 0 and len(subset) % k == 0:\n                return True\n    return False\n\ndef g(target: int, k: int):\n    return [3, 6, 9, 12, 15], target, k\n\nassert f(*g(5, 3))\n",
        "idx_generation": 426,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(words: List[str], suffix=\"y\") -> bool:\n    \"\"\"Check if any word in the list ends with the given suffix.\"\"\"\n    return any(word.endswith(suffix) for word in words)\n\ndef g(words=[\"sky\", \"cloudy\", \"rainy\", \"sunny\"]):\n    return words\n\nassert f(g())\n",
        "idx_generation": 237,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if the sum of any two elements in the given list is equal to the target value.\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=100):\n    return random.sample(range(1, 101), 10)\n\nassert f(g())\n",
        "idx_generation": 101,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target=\"python\") -> bool:\n    \"\"\"Check if the given list of words contains the target word. Return True if it does, otherwise return False.\"\"\"\n    return target in words\n\ndef g(target=\"python\"):\n    return [\"hello\", \"world\", \"python\", \"programming\"]\n\nassert f(g())\n",
        "idx_generation": 374,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=30) -> bool:\n    \"\"\"Find if there exists a subsequence of numbers in the list whose sum is equal to the target.\"\"\"\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in numbers:\n        for i in range(target, num-1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    return dp[target]\n\ndef g(target=30):\n    return [2, 4, 6, 8, 10, 12, 14, 16]\n\nassert f(g())\n",
        "idx_generation": 456,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=25) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_sum=25):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n",
        "idx_generation": 418,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Find four distinct positive integers from the given list that sum up to the target value.\"\"\"\n    return len(nums) == len(set(nums)) == 4 and sum(nums) == target\ndef g(target=24):\n    return [1, 2, 3, target-6]\nassert f(g())\n",
        "idx_generation": 2,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 329,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(chars: List[str], target='hello') -> bool:\n    \"\"\"Find the indices of the characters in the list to spell out the target word\"\"\"\n    return ''.join((chars[i] for i in range(len(chars)))) == target\ndef g(chars=['h', 'e', 'l', 'l', 'o']):\n    return chars\nassert f(g())\n",
        "idx_generation": 12,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=123456789) -> bool:\n    \"\"\"Find a number that when cubed is close to a.\"\"\"\n    return abs(x ** 3 - a) < 10 ** (-6)\ndef g(a=123456789):\n    return a ** (1/3)\nassert f(g())\n",
        "idx_generation": 8,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], target=30, max_nums=4, options=[2, 5, 10, 15, 20]) -> bool:\n    \"\"\"Find a combination of at most max_nums numbers whose sum is the target value\"\"\"\n    for num in nums:\n        assert num in options\n    return len(nums) <= max_nums and sum(nums) == target\n\ndef g(target=30, max_nums=4, options=[2, 5, 10, 15, 20]):\n    from itertools import combinations\n    for n in range(1, max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)\n\nassert f(g())\n\n",
        "idx_generation": 427,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(words: List[str], target_length=5, target_count=2) -> bool:\n    \"\"\"Check if there are at least target_count number of words in the list with target_length characters\"\"\"\n    return sum(len(word) == target_length for word in words) >= target_count\n\ndef g(target_length=5, target_count=2):\n    return ['apple', 'banana', 'orange', 'grape', 'kiwi'], target_length, target_count\n\nassert f(*g())\n",
        "idx_generation": 259,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if any two numbers in the list add up to the target value.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(numbers: List[int]):\n    return numbers\n\nassert f(g([1, 2, 3, 4, 5]), target=7)\n",
        "idx_generation": 102,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if a string s contains only uppercase letters and has length n.\"\"\"\n    return s.isupper() and len(s) == n\ndef g(n=3):\n    return \"ABC\"[:n]\nassert f(g())\n",
        "idx_generation": 376,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=50) -> bool:\n    \"\"\"Find if there exists a subsequence of numbers in the list whose sum is equal to the target.\"\"\"\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in numbers:\n        for i in range(target, num-1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    return dp[target]\n\ndef g(target=50):\n    return [5, 10, 15, 20, 25]\n\nassert f(g())\n\n",
        "idx_generation": 457,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target integer, determine if there exists a pair of integers in the list that add up to the target.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 431,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Given a list of integers and a target number, find any pair of numbers in the list that add up to the target.\nSample Input:\n[1, 2, 3, 4]\nSample Output:\n(1, 4)\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(target=5):\n    return [1, 4]\nassert f(g())\n",
        "idx_generation": 3,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\n\ndef g(nums=[5, 10, 15, 20, 25, 30, 35, 40, 45, 50]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 331,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, nums=[3, 5, 7, 11, 13, 17, 19, 23, 29, 31]) -> bool:\n    \"\"\"Check if all the characters in the string are prime numbers\"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return all(is_prime(ord(c)) for c in s)\ndef g(nums=[3, 5, 7, 11, 13, 17, 19, 23, 29, 31]):\n    return ''.join(chr(n) for n in nums)\nassert f(g())\n",
        "idx_generation": 12,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=55555555) -> bool:\n    \"\"\"Find a number that when squared is close to a and x is non-negative.\"\"\"\n    return abs(x ** 2 - a) < 10 ** (-5) and x >= 0\ndef g(a=55555555):\n    return a ** 0.5\nassert f(g())\n",
        "idx_generation": 8,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\nimport itertools\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a subset of numbers in the given list whose sum is equal to the target\"\"\"\n    for r in range(1, len(nums) + 1):\n        for subset in itertools.combinations(nums, r):\n            if sum(subset) == target:\n                return True\n    return False\n\ndef g(target=20):\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\nassert f(g())\n",
        "idx_generation": 432,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='abcdefghi', target='') -> bool:\n    \"\"\"Find the two slice indices that give the specific target in string s\"\"\"\n    (i, j) = inds\n    return s[i:j] == target\ndef g(s='abcdefghi', target=''):\n    from itertools import product\n    for (i, j) in product(range(-len(s) - 1, len(s) + 1), repeat=2):\n        try:\n            if s[i:j] == target:\n                return [i, j]\n        except (IndexError, ValueError):\n            pass\nassert f(g())\n",
        "idx_generation": 259,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 105,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_sum=10):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n\n",
        "idx_generation": 378,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find if there exists a subsequence of numbers in the list whose sum is equal to the target.\"\"\"\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in numbers:\n        for i in range(target, num-1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    return dp[target]\n\ndef g(target=100):\n    return [10, 20, 30, 40]\n\nassert f(g())\n\n",
        "idx_generation": 457,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 433,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19]) -> bool:\n    \"\"\"Given a number n and a list of primes, determine if n is divisible by all the primes in the list.\"\"\"\n    for prime in primes:\n        if n % prime != 0:\n            return False\n    return True\n\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19]):\n    multiple = 1\n    for prime in primes:\n        multiple *= prime\n    return multiple\n\nassert f(g())\n",
        "idx_generation": 4,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=24) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\n\ndef g(nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 331,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, string='abababababababab') -> bool:\n    \"\"\"Find the number of occurrences of 'ab' in the given string.\"\"\"\n    return n == string.count('ab')\ndef g(string='abababababababab'):\n    return string.count('ab')\nassert f(g())\n",
        "idx_generation": 15,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=5, b=10) -> bool:\n    \"\"\"Find a number x that is divisible by a and b\"\"\"\n    return x % a == 0 and x % b == 0\ndef g(a=5, b=10):\n    return a * b\nassert f(g())\n",
        "idx_generation": 9,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if the sum of any four numbers in a list is equal to a given target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                for l in range(k+1, len(nums)):\n                    if nums[i] + nums[j] + nums[k] + nums[l] == target:\n                        return True\n    return False\n\ndef g(target=50):\n    nums = [10, 20, 5, 15, 25]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 433,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], target='python') -> bool:\n    \"\"\"Check if any of the strings in the list contains the target substring.\"\"\"\n    return any(target in s for s in strings)\n\ndef g(target='python'):\n    return ['python programming', 'java programming', 'c++ programming', 'pythonista']\n\nassert f(g())\n",
        "idx_generation": 263,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=8) -> bool:\n    \"\"\"Given an array of integers arr and a target integer, find two numbers in arr that sum up to the target.\nSample Input:\narr = [2, 4, 6, 8, 10]\ntarget = 12\nSample Output:\nTrue\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=8):\n    return [2, 4, 6, 8, 10]\nassert f(g())\n",
        "idx_generation": 107,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if it is possible to find two numbers in a given list that sum up to a target value.\n    Return True if such pair exists, False otherwise.\"\"\"\n    nums.sort()\n    left = 0\n    right = len(nums) - 1\n    while left < right:\n        current_sum = nums[left] + nums[right]\n        if current_sum == target:\n            return True\n        elif current_sum < target:\n            left += 1\n        else:\n            right -= 1\n    return False\n\ndef g(nums: List[int], target=5):\n    nums = list(set(nums))\n    return nums\n\nassert f(g([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n",
        "idx_generation": 381,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=10):\n    return [2, 4, 6, 8]\n\nassert f(g())\n",
        "idx_generation": 459,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists two distinct indices i and j in the array, such that nums[i] + nums[j] = k\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == k:\n                return True\n    return False\n\ndef g(k=3):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 435,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Find a pair of numbers from the list that sums up to the target sum\"\"\"\n    for i, num1 in enumerate(nums):\n        for num2 in nums[i+1:]:\n            if num1 + num2 == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  # A list of numbers\n\nassert f(g())\n",
        "idx_generation": 4,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\n\ndef g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 334,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target='Python') -> bool:\n    \"\"\"Check if the target string is a substring of the given string.\"\"\"\n    return target in string\ndef g(target='Python'):\n    string = 'Hello, I love Python programming!'\n    return string\nassert f(g())\n",
        "idx_generation": 18,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=5, b=10) -> bool:\n    \"\"\"Check if the sum of x, a, and b is divisible by x\"\"\"\n    return (x + a + b) % x == 0\n\ndef g(a=5, b=10):\n    return a + b\n\nassert f(g())\n",
        "idx_generation": 15,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int, k: int) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose sum of elements is less than or equal to the target number, \n    and the length of the subsequence is greater than or equal to k.\"\"\"\n    for r in range(1, len(nums) + 1):\n        for subset in itertools.combinations(nums, r):\n            if sum(subset) <= target and len(subset) >= k:\n                return True\n    return False\n\ndef g(target: int, k: int):\n    return [10, 20, 30, 40, 50], target, k\n\nassert f(*g(100, 2))\n",
        "idx_generation": 444,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given string contains exactly n consecutive vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(n=3):\n    return 'aeiou' * n\nassert f(g())\n",
        "idx_generation": 266,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\n\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 107,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(inds: List[int], string='puzzlemutation') -> bool:\n    \"\"\"Find increasing indices to make the substring \"tio\" (with a surprise twist)\"\"\"\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'tio'\ndef g(string='puzzlemutation'):\n    target = 'tio'\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans\nassert f(g())\n",
        "idx_generation": 384,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=0) -> bool:\n    \"\"\"Check if there exists a subset of numbers in the list whose sum is equal to the target_sum\"\"\"\n    def subset_sum(nums, target_sum):\n        if target_sum == 0:\n            return True\n        if not nums or target_sum < 0:\n            return False\n        return subset_sum(nums[1:], target_sum - nums[0]) or subset_sum(nums[1:], target_sum)\n    return subset_sum(nums, target_sum)\n\ndef g(target_sum=0):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 467,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target value.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5], target=9):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 436,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(nums: List[int], target_sum=100, count=5) -> bool:\n    \"\"\"Find a list of count numbers that sum up to target_sum\"\"\"\n    return sum(nums) == target_sum and len(nums) == count\n\ndef g(target_sum=100, count=5):\n    nums = []\n    for i in range(1, count+1):\n        num = int(math.ceil(target_sum / count))\n        nums.append(num)\n        target_sum -= num\n        count -= 1\n    return nums\n\nassert f(g())\n",
        "idx_generation": 5,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\n\ndef g(nums=[2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 334,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s='apple', t='banana') -> bool:\n    \"\"\"Ignoring case, compare s, t lexicographically. Output 0 if they are =, -1 if s < t, 1 if s > t.\"\"\"\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False\ndef g(s='apple', t='banana'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1\nassert f(g())\n",
        "idx_generation": 19,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=93252338, b=20) -> bool:\n    \"\"\"Solve a multiplication problem\"\"\"\n    return x * a == b\ndef g(a=93252338, b=20):\n    return b / a\nassert f(g())\n",
        "idx_generation": 22,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\n\ndef f(nums: List[int], target=100, max_nums=3, options=[10, 20, 30, 40, 50, 60, 70, 80, 90]) -> bool:\n    \"\"\"Find a combination of at most max_nums numbers whose sum is the target value\"\"\"\n    for num in nums:\n        assert num in options\n    return len(nums) <= max_nums and sum(nums) == target\n\ndef g(target=100, max_nums=3, options=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    from itertools import combinations\n    for n in range(1, max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)\n\nassert f(g())\n",
        "idx_generation": 460,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=3, length=12) -> bool:\n    \"\"\"Check if a given string contains a certain number of copies of a given substring and has a specific length.\"\"\"\n    return string.count(substring) == count and len(string) == length\ndef g(substring='abc', count=3, length=12):\n    return substring * count + 'xyz'\nassert f(g())\n",
        "idx_generation": 274,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Check if all the numbers in the list add up to the target\"\"\"\n    return sum(numbers) == target\n\ndef g(target=0):\n    return [1, 2, 3, -6]\n\nassert f(g())\n",
        "idx_generation": 108,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='abcdefghijklmnopqrstuvwxyz') -> bool:\n    \"\"\"Check if a given string contains all the characters in a target string\"\"\"\n    return all(char in s for char in target)\n\ndef g(target='abcdefghijklmnopqrstuvwxyz'):\n    return target\n\nassert f(g())\n",
        "idx_generation": 395,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if there exists a row in the matrix that contains only odd numbers\"\"\"\n    return any(all(num % 2 != 0 for num in row) for row in matrix)\n\ndef g():\n    return [[1, 3, 5], [2, 4, 6], [7, 9, 11], [8, 10, 12]]\n\nassert f(g())\n",
        "idx_generation": 468,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int], target: int = 10) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    return any(num1 + num2 == target for num1 in num_list for num2 in num_list if num1 != num2)\ndef g(num_list: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: int = 10):\n    return num_list\n\nassert f(g())\n",
        "idx_generation": 436,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=100) -> bool:\n    \"\"\"Check if a given list contains a number that is divisible by n.\"\"\"\n    return any(num % n == 0 for num in x)\ndef g(n=100):\n    return [i for i in range(1, n+1)]\nassert f(g())\n",
        "idx_generation": 5,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=50) -> bool:\n    \"\"\"Check if there exists a combination of numbers whose sum is equal to the target sum\"\"\"\n    def number_combination(numbers, target_sum):\n        if target_sum == 0:\n            return True\n        if not numbers or target_sum < 0:\n            return False\n        return number_combination(numbers[1:], target_sum - numbers[0]) or number_combination(numbers[1:], target_sum)\n    return number_combination(numbers, target_sum)\n\ndef g(numbers=[5, 10, 15, 20, 25]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 335,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, words=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Given a string and a list of words, determine if the string can be formed by concatenating the words in the list.\n    Each word in the list can be used only once.\"\"\"\n    word_count = {}\n    for word in words:\n        if word not in word_count:\n            word_count[word] = 0\n        word_count[word] += 1\n\n    i = 0\n    while i < len(string):\n        found_word = False\n        for word in word_count:\n            if string[i:i+len(word)] == word:\n                if word_count[word] > 0:\n                    word_count[word] -= 1\n                    i += len(word)\n                    found_word = True\n                    break\n        if not found_word:\n            return False\n\n    for count in word_count.values():\n        if count > 0:\n            return False\n\n    return True\n\ndef g(words=['apple', 'banana', 'cherry', 'date']):\n    return ''.join(words)\n\nassert f(g())\n",
        "idx_generation": 19,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=2, b=5) -> bool:\n    \"\"\"Check if the sum of x and the product of a and b is divisible by x\"\"\"\n    return (x + (a * b)) % x == 0\n\ndef g(a=2, b=5):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 24,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\n\ndef f(nums: List[int], target=75, max_nums=4, options=[5, 10, 15, 20, 25, 30, 35, 40, 45]) -> bool:\n    \"\"\"Find a combination of at most max_nums numbers whose sum is the target value\"\"\"\n    for num in nums:\n        assert num in options\n    return len(nums) <= max_nums and sum(nums) == target\n\ndef g(target=75, max_nums=4, options=[5, 10, 15, 20, 25, 30, 35, 40, 45]):\n    from itertools import combinations\n    for n in range(1, max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)\n\nassert f(g())\n",
        "idx_generation": 460,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Find a word in the list that starts with a given prefix\"\"\"\n    return any(word.startswith(prefix) for word in words)\ndef g(prefix='pre'):\n    return ['prefix', 'hello', 'prestige', 'programming']\nassert f(g())\n",
        "idx_generation": 285,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that add up to the target.\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i + 1, len(nums)) for k in range(j + 1, len(nums))))\ndef g(target=20):\n    return [i for i in range(target - 2)] + [2 * target - 2, 2 * target - 1]\nassert f(g())\n",
        "idx_generation": 111,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(seq: List[int], target=0, start=0) -> bool:\n    \"\"\"Find the index of the first occurrence of the target number in a sequence.\"\"\"\n    return seq.index(target, start) == start\n\ndef g(target=0, start=0):\n    return [target] + [i for i in range(10)]\n\nassert f(g())\n",
        "idx_generation": 410,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\n\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target value.\"\"\"\n    return any(num1 + num2 + num3 == target for i, num1 in enumerate(numbers) for j, num2 in enumerate(numbers[i+1:]) for num3 in numbers[i+j+2:])\n\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n\n",
        "idx_generation": 469,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target number.\"\"\"\n    return any(numbers[i] + numbers[j] == target for i in range(len(numbers)) for j in range(i+1, len(numbers)))\n    \ndef g():\n    return [1, 2, 3, 4, 5, 6]\n    \nassert f(g(), 9)\n",
        "idx_generation": 464,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: int, a=5, b=10) -> bool:\n    \"\"\"Check if the given integer satisfies the equation\"\"\"\n    return x + a == b\ndef g(a=5, b=10):\n    return b - a\nassert f(g())\n",
        "idx_generation": 5,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers. You can only move down or right in the grid. The path must contain the number 4 at least once and the number 2 exactly once.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_four, found_two):\n        if i == rows - 1 and j == cols - 1 and found_four:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 2:\n            found_two += 1\n            if found_two > 1:\n                return False\n        if nums[i][j] == 4:\n            found_four = True\n        return helper(i+1, j, found_four, found_two) or helper(i, j+1, found_four, found_two)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[3, 1, 4], [2, 4, 0], [1, 2, 3]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 339,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='gogomafokuchicowejegothemeralic', b='kybyjifidoquifwejegothemelihitextodeju', length=10) -> bool:\n    \"\"\"Check if a string of length length is a substring of both strings a and b\"\"\"\n    return len(s) == length and s in a and (s in b)\ndef g(a='gogomafokuchicowejegothemeralic', b='kybyjifidoquifwejegothemelihitextodeju', length=10):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]\nassert f(g())\n",
        "idx_generation": 20,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: float, a=1234567) -> bool:\n    \"\"\"Find a positive number that when squared is close to a.\"\"\"\n    return abs(x ** 2 - a) < 10 ** (-3) and x > 0\ndef g(a=1234567):\n    return a ** 0.5\nassert f(g())\n",
        "idx_generation": 27,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\n\ndef f(nums: List[int], target=200, max_nums=6, options=[5, 10, 20, 40, 80, 160]) -> bool:\n    \"\"\"Find a combination of at most max_nums numbers whose sum is the target value\"\"\"\n    for num in nums:\n        assert num in options\n    return len(nums) <= max_nums and sum(nums) == target\n\ndef g(target=200, max_nums=6, options=[5, 10, 20, 40, 80, 160]):\n    from itertools import combinations\n    for n in range(1, max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)\n\nassert f(g())\n",
        "idx_generation": 460,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(inds: List[int], string='programming') -> bool:\n    \"\"\"Find indices to make the substring \"pro\" (with a surprise twist)\"\"\"\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'pro'\ndef g(string='programming'):\n    target = 'pro'\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans\nassert f(g())\n",
        "idx_generation": 289,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subsequence of numbers in the list that sum up to the target number\"\"\"\n    for i in range(1, len(nums)+1):\n        for j in range(len(nums)-i+1):\n            if sum(nums[j:j+i]) == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70]\n\nassert f(g())\n",
        "idx_generation": 115,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target='apple') -> bool:\n    \"\"\"Check if a given word can be formed by rearranging the letters of a word from a list.\"\"\"\n    target_letters = list(target)\n    for word in words:\n        if sorted(list(word)) == sorted(target_letters):\n            return True\n    return False\n\ndef g(words=['elppa', 'banana', 'cherry', 'date', 'elderberry']):\n    return words\n\nassert f(g())\n",
        "idx_generation": 416,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=100):\n    return [1, 7, 20, 50, 80, 10]\n\nassert f(g())\n",
        "idx_generation": 472,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int = 0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sum up to the target.\"\"\"\n    seen = set()\n    for num in numbers:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target: int = 0):\n    return [1, 3, 5, 7, 9]\n\nassert f(g(), target=12)\n",
        "idx_generation": 493,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: float, a=3.14, b=6.28) -> bool:\n    \"\"\"Check if a number is within a specific range.\"\"\"\n    return a <= x <= b\ndef g(a=3.14, b=6.28):\n    return (a + b) / 2\nassert f(g())\n",
        "idx_generation": 7,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=15):\n    return [3, 5, 7, 9, 11]\n\nassert f(g())\n",
        "idx_generation": 340,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], sentence='The quick brown fox jumps over the lazy dog.') -> bool:\n    \"\"\"Check if all words are present in the given sentence\"\"\"\n    return all(word in sentence for word in words)\ndef g(sentence='The quick brown fox jumps over the lazy dog.'):\n    words = sentence.split()\n    return words\nassert f(g())\n",
        "idx_generation": 21,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[452452, 111673658096, 83221402264, 5027670648, 61177116, 154154, 116116, 1508784124848, 17036343324, 29091062, 100726626], upper_bound=1000000) -> bool:\n    \"\"\"Find a large common divisor of the list of integers that is less than or equal to the upper bound.\"\"\"\n    return all((i % n == 0 for i in nums)) and n <= upper_bound\ndef g(nums=[452452, 111673658096, 83221402264, 5027670648, 61177116, 154154, 116116, 1508784124848, 17036343324, 29091062, 100726626], upper_bound=1000000):\n    n = 0\n    for i in nums:\n        (m, n) = (min(i, n), max(i, n))\n        while m > 0:\n            (m, n) = (n % m, m)\n    return n\nassert f(g())\n",
        "idx_generation": 27,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int = 100) -> bool:\n    \"\"\"Check if there is a combination of three numbers in the list that add up to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target: int = 100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g())\n",
        "idx_generation": 466,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(inds: List[int], string='applebananacherry') -> bool:\n    \"\"\"Find increasing indices to make the substring \"banana\" (with a surprise twist)\"\"\"\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'banana'\ndef g(string='applebananacherry'):\n    target = 'banana'\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans\nassert f(g())\n",
        "idx_generation": 301,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the list of numbers is sorted in non-decreasing order\"\"\"\n    return all(numbers[i] <= numbers[i+1] for i in range(len(numbers)-1))\ndef g():\n    return [2, 5, 7, 10, 12]\nassert f(g())\n",
        "idx_generation": 118,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if a given string is a palindrome and has length greater than or equal to n\"\"\"\n    return s == s[::-1] and len(s) >= n\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 434,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=7, b=20, c=25) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])\ndef g(a=7, b=20, c=25):\n    return -a + sum([b * i for i in range(c)])\nassert f(g())\n",
        "idx_generation": 474,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that divide the target.\"\"\"\n    seen = set()\n    for num in numbers:\n        if num == 0 and target == 0:\n            return True\n        if num != 0 and target % num == 0:\n            complement = target // num\n            if complement in seen:\n                return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g(), target=80)\n",
        "idx_generation": 493,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))\ndef g(target=10):\n    return [i for i in range(target - 1)] + [2 * target - 1]\nassert f(g())\n",
        "idx_generation": 10,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=30) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=30):\n    return [5, 9, 13, 17, 21]\n\nassert f(g())\n",
        "idx_generation": 340,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='hello', length=1) -> bool:\n    \"\"\"Find a substring of the given length centered within the target string.\"\"\"\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s\n\ndef g(target='hello', length=1):\n    return target[(len(target) - length) // 2 + 1:(len(target) + length) // 2 + 1]\n\nassert f(g())\n",
        "idx_generation": 22,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a prime number.\"\"\"\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n",
        "idx_generation": 28,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target: int=10, min_numbers: int=2) -> bool:\n    \"\"\"Check if there exists a combination of at least min_numbers from the list 'numbers' whose sum is equal to the target value.\"\"\"\n    from itertools import combinations\n    for n in range(min_numbers, len(numbers) + 1):\n        for c in combinations(numbers, n):\n            if sum(c) == target:\n                return True\n    return False\n\ndef g(numbers: List[int]=[1, 2, 3, 4, 5]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 469,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[str], target='python') -> bool:\n    \"\"\"Check if the target string can be formed by concatenating any three strings in the list.\"\"\"\n    return any(x + y + z == target for x in arr for y in arr for z in arr)\n\ndef g(target='python'):\n    return ['py', 'th', 'on', 'pyth', 'pyt', 'hon']\n\nassert f(g())\n",
        "idx_generation": 304,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains any duplicate elements\"\"\"\n    return len(nums) != len(set(nums))\ndef g():\n    return [1, 2, 3, 4, 5, 5, 6]\nassert f(g())\n",
        "idx_generation": 118,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], k=3) -> bool:\n    \"\"\"Check if there exists two distinct indices i and j in the list, such that words[i] and words[j] have a common character at the kth index\"\"\"\n    for i in range(len(words)):\n        for j in range(i+1, len(words)):\n            if words[i][k] == words[j][k]:\n                return True\n    return False\n\ndef g(k=3):\n    return ['apple', 'banana', 'cherry', 'date', 'elderberry']\n\nassert f(g())\n",
        "idx_generation": 435,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], n=5) -> bool:\n    \"\"\"Check if the length of the list is divisible by n.\"\"\"\n    return len(nums) % n == 0\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n=5):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 476,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target.\"\"\"\n    return any(target - num in nums for num in nums)\n\ndef g(nums: List[int]):\n    return nums\n\nassert f(g([1, 2, 3, 4, 5]), target=7)\n\n",
        "idx_generation": 497,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=3) -> bool:\n    \"\"\"Check if the sum of the list elements is greater than a given number\"\"\"\n    return sum(x) > n\ndef g(n=3):\n    return [i**2 for i in range(n+1)]\nassert f(g())\n",
        "idx_generation": 10,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=5, row=0, col=0) -> bool:\n    \"\"\"Check if the target number is present in the matrix starting from the given row and column index.\"\"\"\n    return matrix[row][col] == target or (row < len(matrix)-1 and f(matrix, target, row+1, col)) or (col < len(matrix[0])-1 and f(matrix, target, row, col+1))\ndef g(target=5, row=0, col=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 345,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(w: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if a given word w is a substring of any word in a list\"\"\"\n    return any((w in word for word in words))\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return words[0]\nassert f(g())\n",
        "idx_generation": 23,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, limit=1000) -> bool:\n    \"\"\"Find an integer whose perfect square is less than or equal to the limit.\"\"\"\n    return n * n <= limit\n\ndef g(limit=1000):\n    return int(limit ** 0.5)\n\nassert f(g())\n",
        "idx_generation": 31,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a subset of the list whose sum is not equal to the target number\"\"\"\n    for r in range(1, len(nums)+1):\n        for subset in itertools.combinations(nums, r):\n            if sum(subset) != target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8]\n\nassert f(g())\n",
        "idx_generation": 477,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='abcdefghi', target='') -> bool:\n    \"\"\"Find the two slice indices that give the specific target in string s\"\"\"\n    (i, j) = inds\n    return s[i:j] == target\ndef g(s='abcdefghi', target=''):\n    from itertools import product\n    for (i, j) in product(range(-len(s) - 1, len(s) + 1), repeat=2):\n        try:\n            if s[i:j] == target:\n                return [i, j]\n        except (IndexError, ValueError):\n            pass\nassert f(g())\n",
        "idx_generation": 306,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target sum.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=100):\n    numbers = [10, 20, 30, 40, 50, 60, 70]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 120,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(cities: List[str], capital='New York') -> bool:\n    \"\"\"Check if the specified capital city is in the list of cities.\"\"\"\n    return capital in cities\n\ndef g():\n    return ['London', 'Paris', 'Tokyo', 'New York', 'Berlin']\n\nassert f(g())\n",
        "idx_generation": 437,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subset of the given list where the sum of its elements is equal to the target value.\"\"\"\n    n = len(arr)\n    dp = [[False] * (target + 1) for _ in range(n+1)]\n    dp[0][0] = True\n    for i in range(1, n+1):\n        for j in range(target+1):\n            dp[i][j] = dp[i-1][j]\n            if j >= arr[i-1]:\n                dp[i][j] = dp[i][j] or dp[i-1][j-arr[i-1]]\n    return dp[n][target]\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n\n",
        "idx_generation": 484,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=10) -> bool:\n    \"\"\"Check if any number in the list is divisible by a given number\"\"\"\n    return any(num % n == 0 for num in x)\ndef g(n=10):\n    return [i for i in range(1, n+1)]\nassert f(g())\n",
        "idx_generation": 10,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(arr: List[int], target=75) -> bool:\n    \"\"\"Check if the list can be divided into two subarrays such that the absolute difference between their sums is equal to the target value.\"\"\"\n    total_sum = sum(arr)\n    if total_sum % 2 != 0:\n        return False\n    target_sum = total_sum // 2\n    dp = [False] * (target_sum + 1)\n    dp[0] = True\n    for num in arr:\n        for j in range(target_sum, num - 1, -1):\n            dp[j] = dp[j] or dp[j - num]\n    return dp[target_sum]\ndef g(target=75):\n    return [15, 10, 20, 30, 25, 5, 35]\nassert f(g())\n",
        "idx_generation": 350,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='ho') -> bool:\n    \"\"\"Check if the word is a substring of s\"\"\"\n    return word in s\ndef g(word='ho'):\n    return word\nassert f(g())\n",
        "idx_generation": 24,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=5) -> bool:\n    \"\"\"Determine if a number is divisible by both a and b\"\"\"\n    return n % a == 0 and n % b == 0\ndef g(a=3, b=5):\n    return a * b\nassert f(g())\n",
        "idx_generation": 31,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"Find the number of occurrences of the target integer in a list of integers.\"\"\"\n    count = 0\n    for num in nums:\n        if num == target:\n            count += 1\n    return count\n\ndef g(nums=[1, 2, 3, 4, 2, 5, 2], target=2):\n    return nums, target\n\nassert f(*g()) == 3\n",
        "idx_generation": 481,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='abcdefghi', target='') -> bool:\n    \"\"\"Find the two slice indices that give the specific target in string s\"\"\"\n    (i, j) = inds\n    return s[i:j] == target\ndef g(s='abcdefghi', target=''):\n    from itertools import product\n    for (i, j) in product(range(-len(s) - 1, len(s) + 1), repeat=2):\n        try:\n            if s[i:j] == target:\n                return [i, j]\n        except (IndexError, ValueError):\n            pass\nassert f(g())\n",
        "idx_generation": 306,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(grades: List[int], passing_grade: int = 60) -> bool:\n    \"\"\"Check if all the grades in the list are above or equal to the passing grade.\"\"\"\n    return all(grade >= passing_grade for grade in grades)\n\ndef g(passing_grade: int = 60) -> Tuple[List[int], int]:\n    grades = [75, 80, 90, 65, 70]\n    return grades, passing_grade\n\nassert f(*g())\n",
        "idx_generation": 123,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[str], target: str) -> bool:\n    \"\"\"Check if the target string exists in a list of strings. The list is sorted in non-decreasing order.\"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return True\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\n\ndef g(arr=[\"apple\", \"banana\", \"cherry\", \"grape\", \"kiwi\"], target=\"banana\"):\n    return arr, target\n\nassert f(*g())\n",
        "idx_generation": 447,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=6, n=6) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=6, n=6):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 13,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=15) -> bool:\n    \"\"\"Determine if there exists a subset of numbers in the given array that adds up to the target sum\"\"\"\n    dp = [[False] * (target + 1) for _ in range(len(arr) + 1)]\n    for i in range(len(arr) + 1):\n        dp[i][0] = True\n    for i in range(1, len(arr) + 1):\n        for j in range(1, target + 1):\n            if arr[i-1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i-1]]\n    return dp[len(arr)][target]\n\ndef g(target=15):\n    return [i for i in range(1, target+1)]\n\nassert f(g())\n",
        "idx_generation": 369,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, k=3) -> bool:\n    \"\"\"Check if a string contains at least k occurrences of a specific character.\"\"\"\n    return string.count('a') >= k\ndef g(k=3):\n    return 'a' * k\nassert f(g())\n",
        "idx_generation": 25,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=10) -> bool:\n    \"\"\"Find a number that when multiplied by itself is approximately equal to a\"\"\"\n    return math.isclose(x * x, a, rel_tol=1e-3) and x > 0\n\ndef g(a=10):\n    return math.sqrt(a)\n\nassert f(g())\n",
        "idx_generation": 32,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a=3, b=5) -> bool:\n    \"\"\"Check if the given string contains a substring that consists of 'a' repeated 'b' times\"\"\"\n    return s.count('a' * b) > 0\ndef g(a=3, b=5):\n    return 'a' * b\nassert f(g())\n",
        "idx_generation": 487,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(s: str, k: int) -> bool:\n    \"\"\"Given a string 's' and an integer 'k', check if there exists a substring of length 'k' that contains all distinct characters.\"\"\"\n    if len(s) < k:\n        return False\n    distinct_chars = set()\n    for i in range(len(s)-k+1):\n        substring = s[i:i+k]\n        distinct_chars.clear()\n        for char in substring:\n            distinct_chars.add(char)\n        if len(distinct_chars) == k:\n            return True\n    return False\n\ndef g(s=\"abcbadef\", k=3):\n    return s, k\n\nassert f(*g())\n",
        "idx_generation": 334,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose sum is equal to the target value.\"\"\"\n    return any(x + y == target for i, x in enumerate(numbers) for y in numbers[i+1:])\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 124,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[str], target: str) -> bool:\n    \"\"\"Check if the target string exists in a list of strings. The list is sorted in non-increasing order.\"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return True\n        elif arr[mid] < target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return False\n\ndef g(arr=[\"zoo\", \"lion\", \"elephant\", \"dog\", \"cat\"], target=\"dog\"):\n    return arr, target\n\nassert f(*g())\n",
        "idx_generation": 481,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=7, n=7) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=7, n=7):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 13,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]], max_steps=5) -> bool:\n    \"\"\"Given a 2D grid of integers, determine if there exists a path from the top-left corner to the bottom-right corner.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the number of steps taken to reach the bottom-right corner must be less than or equal to the max_steps.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, steps):\n        if i == rows - 1 and j == cols - 1 and found_one and steps <= max_steps:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        return helper(i+1, j, found_one, steps+1) or helper(i, j+1, found_one, steps+1)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 379,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the string has consecutive numbers from 1 to n.\"\"\"\n    for i in range(1, n+1):\n        if str(i) not in s:\n            return False\n    return True\ndef g(n=3):\n    return ''.join(str(i) for i in range(1, n+1))\nassert f(g())\n",
        "idx_generation": 27,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: float, coeffs=[3.5, 2.1, -1.0]) -> bool:\n    \"\"\"Find any (real) solution to:  a x^2 + b x + c where coeffs = [a, b, c].\n\"\"\"\n    (a, b, c) = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-06\ndef g(coeffs=[3.5, 2.1, -1.0]):\n    (a, b, c) = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans\nassert f(g())\n",
        "idx_generation": 33,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if there exists a pair of distinct numbers in the list whose sum is equal to n\"\"\"\n    nums = [4, 7, 2, 9, 5, 3, 1, 6, 8]\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == n:\n                return True\n    return False\n\ndef g():\n    return 10\n\nassert f(g())\n",
        "idx_generation": 496,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> int:\n    \"\"\"Count the number of occurrences of the target number in the list\"\"\"\n    count = 0\n    for num in nums:\n        if num == target:\n            count += 1\n    return count\n\ndef g(target=0):\n    return [1, 0, 3, 0, 5, 0, 7, 0, 9]\n\nassert f(g()) == 4\n",
        "idx_generation": 346,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=50) -> bool:\n    \"\"\"Find a pair of numbers in the list whose sum is equal to a given target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=50):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g())\n",
        "idx_generation": 125,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=4) -> bool:\n    \"\"\"Check if a given string has a length greater than or equal to n.\"\"\"\n    return len(s) >= n\ndef g(n=4):\n    return \"Hello, World!\"\nassert f(g())\n",
        "idx_generation": 484,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=6, lower=-1000, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is greater than or equal to the lower threshold\"\"\"\n    total = sum(seq[start:start+k])\n    return total >= lower\ndef g(k=6, lower=-1000, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    max_sum = float('-inf')\n    max_start = None\n    for i in range(len(seq)-k+1):\n        curr_sum = sum(seq[i:i+k])\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_start = i\n    return max_start\nassert f(g())\n",
        "idx_generation": 14,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the sum of all even numbers in the path must be greater than or equal to the sum of all odd numbers in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, even_sum, odd_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and even_sum >= odd_sum:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if nums[i][j] % 2 == 0:\n            even_sum += nums[i][j]\n        else:\n            odd_sum += nums[i][j]\n        return helper(i+1, j, found_one, even_sum, odd_sum) or helper(i, j+1, found_one, even_sum, odd_sum)\n\n    return helper(0, 0, False, 0, 0)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 390,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g(s: str):\n    return s + s[::-1]\n\nassert f(g(\"racecar\"))\n",
        "idx_generation": 28,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target.\"\"\"\n    n = len(arr)\n    visited = set()\n    for i in range(n):\n        complement = target / arr[i]\n        if complement in visited:\n            return True\n        visited.add(arr[i])\n    return False\n\ndef g(target=20):\n    return [i for i in range(1, int(target/2) + 1)]\n\nassert f(g())\n",
        "idx_generation": 38,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"Find the number of times the target integer occurs in a list of integers.\"\"\"\n    count = 0\n    for num in nums:\n        if num == target:\n            count += 1\n    return count\n\ndef g(nums=[1, 3, 5, 7, 9, 2, 4], target=2):\n    return nums, target\n\nassert f(*g()) == 1\n\n",
        "idx_generation": 498,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import List, Tuple\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose length is equal to the target number\"\"\"\n    for r in range(1, len(nums) + 1):\n        for subset in itertools.combinations(nums, r):\n            if len(subset) == target:\n                return True\n    return False\n\ndef g(target: int):\n    return [1, 2, 3, 4, 5], target\n\nassert f(*g(3))\n",
        "idx_generation": 373,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a sum greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] > target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 126,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Dict\n\ndef f(dictionary: Dict[str, int], target_key='key1') -> bool:\n    \"\"\"Check if the target_key exists in the dictionary\"\"\"\n    return target_key in dictionary\n\ndef g(target_key='key1'):\n    return {\"key1\": 10, \"key2\": 20, \"key3\": 30}\n\nassert f(g())\n\n",
        "idx_generation": 492,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if the product of all elements in lst is equal to the target\"\"\"\n    product = 1\n    for num in lst:\n        product *= num\n    return product == target\n\ndef g(target=100):\n    return [10, 5, 2]\n\nassert f(g())\n",
        "idx_generation": 15,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Determine if the given list contains a subsequence that multiplies up to the target value.\"\"\"\n    n = len(nums)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][1] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j // nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]\n\ndef g():\n    nums = [2, 3, 4, 5]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 391,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], count=3) -> bool:\n    \"\"\"Check if there are at least count number of names that contain the letter 'a'\"\"\"\n    return sum(name.count('a') for name in names) >= count\ndef g(count=3):\n    names = ['Alice', 'Bob', 'Charlie', 'David', 'Eva']\n    return names\nassert f(g())\n",
        "idx_generation": 29,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=3, s=15) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=3, s=15):\n    x = [s - n + 1, 1, 1]\n    return x\nassert f(g())\n",
        "idx_generation": 40,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=30, max_nums=2, options=[5, 10, 15, 20, 25]) -> bool:\n    \"\"\"Find a combination of at most max_nums numbers whose sum is the target value\"\"\"\n    for num in nums:\n        assert num in options\n    return len(nums) <= max_nums and sum(nums) == target\ndef g(target=30, max_nums=2, options=[5, 10, 15, 20, 25]):\n    from itertools import combinations\n    for n in range(1, max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g())\n\n",
        "idx_generation": 405,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if any three numbers in the list can be added together to equal the target value.\"\"\"\n    return any(x + y + z == target for x in arr for y in arr for z in arr)\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g())\n\n",
        "idx_generation": 130,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"Find all indices where the target integer occurs in a list of integers.\"\"\"\n    return [i for i in range(len(nums)) if nums[i] == target]\n\ndef g(nums=[1, 3, 5, 7, 2, 9, 2, 4], target=2):\n    return nums, target\n\nassert f(*g()) == [4, 6]\n",
        "idx_generation": 493,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Check if the given number is a prime number.\n    - n: number to check for primality\"\"\"\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def has_digit(n):\n        return any(char.isdigit() for char in str(n))\n\n    def is_even(n):\n        return n % 2 == 0\n\n    def is_valid_range(n):\n        return n >= 2 and n <= 1000\n\n    return (is_prime(n) and\n            has_digit(n) and\n            not is_even(n) and\n            is_valid_range(n))\n\ndef g():\n    return 17\nassert f(g())\n",
        "idx_generation": 15,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target=25):\n    return [5, 10, 15, 20, 25, 30, 35, 40]\n\nassert f(g())\n",
        "idx_generation": 393,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, s='apple') -> bool:\n    \"\"\"Check if a string contains a specific substring and is equal to a given word.\"\"\"\n    return s in x and x == s\ndef g(s='apple'):\n    return s\nassert f(g())\n",
        "idx_generation": 30,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=4, c=6, d=2) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers) - d\"\"\"\n    return n + a == sum([b * i for i in range(c)]) - d\ndef g(a=3, b=4, c=6, d=2):\n    return -a + sum([b * i for i in range(c)]) - d\nassert f(g())\n",
        "idx_generation": 41,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings: List[str], count=3) -> bool:\n    \"\"\"Check if there are exactly 'count' number of substrings present in the given string 's'\"\"\"\n    return len(set(substrings)) == count and all((sub in s for sub in substrings))\n\ndef g(count=3):\n    return ['apple', 'banana', 'cherry']\n\nassert f('I like to eat apple, banana, and cherry!', g())\n",
        "idx_generation": 409,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if any two numbers in the list can be subtracted to equal the target value.\"\"\"\n    return any(x - y == target for x in arr for y in arr)\ndef g(target=0):\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\nassert f(g())\n",
        "idx_generation": 131,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the target integer is present in a list of integers.\"\"\"\n    return target in nums\n\ndef g(nums=[1, 3, 5, 7, 9, 2, 4], target=2):\n    return nums, target\n\nassert f(*g()) == True\n",
        "idx_generation": 493,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is a symmetric matrix. Return True if it is, otherwise return False.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 16,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grid: List[List[int]], target=100) -> bool:\n    \"\"\"Given a grid of numbers, find a path from the top-left corner to the bottom-right corner that maximizes the sum of the numbers along the path. The sum of the numbers along the path should be less than or equal to the target value.\"\"\"\n    m, n = len(grid), len(grid[0])\n    dp = [[0] * n for _ in range(m)]\n    dp[0][0] = grid[0][0]\n    for i in range(1, m):\n        dp[i][0] = dp[i-1][0] + grid[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + grid[0][j]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    return dp[m-1][n-1] <= target\n\ndef g(target=100):\n    grid = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    return grid\n\nassert f(g())\n",
        "idx_generation": 401,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if the given string is a palindrome. Return True if it is, otherwise return False.\"\"\"\n    return string == string[::-1]\n\ndef g():\n    return \"madam\"\n\nassert f(g())\n",
        "idx_generation": 34,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=5, c=8) -> bool:\n    \"\"\"Find n such that n * a == b * (the sum of the first c integers)\"\"\"\n    return n * a == sum([b * i for i in range(c)])\ndef g(a=2, b=5, c=8):\n    return sum([b * i for i in range(c)]) / a\nassert f(g())\n",
        "idx_generation": 43,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=5) -> bool:\n    \"\"\"Check if the given string contains the substring repeated a certain number of times.\"\"\"\n    return string.count(substring) == count\n\ndef g(substring='abc', count=5):\n    return substring * count\n\nassert f(g())\n",
        "idx_generation": 429,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(n: int, nums: List[int]=[1, 3, 5, 7, 9, 11, 13], k=2) -> bool:\n    \"\"\"Given a list of integers and given an integer k, determine whether there exists two numbers in the list whose absolute difference is greater than k.\"\"\"\n    assert all((nums[i] <= nums[i + 1] for i in range(len(nums) - 1))), 'Hint: nums are non-decreasing'\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if abs(nums[i] - nums[j]) > k:\n                return True\n    return False\ndef g(nums=[1, 3, 5, 7, 9, 11, 13], k=2):\n    return nums\nassert f(g())\n\n",
        "idx_generation": 132,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(words: List[str], prefix=\"s\") -> bool:\n    \"\"\"Check if all words in the list start with the given prefix.\"\"\"\n    return all(word.startswith(prefix) for word in words)\n\ndef g(words: List[str]):\n    return words\n\nassert f(g([\"sun\", \"star\", \"sky\"]))\n\n",
        "idx_generation": 497,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there are three numbers in nums that sum up to target.\"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=50):\n    nums = [14, 23, 19, 8, 6, 11, 27, 32, 17, 9, 21, 5, 13, 7, 10, 25, 16, 4, 29, 24]\n    return nums\nassert f(g())\n",
        "idx_generation": 18,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers. You can only move down or right in the grid. The path must contain the number 1 at least once, and the sum of all numbers along the path must be even.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and path_sum % 2 == 0:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_one, path_sum) or helper(i, j+1, found_one, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[2, 1, 1], [3, 2, 1], [1, 3, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 402,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='racecar') -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\ndef g(target='racecar'):\n    return target\nassert f(g())\n",
        "idx_generation": 34,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import factorial\n\ndef f(n: int, a=2, b=10) -> bool:\n    \"\"\"Find n such that n! is divisible by a and n is a multiple of b\"\"\"\n    return factorial(n) % a == 0 and n % b == 0\n\ndef g(a=2, b=10):\n    n = 1\n    while True:\n        if factorial(n) % a == 0 and n % b == 0:\n            return n\n        n += 1\n\nassert f(g())\n",
        "idx_generation": 44,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(indices: List[int], s='hello world', target='') -> bool:\n    \"\"\"Find the two slice indices that give the specific target in string s\"\"\"\n    (i, j) = indices\n    return s[i:j] == target\ndef g(s='hello world', target=''):\n    from itertools import product\n    for (i, j) in product(range(-len(s) - 1, len(s) + 1), repeat=2):\n        try:\n            if s[i:j] == target:\n                return [i, j]\n        except (IndexError, ValueError):\n            pass\nassert f(g())\n",
        "idx_generation": 466,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists two numbers in the list that sum up to the target number.\"\"\"\n    for i in range(len(nums)-1):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target: int):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target\n\nassert f(*g(13))\n\n",
        "idx_generation": 133,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the target integer is present in a list of integers.\"\"\"\n    return target in nums\n\ndef g(nums=[1, 3, 5, 7, 9, 2, 4], target=2):\n    return nums, target\n\nassert f(*g()) == True\n\n",
        "idx_generation": 498,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\nfrom typing import List\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Find a pair of numbers in the list that adds up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=12):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n",
        "idx_generation": 19,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 2 at least once and the number 1 exactly three times.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_two, found_one):\n        if i == rows - 1 and j == cols - 1 and found_two >= 1:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one += 1\n            if found_one > 3:\n                return False\n        if nums[i][j] == 2:\n            found_two += 1\n        return helper(i+1, j, found_two, found_one) or helper(i, j+1, found_two, found_one)\n\n    return helper(0, 0, 0, 0)\n\ndef g(nums=[[2, 0, 0], [1, 1, 0], [0, 1, 2]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 406,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix=\"pre\") -> bool:\n    \"\"\"Check if all words start with the given prefix\"\"\"\n    return all((word.startswith(prefix) for word in words))\ndef g(prefix=\"pre\"):\n    return [\"prefix\", \"prehistoric\", \"preparation\", \"pretzel\"]\nassert f(g())\n",
        "idx_generation": 35,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if the sum of all elements in lst is equal to the target\"\"\"\n    return sum(lst) == target\n\ndef g(target=100):\n    return [10, 5, 2, 8, 15, 60]\n\nassert f(g())\n",
        "idx_generation": 45,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Given a list of integers and a target number, find any two numbers in the list that multiply to give the target.\nSample Input:\n[4, 5, 7, 11, 9]\nSample Output:\n(4, 25)\"\"\"\n    return any((nums[i] * nums[j] == target) for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(target=100):\n    return [4, 25]\nassert f(g())\n",
        "idx_generation": 135,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"Find all indices where the target integer occurs in a list of integers.\"\"\"\n    indices = []\n    for i in range(len(nums)):\n        if nums[i] == target:\n            indices.append(i)\n    return indices\n\ndef g(nums=[1, 3, 5, 7, 9, 2, 4], target=2):\n    return nums, target\n\nassert f(*g()) == [5]\n\n",
        "idx_generation": 498,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=8) -> bool:\n    \"\"\"Given a list of integers, find if there exists a pair of numbers that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=8):\n    return [1, 3, 5, 2, 4, 6]\nassert f(g())\n",
        "idx_generation": 21,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Given a list of integers, determine if there exists a subsequence that sums up to a prime number.\"\"\"\n    n = len(nums)\n    dp = [[False] * (n + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return any(dp[n][i] and i in primes for i in range(n + 1))\n\ndef g():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 423,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]\ndef g():\n    return \"racecar\"\nassert f(g())\n",
        "idx_generation": 36,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    \"\"\"Check if a number n is a common divisor of both a and b, and is greater than or equal to the lower_bound\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a=247586288427023352, b=372021520735824432, lower_bound=1709054537):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n\nassert f(g())\n",
        "idx_generation": 49,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers from the list whose sum is equal to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 140,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there are three numbers in a list that add up to the target sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target_sum:\n                    return True\n    return False\ndef g(target_sum=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g())\n",
        "idx_generation": 22,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the maximum number in the path must be greater than or equal to the sum of all other numbers in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, max_num, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and max_num >= path_sum - max_num:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        max_num = max(max_num, nums[i][j])\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_one, max_num, path_sum) or helper(i, j+1, found_one, max_num, path_sum)\n\n    return helper(0, 0, False, float('-inf'), 0)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 435,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(text: str, pattern='abc') -> bool:\n    \"\"\"Find if the pattern exists in the given text\"\"\"\n    return pattern in text\ndef g(pattern='abc'):\n    return \"abcdefg\"\nassert f(g())\n",
        "idx_generation": 38,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: float, a=1000000000) -> bool:\n    \"\"\"Find a number that when cubed is close to a.\"\"\"\n    return abs(x ** 3 - a) < 10 ** (-3)\ndef g(a=1000000000):\n    return a ** (1/3)\nassert f(g())\n",
        "idx_generation": 52,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists three numbers in the list that sum up to the target value\"\"\"\n    nums.sort()\n    n = len(nums)\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            curr_sum = nums[i] + nums[left] + nums[right]\n            if curr_sum == target:\n                return True\n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(target=0):\n    nums = [-1, 0, 1, 2, -1, -4]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 141,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], n=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that sums up to a given number n\"\"\"\n    return any((n - x in lst for x in lst))\ndef g(n=10):\n    return [n - 1, 1]\nassert f(g())\n",
        "idx_generation": 23,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target + nums[0]) or subset_sum(nums[1:], target - nums[0])\n    return subset_sum(nums, target)\n\ndef g(nums=[-5, -10, -15, -20, -25, -30, -35, -40, -45]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 441,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5, li=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the concatenation of the first n elements of a list is equal to s.\"\"\"\n    return ''.join(str(i) for i in li[:n]) == s\ndef g(n=5, li=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return '12345'\nassert f(g())\n",
        "idx_generation": 39,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: float, a=987654321) -> bool:\n    \"\"\"Find a number that when squared is close to a and is greater than 0.\"\"\"\n    return abs(x ** 2 - a) < 10 ** (-3) and x > 0\ndef g(a=987654321):\n    return a ** 0.5\nassert f(g())\n",
        "idx_generation": 52,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(num_list: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k elements in the list whose difference is equal to the target number.\"\"\"\n    from itertools import combinations\n    return any(abs(comb[0] - comb[1]) == target for comb in combinations(num_list, k))\ndef g(k: int = 3):\n    return [1, 2, 3, 4, 5, 6]\nassert f(g(), 2)\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], num=7) -> bool:\n    \"\"\"Check if the sum of the elements in arr is equal to num\"\"\"\n    return sum(arr) == num\n\ndef g(num=7):\n    return [1, 2, 4]\n\nassert f(g())\n",
        "idx_generation": 24,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"Check if there is a subset of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][target]\n\ndef g(target: int = 10):\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 445,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='a', suffix='e') -> bool:\n    \"\"\"Check if any word in the list starts with the prefix and ends with the suffix\"\"\"\n    for word in words:\n        if word.startswith(prefix) and word.endswith(suffix):\n            return True\n    return False\ndef g(prefix='a', suffix='e'):\n    return [\"apple\", \"banana\", \"orange\", \"grape\"]\nassert f(g())\n",
        "idx_generation": 41,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\nfrom typing import List\n\ndef f(x: List[float], a=2.5, b=1, c=3) -> bool:\n    \"\"\"Check if the given list of numbers follows a quadratic equation.\n    Solution should be a list of floats.\n    Accuracy of fifth decimal digit is required.\"\"\"\n    return all(math.isclose(a * (num ** 2) + b * num + c, y, rel_tol=1e-05, abs_tol=1e-05) for num, y in enumerate(x))\n    \ndef g(a=2.5, b=1, c=3):\n    return [a * (num ** 2) + b * num + c for num in range(10)]\n\nassert f(g())\n",
        "idx_generation": 53,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is symmetric.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    matrix = [[1, 2, 3],\n              [2, 4, 5],\n              [3, 5, 6]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 146,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the length of s is greater than n\"\"\"\n    return len(s) > n\n\ndef g(n=3):\n    return \"Hello World\"\n\nassert f(g())\n",
        "idx_generation": 24,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target)\n    return subset_sum(nums, target)\n\ndef g(nums=[-5, -10, -15, -20, -25, -30, -35, -40, -45]):\n    return nums[::-1]\n\nassert f(g())\n",
        "idx_generation": 446,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='pl') -> bool:\n    \"\"\"Check if the word is a suffix of s\"\"\"\n    return s.endswith(word)\ndef g(word='pl'):\n    return word\nassert f(g())\n",
        "idx_generation": 43,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=5849635) -> bool:\n    \"\"\"Check if the square root of a number is equal to a given value\"\"\"\n    return x**0.5 == a\ndef g(a=5849635):\n    return a**2\nassert f(g())\n",
        "idx_generation": 54,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that add up to 10.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == 10:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 147,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome. Return True if it is, otherwise return False.\"\"\"\n    return numbers == numbers[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 24,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[1:], target - nums[0]) or subset_sum(nums[1:], target + nums[0])\n    return subset_sum(nums, target)\n\ndef g(nums=[-5, -10, -15, -20, -25, -30, -35, -40, -45]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 446,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Find if there exists a word in the list that contains the target string.\"\"\"\n    return any(target in word.lower() for word in words)\ndef g():\n    return ['hello', 'world', 'python', 'programming', 'puzzle']\nassert f(g())\n",
        "idx_generation": 43,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=15) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list whose sum is equal to the target.\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(target=15):\n    return [i for i in range(1, target + 1)]\n\nassert f(g())\n",
        "idx_generation": 57,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=24) -> bool:\n    \"\"\"Find three numbers in the list whose product is equal to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] * arr[j] * arr[k] == target:\n                    return True\n    return False\n\ndef g(target=24):\n    return [2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 148,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list contains only even numbers. Return True if it does, otherwise return False.\"\"\"\n    for num in numbers:\n        if num % 2 != 0:\n            return False\n    return True\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 24,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[:-1], target - nums[-1]) or subset_sum(nums[:-1], target)\n    return subset_sum(nums, target)\n\ndef g(nums=[1, 2, 3, 4, 5, 6]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 451,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target='abc') -> bool:\n    \"\"\"Check if the given string contains the target substring\"\"\"\n    return target in string\ndef g(target='abc'):\n    string = 'abcdefg'\n    return string\nassert f(g())\n",
        "idx_generation": 44,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=10, b=7) -> bool:\n    \"\"\"Check if the modulo of x by both a and b is 0\"\"\"\n    return x % a == 0 and x % b == 0\n\ndef g(a=10, b=7):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 61,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 7\n\nassert f(*g())\n",
        "idx_generation": 150,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find two numbers from the list that add up to the target\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums=[2, 7, 4, 5, 11, 9]):\n    return nums\nassert f(g())\n",
        "idx_generation": 24,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that adds up to the target\"\"\"\n    def subset_sum(nums, target):\n        if target == 0:\n            return True\n        if not nums or target < 0:\n            return False\n        return subset_sum(nums[:-1], target - nums[-1]) or subset_sum(nums[:-1], target)\n    return subset_sum(nums, target)\n\ndef g(nums=[-1, -2, -3, -4, -5]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 451,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], char='a') -> bool:\n    \"\"\"Given a list of words, return True if all the words contain the specified character, and False otherwise.\"\"\"\n    return all(char in word for word in words)\ndef g(char='a'):\n    words = ['apple', 'banana', 'orange']\n    return words\nassert f(g())\n",
        "idx_generation": 46,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if x raised to the power of y is equal to z\"\"\"\n    return x ** y == z\ndef g(y: int, z: int):\n    x = z**(1/y)\n    return x\nassert f(g(y=2, z=16), y=2, z=16)\n",
        "idx_generation": 66,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose length is equal to n.\"\"\"\n    if len(nums) < n:\n        return False\n    return True\n\ndef g(n=5):\n    return [i**2 for i in range(1, n+1)]\n\nassert f(g())\n",
        "idx_generation": 151,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, x=3, y=5) -> bool:\n    \"\"\"Check if a number is a multiple of either x or y\"\"\"\n    return num % x == 0 or num % y == 0\ndef g(x=3, y=5):\n    num = 15\n    return num\nassert f(g())\n",
        "idx_generation": 25,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Given a list of integers and a target value, determine if it is possible to obtain the target value by rearranging the numbers\n    and performing multiplication, addition, and subtraction operations.\n    Each number in the list can be used only once.\"\"\"\n    def helper(numbers, target):\n        if len(numbers) == 0:\n            return target == 0\n        for i, num in enumerate(numbers):\n            remaining = numbers[:i] + numbers[i+1:]\n            if target % num == 0 and helper(remaining, target // num):\n                return True\n            if helper(remaining, target + num):\n                return True\n            if helper(remaining, target - num):\n                return True\n        return False\n\n    return helper(numbers, target)\n\ndef g(numbers=[2, 3, 5, 10]):\n    return numbers\n\nassert f(g(), target=7)\n\n",
        "idx_generation": 452,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(phrase: str, word='Hello') -> bool:\n    \"\"\"Check if the given word is present in the given phrase\"\"\"\n    return word.lower() in phrase.lower()\ndef g(phrase='Hello, how are you?'):\n    return phrase\nassert f(g())\n",
        "idx_generation": 48,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: List[int], a=89600582, b=-47657198, c=95101265, d=-52126265) -> bool:\n    \"\"\"Check if the given point lies on the line.\nThe point is represented as a list of (x,y) coordinates.\nAccuracy of fifth decimal digit is required.\"\"\"\n    x, y = e\n    return abs(a * x + b - c * y - d) < 10 ** (-5)\n\ndef g(a=89600582, b=-47657198, c=95101265, d=-52126265):\n    x = (d - b) / a\n    y = (a * x + b - d) / c\n    return [x, y]\n\nassert f(g())\n",
        "idx_generation": 67,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of consecutive numbers in the list such that their absolute difference is greater than 10.\"\"\"\n    for i in range(len(nums)-1):\n        if abs(nums[i] - nums[i+1]) > 10:\n            return True\n    return False\n\ndef g():\n    return [12, 4, 23, -8, 15, 2, -11]\n\nassert f(g())\n",
        "idx_generation": 157,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(points: List[Tuple[int, int]]) -> bool:\n    \"\"\"Find a pair of points in the list points that have the same x-coordinate and y-coordinate.\"\"\"\n    return any(points.count(point) > 1 for point in points)\ndef g():\n    return [(1, 2), (3, 4), (2, 3), (1, 2)]\nassert f(g())\n",
        "idx_generation": 26,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=50) -> bool:\n    \"\"\"Find if there exists a subsequence of numbers in the list whose sum is equal to the target.\"\"\"\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in numbers:\n        for i in range(target, num-1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    return dp[target]\n\ndef g(target=50):\n    return [5, 10, 15, 20, 25, 30, 35, 40]\n\nassert f(g())\n",
        "idx_generation": 456,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, chars=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if the given string contains all the vowels\"\"\"\n    return all(char in s for char in chars)\ndef g(chars=['a', 'e', 'i', 'o', 'u']):\n    return 'aeiou'\nassert f(g())\n",
        "idx_generation": 48,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is symmetric along its main diagonal\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "idx_generation": 73,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target_sum\"\"\"\n    nums_set = set(nums)\n    for num in nums:\n        complement = target_sum - num\n        if complement in nums_set:\n            return True\n    return False\n\ndef g(target_sum=100):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n",
        "idx_generation": 159,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are exactly k numbers that sum up to the target value.\"\"\"\n    return sum(nums) == target\ndef g(target=10):\n    return [1, 2, 3, 4]\nassert f(g())\n",
        "idx_generation": 26,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grid: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 2 at least once and the number 3 exactly once.\"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n\n    def helper(i, j, found_two, found_three):\n        if i == rows - 1 and j == cols - 1 and found_three:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if grid[i][j] == 3:\n            found_three = True\n        if grid[i][j] == 2:\n            found_two += 1\n        return helper(i+1, j, found_two, found_three) or helper(i, j+1, found_two, found_three)\n\n    return helper(0, 0, 0, False)\n\ndef g(grid=[[2, 0, 0], [3, 2, 0], [0, 3, 0]]):\n    return grid\n\nassert f(g())\n",
        "idx_generation": 462,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Find a string that contains all the substrings\"\"\"\n    return all((sub in s for sub in substrings))\n\ndef g(substrings=['apple', 'banana', 'cherry', 'date']):\n    return ''.join(substrings)\n\nassert f(g())\n",
        "idx_generation": 49,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=4, b=4) -> bool:\n    \"\"\"Check if the sum of x and the product of a and b is greater than x\"\"\"\n    return (x + (a * b)) > x\n\ndef g(a=4, b=4):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 74,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 161,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], row=2, col=2) -> bool:\n    \"\"\"Check if a specific element is the maximum in its row and column.\"\"\"\n    return matrix[row][col] == max(matrix[row]) and matrix[row][col] == max([row[col] for row in matrix])\ndef g(row=2, col=2):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "idx_generation": 26,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int=20) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a matrix of integers, such that the sum of all elements along the path is equal to the target value.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    def helper(i, j, current_sum):\n        if i == rows - 1 and j == cols - 1 and current_sum == target:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        current_sum += matrix[i][j]\n        return helper(i+1, j, current_sum) or helper(i, j+1, current_sum)\n\n    return helper(0, 0, 0)\n\ndef g(matrix: List[List[int]]=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 469,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='world') -> bool:\n    \"\"\"Check if the target string is present at the end of the given string.\"\"\"\n    return s.endswith(target)\ndef g(target='world'):\n    return \"Hello, world\"\nassert f(g())\n",
        "idx_generation": 50,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: float, a=999999999) -> bool:\n    \"\"\"Find a number that when squared is greater than a.\"\"\"\n    return x ** 2 > a\ndef g(a=999999999):\n    return (a + 1) ** 0.5\nassert f(g())\n",
        "idx_generation": 75,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: List[int], x=5, y=10) -> bool:\n    \"\"\"Check if all numbers in the list n are either x or y\"\"\"\n    return all(num == x or num == y for num in n)\ndef g(x=5, y=10):\n    return [x, y, x, y, x, y, y, y, y, x]\nassert f(g())\n",
        "idx_generation": 163,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array whose sum is equal to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=10):\n    return arr\nassert f(g())\n",
        "idx_generation": 27,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Dict, Any\n\ndef f(data: Dict[str, Any], key: str = 'score', threshold: int = 80) -> bool:\n    \"\"\"Check if all the values associated with the key in the dictionary are above the threshold.\"\"\"\n    for value in data.values():\n        if isinstance(value, dict):\n            if not f(value, key, threshold):\n                return False\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    if not f(item, key, threshold):\n                        return False\n                elif isinstance(item, int) and key in data and data[key] < threshold:\n                    return False\n        elif isinstance(value, int) and key in data and data[key] < threshold:\n            return False\n    return True\n\ndef g(data: Dict[str, Any] = {'name': 'John', 'score': 90, 'grades': [80, 85, 95]}):\n    return data\n\nassert f(g())\n",
        "idx_generation": 470,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sentence: str, word='Python') -> bool:\n    \"\"\"Check if a specific word is in a sentence, regardless of the case\"\"\"\n    return word.lower() in sentence.lower().split()\ndef g(word='Python'):\n    return \"I love \" + word\nassert f(g())\n",
        "idx_generation": 51,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=987654321) -> bool:\n    \"\"\"Find a number that when multiplied by 4 and then divided by 3 equals a.\"\"\"\n    return abs((4 * x) / 3 - a) < 10 ** (-3)\ndef g(a=987654321):\n    return (3 * a) / 4\nassert f(g())\n",
        "idx_generation": 77,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=3, x=10) -> bool:\n    \"\"\"Check if there exists a subarray in the list of length k whose sum is less than or equal to x\"\"\"\n    for i in range(len(nums) - k + 1):\n        subarray = nums[i:i+k]\n        if sum(subarray) <= x:\n            return True\n    return False\n\ndef g(k=3, x=10):\n    return [i for i in range(1, x+1)]\n\nassert f(g())\n\n",
        "idx_generation": 167,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a number in the array that is greater than the target value.\"\"\"\n    for num in arr:\n        if num > target:\n            return True\n    return False\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=5):\n    return arr\nassert f(g())\n",
        "idx_generation": 27,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there is a subset of 'k' numbers in the list that sum up to zero\"\"\"\n    n = len(nums)\n    dp = [[False for _ in range(k + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[n][k]\n\ndef g():\n    return [1, 2, -3, 4, -5, 6]\n\nassert f(g(), k=3)\n",
        "idx_generation": 472,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, a='racecar') -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return x == x[::-1] and x == a\ndef g(a='racecar'):\n    return a\nassert f(g())\n",
        "idx_generation": 52,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=246813579) -> bool:\n    \"\"\"Find a number that when multiplied by 5 and then divided by 4 equals a.\"\"\"\n    return abs((5 * x) / 4 - a) < 10 ** (-3)\ndef g(a=246813579):\n    return (4 * a) / 5\nassert f(g())\n",
        "idx_generation": 77,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list whose sum is equal to the target\"\"\"\n    n = len(nums)\n    nums.sort()\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\ndef g(target=100):\n    return [i for i in range(1, target+1)]\n\nassert f(g())\n\n",
        "idx_generation": 167,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the list that multiply to the target value\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] * li[j] == target:\n                return True\n    return False\ndef g(target=100):\n    return [10, target//10]\nassert f(g())\n",
        "idx_generation": 30,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the sum of all numbers in the path must be greater than or equal to 10.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, path_sum):\n        if i == rows - 1 and j == cols - 1 and found_one and path_sum >= 10:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        path_sum += nums[i][j]\n        return helper(i+1, j, found_one, path_sum) or helper(i, j+1, found_one, path_sum)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 480,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if the given string is a palindrome and has a length greater than or equal to n.\"\"\"\n    return s == s[::-1] and len(s) >= n\n\ndef g(n=5):\n    return 'racecar'\n    \nassert f(g())\n",
        "idx_generation": 53,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=1357913579) -> bool:\n    \"\"\"Find a number that when multiplied by 6 and then divided by 5 equals a.\"\"\"\n    return abs((6 * x) / 5 - a) < 10 ** (-3)\ndef g(a=1357913579):\n    return (5 * a) / 6\nassert f(g())\n",
        "idx_generation": 77,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=4, threshold=2.0, seq=[2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose average is greater than or equal to threshold\"\"\"\n    seq_avg = sum(seq[start:start+k]) / k\n    return seq_avg >= threshold\ndef g(k=4, threshold=2.0, seq=[2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6]):\n    def seq_avg(start):\n        return sum(seq[start:start+k]) / k\n    return max(range(len(seq) - k + 1), key=seq_avg)\nassert f(g())\n",
        "idx_generation": 173,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target value and have a difference of at least 10\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if abs(li[i] - li[j]) >= 10 and li[i] + li[j] == target:\n                return True\n    return False\ndef g(target=100):\n    return [45, target-45]\nassert f(g())\n",
        "idx_generation": 30,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that multiplies up to the target\"\"\"\n    def subset_product(nums, target):\n        if target == 1:\n            return True\n        if not nums or target < 1:\n            return False\n        return subset_product(nums[1:], target // nums[0]) or subset_product(nums[1:], target)\n    return subset_product(nums, target)\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 480,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='hello') -> bool:\n    \"\"\"Check if a substring is present in a string\"\"\"\n    return substring in s\ndef g(substring='hello'):\n    return substring + ' world'\nassert f(g())\n",
        "idx_generation": 54,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=4, c=6) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(c)])\ndef g(a=3, b=4, c=6):\n    return -a + sum([b * i for i in range(c)])\nassert f(g())\n",
        "idx_generation": 78,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 173,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, nums=[287260676668, 33263981357337, 47314720, 295717, 2957170], lower_bound=98647) -> bool:\n    \"\"\"Check if x is a common divisor of the list of integers.\"\"\"\n    return all((i % x == 0 for i in nums)) and x >= lower_bound\ndef g(nums=[287260676668, 33263981357337, 47314720, 295717, 2957170], lower_bound=98647):\n    x = min(nums)\n    for i in nums:\n        while i % x != 0:\n            x -= 1\n    return x\nassert f(g())\n",
        "idx_generation": 30,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if it is possible to select a subset of numbers from the list that subtracts down to the target\"\"\"\n    def subset_difference(nums, target):\n        if target == 0:\n            return True\n        if not nums:\n            return False\n        return subset_difference(nums[1:], target - nums[0]) or subset_difference(nums[1:], target)\n    return subset_difference(nums, target)\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 480,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, word='python') -> bool:\n    \"\"\"Check if the given character exists in the word\"\"\"\n    return n in word\ndef g(word='python'):\n    return word[3]\nassert f(g())\n",
        "idx_generation": 56,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, numbers: List[int] = [1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Find n such that n is the sum of all elements in the list\"\"\"\n    return n == sum(numbers)\n\ndef g(numbers: List[int] = [1, 2, 3, 4, 5]):\n    n = sum(numbers)\n    return n\n\nassert f(g())\n",
        "idx_generation": 78,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 175,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if the sum of all elements in lst is equal to the target\"\"\"\n    return sum(lst) == target\n\ndef g(target=100):\n    return [20, 30, 50]\n\nassert f(g())\n",
        "idx_generation": 31,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int = 10) -> bool:\n    \"\"\"Check if the sum of any three numbers in the list is equal to the target.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\n\ndef g(target=10):\n    return [2, 5, 8, 3, 1, 4]\n\nassert f(g())\n",
        "idx_generation": 482,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, char='a') -> bool:\n    \"\"\"Check if the character 'char' appears in the word\"\"\"\n    return char in word\ndef g(char='a'):\n    return 'apple'\nassert f(g())\n",
        "idx_generation": 58,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if all numbers in the list are perfect squares.\"\"\"\n    return all(math.isqrt(num)**2 == num for num in nums)\n\ndef g():\n    return [4, 9, 16, 25, 36]\n\nassert f(g())\n",
        "idx_generation": 83,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int=10) -> bool:\n    \"\"\"Given a list of integers and a target number, check if there are two numbers in the list that add up to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums: List[int]=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 177,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Find a list of numbers where the product is equal to the target\"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n    return product == target\n\ndef g(target=5):\n    return [1, target]\n\nassert f(g())\n",
        "idx_generation": 32,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down, right, or diagonally down-right in the grid. The path must contain the number 1 at least once and the number 3 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, found_three):\n        if i == rows - 1 and j == cols - 1 and found_one:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 3:\n            found_three += 1\n            if found_three > 2:\n                return False\n        if nums[i][j] == 1:\n            found_one = True\n        return helper(i+1, j, found_one, found_three) or helper(i, j+1, found_one, found_three) or helper(i+1, j+1, found_one, found_three)\n\n    return helper(0, 0, False, 0)\n\ndef g(nums=[[1, 0, 0], [3, 3, 0], [0, 3, 1]]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 482,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(words: List[str], prefix='pre') -> bool:\n    \"\"\"Given a list of words, check if all words have the given prefix.\"\"\"\n    return all((word.startswith(prefix) for word in words))\ndef g(words: List[str], prefix='pre'):\n    return [prefix + word for word in words]\nassert f(g(['fix', 'pare', 'dict'], prefix='pre'))\n",
        "idx_generation": 58,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=4, c=6) -> bool:\n    \"\"\"Find n such that n + a > b * (the sum of the first c integers)\"\"\"\n    return n + a > sum([b * i for i in range(c)])\ndef g(a=3, b=4, c=6):\n    return -a + sum([b * i for i in range(c)]) + 1\nassert f(g()) == True\n\n",
        "idx_generation": 86,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int=8) -> bool:\n    \"\"\"Given a matrix (2D list of integers) and a target number, check if the target is present in the matrix.\"\"\"\n    m, n = len(matrix), len(matrix[0])\n    low, high = 0, m * n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        num = matrix[mid // n][mid % n]\n        if num == target:\n            return True\n        elif num < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False\n\ndef g(matrix: List[List[int]]=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 177,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=1000000000) -> bool:\n    \"\"\"Check if x is greater than or equal to a\"\"\"\n    return x >= a\ndef g(a=1000000000):\n    return a\nassert f(g())\n",
        "idx_generation": 32,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grid: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 2 at least once and the number 3 exactly once.\"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n\n    def helper(i, j, found_two, found_three):\n        if i == rows - 1 and j == cols - 1 and found_three:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if grid[i][j] == 3:\n            found_three = True\n        if grid[i][j] == 2:\n            found_two += 1\n        return helper(i+1, j, found_two, found_three) or helper(i, j+1, found_two, found_three)\n\n    return helper(0, 0, 0, False)\n\ndef g(grid=[[2, 0, 0], [3, 1, 0], [0, 3, 0]]):\n    return grid\n\nassert f(g())\n",
        "idx_generation": 482,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return arr == arr[::-1]\ndef g(arr: List[int]):\n    return arr[::-1]\nassert f(g([1, 2, 3, 2, 1]))\n",
        "idx_generation": 58,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=4, c=6) -> bool:\n    \"\"\"Find n such that n + a >= b * (the sum of the first c integers)\"\"\"\n    return n + a >= sum([b * i for i in range(c)])\ndef g(a=3, b=4, c=6):\n    return -a + sum([b * i for i in range(c)])\nassert f(g()) == True\n\n",
        "idx_generation": 86,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"Check if the two given strings are anagrams of each other\"\"\"\n    return sorted(s1) == sorted(s2)\n\ndef g(s1='listen', s2='silent'):\n    return s1, s2\n\nassert f(*g())\n",
        "idx_generation": 178,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=100) -> bool:\n    \"\"\"Check if x is divisible by a\"\"\"\n    return x % a == 0\ndef g(a=100):\n    return a\nassert f(g())\n",
        "idx_generation": 32,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(n: int, k=3, target=10) -> bool:\n    \"\"\"Determine if there exists a combination of k numbers from 1 to n whose sum is equal to the target number\"\"\"\n    def backtrack(start, curr_sum, curr_comb):\n        if curr_sum == target and len(curr_comb) == k:\n            return True\n        if curr_sum > target or len(curr_comb) > k:\n            return False\n        for i in range(start, n + 1):\n            curr_comb.append(i)\n            if backtrack(i + 1, curr_sum + i, curr_comb):\n                return True\n            curr_comb.pop()\n        return False\n\n    return backtrack(1, 0, [])\n\ndef g(k=3, target=10):\n    return 6\n\nassert f(g())\n",
        "idx_generation": 484,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='python') -> bool:\n    \"\"\"Check if the given substring is present in the given string\"\"\"\n    return substring in s\ndef g(substring='python'):\n    return \"I love python programming\"\nassert f(g())\n",
        "idx_generation": 62,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=3, s=10) -> bool:\n    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n=3, s=10):\n    x = [2] * n\n    x[0] = s - 2 * (n-1)\n    return x\nassert f(g())\n",
        "idx_generation": 87,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains a subsequence of consecutive numbers in ascending order.\"\"\"\n    sorted_nums = sorted(nums)\n    for i in range(len(nums)-1):\n        if sorted_nums[i+1] - sorted_nums[i] != 1:\n            return False\n    return True\n\ndef g():\n    return [5, 2, 3, 1, 4]\n\nassert f(g())\n",
        "idx_generation": 184,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=100, b=50) -> bool:\n    \"\"\"Determine if the absolute value of x is equal to the sum of a and b\"\"\"\n    return abs(x) == a + b\ndef g(a=100, b=50):\n    return a + b\nassert f(g())\n",
        "idx_generation": 32,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least once and the product of all even numbers in the path must be greater than the product of all odd numbers in the path.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, even_product, odd_product):\n        if i == rows - 1 and j == cols - 1 and found_one and even_product > odd_product:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            return False\n        if nums[i][j] == 1:\n            found_one = True\n        if nums[i][j] % 2 == 0:\n            even_product *= nums[i][j]\n        else:\n            odd_product *= nums[i][j]\n        return helper(i+1, j, found_one, even_product, odd_product) or helper(i, j+1, found_one, even_product, odd_product)\n\n    return helper(0, 0, False, 1, 1)\n\ndef g(nums=[[1, 0, 0], [2, 4, 0], [0, 8, 1]]):\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 488,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='python') -> bool:\n    \"\"\"Check if the given word is a substring of s\"\"\"\n    return word in s\ndef g(word='python'):\n    return \"I love programming in \" + word\nassert f(g())\n",
        "idx_generation": 65,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=5, c=8) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(1, c+1)])\ndef g(a=2, b=5, c=8):\n    return -a + sum([b * i for i in range(1, c+1)])\nassert f(g())\n",
        "idx_generation": 87,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if any two numbers in the list 'nums' have a sum greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] > target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 184,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\"\"\"\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[0])))\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "idx_generation": 33,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=4) -> bool:\n    \"\"\"Check if there exists a subarray in the given list that has the maximum element equal to k.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            if max(arr[i:j]) == k:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n\n",
        "idx_generation": 489,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix=\"pre\") -> bool:\n    \"\"\"Check if all words in the list start with the given prefix\"\"\"\n    return all(word.startswith(prefix) for word in words)\ndef g(prefix=\"pre\"):\n    return [\"prefix\", \"preference\", \"precaution\"]\nassert f(g())\n",
        "idx_generation": 68,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, n=5) -> bool:\n    \"\"\"Check if the absolute difference between a number and a given value is less than or equal to n.\"\"\"\n    return abs(x - n) <= n\ndef g(n=5):\n    return n\nassert f(g())\n",
        "idx_generation": 89,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g())\n\n",
        "idx_generation": 198,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric. Return True if it is, otherwise return False.\"\"\"\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[i])))\n\ndef g():\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 34,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grid: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 2 at least once and the number 5 exactly once.\"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n\n    def helper(i, j, found_two, found_five):\n        if i == rows - 1 and j == cols - 1 and found_five:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if grid[i][j] == 5:\n            found_five = True\n        if grid[i][j] == 2:\n            found_two += 1\n        return helper(i+1, j, found_two, found_five) or helper(i, j+1, found_two, found_five)\n\n    return helper(0, 0, 0, False)\n\ndef g(grid=[[2, 0, 0], [5, 1, 0], [0, 5, 0]]):\n    return grid\n\nassert f(g())\n",
        "idx_generation": 492,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], n=3) -> bool:\n    \"\"\"Check if any word in the list has a length greater than a given value.\"\"\"\n    return any(len(word) > n for word in words)\ndef g(n=3):\n    return ['Python', 'Programming', 'Puzzle', 'Code']\nassert f(g())\n",
        "idx_generation": 70,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int) -> bool:\n    \"\"\"Check if a number is a perfect square.\"\"\"\n    return math.isqrt(n) ** 2 == n\n\ndef g():\n    return 25\n\nassert f(g())\n",
        "idx_generation": 91,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_value=0) -> bool:\n    \"\"\"Given a matrix, check if a given target value exists in the matrix\"\"\"\n    return any((target_value in row for row in matrix))\ndef g(target_value=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target_value]]\nassert f(g())\n",
        "idx_generation": 199,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5], target=8) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose sum is equal to the target number.\"\"\"\n    return any((nums[i] + nums[j] == target) for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(nums=[1, 2, 3, 4, 5], target=8):\n    return [3, 5]\nassert f(g())\n",
        "idx_generation": 34,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subsequence that adds up to zero.\"\"\"\n    def helper(i, current_sum):\n        if current_sum == 0:\n            return True\n        if i >= len(nums):\n            return False\n        return helper(i+1, current_sum + nums[i]) or helper(i+1, current_sum)\n\n    return helper(0, 0)\n\ndef g():\n    return [1, -2, 3, 4, -5]\n\nassert f(g())\n",
        "idx_generation": 496,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, parts=['I', 'love', 'coding', 'in', 'Python'], string='I-love-coding-in-Python') -> bool:\n    \"\"\"Find a separator that when used to join a given list of strings gives a certain result.\"\"\"\n    return x.join(parts) == string\ndef g(parts=['I', 'love', 'coding', 'in', 'Python'], string='I-love-coding-in-Python'):\n    return '-'\nassert f(g())\n",
        "idx_generation": 75,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=7) -> bool:\n    \"\"\"Check if the given number is divisible by m.\"\"\"\n    return n % m == 0\n\ndef g(m=7):\n    return 3 * m\n\nassert f(g())\n",
        "idx_generation": 92,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if any two numbers in the list add up to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g():\n    return [3, 5, 2, 8, 4, 9]\nassert f(g(), 7)\n",
        "idx_generation": 200,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Given a list of integers and a target number, find any three numbers in the list that sum up to the target.\nSample Input:\n[4, 5, 7, 11, 9]\nSample Output:\n(4, 5, 6)\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target) for i in range(len(nums)) for j in range(i + 1, len(nums)) for k in range(j + 1, len(nums)))\ndef g(target=15):\n    return [4, 5, 6]\nassert f(g())\n",
        "idx_generation": 34,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 83,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], n=5) -> bool:\n    \"\"\"Check if the product of the list elements is divisible by a given number.\"\"\"\n    product = 1\n    for num in x:\n        product *= num\n    return product % n == 0\n\ndef g(n=5):\n    return [i**2 for i in range(1, n+1)]\nassert f(g())\n",
        "idx_generation": 96,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers, determine if there exist two numbers in the list whose sum is equal to the target.\"\"\"\n    seen = set()\n    for num in arr:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g(), 9)\n",
        "idx_generation": 201,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], target_name=\"Alice\") -> bool:\n    \"\"\"Find if the target_name is present in the list of names\"\"\"\n    return target_name in names\ndef g(target_name=\"Alice\"):\n    return [\"John\", \"Bob\", \"Alice\", \"Emily\"]\nassert f(g())\n",
        "idx_generation": 35,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry']) -> bool:\n    \"\"\"Check if the given string contains each substring in the given list exactly once.\"\"\"\n    return all((sub in s for sub in substrings)) and len(set(substrings)) == len(substrings)\n\ndef g(substrings=['apple', 'banana', 'cherry']):\n    return ''.join(substrings)\n\nassert f(g())\n",
        "idx_generation": 84,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=777777) -> bool:\n    \"\"\"Check if x is divisible by a\"\"\"\n    return x % a == 0\ndef g(a=777777):\n    return a\nassert f(g())\n",
        "idx_generation": 99,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 201,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Given a list of numbers nums and a target number, find three numbers in nums such that the sum is equal to the target.\n    Return True if such triplets exist, otherwise return False.\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))\ndef g(target=12):\n    return [1, 2, 3, 4, 5, 6]\nassert f(g())\n",
        "idx_generation": 36,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='vuzogaguzechicowejeguthemeralic', b='kybyjifidoquifwejeguthemelihitextodeju', length=11) -> bool:\n    \"\"\"Find a string of length length that is in both strings a and b\"\"\"\n    return len(s) == length and s in a and (s in b)\ndef g(a='vuzogaguzechicowejeguthemeralic', b='kybyjifidoquifwejeguthemelihitextodeju', length=11):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]\nassert f(g())\n",
        "idx_generation": 84,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3) -> bool:\n    \"\"\"Check if n is a multiple of a\"\"\"\n    return n % a == 0\ndef g(a=3):\n    return a * 7\nassert f(g())\n",
        "idx_generation": 100,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 203,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Given a list of numbers nums and a target number, find two numbers in nums such that their sum is equal to the target.\n    Return True if such pair exists, otherwise return False.\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=5):\n    return [1, 2, 3, 4, 5, 6]\nassert f(g())\n",
        "idx_generation": 36,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str) -> bool:\n    \"\"\"Check if a word is a palindrome.\"\"\"\n    return word == word[::-1]\n\ndef g():\n    return \"level\"\n\nassert f(g())\n",
        "idx_generation": 91,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if the given values represent a Pythagorean triplet\"\"\"\n    return x**2 + y**2 == z**2\n\ndef g(x=3, y=4, z=5):\n    return x, y, z\n\nassert f(*g())\n",
        "idx_generation": 105,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is in increasing order.\"\"\"\n    return all(nums[i] < nums[i+1] for i in range(len(nums)-1))\n\ndef g():\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 207,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Check if the given matrix contains a row or column that sums up to the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum == target:\n            return True\n    return False\ndef g(target=15):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "idx_generation": 37,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=9876) -> bool:\n    \"\"\"Check if the reverse of the string is equal to the string itself after removing all the vowels.\"\"\"\n    vowels = 'aeiouAEIOU'\n    reverse_s = s[::-1]\n    reverse_s_without_vowels = ''.join([ch for ch in reverse_s if ch not in vowels])\n    s_without_vowels = ''.join([ch for ch in s if ch not in vowels])\n    return reverse_s_without_vowels == s_without_vowels\n\ndef g(n=9876):\n    return 'racecar'\n\nassert f(g())\n",
        "idx_generation": 91,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains at least one prime number and all numbers are divisible by their index.\"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return any((is_prime(num) for num in nums)) and all((num % (idx + 1) == 0 for idx, num in enumerate(nums)))\ndef g():\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\nassert f(g())\n",
        "idx_generation": 113,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a difference greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if abs(nums[i] - nums[j]) > target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 209,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Check if the given matrix contains a row or column that sums up to the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum == target:\n            return True\n    return False\ndef g(target=15):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "idx_generation": 38,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(inds: List[int], strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grapefruit', 'honeydew', 'imbe', 'jackfruit']) -> bool:\n    \"\"\"Find the indices of the strings that contain the letter 'e'\"\"\"\n    return all(('e' in strings[i] for i in inds))\ndef g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grapefruit', 'honeydew', 'imbe', 'jackfruit']):\n    return [i for i,s in enumerate(strings) if 'e' in s]\nassert f(g())\n",
        "idx_generation": 96,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=20, b=3, c=6) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c powers of 2)\"\"\"\n    return n + a == b * sum([2**i for i in range(1, c+1)])\ndef g(a=20, b=3, c=6):\n    return -a + b * sum([2**i for i in range(1, c+1)])\nassert f(g())\n",
        "idx_generation": 114,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a quotient greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] / nums[j] > target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 209,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Determine if a given list of numbers is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 39,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='world') -> bool:\n    \"\"\"Check if the given substring exists in the given string.\"\"\"\n    return substr in s\ndef g(substr='world'):\n    return \"Hello, world!\"\nassert f(g())\n",
        "idx_generation": 96,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_product=10) -> bool:\n    \"\"\"Check if the product of any two numbers in the list is equal to target_product\"\"\"\n    return any(nums[i] * nums[j] == target_product for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_product=10):\n    return [n for n in range(1, target_product+1)]\n\nassert f(g())\n",
        "idx_generation": 116,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if the number n is divisible by m.\"\"\"\n    return n % m == 0\n\ndef g(m=10):\n    return 50\n\nassert f(g())\n",
        "idx_generation": 210,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers from the given list whose sum is equal to the target value\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\ndef g(target=100):\n    return list(range(target))\nassert f(g())\n",
        "idx_generation": 40,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target='hello', case_sensitive=False) -> bool:\n    \"\"\"Check if a given string matches the target string\"\"\"\n    if case_sensitive:\n        return string == target\n    else:\n        return string.lower() == target.lower()\n\ndef g(target='hello', case_sensitive=False):\n    if case_sensitive:\n        return target\n    else:\n        return target.upper()\n\nassert f(g())\n",
        "idx_generation": 97,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, year=2022) -> bool:\n    \"\"\"Check if the given date falls on the specified year\n    - date: datetime.date object representing the date\n    - year: integer representing the year\"\"\"\n\n    return date.year == year\n\ndef g(year=2022):\n    return datetime.date(2022, 3, 23)\n\nassert f(g())\n",
        "idx_generation": 118,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list whose sum is equal to the target value.\"\"\"\n    return any((numbers[i] + numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\nassert f(g())\n",
        "idx_generation": 211,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find if the target value exists in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\nassert f(g())\n",
        "idx_generation": 41,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, target_substring='abc') -> bool:\n    \"\"\"Check if the target substring is present in the given string\"\"\"\n    return target_substring in string\n\ndef g(target_substring='abc'):\n    return \"xyz\" + target_substring + \"pqr\"\n\nassert f(g())\n",
        "idx_generation": 98,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=7, b=3, c=8) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c odd integers)\"\"\"\n    return n + a == sum([b * (2*i+1) for i in range(c)])\ndef g(a=7, b=3, c=8):\n    return -a + sum([b * (2*i+1) for i in range(c)])\nassert f(g())\n",
        "idx_generation": 118,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a sum equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g(), target=10)\n",
        "idx_generation": 212,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list whose product is equal to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target / num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums=[2, 4, 5, 10, 15, 20, 25]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 42,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if all names in a list contain at least one vowel\"\"\"\n    return all(any((vowel in name) for vowel in vowels) for name in names)\ndef g(vowels=['a', 'e', 'i', 'o', 'u']):\n    return ['Alice', 'Bob', 'Charlie']\nassert f(g())\n",
        "idx_generation": 98,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=15, b=4, c=7) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c prime numbers)\"\"\"\n    primes = [2]\n    p = 3\n    while len(primes) < c:\n        is_prime = True\n        for i in range(2, int(p**0.5)+1):\n            if p % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(p)\n        p += 1\n    return n + a == sum([b * primes[i] for i in range(c)])\ndef g(a=15, b=4, c=7):\n    primes = [2]\n    p = 3\n    while len(primes) < c:\n        is_prime = True\n        for i in range(2, int(p**0.5)+1):\n            if p % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(p)\n        p += 1\n    return -a + sum([b * primes[i] for i in range(c)])\nassert f(g())\n",
        "idx_generation": 118,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that have a difference equal to the target value.\"\"\"\n    return any(abs(target - num) in nums for num in nums)\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 214,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array whose sum is equal to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr=[5, 10, 15, 20, 25, 30, 35, 40, 45, 50], target=20):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 42,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a', count=3) -> bool:\n    \"\"\"Find a string that contains exactly count occurrences of the character char.\"\"\"\n    return s.count(char) == count\ndef g(char='a', count=3):\n    return char * count\nassert f(g())\n",
        "idx_generation": 98,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=20, b=6, c=5) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c Fibonacci numbers)\"\"\"\n    fib = [0, 1]\n    for i in range(2, c):\n        fib.append(fib[i-1] + fib[i-2])\n    return n + a == sum([b * fib[i] for i in range(c)])\ndef g(a=20, b=6, c=5):\n    fib = [0, 1]\n    for i in range(2, c):\n        fib.append(fib[i-1] + fib[i-2])\n    return -a + sum([b * fib[i] for i in range(c)])\nassert f(g())\n",
        "idx_generation": 118,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find the maximum product of two numbers in the list\"\"\"\n    max_product = float('-inf')\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == 20\n",
        "idx_generation": 217,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='pl') -> bool:\n    \"\"\"Check if the word is present in s\"\"\"\n    return word in s\ndef g(word='pl'):\n    return word\nassert f(g())\n",
        "idx_generation": 43,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], suffix='') -> bool:\n    \"\"\"Check if any word in the list words ends with the given suffix.\"\"\"\n    for word in words:\n        if word.endswith(suffix):\n            return True\n    return False\n\ndef g(words: List[str]):\n    return words\n\nassert f(g(['apple', 'banana', 'cherry']), suffix='y')\n",
        "idx_generation": 100,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=3, c=7) -> bool:\n    \"\"\"Check if n is equal to the product of the first c even integers multiplied by b and added to a\"\"\"\n    return n == a + (b * (2**c - 2))\ndef g(a=5, b=3, c=7):\n    return a + (b * (2**c - 2))\nassert f(g())\n\n",
        "idx_generation": 119,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], n=100) -> bool:\n    \"\"\"Check if the list contains any duplicate elements\"\"\"\n    return len(lst) != len(set(lst))\n\ndef g():\n    return [1, 2, 3, 4, 5, 1]\n\nassert f(g())\n",
        "idx_generation": 217,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find if there exists a triplet of numbers in the list whose sum is equal to the target.\"\"\"\n    return any(numbers[i] + numbers[j] + numbers[k] == target for i in range(len(numbers)) for j in range(i+1, len(numbers)) for k in range(j+1, len(numbers)))\ndef g():\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nassert f(g())\n",
        "idx_generation": 43,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, k=4) -> bool:\n    \"\"\"Check if a string contains at least k occurrences of a specific character.\"\"\"\n    return string.count('b') >= k\ndef g(k=4):\n    return 'b' * k\nassert f(g())\n",
        "idx_generation": 103,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, a=5, b=2, c=10) -> bool:\n    \"\"\"Find a number that follows a specific pattern\"\"\"\n    return num == a * (10 ** 2) + b * (10 ** 1) + c * (10 ** 0)\ndef g(a=5, b=2, c=10):\n    return a * (10 ** 2) + b * (10 ** 1) + c * (10 ** 0)\nassert f(g())\n",
        "idx_generation": 122,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if n is a prime number.\"\"\"\n    if n < 2:\n        return False\n    for prime in primes:\n        if prime > math.isqrt(n):\n            break\n        if n % prime == 0:\n            return False\n    return True\n\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return primes[-1] + 2\n\nassert f(g())\n\n",
        "idx_generation": 218,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the given list that sum up to the target\"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=100):\n    nums = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return nums\nassert f(g())\n",
        "idx_generation": 43,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='python') -> bool:\n    \"\"\"Check if the word is present in the string, ignoring case\"\"\"\n    return word.lower() in s.lower()\n\ndef g(word='python'):\n    return \"Welcome to the Python programming language!\"\n\nassert f(g())\n",
        "idx_generation": 104,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=3, c=4) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c even integers)\"\"\"\n    return n + a == sum([b * (2*i) for i in range(1, c+1)])\ndef g(a=2, b=3, c=4):\n    return -a + sum([b * (2*i) for i in range(1, c+1)])\nassert f(g())\n",
        "idx_generation": 126,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list contains any duplicate elements.\"\"\"\n    return len(numbers) != len(set(numbers))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11, 12, 13, 14, 15]\nassert f(g())\n\n",
        "idx_generation": 220,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=5, k=2) -> bool:\n    \"\"\"Find n such that n is divisible by m and the sum of its digits is equal to k\"\"\"\n    return n % m == 0 and sum(map(int, str(n))) == k\n\ndef g(m=5, k=2):\n    for i in range(1, 1000):\n        if i % m == 0 and sum(map(int, str(i))) == k:\n            return i\n\nassert f(g())\n",
        "idx_generation": 44,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], letter='a') -> bool:\n    \"\"\"Check if all words in the list start with the specified letter.\"\"\"\n    return all(word[0] == letter for word in words)\n\ndef g(letter='a'):\n    return ['apple', 'ant', 'artichoke', 'avocado']\n\nassert f(g())\n",
        "idx_generation": 105,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=3, c=4) -> bool:\n    \"\"\"Check if n is equal to the sum of the squares of the first c natural numbers added to a\"\"\"\n    return n == a + sum([i**2 for i in range(1, c+1)])\ndef g(a=2, b=3, c=4):\n    return a + sum([i**2 for i in range(1, c+1)])\nassert f(g())\n",
        "idx_generation": 126,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there are two numbers in the list that multiply to give the target value\"\"\"\n    return any(nums[i] * nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums: List[int]):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == 20:\n                return (nums[i], nums[j])\nassert f(g([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\n",
        "idx_generation": 220,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=3, b=7) -> bool:\n    \"\"\"Check if the absolute difference between x and the product of a and b is divisible by x\"\"\"\n    return abs(x - (a * b)) % x == 0\n\ndef g(a=3, b=7):\n    return a * b\n\nassert f(g())\n\n",
        "idx_generation": 46,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=2) -> bool:\n    \"\"\"Check if a string contains exactly n consecutive consonants\"\"\"\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    count = 0\n    for char in s:\n        if char.lower() in consonants:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False\ndef g(n=2):\n    return 'bcdfghj' + 'a' * (n - 7)\nassert f(g())\n",
        "idx_generation": 106,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=25) -> bool:\n    \"\"\"Check if any two numbers in the list can be divided to equal the target value.\"\"\"\n    return any(x / y == target for x in arr for y in arr if y != 0)\ndef g(target=25):\n    return [1, 3, 5, 10, 20, 25, 30, 35, 40]\nassert f(g())\n",
        "idx_generation": 131,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the list of numbers is sorted in ascending order\"\"\"\n    return numbers == sorted(numbers)\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 220,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Find a subarray whose sum is equal to a given target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            if sum(arr[i:j]) == target:\n                return True\n    return False\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g())\n",
        "idx_generation": 47,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return string == string[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g())\n",
        "idx_generation": 110,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=7, m=3) -> bool:\n    \"\"\"Check if the length of s is equal to the product of n and m\"\"\"\n    return len(s) == n * m\n\ndef g(n=7, m=3):\n    return \"a\" * (n * m)\n\nassert f(g())\n",
        "idx_generation": 132,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target-9]\n\nassert f(g())\n",
        "idx_generation": 221,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find a pair of numbers from the given matrix whose sum is equal to the target value\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [[i+j for i in range(target)] for j in range(target)]\nassert f(g())\n",
        "idx_generation": 48,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the given string contains the target word\"\"\"\n    return target in s.lower()\ndef g(target='python'):\n    return \"I love programming in \" + target\nassert f(g())\n",
        "idx_generation": 110,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(n: int, num_list=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the square root of n is in the num_list.\"\"\"\n    return math.sqrt(n) in num_list\ndef g(num_list=[1, 2, 3, 4, 5]):\n    return num_list[0]\nassert f(g())\n",
        "idx_generation": 133,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target value\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 223,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    \"\"\"Check if a number n is a common divisor of both a and b, and is greater than or equal to the lower_bound\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a=247586288427023352, b=372021520735824432, lower_bound=1709054537):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n\nassert f(g())\n",
        "idx_generation": 49,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=3) -> bool:\n    \"\"\"Check if the given string contains the target number of words in uppercase.\"\"\"\n    words = s.split()\n    count = 0\n    for word in words:\n        if word.isupper():\n            count += 1\n            if count == target:\n                return True\n    return False\n\ndef g(target=3):\n    return \"THIS IS A TEST STRING\"\n\nassert f(g())\n",
        "idx_generation": 112,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=7) -> bool:\n    \"\"\"Check if the difference between n and the product of a and b is divisible by n\"\"\"\n    return (n - (a * b)) % n == 0\n\ndef g(a=2, b=7):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 137,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s1: str, s2: str) -> bool:\n    \"\"\"Check if two strings are anagrams of each other\"\"\"\n    return sorted(s1) == sorted(s2)\n\ndef g(s1='listen', s2='silent'):\n    return s1, s2\n\nassert f(*g())\n",
        "idx_generation": 224,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list whose difference is less than the target.\"\"\"\n    return any(abs(nums[i] - nums[j]) < target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g():\n    return [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]\nassert f(g())\n",
        "idx_generation": 50,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring=\"python\") -> bool:\n    \"\"\"Check if the substring is present in the given string\"\"\"\n    return substring in string\ndef g(substring=\"python\"):\n    return \"I love python programming\"\nassert f(g())\n",
        "idx_generation": 113,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=8) -> bool:\n    \"\"\"Check if the square of n minus the product of a and b is divisible by n\"\"\"\n    return (n ** 2 - (a * b)) % n == 0\n\ndef g(a=2, b=8):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 137,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6], 9\n\nassert f(*g())\n",
        "idx_generation": 230,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers from a list that add up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, target-1]\nassert f(g())\n",
        "idx_generation": 51,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if a character 'char' appears at least once in the given string 's'\"\"\"\n    return char in s\n\ndef g(char='a'):\n    return char\n\nassert f(g())\n",
        "idx_generation": 116,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=20, b=2, c=5) -> bool:\n    \"\"\"Find n such that (the difference between the sum of the first b multiples of c and a) is equal to n\"\"\"\n    return (sum([c * i for i in range(b)]) - a) == n\n\ndef g(a=20, b=2, c=5):\n    return sum([c * i for i in range(b)]) - a\n\nassert f(g())\n",
        "idx_generation": 138,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the array is sorted in non-decreasing order.\"\"\"\n    return arr == sorted(arr)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 230,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    \"\"\"Check if a given number is a prime number\"\"\"\n    return n in primes\ndef g():\n    return 29\nassert f(g())\n",
        "idx_generation": 51,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='apple', b='banana') -> bool:\n    \"\"\"Check if the given string s contains both strings a and b\"\"\"\n    return a in s and b in s\n\ndef g(a='apple', b='banana'):\n    return a + b\n\nassert f(g())\n",
        "idx_generation": 117,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=5, c=4) -> bool:\n    \"\"\"Find n such that n + a == (the product of the first c integers) * b\"\"\"\n    return n + a == (b ** c) - 1\ndef g(a=2, b=5, c=4):\n    return (b ** c) - a - 1\nassert f(g())\n\n",
        "idx_generation": 139,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target_sum\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 231,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find a pair of distinct integers in a list that sum up to the target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=100):\n    return list(range(target//2 - 10, target//2)) + [target//2 + 1]\nassert f(g())\n",
        "idx_generation": 52,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['apple', 'banana', 'cherry', 'date']) -> bool:\n    \"\"\"Find a string that contains at least one of the given substrings.\"\"\"\n    return any((sub in s for sub in substrings))\n\ndef g(substrings=['apple', 'banana', 'cherry', 'date']):\n    return ''.join(substrings)\n\nassert f(g())\n",
        "idx_generation": 120,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=4, b=2, c=5) -> bool:\n    \"\"\"Find n such that n + a == (the product of the first c integers) * b\"\"\"\n    return n + a == (b ** c) - 1\ndef g(a=4, b=2, c=5):\n    return (b ** c) - a - 1\nassert f(g())\n\n",
        "idx_generation": 139,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there is a pair of numbers in nums that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    nums = [-2, -1, 0, 1, 2, 3, 4, 5]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 232,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], target=12) -> bool:\n    \"\"\"Find the index of an even number in a list. Any such index is fine.\"\"\"\n    return lst[n] == target\ndef g(lst=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], target=12):\n    return lst.index(target)\nassert f(g())\n",
        "idx_generation": 53,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='python') -> bool:\n    \"\"\"Check if the given string contains the specified substring.\"\"\"\n    return substring in s\n\ndef g(substring='python'):\n    return \"I love python programming\"\n\nassert f(g())\n",
        "idx_generation": 124,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=6, b=3, c=8) -> bool:\n    \"\"\"Find n such that n + a == (the product of the first c integers) * b\"\"\"\n    return n + a == (b ** c) - 1\ndef g(a=6, b=3, c=8):\n    return (b ** c) - a - 1\nassert f(g())\n\n",
        "idx_generation": 139,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find if the number n is present in the list nums.\"\"\"\n    return n in nums\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[0]\nassert f(g())\n",
        "idx_generation": 232,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(i: int, lst=[0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.25, 2.5], target=1.0) -> bool:\n    \"\"\"Find the index of a decimal number in a list. Any such index is fine.\"\"\"\n    return lst[i] == target\ndef g(lst=[0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.25, 2.5], target=1.0):\n    return lst.index(target)\nassert f(g())\n",
        "idx_generation": 53,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a='algorithm', b='logarithm', length=5) -> bool:\n    \"\"\"Find a substring of length length that is common in both strings a and b\"\"\"\n    return len(s) == length and s in a and (s in b)\ndef g(a='algorithm', b='logarithm', length=5):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]\nassert f(g())\n",
        "idx_generation": 128,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=2, b=5) -> bool:\n    \"\"\"Check if the sum of x and the product of a and b is divisible by x\"\"\"\n    return (x + (a * b)) % x == 0\n\ndef g(a=2, b=5):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 143,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(target=0):\n    return [0, 0, 0, 0, 0]\n\nassert f(g())\n",
        "idx_generation": 234,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value.\"\"\"\n    return any([nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))])\ndef g(target=20):\n    return [5, 15, 2, 10]\nassert f(g())\n",
        "idx_generation": 53,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(animals: List[str], prefix=\"c\") -> bool:\n    \"\"\"Check if any animal in the list starts with the given prefix.\"\"\"\n    return any(animal.startswith(prefix) for animal in animals)\ndef g(animals=[\"cat\", \"dog\", \"cow\", \"chicken\"]):\n    return animals\n\nassert f(g())\n",
        "idx_generation": 130,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=3, b=7) -> bool:\n    \"\"\"Check if the square of the difference between x and the product of a and b is divisible by x\"\"\"\n    return ((x - (a * b)) ** 2) % x == 0\n\ndef g(a=3, b=7):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 143,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=5):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 235,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers and a target number, find any pair of numbers in the list that multiply to the target.\nSample Input:\n[2, 5, 3, 4]\nSample Output:\n(2, 5)\"\"\"\n    return any((nums[i] * nums[j] == target) for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(target=10):\n    return [2, 5]\nassert f(g())\n",
        "idx_generation": 55,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[str], target='python') -> bool:\n    \"\"\"Check if the target string can be formed by concatenating any two strings in the list.\"\"\"\n    return any(x + y == target for x in arr for y in arr)\ndef g(target='python'):\n    return ['py', 'th', 'on', 'pyth', 'pyt', 'hon']\nassert f(g())\n\n",
        "idx_generation": 130,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given string has a length greater than n\"\"\"\n    return len(s) > n\ndef g(n=3):\n    return \"Python\"\nassert f(g())\n",
        "idx_generation": 146,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find whether the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target]]\n\nassert f(g())\n",
        "idx_generation": 236,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=2, b=10) -> bool:\n    \"\"\"Satisfy a simple if statement with multiple cases\"\"\"\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x * a == b\ndef g(a=2, b=10):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b / a\n    return x\nassert f(g())\n",
        "idx_generation": 55,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, lst=[2, 4, 6, 8, 10]) -> bool:\n    \"\"\"Check if the given number x is present in the list lst\"\"\"\n    return x in lst\ndef g(lst=[2, 4, 6, 8, 10]):\n    return lst[2]\nassert f(g())\n",
        "idx_generation": 131,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=5, c=2) -> bool:\n    \"\"\"Find n such that (the sum of the first b multiples of c) - a == n\"\"\"\n    return sum([c * i for i in range(b)]) - a == n\ndef g(a=10, b=5, c=2):\n    return sum([c * i for i in range(b)]) - a\nassert f(g())\n\n",
        "idx_generation": 147,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=16) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the matrix whose product is equal to the target.\"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    for i in range(m):\n        for j in range(n):\n            for k in range(i, m):\n                for l in range(n):\n                    if matrix[i][j] * matrix[k][l] == target:\n                        return True\n    return False\n\ndef g(target=16):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n\n",
        "idx_generation": 236,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=6, n=6) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=6, n=6):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 56,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['cat', 'dog', 'hamster']) -> bool:\n    \"\"\"Find a string that contains each string in substrings in any order\"\"\"\n    return all((sub in s for sub in substrings))\ndef g(substrings=['cat', 'dog', 'hamster']):\n    return ''.join(substrings)\nassert f(g())\n",
        "idx_generation": 132,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=20, b=4, c=3) -> bool:\n    \"\"\"Find n such that (the sum of the first b multiples of c) - a == n\"\"\"\n    return sum([c * i for i in range(b)]) - a == n\ndef g(a=20, b=4, c=3):\n    return sum([c * i for i in range(b)]) - a\nassert f(g())\n\n",
        "idx_generation": 147,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiply to the target value.\"\"\"\n    return any(target % num == 0 and target // num in nums for num in nums)\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 236,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the given number is present in the list of numbers\"\"\"\n    return n in nums\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[5]\nassert f(g())\n",
        "idx_generation": 56,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring=\"abc\") -> bool:\n    \"\"\"Check if the substring exists in the given string\"\"\"\n    return substring in string\ndef g(substring=\"abc\"):\n    string = \"xyzabcxyz\"\n    return string\nassert f(g())\n",
        "idx_generation": 133,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if all the numbers in the list are positive.\"\"\"\n    for num in nums:\n        if num <= 0:\n            return False\n    return True\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 147,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(words: List[str], length=4) -> bool:\n    \"\"\"Check if any word in the list has a length greater than or equal to the given length.\"\"\"\n    return any(len(word) >= length for word in words)\n\ndef g(words=[\"apple\", \"banana\", \"cherry\", \"date\"]):\n    return words\n\nassert f(g())\n",
        "idx_generation": 237,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> bool:\n    \"\"\"Check if the given number is present in the given matrix\"\"\"\n    for row in matrix:\n        if n in row:\n            return True\n    return False\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix[2][1]\nassert f(g())\n",
        "idx_generation": 56,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, words=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Find a word in the list that contains the letter 'n'\"\"\"\n    return any('n' in word for word in words)\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return words[0]\nassert f(g())\n",
        "idx_generation": 136,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=14, b=50, c=47) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c odd integers)\"\"\"\n    return n + a == sum([b * i for i in range(1, 2*c+1, 2)])\ndef g(a=14, b=50, c=47):\n    return -a + sum([b * i for i in range(1, 2*c+1, 2)])\nassert f(g())\n",
        "idx_generation": 149,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find the two smallest numbers in the list whose sum is greater than the target\"\"\"\n    nums.sort()\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] > target:\n                return True\n    return False\n\ndef g(target=0):\n    return [5, 10, 15, 20, 25, target-30]\n\nassert f(g())\n",
        "idx_generation": 240,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target.\"\"\"\n    n = len(arr)\n    visited = set()\n    for i in range(n):\n        if target % arr[i] == 0 and target // arr[i] in visited:\n            return True\n        visited.add(arr[i])\n    return False\n\ndef g(target=20):\n    return [i for i in range(1, target + 1)]\n\nassert f(g())\n",
        "idx_generation": 57,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if the given string contains the substring in reverse order.\"\"\"\n    return substring[::-1] in s\n\ndef g(substring='abc'):\n    return 'cba'\n\nassert f(g())\n",
        "idx_generation": 138,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=14, b=50, c=47) -> bool:\n    \"\"\"Find n such that n + a is equal to the sum of the first c odd numbers multiplied by b\"\"\"\n    return n + a == sum([i for i in range(1, c*2, 2)]) * b\ndef g(a=14, b=50, c=47):\n    return sum([i for i in range(1, c*2, 2)]) * b - a\nassert f(g())\n",
        "idx_generation": 151,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=50) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_sum=50):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list 'arr' that add up to the target_sum.\"\"\"\n    num_set = set()\n    for num in arr:\n        if target_sum - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(arr=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 57,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=\"python\") -> bool:\n    \"\"\"Check if the target string is a substring of the given string\"\"\"\n    return target in s\ndef g(target=\"python\"):\n    return \"I love python programming\"\nassert f(g())\n",
        "idx_generation": 140,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if the given matrix is a magic square of size n, where all rows, columns, and diagonals have the same sum\"\"\"\n    target_sum = sum(matrix[0])\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum != target_sum:\n            return False\n    # Check diagonals\n    diag_sum1 = 0\n    diag_sum2 = 0\n    for i in range(n):\n        diag_sum1 += matrix[i][i]\n        diag_sum2 += matrix[i][n-i-1]\n    if diag_sum1 != target_sum or diag_sum2 != target_sum:\n        return False\n    return True\n\ndef g(matrix=[[4, 9, 2], [3, 5, 7], [8, 1, 6]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 152,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[10, 5, 15, 20, 25], target=50):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 244,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, m=5) -> bool:\n    \"\"\"Check if a number is divisible by m\"\"\"\n    return n % m == 0\ndef g(m=5):\n    import random\n    return random.randint(1, 100) * m\nassert f(g())\n",
        "idx_generation": 57,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome\"\"\"\n    return arr == arr[::-1]\ndef g():\n    return [1, 2, 3, 2, 1]\nassert f(g())\n",
        "idx_generation": 140,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=15482, b=23223, lower_bound=5) -> bool:\n    \"\"\"Find the largest common divisor of a and b, and check if it is divisible by n and greater than or equal to lower_bound.\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a=15482, b=23223, lower_bound=5):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n\nassert f(g())\n",
        "idx_generation": 153,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there is a subarray in the list that sums up to the given target\"\"\"\n    for i in range(len(nums)):\n        current_sum = nums[i]\n        if current_sum == target:\n            return True\n        for j in range(i+1, len(nums)):\n            current_sum += nums[j]\n            if current_sum == target:\n                return True\n    return False\n\ndef g(target=5):\n    nums = [1, 2, 3, 4, 5]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 245,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(lst: List[int], n=100) -> bool:\n    \"\"\"Check if the sum of the list is greater than n\"\"\"\n    return sum(lst) > n\ndef g():\n    import random\n    lst = random.choices(range(1, 100), k=10)\n    return lst\nassert f(g())\n",
        "idx_generation": 57,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string_list: List[str], target_length=5) -> bool:\n    \"\"\"Check if there exists a string in string_list whose length is equal to the target_length.\"\"\"\n    for string in string_list:\n        if len(string) == target_length:\n            return True\n    return False\n\ndef g(string_list=[\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"], target_length=5):\n    return string_list\n\nassert f(g())\n",
        "idx_generation": 141,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10, 12, 14, 16, 18]) -> bool:\n    \"\"\"Check if n is divisible by all the numbers in the given list.\"\"\"\n    return all((n % i == 0 for i in nums))\ndef g(nums=[2, 4, 6, 8, 10, 12, 14, 16, 18]):\n    ans = 1\n    for i in nums:\n        (m, n) = (min(i, ans), max(i, ans))\n        while m > 0:\n            (m, n) = (n % m, m)\n        ans *= i // n\n    return ans\nassert f(g())\n",
        "idx_generation": 158,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target=10) -> bool:\n    \"\"\"Check if there exists a word in the list whose length is greater than or equal to the target.\"\"\"\n    for word in words:\n        if len(word) >= target:\n            return True\n    return False\n\ndef g(target=10):\n    return ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig']\n\nassert f(g())\n\n",
        "idx_generation": 246,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, divisor=5) -> bool:\n    \"\"\"Check if the number is divisible by the divisor\"\"\"\n    return num % divisor == 0\ndef g(divisor=5):\n    return 25 * divisor\nassert f(g())\n",
        "idx_generation": 58,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sentence: str, target_word=\"programming\") -> bool:\n    \"\"\"Check if a specific word is present in the given sentence.\"\"\"\n    words = sentence.split()\n    for word in words:\n        if word.lower() == target_word:\n            return True\n    return False\n\ndef g():\n    sentence = \"Python programming is fun!\"\n    return sentence\n\nassert f(g())\n",
        "idx_generation": 146,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=100, b=3, c=4, d=5) -> bool:\n    \"\"\"Find n such that (the sum of the first b multiples of c) - (a * d) == n\"\"\"\n    return sum([c * i for i in range(b)]) - (a * d) == n\ndef g(a=100, b=3, c=4, d=5):\n    return sum([c * i for i in range(b)]) - (a * d)\nassert f(g())\n",
        "idx_generation": 163,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int = 9) -> bool:\n    \"\"\"Given a list of numbers, find a pair of numbers that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums: List[int] = [2, 7, 11, 15], target: int = 9):\n    return nums\nassert f(g())\n",
        "idx_generation": 247,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target\"\"\"\n    return any(a * b == target for i, a in enumerate(nums) for b in nums[i+1:])\ndef g(target=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 59,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', replacements=0) -> bool:\n    \"\"\"Check if the number of replacements required to convert the string into the substring is equal to the given value.\"\"\"\n    return string.replace(substring, '') == substring * replacements\n\ndef g(substring='abc', replacements=0):\n    return substring * (replacements + 1)\n\nassert f(g())\n",
        "idx_generation": 152,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=1234567890) -> bool:\n    \"\"\"Check if a number is divisible by another number\"\"\"\n    return x % a == 0\ndef g(a=1234567890):\n    return a * 2\nassert f(g())\n",
        "idx_generation": 165,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target\"\"\"\n    for i, num in enumerate(numbers):\n        if target - num in numbers[i + 1:]:\n            return True\n    return False\n\ndef g():\n    numbers = [1, 2, 3, 4, 5]\n    target = 8\n    return numbers, target\n\nassert f(*g())\n",
        "idx_generation": 248,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, find a pair of numbers that add up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 59,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if the substring exists in the given string s\"\"\"\n    return substring in s\n\ndef g(substring='abc'):\n    return \"xyzabc\"\n\nassert f(g())\n",
        "idx_generation": 154,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(radius: float, height=5) -> bool:\n    \"\"\"Check if the volume of a cylinder with given radius and height is greater than 100\"\"\"\n    volume = math.pi * radius**2 * height\n    return volume > 100\n\ndef g(height=5):\n    return 3.0\n\nassert f(g())\n",
        "idx_generation": 167,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Given a matrix of integers and a target value, check if the target value exists in the matrix.\n    The matrix is sorted row-wise and column-wise in ascending order.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    row = 0\n    col = cols - 1\n    while row < rows and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    return False\ndef g(target=15):\n    return [[1, 4, 9, 12],\n            [2, 5, 10, 13],\n            [3, 6, 11, 14],\n            [7, 8, 15, 16]]\nassert f(g())\n",
        "idx_generation": 252,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], k=3) -> bool:\n    \"\"\"Given a list of non-decreasing integers and given an integer k, determine whether there exists two numbers in the list whose absolute difference is greater than k.\"\"\"\n    assert all((nums[i] <= nums[i + 1] for i in range(len(nums) - 1))), 'Hint: nums are non-decreasing'\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if abs(nums[i] - nums[j]) > k:\n                return True\n    return False\ndef g(nums=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], k=3):\n    return nums\nassert f(g())\n",
        "idx_generation": 60,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, n=5) -> bool:\n    \"\"\"Check if a string is a palindrome of length n\"\"\"\n    return string == string[::-1] and len(string) == n\ndef g(n=5):\n    return 'level'\nassert f(g())\n",
        "idx_generation": 154,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=15482, b=23223, lower_bound=5) -> bool:\n    \"\"\"Check if n is a divisor of both a and b, and n is greater than or equal to lower_bound.\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a=15482, b=23223, lower_bound=5):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n\nassert f(g())\n",
        "idx_generation": 168,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if all numbers in the list are divisible by the target number\"\"\"\n    return all(num % target == 0 for num in nums)\n\ndef g(target: int):\n    return [10, 20, 30, 40, 50], target\n\nassert f(*g(5))\n",
        "idx_generation": 257,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=420, b=840, lower_bound=100) -> bool:\n    \"\"\"Check if a number n is a common divisor of both a and b, and is greater than or equal to the lower_bound\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a=420, b=840, lower_bound=100):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n\nassert f(g())\n",
        "idx_generation": 60,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, n=7) -> bool:\n    \"\"\"Check if a string is a palindrome of length n\"\"\"\n    return string == string[::-1] and len(string) == n\ndef g(n=7):\n    return 'deified'\nassert f(g())\n",
        "idx_generation": 154,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are five consecutive numbers in the list that form a Fibonacci sequence.\"\"\"\n    for i in range(len(nums)-4):\n        if nums[i] + nums[i+1] == nums[i+2] and nums[i+1] + nums[i+2] == nums[i+3] and nums[i+2] + nums[i+3] == nums[i+4]:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 5, 8, 13, 21]\n\nassert f(g())\n",
        "idx_generation": 169,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list 'nums' whose sum is equal to the target_sum.\"\"\"\n    return any((nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums))))\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g(), target_sum=10)\n",
        "idx_generation": 257,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], target=10) -> bool:\n    \"\"\"Check if the sum of the given list of integers is equal to the target\"\"\"\n    return sum(x) == target\ndef g(target=10):\n    return [2, 3, 5]\nassert f(g())\n",
        "idx_generation": 62,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string contains only uppercase letters.\"\"\"\n    return s.isupper()\ndef g():\n    return \"HELLO\"\nassert f(g())\n",
        "idx_generation": 155,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=11) -> bool:\n    \"\"\"Check if the sum of n and the difference between a and b is divisible by n\"\"\"\n    return (n + (a - b)) % n == 0\n\ndef g(a=5, b=11):\n    return a - b\n\nassert f(g())\n",
        "idx_generation": 171,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=15) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list 'nums' whose sum is equal to the target_sum.\"\"\"\n    return any((nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums))))\n\ndef g(nums=[6, 9, 4, 2, 11, 8, 13, 7]):\n    return nums\n\nassert f(g(), target_sum=15)\n",
        "idx_generation": 257,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2) -> bool:\n    \"\"\"Given a list of non-increasing integers and given an integer k, determine if there are any positive integers in the list that are greater than or equal to the kth.\"\"\"\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return any((s >= scores[k] and s > 0 for s in scores))\ndef g(scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2):\n    threshold = max(scores[k], 1)\n    return sum((s >= threshold for s in scores))\nassert f(g())\n",
        "idx_generation": 63,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s='cATch', t='cAtch') -> bool:\n    \"\"\"Check if s is a substring of t, ignoring case.\"\"\"\n    return s.lower() in t.lower()\n    \ndef g(s='cATch', t='cAtch'):\n    return s.lower()\n\nassert f(g())\n",
        "idx_generation": 156,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=11) -> bool:\n    \"\"\"Check if the difference between n and the difference between a and b is divisible by n\"\"\"\n    return (n - (a - b)) % n == 0\n\ndef g(a=5, b=11):\n    return a - b\n\nassert f(g())\n",
        "idx_generation": 171,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target value.\"\"\"\n    return any(target - num in numbers for num in numbers)\ndef g(numbers: List[int]):\n    return numbers\nassert f(g([1, 2, 3, 4, 5]), target=7)\n",
        "idx_generation": 258,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring=\"python\") -> bool:\n    \"\"\"Check if the given substring is present in the string\"\"\"\n    return substring in string\n\ndef g(substring=\"python\"):\n    return \"I love python programming\"\n\nassert f(g())\n",
        "idx_generation": 63,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s='H3ll0W0rld', t='h3ll0w0rld') -> bool:\n    \"\"\"Check if s and t have the same characters at the same positions up to the first n characters, ignoring case.\"\"\"\n    return s.lower()[:n] == t.lower()[:n]\n\ndef g(s='H3ll0W0rld', t='h3ll0w0rld'):\n    return len(s)\n\nassert f(g())\n",
        "idx_generation": 156,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=4) -> bool:\n    \"\"\"Check if a matrix is a magic square of size n x n\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all((row_sum == col_sum == diagonal_sum1 == diagonal_sum2) for row_sum, col_sum in zip(row_sums, col_sums))\ndef g(n=4):\n    return [[16, 2, 3, 13], [5, 11, 10, 8], [9, 7, 6, 12], [4, 14, 15, 1]]\nassert f(g())\n",
        "idx_generation": 172,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(numbers: List[int], target=50, max_length=3) -> bool:\n    \"\"\"Check if there exists a combination of at most max_length numbers whose sum is equal to target\"\"\"\n    for n in range(1, max_length+1):\n        for combination in itertools.combinations(numbers, n):\n            if sum(combination) == target:\n                return True\n    return False\n\ndef g(target=50, max_length=3):\n    return [10, 20, 30, 40, 50], target, max_length\n\nassert f(*g())\n",
        "idx_generation": 259,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 64,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_word='hello') -> bool:\n    \"\"\"Check if any two words in the list can be concatenated to form the target word\"\"\"\n    return any((words[i] + words[j] == target_word) for i in range(len(words)) for j in range(i+1, len(words)))\ndef g(target_word='hello'):\n    words = ['hel', 'lo', 'he', 'l', 'o']\n    return words\nassert f(g())\n",
        "idx_generation": 162,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Find n such that n + m is a perfect square.\"\"\"\n    return (n + m) ** 0.5 % 1 == 0\n\ndef g(m=10):\n    return (m + 1) ** 2 - m\n\nassert f(g())\n",
        "idx_generation": 175,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list 'numbers' that sum up to the target value.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            for k in range(j + 1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\n\ndef g(numbers=[10, 20, 30, 40, 50]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 262,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there are two numbers in a list that add up to a target value\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(len(nums)) if i != j))\n    \ndef g(nums=[10, 5, 15, 3, 7]):\n    return nums\n    \nassert f(g())\n",
        "idx_generation": 67,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: str, s='Hello', t='World') -> bool:\n    \"\"\"Check if the concatenation of s and t equals n\"\"\"\n    return s + t == n\ndef g(s='Hello', t='World'):\n    return s + t\nassert f(g())\n",
        "idx_generation": 163,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=100, b=20) -> bool:\n    \"\"\"Find n such that n is divisible by both a and b, but not their sum.\"\"\"\n    return n % a == 0 and n % b == 0 and n % (a + b) != 0\n\ndef g(a=100, b=20):\n    return a * b * (a - b)\n\nassert f(g())\n",
        "idx_generation": 179,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    n = len(nums)\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 262,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=200, count=4) -> bool:\n    \"\"\"Find a list of count numbers that sum up to target_sum\"\"\"\n    return sum(nums) == target_sum and len(nums) == count\n\ndef g(target_sum=200, count=4):\n    return [target_sum // count] * count\n\nassert f(g())\n",
        "idx_generation": 68,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=4, c='x') -> bool:\n    \"\"\"Check if the character c appears n times consecutively in the given string s\"\"\"\n    return s.count(c * n) > 0\ndef g(n=4, c='x'):\n    return c * n\nassert f(g())\n",
        "idx_generation": 167,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=100, b=20) -> bool:\n    \"\"\"Find n such that n is divisible by a, b, and the absolute difference between a and b.\"\"\"\n    return n % a == 0 and n % b == 0 and n % abs(a - b) == 0\n\ndef g(a=100, b=20):\n    return a * b * abs(a - b)\n\nassert f(g())\n",
        "idx_generation": 179,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], target='John') -> bool:\n    \"\"\"Check if the target name is present in the list of names.\"\"\"\n    return target in names\n\ndef g(target='John'):\n    return ['Alex', 'Bob', 'Charlie', 'David', 'John']\n\nassert f(g())\n",
        "idx_generation": 263,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=1000) -> bool:\n    \"\"\"Determine if a number is a divisor of another number.\"\"\"\n    return b % n == 0 and n != 0\ndef g(a=2, b=1000):\n    if a == 0:\n        return b\n    for n in range(1, b+1):\n        if b % n == 0:\n            return n\nassert f(g())\n",
        "idx_generation": 68,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 170,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=25) -> bool:\n    \"\"\"Find a number that when squared is equal to a and x is non-negative.\"\"\"\n    return x ** 2 == a and x >= 0\ndef g(a=25):\n    return a ** 0.5\nassert f(g())\n",
        "idx_generation": 181,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the given list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    nums = [2, 4, 6, 8, 10]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 263,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> bool:\n    \"\"\"Check if n exists in the matrix\"\"\"\n    for row in matrix:\n        if n in row:\n            return True\n    return False\ndef g(matrix: List[List[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix[len(matrix)-1][len(matrix[0])-1]\nassert f(g())\n",
        "idx_generation": 69,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], letter='a') -> bool:\n    \"\"\"Check if any word in the list starts with the given letter\"\"\"\n    for word in words:\n        if word[0] == letter:\n            return True\n    return False\ndef g(letter='a'):\n    words = ['apple', 'banana', 'cherry', 'orange', 'kiwi']\n    return words\nassert f(g())\n",
        "idx_generation": 171,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: Tuple[int, int], a=1, b=2, c=10) -> bool:\n    \"\"\"Check if a point lies inside a circle.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return (x-a)**2 + (y-b)**2 <= c**2\ndef g(a=1, b=2, c=10):\n    return (a+c//2, b+c//2)\nassert f(g())\n",
        "idx_generation": 183,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains three consecutive numbers in arithmetic progression.\"\"\"\n    nums.sort()\n    for i in range(len(nums) - 2):\n        if nums[i] + nums[i+2] == 2 * nums[i+1]:\n            return True\n    return False\n\ndef g():\n    return [3, 6, 9, 12, 15, 18]\n\nassert f(g())\n",
        "idx_generation": 267,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exist two numbers in the given list that sum up to the target value\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 70,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, start_char='a', end_char='z') -> bool:\n    \"\"\"Check if the start and end characters are present at the beginning and end of the string, respectively.\"\"\"\n    return string.startswith(start_char) and string.endswith(end_char)\n\ndef g(start_char='a', end_char='z'):\n    return start_char + 'bcdefghijklmnopqrstuvwxy' + end_char\n\nassert f(g())\n",
        "idx_generation": 171,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: List[int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies on a line.\nSolution should be a list of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return (a*x + b*y) == c\ndef g(a=1, b=2, c=10, d=1000):\n    return [c//a, (c-(c//a)*a)//b]\nassert f(g())\n",
        "idx_generation": 183,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains three consecutive numbers in arithmetic progression.\"\"\"\n    return any(nums[i] + 2 == nums[i+1] + 1 == nums[i+2] for i in range(len(nums)-2))\ndef g():\n    return [i for i in range(1, 10)] + [12]\nassert f(g())\n",
        "idx_generation": 269,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exist three numbers in the list that add up to the target\"\"\"\n    complements = set()\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            complement = target - (nums[i] + nums[j])\n            if complement in complements:\n                return True\n            complements.add(nums[i])\n            complements.add(nums[j])\n    return False\ndef g(target=5):\n    return [1, 2, 3, 4]\nassert f(g())\n",
        "idx_generation": 73,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='abc') -> bool:\n    \"\"\"Check if the given string contains the given substring\"\"\"\n    return substr in string\ndef g(substr='abc'):\n    string = 'defabcghi'\n    return string\nassert f(g())\n",
        "idx_generation": 172,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[5, 10, 15, 20, 25], upper_bound=500) -> bool:\n    \"\"\"Check if n is divisible by all numbers in the list and is less than or equal to the upper_bound\"\"\"\n    return all((n % i == 0 for i in lst)) and 0 < n <= upper_bound\ndef g(lst=[5, 10, 15, 20, 25], upper_bound=500):\n    ans = 1\n    for i in lst:\n        (m, n) = (min(i, ans), max(i, ans))\n        while m > 0:\n            (m, n) = (n % m, m)\n        ans *= i // n\n    return ans\nassert f(g())\n",
        "idx_generation": 184,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that add up to the target value.\"\"\"\n    return any((numbers[i] + numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\nassert f(g())\n",
        "idx_generation": 269,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exist two numbers in the list that multiply to the target\"\"\"\n    complements = set()\n    for num in nums:\n        complement = target / num\n        if complement in complements:\n            return True\n        complements.add(num)\n    return False\ndef g(target=100):\n    return [5, 10, 20, 25]\nassert f(g())\n",
        "idx_generation": 73,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\n\ndef f(string: str, target='abc') -> bool:\n    \"\"\"Check if a given string contains a target substring.\"\"\"\n    return target in string\n\ndef g(target='abc'):\n    from itertools import permutations\n    for perm in permutations(target):\n        string = ''.join(perm)\n        if f(string):\n            return string\n    assert False, f\"No valid substring found for target={target}\"\n\nassert f(g())\n",
        "idx_generation": 172,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix of integers, check if it is a symmetric matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    if rows != cols:\n        return False\n\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 187,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Find four numbers in the list that add up to the target sum\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                for l in range(k+1, len(nums)):\n                    if nums[i] + nums[j] + nums[k] + nums[l] == target_sum:\n                        return True\n    return False\n\ndef g(target_sum=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g())\n",
        "idx_generation": 269,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a list of numbers that can be summed to the target number\"\"\"\n    return sum(nums) == target\ndef g(target=10):\n    return [2, 3, 5]\nassert f(g())\n",
        "idx_generation": 73,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=2, c='a') -> bool:\n    \"\"\"Check if the character c appears exactly n times in the given string s\"\"\"\n    return s.count(c) == n\n\ndef g(n=2, c='a'):\n    return c * n\nassert f(g())\n",
        "idx_generation": 177,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(x: float, y: float, radius=5.0) -> bool:\n    \"\"\"Check if the given point (x, y) lies inside or on the circumference of a circle with the given radius.\"\"\"\n    distance = math.sqrt(x**2 + y**2)\n    return distance <= radius\ndef g(radius=5.0):\n    x = 3.0\n    y = 4.0\n    return x, y\nassert f(*g())\n",
        "idx_generation": 188,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=15) -> bool:\n    \"\"\"Check if there exists two numbers in the list that add up to the target.\"\"\"\n    return any(target - num in numbers for num in numbers)\n\ndef g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 271,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=6) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the list whose sum is less than or equal to zero.\"\"\"\n    n = len(arr)\n    for i in range(n - k + 1):\n        subarray = arr[i:i+k]\n        if sum(subarray) <= 0:\n            return True\n    return False\n\ndef g(k=6):\n    return [i for i in range(-k, k+1)]\n\nassert f(g())\n",
        "idx_generation": 73,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_length=5) -> bool:\n    \"\"\"Check if the length of the given string s is equal to the target_length\"\"\"\n    return len(s) == target_length\n\ndef g(target_length=5):\n    return 'x' * target_length\n\nassert f(g())\n",
        "idx_generation": 178,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=7) -> bool:\n    \"\"\"Find n such that n is divisible by a, b, and the product of a and b.\"\"\"\n    return n % a == 0 and n % b == 0 and n % (a * b) == 0\n\ndef g(a=3, b=7):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 189,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers from the list that add up to the target number.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 276,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list 'nums' that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 74,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3, c='x') -> bool:\n    \"\"\"Check if the character c appears at least n times in the given string s\"\"\"\n    return s.count(c) >= n\n\ndef g(n=3, c='x'):\n    return c * n\nassert f(g())\n",
        "idx_generation": 178,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=0, length=3) -> bool:\n    \"\"\"Check if there is a subsequence of the given numbers that sums up to the target and has the specified length.\"\"\"\n    for i in range(len(numbers) - length + 1):\n        if sum(numbers[i:i+length]) == target:\n            return True\n    return False\n\ndef g(target=0, length=3):\n    return [target] * length\n\nassert f(g())\n",
        "idx_generation": 190,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Given a list of integers, determine if there exists a pair of numbers whose sum is equal to a target value.\"\"\"\n    nums.sort()\n    left = 0\n    right = len(nums) - 1\n    target = 10\n\n    while left < right:\n        current_sum = nums[left] + nums[right]\n        if current_sum == target:\n            return True\n        elif current_sum < target:\n            left += 1\n        else:\n            right -= 1\n\n    return False\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 277,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=123456789) -> bool:\n    \"\"\"Find a number that when multiplied by 3 and then divided by 2 equals a.\"\"\"\n    return abs((3 * x) / 2 - a) < 10 ** (-3)\ndef g(a=123456789):\n    return (2 * a) / 3\nassert f(g())\n",
        "idx_generation": 75,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=2, c='z') -> bool:\n    \"\"\"Check if the character c appears exactly n times in the given string s\"\"\"\n    return s.count(c) == n\n\ndef g(n=2, c='z'):\n    return c * n\nassert f(g())\n",
        "idx_generation": 178,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, format='%Y-%m-%d') -> bool:\n    \"\"\"Check if the given date string matches the specified format.\"\"\"\n    try:\n        datetime.strptime(date, format)\n        return True\n    except ValueError:\n        return False\n\ndef g(format='%Y-%m-%d'):\n    return datetime.now().strftime(format)\n\nassert f(g())\n",
        "idx_generation": 196,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sum up to the target\"\"\"\n    n = len(x)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if x[i] + x[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [2, 4, 6, 8]\n\nassert f(g())\n",
        "idx_generation": 277,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=6) -> bool:\n    \"\"\"Find a pair of numbers in the list that multiply to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 77,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, big_str='abcdefghijklmnopqrstuvwxyz', index=0) -> bool:\n    \"\"\"Find a string whose *last* index in big_str is index\"\"\"\n    return big_str.rindex(s) == index\ndef g(big_str='abcdefghijklmnopqrstuvwxyz', index=0):\n    return big_str[:index+1]\nassert f(g())\n",
        "idx_generation": 180,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Check if there exists three numbers in the list that adds up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[10, 15, 5, 8, 12]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 200,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Given a list of integers, find four distinct numbers such that their sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                for l in range(k+1, len(nums)):\n                    if nums[i] + nums[j] + nums[k] + nums[l] == target:\n                        return True\n    return False\n\ndef g(target=50):\n    return [i for i in range(1, target+1)]\n\nassert f(g())\n",
        "idx_generation": 278,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=3, lower=-1000, seq=[10, -20, 30, -40, 50, 60, -70, 80]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is greater than or equal to lower\"\"\"\n    total = sum(seq[start:start+k])\n    return total >= lower\ndef g(k=3, lower=-1000, seq=[10, -20, 30, -40, 50, 60, -70, 80]):\n    def seq_sum(start):\n        return sum(seq[start:start+k])\n    return max(range(len(seq) - k + 1), key=seq_sum)\nassert f(g())\n",
        "idx_generation": 77,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='hello', max_len=6) -> bool:\n    \"\"\"Check if the given word can be formed by replacing a substring in s with a different substring of the same length.\"\"\"\n    if len(word) <= max_len:\n        return word in s\n    for i in range(len(s) - max_len + 1):\n        sub = s[i:i+max_len]\n        if len(set(sub)) == 1:\n            new_word = s[:i] + word + s[i+max_len:]\n            if new_word == s:\n                return True\n    return False\n\ndef g(word='hello', max_len=6):\n    if len(word) <= max_len:\n        return word\n    return word[:max_len//2] + word[max_len//2+1:]\n\nassert f(g())\n",
        "idx_generation": 180,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find a list of numbers where each number is divisible by all the previous numbers in the list.\"\"\"\n    return all((nums[i] % d == 0 for i, n in enumerate(nums) for d in nums[:i]))\n\ndef g():\n    return [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]\n    \nassert f(g())\n",
        "idx_generation": 202,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that adds up to the target sum.\n    - numbers: list of numbers\n    - target_sum: the desired sum\"\"\"\n    return any(target_sum - num in numbers for num in numbers)\n\ndef g(numbers: List[int], target_sum=10):\n    return numbers\n\nassert f(g([1, 2, 3, 4, 5]))\n\n",
        "idx_generation": 280,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=5, lower=1000, seq=[-1, -2, -3, -4, -5, -6, -7, -8]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is less than or equal to lower\"\"\"\n    total = sum(seq[start:start+k])\n    return total <= lower\ndef g(k=5, lower=1000, seq=[-1, -2, -3, -4, -5, -6, -7, -8]):\n    def seq_sum(start):\n        return sum(seq[start:start+k])\n    return max(range(len(seq) - k + 1), key=seq_sum)\nassert f(g())\n",
        "idx_generation": 77,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=2) -> bool:\n    \"\"\"Check if the given string contains the target number of consecutive consonants.\"\"\"\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    count = 0\n    for i in range(len(s)):\n        if s[i] in consonants:\n            count += 1\n            if count == target:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(target=2):\n    return \"bcdfghjklmnpqrstvwxyz\" * target\n\nassert f(g())\n",
        "idx_generation": 180,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(radius: float, area=50) -> bool:\n    \"\"\"Find a radius of a circle that has a certain area.\"\"\"\n    return math.pi * radius * radius == area\n\ndef g(area=50):\n    return math.sqrt(area / math.pi)\nassert f(g())\n",
        "idx_generation": 202,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sums up to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=10):\n    return [1, 3, 5, 7, 9]\nassert f(g())\n",
        "idx_generation": 285,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], length=5) -> bool:\n    \"\"\"Check if there is a string in strings that has length greater than or equal to the specified length.\"\"\"\n    for string in strings:\n        if len(string) >= length:\n            return True\n    return False\ndef g(length=5):\n    strings = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"honeydew\", \"indigo\"]\n    return strings\nassert f(g())\n",
        "idx_generation": 79,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target=4) -> bool:\n    \"\"\"Check if there is a word in words whose length is equal to the target.\"\"\"\n    for word in words:\n        if len(word) == target:\n            return True\n    return False\n\ndef g(target=4):\n    return ['apple', 'banana', 'cherry', 'date', 'elderberry']\n\nassert f(g())\n",
        "idx_generation": 180,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=1) -> bool:\n    \"\"\"Check if the sum of the first n odd numbers is equal to s.\"\"\"\n    return sum(range(1, 2*n, 2)) == int(s)\ndef g(n=1):\n    return str(n**2)\nassert f(g())\n",
        "idx_generation": 203,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(points: List[Tuple[int, int]]) -> bool:\n    \"\"\"Check if given points form a rectangle\"\"\"\n    assert len(points) == 4\n    x_values = [point[0] for point in points]\n    y_values = [point[1] for point in points]\n    return len(set(x_values)) == 2 and len(set(y_values)) == 2\ndef g():\n    return [(0, 0), (0, 1), (1, 0), (1, 1)]\nassert f(g())\n",
        "idx_generation": 289,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\n\ndef f(n: int, factors=[2, 3, 5]) -> bool:\n    \"\"\"Check if a given number is a product of a given list of prime factors\"\"\"\n    for factor in factors:\n        while n % factor == 0:\n            n //= factor\n    return n == 1\n\ndef g(factors=[2, 3, 5]):\n    product = 1\n    for factor in factors:\n        product *= factor\n    return product\n\nassert f(g())\n",
        "idx_generation": 79,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='python') -> bool:\n    \"\"\"Find if the given substring is a prefix of the string s.\"\"\"\n    return s.startswith(substring)\n\ndef g(substring='python'):\n    return 'python is a programming language'\n\nassert f(g())\n",
        "idx_generation": 182,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if the given number is divisible by m and is also an even number.\"\"\"\n    return n % m == 0 and n % 2 == 0\n\ndef g(m=10):\n    return m*2\n\nassert f(g())\n",
        "idx_generation": 209,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of integers in a list that sum up to a target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [2, 4, 6, 8]\n\nassert f(g())\n",
        "idx_generation": 291,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that multiply up to the target value.\"\"\"\n    return any((numbers[i] * numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\n\ndef g(target=20):\n    numbers = [2, 4, 5, 10, 12]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 80,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(s: str, target=\"Python\") -> bool:\n    \"\"\"Check if the target string is present at the start of the given string.\"\"\"\n    return s.startswith(target)\ndef g(target=\"Python\"):\n    return \"Python is a widely used programming language.\"\nassert f(g())\n",
        "idx_generation": 185,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(x: int, a=81) -> bool:\n    \"\"\"Check if the cube root of x is equal to a\"\"\"\n    return math.isclose(x**(1/3), a)\ndef g(a=81):\n    return a**3\nassert f(g())\n",
        "idx_generation": 210,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a triplet in the list whose sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 292,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(prices: List[float], threshold=1000.0) -> bool:\n    \"\"\"Check if the total price of all items is above the threshold.\"\"\"\n    return sum(prices) > threshold\n\ndef g(threshold=1000.0):\n    prices = [250.0, 350.0, 400.0, 200.0]\n    return prices\n\nassert f(g())\n",
        "idx_generation": 80,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substr='abc') -> bool:\n    \"\"\"Check if the substring is present in the given string.\"\"\"\n    return substr in string\ndef g(substr='abc'):\n    string = \"xyzabc123\"\n    return string\nassert f(g())\n",
        "idx_generation": 187,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is a magic square.\"\"\"\n    n = len(matrix)\n    target_sum = n * (n**2 + 1) // 2\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        column_sum = sum(matrix[i][j] for i in range(n))\n        if column_sum != target_sum:\n            return False\n\n    # Check diagonals\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    if diagonal_sum1 != target_sum or diagonal_sum2 != target_sum:\n        return False\n\n    return True\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g())\n",
        "idx_generation": 211,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if the product of any two numbers in the list is equal to the target value.\"\"\"\n    return any((numbers[i] * numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\n\ndef g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 292,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=6, n=6) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=6, n=6):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 80,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['Hello', 'World']) -> bool:\n    \"\"\"Check if all words in the given list are present in the given string.\"\"\"\n    return all(word in s for word in words)\n\ndef g(words=['Hello', 'World']):\n    return \"Hello World!\"\n\nassert f(g())\n",
        "idx_generation": 189,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, n=5) -> bool:\n    \"\"\"Check if x is divisible by n without leaving a remainder.\"\"\"\n    return x % n == 0\ndef g(n=5):\n    return n ** 2\nassert f(g())\n",
        "idx_generation": 214,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] * lst[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 295,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_length=5) -> bool:\n    \"\"\"Find if there exists a word in the list that has the target length\"\"\"\n    return any(len(word) == target_length for word in words)\ndef g(target_length=5):\n    return [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\nassert f(g())\n",
        "idx_generation": 81,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], char='e') -> bool:\n    \"\"\"Check if any word in the list starts and ends with the specified character\"\"\"\n    return any(word[0] == char and word[-1] == char for word in words)\n\ndef g(char='e'):\n    return [\"elephant\", \"eagle\", \"banana\", \"apple\"]\n\nassert f(g())\n",
        "idx_generation": 189,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=12, c=30) -> bool:\n    \"\"\"Find n such that n * a == b * (the sum of the first c integers)\"\"\"\n    return n * a == sum([b * i for i in range(c)])\ndef g(a=5, b=12, c=30):\n    return sum([b * i for i in range(c)]) / a\nassert f(g())\n",
        "idx_generation": 215,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target number\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g():\n    return [10, 20, 30, 40]\n\nassert f(g())\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix: List[List[int]]):\n    return matrix\n\nassert f(g([[1, 2, 3], [2, 4, 5], [3, 5, 6]]))\n",
        "idx_generation": 84,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g())\n",
        "idx_generation": 191,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=15, c=10) -> bool:\n    \"\"\"Find n such that n - a == b * (the sum of the first c integers)\"\"\"\n    return n - a == sum([b * i for i in range(c)])\ndef g(a=5, b=15, c=10):\n    return a + sum([b * i for i in range(c)])\nassert f(g())\n\n",
        "idx_generation": 216,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int]) -> bool:\n    \"\"\"Check if all numbers in the list are even\"\"\"\n    return all(num % 2 == 0 for num in x)\n\ndef g():\n    return [2, 4, 6, 8]\n\nassert f(g())\n",
        "idx_generation": 299,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=25) -> bool:\n    \"\"\"Check if the given matrix contains a row or column that sums up to the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum == target:\n            return True\n    return False\ndef g(target=25):\n    matrix = [[10, 5, 10], [2, 8, 5], [5, 2, 8]]\n    return matrix\nassert f(g())\n",
        "idx_generation": 85,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, n=0) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return string == string[::-1]\ndef g(n=0):\n    return 'racecar'\nassert f(g())\n",
        "idx_generation": 193,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=12, c=30) -> bool:\n    \"\"\"Find n such that n - a == b * (the sum of the first c integers)\"\"\"\n    return n - a == sum([b * i for i in range(c)])\ndef g(a=3, b=12, c=30):\n    return a + sum([b * i for i in range(c)])\nassert f(g())\n\n",
        "idx_generation": 216,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    return any(target - num in nums for num in nums)\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 300,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=30) -> bool:\n    \"\"\"Check if the given matrix contains a row or column that sums up to the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum == target:\n            return True\n    return False\ndef g(target=30):\n    matrix = [[5, 10, 15], [15, 10, 5], [10, 15, 5]]\n    return matrix\nassert f(g())\n",
        "idx_generation": 85,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, n=0) -> bool:\n    \"\"\"Check if the given string contains a palindrome of length n\"\"\"\n    for i in range(len(string) - n + 1):\n        if string[i:i+n] == string[i:i+n][::-1]:\n            return True\n    return False\ndef g(n=0):\n    return 'madam'\nassert f(g())\n",
        "idx_generation": 193,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=5) -> bool:\n    \"\"\"Check if the given matrix is a square matrix of size n x n and if all elements in the matrix are prime numbers.\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return all(len(row) == n for row in matrix) and len(matrix) == n and all(all(is_prime(element) for element in row) for row in matrix)\ndef g(n=5):\n    return [[2] * n for _ in range(n)]\nassert f(g())\n",
        "idx_generation": 217,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there is a number in the list that is equal to the target\"\"\"\n    return target in nums\n\ndef g(target=5):\n    return random.sample(range(10), 7)\n\nassert f(g())\n",
        "idx_generation": 302,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target-9]\nassert f(g())\n",
        "idx_generation": 85,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5, m=3) -> bool:\n    \"\"\"Check if a substring appears in the given string s, n times, each with a length of m.\"\"\"\n    count = 0\n    for i in range(len(s)-m+1):\n        if s[i:i+m] == s[:m]:\n            count += 1\n    return count == n\ndef g(n=5, m=3):\n    return \"abcabcabcabcabc\"\nassert f(g())\n",
        "idx_generation": 193,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if the sum of all numbers in the list is equal to the target value.\"\"\"\n    return sum(numbers) == target\ndef g(numbers: List[int]):\n    return numbers\nassert f(g([1, 2, 3, 4, 5]), target=15)\n",
        "idx_generation": 218,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists three numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=20):\n    return [i for i in range(target)]\n\nassert f(g())\n",
        "idx_generation": 304,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int = 50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the matrix whose sum is equal to the target\"\"\"\n    return any(a + b == target for row in matrix for a in row for b in row)\ndef g(target: int = 50):\n    return [[10, 20, 30], [5, 15, 25], [40, 50, 60]]\nassert f(g())\n",
        "idx_generation": 85,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return string == string[::-1]\ndef g():\n    string = \"racecar\"\n    return string\nassert f(g())\n",
        "idx_generation": 194,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=5, c=100) -> bool:\n    \"\"\"Find n such that n * a == b * (the sum of the first c integers)\"\"\"\n    return n * a == sum([b * i for i in range(c)])\ndef g(a=10, b=5, c=100):\n    return sum([b * i for i in range(c)]) / a\nassert f(g())\n",
        "idx_generation": 227,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers contains any duplicate elements.\"\"\"\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 2]\n\nassert f(g())\n",
        "idx_generation": 310,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=2) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the list whose elements are consecutive numbers.\"\"\"\n    n = len(arr)\n    for i in range(n - k + 1):\n        subarray = arr[i:i+k]\n        if subarray[1] - subarray[0] == 1:\n            return True\n    return False\n\ndef g(k=2):\n    return [i for i in range(10)]\n\nassert f(g())\n",
        "idx_generation": 86,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], letter='a') -> bool:\n    \"\"\"Check if any word in the list ends with the given letter.\"\"\"\n    return any((word.endswith(letter) for word in words))\n\ndef g(letter='a'):\n    return ['apple', 'banana', 'orange', 'grapefruit']\n\nassert f(g())\n",
        "idx_generation": 195,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=8, b=4, c=30) -> bool:\n    \"\"\"Find n such that n / a == b * (the sum of the first c integers)\"\"\"\n    return n / a == sum([b * i for i in range(c)])\ndef g(a=8, b=4, c=30):\n    return a * sum([b * i for i in range(c)])\nassert f(g())\n",
        "idx_generation": 227,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=15):\n    return [6, 9, 8, 3, 2]\n\nassert f(g())\n",
        "idx_generation": 311,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=4, c=6) -> bool:\n    \"\"\"Find n such that n + a < b * (the sum of the first c integers)\"\"\"\n    return n + a < sum([b * i for i in range(c)])\ndef g(a=3, b=4, c=6):\n    return -a + sum([b * i for i in range(c)]) - 1\nassert f(g()) == True\n\n",
        "idx_generation": 86,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\n\ndef f(inds: List[int], s='abcdefghi', target='') -> bool:\n    \"\"\"Find the two slice indices that give the specific target in string s\"\"\"\n    (i, j) = inds\n    return s[i:j] == target\n\ndef g(s='abcdefghi', target=''):\n    from itertools import product\n    for (i, j) in product(range(-len(s) - 1, len(s) + 1), repeat=2):\n        try:\n            if s[i:j] == target:\n                return [i, j]\n        except (IndexError, ValueError):\n            pass\n\nassert f(g())\n",
        "idx_generation": 195,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=2, c=10) -> bool:\n    \"\"\"Find n such that n - a == b * (the sum of the first c integers)\"\"\"\n    return n - a == sum([b * i for i in range(c)])\ndef g(a=3, b=2, c=10):\n    return a + sum([b * i for i in range(c)])\nassert f(g())\n",
        "idx_generation": 227,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiply to the target value\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [4, 5, 10, 20, 25]\n\nassert f(g())\n",
        "idx_generation": 311,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, primes=[2, 3, 5, 7, 11]) -> bool:\n    \"\"\"Check if the given number is prime\"\"\"\n    if n < 2:\n        return False\n    for prime in primes:\n        if n % prime == 0:\n            return False\n    return True\ndef g(primes=[2, 3, 5, 7, 11]):\n    n = primes[-1] + 2\n    while not f(n, primes):\n        n += 2\n    return n\nassert f(g())\n",
        "idx_generation": 87,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, big_str='fatextemedyrotichipicecojon', index=5) -> bool:\n    \"\"\"Check if the string is a substring of the big string starting at index\"\"\"\n    return big_str[index:].startswith(s)\ndef g(big_str='fatextemedyrotichipicecojon', index=5):\n    return big_str[index:]\nassert f(g())\n",
        "idx_generation": 198,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=7, c=15) -> bool:\n    \"\"\"Find n such that n * a == b * (the product of the first c integers)\"\"\"\n    prod = 1\n    for i in range(1, c+1):\n        prod *= i\n    return n * a == b * prod\ndef g(a=5, b=7, c=15):\n    prod = 1\n    for i in range(1, c+1):\n        prod *= i\n    return prod // a * b\nassert f(g())\n",
        "idx_generation": 227,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=0):\n    return [7, 10, -2, 4, -5]\n\nassert f(g())\n",
        "idx_generation": 311,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_sum=30) -> bool:\n    \"\"\"Find a matrix where the sum of each row is equal to the target sum\"\"\"\n    return all(sum(row) == target_sum for row in matrix)\ndef g(target_sum=30):\n    n = target_sum // 5\n    matrix = [[5] * n for _ in range(n)]\n    return matrix\nassert f(g())\n",
        "idx_generation": 88,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\nfrom typing import List\n\ndef f(emails: List[str], domain='example.com') -> bool:\n    \"\"\"Check if none of the emails in the given list belong to the specified domain\"\"\"\n    return not any(re.search(f\"@{domain}$\", email) for email in emails)\n\ndef g(domain='example.com'):\n    return [f\"user{i}@gmail.com\" for i in range(1, 6)]\n\nassert f(g())\n",
        "idx_generation": 199,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: List[int], a=0, b=0, c=0, d=0) -> bool:\n    \"\"\"Check if a point lies on a specific line.\nSolution should be a tuple of the (x,y) coordinates.\nThe equation of the line is: ax + by + c = 0\"\"\"\n    x, y = e\n    return a*x + b*y + c == 0\ndef g(a=4, b=5, c=10):\n    return [a, b]\nassert f(g())\n",
        "idx_generation": 230,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Given a list of integers, find if there exists a pair of integers whose sum is divisible by k.\"\"\"\n    return any((nums[i] + nums[j]) % k == 0 for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 314,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix has a saddle point\"\"\"\n    row_mins = [min(row) for row in matrix]\n    col_maxs = [max(col) for col in zip(*matrix)]\n    for i, row in enumerate(matrix):\n        for j, num in enumerate(row):\n            if num == row_mins[i] and num == col_maxs[j]:\n                return True\n    return False\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "idx_generation": 89,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Tuple\n\ndef f(s: str, a='apple', b='banana', c='cherry') -> bool:\n    \"\"\"Check if a string contains all the given substrings\"\"\"\n    return all(sub in s for sub in [a, b, c])\n\ndef g(a='apple', b='banana', c='cherry'):\n    return f\"I love {a} and {b}, but I don't like {c}.\"\n\nassert f(g())\n",
        "idx_generation": 201,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: List[int], a=0, b=0, c=0, d=0) -> bool:\n    \"\"\"Check if a point lies on a specific line.\nSolution should be a tuple of the (x,y) coordinates.\nThe equation of the line is: ax + by + c = 0\"\"\"\n    x, y = e\n    return a*x + b*y + c == 0\ndef g(a=7, b=8, c=9):\n    return [a, b]\nassert f(g())\n",
        "idx_generation": 230,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 315,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in arr:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=3):\n    return [i for i in range(1, k+1)]\n\nassert f(g())\n",
        "idx_generation": 89,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if the target list contains n as an element and n is even.\"\"\"\n    return n in target and n % 2 == 0\ndef g(target=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return target[1]\nassert f(g())\n",
        "idx_generation": 204,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(n: int, a=3, b=4, c=6) -> bool:\n    \"\"\"Find n such that n + a is equal to the product of the first c integers multiplied by b\"\"\"\n    return n + a == b * math.prod(range(1, c+1))\ndef g(a=3, b=4, c=6):\n    return b * math.prod(range(1, c+1)) - a\nassert f(g())\n",
        "idx_generation": 236,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], a=5, s=7, e=100) -> bool:\n    \"\"\"Check if the list contains any number of an arithmetic sequence.\"\"\"\n    return any([num in x for num in range(a, e + 1, s)])\ndef g(a=5, s=7, e=100):\n    return list(range(1, e + 1))\nassert f(g())\n",
        "idx_generation": 316,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a pair of integers in the given list that sum up to the target value.\n    Solution should be a boolean value: True if a pair exists, False otherwise.\"\"\"\n    seen = set()\n    for num in arr:\n        if k - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(k=3):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 90,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(strings: List[str], length: int = 5) -> bool:\n    \"\"\"Check if any string in the list has a length greater than the specified length.\"\"\"\n    for string in strings:\n        if len(string) > length:\n            return True\n    return False\ndef g(strings=[\"apple\", \"banana\", \"cherry\"], length=5):\n    return strings\nassert f(g())\n",
        "idx_generation": 206,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if all numbers in the list are even.\"\"\"\n    for num in numbers:\n        if num % 2 != 0:\n            return False\n    return True\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 237,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Given an array of integers arr and a target integer, find three numbers in arr that sum up to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(target=20):\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 317,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=15) -> bool:\n    \"\"\"Check if there exist three numbers in the list whose sum is equal to the target value.\"\"\"\n    return any(numbers[i] + numbers[j] + numbers[k] == target for i in range(len(numbers)) for j in range(i+1, len(numbers)) for k in range(j+1, len(numbers)))\n\ndef g(target=15):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 91,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='programming', length=5) -> bool:\n    \"\"\"Find a substring of the given length, starting from the beginning of the target string.\"\"\"\n    return target[:length] == s\ndef g(target='programming', length=5):\n    return target[:length]\nassert f(g())\n",
        "idx_generation": 208,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\ndef f(radius: float, target=100) -> bool:\n    \"\"\"Check if the area of a circle with the given radius is greater than the target\"\"\"\n    area = math.pi * radius ** 2\n    return area > target\n\ndef g(target=100):\n    return 6.5\n\nassert f(g())\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists two numbers in the list whose product is equal to the target value\"\"\"\n    seen = set()\n    for num in nums:\n        if target / num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=3) -> bool:\n    \"\"\"Check if the given number is a multiple of m and m is prime.\"\"\"\n    prime_nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    return n % m == 0 and m in prime_nums\n\ndef g(m=3):\n    return 4 * m\n\nassert f(g())\n",
        "idx_generation": 92,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='programming', length=5) -> bool:\n    \"\"\"Find a substring of the given length, starting from the end of the target string.\"\"\"\n    return target[-length:] == s\ndef g(target='programming', length=5):\n    return target[-length:]\nassert f(g())\n",
        "idx_generation": 208,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=625) -> bool:\n    \"\"\"Find a number that when squared is equal to a.\"\"\"\n    return x ** 2 == a\ndef g(a=625):\n    return int(a ** 0.5)\nassert f(g())\n",
        "idx_generation": 243,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=200) -> bool:\n    \"\"\"Find a sequence of numbers in a list whose sum is equal to the target value.\"\"\"\n    for i in range(1, len(nums)+1):\n        for j in range(len(nums)-i+1):\n            if sum(nums[j:j+i]) == target:\n                return True\n    return False\n    \ndef g(target=200):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, target-(10+20+30+40+50+60+70+80+90)]\n\nassert f(g())\n",
        "idx_generation": 319,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(m: int, n=3, nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    \"\"\"Find the sum of the elements in the first n rows of the given matrix.\"\"\"\n    total = 0\n    for i in range(n):\n        total += sum(nums[i])\n    return total == m\n\ndef g(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], n=3):\n    return sum([sum(row) for row in nums[:n]])\n\nassert f(g())\n",
        "idx_generation": 93,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, words=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if the string s is present in the list of words.\"\"\"\n    return s in words\n\ndef g(words=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return 'cherry'\n\nassert f(g())\n",
        "idx_generation": 210,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=5, c=20) -> bool:\n    \"\"\"Find n such that n is equal to the difference between the sum of the first c integers and the product of b and a\"\"\"\n    return n == sum([i for i in range(1, c + 1)]) - a * b\ndef g(a=10, b=5, c=20):\n    return sum([i for i in range(1, c + 1)]) - a * b\nassert f(g())\n",
        "idx_generation": 244,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Find if there exists two numbers in the list whose difference is equal to the target difference\"\"\"\n    for i in range(len(nums)-1):\n        for j in range(i+1,len(nums)):\n            if abs(nums[i]-nums[j])==target:\n                return True\n    return False\n\ndef g(target=25):\n    nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 319,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Find two numbers in the list 'nums' whose sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[5, 10, 15, 20, 25, 30, 35, 40, 45]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 93,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s=10) -> bool:\n    \"\"\"Check if the sum of the digits of n is equal to s.\"\"\"\n    return sum(int(digit) for digit in str(n)) == s\ndef g(s=10):\n    return 37\nassert f(g())\n",
        "idx_generation": 210,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=5, c=20) -> bool:\n    \"\"\"Find n such that n is equal to a multiplied by the sum of the first c integers, divided by b\"\"\"\n    return n == (a * sum([i for i in range(1, c + 1)])) / b\ndef g(a=10, b=5, c=20):\n    return (a * sum([i for i in range(1, c + 1)])) / b\nassert f(g())\n",
        "idx_generation": 244,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Find if there exists two numbers in the list whose difference is equal to the target difference\"\"\"\n    for i in range(len(nums)-1):\n        for j in range(i+1,len(nums)):\n            if abs(nums[i]-nums[j])==target:\n                return True\n    return False\n\ndef g(target=25):\n    nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 320,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that adds up to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr=[2, 4, 6, 8]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 94,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr=\"python\") -> bool:\n    \"\"\"Check if the given substring exists in the given string.\"\"\"\n    return substr in s\n\ndef g(substr=\"python\"):\n    return \"I am learning python programming.\"\n\nassert f(g())\n\n",
        "idx_generation": 218,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=15482, b=23223, lower_bound=5) -> bool:\n    \"\"\"Check if n is a divisor of either a or b, and n is greater than or equal to lower_bound.\"\"\"\n    return (a % n == 0 or b % n == 0) and (n >= lower_bound)\ndef g(a=15482, b=23223, lower_bound=5):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n\nassert f(g())\n",
        "idx_generation": 244,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find if there exists two numbers in the list whose difference is equal to the target difference\"\"\"\n    for i in range(len(nums)-1):\n        for j in range(i+1,len(nums)):\n            if abs(nums[i]-nums[j])==target:\n                return True\n    return False\n\ndef g(target=20):\n    nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 320,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=10) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=10):\n    return [i**2 for i in range(1, k+1)]\n\nassert f(g())\n",
        "idx_generation": 94,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring=\"python\") -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    return substring in string\ndef g(substring=\"python\"):\n    return \"I love python programming\"\nassert f(g())\n",
        "idx_generation": 220,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(n: int, a=4, b=9) -> bool:\n    \"\"\"Check if n is a perfect square and is divisible by both a and b\"\"\"\n    return n ** 0.5 == int(n ** 0.5) and n % a == 0 and n % b == 0\n\ndef g(a=4, b=9):\n    return a * b * a * b\n\nassert f(g())\n",
        "idx_generation": 248,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any(target - num in nums for num in nums)\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nassert f(g())\n\n",
        "idx_generation": 321,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=100) -> bool:\n    \"\"\"Check if the absolute value of x is equal to a\"\"\"\n    return abs(x) == a\ndef g(a=100):\n    return a\nassert f(g())\n",
        "idx_generation": 95,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abc') -> bool:\n    \"\"\"Check if the given string contains the specified substring\"\"\"\n    return substring in s\n\ndef g(substring='abc'):\n    return \"defghijklmnopqrstuvwxyz\" + substring + \"qrstuvwxyz\"\n\nassert f(g())\n",
        "idx_generation": 221,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(n: int, a=4, b=9) -> bool:\n    \"\"\"Check if n is a perfect square and is divisible by both a and b\"\"\"\n    return n ** 0.5 == int(n ** 0.5) and n % a == 0 and n % b == 0\n\ndef g(a=4, b=9):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 250,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=2) -> bool:\n    \"\"\"Given a list of integers and a target value k, determine if there exist two distinct indices i and j,\n    such that nums[i] + nums[j] is divisible by k.\n    Return True if such a pair exists, and False otherwise.\"\"\"\n    remainder_count = [0] * k\n    for num in nums:\n        remainder_count[num % k] += 1\n    if remainder_count[0] > 1:\n        return True\n    if k % 2 == 0 and remainder_count[k // 2] > 1:\n        return True\n    for i in range(1, k // 2):\n        if remainder_count[i] != remainder_count[k - i]:\n            return False\n    return True\n\ndef g(k=2):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 322,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(squares: List[List[int]], m=6, n=6) -> bool:\n    \"\"\"Position min(m, n) <= 6 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\n\ndef g(m=6, n=6):\n    k = min(m, n)\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len({t for (i, j) in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for (i, j) in enumerate(p)]\n\nassert f(g())\n",
        "idx_generation": 95,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(palindrome: str) -> bool:\n    \"\"\"Check if the given string is a palindrome\"\"\"\n    return palindrome == palindrome[::-1]\n\ndef g():\n    return \"madam\"\n\nassert f(g())\n",
        "idx_generation": 223,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers, determine if all numbers in the list are divisible by the target value.\"\"\"\n    return all(num % target == 0 for num in arr)\n\ndef g() -> List[int]:\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n\nassert f(g(), 10)\n",
        "idx_generation": 256,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: str, a=1, b=2, c=10) -> bool:\n    \"\"\"Check if a point lies inside a rectangle, given the coordinates as a string in the format \"(x,y)\".\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = map(int, e.strip(\"()\").split(\",\"))\n    return (a <= x <= a+c) and (b <= y <= b+c)\ndef g(a=1, b=2, c=10):\n    return f\"({a+c},{b+c})\"\nassert f(g())\n",
        "idx_generation": 323,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, n=5) -> bool:\n    \"\"\"Check if a number is divisible by the difference between the largest and smallest digit\"\"\"\n    digits = [int(digit) for digit in str(x)]\n    diff = max(digits) - min(digits)\n    return x % diff == 0\ndef g(n=5):\n    return n * 123\nassert f(g())\n",
        "idx_generation": 95,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='abcdefghi', target='') -> bool:\n    \"\"\"Find the two slice indices that give the specific target in string s\"\"\"\n    (i, j) = inds\n    return s[i:j] == target\ndef g(s='abcdefghi', target=''):\n    from itertools import product\n    for (i, j) in product(range(-len(s) - 1, len(s) + 1), repeat=2):\n        try:\n            if s[i:j] == target:\n                return [i, j]\n        except (IndexError, ValueError):\n            pass\nassert f(g())\n",
        "idx_generation": 223,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is symmetric\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "idx_generation": 262,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of integers contains both positive and negative numbers\"\"\"\n    return any(num > 0 for num in nums) and any(num < 0 for num in nums)\n\ndef g():\n    return [1, 2, -3, -4, 5, -6, 7, -8]\nassert f(g())\n",
        "idx_generation": 324,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(inds: List[int], vecs=[3, 8, 6, 2, 1, 5, 9, 4, 7, 0, 10]) -> bool:\n    \"\"\"Find the indices in the vector where the sum of the numbers is divisible by 3\"\"\"\n    return sum((sum((v for i,v in enumerate(vecs) if i in inds))) % 3 == 0 for v in vecs) >= len(vecs) * 3 / 4\ndef g(vecs=[3, 8, 6, 2, 1, 5, 9, 4, 7, 0, 10]):\n    return [i for i,v in enumerate(vecs) if v % 3 == 0]\nassert f(g())\n",
        "idx_generation": 96,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='pythonprogramming', target='') -> bool:\n    \"\"\"Find the two slice indices that give the specific target in string s\"\"\"\n    (i, j) = inds\n    return s[i:j] == target\ndef g(s='pythonprogramming', target=''):\n    from itertools import product\n    for (i, j) in product(range(-len(s) - 1, len(s) + 1), repeat=2):\n        try:\n            if s[i:j] == target:\n                return [i, j]\n        except (IndexError, ValueError):\n            pass\nassert f(g())\n",
        "idx_generation": 223,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sequence: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose sum is equal to the target_sum.\"\"\"\n    for i in range(len(sequence)):\n        for j in range(i+1, len(sequence)+1):\n            if sum(sequence[i:j]) == target_sum:\n                return True\n    return False\n\ndef g(target_sum=100):\n    return [50, 30, 20]\n\nassert f(g())\n",
        "idx_generation": 263,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the product of any two numbers in the list is equal to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(target: int):\n    return [2, 4, 6, 8, 10], target\n\nassert f(*g(16))\n",
        "idx_generation": 326,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 96,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='programmingpuzzles', target='') -> bool:\n    \"\"\"Find the two slice indices that give the specific target in string s\"\"\"\n    (i, j) = inds\n    return s[i:j] == target\ndef g(s='programmingpuzzles', target=''):\n    from itertools import product\n    for (i, j) in product(range(-len(s) - 1, len(s) + 1), repeat=2):\n        try:\n            if s[i:j] == target:\n                return [i, j]\n        except (IndexError, ValueError):\n            pass\nassert f(g())\n",
        "idx_generation": 223,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the sum of the list elements is divisible by 5.\"\"\"\n    return sum(arr) % 5 == 0\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 269,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in a list that have a difference equal to the target value.\"\"\"\n    return any((abs(nums[i]-nums[j]) == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target+1]\nassert f(g())\n",
        "idx_generation": 328,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[str], nums=[5, 10, 15, 20, 25, 30]) -> bool:\n    \"\"\"Check if the sum of the numbers at the given indices is divisible by 3\"\"\"\n    return sum((nums[i] for i in x)) % 3 == 0\n\ndef g(nums=[5, 10, 15, 20, 25, 30]):\n    return [i for i,v in enumerate(nums) if v % 2 == 0]\n\nassert f(g())\n",
        "idx_generation": 97,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'imbe', 'jackfruit'], b=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'imbe', 'jackfruit', 'kiwi', 'lemon', 'mango', 'nectarine', 'orange', 'papaya', 'quince', 'raspberry', 'strawberry', 'tangerine']) -> bool:\n    \"\"\"Check if a string is present in both list a and list b\"\"\"\n    return s in a and s in b\n\ndef g(a=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'imbe', 'jackfruit'], b=['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'imbe', 'jackfruit', 'kiwi', 'lemon', 'mango', 'nectarine', 'orange', 'papaya', 'quince', 'raspberry', 'strawberry', 'tangerine']):\n    return a[0]\n\nassert f(g())\n",
        "idx_generation": 224,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=5) -> bool:\n    \"\"\"Check if the given number is a multiple of m.\"\"\"\n    return n % m == 0\n\ndef g(m=5):\n    return 3 * m\n\nassert f(g())\n",
        "idx_generation": 270,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import *\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a number in the list that is divisible by the target number\"\"\"\n    for num in nums:\n        if num % target == 0:\n            return True\n    return False\n\ndef g(target: int):\n    return [2, 4, 6, 8, 10], target\n\nassert f(*g(3))\n",
        "idx_generation": 332,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(x: List[int], nums=[-2, -1, 0, 1, 2]) -> bool:\n    \"\"\"Check if the sum of the numbers at the given indices is less than or equal to 0\"\"\"\n    return sum((nums[i] for i in x)) <= 0\n\ndef g(nums=[-2, -1, 0, 1, 2]):\n    return [i for i,v in enumerate(nums) if v < 0]\n\nassert f(g())\n",
        "idx_generation": 97,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub: str) -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    return sub in s\n\ndef g(sub='world'):\n    s = \"Hello, world!\"\n    return s, sub\n\nassert f(*g())\n",
        "idx_generation": 224,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(numbers: List[float], threshold=0.5) -> bool:\n    \"\"\"Check if the average of the list of numbers is greater than the given threshold value.\"\"\"\n    return sum(numbers) / len(numbers) > threshold\ndef g(threshold=0.5):\n    return [0.7, 0.9, 0.6, 0.8]\nassert f(g())\n",
        "idx_generation": 271,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import *\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a number in the list that is less than the target number\"\"\"\n    for num in nums:\n        if num < target:\n            return True\n    return False\n\ndef g(target: int):\n    return [10, 20, 30, 40, 50], target\n\nassert f(*g(35))\n",
        "idx_generation": 332,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target sum\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 98,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target=5) -> bool:\n    \"\"\"Check if the given string is a palindrome and has a length greater than or equal to the target length\"\"\"\n    return len(s) >= target and s == s[::-1]\ndef g(target=5):\n    return \"racecar\"\nassert f(g())\n",
        "idx_generation": 225,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=93252338, b=100) -> bool:\n    \"\"\"Solve an addition and subtraction problem\"\"\"\n    return x + b - a == 0\ndef g(a=93252338, b=100):\n    return a - b\n\nassert f(g())\n",
        "idx_generation": 302,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is sorted in non-decreasing order.\"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]], origin=(0, 0)) -> bool:\n    \"\"\"Check if all points in a list are located in the positive quadrant\"\"\"\n    return all((point[0] >= origin[0] and point[1] >= origin[1]) for point in points)\ndef g(origin=(0, 0)):\n    return [(1, 2), (3, 4), (5, 6)]\nassert f(g())\n",
        "idx_generation": 98,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(emails: List[str], target_domain='example.com') -> bool:\n    \"\"\"Find an email in the list that belongs to the target domain\"\"\"\n    for email in emails:\n        if target_domain in email:\n            return True\n    return False\n\ndef g(target_domain='example.com'):\n    return ['john.doe@example.com', 'jane.smith@example.com', 'alexander.brown@gmail.com']\n\nassert f(g())\n",
        "idx_generation": 227,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric positive definite matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    eigenvalues = [sum(matrix[i][j] * matrix[j][i] for j in range(cols)) for i in range(rows)]\n    if any(eigenvalue <= 0 for eigenvalue in eigenvalues):\n        return False\n    return True\n\ndef g():\n    matrix = [[2, 1, 1], [1, 5, 2], [1, 2, 4]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 312,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"Find the maximum number in the list\"\"\"\n    max_num = float('-inf')\n    for num in nums:\n        if num > max_num:\n            max_num = num\n    return max_num\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g()) == 9\n",
        "idx_generation": 335,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find a triplet of numbers from a list that add up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=20):\n    return [5, 7, target-12]\n\nassert f(g())\n",
        "idx_generation": 100,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(s: List[str], n=3, m=3) -> bool:\n    \"\"\"Find a list of n strings, each of length m, such that their concatenation forms s\"\"\"\n    return len(s) == n and all([len(x) == m for x in s]) and ''.join(s) == ''.join([chr(ord('A') + i) * m for i in range(n)])\ndef g(n=3, m=3):\n    return [chr(ord('A') + i) * m for i in range(n)]\nassert f(g())\n",
        "idx_generation": 228,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=3, c=10) -> bool:\n    \"\"\"Find n such that n + a is equal to the product of b and the sum of the first c even numbers\"\"\"\n    return n + a == b * sum([i for i in range(2, 2*c + 1, 2)])\ndef g(a=5, b=3, c=10):\n    return -a + b * sum([i for i in range(2, 2*c + 1, 2)])\nassert f(g())\n",
        "idx_generation": 315,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_product=1000) -> bool:\n    \"\"\"Find if there exists a triplet of integers in the list whose product is equal to the target product.\"\"\"\n    return any((nums[i] * nums[j] * nums[k] == target_product for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))\ndef g(nums=[2, 4, 5, 10, 20]):\n    return nums\nassert f(g())\n",
        "idx_generation": 335,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Find a subarray with a specific target sum\"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum == target or prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\ndef g(target=0):\n    return [1, 2, 3, 4, target-10]\nassert f(g())\n",
        "idx_generation": 101,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, strings=['apple', 'banana', 'cherry', 'date', 'elderberry']) -> bool:\n    \"\"\"Check if the given string s starts with any string in the list.\"\"\"\n    return any(s.startswith(string) for string in strings)\n\ndef g(strings=['apple', 'banana', 'cherry', 'date', 'elderberry']):\n    return strings[-1]\n\nassert f(g())\n",
        "idx_generation": 229,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=4, c=15) -> bool:\n    \"\"\"Find n such that n + a is equal to the product of b and the sum of the first c odd numbers\"\"\"\n    return n + a == b * sum([i for i in range(1, 2*c + 1, 2)])\ndef g(a=2, b=4, c=15):\n    return -a + b * sum([i for i in range(1, 2*c + 1, 2)])\nassert f(g())\n",
        "idx_generation": 315,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=3, upper=500, seq=[2, 5, 10, 20, 40, 80, 160, 320, 640, 1280]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is greater than an upper limit\"\"\"\n    total = 0\n    for i in range(start, start + k):\n        total += seq[i]\n    return total > upper\n\ndef g(k=3, upper=500, seq=[2, 5, 10, 20, 40, 80, 160, 320, 640, 1280]):\n    def sum_seq(start):\n        ans = 0\n        for i in range(start, start + k):\n            ans += seq[i]\n        return ans\n    return max(range(-len(seq), len(seq) - k + 1), key=sum_seq)\n\nassert f(g())\n",
        "idx_generation": 336,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is a square matrix\"\"\"\n    return len(matrix) == len(matrix[0])\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "idx_generation": 101,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], prefix='Mr.') -> bool:\n    \"\"\"Check if all names in a list start with a given prefix.\"\"\"\n    return all(name.startswith(prefix) for name in names)\n\ndef g():\n    names = ['Mr. John', 'Mr. Smith', 'Mr. David', 'Mr. Michael']\n    return names\n\nassert f(g())\n",
        "idx_generation": 232,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=12, b=3, c=6) -> bool:\n    \"\"\"Find n such that (the sum of the first b multiples of c) - a == n\"\"\"\n    return sum([c * i for i in range(1, b+1)]) - a == n\ndef g(a=12, b=3, c=6):\n    return sum([c * i for i in range(1, b+1)]) - a\nassert f(g())\n",
        "idx_generation": 326,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair (a, b) in the list such that a + b = target.\"\"\"\n    return any(target - num in nums for num in nums)\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 337,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(names: List[str], target_length=5) -> bool:\n    \"\"\"Check if there is a name in the list that has a length of target_length\"\"\"\n    return any(len(name) == target_length for name in names)\n\ndef g(target_length=5):\n    return [\"Alice\", \"Bob\", \"Charlie\", \"Dave\"]\n\nassert f(g())\n",
        "idx_generation": 102,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Given a string and a substring, determine if the substring is present in the string.\"\"\"\n    return substring in string\n\ndef g(substring='abc'):\n    return 'xyzabc123'\n\nassert f(g())\n",
        "idx_generation": 232,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(seq: List[int], a=5) -> bool:\n    \"\"\"Check if the sum of all elements in the sequence is divisible by a\"\"\"\n    total = sum(seq)\n    return total % a == 0\ndef g(a=5):\n    return [i * a for i in range(1, 6)]\nassert f(g())\n",
        "idx_generation": 337,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that subtracts to the target\"\"\"\n    n = len(numbers)\n    for i in range(n):\n        for j in range(i+1, n):\n            if numbers[i] - numbers[j] == target:\n                return True\n    return False\n\ndef g(target=100):\n    numbers = [150, 75, 50, 25]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 338,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_product=24) -> bool:\n    \"\"\"Check if there are two numbers in the list that multiply to give the target_product\"\"\"\n    return any((numbers[i] * numbers[j] == target_product) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\n\ndef g(target_product=24):\n    return [2, 3, 4, 6]\n\nassert f(g())\n",
        "idx_generation": 102,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(names: List[str]) -> bool:\n    \"\"\"Check if all names in the list start with the same letter.\"\"\"\n    first_letter = names[0][0]\n    for name in names:\n        if name[0] != first_letter:\n            return False\n    return True\n\ndef g():\n    return [\"Alice\", \"Adam\", \"Alex\"]\n\nassert f(g())\n",
        "idx_generation": 235,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the sum of the numbers in the list is divisible by 7\"\"\"\n    return sum(nums) % 7 == 0\ndef g():\n    return [1, 2, 3, 4, 5, 6]\nassert f(g())\n",
        "idx_generation": 342,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a triplet of numbers in the list that add up to the target value.\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target) for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g(target=10):\n    nums = [2, 5, 8, 3, 1, 6]\n    return nums\nassert f(g())\n\n",
        "idx_generation": 342,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if any element in the matrix is divisible by n\"\"\"\n    for row in matrix:\n        for element in row:\n            if element % n == 0:\n                return True\n    return False\n\ndef g(n=3):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 104,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='hello') -> bool:\n    \"\"\"Check if the string starts with the given word\"\"\"\n    return s.startswith(word)\ndef g(word='hello'):\n    return word + ' world'\nassert f(g())\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is symmetric\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "idx_generation": 342,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in nums whose sum is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 343,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=8) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=8):\n    return [i**2 for i in range(1, k+1)]\n\nassert f(g())\n",
        "idx_generation": 104,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[str], target='python') -> bool:\n    \"\"\"Check if there exists a string in the list whose reversed form is equal to the target string\"\"\"\n    for s in lst:\n        if s[::-1] == target:\n            return True\n    return False\n\ndef g():\n    return ['nohtyp', 'hello', 'world']\n\nassert f(g())\n",
        "idx_generation": 240,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=4, b=16) -> bool:\n    \"\"\"Check if n is a perfect square and a is a factor of b\"\"\"\n    return n ** 0.5 == int(n ** 0.5) and b % a == 0\n\ndef g(a=4, b=16):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 348,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if the target number is present in the list\"\"\"\n    return target in nums\n\ndef g(target=0):\n    return [1, 0, 3, 0, 5, 0, 7, 0, 9]\n\nassert f(g()) == True\n",
        "idx_generation": 346,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target_sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target_sum:\n                    return True\n    return False\n\ndef g(target_sum=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g())\n",
        "idx_generation": 105,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, big_str='fatextemedyrotichipicecojon', index=24) -> bool:\n    \"\"\"Check if a string is present in big_str starting from the given index\"\"\"\n    return s in big_str[index:]\ndef g(big_str='fatextemedyrotichipicecojon', index=24):\n    return big_str[index:]\nassert f(g())\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=14, b=50, c=47) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c multiples of 3)\"\"\"\n    return n + a == sum([b * i for i in range(3, 3*c+1, 3)])\ndef g(a=14, b=50, c=47):\n    return -a + sum([b * i for i in range(3, 3*c+1, 3)])\nassert f(g())\n",
        "idx_generation": 357,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list such that their difference is equal to the target.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = num - target\n        if complement in num_set:\n            return True\n    return False\n\ndef g(target=20):\n    return [5, 10, 15, 20, 25, 30]\n\nassert f(g(), 10)\n",
        "idx_generation": 347,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    if rows != cols:\n        return False\n    \n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 105,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=8) -> bool:\n    \"\"\"Check if the given number is divisible by m and also a palindrome.\"\"\"\n    return n % m == 0 and str(n) == str(n)[::-1]\n\ndef g(m=8):\n    return int(str(m) * 4)\n\nassert f(g())\n\n",
        "idx_generation": 245,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int] = [1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if n is divisible by any number in the list\"\"\"\n    return any(n % num == 0 for num in lst)\ndef g(lst: List[int] = [1, 2, 3, 4, 5]):\n    return lst[3]\nassert f(g())\n",
        "idx_generation": 358,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists two numbers in the list 'nums' that have a product greater than the target value.\"\"\"\n    sorted_nums = sorted(nums)\n    left = 0\n    right = len(sorted_nums) - 1\n    while left < right:\n        if sorted_nums[left] * sorted_nums[right] > target:\n            return True\n        elif sorted_nums[left] * sorted_nums[right] < target:\n            left += 1\n        else:\n            right -= 1\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 348,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if there exist three numbers in the list that sum up to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50]\n\nassert f(g())\n",
        "idx_generation": 105,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='python') -> bool:\n    \"\"\"Check if the given substring exists in the given string.\"\"\"\n    return substring in s\n\ndef g():\n    s = \"I love python programming\"\n    return s\n\nassert f(g())\n",
        "idx_generation": 245,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(n: int, year_len=365) -> bool:\n    \"\"\"Find n such that the probability of four people having the same birthday in a group of n is near 1/2.\"\"\"\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 1/2) ** 2 <= year_len\ndef g(year_len=365):\n    n = 1\n    distinct_prob = 1.0\n    best = (1/2, 1)\n    while distinct_prob > 1/2:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(1/2 - distinct_prob), n))\n    return best[1]\nassert f(g())\n",
        "idx_generation": 374,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int] = [1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the given number is the maximum in the list\"\"\"\n    return n == max(lst)\ndef g(lst: List[int] = [1, 2, 3, 4, 5]):\n    return lst[-1]\nassert f(g())\n",
        "idx_generation": 349,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is an identity matrix\"\"\"\n    return all(matrix[i][j] == 1 if i == j else matrix[i][j] == 0 for i in range(len(matrix)) for j in range(len(matrix[i])))\ndef g():\n    return [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\nassert f(g())\n\n",
        "idx_generation": 106,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, s='tExTYtOHahekomArof', t='TExTYTohaHeKomryGUSeteXTUrYgir') -> bool:\n    \"\"\"Ignoring case, compare s, t lexicographically. Output 0 if they are =, -1 if s < t, 1 if s > t.\"\"\"\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False\ndef g(s='tExTYtOHahekomArof', t='TExTYTohaHeKomryGUSeteXTUrYgir'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1\nassert f(g())\n",
        "idx_generation": 247,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=20, b=4, c=3) -> bool:\n    \"\"\"Find n such that (the sum of the first b multiples of c) + a == n\"\"\"\n    return sum([c * i for i in range(b)]) + a == n\ndef g(a=20, b=4, c=3):\n    return sum([c * i for i in range(b)]) + a\nassert f(g())\n",
        "idx_generation": 374,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(arr: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target value.\"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum == target or prefix_sum - target in prefix_sums:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\ndef g(target=5):\n    return [1, 3, -2, 4, 2, -1, 0, 5]\nassert f(g())\n",
        "idx_generation": 350,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, start_date=datetime.date(2022, 1, 1), end_date=datetime.date(2022, 12, 31)) -> bool:\n    \"\"\"Check if the given date falls within a specified date range\n    - date: datetime.date object representing the date\n    - start_date: datetime.date object representing the start of the date range (inclusive)\n    - end_date: datetime.date object representing the end of the date range (inclusive)\"\"\"\n\n    return start_date <= date <= end_date\n\ndef g(start_date=datetime.date(2022, 1, 1), end_date=datetime.date(2022, 12, 31)):\n    return datetime.date(2022, 6, 15)  # June 15, 2022\n\nassert f(g())\n",
        "idx_generation": 106,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, sub: str, case_sensitive=True) -> bool:\n    \"\"\"Check if a given substring is present in a string\"\"\"\n    if not case_sensitive:\n        s = s.lower()\n        sub = sub.lower()\n    return sub in s\n\ndef g(sub='world', case_sensitive=True):\n    s = \"Hello, world!\"\n    return s, sub, case_sensitive\n\nassert f(*g())\n",
        "idx_generation": 248,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with all elements divisible by 3.\"\"\"\n    for i in range(len(arr)):\n        subarray_sum = 0\n        for j in range(i, len(arr)):\n            subarray_sum += arr[j]\n            if subarray_sum % 3 == 0:\n                return True\n    return False\n\ndef g():\n    return [2, 3, 5, 9, 7]\n\nassert f(g())\n",
        "idx_generation": 382,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to the target.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g())\n",
        "idx_generation": 352,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, month=7) -> bool:\n    \"\"\"Check if the given date falls within a specified month\n    - date: datetime.date object representing the date\n    - month: integer representing the month (1 - January, 12 - December)\"\"\"\n\n    return date.month == month\n\ndef g(month=7):\n    return datetime.date(2022, month, 1)  # July 1, 2022\n\nassert f(g())\n",
        "idx_generation": 106,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc', count=2) -> bool:\n    \"\"\"Find a string with count number of copies of a given substring\"\"\"\n    return string.count(substring) == count\n\ndef g(substring='abc', count=2):\n    return substring * count\n\nassert f(g())\n",
        "idx_generation": 249,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if the given number is divisible by m and is also a prime number.\"\"\"\n    if n % m == 0:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(m=10):\n    return m + 1\n\nassert f(g())\n",
        "idx_generation": 383,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list such that their difference is equal to the target.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        complement = num - target\n        if complement in num_set:\n            return True\n    return False\n\ndef g(target=5):\n    return [7, 12, 3, 9]\n\nassert f(g(), 2)\n",
        "idx_generation": 354,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Check if there are three numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return arr\n\nassert f(g())\n\n",
        "idx_generation": 107,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given string s has at least n occurrences of the letter 'a'\"\"\"\n    return s.count('a') >= n\n\ndef g(n=3):\n    s = \"banana\"\n    return s\n\nassert f(g())\n",
        "idx_generation": 251,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"Check if a number is divisible by k.\"\"\"\n    return n % k == 0\ndef g(k=3):\n    return k ** 2\nassert f(g())\n",
        "idx_generation": 383,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list such that their product is equal to the target.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        if target % num == 0:\n            complement = target // num\n            if complement in num_set:\n                return True\n    return False\n\ndef g(target=0):\n    return [2, 4, 6, 8, 10]\n\nassert f(g(), 48)\n",
        "idx_generation": 354,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10) -> bool:\n    \"\"\"Check if n is a multiple of a\"\"\"\n    return n % a == 0\ndef g(a=10):\n    return a * 7\nassert f(g())\n",
        "idx_generation": 108,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the string 's' is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"madam\"\n\nassert f(g())\n",
        "idx_generation": 252,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=5) -> bool:\n    \"\"\"Check if a number is a multiple of k.\"\"\"\n    return n % k == 0\ndef g(k=5):\n    return k ** 4\nassert f(g())\n",
        "idx_generation": 383,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target value.\"\"\"\n    return any((target - num) in numbers for num in numbers)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 361,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Check if there exist three numbers in the list that sum up to the target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\n\ndef g(target=20):\n    return [2, 4, 6, 8, 10, 12]\n\nassert f(g())\n",
        "idx_generation": 108,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, prefix='abc') -> bool:\n    \"\"\"Check if the given string starts with a specific prefix\"\"\"\n    return string.startswith(prefix)\n\ndef g(prefix='abc'):\n    return \"abcdef\"\n\nassert f(g())\n",
        "idx_generation": 254,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(arr: List[int], target_sum=15) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with all elements being perfect squares and the sum of the subarray is greater than or equal to the target sum.\"\"\"\n    for i in range(len(arr)):\n        subarray_sum = 0\n        subarray_product = 1\n        for j in range(i, len(arr)):\n            subarray_sum += arr[j]\n            subarray_product *= arr[j]\n            if math.isqrt(subarray_product) ** 2 == subarray_product and subarray_sum >= target_sum:\n                return True\n    return False\n\ndef g():\n    return [2, 4, 9, 16, 5]\n\nassert f(g())\n",
        "idx_generation": 387,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the list of numbers is sorted in non-decreasing order\"\"\"\n    return numbers == sorted(numbers)\n\ndef g():\n    return [1, 5, 6, 9, 12]\n\nassert f(g())\n\n",
        "idx_generation": 364,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that sum up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70]\n\nassert f(g())\n",
        "idx_generation": 108,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='abcdefghi', target='') -> bool:\n    \"\"\"Find the two slice indices that give the specific target in string s\"\"\"\n    (i, j) = inds\n    return s[i:j] == target\ndef g(s='abcdefghi', target=''):\n    from itertools import product\n    for (i, j) in product(range(-len(s) - 1, len(s) + 1), repeat=2):\n        try:\n            if s[i:j] == target:\n                return [i, j]\n        except (IndexError, ValueError):\n            pass\nassert f(g())\n",
        "idx_generation": 259,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with all elements being prime numbers.\"\"\"\n    for i in range(len(arr)):\n        subarray_product = 1\n        for j in range(i, len(arr)):\n            subarray_product *= arr[j]\n            if is_prime(subarray_product):\n                return True\n    return False\n\ndef g():\n    return [2, 4, 9, 16, 5]\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nassert f(g())\n",
        "idx_generation": 388,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [2, 4, 6, 8]\n\nassert f(g())\n",
        "idx_generation": 368,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 109,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], target=\"hello\") -> bool:\n    \"\"\"Check if there exists a string in the list whose reverse is equal to the target\"\"\"\n    return any(string[::-1] == target for string in strings)\ndef g(target=\"hello\"):\n    return [\"olleh\", \"world\", \"python\", \"program\"]\nassert f(g())\n\n",
        "idx_generation": 259,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with all elements being Fibonacci numbers.\"\"\"\n    for i in range(len(arr)):\n        subarray_product = 1\n        for j in range(i, len(arr)):\n            subarray_product *= arr[j]\n            if is_fibonacci(subarray_product):\n                return True\n    return False\n\ndef g():\n    return [2, 4, 9, 16, 5]\n\ndef is_fibonacci(num):\n    sqrt5 = math.sqrt(5)\n    phi = (1 + sqrt5) / 2\n    return ((phi ** num) - (-phi) ** (-num)) / sqrt5 == int(((phi ** num) - (-phi) ** (-num)) / sqrt5)\n\nassert f(g())\n",
        "idx_generation": 388,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], target=5) -> bool:\n    \"\"\"Check if there is a word in words whose length is greater than the target.\"\"\"\n    for word in words:\n        if len(word) > target:\n            return True\n    return False\n\ndef g(target=5):\n    return ['apple', 'banana', 'cherry', 'date', 'elderberry']\n\nassert f(g())\n",
        "idx_generation": 371,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=6, n=6) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=6, n=6):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 109,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(s: str, vowels: List[str]=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if all the vowels in the string s are present in the given list of vowels.\n    - s: the string to be checked\n    - vowels: list of vowels\"\"\"\n    return all(vowel in vowels for vowel in s if vowel.lower() in 'aeiou')\ndef g(s: str, vowels: List[str]=['a', 'e', 'i', 'o', 'u']):\n    return s\nassert f(g('Hello, World!'))\n\n",
        "idx_generation": 265,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=17) -> bool:\n    \"\"\"Check if x is divisible by a specific number.\"\"\"\n    return x % a == 0\ndef g(a=17):\n    return 2 * a\nassert f(g())\n",
        "idx_generation": 391,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target_sum\"\"\"\n    return any((numbers[i] + numbers[j] == target_sum for i in range(len(numbers)) for j in range(i+1, len(numbers))))\n    \ndef g(target_sum=10):\n    return [1, 2, 4, 5, 6, 7]\n    \nassert f(g())\n",
        "idx_generation": 371,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a palindrome.\"\"\"\n    return nums == nums[::-1]\n    \ndef g():\n    return [1, 2, 3, 4, 5, 4, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 110,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='Python') -> bool:\n    \"\"\"Check if the given substring is present in the given string, case-insensitive\"\"\"\n    return substring.lower() in s.lower()\ndef g(substring='Python'):\n    return \"I love python programming\"\nassert f(g())\n",
        "idx_generation": 268,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(x: float, a=2) -> bool:\n    \"\"\"Check if the square root of x is equal to a specific number.\"\"\"\n    return math.sqrt(x) == a\ndef g(a=2):\n    return a ** 2\nassert f(g())\n",
        "idx_generation": 391,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a triplet in the list whose sum is equal to the target.\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\n\ndef g(target=100):\n    nums = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 376,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"Determine if the given number n is divisible by k.\"\"\"\n    return n % k == 0\n\ndef g(k=3):\n    return k * 5\n\nassert f(g())\n",
        "idx_generation": 110,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(target: str, s='abcdefghi', indices=(3, 6)) -> bool:\n    \"\"\"Find the index range in string s that gives the specific target\"\"\"\n    (start, end) = indices\n    return s[start:end] == target\n\ndef g(s='abcdefghi', indices=(3, 6)):\n    return s[indices[0]:indices[1]]\n\nassert f(g())\n",
        "idx_generation": 272,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=3, c=7) -> bool:\n    \"\"\"Find n such that the sum of the squares of the first b multiples of c is equal to a + n\"\"\"\n    return sum([(c * i)**2 for i in range(1, b+1)]) == a + n\ndef g(a=10, b=3, c=7):\n    return sum([(c * i)**2 for i in range(1, b+1)]) - a\nassert f(g())\n",
        "idx_generation": 392,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if the product of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] * nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_sum=10):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n\n",
        "idx_generation": 378,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr=[1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if the given number is present in the list\"\"\"\n    return n in arr\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr[2]\nassert f(g())\n",
        "idx_generation": 110,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given string can be split into n equal parts.\"\"\"\n    if len(s) % n != 0:\n        return False\n    part_length = len(s) // n\n    parts = [s[i:i+part_length] for i in range(0, len(s), part_length)]\n    return all(part == parts[0] for part in parts)\ndef g(n=3):\n    return \"abcabcabc\"\nassert f(g())\n",
        "idx_generation": 274,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(n: int, x=2) -> bool:\n    \"\"\"Check if the given number is a power of x.\"\"\"\n    return math.log(n, x).is_integer()\ndef g(x=2):\n    return 16\n\nassert f(g())\n",
        "idx_generation": 393,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if there exists a number in the list that is divisible by n\"\"\"\n    return any(num % n == 0 for num in nums)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[0]\nassert f(g())\n",
        "idx_generation": 382,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=4) -> bool:\n    \"\"\"Check if n is divisible by a\"\"\"\n    return n % a == 0\ndef g(a=4):\n    return a * 7\nassert f(g())\n",
        "idx_generation": 110,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, n=3) -> bool:\n    \"\"\"Check if a string is a palindrome of length n\"\"\"\n    return string == string[::-1] and len(string) == n\ndef g(n=3):\n    return 'wow'\nassert f(g())\n",
        "idx_generation": 275,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(res: int, m=285691387583588, n=5) -> bool:\n    \"\"\"Find the result of applying the following operation to integer m, n times: if the number is odd, double it, otherwise subtract 1.\"\"\"\n    for i in range(n):\n        m = m * 2 if m % 2 else m - 1\n    return res == m\ndef g(m=285691387583588, n=5):\n    for i in range(n):\n        m = m * 2 if m % 2 else m - 1\n    return m\nassert f(g())\n",
        "idx_generation": 396,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if any two numbers in the list 'arr' add up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return arr\n\nassert f(g(), target=10)\n",
        "idx_generation": 382,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5) -> bool:\n    \"\"\"Check if n is divisible by a\"\"\"\n    return n % a == 0\ndef g(a=5):\n    return a * 6\nassert f(g())\n",
        "idx_generation": 110,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=5) -> bool:\n    \"\"\"Check if the string 's' has at least 'n' consecutive vowels.\"\"\"\n    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n            if count == n:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(n=5):\n    vowels = 'aeiou'\n    return vowels * n\n\nassert f(g())\n",
        "idx_generation": 276,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: float, a=100) -> bool:\n    \"\"\"Find a number that when multiplied by 10 is equal to a.\"\"\"\n    return x * 10 == a\n\ndef g(a=100):\n    return a / 10\n\nassert f(g())\n",
        "idx_generation": 402,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that subtract to the target.\"\"\"\n    return any((nums[i] - nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums))))\n\ndef g(target=10):\n    return [15, 20, 5, 30, 40]\n\nassert f(g())\n",
        "idx_generation": 386,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=6) -> bool:\n    \"\"\"Check if n is divisible by a\"\"\"\n    return n % a == 0\ndef g(a=6):\n    return a * 5\nassert f(g())\n",
        "idx_generation": 110,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Given a string, determine if it is a palindrome.\"\"\"\n    string = string.lower()\n    reversed_string = string[::-1]\n\n    return string == reversed_string\n\ndef g():\n    return \"level\"\n\nassert f(g())\n",
        "idx_generation": 277,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[3, 6, 9, 12, 15], divisor=36) -> bool:\n    \"\"\"Check if n is a multiple of all numbers in the list and is divisible by the divisor\"\"\"\n    return all((n % i == 0 for i in lst)) and n % divisor == 0\ndef g(lst=[3, 6, 9, 12, 15], divisor=36):\n    ans = 1\n    for i in lst:\n        ans *= i\n    return ans * divisor\nassert f(g())\n",
        "idx_generation": 403,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers contains any duplicates.\"\"\"\n    return len(numbers) != len(set(numbers))\n\ndef g():\n    return [1, 2, 3, 4, 5, 5]\n\nassert f(g())\n",
        "idx_generation": 394,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in nums that multiply up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    nums = [2, 3, 5, 7, 10, 15, 20, 25]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 111,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='python') -> bool:\n    \"\"\"Check if the given string contains all the characters of the target string in the same order.\"\"\"\n    target_index = 0\n    for char in s:\n        if char == target[target_index]:\n            target_index += 1\n            if target_index == len(target):\n                return True\n    return False\n\ndef g(target='python'):\n    return target + ' is awesome'\n\nassert f(g())",
        "idx_generation": 280,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[2, 4, 6, 8, 10, 12]) -> bool:\n    \"\"\"Check if n is a multiple of all numbers in the list and is divisible by 24\"\"\"\n    return all((n % i == 0 for i in lst)) and n % 24 == 0\n\ndef g(lst=[2, 4, 6, 8, 10, 12]):\n    ans = 1\n    for i in lst:\n        ans *= i\n    return ans * 24\n\nassert f(g())\n",
        "idx_generation": 404,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=50) -> int:\n    \"\"\"Find the minimum difference between the target value and any number in a given list of integers\"\"\"\n    min_diff = float('inf')\n    for num in nums:\n        diff = abs(target - num)\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n\ndef g(nums=[10, 20, 30, 40, 50]):\n    return nums\n\nassert f(g()) == 0\n",
        "idx_generation": 395,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list 'nums' whose sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 111,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, chars=['a', 'b', 'c']) -> bool:\n    \"\"\"Check if a string contains all the characters in a given list.\"\"\"\n    return all((char in s for char in chars))\ndef g(chars=['a', 'b', 'c']):\n    return ''.join(chars)\nassert f(g())\n",
        "idx_generation": 284,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(lst: List[int], n=2) -> bool:\n    \"\"\"Check if all numbers in the list are divisible by n\"\"\"\n    return all([num % n == 0 for num in lst])\n\ndef g(lst=[4, 8, 12, 16, 20]):\n    return lst\n\nassert f(g())\n\n",
        "idx_generation": 405,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any(target - num in nums for num in nums)\ndef g(nums=[1, 2, 3, 4, 5], target=10):\n    return {num: target - num for num in nums}\nassert f(g())\n\n",
        "idx_generation": 395,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, pairs=[[0, 0]]) -> bool:\n    \"\"\"Given a sequence of integer pairs, p_i, m_i, where \\\\sum p_i-m_i = 0, find the minimum value, over t, of\np_{t+1} + \\\\sum_{i=1}^t p_i - m_i\"\"\"\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot >= n\n        if tot == n:\n            success = True\n    return success\ndef g(pairs=[[0, 0]]):\n    tot = 0\n    n = 0\n    for (p, m) in pairs:\n        tot += p - m\n        if tot < n:\n            n = tot\n    return n\nassert f(g())\n",
        "idx_generation": 111,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, a=\"python\") -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return x == a[::-1]\ndef g(a=\"python\"):\n    return a[::-1]\nassert f(g())\n",
        "idx_generation": 285,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=4, b=3) -> bool:\n    \"\"\"Check if the product of the first a powers of b is equal to n.\"\"\"\n    return b ** a == n\n\ndef g(a=4, b=3):\n    return b ** a\n\nassert f(g())\n",
        "idx_generation": 410,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if any number in the list is divisible by n\"\"\"\n    return any(num % n == 0 for num in nums)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[0]\nassert f(g())\n",
        "idx_generation": 397,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are three numbers in the list 'nums' whose sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 112,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[str]], target='banana') -> bool:\n    \"\"\"Check if the target string is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target='banana'):\n    return [['apple', 'banana', 'cherry'], ['pear', 'grape', 'orange'], ['kiwi', 'melon', target]]\n\nassert f(g())\n",
        "idx_generation": 286,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with all elements being prime numbers.\"\"\"\n    for i in range(len(arr)):\n        subarray_product = 1\n        for j in range(i, len(arr)):\n            subarray_product *= arr[j]\n            if is_prime(subarray_product):\n                return True\n    return False\n\ndef g():\n    return [2, 3, 5, 7, 11]\n\ndef is_prime(n: int) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nassert f(g())\n",
        "idx_generation": 414,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there exists a pair of numbers whose sum is equal to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target-10]\n\nassert f(g())\n",
        "idx_generation": 398,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target value\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [2, 3, 5, 7]\n\nassert f(g())\n",
        "idx_generation": 112,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[str], target='abcabcabcabcabc') -> bool:\n    \"\"\"Check if the target string can be formed by concatenating a sequence of strings.\"\"\"\n    return ''.join(nums) == target\ndef g(target='abcabcabcabcabc'):\n    return ['abc'] * 5\nassert f(g())\n",
        "idx_generation": 293,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with all elements being prime powers.\"\"\"\n    for i in range(len(arr)):\n        subarray_product = 1\n        for j in range(i, len(arr)):\n            subarray_product *= arr[j]\n            if is_prime_power(subarray_product):\n                return True\n    return False\n\ndef g():\n    return [2, 3, 4, 5, 7]\n\ndef is_prime_power(n: int) -> bool:\n    \"\"\"Check if a number is a prime power.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0 and is_prime(i):\n            return True\n    return False\n\ndef is_prime(n: int) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nassert f(g())\n",
        "idx_generation": 414,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 398,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target value\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target) for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g())\n",
        "idx_generation": 113,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='abcde') -> bool:\n    \"\"\"Check if the given substring is present in the given string\"\"\"\n    return substring in s\ndef g(substring='abcde'):\n    s = \"xyzabcde123\"\n    return s\nassert f(g())\n",
        "idx_generation": 294,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[3, 6, 9, 12, 15], upper_bound=1000) -> bool:\n    \"\"\"Check if n is divisible by all numbers in the list and is less than or equal to the upper_bound\"\"\"\n    return all((n % i == 0 for i in lst)) and 0 < n <= upper_bound\ndef g(lst=[3, 6, 9, 12, 15], upper_bound=1000):\n    ans = 1\n    for i in lst:\n        (m, n) = (min(i, ans), max(i, ans))\n        while m > 0:\n            (m, n) = (n % m, m)\n        ans *= i // n\n    return ans\nassert f(g())\n",
        "idx_generation": 424,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], n=2, target=10) -> bool:\n    \"\"\"Find a pair of numbers in the given list that sums up to the target\"\"\"\n    return any((x + y) == target for x in lst for y in lst if x != y)\ndef g(n=2, target=10):\n    return [2, 4, 6, 8, 10, 12, 14, 16]\nassert f(g())\n",
        "idx_generation": 398,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sequence: List[int], target=5) -> bool:\n    \"\"\"Check if the target value is present in the sequence\"\"\"\n    return target in sequence\ndef g(target=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 113,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=3) -> bool:\n    \"\"\"Check if the given string is a palindrome and has at least k vowels.\"\"\"\n    vowels = set(\"aeiou\")\n    s = s.lower()\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return s == s[::-1] and count >= k\n\ndef g(s=\"level\"):\n    return s\n\nassert f(g(), k=2)\n",
        "idx_generation": 295,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\ndef f(matrix: List[List[int]], target_row=0, target_col=0) -> bool:\n    \"\"\"Check if the element at the target_row and target_col index in the matrix is a prime number\"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return is_prime(matrix[target_row][target_col])\n\ndef g(target_row=0, target_col=0):\n    matrix = np.array([[2, 4, 6], [3, 7, 9], [5, 8, 10]])\n    return matrix.tolist()\n\nassert f(g())\n",
        "idx_generation": 437,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to the target_sum\"\"\"\n    left = 0\n    right = len(arr) - 1\n    arr.sort()\n    while left < right:\n        curr_sum = arr[left] + arr[right]\n        if curr_sum == target_sum:\n            return True\n        elif curr_sum < target_sum:\n            left += 1\n        else:\n            right -= 1\n    return False\n\ndef g(target_sum=100):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n",
        "idx_generation": 399,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], threshold=10) -> bool:\n    \"\"\"Check if all the numbers in the list are greater than or equal to the given threshold.\"\"\"\n    for num in numbers:\n        if num < threshold:\n            return False\n    return True\n\ndef g(threshold=10):\n    return [12, 15, 18, 20]\n\nassert f(g())\n",
        "idx_generation": 113,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(strings: List[str], target_character='a') -> bool:\n    \"\"\"Check if the target_character is present in any of the strings in the list.\"\"\"\n    return any(target_character in string for string in strings)\n\ndef g():\n    return [\"apple\", \"banana\", \"cherry\", \"durian\"]\nassert f(g())\n",
        "idx_generation": 299,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if any number in the list is divisible by n\"\"\"\n    return any(num % n == 0 for num in nums)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[-1]\nassert f(g())\n\n",
        "idx_generation": 438,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[List[int]]:\n    \"\"\"Find all pairs of numbers in the list whose product is equal to the target.\"\"\"\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                pairs.append([nums[i], nums[j]])\n    return pairs\n\ndef g(target=12):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g(), 12) == [[2, 6], [3, 4]]\n",
        "idx_generation": 404,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: float, a=4975) -> bool:\n    \"\"\"Find a number that when multiplied by x is equal to a.\"\"\"\n    return x * a == a\n\ndef g(a=4975):\n    return 1\n\nassert f(g())\n",
        "idx_generation": 115,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(inds: List[int], string='abcdedefghij') -> bool:\n    \"\"\"Find increasing indices to make the substring \"def\" (with a surprise twist)\"\"\"\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'def'\ndef g(string='abcdedefghij'):\n    target = 'def'\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans\nassert f(g())\n",
        "idx_generation": 301,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=14, b=50, c=47, d=2) -> bool:\n    \"\"\"Find n such that n + a == (the product of the first c integers) * (b + d)\"\"\"\n    return n + a == (b + d) * (1 if c == 0 else c * (c + 1) // 2)\ndef g(a=14, b=50, c=47, d=2):\n    return -(a - (b + d) * (1 if c == 0 else c * (c + 1) // 2))\nassert f(g())\n",
        "idx_generation": 441,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that multiplies up to the target value.\"\"\"\n    return any(nums[i] * nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 405,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are three numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 116,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str, letter='a') -> bool:\n    \"\"\"Check if the letter is present in the word\"\"\"\n    return letter in word\ndef g(word='programming', letter='a'):\n    return word\nassert f(g())\n\n",
        "idx_generation": 302,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with all elements being prime numbers.\"\"\"\n    for i in range(len(arr)):\n        subarray_sum = 0\n        for j in range(i, len(arr)):\n            subarray_sum += arr[j]\n            if is_prime(subarray_sum):\n                return True\n    return False\n\ndef g():\n    return [2, 4, 5, 9, 7]\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nassert f(g())\n",
        "idx_generation": 442,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[10, 20, 30, 40, 50, 60]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 410,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there are four numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                for l in range(k+1, len(nums)):\n                    if nums[i] + nums[j] + nums[k] + nums[l] == target:\n                        return True\n    return False\n\ndef g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 116,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='abcdefghi', target='') -> bool:\n    \"\"\"Find the two slice indices that give the specific target in string s\"\"\"\n    (i, j) = inds\n    return s[i:j] == target\ndef g(s='abcdefghi', target=''):\n    from itertools import product\n    for (i, j) in product(range(-len(s) - 1, len(s) + 1), repeat=2):\n        try:\n            if s[i:j] == target:\n                return [i, j]\n        except (IndexError, ValueError):\n            pass\nassert f(g())\n",
        "idx_generation": 306,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(lst: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with all elements being perfect cubes.\"\"\"\n    for i in range(len(lst)):\n        subarray_product = 1\n        for j in range(i, len(lst)):\n            subarray_product *= lst[j]\n            if math.isqrt(subarray_product) ** 3 == subarray_product:\n                return True\n    return False\n\ndef g():\n    return [2, 8, 27, 64, 5]\n\nassert f(g())\n",
        "idx_generation": 445,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_number=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target_number:\n                return True\n    return False\n\ndef g(target_number=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 412,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if the target value is present in the list 'nums'.\"\"\"\n    return target in nums\n\ndef g(nums=[1, 3, 5, 7, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 117,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom collections import Counter\n\ndef f(sentence: str, letters='python') -> bool:\n    \"\"\"Given a sentence and a string of letters, check if the sentence contains all the letters at least once\"\"\"\n    sentence = sentence.lower()\n    letter_counts = Counter(sentence)\n    for letter in letters:\n        if letter not in letter_counts:\n            return False\n    return True\n\ndef g(sentence='I love Python programming'):\n    return sentence\n\nassert f(g())\n",
        "idx_generation": 307,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: str, current_year: int = 2022) -> bool:\n    \"\"\"Check if the given date is in the future from the current year.\"\"\"\n    given_date = datetime.datetime.strptime(date, \"%Y-%m-%d\")\n    return given_date.year > current_year\n\ndef g(current_year=2022):\n    date = \"2023-01-05\"\n    return date\n\nassert f(g())\n",
        "idx_generation": 448,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(tour: List[List[int]], m=8, n=8) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == m*n\n\ndef g(m=8, n=8):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == m*n:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n\n",
        "idx_generation": 412,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if the target value is greater than all the numbers in the list 'nums'.\"\"\"\n    return all((num < target for num in nums))\n\ndef g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 117,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, c='e') -> bool:\n    \"\"\"Check if the given character is present in the string\"\"\"\n    return c in s\n\ndef g(c='e'):\n    return \"Hello World!\"\n\nassert f(g())\n",
        "idx_generation": 308,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, m=3) -> bool:\n    \"\"\"Check if the given number is a power of m.\"\"\"\n    if num == 0:\n        return False\n    while num % m == 0:\n        num /= m\n    return num == 1\n\ndef g(m=3):\n    return m ** 5\n\nassert f(g())\n",
        "idx_generation": 465,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to target_sum\"\"\"\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_sum=20):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n",
        "idx_generation": 413,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, n=3) -> bool:\n    \"\"\"Check if the sum of the digits of x is divisible by n\"\"\"\n    digit_sum = sum(int(digit) for digit in str(x))\n    return digit_sum % n == 0\n\ndef g(n=3):\n    return int(''.join(str(i) for i in range(1, n+1)))\nassert f(g())\n",
        "idx_generation": 117,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(words: List[str], prefix=\"\") -> bool:\n    \"\"\"Determine if there exists a word in the given list that starts with the given prefix.\"\"\"\n    return any(word.startswith(prefix) for word in words)\ndef g(prefix=\"pre\"):\n    return [\"prefix\", \"preach\", \"present\", \"post\", \"proclaim\"]\nassert f(g())\n\n",
        "idx_generation": 309,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=14, b=50, c=47) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c odd integers)\"\"\"\n    return n + a == sum([b * (2*i+1) for i in range(c)])\ndef g(a=14, b=50, c=47):\n    return -a + sum([b * (2*i+1) for i in range(c)])\nassert f(g())\n",
        "idx_generation": 465,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"Check if there are two unique numbers in the list that add up to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target: int = 10):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 413,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, month=3) -> bool:\n    \"\"\"Check if the given date falls on the specified month\n    - date: datetime.date object representing the date\n    - month: integer representing the month\"\"\"\n\n    return date.month == month\n\ndef g(month=3):\n    return datetime.date(2022, 3, 23)\n\nassert f(g())\n",
        "idx_generation": 118,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='abc') -> bool:\n    \"\"\"Check if the target string is a subsequence of the given string.\"\"\"\n    i = 0\n    for char in s:\n        if char == target[i]:\n            i += 1\n            if i == len(target):\n                return True\n    return False\n\ndef g(target='abc'):\n    return 'abcdef'\n\nassert f(g())\n",
        "idx_generation": 313,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if it is possible to obtain the target sum by adding a subset of the given numbers in the list.\"\"\"\n    n = len(arr)\n    for i in range(1 << n):\n        subset_sum = sum(arr[j] for j in range(n) if (i & (1 << j)) != 0)\n        if subset_sum >= target:\n            return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 473,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target=0) -> bool:\n    \"\"\"Check if the target number is present in the given list.\"\"\"\n    return target in lst\n\ndef g(target=0):\n    return [i for i in range(10)]\n\nassert f(g())\n",
        "idx_generation": 415,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport datetime\n\ndef f(date: datetime.date, day=23) -> bool:\n    \"\"\"Check if the given date falls on the specified day\n    - date: datetime.date object representing the date\n    - day: integer representing the day\"\"\"\n\n    return date.day == day\n\ndef g(day=23):\n    return datetime.date(2022, 3, 23)\n\nassert f(g())\n",
        "idx_generation": 118,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Check if the given string contains the substring\"\"\"\n    return substring in string\n\ndef g(substring='abc'):\n    string = \"xyzabc123\"\n    return string\n\nassert f(g())\n",
        "idx_generation": 315,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray where the sum of all elements is a prime number.\"\"\"\n    for i in range(len(arr)):\n        subarray_sum = 0\n        for j in range(i, len(arr)):\n            subarray_sum += arr[j]\n            if is_prime(subarray_sum):\n                return True\n    return False\n\ndef g():\n    return [2, 3, 5, 7, 11, 13]\n\ndef is_prime(n: int) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nassert f(g())\n",
        "idx_generation": 475,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target=0) -> List[int]:\n    \"\"\"Return a list containing the indices of all occurrences of the target number in the given list\"\"\"\n    indices = []\n    for i in range(len(nums)):\n        if nums[i] == target:\n            indices.append(i)\n    return indices\n\ndef g(target=0):\n    return [1, 0, 3, 0, 5, 0, 7, 0, 9]\n\nassert f(g()) == [1, 3, 5, 7]\n",
        "idx_generation": 417,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find a triplet of numbers from the list that sums up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  # A list of numbers\nassert f(g())\n\n",
        "idx_generation": 122,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list is a palindrome, considering only alphanumeric characters and ignoring cases.\"\"\"\n    alphanumeric = [c.lower() for c in nums if c.isalnum()]\n    return alphanumeric == alphanumeric[::-1]\ndef g(nums=\"A man, a plan, a canal, Panama\"):\n    return [c for c in nums]\n\nassert f(g())\n",
        "idx_generation": 316,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray where the sum of all elements is a perfect square.\"\"\"\n    for i in range(len(arr)):\n        subarray_sum = 0\n        for j in range(i, len(arr)):\n            subarray_sum += arr[j]\n            if is_perfect_square(subarray_sum):\n                return True\n    return False\n\ndef g():\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\ndef is_perfect_square(n: int) -> bool:\n    \"\"\"Check if a number is a perfect square.\"\"\"\n    return int(n**0.5)**2 == n\n\nassert f(g())\n",
        "idx_generation": 475,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(seq: List[int], n=100, length=50) -> bool:\n    \"\"\"Given a sequence of integers, find if there exists a subsequence that adds up to a given value n\"\"\"\n    if sum(seq) < n:\n        return False\n    if sum(seq) == n:\n        return True\n\n    for i in range(len(seq)):\n        for j in range(i + 1, len(seq) + 1):\n            if sum(seq[i:j]) == n:\n                return True\n    return False\n\ndef g(n=100, length=50):\n    return [i for i in range(1, length+1)]\n\nassert f(g())\n",
        "idx_generation": 419,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], target_length=10) -> bool:\n    \"\"\"Check if there are two strings in the list 'strings' that have a combined length greater than the target length.\"\"\"\n    for i in range(len(strings)):\n        for j in range(i + 1, len(strings)):\n            if len(strings[i]) + len(strings[j]) > target_length:\n                return True\n    return False\n\ndef g(strings=['apple', 'banana', 'cherry', 'date']):\n    return strings\n\nassert f(g())\n",
        "idx_generation": 123,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, word='programming') -> bool:\n    \"\"\"Check if the word is spelled correctly in the string, ignoring case\"\"\"\n    return word.lower() in s.lower()\n\ndef g(word='programming'):\n    return \"Welcome to the world of programming languages!\"\n\nassert f(g())\n",
        "idx_generation": 317,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=93252338) -> bool:\n    \"\"\"Check if the given number is divisible by a\"\"\"\n    return n % a == 0\ndef g(a=93252338):\n    return a * 2\nassert f(g())\n",
        "idx_generation": 477,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list such that their product is equal to the target.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        if num != 0 and target % num == 0:\n            complement = target // num\n            if complement in num_set:\n                return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g(), 12)\n\n",
        "idx_generation": 419,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[float], target_sum=100) -> bool:\n    \"\"\"Determine if there are three numbers in the list 'numbers' that sum up to a value greater than the target sum.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            for k in range(j + 1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] > target_sum:\n                    return True\n    return False\n\ndef g(numbers=[10.5, 20.3, 30.2, 40.6, 50.1]):\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 123,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='abcdefghi', target='') -> bool:\n    \"\"\"Find the two slice indices that give the specific target in string s\"\"\"\n    (i, j) = inds\n    return s[i:j] == target\ndef g(s='abcdefghi', target=''):\n    from itertools import product\n    for (i, j) in product(range(-len(s) - 1, len(s) + 1), repeat=2):\n        try:\n            if s[i:j] == target:\n                return [i, j]\n        except (IndexError, ValueError):\n            pass\nassert f(g())\n",
        "idx_generation": 321,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray where the sum of all elements is a prime number.\"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    for i in range(len(arr)):\n        subarray_sum = 0\n        for j in range(i, len(arr)):\n            subarray_sum += arr[j]\n            if is_prime(subarray_sum):\n                return True\n    return False\n\ndef g():\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n\nassert f(g())\n",
        "idx_generation": 479,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target number.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target: int):\n    return [1, 3, 5, 7, 9], target\n\nassert f(*g(12))\n",
        "idx_generation": 423,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 124,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='abcdefghi', target='') -> bool:\n    \"\"\"Find the two slice indices that give the specific target in string s\"\"\"\n    (i, j) = inds\n    return s[i:j] == target\ndef g(s='abcdefghi', target=''):\n    from itertools import product\n    for (i, j) in product(range(-len(s) - 1, len(s) + 1), repeat=2):\n        try:\n            if s[i:j] == target:\n                return [i, j]\n        except (IndexError, ValueError):\n            pass\nassert f(g())\n",
        "idx_generation": 321,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=3, c=5) -> bool:\n    \"\"\"Check if the given number n is divisible by a, b, and c\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\ndef g(a=2, b=3, c=5):\n    return a * b * c\n\nassert f(g())\n",
        "idx_generation": 481,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target=10):\n    return [n for n in range(1, target+1)]\n\nassert f(g())\n\n",
        "idx_generation": 425,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 124,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(inds: List[int], s='abcdefghi', target='') -> bool:\n    \"\"\"Find the two slice indices that give the specific target in string s\"\"\"\n    (i, j) = inds\n    return s[i:j] == target\ndef g(s='abcdefghi', target=''):\n    from itertools import product\n    for (i, j) in product(range(-len(s) - 1, len(s) + 1), repeat=2):\n        try:\n            if s[i:j] == target:\n                return [i, j]\n        except (IndexError, ValueError):\n            pass\nassert f(g())\n",
        "idx_generation": 321,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=4, b=6, c=8) -> bool:\n    \"\"\"Check if the given number n is divisible by a, b, and c\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\ndef g(a=4, b=6, c=8):\n    return a * b * c\n\nassert f(g())\n\n",
        "idx_generation": 483,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric along the main diagonal\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 426,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Given a list of integers, determine if there exists a pair of numbers in the list whose sum is equal to the target number.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=5):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 124,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Check if the target string can be formed by concatenating the words in the list in any order.\"\"\"\n    return ''.join(words) == target\n\ndef g(target='python'):\n    return ['py', 'th', 'on']\n\nassert f(g())\n",
        "idx_generation": 324,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=10, c=15) -> bool:\n    \"\"\"Check if the given number n is divisible by a, b, and c\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\ndef g(a=5, b=10, c=15):\n    return a * b * c\n\nassert f(g())\n",
        "idx_generation": 485,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=4, b=7) -> bool:\n    \"\"\"Check if the sum of the first a multiples of b is greater than or equal to n.\"\"\"\n    return sum([i*b for i in range(1, a+1)]) >= n\n\ndef g(a=4, b=7):\n    return sum([i*b for i in range(1, a+1)])\n\nassert f(g())\n",
        "idx_generation": 426,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[10, 20, 30, 40]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 125,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\n\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Check if the list contains a word that is equal to the target word\"\"\"\n    return target in words\n\ndef g(target='python'):\n    return ['hello', 'world', 'python', 'programming']\n\nassert f(g())\n",
        "idx_generation": 325,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=6, c=9) -> bool:\n    \"\"\"Check if the given number n is divisible by a, b, and c\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\ndef g(a=3, b=6, c=9):\n    return a * b * c\n\nassert f(g())\n",
        "idx_generation": 488,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target value.\"\"\"\n    complements = set()\n    for num in nums:\n        if num in complements:\n            return True\n        complements.add(target - num)\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 430,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list whose product is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[2, 4, 5, 3]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 125,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], target='apple') -> bool:\n    \"\"\"Check if the target string is present in the list of strings\"\"\"\n    return any((target in string for string in strings))\ndef g(target='apple'):\n    return ['banana', 'orange', 'apple', 'grapefruit']\nassert f(g())\n",
        "idx_generation": 329,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=4, c=8) -> bool:\n    \"\"\"Check if the given number n is divisible by a, b, and c\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\ndef g(a=2, b=4, c=8):\n    return a * b * c\n\nassert f(g())\n",
        "idx_generation": 488,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]], target=0) -> bool:\n    \"\"\"Find whether the target number is present in the 2D array\"\"\"\n    for row in arr:\n        if target in row:\n            return True\n    return False\n\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target]]\n\nassert f(g())\n",
        "idx_generation": 432,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, factors=[2, 3, 5, 7, 11]) -> bool:\n    \"\"\"Check if a given number has any of the given factors\"\"\"\n    return any(n % factor == 0 for factor in factors)\ndef g(factors=[2, 3, 5, 7, 11]):\n    return 14\nassert f(g())\n",
        "idx_generation": 125,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 330,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=7, b=14, c=21) -> bool:\n    \"\"\"Check if the given number n is divisible by a, b, and c\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\ndef g(a=7, b=14, c=21):\n    return a * b * c\n\nassert f(g())\n",
        "idx_generation": 488,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is symmetric\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 434,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=4, c=6) -> bool:\n    \"\"\"Check if n is equal to the sum of the first c odd integers multiplied by b and added to a\"\"\"\n    return n == a + sum([b * (2*i - 1) for i in range(1, c+1)])\ndef g(a=2, b=4, c=6):\n    return a + sum([b * (2*i - 1) for i in range(1, c+1)])\nassert f(g())\n",
        "idx_generation": 126,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=700, b=900) -> bool:\n    \"\"\"Check if the given x, a, and b satisfy the equation x + a = b.\"\"\"\n    return x + a == b\ndef g(a=700, b=900):\n    return b - a\nassert f(g())\n",
        "idx_generation": 494,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that add up to the target value\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=5):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 434,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list whose sum is divisible by the target value.\"\"\"\n    return any(((numbers[i] + numbers[j]) % target == 0) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\nassert f(g())\n",
        "idx_generation": 127,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if a string is a palindrome\"\"\"\n    return string == string[::-1]\ndef g():\n    return \"racecar\"\nassert f(g())\n",
        "idx_generation": 342,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(nums: List[int]):\n    return nums\n\nassert f(g([2, 4, 6, 8, 10]), target=12)\n",
        "idx_generation": 434,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix (2D list), check if it is a symmetric matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 129,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, a=['cat', 'dog', 'bird'], b=['tree', 'fly', 'dot']) -> bool:\n    \"\"\"Check if a word from list a is a substring of s and a word from list b is a substring of s\"\"\"\n    return any((word in s for word in a)) and any((word in s for word in b))\n\ndef g(a=['cat', 'dog', 'bird'], b=['tree', 'fly', 'dot']):\n    return \"The quick brown fox jumps over the lazy \" + ' '.join(a + b)\n\nassert f(g())\n",
        "idx_generation": 343,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target sum\"\"\"\n    s = set()\n    for num in numbers:\n        if target_sum - num in s:\n            return True\n        s.add(num)\n    return False\n\ndef g(target_sum=20):\n    return [5, 10, 15, 25, 30]\n\nassert f(g())\n",
        "idx_generation": 442,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=10) -> bool:\n    \"\"\"Check if the given number is divisible by m but not by m-1.\"\"\"\n    return n % m == 0 and n % (m-1) != 0\n\ndef g(m=10):\n    return 2 * m\n\nassert f(g())\n",
        "idx_generation": 129,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if the given substring exists in the given string\"\"\"\n    return substr in s\ndef g(substr='python'):\n    return substr\nassert f(g())\n",
        "idx_generation": 344,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target_sum=100) -> bool:\n    \"\"\"Find a pair of numbers in the list that adds up to the target_sum\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target_sum:\n                return True\n    return False\ndef g(lst=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target_sum=100):\n    return lst\nassert f(g())\n",
        "idx_generation": 445,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list whose difference is divisible by the target value.\"\"\"\n    return any(((numbers[i] - numbers[j]) % target == 0) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target=10):\n    numbers = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return numbers\nassert f(g())\n",
        "idx_generation": 129,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrs=['a', 'b', 'c']) -> bool:\n    \"\"\"Check if any substring in the list is present in the given string.\"\"\"\n    return any(sub in s for sub in substrs)\n\ndef g(substrs=['a', 'b', 'c']):\n    return \"abc\"\n\nassert f(g())\n",
        "idx_generation": 346,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], n=5) -> bool:\n    \"\"\"Check if the given number n is present in the list\"\"\"\n    return n in nums\n\ndef g(n=5):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 449,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=50) -> bool:\n    \"\"\"Check if any two numbers in the list can be multiplied together to equal the target value.\"\"\"\n    return any(x * y == target for x in arr for y in arr)\ndef g(target=50):\n    return [5, 10, 15, 20, 25, 30]\nassert f(g())\n",
        "idx_generation": 131,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring: str = 'abc') -> bool:\n    \"\"\"Check if the given string contains the given substring\"\"\"\n    return substring in s\ndef g(substring: str = 'abc'):\n    return 'xyz' + substring + '123'\nassert f(g())\n",
        "idx_generation": 349,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], value=7) -> bool:\n    \"\"\"Given an array of integers and a target value, determine if there exists a pair of elements in the array whose sum is equal to the target value.\"\"\"\n    n = len(arr)\n    visited = set()\n    for i in range(n):\n        complement = value - arr[i]\n        if complement in visited:\n            return True\n        visited.add(arr[i])\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5, 6], value=7):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 449,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, lst=[1, 3, 5, 7, 9]) -> bool:\n    \"\"\"Check if x is less than the minimum value in the list lst\"\"\"\n    return x < min(lst)\ndef g(lst=[1, 3, 5, 7, 9]):\n    return lst[0] - 1\nassert f(g())\n",
        "idx_generation": 131,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\ndef f(s: str, big_str='fatextemedyrotichipicecojon') -> bool:\n    \"\"\"Find a string whose characters are in the same order as in big_str\"\"\"\n    return re.search(s, big_str) is not None\ndef g(big_str='fatextemedyrotichipicecojon'):\n    return big_str\nassert f(g())\n",
        "idx_generation": 353,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with all elements being Fibonacci numbers.\"\"\"\n    fibonacci = [0, 1]\n    while fibonacci[-1] <= max(arr):\n        fibonacci.append(fibonacci[-1] + fibonacci[-2])\n\n    for i in range(len(arr)):\n        subarray_sum = 0\n        for j in range(i, len(arr)):\n            subarray_sum += arr[j]\n            if subarray_sum in fibonacci:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 5, 8, 13, 21]\n\nassert f(g())\n",
        "idx_generation": 449,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if the product of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] * nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_sum=10):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n",
        "idx_generation": 131,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substring='hello') -> bool:\n    \"\"\"Check if the given substring is present in the string s\"\"\"\n    return substring in s\ndef g(substring='hello'):\n    return substring\n\nassert f(g())\n",
        "idx_generation": 355,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> int:\n    \"\"\"Given a list of numbers, find the index of the first pair of numbers that add up to the target sum\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return i\n    return -1\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 0\n\n",
        "idx_generation": 450,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if the division of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] / nums[j] == target_sum or nums[j] / nums[i] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_sum=10):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n",
        "idx_generation": 131,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='python') -> bool:\n    \"\"\"Check if a given substring exists in the given string\"\"\"\n    return substring in string\n\ndef g(substring='python'):\n    return \"I love python programming\"\n\nassert f(g())\n",
        "idx_generation": 355,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> List[int]:\n    \"\"\"Given a list of numbers, find all pairs of numbers that add up to the target sum\"\"\"\n    pairs = []\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                pairs.append([numbers[i], numbers[j]])\n    return pairs\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == [[1, 9], [2, 8], [3, 7], [4, 6]]\n\n",
        "idx_generation": 450,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(n: int, matrix: List[List[int]] = [[10, 20], [30, 40], [50, 60]]) -> bool:\n    \"\"\"Check if n exists in the matrix\"\"\"\n    for row in matrix:\n        if n in row:\n            return True\n    return False\ndef g(matrix: List[List[int]] = [[10, 20], [30, 40], [50, 60]]):\n    return matrix[0][1]\nassert f(g())\n\n",
        "idx_generation": 132,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(text: str, pattern='abc') -> bool:\n    \"\"\"Check if the pattern is the first substring of length 3 in the given text\"\"\"\n    return text[:3] == pattern\ndef g(pattern='abc'):\n    return pattern + \"defg\"\nassert f(g())\n",
        "idx_generation": 356,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> int:\n    \"\"\"Given a list of numbers, find the count of all pairs of numbers that add up to the target sum\"\"\"\n    count = 0\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                count += 1\n    return count\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == 4\n\n",
        "idx_generation": 450,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list whose sum is equal to the target value.\"\"\"\n    return any((numbers[i] + numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\n\ndef g(target=20):\n    numbers = [2, 4, 6, 8, 10, 12, 14, 16, 18]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 132,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring: str = 'abc') -> bool:\n    \"\"\"Check if the given string contains the given substring\"\"\"\n    return substring in string\n\ndef g(substring: str = 'abc'):\n    return 'xyz' + substring + '123'\n\nassert f(g())\n",
        "idx_generation": 367,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Given a list of integers, return True if the list is sorted in non-decreasing order, False otherwise.\"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == True\n\n",
        "idx_generation": 450,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=25) -> bool:\n    \"\"\"Check if the difference between any two numbers in the list is equal to the target value.\"\"\"\n    return any((abs(numbers[i] - numbers[j]) == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\n\ndef g(target=25):\n    numbers = [10, 15, 20, 25, 30, 35, 40, 45, 50]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 132,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    return any(target - num in numbers for num in numbers)\n\ndef g(target=50):\n    return [10, 20, 30, 40, 50, 60]\n\nassert f(g())\n",
        "idx_generation": 372,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"Given a list of integers, return the maximum product of any three numbers in the list.\"\"\"\n    nums.sort()\n    return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == 60\n\n",
        "idx_generation": 450,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is divisible by k.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if (nums[i] + nums[j]) % k == 0:\n                return True\n    return False\n\ndef g(k=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 133,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substrings=['abc', 'def', 'ghi', 'jkl']) -> bool:\n    \"\"\"Check if all substrings are present in the string in reverse order\"\"\"\n    return all((sub[::-1] in s for sub in substrings))\ndef g(substrings=['abc', 'def', 'ghi', 'jkl']):\n    return ''.join(sub[::-1] for sub in substrings)\nassert f(g())\n",
        "idx_generation": 375,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target value.\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    nums = [1, 3, 5, 7, 9]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 450,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target.\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 134,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_len=5) -> bool:\n    \"\"\"Check if there exists a word in the list that has a length equal to the target_len and the sum of the ASCII \n    values of its characters is divisible by 10.\"\"\"\n    return any(len(word) == target_len and sum(ord(c) for c in word) % 10 == 0 for word in words)\n\ndef g(target_len=5):\n    return ['hello', 'world', 'python', 'puzzle', 'apple']\n\nassert f(g())\n",
        "idx_generation": 377,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the target integer exists in a list of integers. The list is sorted in non-decreasing order.\"\"\"\n    left = 0\n    right = len(nums) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return True\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\n\ndef g(nums=[1, 3, 5, 7, 9, 11, 13, 15], target=5):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 451,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=20, c=30) -> bool:\n    \"\"\"Check if the sum of three numbers is equal to a given number.\"\"\"\n    return n == a + b + c\ndef g(a=10, b=20, c=30):\n    return a + b + c\nassert f(g())\n",
        "idx_generation": 135,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, k=2) -> bool:\n    \"\"\"Check if the string has more than k vowels\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count > k\ndef g(k=2):\n    return \"Hello World\"\nassert f(g())\n",
        "idx_generation": 379,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sum up to the target\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i + 1, len(nums)))\n\ndef g(target=50):\n    return [15, 20, 25, 30]\n\nassert f(g())\n",
        "idx_generation": 452,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 135,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='abc') -> bool:\n    \"\"\"Check if the string contains all the characters from the target string in order.\"\"\"\n    i = 0\n    for char in s:\n        if char == target[i]:\n            i += 1\n            if i == len(target):\n                return True\n    return False\ndef g(s='aabbcc'):\n    return s\nassert f(g())\n",
        "idx_generation": 380,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=200) -> bool:\n    \"\"\"Check if there is a triple of numbers in the list that sum up to the target\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i + 1, len(nums)) for k in range(j + 1, len(nums)))\n\ndef g(target=200):\n    return [50, 60, 70, 80]\n\nassert f(g())\n",
        "idx_generation": 452,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=50) -> bool:\n    \"\"\"Check if there are three numbers in the list whose product is equal to the target value\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] * numbers[j] * numbers[k] == target:\n                    return True\n    return False\ndef g(target=50):\n    return [2, 5, 10, 4, 3, 1, 6, 7, 8]\nassert f(g())\n",
        "idx_generation": 136,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Check if the given list of words contains the target word 'python'.\"\"\"\n    return any((word == target for word in words))\ndef g():\n    words = ['java', 'c++', 'javascript', 'python', 'ruby']\n    return words\nassert f(g())\n",
        "idx_generation": 381,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there is a number in the list that is greater than the target\"\"\"\n    for num in nums:\n        if num > target:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 458,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [target//2, target//2]\nassert f(g())\n",
        "idx_generation": 136,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Check if the target string can be formed by concatenating the words in the list in any order.\"\"\"\n    return ''.join(words) == target\n\ndef g(target='python'):\n    return ['py', 'th', 'on']\n\nassert f(g())\n",
        "idx_generation": 383,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [2, 4, 6, 8]\n\nassert f(g())\n",
        "idx_generation": 459,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Check if the given matrix contains a row or column that sums up to the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) == target:\n            return True\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum == target:\n            return True\n    return False\ndef g(target=15):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "idx_generation": 138,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: str, substr='abc') -> bool:\n    \"\"\"Check if a specific substring is present in a given string.\"\"\"\n    return substr in x\ndef g(substr='abc'):\n    return 'def' + substr + 'ghi'\nassert f(g())\n",
        "idx_generation": 391,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in non-decreasing order.\"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\n\ndef g():\n    return [1, 2, 2, 3, 4, 5, 6, 7]\n\nassert f(g())\n",
        "idx_generation": 462,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target.\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\n\ndef g(target=15):\n    return [n for n in range(1, target+1)]\n\nassert f(g())\n",
        "idx_generation": 138,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\n\ndef f(string: str, target='abc') -> bool:\n    \"\"\"Check if the target string is a substring of the given string\"\"\"\n    return target in string\n\ndef g(target='abc'):\n    return 'abcdefg'\n\nassert f(g()) == True\n",
        "idx_generation": 397,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], t=500, n=5) -> bool:\n    \"\"\"Find the number of values that are less than a target and at least n values are greater than or equal to the target\"\"\"\n    count = 0\n    greater_count = 0\n    for v in x:\n        if v < t:\n            count += 1\n        if v >= t:\n            greater_count += 1\n    return count >= n and greater_count >= n\n\ndef g(t=500, n=5):\n    return [t-1] * n + [t] * n\n\nassert f(g())\n",
        "idx_generation": 462,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Check if there are two numbers in the list whose product is equal to the target.\"\"\"\n    return any(arr[i] * arr[j] == target for i in range(len(arr)) for j in range(i+1, len(arr)))\n\ndef g(target=20):\n    return [n for n in range(1, target+1)]\n\nassert f(g())\n",
        "idx_generation": 138,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(words: List[str], target='apple') -> bool:\n    \"\"\"Check if the target string is a substring of any of the words in the list.\"\"\"\n    return any((target in word) for word in words)\n\ndef g(target='apple'):\n    words = ['pineapple', 'banana', 'orange', 'grape', 'watermelon']\n    return words\n\nassert f(g())\n",
        "idx_generation": 408,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"Given a list of integers and a target number n, determine if there exists a pair of numbers in the list whose product is equal to n.\n    Return True if such a pair exists, otherwise return False.\"\"\"\n    num_set = set()\n    for num in nums:\n        if num != 0 and n % num == 0 and n // num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums=[2, 4, 6, 8, 10], n=48):\n    return n, nums\n\nassert f(*g())\n",
        "idx_generation": 464,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if any pair of numbers in a list adds up to a given target\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\ndef g(target=10):\n    numbers = [2, 5, 8, 3, 6, 1]\n    return numbers\nassert f(g())\n",
        "idx_generation": 138,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, char='a') -> bool:\n    \"\"\"Check if the given character is present in the string.\"\"\"\n    return char in s\n\ndef g(char='a'):\n    return 'programming'\n\nassert f(g())\n",
        "idx_generation": 410,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int = 50) -> bool:\n    \"\"\"Check if there are four numbers in the list that add up to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                for l in range(k + 1, len(nums)):\n                    if nums[i] + nums[j] + nums[k] + nums[l] == target:\n                        return True\n    return False\n\ndef g(target: int = 50):\n    return [5, 10, 15, 20, 25, 30, 35, 40, 45]\n\nassert f(g())\n",
        "idx_generation": 466,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=0):\n    nums = [-1, 0, 1, 2, -1, -4]\n    return nums\nassert f(g())\n",
        "idx_generation": 139,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target_character='a') -> bool:\n    \"\"\"Check if the target character is present at least twice in the string.\"\"\"\n    return s.count(target_character) >= 2\n\ndef g(target_character='a'):\n    return 'banana'\n\nassert f(g())\n",
        "idx_generation": 412,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"Check if the given number n is present in the list.\"\"\"\n    return n in nums\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(3, g())\n",
        "idx_generation": 470,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there is a subarray in the list that sums up to the target\"\"\"\n    for i in range(len(nums)):\n        current_sum = nums[i]\n        if current_sum == target:\n            return True\n        for j in range(i+1, len(nums)):\n            current_sum += nums[j]\n            if current_sum == target:\n                return True\n            elif current_sum > target:\n                break\n    return False\ndef g(target=5):\n    nums = [1, 2, 3, 4, 5]\n    return nums\nassert f(g())\n",
        "idx_generation": 139,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_word='python') -> bool:\n    \"\"\"Check if the target_word is present in the list and the length of the target_word is greater than or equal to 5\"\"\"\n    return target_word in words and len(target_word) >= 5\n\ndef g(target_word='python'):\n    return ['java', 'c++', 'python', 'javascript', 'ruby']\n\nassert f(g())\n",
        "idx_generation": 414,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in non-decreasing order.\"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 470,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(matrix: List[List[int]], n=3, target=15) -> bool:\n    \"\"\"Determine if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of every row, column, and diagonal is the same.\"\"\"\n    rows = [sum(row) for row in matrix]\n    cols = [sum(col) for col in zip(*matrix)]\n    diag1 = sum(matrix[i][i] for i in range(n))\n    diag2 = sum(matrix[i][n-i-1] for i in range(n))\n    return any(sum_val == target for sum_val in rows + cols + [diag1, diag2])\ndef g(n=3, target=15):\n    from itertools import permutations\n    possible_nums = list(range(1, n**2+1))\n    for perm in permutations(possible_nums):\n        matrix = [perm[i:i+n] for i in range(0, n**2, n)]\n        if f(matrix):\n            return matrix\n    assert False, f\"No magic square found for n={n}\"\nassert f(g())\n",
        "idx_generation": 139,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], letter='a') -> bool:\n    \"\"\"Check if any word in the list has the given letter as its last character.\"\"\"\n    return any(word[-1] == letter for word in words)\ndef g(letter='a'):\n    return ['apple', 'banana', 'cherry', 'mango']\nassert f(g())\n",
        "idx_generation": 421,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"Check if the given number n is the minimum element in the list.\"\"\"\n    return n == min(nums)\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(1, g())\n",
        "idx_generation": 470,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exists two distinct numbers in the list whose sum is equal to the target number\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=5):\n    return [i for i in range(target)]\nassert f(g())\n",
        "idx_generation": 140,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(strings: List[str], substring='') -> bool:\n    \"\"\"Check if any of the strings in the list contain the specified substring.\"\"\"\n    for s in strings:\n        if substring in s:\n            return True\n    return False\n\ndef g(substring=''):\n    return ['apple', 'banana', 'cherry', 'durian'], substring\n\nassert f(*g('nan'))\n",
        "idx_generation": 423,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(num: int, divisor: int=2) -> bool:\n    \"\"\"Check if the given number is divisible by the given divisor.\"\"\"\n    return num % divisor == 0\n\ndef g(num: int=10, divisor: int=2):\n    return num\n\nassert f(g())\n",
        "idx_generation": 470,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int], target_sum=100) -> bool:\n    \"\"\"Find a combination of numbers in num_list that adds up to the target_sum.\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target_sum:\n                return True\n    return False\n\ndef g(num_list=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target_sum=100):\n    return num_list\n\nassert f(g())\n",
        "idx_generation": 141,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, n=3) -> bool:\n    \"\"\"Check if the given string has more than n vowels.\"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count > n\n\ndef g(n=3):\n    return \"aeiou\" * (n + 1)\n\nassert f(g())\n",
        "idx_generation": 424,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target: int=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums: List[int]=[2, 4, 6, 8, 10]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 470,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the matrix whose sum is equal to the target value.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            for k in range(i, len(matrix)):\n                for l in range(len(matrix[k])):\n                    if matrix[i][j] + matrix[k][l] == target:\n                        return True\n    return False\n\ndef g(matrix=[[10, 20, 30], [40, 50, 60], [70, 80, 90]], target=100):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 141,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Determine if the given string is a palindrome.\"\"\"\n    return string == string[::-1]\n\ndef g(string=\"racecar\"):\n    return string\n\nassert f(g())\n",
        "idx_generation": 426,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2) -> bool:\n    \"\"\"Given a list of non-increasing integers and given an integer k, determine if the kth element is positive and less than the sum of the first n elements.\"\"\"\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return scores[k] > 0 and scores[k] < sum(scores[:n])\ndef g(scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2):\n    threshold = max(scores[k], 1)\n    return threshold\nassert f(g())\n",
        "idx_generation": 473,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\n    A magic square is a square matrix in which the sum of each row, each column, and both diagonals is the same.\"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    # Check columns\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != target_sum:\n            return False\n    # Check diagonals\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    if diagonal_sum1 != target_sum or diagonal_sum2 != target_sum:\n        return False\n    return True\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g())\n",
        "idx_generation": 141,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Check if the given substring is present in the string.\"\"\"\n    return substring in string\n\ndef g(substring='abc'):\n    return \"abcdefg\"\n\nassert f(g())\n",
        "idx_generation": 427,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2) -> bool:\n    \"\"\"Given a list of non-increasing integers and given an integer k, determine if the kth element is greater than the average of the first n elements.\"\"\"\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return scores[k] > sum(scores[:n])/n\ndef g(scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2):\n    return scores[k]\nassert f(g())\n",
        "idx_generation": 473,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target_sum: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sum up to the target_sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\n\ndef g():\n    return [2, 4, 6, 8, 10], 12\n\nassert f(*g())\n",
        "idx_generation": 142,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return string == string[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 427,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exists a pair of numbers in the list whose product is equal to the target.\n    Return True if such a pair exists, otherwise return False.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(target: int):\n    return [2, 4, 6, 8, 10], target\n\nassert f(*g(target=48))\n",
        "idx_generation": 475,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(words: List[str], target_word: str) -> bool:\n    \"\"\"Check if the target_word is present in the list of words.\"\"\"\n    return target_word in words\n\ndef g():\n    return [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"], \"cherry\"\n\nassert f(*g())\n",
        "idx_generation": 142,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g())\n",
        "idx_generation": 428,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list is sorted in non-decreasing order.\"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 476,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]], target_num: int) -> bool:\n    \"\"\"Check if the target_num is present in the given matrix.\"\"\"\n    for row in matrix:\n        if target_num in row:\n            return True\n    return False\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5\n\nassert f(*g())\n",
        "idx_generation": 142,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(words: List[str], suffix=\"ing\") -> bool:\n    \"\"\"Check if any word in the list ends with the given suffix.\"\"\"\n    return any(word.endswith(suffix) for word in words)\ndef g(words=[\"running\", \"jumping\", \"swimming\", \"skating\"]):\n    return words\n\nassert f(g())\n",
        "idx_generation": 429,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if the list contains a pair of numbers whose difference is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if abs(nums[i] - nums[j]) == target:\n                return True\n    return False\n\ndef g():\n    return [3, 9, 5, 2, 12, 7]\n\nassert f(g(), 4)\n",
        "idx_generation": 482,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import *\n\ndef f(arr: List[int], n=5) -> bool:\n    \"\"\"Check if a given number is present in the list and if it is divisible by n.\"\"\"\n    return n in arr and arr[arr.index(n)] % n == 0\n\ndef g(n=5):\n    arr = [random.randint(1, 10) for _ in range(5)]\n    arr.append(n)\n    return arr\n\nassert f(g())\n",
        "idx_generation": 143,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(words: List[str], char=\"a\") -> bool:\n    \"\"\"Check if any word in the list contains the given character.\"\"\"\n    return any(char in word for word in words)\ndef g(words=[\"apple\", \"banana\", \"cherry\", \"date\"]):\n    return words\n\nassert f(g())\n",
        "idx_generation": 429,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there are three numbers in the list whose sum is equal to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=100):\n    return [20, 30, 10, 40, 50, 60, 70, 80, 90]\nassert f(g())\n",
        "idx_generation": 483,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is greater than or equal to target_sum\"\"\"\n    return any(nums[i] + nums[j] >= target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_sum=10):\n    return [n for n in range(target_sum)]\n\nassert f(g())\n",
        "idx_generation": 144,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target='python') -> bool:\n    \"\"\"Check if the target string can be formed by concatenating the words in the given list\"\"\"\n    formed = ''\n    for word in words:\n        formed += word\n    return formed == target\ndef g(target='python'):\n    words = ['py', 'th', 'on']\n    return words\nassert f(g())\n",
        "idx_generation": 438,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums) + 1):\n            subarray = nums[i:j]\n            if sum(subarray) == target:\n                return True\n    return False\n\ndef g(target=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 483,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if all numbers in the list are greater than or equal to the target_sum\"\"\"\n    return all(num >= target_sum for num in nums)\n\ndef g(target_sum=10):\n    return [n for n in range(target_sum, target_sum + 5)]\n\nassert f(g())\n",
        "idx_generation": 144,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(words: List[str], suffix=\"y\") -> bool:\n    \"\"\"Check if any word in the list ends with the given suffix.\"\"\"\n    return any(word.endswith(suffix) for word in words)\n\ndef g(words=[\"happy\", \"funny\", \"crazy\", \"silly\"]):\n    return words\n\nassert f(g())\n",
        "idx_generation": 439,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to n\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == n:\n                return True\n    return False\n\ndef g(lst=[1, 2, 3, 4, 5]):\n    return lst\n\nassert f(8, g())\n",
        "idx_generation": 486,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that add up to the target value.\"\"\"\n    return any((numbers[i] + numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target=100):\n    numbers = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return numbers\nassert f(g())\n\n",
        "idx_generation": 144,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(names: List[str], target_name='Alice') -> bool:\n    \"\"\"Check if a target name exists in the list of names\"\"\"\n    return target_name in names\n\ndef g():\n    return ['John', 'Alice', 'Bob', 'Sarah', 'Michael']\n\nassert f(g())\n",
        "idx_generation": 442,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int]) -> bool:\n    \"\"\"Check if there exists a number in the list that is divisible by n\"\"\"\n    for num in lst:\n        if num % n == 0:\n            return True\n    return False\n\ndef g(lst=[10, 15, 20, 25, 30]):\n    return lst\n\nassert f(5, g())\n",
        "idx_generation": 486,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=50) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that divide the target value.\"\"\"\n    return any((target % numbers[i] == 0 and target % numbers[j] == 0) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target=50):\n    numbers = [2, 5, 10, 20, 25, 50, 100, 200, 400]\n    return numbers\nassert f(g())\n\n",
        "idx_generation": 144,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(sentence: str, word='Python') -> bool:\n    \"\"\"Check if a word is present in the given sentence.\"\"\"\n    return word in sentence.split()\ndef g(word='Python'):\n    return \"I love Python programming\"\nassert f(g())\n",
        "idx_generation": 443,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list whose sum is less than the target value.\"\"\"\n    return any((numbers[i] + numbers[j] < target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\n\ndef g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 486,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=1000) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that subtract from the target value.\"\"\"\n    return any((target - numbers[i] == numbers[j]) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target=1000):\n    numbers = [200, 300, 400, 500, 600, 700, 800, 900, 1000]\n    return numbers\nassert f(g())\n\n",
        "idx_generation": 144,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='hello') -> bool:\n    \"\"\"Check if the given substring exists in the given string\"\"\"\n    return substring in string\n\ndef g(substring='hello'):\n    return \"This is a hello world message.\"\n\nassert f(g())\n",
        "idx_generation": 447,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sum up to the target.\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4], target=7):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 487,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target_row_sum=15) -> bool:\n    \"\"\"Check if any row in the matrix has a sum equal to the target row sum\"\"\"\n    return any(sum(row) == target_row_sum for row in matrix)\ndef g(target_row_sum=15):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "idx_generation": 145,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, big_str='zyxwvutsrqponmlkjihgfedcba', index=4) -> bool:\n    \"\"\"Find a string whose *first* index in big_str is index\"\"\"\n    return big_str.index(s) == index\ndef g(big_str='zyxwvutsrqponmlkjihgfedcba', index=4):\n    return big_str[index:]\nassert f(g())\n",
        "idx_generation": 448,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target: int):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9], target\n\nassert f(*g(12))\n",
        "idx_generation": 490,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there is a pair of numbers in nums that add up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=20):\n    nums = [5, 10, 15, 20, 25, 30, 35, 40]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 146,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Determine if a string is a palindrome.\n    A string is considered a palindrome if it reads the same forwards and backwards after removing all non-alphanumeric characters and ignoring case.\"\"\"\n    clean_s = ''.join(c.lower() for c in s if c.isalnum())\n    return clean_s == clean_s[::-1]\ndef g(s=\"A man, a plan, a canal: Panama!\"):\n    return s\nassert f(g())\n",
        "idx_generation": 458,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"Find the second largest number in the given list\"\"\"\n    nums.sort()\n    return nums[-2]\n\ndef g():\n    return [1, 5, 3, 7, 9, 2, 8]\n\nassert f(g()) == 8\n",
        "idx_generation": 490,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if there are three numbers in arr that sum up to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(target=100):\n    arr = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return arr\n\nassert f(g())\n",
        "idx_generation": 146,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, vowels=['a', 'e', 'i', 'o', 'u']) -> bool:\n    \"\"\"Check if a given string contains any of the vowels\"\"\"\n    return any(vowel in s for vowel in vowels)\ndef g(vowels=['a', 'e', 'i', 'o', 'u']):\n    return ''.join(vowels)\n\nassert f(g())\n",
        "idx_generation": 461,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are any duplicates in a list of integers.\"\"\"\n    num_set = set()\n    for num in nums:\n        if num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(nums=[1, 2, 3, 4, 2]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 490,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [i for i in range(target - 5)] + [target - 5, target - 4]\n\nassert f(g())\n",
        "idx_generation": 146,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(strings: List[str]) -> bool:\n    \"\"\"Check if all strings in the list start with the same letter.\"\"\"\n    return all(string[0] == strings[0][0] for string in strings)\n\ndef g():\n    return [\"apple\", \"ant\", \"avocado\", \"arrow\"]\n\nassert f(g())\n",
        "idx_generation": 462,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the array is sorted in non-decreasing order\"\"\"\n    return arr == sorted(arr)\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 491,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Find two numbers in the list whose product is equal to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] == target:\n                return True\n    return False\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 147,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, perm='abcdefghijklmnopqrstuvwxyz', target='hello world') -> bool:\n    \"\"\"Find a string that, when a given permutation of characters is applied, has a given result.\"\"\"\n    return ''.join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c for c in s)) == target\ndef g(perm='abcdefghijklmnopqrstuvwxyz', target='hello world'):\n    return ''.join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c for c in target))\nassert f(g())\n",
        "idx_generation": 462,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=1, b=1) -> bool:\n    \"\"\"Check if n is a Fibonacci number\"\"\"\n    fib = [a, b]\n    while fib[-1] < n:\n        fib.append(fib[-1] + fib[-2])\n    return fib[-1] == n\ndef g(a=1, b=1):\n    return 8\nassert f(g())\n",
        "idx_generation": 492,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 148,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], prefix='p') -> bool:\n    \"\"\"Check if any word in the list starts with the given prefix.\"\"\"\n    for word in words:\n        if word.startswith(prefix):\n            return True\n    return False\n\ndef g(prefix='p'):\n    return ['python', 'java', 'c++', 'javascript']\n\nassert f(g())\n",
        "idx_generation": 465,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is sorted in non-decreasing order.\"\"\"\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 494,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], target=10) -> bool:\n    \"\"\"Find a pair of integers in the list that sum up to the target.\"\"\"\n    return any((x[i] + x[j] == target) for i in range(len(x)) for j in range(i + 1, len(x)))\ndef g(target=10):\n    return [2, 4, 6, 8]\nassert f(g())\n",
        "idx_generation": 148,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(words: List[str], suffix=\"y\") -> bool:\n    \"\"\"Check if any word in the list ends with the given suffix.\"\"\"\n    return any(word.endswith(suffix) for word in words)\n\ndef g(words=[\"bunny\", \"kitty\", \"puppy\", \"monkey\"]):\n    return words\n\nassert f(g())\n",
        "idx_generation": 469,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=50):\n    return [10, 20, 30, 40]\n\nassert f(g())\n",
        "idx_generation": 497,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(points: List[Tuple[int, int]], n=5) -> bool:\n    \"\"\"Check if there exists a straight line that passes through exactly n points.\"\"\"\n    if len(points) < n:\n        return False\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            count = 2\n            for k in range(j+1, len(points)):\n                if (points[j][0] - points[i][0]) * (points[k][1] - points[i][1]) == (points[k][0] - points[i][0]) * (points[j][1] - points[i][1]):\n                    count += 1\n            if count == n:\n                return True\n    return False\n\ndef g(n=5):\n    return [(1, 2), (2, 4), (3, 6), (4, 8), (5, 10), (6, 12)]\n\nassert f(g())\n",
        "idx_generation": 150,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring: str='abc') -> bool:\n    \"\"\"Check if the given substring exists in the given string.\"\"\"\n    return substring in string\n\ndef g(string: str='xyzabcxyz'):\n    return string\n\nassert f(g())\n",
        "idx_generation": 469,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target: int) -> bool:\n    \"\"\"Find if the target value exists in the given 2D matrix\"\"\"\n    if not matrix:\n        return False\n    rows, cols = len(matrix), len(matrix[0])\n    left, right = 0, rows * cols - 1\n    while left <= right:\n        mid = (left + right) // 2\n        mid_val = matrix[mid // cols][mid % cols]\n        if mid_val == target:\n            return True\n        elif mid_val < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\n\ndef g() -> Tuple[List[List[int]], int]:\n    return ([[1, 3, 5], [7, 9, 11], [13, 15, 17]], 11)\n\nassert f(*g())\n",
        "idx_generation": 499,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=8) -> bool:\n    \"\"\"Check if there exists a submatrix with a sum equal to the target number.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i, rows):\n                for l in range(j, cols):\n                    submatrix_sum = 0\n                    for m in range(i, k + 1):\n                        for n in range(j, l + 1):\n                            submatrix_sum += matrix[m][n]\n                    if submatrix_sum == target:\n                        return True\n    return False\n\ndef g(target=8):\n    return [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 150,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], substring='python') -> bool:\n    \"\"\"Check if the substring is present in any of the words in the list.\"\"\"\n    return any(substring in word for word in words)\n\ndef g(substring='python'):\n    return ['apple', 'banana', 'cherry', 'python', 'pear', 'grape']\n\nassert f(g())\n",
        "idx_generation": 472,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains a subsequence of consecutive numbers.\"\"\"\n    return any(nums[i] == nums[i+1] - 1 for i in range(len(nums)-1))\n\ndef g():\n    return [1, 2, 4, 5, 6, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 150,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='world') -> bool:\n    \"\"\"Check if the substring is present in the given string\"\"\"\n    return substring in string\n\ndef g(substring='world'):\n    return \"Hello, world!\"\n\nassert f(g())\n",
        "idx_generation": 473,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix, determine if it is a symmetric matrix.\"\"\"\n    return all((matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[i]))))\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\nassert f(g())\n",
        "idx_generation": 150,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(word: str) -> bool:\n    \"\"\"Check if the given word is a palindrome\"\"\"\n    return word == word[::-1]\ndef g():\n    return \"radar\"\nassert f(g())\n",
        "idx_generation": 474,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=54321) -> bool:\n    \"\"\"Check if a number is divisible by 3\"\"\"\n    return x % 3 == 0\ndef g(a=54321):\n    return a\nassert f(g())\n",
        "idx_generation": 152,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(strings: List[str], prefix: str = \"\") -> bool:\n    \"\"\"Check if all strings in the list start with the given prefix.\"\"\"\n    return all(string.startswith(prefix) for string in strings)\n\ndef g(prefix: str = \"\"):\n    return [\"apple\", \"banana\", \"avocado\", \"orange\"]\n\nassert f(g())\n",
        "idx_generation": 476,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=15482, b=23223, lower_bound=5) -> bool:\n    \"\"\"Check if n is a factor of both a and b, and n is greater than or equal to lower_bound.\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a=15482, b=23223, lower_bound=5):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n\nassert f(g())\n",
        "idx_generation": 153,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(s: str, word='konjac') -> bool:\n    \"\"\"Check if the given string contains the word 'konjac'.\"\"\"\n    return word in s\ndef g(word='konjac'):\n    return 'konjac' + word\nassert f(g())\n",
        "idx_generation": 481,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that add up to the target value.\"\"\"\n    return any((numbers[i] + numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target=20):\n    numbers = [5, 15, 2, 10]\n    return numbers\nassert f(g())\n",
        "idx_generation": 153,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, lst: List[str]) -> bool:\n    \"\"\"Check if there exists a string in the list that is a substring of s\"\"\"\n    for item in lst:\n        if item in s:\n            return True\n    return False\n\ndef g(lst=['apple', 'banana', 'orange']):\n    return lst\n\nassert f('I love eating bananas', g())\n",
        "idx_generation": 486,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums) + 1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [i for i in range(1, target + 1)]\n\nassert f(g())\n",
        "idx_generation": 155,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list is palindrome\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 487,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=4) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose product is divisible by k.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums) + 1):\n            subarray = nums[i:j]\n            product = 1\n            for num in subarray:\n                product *= num\n            if product % k == 0:\n                return True\n    return False\n\ndef g(k=4):\n    return [i for i in range(1, k + 1)]\n\nassert f(g())\n",
        "idx_generation": 155,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, substr='python') -> bool:\n    \"\"\"Check if the given string contains the given substring\"\"\"\n    return substr in s\ndef g(substr='python'):\n    return 'I love python programming'\nassert f(g())\n",
        "idx_generation": 487,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(num_list: List[int], target: int, k: int = 3) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k elements in the list whose difference is equal to the target number.\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if abs(num_list[i] - num_list[j]) == target:\n                return True\n    return False\n\ndef g(k: int = 3):\n    return [5, 10, 15, 20, 25, 30]\n\nassert f(g(), 10)\n",
        "idx_generation": 156,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, big_str='helloiamassistant', index=5) -> bool:\n    \"\"\"Check if the given string is present in big_str starting from index\"\"\"\n    return s in big_str[index:]\ndef g(big_str='helloiamassistant', index=5):\n    return big_str[index:]\nassert f(g())\n",
        "idx_generation": 489,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(num_list: List[int], target: int, k: int = 2) -> bool:\n    \"\"\"Given a list of integers and a target number, determine if there exist k elements in the list whose sum is equal to the target number.\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target:\n                return True\n    return False\n\ndef g(k: int = 2):\n    return [3, 5, 7, 11, 13, 17]\n\nassert f(g(), 20)\n",
        "idx_generation": 156,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str) -> bool:\n    \"\"\"Check if a string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef g(s=\"racecar\"):\n    return s\n\nassert f(g())\n",
        "idx_generation": 490,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the list whose elements are in ascending order.\"\"\"\n    n = len(arr)\n    for i in range(n - k + 1):\n        subarray = arr[i:i+k]\n        if subarray == sorted(subarray):\n            return True\n    return False\n\ndef g(k=3):\n    return [i for i in range(10)]\n\nassert f(g())\n",
        "idx_generation": 156,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='abc') -> bool:\n    \"\"\"Check if the substring exists in the given string\"\"\"\n    return substring in string\n\ndef g(string='abcdefghi'):\n    return string\n\nassert f(g())\n",
        "idx_generation": 491,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is a magic square.\n    A magic square is a square matrix where the sums of each row, each column, and both diagonals are the same.\"\"\"\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for col in range(n):\n        col_sum = sum(matrix[i][col] for i in range(n))\n        if col_sum != target_sum:\n            return False\n    \n    # Check main diagonal\n    diagonal_sum = sum(matrix[i][i] for i in range(n))\n    if diagonal_sum != target_sum:\n        return False\n    \n    # Check secondary diagonal\n    secondary_diagonal_sum = sum(matrix[i][n-i-1] for i in range(n))\n    if secondary_diagonal_sum != target_sum:\n        return False\n    \n    return True\n\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n\nassert f(g())\n",
        "idx_generation": 158,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(text: str, char='a') -> bool:\n    \"\"\"Check if the character 'char' appears more than once in the text\"\"\"\n    count = 0\n    for c in text:\n        if c == char:\n            count += 1\n    return count > 1\n\ndef g(char='a'):\n    return \"abracadabra\"\n\nassert f(g())\n\n",
        "idx_generation": 492,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n=0) -> bool:\n    \"\"\"Check if there exists a pair of consecutive numbers in the list such that their sum is equal to n.\"\"\"\n    for i in range(len(nums)-1):\n        if nums[i] + nums[i+1] == n:\n            return True\n    return False\n\ndef g(n=0):\n    return [2, 3, 5, 7, 11, 13, 17]\n\nassert f(g(), 18)\n",
        "idx_generation": 158,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome.\nA list is a palindrome if it reads the same forwards and backwards.\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 4, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 494,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list such that their difference is equal to the target.\"\"\"\n    return any((nums[i] - nums[j] == target) for i in range(len(nums)) for j in range(len(nums)))\n\ndef g(target=0):\n    return [4, 8, 12, 16, 20]\n\nassert f(g(), 4)\n",
        "idx_generation": 158,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n=0) -> bool:\n    \"\"\"Check if there exists a pair of consecutive numbers in the list such that their product is equal to n.\"\"\"\n    for i in range(len(nums)-1):\n        if nums[i] * nums[i+1] == n:\n            return True\n    return False\n\ndef g(n=0):\n    return [2, 3, 5, 7, 11, 13, 17]\n\nassert f(g(), 35)\n",
        "idx_generation": 158,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], row_sum=[15, 15, 15], col_sum=[15, 15, 15]) -> bool:\n    \"\"\"Check if the given matrix has the specified sum for each row and column\"\"\"\n    for i in range(len(matrix)):\n        if sum(matrix[i]) != row_sum[i]:\n            return False\n    for j in range(len(matrix[0])):\n        if sum(matrix[i][j] for i in range(len(matrix))) != col_sum[j]:\n            return False\n    return True\n\ndef g(row_sum=[15, 15, 15], col_sum=[15, 15, 15]):\n    return [[5, 5, 5], [5, 5, 5], [5, 5, 5]]\n\nassert f(g())\n",
        "idx_generation": 159,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=8) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k and contains even number of elements.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    count = 0\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        count += 1\n        if prefix_sum in remainders and count % 2 == 0:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=8):\n    return [i**2 for i in range(1, k+1)]\n\nassert f(g())\n",
        "idx_generation": 160,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=6) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k and contains odd number of elements.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    count = 0\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        count += 1\n        if prefix_sum in remainders and count % 2 != 0:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=6):\n    return [i**2 for i in range(1, k+1)]\n\nassert f(g())\n",
        "idx_generation": 160,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sum up to the target\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=100):\n    nums = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return nums\nassert f(g())\n\n",
        "idx_generation": 160,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=0) -> bool:\n    \"\"\"Check if the given list contains a subarray whose sum is equal to the target\"\"\"\n    n = len(arr)\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += arr[j]\n            if curr_sum == target:\n                return True\n    return False\ndef g(target=0):\n    arr = [3, 4, -7, 1, 3, 9, 2, -2]\n    return arr\nassert f(g())\n\n",
        "idx_generation": 160,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=15) -> bool:\n    \"\"\"Check if the product of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] * nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_sum=15):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n",
        "idx_generation": 161,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=50) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list whose sum is equal to target_sum\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\n\ndef g(target_sum=50):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n",
        "idx_generation": 161,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Check if the sum of any three numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\n\ndef g(target_sum=100):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n",
        "idx_generation": 161,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] == target:\n                return True\n    return False\n\ndef g(target=20):\n    return [2, 4, 5, 10, 6]\n\nassert f(g())\n",
        "idx_generation": 161,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=2, lower=-100, seq=[1, 3, 5, 7, 9, 11, 13, 15]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is greater than or equal to lower\"\"\"\n    seq_sum = sum(seq[start:start+k])\n    return seq_sum >= lower\ndef g(k=2, lower=-100, seq=[1, 3, 5, 7, 9, 11, 13, 15]):\n    def seq_sum(start):\n        return sum(seq[start:start+k])\n    return max(range(len(seq) - k + 1), key=seq_sum)\nassert f(g())\n",
        "idx_generation": 161,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if any two numbers in the list sums up to the target sum\"\"\"\n    return any((numbers[i] + numbers[j] == target_sum) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target_sum=10):\n    numbers = [2, 4, 6, 8, 10]\n    return numbers\nassert f(g())\n",
        "idx_generation": 161,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that add up to the target value.\"\"\"\n    return any((numbers[i] + numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\nassert f(g())\n",
        "idx_generation": 162,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a triplet of numbers in the list that sum up to the target value.\"\"\"\n    return any((numbers[i] + numbers[j] + numbers[k] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)) for k in range(j+1, len(numbers)))\ndef g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\nassert f(g())\n",
        "idx_generation": 162,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are two consecutive numbers in the list such that their sum is equal to 10.\"\"\"\n    for i in range(len(nums)-1):\n        if nums[i] + nums[i+1] == 10:\n            return True\n    return False\n\ndef g():\n    return [1, 4, 6, 3, 7, 2]\n\nassert f(g())\n",
        "idx_generation": 163,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=8) -> bool:\n    \"\"\"Check if the difference between n and the product of a and b is divisible by n\"\"\"\n    return (n - (a * b)) % n == 0\n\ndef g(a=3, b=8):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 163,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that adds up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[10, 20, 30, 40, 50, 60]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 164,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    return any((x + y == target for x in lst for y in lst))\n\ndef g(target=100):\n    return [target // 2, target // 2]\n\nassert f(g())\n",
        "idx_generation": 164,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(num: int, lst: List[int]) -> bool:\n    \"\"\"Check if the number is present in the list\"\"\"\n    return num in lst\n\ndef g(lst: List[int]):\n    return lst\n\nassert f(5, g([1, 2, 3, 4, 5]))\n",
        "idx_generation": 164,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, x=5, y=3, z=2) -> bool:\n    \"\"\"Find n such that (the product of the first x multiples of y) - z == n\"\"\"\n    return (y ** x) - z == n\ndef g(x=5, y=3, z=2):\n    return (y ** x) - z\nassert f(g())\n",
        "idx_generation": 166,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    return [i for i in range(1, target+1)]\n\nassert f(g())\n\n",
        "idx_generation": 167,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], x=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by x.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) % x == 0:\n                return True\n    return False\n\ndef g(x=5):\n    return [i for i in range(1, x+1)]\n\nassert f(g())\n\n",
        "idx_generation": 169,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], x=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose minimum value is divisible by x.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if min(nums[i:j]) % x == 0:\n                return True\n    return False\n\ndef g(x=5):\n    return [i for i in range(1, x+1)]\n\nassert f(g())\n\n",
        "idx_generation": 169,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there are three consecutive numbers in the list that form an arithmetic sequence with a common difference of 3.\"\"\"\n    for i in range(len(nums)-2):\n        if nums[i+1] - nums[i] == 3 and nums[i+2] - nums[i+1] == 3:\n            return True\n    return False\n\ndef g():\n    return [1, 4, 7, 10, 13, 16, 19]\n\nassert f(g())\n",
        "idx_generation": 169,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int], target_sum=0) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target sum.\"\"\"\n    num_set = set(num_list)\n    for num in num_list:\n        complement = target_sum - num\n        if complement in num_set:\n            return True\n    return False\n\ndef g(target_sum=0):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g(), target_sum=7)\n",
        "idx_generation": 170,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: Tuple[int, int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies inside a rectangle.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return (a <= x <= a+c) and (b <= y <= b+c)\ndef g(a=1, b=2, c=10):\n    return (a+1, b+1)\nassert f(g())\n",
        "idx_generation": 170,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: Tuple[int, int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies inside a rectangle.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of fourth decimal digit is required.\"\"\"\n    x, y = e\n    return (a <= x <= a+c) and (b <= y <= b+c)\ndef g(a=1, b=2, c=10):\n    return (a+(c//2), b+(c//2))\nassert f(g())\n",
        "idx_generation": 170,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in nums that sum up to target.\"\"\"\n    for i in range(len(nums)-1):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    nums = [1, 5, 8, 3, 6, 2, 9, 4, 7]\n    return nums\nassert f(g())\n",
        "idx_generation": 171,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_word='hello') -> bool:\n    \"\"\"Check if the target word is present in the list of words.\"\"\"\n    return target_word in words\n\ndef g(target_word='hello'):\n    return ['hi', 'hey', 'hello', 'hola', 'bonjour']\n\nassert f(g())\n",
        "idx_generation": 171,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=11) -> bool:\n    \"\"\"Check if the difference between n and the product of a and b is divisible by n\"\"\"\n    return (n - (a * b)) % n == 0\n\ndef g(a=5, b=11):\n    return a * b\n\nassert f(g())\n",
        "idx_generation": 171,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if any two elements in the given list sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    nums = [2, 4, 6, 8]\n    return nums\nassert f(g())\n",
        "idx_generation": 172,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=20) -> bool:\n    \"\"\"Check if the given matrix contains a row or column that has the sum greater than the target\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) > target:\n            return True\n    for j in range(m):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum > target:\n            return True\n    return False\ndef g(target=20):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "idx_generation": 172,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=4) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=4):\n    return [7*i**2 for i in range(1, k+1)]\n\nassert f(g())\n\n",
        "idx_generation": 172,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=3, threshold=1.5, seq=[1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose average is greater than or equal to threshold\"\"\"\n    seq_avg = sum(seq[start:start+k]) / k\n    return seq_avg >= threshold\ndef g(k=3, threshold=1.5, seq=[1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8]):\n    def seq_avg(start):\n        return sum(seq[start:start+k]) / k\n    return max(range(len(seq) - k + 1), key=seq_avg)\nassert f(g())\n",
        "idx_generation": 173,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=5, threshold=2.5, seq=[2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0, 4.2]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose average is greater than or equal to threshold\"\"\"\n    seq_avg = sum(seq[start:start+k]) / k\n    return seq_avg >= threshold\ndef g(k=5, threshold=2.5, seq=[2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0, 4.2]):\n    def seq_avg(start):\n        return sum(seq[start:start+k]) / k\n    return max(range(len(seq) - k + 1), key=seq_avg)\nassert f(g())\n",
        "idx_generation": 173,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[1, 3, 5, 7, 9, 11, 13, 15], k=4) -> bool:\n    \"\"\"Given a list of integers and an integer k, determine if there are at least n integers in the list that are divisible by k.\"\"\"\n    return sum((1 for num in lst if num % k == 0)) >= n\ndef g(lst=[1, 3, 5, 7, 9, 11, 13, 15], k=4):\n    return len([num for num in lst if num % k == 0])\nassert f(g())\n",
        "idx_generation": 173,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the target value is greater than all the numbers in the list.\"\"\"\n    return all(num < target for num in nums)\n    \ndef g(nums: List[int]):\n    return nums\n\nassert f(g([1, 2, 3, 4, 5]), target=6)\n",
        "idx_generation": 175,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if any combination of numbers in the list sums up to the target multiplied by 2.\"\"\"\n    for r in range(1, len(nums) + 1):\n        for combination in itertools.combinations(nums, r):\n            if sum(combination) == target * 2:\n                return True\n    return False\n\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 176,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists three distinct numbers in the list whose sum is equal to the target number\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g(target=10):\n    return [i for i in range(target)]\nassert f(g())\n",
        "idx_generation": 176,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_number=10) -> bool:\n    \"\"\"Check if the target_number is present in the given list arr\"\"\"\n    return target_number in arr\n\ndef g(arr=[1, 5, 10, 15, 20]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 178,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(lst: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target.\"\"\"\n    return any((lst[i] + lst[j] == target for i in range(len(lst)) for j in range(i + 1, len(lst))))\ndef g(target=10):\n    return [i for i in range(target - 1)] + [2 * target - 1]\nassert f(g())\n",
        "idx_generation": 179,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=100, b=20) -> bool:\n    \"\"\"Find n such that n is divisible by a, b, and their difference.\"\"\"\n    return n % a == 0 and n % b == 0 and n % (a - b) == 0\n\ndef g(a=100, b=20):\n    return a * b * (a - b)\n\nassert f(g())\n",
        "idx_generation": 179,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target sum\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 179,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if the target value is present in any row or column of the matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    matrix[1][1] = target\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 180,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Find a pair of numbers from the given list whose product is equal to the target value\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] * numbers[j] == target:\n                return True\n    return False\ndef g(target=0):\n    return [target, 1]\nassert f(g())\n",
        "idx_generation": 181,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols\n\ndef g():\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g())\n\n",
        "idx_generation": 181,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols\n\ndef g():\n    matrix = [[9, 8, 7], [6, 5, 4], [3, 2, 1]]\n    return matrix\n\nassert f(g())\n\n",
        "idx_generation": 181,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols\n\ndef g():\n    matrix = [[5, 5, 5], [5, 5, 5], [5, 5, 5]]\n    return matrix\n\nassert f(g())\n\n",
        "idx_generation": 181,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=100) -> bool:\n    \"\"\"Find the smallest number 'n' such that the sum of all numbers from 1 to n (inclusive) exceeds the target.\"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n        if total > target:\n            return True\n    return False\n\ndef g(target=100):\n    n = 1\n    while True:\n        if f(n, target):\n            return n\n        n += 1\n\nassert f(g())\n",
        "idx_generation": 182,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers, find if there exist two numbers whose sum is equal to the target number.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g():\n    return [3, 5, 8, 12, 2, 9]\n\nassert f(g(), 14)\n",
        "idx_generation": 182,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_sum=10):\n    return [n for n in range(target_sum+1)]\n\nassert f(g())\n",
        "idx_generation": 182,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(s: str, target='hello', num_duplicates=2) -> bool:\n    \"\"\"Check if a string contains the target string repeated multiple times.\"\"\"\n    return target*num_duplicates in s\n\ndef g(target='hello', num_duplicates=2):\n    return target*num_duplicates\n\nassert f(g())\n",
        "idx_generation": 184,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[4, 8, 12, 16], target=2) -> bool:\n    \"\"\"Check if all numbers in the list are divisible by the target number.\"\"\"\n    return all((i % target == 0 for i in nums)) and target != 0\ndef g(nums=[4, 8, 12, 16], target=2):\n    return target\nassert f(g())\n",
        "idx_generation": 185,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(i: int, li=[10, 20, 30, 40, 50], target=40) -> bool:\n    \"\"\"Check if the item at the given index in the list is equal to the target value.\"\"\"\n    return li[i] == target\ndef g(li=[10, 20, 30, 40, 50], target=40):\n    return li.index(target)\nassert f(g())\n",
        "idx_generation": 185,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60]\n\nassert f(g())\n",
        "idx_generation": 186,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is greater than or equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) >= target:\n                return True\n    return False\n\ndef g(target=50):\n    return [20, 30, 10, 40, 50, 60]\n\nassert f(g())\n",
        "idx_generation": 186,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=10) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k and contains at least 4 elements.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    count = 0\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            count += 1\n            if count >= 4:\n                return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=10):\n    return [i*2 for i in range(1, k+1)]\n\nassert f(g())\n",
        "idx_generation": 186,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int) -> bool:\n    \"\"\"Given an integer n, check if it is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g())\n",
        "idx_generation": 187,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(array: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of integers in the array that sum up to the target value.\"\"\"\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            if array[i] + array[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), target=9)\n",
        "idx_generation": 187,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Return True if there exists three elements in the list whose sum is equal to the target, and False otherwise.\"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n",
        "idx_generation": 188,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=8, n=8) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m=8, n=8):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(3, 3)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(3, 3)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 188,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers, find if there exist three numbers whose sum is equal to the target number.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [2, 5, 7, 11, 3, 9]\n\nassert f(g(), 20)\n",
        "idx_generation": 189,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g():\n    return [2, 4, 6, 8]\n\nassert f(g())\n",
        "idx_generation": 190,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find three numbers in the given list that sum up to the target\"\"\"\n    return any(sum(combination) == target for combination in itertools.combinations(nums, 3))\n\ndef g(target=20):\n    return [10, 5, 5]\n\nassert f(g())\n",
        "idx_generation": 191,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import datetime\nfrom typing import*\ndef f(date: str, days=7) -> bool:\n    \"\"\"Check if the date given is exactly 7 days after the current date\"\"\"\n    current_date = datetime.date.today()\n    given_date = datetime.datetime.strptime(date, \"%Y-%m-%d\").date()\n    return (given_date - current_date).days == days\n\ndef g(days=7):\n    current_date = datetime.date.today()\n    return (current_date + datetime.timedelta(days=days)).strftime(\"%Y-%m-%d\")\n\nassert f(g())\n",
        "idx_generation": 191,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list whose product is equal to the target.\"\"\"\n    n = len(numbers)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if numbers[i] * numbers[j] * numbers[k] == target:\n                    return True\n    return False\n\ndef g(target=50):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 191,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    return any(numbers[i] + numbers[j] == target for i in range(len(numbers)) for j in range(i+1, len(numbers)))\n\ndef g(target=10):\n    return random.sample(range(1, target+1), 5)\n\nassert f(g())\n",
        "idx_generation": 192,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == m*n\ndef g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == m*n:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 193,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == m+n-1\ndef g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == m+n-1:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 193,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the given list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=15):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n",
        "idx_generation": 194,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a subarray in the given list that sums up to zero\"\"\"\n    prefix_sum = 0\n    seen = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum in seen or prefix_sum == 0:\n            return True\n        seen.add(prefix_sum)\n    return False\ndef g():\n    nums = [1, -2, 3, 4, -5]\n    return nums\nassert f(g())\n",
        "idx_generation": 194,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, k=5, lower=-100000000, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is maximal, possibly looping around\"\"\"\n    total = 0\n    for i in range(x, x + k):\n        total += seq[i]\n    return total >= lower\ndef g(k=5, lower=-100000000, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    def sum(x):\n        result = 0\n        for i in range(x, x + k):\n            result += seq[i]\n        return result\n    return max(range(-len(seq), len(seq) - k + 1), key=sum)\nassert f(g())\n",
        "idx_generation": 196,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a sum greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] > target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 196,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose product is equal to the target.\"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n        if product == target:\n            return True\n    return False\n\ndef g(target=10):\n    return [2, 5, 1, 3, 4]\n\nassert f(g())\n",
        "idx_generation": 197,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose length is equal to k and contains all distinct elements.\"\"\"\n    for i in range(len(nums)-k+1):\n        subarray = nums[i:i+k]\n        if len(subarray) == len(set(subarray)):\n            return True\n    return False\n\ndef g(k=3):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 197,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a diagonal matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    matrix = [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n    return matrix\n\nassert f(g())\n\n",
        "idx_generation": 198,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exist four numbers in the list whose sum is equal to the target\"\"\"\n    return any(a + b + c + d == target for i, a in enumerate(nums) for j, b in enumerate(nums[i+1:]) for k, c in enumerate(nums[i+j+2:]) for d in nums[i+j+k+3:])\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 198,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose difference is equal to the target\"\"\"\n    return any(a - b == target or b - a == target for i, a in enumerate(nums) for b in nums[i+1:])\ndef g(target=20):\n    return [10, 30, 25, 40, 15, 5]\nassert f(g())\n",
        "idx_generation": 198,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if the target list contains n as an element.\"\"\"\n    return n in target\ndef g(target=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return target[-1]\nassert f(g())\n",
        "idx_generation": 198,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport re\nfrom typing import List\n\ndef f(emails: List[str], domain='example.com') -> bool:\n    \"\"\"Check if any of the emails in the given list belong to the specified domain\"\"\"\n    return any(re.search(f\"@{domain}$\", email) for email in emails)\n\ndef g(domain='example.com'):\n    return [f\"user{i}@{domain}\" for i in range(1, 6)]\n\nassert f(g())\n",
        "idx_generation": 199,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Given a list of numbers, find a pair of numbers that sum up to a given target sum\"\"\"\n    return any((nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target_sum=10):\n    return [1, target_sum-1]\nassert f(g())\n",
        "idx_generation": 199,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if any number in the list is divisible by the target number.\"\"\"\n    return any(num % target == 0 for num in nums)\ndef g():\n    return [10, 15, 25, 30, 35, 40]\nassert f(g(), 5)\n",
        "idx_generation": 200,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Given a list of integers, determine if there exist three numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(arr)-2):\n        for j in range(i+1, len(arr)-1):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g(), 12)\n",
        "idx_generation": 201,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Determine if there are three numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 201,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are three numbers in the list whose product is equal to the target value.\"\"\"\n    n = len(nums)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if nums[i] * nums[j] * nums[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 201,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=45) -> bool:\n    \"\"\"Check if there exists a combination of two numbers from the list whose product is equal to the target value.\"\"\"\n    return any((n1 * n2 == target for i, n1 in enumerate(nums) for j, n2 in enumerate(nums[i+1:])))\n\ndef g(nums=[1, 5, 9, 10, 15, 20]):\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 202,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, arr=[3, 5, 7, 9, 11, 13, 15, 17, 19, 21], k=5) -> bool:\n    \"\"\"Check if there are at least k prime numbers in the first n elements of arr.\"\"\"\n    primes = [num for num in arr if all(num % i != 0 for i in range(2, int(num**0.5) + 1))]\n    return len(primes) >= k\ndef g(arr=[3, 5, 7, 9, 11, 13, 15, 17, 19, 21], k=5):\n    return arr\nassert f(g())\n",
        "idx_generation": 203,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(e: Tuple[int, int], a=1, b=2, c=10, d=1000) -> bool:\n    \"\"\"Check if a point lies inside a square.\nSolution should be a tuple of the (x,y) coordinates.\nAccuracy of third decimal digit is required.\"\"\"\n    x, y = e\n    return (a <= x <= a+c) and (b <= y <= b+c)\ndef g(a=1, b=2, c=10):\n    return (a+c/2, b+c/2)\nassert f(g())\n",
        "idx_generation": 203,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if the target list contains n as an element and the sum of the target list is greater than n.\"\"\"\n    return n in target and sum(target) > n\ndef g(target=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return target[2]\nassert f(g())\n",
        "idx_generation": 204,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=15) -> bool:\n    \"\"\"Check if there exists a pair of integers in the list whose sum is equal to the target_sum.\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=15):\n    return [i for i in range(1, target_sum+1)]\n\nassert f(g())\n",
        "idx_generation": 204,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], divisor=2) -> bool:\n    \"\"\"Check if all numbers in the list are divisible by the divisor\"\"\"\n    return all(num % divisor == 0 for num in nums)\ndef g(divisor=2):\n    return [2, 4, 6, 8, 10]\nassert f(g())\n",
        "idx_generation": 205,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m=20) -> bool:\n    \"\"\"Check if the given number is divisible by m and is also a perfect square.\"\"\"\n    return n % m == 0 and int(n**0.5)**2 == n\n\ndef g(m=10):\n    return m**2\n\nassert f(g())\n",
        "idx_generation": 206,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int], target_sum: int = 10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target_sum=10):\n    return nums\nassert f(g())\n",
        "idx_generation": 206,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols\ndef g(matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]):\n    return matrix\nassert f(g())\n",
        "idx_generation": 206,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=10) -> bool:\n    \"\"\"Check if the sum of all digits in x is equal to a\"\"\"\n    return sum(int(digit) for digit in str(x)) == a\ndef g(a=10):\n    return int(\"1\" * a)\nassert f(g())\n",
        "idx_generation": 207,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, factors: List[int]=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is divisible by any of the given factors.\n    - n: the number to be checked\n    - factors: list of factors\"\"\"\n    return any(n % factor == 0 for factor in factors)\ndef g(n: int, factors: List[int]=[2, 3, 5]):\n    return n\nassert f(g(12))\n",
        "idx_generation": 208,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=15, c=3) -> bool:\n    \"\"\"Find n such that n + a + b is divisible by c\"\"\"\n    return (n + a + b) % c == 0\ndef g(a=5, b=15, c=3):\n    return -a - b\nassert f(g())\n",
        "idx_generation": 209,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 20) -> bool:\n    \"\"\"Given a list of integers, find two numbers that sum up to the target value.\n    Sample Input:\n    `[4, 7, 11, 15, 3, 9]`\n    Sample Output:\n    `True`\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums: List[int] = [4, 7, 11, 15, 3, 9], target: int = 20):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 209,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list nums whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [2, 4, 6, 8]\n\nassert f(g())\n",
        "idx_generation": 210,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(corners: List[List[int]], m=100, n=100, a=10, target=100) -> bool:\n    \"\"\"Find a minimal list of corner locations for a\u00d7a tiles that covers [0, m] \u00d7 [0, n] and does not double-cover\nsquares.\nSample Input:\nm = 15\nn = 20\na = 3\ntarget = 6\nSample Output:\n[[0, 0], [0, 3], [0, 6], [0, 9], [0, 12], [0, 15]]\"\"\"\n    covered = {(i + x, j + y) for (i, j) in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, 'Double coverage'\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})\ndef g(m=100, n=100, a=10, target=100):\n    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]\nassert f(g())\n",
        "idx_generation": 211,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=3, threshold=0.7, seq=[0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose average is greater than or equal to threshold\"\"\"\n    seq_avg = sum(seq[start:start+k]) / k\n    return seq_avg >= threshold\ndef g(k=3, threshold=0.7, seq=[0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5]):\n    def seq_avg(start):\n        return sum(seq[start:start+k]) / k\n    return max(range(len(seq) - k + 1), key=seq_avg)\nassert f(g())\n",
        "idx_generation": 212,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=4, threshold=0.6, seq=[0.0, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose average is greater than or equal to threshold\"\"\"\n    seq_avg = sum(seq[start:start+k]) / k\n    return seq_avg >= threshold\ndef g(k=4, threshold=0.6, seq=[0.0, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4]):\n    def seq_avg(start):\n        return sum(seq[start:start+k]) / k\n    return max(range(len(seq) - k + 1), key=seq_avg)\nassert f(g())\n",
        "idx_generation": 212,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=4) -> bool:\n    \"\"\"Check if the given matrix is a square matrix of size n x n.\"\"\"\n    return all(len(row) == n for row in matrix) and len(matrix) == n\ndef g(n=4):\n    return [[1] * n for _ in range(n)]\nassert f(g())\n",
        "idx_generation": 213,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=6) -> bool:\n    \"\"\"Check if the given matrix is a square matrix of size n x n.\"\"\"\n    return all(len(row) == n for row in matrix) and len(matrix) == n\ndef g(n=6):\n    return [[1] * n for _ in range(n)]\nassert f(g())\n",
        "idx_generation": 213,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two numbers in the list that sum up to the target value.\"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(arr=[1, 2, 5, 7, 9]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 213,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=10) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose product is greater than or equal to k\"\"\"\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            product = 1\n            for num in nums[i:j+1]:\n                product *= num\n            if product >= k:\n                return True\n    return False\n\ndef g(k=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 214,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, n=7) -> bool:\n    \"\"\"Find the square root of x and check if it is an integer divisible by n.\"\"\"\n    return x ** 0.5 % n == 0\ndef g(n=7):\n    return n ** 2\nassert f(g())\n",
        "idx_generation": 214,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n",
        "idx_generation": 214,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiply to the target value.\"\"\"\n    return any(target / num in nums for num in nums)\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 214,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, divisors=[2, 3, 5]) -> bool:\n    \"\"\"Check if all the divisors divide the number evenly.\"\"\"\n    return all(n % d == 0 for d in divisors)\n\ndef g():\n    n = 30\n    return n\n\nassert f(g())\n",
        "idx_generation": 215,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is greater than or equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            subarray = nums[i:j+1]\n            if sum(subarray) >= target:\n                return True\n    return False\n\ndef g(target=0):\n    nums = [2, 4, 6, 8, 10]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 216,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, substring='') -> bool:\n    \"\"\"Check if the given substring is present in the string.\"\"\"\n    return substring in string\ndef g(substring=''):\n    string = \"Hello, World!\"\n    return string\nassert f(g())\n",
        "idx_generation": 216,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=30, c=15) -> bool:\n    \"\"\"Find n such that n - a == b * (the sum of the first c integers)\"\"\"\n    return n - a == sum([b * i for i in range(c)])\ndef g(a=10, b=30, c=15):\n    return a + sum([b * i for i in range(c)])\nassert f(g())\n\n",
        "idx_generation": 216,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target\"\"\"\n    num_set = set(nums)\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            complement = target - (nums[i] + nums[j])\n            if complement in num_set:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 217,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=5) -> bool:\n    \"\"\"Check if the given matrix is a square matrix of size n x n and if the sum of the diagonal elements is equal to n.\"\"\"\n    return all(len(row) == n for row in matrix) and len(matrix) == n and sum(matrix[i][i] for i in range(n)) == n\ndef g(n=5):\n    return [[1 if i == j else 0 for j in range(n)] for i in range(n)]\nassert f(g())\n",
        "idx_generation": 217,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr\nassert f(g())\n",
        "idx_generation": 217,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list such that their sum is equal to the target.\"\"\"\n    for i in range(len(nums) - 2):\n        for j in range(i + 1, len(nums) - 1):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 9)\n",
        "idx_generation": 218,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], n=3) -> bool:\n    \"\"\"Given n, find n integers such that li[i] * li[i+1] + 1 == li[i+2], for i = 0, 1, ..., n-1\nwhere indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\nthat are multiples of 3 (as proven in the IMO problem).\nSample input:\n3\nSample output:\n[_, _, _]\n(Sample output hidden because showing sample output would give away too much information.)\"\"\"\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n=3):\n    return [-1, -1, 2] * (n // 3)\nassert f(g())\n",
        "idx_generation": 219,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 219,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target value\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g(nums: List[int]):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == 100:\n                    return (nums[i], nums[j], nums[k])\nassert f(g([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]))\n",
        "idx_generation": 220,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there are two numbers in the list whose difference is equal to the target value\"\"\"\n    return any(nums[i] - nums[j] == target or nums[j] - nums[i] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(nums: List[int]):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] - nums[j] == 50 or nums[j] - nums[i] == 50:\n                return (nums[i], nums[j])\nassert f(g([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]))\n",
        "idx_generation": 220,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100, k=3) -> bool:\n    \"\"\"Find k numbers in a list that sum up to the target value\"\"\"\n    return sum(numbers) == target and len(numbers) == k\ndef g(target=100, k=3):\n    return [25, 35, 40]\nassert f(g())\n",
        "idx_generation": 220,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Given a list of numbers, check if there exists a pair of numbers that sum up to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=25):\n    return [2, 5, 8, 10, 15, 20, 25]\n\nassert f(g())\n",
        "idx_generation": 220,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there is a pair of numbers in the array that sum up to the target\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 3, 5, 7, 9]\n\nassert f(g())\n",
        "idx_generation": 221,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], n=10) -> bool:\n    \"\"\"Check if the given array has exactly n distinct elements\"\"\"\n    return len(set(arr)) == n\n\ndef g(n=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 221,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if all numbers in the list are divisible by n\"\"\"\n    return all(num % n == 0 for num in nums)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[0] % 2 + 1\nassert f(g()) == False\n",
        "idx_generation": 222,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there are exactly two numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\ndef g(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return arr\nassert f(g())\n",
        "idx_generation": 222,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=5) -> bool:\n    \"\"\"Check if there exists two numbers in the list that multiply to give the target.\"\"\"\n    return any(target / num in numbers for num in numbers)\n\ndef g(target=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 222,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 222,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]], n=3) -> bool:\n    \"\"\"Check if a matrix is a magic square of size n x n\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all((row_sum == col_sum == diagonal_sum1 == diagonal_sum2) for row_sum, col_sum in zip(row_sums, col_sums))\n\ndef g(n=3):\n    return [[4, 9, 2], [3, 5, 7], [8, 1, 6]]\n\nassert f(g())\n",
        "idx_generation": 223,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=0) -> bool:\n    \"\"\"Check if there are three numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(lst) - 2):\n        for j in range(i+1, len(lst) - 1):\n            for k in range(j+1, len(lst)):\n                if lst[i] + lst[j] + lst[k] == target:\n                    return True\n    return False\n\ndef g(target=0):\n    return [target, -target, 0]\n\nassert f(g())\n",
        "idx_generation": 223,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target=0) -> bool:\n    \"\"\"Check if there are two distinct numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [target // 2, target // 2 + (target % 2)]\n\nassert f(g())\n",
        "idx_generation": 223,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=50):\n    return list(range(1, target))\n\nassert f(g())\n",
        "idx_generation": 224,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is a diagonal matrix.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\nassert f(g())\n",
        "idx_generation": 224,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a matrix is an identity matrix.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i == j and matrix[i][j] != 1:\n                return False\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n\nassert f(g())\n",
        "idx_generation": 224,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if the sum of any three numbers in a list is equal to a given target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=20):\n    nums = [5, 10, 15, 3, 8, 2]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 224,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given matrix that sum up to the target\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i, rows):\n                for l in range(cols):\n                    if matrix[i][j] + matrix[k][l] == target:\n                        return True\n    return False\ndef g(target=10):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\nassert f(g())\n",
        "idx_generation": 225,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that multiply to the target\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\ndef g(target=50):\n    nums = [5, 10, 15, 20, 25, 30]\n    return nums\nassert f(g())\n",
        "idx_generation": 225,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=99) -> bool:\n    \"\"\"Check if all rows in the matrix contain the target number.\"\"\"\n    for row in matrix:\n        if target not in row:\n            return False\n    return True\ndef g(target=99):\n    return [[target, target, target], [target, target, target], [target, target, target]]\nassert f(g())\n",
        "idx_generation": 225,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num_list: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if num_list[i] + num_list[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 225,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a subsequence in the list whose sum is equal to the target sum\"\"\"\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            subsequence = nums[i:j+1]\n            if sum(subsequence) == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 225,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=12) -> bool:\n    \"\"\"Check if there exists two numbers in the list that multiply up to the target.\"\"\"\n    return any(target / num in numbers for num in numbers)\n\ndef g(target=12):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 226,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=4) -> bool:\n    \"\"\"Check if the given matrix is a square matrix of size n x n and if the sum of each row is equal to the sum of each column.\"\"\"\n    if all(len(row) == n for row in matrix) and len(matrix) == n:\n        row_sums = [sum(row) for row in matrix]\n        col_sums = [sum(col) for col in zip(*matrix)]\n        return all(row_sum == col_sum for row_sum, col_sum in zip(row_sums, col_sums))\n    return False\ndef g(n=4):\n    return [[1, 2, 3, 4], [2, 3, 4, 1], [3, 4, 1, 2], [4, 1, 2, 3]]\nassert f(g())\n",
        "idx_generation": 226,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the given list, such that the sum of the subarray is divisible by k.\"\"\"\n    n = len(nums)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + nums[i - 1]\n    for i in range(0, n - k + 1):\n        subarray_sum = prefix_sum[i + k] - prefix_sum[i]\n        if subarray_sum % k == 0:\n            return True\n    return False\ndef g(k=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 226,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(arr: List[int], target=5) -> bool:\n    \"\"\"Check if there exist three numbers in the list whose sum is equal to the target value.\"\"\"\n    return any(target - x - y in arr for x in arr for y in arr)\ndef g(target=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 228,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=12) -> bool:\n    \"\"\"Check if there exists a subarray of numbers in the list whose sum is equal to the target.\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False\n\ndef g(target=12):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 228,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in a list that add up to the target value\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 229,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Check if there is a pair of numbers in the array that multiply to the target\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] * arr[j] == target:\n                return True\n    return False\n\ndef g(target=20):\n    return [2, 4, 5, 10]\n\nassert f(g())\n",
        "idx_generation": 230,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=15) -> bool:\n    \"\"\"Check if there is a triplet of numbers in the array that sum up to the target\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 230,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(squares: List[List[int]], m=10, n=10) -> bool:\n    \"\"\"Position min(m, n) <= 10 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 3 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m=10, n=10):\n    k = min(m, n)\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 3 * k == len({t for (i, j) in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for (i, j) in enumerate(p)]\nassert f(g())\n",
        "idx_generation": 231,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 231,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if there is a pair of numbers in numbers that subtracts to the target.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] - numbers[j] == target:\n                return True\n    return False\n\ndef g(target=100):\n    numbers = [200, 150, 100, 50, 0, -50, -100, -150]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 232,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Given a list of numbers, determine if any two numbers in the list sum up to the target value.\"\"\"\n    for i, num1 in enumerate(numbers):\n        for j, num2 in enumerate(numbers[i+1:]):\n            if num1 + num2 == target:\n                return True\n    return False\n\ndef g(target=20):\n    return [10, 5, 3, 8, 12]\n\nassert f(g())\n",
        "idx_generation": 232,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists three numbers in the list that sum up to the target number\"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target: int):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target\n\nassert f(*g(18))\n",
        "idx_generation": 233,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a difference less than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if abs(nums[i] - nums[j]) < target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g(), target=2)\n",
        "idx_generation": 233,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose sum is equal to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), 9)\n",
        "idx_generation": 235,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [5, 7, 8, 10, 12]\n\nassert f(g())\n",
        "idx_generation": 235,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Find the pair of distinct integers from the given list that sum up to 20.\"\"\"\n    return any((nums[i] + nums[j] == 20 for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g():\n    return [5, 10, 15, 20, 25]\nassert f(g())\n",
        "idx_generation": 235,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that have a product greater than the target value.\"\"\"\n    return any(num1 * num2 > target for i, num1 in enumerate(nums) for num2 in nums[i+1:])\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 236,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if all numbers in the list are positive.\"\"\"\n    for num in nums:\n        if num <= 0:\n            return False\n    return True\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 237,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a sum greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] > target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g(), target=2)\n",
        "idx_generation": 237,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a difference less than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if abs(nums[i] - nums[j]) < target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g(), target=2)\n",
        "idx_generation": 237,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find three numbers in the list 'nums' that have a difference greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if abs(nums[i] - nums[j]) > target and abs(nums[j] - nums[k]) > target and abs(nums[i] - nums[k]) > target:\n                    return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g(), target=2)\n",
        "idx_generation": 237,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=3, b=7, c=10) -> bool:\n    \"\"\"Check if the number is equal to the sum of the first c multiples of a and b\"\"\"\n    return n == sum([a*i + b*i for i in range(c)])\ndef g(a=3, b=7, c=10):\n    return sum([a*i + b*i for i in range(c)])\nassert f(g())\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == 15\ndef g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == 15:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == 6\ndef g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == 6:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\ndef f(date_str: str, target_year=2022) -> bool:\n    \"\"\"Check if the year of the given date is equal to the target year\"\"\"\n    date = datetime.strptime(date_str, '%Y-%m-%d')\n    return date.year == target_year\n\ndef g(target_year=2022):\n    return '2022-05-15'\n\nassert f(g())\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target_sum=100) -> bool:\n    \"\"\"Find n consecutive integers whose sum is equal to the target sum\"\"\"\n    start = 1\n    while start + n <= target_sum:\n        numbers = list(range(start, start + n))\n        if sum(numbers) == target_sum:\n            return True\n        start += 1\n    return False\n\ndef g(target_sum=100):\n    n = 2\n    while n <= target_sum:\n        if f(n, target_sum):\n            return n\n        n += 1\n    return -1\n\nassert f(g())\n",
        "idx_generation": 238,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(numbers: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g())\n",
        "idx_generation": 239,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Given a list of integers, determine if there exists a pair of numbers whose sum is equal to a target value.\n    Return True if such a pair exists, and False otherwise.\"\"\"\n    target = 10\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 239,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Given a list of integers, determine if there exists a subsequence of three numbers in increasing order.\n    Return True if such a subsequence exists, and False otherwise.\"\"\"\n    n = len(nums)\n    min_val = float('inf')\n    second_min_val = float('inf')\n\n    for i in range(n):\n        if nums[i] <= min_val:\n            min_val = nums[i]\n        elif nums[i] <= second_min_val:\n            second_min_val = nums[i]\n        else:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 239,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target\"\"\"\n    target = 100\n    for num1 in nums:\n        for num2 in nums:\n            if num1 * num2 == target:\n                return True\n    return False\n\ndef g():\n    return [i for i in range(1, 11)]\n\nassert f(g())\n",
        "idx_generation": 239,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=7) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 240,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[2, 4, 6, 8], target=2) -> bool:\n    \"\"\"Check if any number in the list is divisible by the target number.\"\"\"\n    return any((i % target == 0 for i in nums)) and target != 0\ndef g(nums=[2, 4, 6, 8], target=2):\n    return target\nassert f(g())\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lb: List[bool], trips=[[1, 1, 1], [1, 0, 0], [1, 1, 1], [0, 0, 0]]) -> bool:\n    \"\"\"Given a list of lists of triples of integers, return True for each list with a total of less than 2 and False for each other list.\"\"\"\n    return len(lb) == len(trips) and all((b is True if sum(s) < 2 else b is False for (b, s) in zip(lb, trips)))\ndef g(trips=[[1, 1, 1], [1, 0, 0], [1, 1, 1], [0, 0, 0]]):\n    return [sum(s) < 2 for s in trips]\nassert f(g())\n",
        "idx_generation": 241,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find the sum of the elements in the matrix that are greater than the target value.\"\"\"\n    return sum([sum(row) for row in matrix if sum(row) > target]) > 0\ndef g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g())\n",
        "idx_generation": 242,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=3, threshold=0.9, seq=[0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose average is greater than or equal to threshold\"\"\"\n    seq_avg = sum(seq[start:start+k]) / k\n    return seq_avg >= threshold\ndef g(k=3, threshold=0.9, seq=[0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5]):\n    def seq_avg(start):\n        return sum(seq[start:start+k]) / k\n    return max(range(len(seq) - k + 1), key=seq_avg)\nassert f(g())\n",
        "idx_generation": 242,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=4, threshold=0.7, seq=[0.3, 0.6, 0.9, 1.2, 1.5, 1.8, 2.1, 2.4]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose average is greater than or equal to threshold\"\"\"\n    seq_avg = sum(seq[start:start+k]) / k\n    return seq_avg >= threshold\ndef g(k=4, threshold=0.7, seq=[0.3, 0.6, 0.9, 1.2, 1.5, 1.8, 2.1, 2.4]):\n    def seq_avg(start):\n        return sum(seq[start:start+k]) / k\n    return max(range(len(seq) - k + 1), key=seq_avg)\nassert f(g())\n",
        "idx_generation": 242,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=5, c=20) -> bool:\n    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"\n    return n + a == sum([b * i for i in range(1, c + 1)])\ndef g(a=10, b=5, c=20):\n    return -a + sum([b * i for i in range(1, c + 1)])\nassert f(g())\n",
        "idx_generation": 243,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=30) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list whose sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(nums=[10, 5, 15, 20, 25, 30], target=30):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 244,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there is a subarray in the list that sums up to the given target\"\"\"\n    for i in range(len(nums)):\n        current_sum = nums[i]\n        if current_sum == target:\n            return True\n        for j in range(i+1, len(nums)):\n            current_sum += nums[j]\n            if current_sum == target:\n                return True\n    return False\n\ndef g(target=15):\n    nums = [5, 5, 5, 5, 5]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 245,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, divisor=10) -> bool:\n    \"\"\"Check if the given number is a multiple of the divisor.\"\"\"\n    return n % divisor == 0\n\ndef g(divisor=10):\n    return divisor * 5\n\nassert f(g())\n",
        "idx_generation": 245,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists two numbers in the list whose sum is equal to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [25, 50, 75, 100, 125]\n\nassert f(g())\n\n",
        "idx_generation": 246,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5], 9\n\nassert f(*g())\n",
        "idx_generation": 246,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there is a subarray in the list that sums up to the target value\"\"\"\n    for i in range(len(nums)):\n        current_sum = nums[i]\n        if current_sum == target:\n            return True\n        for j in range(i+1, len(nums)):\n            current_sum += nums[j]\n            if current_sum == target:\n                return True\n    return False\n\ndef g(target=0):\n    nums = [1, 2, -3, 4, 5]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 247,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(grades: List[int], threshold: int = 80) -> bool:\n    \"\"\"Given a list of grades, check if the average grade is above the threshold.\"\"\"\n    average = sum(grades) / len(grades)\n    return average > threshold\ndef g(grades: List[int] = [90, 85, 92, 88, 79], threshold: int = 80):\n    return grades\nassert f(g())\n",
        "idx_generation": 247,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], target: str = \"Alice\") -> bool:\n    \"\"\"Given a list of names, check if the target name is present.\"\"\"\n    return target in names\ndef g(names: List[str] = [\"Alice\", \"Bob\", \"Charlie\"], target: str = \"Alice\"):\n    return names\nassert f(g())\n",
        "idx_generation": 247,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=15) -> bool:\n    \"\"\"Find whether the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=15):\n    return [[1, 3, 5], [7, 9, 11], [13, 15, target]]\n\nassert f(g())\n\n",
        "idx_generation": 248,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=40) -> bool:\n    \"\"\"Find whether the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=40):\n    return [[4, 8, 12], [16, 20, 24], [28, 32, target]]\n\nassert f(g())\n\n",
        "idx_generation": 248,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(num: int, divisors: list=[2, 3, 5, 7]) -> bool:\n    \"\"\"Check if the given number is divisible by all the divisors\"\"\"\n    for divisor in divisors:\n        if num % divisor != 0:\n            return False\n    return True\n\ndef g(divisors=[2, 3, 5, 7]):\n    num = 210\n    return num, divisors\n\nassert f(*g())\n",
        "idx_generation": 248,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(n: int, lst=[3, 6, 9, 12, 15], upper_bound=1000) -> bool:\n    \"\"\"Check if n is a multiple of all numbers in the list and is less than or equal to the upper_bound\"\"\"\n    return all((n % i == 0 for i in lst)) and 0 < n <= upper_bound\n\ndef g(lst=[3, 6, 9, 12, 15], upper_bound=1000):\n    ans = 1\n    for i in lst:\n        (m, n) = (min(i, ans), max(i, ans))\n        while m > 0:\n            (m, n) = (n % m, m)\n        ans *= i // n\n    return ans\n\nassert f(g())\n",
        "idx_generation": 249,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target=15):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums\nassert f(g())\n",
        "idx_generation": 249,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiplies to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 250,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a target number, check if there exists a pair of numbers in the list that sums up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    nums = [2, 4, 6, 8]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 251,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_diff=5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list 'nums' whose difference is less than or equal to the target_diff.\"\"\"\n    return any((abs(nums[i] - nums[j]) <= target_diff for i in range(len(nums)) for j in range(i + 1, len(nums))))\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\nassert f(g(), target_diff=5)\n",
        "idx_generation": 251,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any(target - num in nums for num in nums)\n\ndef g(target=20):\n    return [2, 4, 6, 8, 10, 12]\nassert f(g())\n",
        "idx_generation": 251,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any(target - num in nums for num in nums)\n\ndef g(target=5):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 251,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are three numbers in the list that adds up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 251,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that add up to the target value.\"\"\"\n    return any((numbers[i] + numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\nassert f(g())\n",
        "idx_generation": 253,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find three numbers in the list 'nums' that have a sum greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] > target:\n                    return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 253,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are two consecutive numbers in the list 'nums' whose sum is greater than the target value.\"\"\"\n    for i in range(len(nums) - 1):\n        if nums[i] + nums[i + 1] > target:\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 253,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n=10) -> bool:\n    \"\"\"Check if the list contains n distinct even numbers\"\"\"\n    return len(set(arr)) == n and all((num % 2 == 0 for num in arr))\ndef g(n=10):\n    return list(range(2, 2*n+1, 2))\nassert f(g())\n",
        "idx_generation": 253,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains a subarray with a sum of zero\"\"\"\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            subarray = nums[i:j+1]\n            if sum(subarray) == 0:\n                return True\n    return False\n\ndef g():\n    return [1, -2, 3, 4, -5]\n\nassert f(g())\n",
        "idx_generation": 254,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> int:\n    \"\"\"Find the maximum product of two distinct numbers in a given list of integers\"\"\"\n    max_product = float('-inf')\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7]):\n    return nums\n\nassert f(g()) == 42\n",
        "idx_generation": 255,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, a=123456789) -> bool:\n    \"\"\"Check if the absolute value of x is equal to a\"\"\"\n    return abs(x) == a\n\ndef g(a=123456789):\n    return a\n\nassert f(g())\n",
        "idx_generation": 255,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=5, b=3, c=10) -> bool:\n    \"\"\"Check if n can be expressed as a - b * (the sum of the first c integers)\"\"\"\n    return n == a - b * sum([i for i in range(c)])\ndef g(a=5, b=3, c=10):\n    return a - b * sum([i for i in range(c)])\nassert f(g())\n",
        "idx_generation": 256,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Determine if the sum of any two numbers in a list is greater than the target value.\"\"\"\n    return any(x + y > target for x in arr for y in arr if x != y)\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g(), 10)\n",
        "idx_generation": 256,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a number in the list that is divisible by the target number\"\"\"\n    return any(num % target == 0 for num in nums)\n\ndef g(target: int):\n    return [12, 7, 15, 21, 30], target\n\nassert f(*g(5))\n",
        "idx_generation": 257,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a number in the list that is greater than the target number\"\"\"\n    return any(num > target for num in nums)\n\ndef g(target: int):\n    return [2, 4, 6, 8, 10], target\n\nassert f(*g(5))\n",
        "idx_generation": 257,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list 'nums' whose sum is equal to the target_sum.\"\"\"\n    return any((nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums))))\n\ndef g(nums=[10, 5, 3, 7, 2, 8, 9, 12]):\n    return nums\n\nassert f(g(), target_sum=20)\n",
        "idx_generation": 257,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(squares: List[List[int]], m=6, n=6) -> bool:\n    \"\"\"Position min(m, n) <= 6 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m=6, n=6):\n    k = min(m, n)\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len({t for (i, j) in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for (i, j) in enumerate(p)]\nassert f(g())\n",
        "idx_generation": 258,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find whether the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=0):\n    return [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, target, 11]]\n\nassert f(g())\n",
        "idx_generation": 258,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target=5) -> bool:\n    \"\"\"Check if there exists a word in the list whose length is equal to the target\"\"\"\n    return any(len(word) == target for word in words)\ndef g(target=5):\n    return [\"apple\", \"banana\", \"orange\", \"kiwi\", \"melon\"]\nassert f(g())\n\n",
        "idx_generation": 259,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(n: int, lst=[1, 4, 9, 16, 25, 36, 49, 64], k=2) -> bool:\n    \"\"\"Given a list of integers and an integer k, determine if there are at least n integers in the list that are perfect squares.\"\"\"\n    return sum((1 for num in lst if math.isqrt(num) == num)) >= n\ndef g(lst=[1, 4, 9, 16, 25, 36, 49, 64], k=2):\n    return len([num for num in lst if math.isqrt(num) == num])\nassert f(g())\n",
        "idx_generation": 260,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Given a list of numbers, find any two numbers that sum up to the target value.\nSample input:\n[2, 3, 5, 7, 9]\nSample output:\nTrue\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g():\n    return [1, 9, 2, 8]\nassert f(g())\n",
        "idx_generation": 260,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are two elements in the list that sum up to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 15\n\nassert f(*g())\n",
        "idx_generation": 261,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(arr: List[int], target: int) -> bool:\n    \"\"\"Check if there are three elements in the list that sum up to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 18\n\nassert f(*g())\n",
        "idx_generation": 261,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=5, c=20) -> bool:\n    \"\"\"Find n such that n * a is equal to the product of b and the sum of the first c integers\"\"\"\n    return n * a == b * sum([i for i in range(1, c + 1)])\ndef g(a=10, b=5, c=20):\n    return b * sum([i for i in range(1, c + 1)]) / a\nassert f(g())\n\n",
        "idx_generation": 261,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], row_sum=100) -> bool:\n    \"\"\"Check if any row in the matrix has a sum equal to the given row_sum.\"\"\"\n    for row in matrix:\n        if sum(row) == row_sum:\n            return True\n    return False\n\ndef g(row_sum=100):\n    return [[50, 30, 20], [70, 10, 20], [40, 60, 0]]\n\nassert f(g())\n",
        "idx_generation": 263,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that multiply to the target\"\"\"\n    seen = set()\n    for num in nums:\n        if target % num == 0 and target // num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6]\n    return nums\nassert f(g())\n",
        "idx_generation": 264,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [i for i in range(target)]\n\nassert f(g())\n",
        "idx_generation": 266,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that sum up to the target\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))\ndef g(nums=[2, 3, 5, 7, 8]):\n    return nums\nassert f(g())\n",
        "idx_generation": 268,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that divide the target value.\"\"\"\n    return any((target % numbers[i] == 0) for i in range(len(numbers)))\ndef g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\nassert f(g())\n",
        "idx_generation": 269,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if any two numbers in the list can be added to achieve the target value.\"\"\"\n    return any(numbers[i] + numbers[j] == target for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target=10):\n    return [1, 5, 3, 7, 2]\nassert f(g())\n",
        "idx_generation": 271,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Check if there exists two numbers in the list that add up to the target.\"\"\"\n    return any(target - num in numbers for num in numbers)\n\ndef g(target=0):\n    return [0, 1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 271,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=4, upper=10000, seq=[7, 3, 1, 5, 2, 9, 8, 4, 6]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose product is minimal, possibly looping around\"\"\"\n    prod = 1\n    for i in range(start, start + k):\n        prod *= seq[i]\n    return prod <= upper\ndef g(k=4, upper=10000, seq=[7, 3, 1, 5, 2, 9, 8, 4, 6]):\n    def prod(start):\n        ans = 1\n        for i in range(start, start + k):\n            ans *= seq[i]\n        return ans\n    return min(range(-len(seq), len(seq) - k + 1), key=prod)\nassert f(g())\n",
        "idx_generation": 271,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the matrix is an upper triangular matrix.\"\"\"\n    n = len(matrix)\n    for i in range(1, n):\n        for j in range(i):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g(target=0):\n    return [[1, 2, 3], [0, 4, 5], [0, 0, 6]]\n\nassert f(g())\n",
        "idx_generation": 272,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value, without using the built-in 'any' function.\"\"\"\n    for num in nums:\n        if target - num in nums:\n            return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 273,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums1: List[int], nums2: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers, one from nums1 and one from nums2, whose sum is equal to the target number\"\"\"\n    return any(a + b == target for a in nums1 for b in nums2)\n\ndef g(target: int):\n    return [1, 2, 3, 4], [5, 6, 7, 8], target\n\nassert f(*g(10))\n",
        "idx_generation": 273,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[5, 10, 15, 2, 7]):\n    return nums\nassert f(g())\n",
        "idx_generation": 273,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=8, n=8) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == 32\ndef g(m=8, n=8):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == 32:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 275,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=4, n=4) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == 8\ndef g(m=4, n=4):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == 8:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 275,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(colors: List[str], target=\"red\") -> bool:\n    \"\"\"Check if there exists a color in the list that matches the target color\"\"\"\n    return any(color == target for color in colors)\ndef g(colors=[\"blue\", \"green\", \"red\", \"yellow\", \"orange\"]):\n    return colors\nassert f(g())\n",
        "idx_generation": 275,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a sublist in lst whose sum is equal to the target.\"\"\"\n    n = len(lst)\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if sum(lst[i:j]) == target:\n                return True\n    return False\n\ndef g(target=100):\n    return list(range(1, target + 1))\n\nassert f(g())\n",
        "idx_generation": 276,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers from the given list that add up to the target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 276,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there are three numbers in the given list that add up to the target value.\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g())\n",
        "idx_generation": 276,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Find a triplet of numbers from the list that add up to the target number.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\n\ndef g(target=20):\n    return [2, 4, 6, 8, 10, 12, 14, 16, 18]\n\nassert f(g())\n",
        "idx_generation": 276,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=30) -> bool:\n    \"\"\"Find a quadruplet of numbers from the list that add up to the target number.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                for l in range(k+1, len(numbers)):\n                    if numbers[i] + numbers[j] + numbers[k] + numbers[l] == target:\n                        return True\n    return False\n\ndef g(target=30):\n    return [3, 6, 9, 12, 15, 18, 21, 24, 27]\n\nassert f(g())\n",
        "idx_generation": 276,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(d: Dict[str, int], threshold=100) -> bool:\n    \"\"\"Check if any value in the dictionary is greater than the specified threshold.\"\"\"\n    return any(value > threshold for value in d.values())\n\ndef g(threshold=100):\n    return {'a': 50, 'b': 150, 'c': 75}\n\nassert f(g())\n",
        "idx_generation": 277,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(seq: List[int], target_sum=0) -> bool:\n    \"\"\"Find a subsequence of seq whose sum is not equal to target_sum\"\"\"\n    for i in range(len(seq)):\n        for j in range(i+1, len(seq)+1):\n            if sum(seq[i:j]) != target_sum:\n                return True\n    return False\n\ndef g(target_sum=0):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 278,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Given a list of integers, find three distinct numbers such that their sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=100):\n    return [i for i in range(1, target+1)]\n\nassert f(g())\n",
        "idx_generation": 278,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(x: int, k=5, lower=-100, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Determine if there exists a subsequence of length k in seq whose sum is greater than or equal to lower\"\"\"\n    subseq = seq[x:x+k] + seq[:k-(len(seq)-x)]\n    return sum(subseq) >= lower\n\ndef g(k=5, lower=-100, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> int:\n    max_sum = max(sum(seq[i:i+k]) for i in range(len(seq) - k + 1))\n    return max_sum\n\nassert f(g())\n",
        "idx_generation": 279,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=5) -> bool:\n    \"\"\"Given a number n, check if it is divisible by k.\"\"\"\n    return n % k == 0\n\ndef g(k=5):\n    return k * 10\n\nassert f(g())\n",
        "idx_generation": 280,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sum up to the specified target.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 281,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    return any(target - num in nums for num in nums)\ndef g(target=0):\n    return [0, 0, 0, 0, 0]\nassert f(g())\n\n",
        "idx_generation": 281,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if the product of any two numbers in the list is equal to the target value.\"\"\"\n    return any((numbers[i] * numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\nassert f(g())\n",
        "idx_generation": 282,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with a sum equal to the maximum element in the list.\"\"\"\n    max_elem = max(arr)\n    for i in range(len(arr)):\n        subarray_sum = 0\n        for j in range(i, len(arr)):\n            subarray_sum += arr[j]\n            if subarray_sum == max_elem:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 10]\n\nassert f(g())\n\n",
        "idx_generation": 283,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(seq: List[int], target_sum=10) -> bool:\n    \"\"\"Find a subsequence of seq whose sum is less than or equal to target_sum\"\"\"\n    for i in range(len(seq)):\n        for j in range(i+1, len(seq)+1):\n            if sum(seq[i:j]) <= target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5, 6, 7]\n\nassert f(g())\n",
        "idx_generation": 284,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(seq: List[int], target_sum=20) -> bool:\n    \"\"\"Find a subsequence of seq whose sum is equal to target_sum\"\"\"\n    for i in range(len(seq)):\n        for j in range(i+1, len(seq)+1):\n            if sum(seq[i:j]) == target_sum:\n                return True\n    return False\n\ndef g(target_sum=20):\n    return [1, 2, 3, 4, 5, 6, 7]\n\nassert f(g())\n",
        "idx_generation": 284,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(seq: List[int], target_sum=20) -> bool:\n    \"\"\"Find a subsequence of seq whose sum is equal to target_sum\"\"\"\n    for i in range(len(seq)):\n        for j in range(i+1, len(seq)+1):\n            if sum(seq[i:j]) == target_sum:\n                return True\n    return False\n\ndef g(target_sum=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 284,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(seq: List[int], target_sum=20) -> bool:\n    \"\"\"Find a subsequence of seq whose sum is greater than target_sum\"\"\"\n    for i in range(len(seq)):\n        for j in range(i+1, len(seq)+1):\n            if sum(seq[i:j]) > target_sum:\n                return True\n    return False\n\ndef g(target_sum=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 284,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(li: List[int], target=100) -> bool:\n    \"\"\"Find a pair of numbers in the list that add up to the target value\"\"\"\n    for i in range(len(li)):\n        for j in range(i+1, len(li)):\n            if li[i] + li[j] == target:\n                return True\n    return False\ndef g(target=100):\n    return [target//2, target//2]\nassert f(g())\n",
        "idx_generation": 285,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(values: List[float], threshold=0.5) -> bool:\n    \"\"\"Check if any value in the list is greater than the threshold.\"\"\"\n    return any(value > threshold for value in values)\ndef g(threshold=0.5):\n    return [random.random() for _ in range(10)]\nassert f(g())\n",
        "idx_generation": 285,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n=7) -> bool:\n    \"\"\"Check if the given number is present in the list\"\"\"\n    return n in arr\ndef g(n=7):\n    return [1, 2, 3, 4, 5, 6, n, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 286,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, target-1]\nassert f(g())\n",
        "idx_generation": 286,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=20) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target sum\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target_sum:\n                    return True\n    return False\n\ndef g(target_sum=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 287,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a symmetric matrix\"\"\"\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[i])))\n\ndef g():\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]\nassert f(g())\n",
        "idx_generation": 287,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=40) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target\"\"\"\n    return any((nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(nums=[10, 20, 30, 40, 50]):\n    return nums\nassert f(g())\n",
        "idx_generation": 287,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if the matrix is symmetric with respect to the main diagonal.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\ndef g(target=0):\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "idx_generation": 288,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_diff=5) -> bool:\n    \"\"\"Check if there exist two distinct elements in the list whose difference is equal to target_diff\"\"\"\n    return any(abs(arr[i] - arr[j]) == target_diff for i in range(len(arr)) for j in range(i+1, len(arr)))\n\ndef g(target_diff=5):\n    return [n for n in range(1, 11)]\n\nassert f(g())\n",
        "idx_generation": 289,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_count=3) -> bool:\n    \"\"\"Check if there exist target_count consecutive numbers in the list\"\"\"\n    return any(arr[i:i+target_count] == list(range(arr[i], arr[i]+target_count)) for i in range(len(arr)-target_count+1))\n\ndef g(target_count=3):\n    return [n for n in range(1, 11)]\n\nassert f(g())\n",
        "idx_generation": 289,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a sum equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 290,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=2, c=7) -> bool:\n    \"\"\"Find n such that (the product of the first b powers of c) + a == n\"\"\"\n    return (c ** b) + a == n\ndef g(a=10, b=2, c=7):\n    return (c ** b) + a\nassert f(g())\n",
        "idx_generation": 290,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 292,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if any column in the matrix contains all even numbers.\"\"\"\n    for j in range(len(matrix[0])):\n        if all(matrix[i][j] % 2 == 0 for i in range(len(matrix))):\n            return True\n    return False\n\ndef g(target=0):\n    matrix = [[2, 1, 8], [4, 3, 10], [6, 5, 12]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 292,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find three numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 293,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=8, n=8) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == m * n - 1\ndef g(m=8, n=8):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == m * n - 1:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 293,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == 10\ndef g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == 10:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 293,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list whose sum is equal to the target sum\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    numbers = [1, 5, 3, 8, 2]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 293,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target: int = 0) -> bool:\n    \"\"\"Given a list of integers, check if there exists a pair of numbers that sum up to the target value.\"\"\"\n    num_set = set()\n    for num in arr:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g(), target=7)\n",
        "idx_generation": 294,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are two elements in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5, 6]\n    return nums\nassert f(g())\n",
        "idx_generation": 294,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Given a list of integers, find three distinct numbers such that their sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=20):\n    return [i for i in range(1, target+1)]\n\nassert f(g())\n",
        "idx_generation": 294,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=25):\n    return [2, 5, 7, 9, 12, 15, 18, 20]\n\nassert f(g())\n",
        "idx_generation": 295,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there are k consecutive numbers in the list\"\"\"\n    n = len(nums)\n    for i in range(n - k + 1):\n        if nums[i:i+k] == list(range(nums[i], nums[i] + k)):\n            return True\n    return False\n\ndef g(k=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8]\n\nassert f(g())\n",
        "idx_generation": 295,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(numbers: List[int], target=36) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value\"\"\"\n    return any((numbers[i] + numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\n\ndef g(target=36):\n    return [12, 5, 8, 21, 15, 3]\n\nassert f(g())\n",
        "idx_generation": 296,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(strings: List[str], target_length=5) -> bool:\n    \"\"\"Check if there exists a string in the list that has the target length\"\"\"\n    return any(len(string) == target_length for string in strings)\n\ndef g(target_length=5):\n    return [\"apple\", \"banana\", \"kiwi\", \"grapes\", \"orange\"]\n\nassert f(g())\n",
        "idx_generation": 296,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose sum is equal to target.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g():\n    numbers = [1, 2, 3, 4, 5]\n    target = 7\n    return numbers, target\n\nassert f(*g())\n",
        "idx_generation": 296,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Determine if the given list is a palindrome.\"\"\"\n    return numbers == numbers[::-1]\n\ndef g():\n    numbers = [1, 2, 3, 2, 1]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 296,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(seq: List[int], target_sum=20) -> bool:\n    \"\"\"Find a subsequence of seq whose sum is less than target_sum\"\"\"\n    for i in range(len(seq)):\n        for j in range(i+1, len(seq)+1):\n            if sum(seq[i:j]) < target_sum:\n                return True\n    return False\n\ndef g(target_sum=20):\n    return [1, 2, 3, 4, 5, 6, 7]\n\nassert f(g())\n\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(seq: List[int], target_sum=50) -> bool:\n    \"\"\"Find the maximum sum of a subsequence of seq\"\"\"\n    max_sum = 0\n    for i in range(len(seq)):\n        for j in range(i+1, len(seq)+1):\n            subseq_sum = sum(seq[i:j])\n            if subseq_sum > max_sum:\n                max_sum = subseq_sum\n    return max_sum\n\ndef g(target_sum=50):\n    return [1, 2, 3, 4, 5, 6, 7]\n\nassert f(g()) == 28\n\n",
        "idx_generation": 297,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is a symmetric matrix.\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 298,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(target: int):\n    return [1, 3, 5, 7, 9], target\n\nassert f(*g(15))\n",
        "idx_generation": 298,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the difference between any two numbers in the list is equal to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if abs(nums[i] - nums[j]) == target:\n                return True\n    return False\n\ndef g(target: int):\n    return [1, 3, 5, 7, 9], target\n\nassert f(*g(2))\n",
        "idx_generation": 298,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the sum of all numbers in a list is greater than 100\"\"\"\n    return sum(numbers) > 100\n\ndef g():\n    return [50, 60, 70, 80]\n\nassert f(g())\n",
        "idx_generation": 299,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import *\ndef f(tour: List[List[int]], m=8, n=8) -> bool:\n    \"\"\"Find a closed tour of knight moves on an m x n chess-board that visits each square exactly once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == m * n\n\ndef g(m=8, n=8):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == m * n:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 299,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    return any(target - num in nums for num in nums)\n\ndef g(nums=[5, 10, 15]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 300,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Find if there exists a pair of numbers in the list whose sum is equal to the target sum\"\"\"\n    seen = set()\n    for num in nums:\n        if target_sum - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target_sum=10):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 301,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\ndef g(numbers=[3, 5, 8, 2, 7]):\n    return numbers\nassert f(g())\n\n",
        "idx_generation": 302,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there is a triplet of numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 302,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, k=4, lower=-15, seq=[-2, -4, -6, -8, -10, -12, -14, -16, -18, -20]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is negative, possibly looping around\"\"\"\n    total = 0\n    for i in range(x, x + k):\n        total += seq[i]\n    return total < 0\ndef g(k=4, lower=-15, seq=[-2, -4, -6, -8, -10, -12, -14, -16, -18, -20]):\n    def sum(x):\n        result = 0\n        for i in range(x, x + k):\n            result += seq[i]\n        return result\n    return max(range(-len(seq), len(seq) - k + 1), key=sum)\nassert f(g())\n",
        "idx_generation": 303,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Check if there exist four numbers in the list whose sum is equal to the target value.\"\"\"\n    return any(target - w - x - y in arr for w in arr for x in arr for y in arr)\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert f(g())\n",
        "idx_generation": 303,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n=3) -> bool:\n    \"\"\"Check if there exist n consecutive numbers in the list whose sum is equal to zero.\"\"\"\n    for i in range(len(arr)-n+1):\n        if sum(arr[i:i+n]) == 0:\n            return True\n    return False\ndef g(n=3):\n    return [1, 2, 3, -1, -2, -3, 4, 5, 6]\nassert f(g())\n",
        "idx_generation": 303,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers from the list whose product is equal to a given value.\"\"\"\n    pair_sums = []\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            pair_sums.append(numbers[i]*numbers[j])\n    return target in pair_sums\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8]\n\nassert f(g())\n",
        "idx_generation": 305,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in a list that have a difference equal to the target value.\"\"\"\n    return any((abs(nums[i]-nums[j]) == target for i in range(len(nums)) for j in range(i+1, len(nums))))\n\ndef g(target=10):\n    return [1, 2, 3, 4, 10, 12]\n\nassert f(g())\n",
        "idx_generation": 305,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Any\n\ndef f(arr: List[Any], target: Any) -> bool:\n    \"\"\"Check if the target element is present in the given list.\"\"\"\n    return target in arr\n\ndef g(arr=[True, False, True, True]):\n    return arr\n\nassert f(g(), False)\n",
        "idx_generation": 307,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a subarray in the list that sums up to the target number\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            if sum(arr[i:j]) == target:\n                return True\n    return False\n\ndef g(target=50):\n    return [10, 20, 30, 40, 50, 60, 70]\n\nassert f(g())\n",
        "idx_generation": 308,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that sum up to the target\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\nassert f(g())\n",
        "idx_generation": 308,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a subarray of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        total = 0\n        for j in range(i, len(nums)):\n            total += nums[j]\n            if total == target:\n                return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\nassert f(g())\n",
        "idx_generation": 308,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 309,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[2, 4, 6, 8, 10], target=10):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 309,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that sums up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g())\n",
        "idx_generation": 310,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is greater than the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] > target:\n                return True\n    return False\n\ndef g(target=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 310,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list whose sum is equal to the target value.\"\"\"\n    return any(nums[i] + nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 310,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=25) -> bool:\n    \"\"\"Find two numbers in the list that add up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=25):\n    return [10, 5, 8, 12, 3, 6, 15]\nassert f(g())\n",
        "idx_generation": 310,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(numbers: List[int], threshold=10) -> bool:\n    \"\"\"Check if any number in the list is greater than the specified threshold.\"\"\"\n    return any(num > threshold for num in numbers)\ndef g(threshold=10):\n    numbers = [1, 5, 10, 15, 20, 25, 30]\n    random.shuffle(numbers)\n    return numbers\nassert f(g())\n",
        "idx_generation": 311,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(names: List[str], target_length=7) -> bool:\n    \"\"\"Check if any name in the list has a length greater than the specified target length.\"\"\"\n    return any(len(name) > target_length for name in names)\ndef g(target_length=7):\n    names = ['John', 'Alice', 'Robert', 'Jennifer', 'Michael', 'Emily']\n    random.shuffle(names)\n    return names\nassert f(g())\n",
        "idx_generation": 311,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(scores: List[int], passing_score=70) -> bool:\n    \"\"\"Check if any score in the list is greater than or equal to the passing score.\"\"\"\n    return any(score >= passing_score for score in scores)\ndef g(passing_score=70):\n    scores = [65, 80, 75, 90, 60, 85]\n    random.shuffle(scores)\n    return scores\nassert f(g())\n",
        "idx_generation": 311,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=40, b=5, c=6) -> bool:\n    \"\"\"Find n such that (the sum of the first b multiples of c) - a == n\"\"\"\n    return sum([c * i for i in range(b)]) - a == n\ndef g(a=40, b=5, c=6):\n    return sum([c * i for i in range(b)]) - a\nassert f(g())\n",
        "idx_generation": 312,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a lower triangular matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(i+1, cols):\n            if matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    matrix = [[1, 0, 0], [2, 4, 0], [3, 5, 6]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 312,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a diagonal matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    matrix = [[1, 0, 0], [0, 4, 0], [0, 0, 6]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 312,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], target='Alice') -> bool:\n    \"\"\"Check if the target name is present in the list of names.\"\"\"\n    return target in names\ndef g(names=['John', 'Mary', 'Alice', 'Mark']):\n    return names\nassert f(g())\n",
        "idx_generation": 314,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int], a=-300, s=50, e=1000) -> bool:\n    \"\"\"Check if the list contains all the numbers in a given arithmetic sequence.\"\"\"\n    return all([num in x for num in range(a, e + 1, s)])\ndef g(a=-300, s=50, e=1000):\n    return list(range(a, e + 1, s))\nassert f(g())\n",
        "idx_generation": 316,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are three numbers in the list that sum up to the target value.\"\"\"\n    from itertools import combinations\n    for comb in combinations(nums, 3):\n        if sum(comb) == target:\n            return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums\nassert f(g())\n",
        "idx_generation": 316,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target: int):\n    return [2, 4, 6, 8, 10], target\n\nassert f(*g(12))\n",
        "idx_generation": 316,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[0, 1, 2, 3, 4, 5, 6], upper_bound=1000000) -> bool:\n    \"\"\"Check if the given number is present in the list of integers.\"\"\"\n    return n in nums and 0 < n <= upper_bound\n\ndef g(nums=[0, 1, 2, 3, 4, 5, 6], upper_bound=1000000):\n    return nums[3]\n\nassert f(g())\n",
        "idx_generation": 317,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(i: int, li=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target=40) -> bool:\n    \"\"\"Find the index of an item in a list. The index must be divisible by 3.\"\"\"\n    return li[i] == target and i % 3 == 0\n\ndef g(li=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target=40):\n    index = li.index(target)\n    return index if index % 3 == 0 else index + 3 - (index % 3)\n\nassert f(g())\n",
        "idx_generation": 317,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Find the two numbers that sum up to the target value in the given list\"\"\"\n    return any([(x + y) == target for x, y in itertools.combinations(lst, 2)])\ndef g(target=100):\n    return [10, 90, 30, 50, 70]\nassert f(g())\n",
        "idx_generation": 317,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=50):\n    return [10, 20, 30, 40]\n\nassert f(g())\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Find a pair of numbers in a list that multiply to the target value.\"\"\"\n    return any((nums[i]*nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\n    \ndef g(target=20):\n    return [1, 2, 4, 5, 10, 20//10, 20//5, 20//4, target//2]\n\nassert f(g())\n",
        "idx_generation": 318,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there are three numbers in a list whose sum is equal to the target value.\"\"\"\n    return any((nums[i]+nums[j]+nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))\n    \ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, target-(10+20+30)]\n\nassert f(g())\n",
        "idx_generation": 319,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=10, b=5, c=20) -> bool:\n    \"\"\"Find n such that n - a is equal to the product of b and the sum of the first c integers\"\"\"\n    return n - a == b * sum([i for i in range(1, c + 1)])\ndef g(a=10, b=5, c=20):\n    return a + b * sum([i for i in range(1, c + 1)])\nassert f(g())\n",
        "idx_generation": 319,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(nums: List[int], k=10) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return True\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=10):\n    return [random.randint(1, 20) for _ in range(k)]\n\nassert f(g())\n\n",
        "idx_generation": 320,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that adds up to the target value.\"\"\"\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 322,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 322,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], target='bob') -> bool:\n    \"\"\"Check if the target name is present in the list of names.\"\"\"\n    return target in names\n\ndef g(target='bob'):\n    return ['alice', 'charlie', 'dave', 'bob']\n\nassert f(g())\n",
        "idx_generation": 323,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == 8\n\ndef g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == 8:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 324,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(names: List[str], count=3) -> bool:\n    \"\"\"Check if there are at least count number of names that contain the letter 'a'\"\"\"\n    return sum(name.count('a') for name in names) >= count\ndef g(count=3):\n    names = ['Alice', 'Bob', 'Charlie', 'David', 'Eva']\n    return names\nassert f(g())\n",
        "idx_generation": 324,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if any row in the matrix contains all distinct numbers.\"\"\"\n    for row in matrix:\n        if len(set(row)) == len(row):\n            return True\n    return False\n\ndef g(target=0):\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 324,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=10, c=4) -> bool:\n    \"\"\"Find n such that n + a is a perfect square and is divisible by b and c\"\"\"\n    return (n + a) % b == 0 and (n + a) % c == 0 and int(((n + a) ** 0.5) ** 2) == (n + a)\n\ndef g(a=2, b=10, c=4):\n    return b * c - a\n\nassert f(g())\n",
        "idx_generation": 325,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=30) -> bool:\n    \"\"\"Check if the sum of any four numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] + nums[j] + nums[k] + nums[l] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)) for l in range(k+1, len(nums)))\n\ndef g(target_sum=30):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n",
        "idx_generation": 325,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=15) -> bool:\n    \"\"\"Check if the sum of any five numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] + nums[j] + nums[k] + nums[l] + nums[m] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)) for l in range(k+1, len(nums)) for m in range(l+1, len(nums)))\n\ndef g(target_sum=15):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n",
        "idx_generation": 325,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target: int, product=24) -> bool:\n    \"\"\"Given a list of integers, determine if there exist three numbers in the list whose product is equal to the target.\"\"\"\n    for i in range(len(arr)-2):\n        for j in range(i+1, len(arr)-1):\n            for k in range(j+1, len(arr)):\n                if arr[i] * arr[j] * arr[k] == target:\n                    return True\n    return False\n\ndef g() -> List[int]:\n    return [2, 3, 4, 5, 6]\n\nassert f(g(), 120)\n",
        "idx_generation": 325,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=15, b=5, c=2) -> bool:\n    \"\"\"Find n such that (the sum of the first b multiples of c) - a == n\"\"\"\n    return sum([c * i for i in range(1, b+1)]) - a == n\ndef g(a=15, b=5, c=2):\n    return sum([c * i for i in range(1, b+1)]) - a\nassert f(g())\n",
        "idx_generation": 326,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=25, b=8, c=4) -> bool:\n    \"\"\"Find n such that (the sum of the first b multiples of c) - a == n\"\"\"\n    return sum([c * i for i in range(1, b+1)]) - a == n\ndef g(a=25, b=8, c=4):\n    return sum([c * i for i in range(1, b+1)]) - a\nassert f(g())\n",
        "idx_generation": 326,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers contains a pair of numbers whose sum is equal to 10\"\"\"\n    return any(a + b == 10 for (a, b) in itertools.combinations(numbers, 2))\n\ndef g():\n    return [2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 326,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[List[int]]) -> bool:\n    \"\"\"Determine if there exists a path from the top-left corner to the bottom-right corner in a 2D grid of integers.\n    You can only move down or right in the grid. The path must contain the number 1 at least twice and the number 0 exactly twice.\"\"\"\n    rows = len(nums)\n    cols = len(nums[0])\n\n    def helper(i, j, found_one, found_zero):\n        if i == rows - 1 and j == cols - 1 and found_one >= 2:\n            return True\n        if i >= rows or j >= cols:\n            return False\n        if nums[i][j] == 0:\n            found_zero += 1\n            if found_zero > 2:\n                return False\n        if nums[i][j] == 1:\n            found_one += 1\n        return helper(i+1, j, found_one, found_zero) or helper(i, j+1, found_one, found_zero)\n\n    return helper(0, 0, 0, 0)\n\ndef g(nums=[[1, 0, 0], [1, 1, 0], [0, 1, 1], [0, 0, 1]]):\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 327,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(nums: List[int], target_sum=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target_sum\"\"\"\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target_sum=20):\n    return [1, 5, 8, 12, 16, 19]\nassert f(g())\n",
        "idx_generation": 328,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(nums: List[int], target_count=3) -> bool:\n    \"\"\"Check if there are at least target_count odd numbers in the list\"\"\"\n    return sum(1 for n in nums if n % 2 != 0) >= target_count\ndef g(target_count=3):\n    return [random.randint(1, 100) for _ in range(10)]\nassert f(g())\n",
        "idx_generation": 328,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists two numbers in the list that sum up to the target\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        if target - num in num_set:\n            return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 328,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists three numbers in the list that sum up to the target\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 328,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exists two numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 329,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: List[int]) -> bool:\n    \"\"\"Check if the list contains exactly two distinct elements.\"\"\"\n    return len(set(x)) == 2\ndef g():\n    return [1, 2]\nassert f(g())\n",
        "idx_generation": 330,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to target_sum\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\ndef g(numbers: List[int] = [2, 4, 6, 8, 10], target_sum=10):\n    return numbers\nassert f(g())\n",
        "idx_generation": 332,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], n=4) -> bool:\n    \"\"\"Check if a matrix is a magic square of size n x n\"\"\"\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diagonal_sum1 = sum(matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    return all((row_sum == col_sum == diagonal_sum1 == diagonal_sum2) for row_sum, col_sum in zip(row_sums, col_sums))\n\ndef g(n=4):\n    return [[16, 3, 2, 13], [5, 10, 11, 8], [9, 6, 7, 12], [4, 15, 14, 1]]\n\nassert f(g())\n",
        "idx_generation": 332,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=50, b=3, c=5) -> bool:\n    \"\"\"Find n such that (the sum of the first b multiples of c) - a == n\"\"\"\n    return sum([c * i for i in range(1, b+1)]) - a == n\ndef g(a=50, b=3, c=5):\n    return sum([c * i for i in range(1, b+1)]) - a\nassert f(g())\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=75, b=4, c=10) -> bool:\n    \"\"\"Find n such that (the sum of the first b multiples of c) - a == n\"\"\"\n    return sum([c * i for i in range(1, b+1)]) - a == n\ndef g(a=75, b=4, c=10):\n    return sum([c * i for i in range(1, b+1)]) - a\nassert f(g())\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=100, b=5, c=15) -> bool:\n    \"\"\"Find n such that (the sum of the first b multiples of c) - a == n\"\"\"\n    return sum([c * i for i in range(1, b+1)]) - a == n\ndef g(a=100, b=5, c=15):\n    return sum([c * i for i in range(1, b+1)]) - a\nassert f(g())\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains any duplicate elements.\"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5, 5]\n\nassert f(g())\n",
        "idx_generation": 333,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with a sum equal to the length of the subarray.\"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n    for i in range(len(arr)):\n        prefix_sum += arr[i]\n        if prefix_sum == i + 1:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\n\ndef g():\n    return [1, 1, 1, 3, 5]\n\nassert f(g())\n",
        "idx_generation": 334,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(string: str, n=3) -> bool:\n    \"\"\"Check if a string can be rearranged to form a palindrome\"\"\"\n    freq = [0] * 26\n    for c in string:\n        freq[ord(c) - ord('a')] += 1\n    odd_freq_count = 0\n    for count in freq:\n        if count % 2 == 1:\n            odd_freq_count += 1\n    return odd_freq_count <= 1\ndef g(n=3):\n    return 'aabbc'\nassert f(g())\n",
        "idx_generation": 334,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target value.\"\"\"\n    return any(arr[i] + arr[j] + arr[k] == target for i in range(len(arr)) for j in range(i+1, len(arr)) for k in range(j+1, len(arr)))\ndef g(target=20):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return arr\nassert f(g())\n",
        "idx_generation": 334,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Find if there exists a subarray in the list whose sum is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        sum_val = 0\n        for j in range(i, len(nums)):\n            sum_val += nums[j]\n            if sum_val == target:\n                return True\n    return False\ndef g(nums=[10, 20, 30, 40, 50]):\n    return nums\nassert f(g())\n",
        "idx_generation": 335,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=100) -> bool:\n    \"\"\"Check if the given number is divisible by the target number.\"\"\"\n    return n % target == 0\ndef g(target=100):\n    n = target * 2\n    return n\nassert f(g())\n",
        "idx_generation": 335,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=100) -> bool:\n    \"\"\"Check if the given number is greater than the target number.\"\"\"\n    return n > target\ndef g(target=100):\n    n = target + 10\n    return n\nassert f(g())\n",
        "idx_generation": 335,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=4, lower=-100, seq=[-10, -20, -30, -40, -50, -60, -70, -80, -90, -100]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is less than a lower limit\"\"\"\n    total = 0\n    for i in range(start, start + k):\n        total += seq[i]\n    return total < lower\n\ndef g(k=4, lower=-100, seq=[-10, -20, -30, -40, -50, -60, -70, -80, -90, -100]):\n    def sum_seq(start):\n        ans = 0\n        for i in range(start, start + k):\n            ans += seq[i]\n        return ans\n    return min(range(-len(seq), len(seq) - k + 1), key=sum_seq)\n\nassert f(g())\n",
        "idx_generation": 336,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target_length=10) -> bool:\n    \"\"\"Check if the length of any two words in the list is equal to target_length\"\"\"\n    return any(len(words[i]) + len(words[j]) == target_length for i in range(len(words)) for j in range(i+1, len(words)))\n\ndef g(target_length=10):\n    return ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape']\n\nassert f(g())\n",
        "idx_generation": 336,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_product=100) -> bool:\n    \"\"\"Check if the product of any two numbers in the list is equal to target_product\"\"\"\n    return any(numbers[i] * numbers[j] == target_product for i in range(len(numbers)) for j in range(i+1, len(numbers)))\n\ndef g(target_product=100):\n    return [n for n in range(1, target_product+1)]\n\nassert f(g())\n",
        "idx_generation": 336,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\"\"\"\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[i])))\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g())\n",
        "idx_generation": 337,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that add up to the target\"\"\"\n    n = len(numbers)\n    for i in range(n):\n        for j in range(i+1, n):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target=50):\n    numbers = [10, 20, 30, 40]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 338,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the target number is the product of any two distinct numbers in the list\"\"\"\n    return any(num1 * num2 == target for i, num1 in enumerate(nums) for num2 in nums[i+1:])\n\ndef g(target: int):\n    return [1, 2, 3, 4, 5, 6], target\n\nassert f(*g(12))\n",
        "idx_generation": 338,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(squares: List[List[int]], m=3, n=3) -> bool:\n    \"\"\"Position min(m, n) <= 3 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 3 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j)]})\ndef g(m=3, n=3):\n    k = min(m, n)\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 3 * k == len({t for (i, j) in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j)]}):\n            return [[i, j] for (i, j) in enumerate(p)]\nassert f(g())\n",
        "idx_generation": 338,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(squares: List[List[int]], m=6, n=6) -> bool:\n    \"\"\"Position min(m, n) <= 6 queens on an m x n chess board so that no pair is attacking each other.\"\"\"\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 6 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j), ('diag1', i + j), ('diag2', i - j + m - 1)]})\ndef g(m=6, n=6):\n    k = min(m, n)\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 6 * k == len({t for (i, j) in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j), ('diag1', i + j), ('diag2', i - j + m - 1)]}):\n            return [[i, j] for (i, j) in enumerate(p)]\nassert f(g())\n",
        "idx_generation": 338,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], max_length=7) -> bool:\n    \"\"\"Check if all words in the list have a length less than or equal to max_length\"\"\"\n    return all(len(word) <= max_length for word in words)\ndef g(max_length=7):\n    return ['apple', 'banana', 'orange', 'grape', 'kiwi', 'melon']\nassert f(g())\n",
        "idx_generation": 338,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=30) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list that multiply to the target\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(target=30):\n    return [2, 5, 7, 9, 10, 15, 18, 20]\n\nassert f(g())\n",
        "idx_generation": 339,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]], target=50) -> bool:\n    \"\"\"Find two numbers in the matrix whose sum is equal to the target.\"\"\"\n    for row in matrix:\n        for col in row:\n            if col == target:\n                return True\n    return False\n\ndef g(target=50):\n    return [[10, 20, 30],\n            [40, 50, 60],\n            [70, 80, 90]]\n\nassert f(g())\n",
        "idx_generation": 341,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target number\"\"\"\n    for pair in itertools.combinations(nums, 2):\n        if sum(pair) == target:\n            return True\n    return False\n\ndef g(target: int):\n    return [1, 3, 5, 7, 9], target\n\nassert f(*g(8))\n",
        "idx_generation": 342,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose average is equal to the target number\"\"\"\n    for r in range(1, len(nums) + 1):\n        for start in range(len(nums) - r + 1):\n            end = start + r\n            if sum(nums[start:end]) / r == target:\n                return True\n    return False\n\ndef g(target: int):\n    return [1, 2, 3, 4, 5, 6], target\n\nassert f(*g(3.5))\n",
        "idx_generation": 342,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find a (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == 2*(m+n)\n\ndef g(m=5, n=5):\n    import random\n    for seed in range(50):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == 2*(m+n):\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 343,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists three numbers in the list that add up to the target.\"\"\"\n    for i in range(len(nums)-2):\n        for j in range(i+1, len(nums)-1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\n\nassert f(g())\n",
        "idx_generation": 344,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is greater than the target.\"\"\"\n    for i in range(len(nums)-1):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] > target:\n                return True\n    return False\n\ndef g(target=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 344,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], k=5) -> bool:\n    \"\"\"Find if there exists a word in the list that has length k.\"\"\"\n    return any(len(word) == k for word in words)\n\ndef g(k=5):\n    return [\"apple\", \"banana\", \"cherry\", \"date\"]\n\nassert f(g())\n",
        "idx_generation": 344,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists two numbers in the list whose product is equal to the target.\"\"\"\n    num_set = set()\n    for num in nums:\n        if num == 0 and target == 0:\n            return True\n        if target % num == 0 and target // num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(target=0):\n    return [i for i in range(-100, 101)]\n\nassert f(g())\n",
        "idx_generation": 346,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list such that their quotient is equal to the target.\"\"\"\n    num_set = set(nums)\n    for num in nums:\n        if num != 0 and target != 0 and num % target == 0:\n            complement = num // target\n            if complement in num_set:\n                return True\n    return False\n\ndef g(target=0):\n    return [2, 4, 6, 8, 10, 12, 14]\n\nassert f(g(), 2)\n",
        "idx_generation": 347,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(points: List[List[int]], m=8, n=8) -> bool:\n    \"\"\"Check if the given points form a valid knight's tour on an m x n chessboard.\"\"\"\n    assert len(set(tuple(point) for point in points)) == m * n, 'all points must be unique'\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(points, points[1:]))), 'legal moves'\n    return len(points) == m * n\n\ndef g(m=8, n=8):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == m * n:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 348,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists three numbers in the list 'nums' that have a product greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] * nums[j] * nums[k] > target:\n                    return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 348,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(tour: List[List[int]], m=8, n=8) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == 2*(m+n)\n\ndef g(m=8, n=8):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == 2*(m+n):\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n\n",
        "idx_generation": 348,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst: List[int] = [1, 2, 3, 4, 5]) -> bool:\n    \"\"\"Check if n is present in the list\"\"\"\n    return n in lst\ndef g(lst: List[int] = [1, 2, 3, 4, 5]):\n    return lst[2]\nassert f(g())\n",
        "idx_generation": 349,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[10, 20, 30, 40, 50], target=50):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 350,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(n: int, a=13) -> bool:\n    \"\"\"Check if n is divisible by a prime number\"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return n % a == 0 and a in primes\n\ndef g(a=13):\n    return a * 2\n\nassert f(g())\n",
        "idx_generation": 351,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [i for i in range(1, target)]\n\nassert f(g())\n",
        "idx_generation": 351,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, k=3) -> bool:\n    \"\"\"Check if a number is divisible by the sum of its digits.\"\"\"\n    digits_sum = sum([int(d) for d in str(n)])\n    return n % digits_sum == 0\ndef g(k=3):\n    return 12 * k\nassert f(g())\n\n",
        "idx_generation": 352,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric\"\"\"\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[0])))\ndef g():\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n    return matrix\nassert f(g())\n",
        "idx_generation": 353,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, factors: List[int]=[2, 3, 5]) -> bool:\n    \"\"\"Check if a number is divisible by any of the given factors.\n    - n: the number to be checked\n    - factors: list of factors\"\"\"\n    return any(n % factor == 0 for factor in factors)\ndef g(n: int, factors: List[int]=[2, 3, 5]):\n    return n\nassert f(g(30))\n",
        "idx_generation": 353,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=20) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is divisible by k and the length of the subarray is greater than 2.\"\"\"\n    prefix_sum = 0\n    remainders = {0}\n    for num in nums:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum in remainders:\n            return len(remainders) > 2\n        remainders.add(prefix_sum)\n    return False\n\ndef g(k=20):\n    return [i for i in range(1, k+1)]\n\nassert f(g())\n",
        "idx_generation": 354,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to target_sum\"\"\"\n    return any(numbers[i] + numbers[j] == target_sum for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target_sum=20):\n    return [2, 5, 10, 15, 8]\nassert f(g())\n",
        "idx_generation": 354,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find two different numbers in the list 'nums' that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g(), target=15)\n",
        "idx_generation": 355,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target number\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 355,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, target=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    \"\"\"Check if the target list contains n as the last element.\"\"\"\n    return n == target[-1]\ndef g(target=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return target[-1]\nassert f(g())\n",
        "idx_generation": 356,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in the array that adds up to the target value\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    arr = [2, 4, 6, 8]\n    return arr\n\nassert f(g())\n",
        "idx_generation": 356,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find three numbers in the list 'nums' that have a sum greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] > target:\n                    return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 357,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there is a number in the list 'nums' that is greater than the target value.\"\"\"\n    for num in nums:\n        if num > target:\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 357,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> List[Tuple[int, int]]:\n    \"\"\"Find all pairs of numbers in the list that sum up to the target number.\"\"\"\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                pairs.append((nums[i], nums[j]))\n    return pairs\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g()) == [(1, 9), (2, 8), (3, 7), (4, 6)]\n",
        "idx_generation": 357,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Given a list of integers and a target number, find any two numbers in the list that multiply to give the target.\nSample Input:\n[2, 5, 10, 7, 8]\nSample Output:\n(5, 10)\"\"\"\n    return any((nums[i] * nums[j] == target) for i in range(len(nums)) for j in range(i + 1, len(nums)))\ndef g(target=50):\n    return [5, 10]\nassert f(g())\n",
        "idx_generation": 358,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], n=20) -> bool:\n    \"\"\"Check if the given number is present in the list\"\"\"\n    return n in arr\ndef g(n=20):\n    return [5, 10, 15, 20, 25, 30]\nassert f(g())\n",
        "idx_generation": 358,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=5, lower=-5000, seq=[-2, 4, -3, 6, 8, -1, 5, 2, -7, 9]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is greater than or equal to the lower value\"\"\"\n    summ = 0\n    for i in range(start, start + k):\n        summ += seq[i]\n    return summ >= lower\n\ndef g(k=5, lower=-5000, seq=[-2, 4, -3, 6, 8, -1, 5, 2, -7, 9]):\n    def summation(start):\n        ans = 0\n        for i in range(start, start + k):\n            ans += seq[i]\n        return ans\n    return max(range(-len(seq), len(seq) - k + 1), key=summation)\n\nassert f(g())\n",
        "idx_generation": 359,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(seq: List[int], n=0, length=0) -> bool:\n    \"\"\"Find a sequence of 1's and 2's of a given length that that adds up to n\"\"\"\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)\ndef g(n=0, length=0):\n    return [2] * (n - length) + [1] * (2 * length - n)\nassert f(g())\n",
        "idx_generation": 360,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that multiply up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] * nums[j] * nums[k] == target:\n                    return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 5, 4]\n\nassert f(g())\n",
        "idx_generation": 361,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(tour: List[List[int]], m=5, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == 2*(m+n)\n\ndef g(m=5, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == 2*(m+n):\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 362,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with a sum of zero.\"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum in prefix_sums or prefix_sum == 0:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\n\ndef g():\n    return [1, 2, -3, 4, -5, 6, -7]\n\nassert f(g())\n",
        "idx_generation": 363,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with an even sum.\"\"\"\n    prefix_sum = 0\n    prefix_sums = set()\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum % 2 == 0 or prefix_sum == 0:\n            return True\n        prefix_sums.add(prefix_sum)\n    return False\n\ndef g():\n    return [1, -2, 3, -4, 5]\n\nassert f(g())\n",
        "idx_generation": 363,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=0) -> bool:\n    \"\"\"Check if it is possible to find three numbers in a given list that sum up to a target sum.\n    Return True if such triplet exists, False otherwise.\"\"\"\n    for i in range(len(numbers)-2):\n        for j in range(i+1, len(numbers)-1):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target_sum:\n                    return True\n    return False\n\ndef g(numbers: List[int]):\n    return numbers\n\nassert f(g([1, 2, 3, 4, 5, 6]), target_sum=9)\n",
        "idx_generation": 364,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target: int = 10) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to the target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\n\ndef g(lst: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return lst\n\nassert f(g())\n",
        "idx_generation": 365,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target: int = 100) -> bool:\n    \"\"\"Check if the sum of any three numbers in the list is greater than the target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            for k in range(j+1, len(lst)):\n                if lst[i] + lst[j] + lst[k] > target:\n                    return True\n    return False\n\ndef g(lst: List[int] = [10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return lst\n\nassert f(g())\n",
        "idx_generation": 365,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find a pair of numbers in a list whose sum is equal to the target value.\"\"\"\n    return any((nums[i]+nums[j] == target for i in range(len(nums)) for j in range(i+1, len(nums))))\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, target-8, 9, target//9]\nassert f(g())\n",
        "idx_generation": 365,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=1, lower=-36, seq=[-36]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is minimal\"\"\"\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= lower\ndef g(k=1, lower=-36, seq=[-36]):\n    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g())\n",
        "idx_generation": 365,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(points: List[List[int]], n=3) -> bool:\n    \"\"\"Check if there are exactly n points in the list that lie on the x-axis.\"\"\"\n    x_axis_points = [point for point in points if point[1] == 0]\n    return len(x_axis_points) == n\n\ndef g(n=3):\n    return [[1, 0], [2, 0], [3, 0]] + [[1, 1]] * (n - 3)\n\nassert f(g())\n",
        "idx_generation": 366,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n=4) -> bool:\n    \"\"\"Check if there are exactly n numbers in the list that are divisible by 3.\"\"\"\n    divisible_by_three = [num for num in nums if num % 3 == 0]\n    return len(divisible_by_three) == n\n\ndef g(n=4):\n    return [3, 6, 9, 12] + [1, 2, 4, 5] * (n - 4)\n\nassert f(g())\n",
        "idx_generation": 366,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n=3) -> bool:\n    \"\"\"Check if there are more than n numbers in the list that are divisible by 3.\"\"\"\n    divisible_by_three = [num for num in nums if num % 3 == 0]\n    return len(divisible_by_three) > n\n\ndef g(n=3):\n    return [3, 6, 9, 12, 15, 18] + [1, 2, 4, 5] * (n - 6)\n\nassert f(g())\n",
        "idx_generation": 367,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target\"\"\"\n    return any((arr[i] + arr[j] == target) for i in range(len(arr)) for j in range(i+1, len(arr)))\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90]\nassert f(g())\n",
        "idx_generation": 368,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are any three numbers in the list that sum up to the target value\"\"\"\n    return any(x + y + z == target for x in nums for y in nums for z in nums)\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8]\nassert f(g())\n",
        "idx_generation": 368,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nimport itertools\nfrom typing import List\n\ndef f(nums: List[int], target: int, subset_length: int) -> bool:\n    \"\"\"Check if there exists a subset in the list whose product is equal to the target number and has a specific length\"\"\"\n    for subset in itertools.combinations(nums, subset_length):\n        if math.prod(subset) == target:\n            return True\n    return False\n\ndef g(target: int, subset_length: int):\n    return [1, 2, 3, 4, 5, 6], target, subset_length\n\nassert f(*g(24, 4))\n",
        "idx_generation": 369,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that sum up to the target\"\"\"\n    for i in range(len(nums)-1):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=50):\n    nums = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 369,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains a subsequence that is in non-decreasing order.\"\"\"\n    for i in range(1, len(nums)):\n        if nums[i] < nums[i-1]:\n            return False\n    return True\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 369,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target_sum:\n                    return True\n    return False\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 369,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a triple of numbers in the list whose sum is equal to the target\"\"\"\n    return any((numbers[i] + numbers[j] + numbers[k] == target for i in range(len(numbers)) for j in range(i+1, len(numbers)) for k in range(j+1, len(numbers))))\n\ndef g(target=0):\n    return [1, 2, -3, 4, 5, -6, 7]\n\nassert f(g())\n",
        "idx_generation": 371,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is less than or equal to the target.\"\"\"\n    prefix_sum = 0\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum <= target:\n            return True\n    return False\n\ndef g(target=100):\n    return [50, 30, 25, 15, 10, 5]\n\nassert f(g())\n",
        "idx_generation": 372,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a palindrome.\"\"\"\n    return nums == nums[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 373,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list contains only even numbers. Return True if it does, otherwise return False.\"\"\"\n    return all(num % 2 == 0 for num in numbers)\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 374,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric. Return True if it is, otherwise return False.\"\"\"\n    for i in range(len(matrix)):\n        for j in range(i+1, len(matrix)):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 374,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[float], target_sum=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list 'nums' whose sum is equal to the target_sum.\"\"\"\n    return any((nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums))))\ndef g(nums=[1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5]):\n    return nums\nassert f(g(), target_sum=10)\n\n",
        "idx_generation": 376,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(prices: List[float], discount=0.2) -> bool:\n    \"\"\"Check if there exists a pair of prices in the list 'prices' where the second price is discounted by the given discount and the sum of the prices is less than 100.\"\"\"\n    return any(((prices[i] + (prices[j] * (1 - discount))) < 100 for i in range(len(prices)) for j in range(i + 1, len(prices))))\ndef g(prices=[20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0]):\n    return prices\nassert f(g(), discount=0.2)\n\n",
        "idx_generation": 376,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if any number in the list is divisible by n\"\"\"\n    return any(num % n == 0 for num in nums)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[-1]\nassert f(g())\n",
        "idx_generation": 377,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], n=3) -> bool:\n    \"\"\"Check if the sum of the list is divisible by n\"\"\"\n    return sum(lst) % n == 0\ndef g(n=3):\n    return [n, n, n]\nassert f(g())\n",
        "idx_generation": 379,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to k\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == k:\n                return True\n    return False\ndef g(k=3):\n    return [1, 2, 3, 4, 5]\nassert f(g())\n",
        "idx_generation": 379,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=8, n=8) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == (m*n - 1)//2\ndef g(m=8, n=8):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == (m*n - 1)//2:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 380,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(tour: List[List[int]], m=6, n=5) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == (m*n - 1)//2\ndef g(m=6, n=5):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == (m*n - 1)//2:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 380,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target value.\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i + 1, len(nums)) for k in range(j + 1, len(nums))))\ndef g(nums=[-1, -2, 3, 5, 6, 7]):\n    return nums\nassert f(g())\n",
        "idx_generation": 380,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 10) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a product greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] > target:\n                return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 380,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int = 5) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a sum greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] > target:\n                return True\n    return False\n\ndef g(nums: List[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 380,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a subarray of length k in the list whose sum is less than or equal to zero.\"\"\"\n    n = len(arr)\n    for i in range(n - k + 1):\n        subarray = arr[i:i+k]\n        if sum(subarray) <= 0:\n            return True\n    return False\n\ndef g(k=3):\n    return [i for i in range(-k, k+1)]\n\nassert f(g())\n",
        "idx_generation": 381,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=5, lower=-100000, seq=[1, 3, 5, 7, 9, 11, 13, 15]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose difference is greater than lower\"\"\"\n    diff = max(seq[start:start+k]) - min(seq[start:start+k])\n    return diff > lower\ndef g(k=5, lower=-100000, seq=[1, 3, 5, 7, 9, 11, 13, 15]):\n    def seq_diff(start):\n        return max(seq[start:start+k]) - min(seq[start:start+k])\n    return max(range(len(seq) - k + 1), key=seq_diff)\nassert f(g())\n",
        "idx_generation": 381,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=98765, b=43210, upper_bound=50000) -> bool:\n    \"\"\"Check if n is a divisor of both a and b, and n is less than or equal to the upper_bound.\"\"\"\n    return a % n == 0 and b % n == 0 and (n <= upper_bound)\ndef g(a=98765, b=43210, upper_bound=50000):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n\nassert f(g())\n",
        "idx_generation": 382,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if any number in the matrix is greater than the target.\"\"\"\n    for row in matrix:\n        if any(num > target for num in row):\n            return True\n    return False\n\ndef g(target=0):\n    matrix = [[2, 4, 6], [1, 3, 5], [8, 10, 12]]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 383,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, k=4, lower=-100, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is greater than a given lower bound, possibly looping around\"\"\"\n    total = 0\n    for i in range(x, x + k):\n        total += seq[i]\n    return total > lower\ndef g(k=4, lower=-100, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    def sum(x):\n        result = 0\n        for i in range(x, x + k):\n            result += seq[i]\n        return result\n    return max(range(-len(seq), len(seq) - k + 1), key=sum)\nassert f(g())\n",
        "idx_generation": 385,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=25) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_sum=25):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n",
        "idx_generation": 385,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=25) -> bool:\n    \"\"\"Check if the product of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] * nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_sum=25):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n",
        "idx_generation": 385,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if there is a triplet of numbers in the list whose sum is equal to the target value.\"\"\"\n    return any((numbers[i] + numbers[j] + numbers[k] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)) for k in range(j+1, len(numbers)))\ndef g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\nassert f(g())\n",
        "idx_generation": 386,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that multiply to the target.\"\"\"\n    return any((arr[i] * arr[j] == target) for i in range(len(arr)) for j in range(i + 1, len(arr)))\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 386,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that divide the target.\"\"\"\n    return any((target % nums[i] == 0 and target % nums[j] == 0) for i in range(len(nums)) for j in range(i + 1, len(nums)))\n\ndef g(target=10):\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 386,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=50) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_sum=50):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n",
        "idx_generation": 387,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose product is divisible by k.\"\"\"\n    prefix_product = 1\n    remainders = {1}\n    for num in nums:\n        prefix_product = (prefix_product * num) % k\n        if prefix_product in remainders:\n            return True\n        remainders.add(prefix_product)\n    return False\n\ndef g(k=5):\n    return [i**2 for i in range(1, k+1)]\n\nassert f(g())\n",
        "idx_generation": 388,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    return rows == cols\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 389,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum: int) -> bool:\n    \"\"\"Check if there exist two numbers in the list whose sum is equal to the target sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g(), 7)\n",
        "idx_generation": 393,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if the product of any two numbers in the list is equal to the target value.\"\"\"\n    return any((numbers[i] * numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\ndef g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\nassert f(g())\n",
        "idx_generation": 394,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if the sum of any two odd numbers in the list is equal to the target value.\"\"\"\n    odd_numbers = [num for num in numbers if num % 2 != 0]\n    return any((odd_numbers[i] + odd_numbers[j] == target) for i in range(len(odd_numbers)) for j in range(i+1, len(odd_numbers)))\ndef g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\nassert f(g())\n",
        "idx_generation": 394,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if the sum of any three numbers in the list is equal to the target value.\"\"\"\n    return any((numbers[i] + numbers[j] + numbers[k] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)) for k in range(j+1, len(numbers)))\ndef g(target=10):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\nassert f(g())\n",
        "idx_generation": 394,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    \"\"\"Check if the given list of numbers is a palindrome.\"\"\"\n    return numbers == numbers[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 394,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(x: int, k=4, lower=-100, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose product is even, possibly looping around\"\"\"\n    product = 1\n    for i in range(x, x + k):\n        product *= seq[i]\n    return product % 2 == 0\ndef g(k=4, lower=-100, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    def product(x):\n        result = 1\n        for i in range(x, x + k):\n            result *= seq[i]\n        return result\n    return max(range(-len(seq), len(seq) - k + 1), key=product)\nassert f(g())\n",
        "idx_generation": 395,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=20) -> bool:\n    \"\"\"Check if there exists three numbers in the list that sum up to the target value.\"\"\"\n    seen = set()\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n\ndef g(arr=[4, 7, 2, 9, 10]):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 396,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\n\ndef f(x: float, a=25) -> bool:\n    \"\"\"Check if the square root of a number equals the given number\"\"\"\n    return math.sqrt(x) == a\n\ndef g(a=25):\n    return a ** 2\n\nassert f(g()) == True\n",
        "idx_generation": 397,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if at least one number in the list is divisible by n\"\"\"\n    return any(num % n == 0 for num in nums)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[1]\nassert f(g())\n",
        "idx_generation": 397,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target\"\"\"\n    for (i, j, k) in itertools.combinations(nums, 3):\n        if i + j + k == target:\n            return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 398,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], n=3, target=10) -> bool:\n    \"\"\"Check if there exists a subarray of length n in the given list that has a cumulative sum greater than or equal to the target\"\"\"\n    return any(sum(lst[i:i+n]) >= target for i in range(len(lst) - n + 1))\ndef g(n=3, target=10):\n    return [2, 4, 6, 8, 10, 12, 14, 16]\nassert f(g())\n",
        "idx_generation": 398,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target_sum\"\"\"\n    seen = set()\n    for num in arr:\n        complement = target_sum - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target_sum=100):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n",
        "idx_generation": 399,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum=100) -> bool:\n    \"\"\"Check if the product of any three numbers in the list is equal to the target_sum\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] * arr[j] * arr[k] == target_sum:\n                    return True\n    return False\n\ndef g(target_sum=100):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n",
        "idx_generation": 399,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=10) -> bool:\n    \"\"\"Check if there exist two numbers in the list that sum up to target_sum\"\"\"\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_sum=10):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n",
        "idx_generation": 399,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains a subarray with a sum of 0.\"\"\"\n    prefix_sum = 0\n    sums = set()\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum in sums or prefix_sum == 0:\n            return True\n        sums.add(prefix_sum)\n    return False\n\ndef g():\n    return [4, 2, -3, 1, 6]\n\nassert f(g())\n",
        "idx_generation": 399,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 400,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\n\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if the target number is present in a randomly shuffled list\"\"\"\n    random.shuffle(nums)\n    for num in nums:\n        if num == target:\n            return True\n    return False\n\ndef g(target=5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 400,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=15) -> bool:\n    \"\"\"Given a list of numbers, find a pair of numbers whose sum is equal to the target value.\"\"\"\n    return any((numbers[i] + numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\n\ndef g(target=15):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 401,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target.\"\"\"\n    return any(target - num in numbers for num in numbers)\n\ndef g(target=20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 401,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=0) -> bool:\n    \"\"\"Determine if the product of any two distinct numbers in the list is equal to the target value.\"\"\"\n    return any((numbers[i] * numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\n\ndef g(target=0):\n    numbers = [-5, -3, 0, 3, 5]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 402,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=7) -> bool:\n    \"\"\"Determine if any two adjacent numbers in the list sum up to the target value.\"\"\"\n    return any((numbers[i] + numbers[i+1] == target) for i in range(len(numbers)-1))\n\ndef g(target=7):\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 403,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a subsequence in the list that sums up to the target value.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if sum(lst[i:j]) == target:\n                return True\n    return False\n\ndef g(target=100):\n    return [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n\nassert f(g())\n",
        "idx_generation": 403,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(tour: List[List[int]], m=8, n=8) -> bool:\n    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return len(tour) == 2*(m+n)\n\ndef g(m=8, n=8):\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n        while True:\n            if not free or len(ans) == 2*(m+n):\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(max(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g())\n",
        "idx_generation": 403,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int, k: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target, and their sum is less than k.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target and nums[i] + nums[j] < k:\n                return True\n    return False\n\ndef g(target=12, k=10):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g(), 12, 10)\n",
        "idx_generation": 404,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> int:\n    \"\"\"Find the number of pairs in the list whose product is equal to the target.\"\"\"\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                count += 1\n    return count\n\ndef g(target=12):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g(), 12) == 2\n",
        "idx_generation": 404,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=2) -> bool:\n    \"\"\"Check if there exists k consecutive numbers in the list that are all even.\"\"\"\n    count = 0\n    for num in nums:\n        if num % 2 == 0:\n            count += 1\n            if count == k:\n                return True\n        else:\n            count = 0\n    return False\n\ndef g(k=2):\n    return [1, 2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 405,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there is a triplet of numbers in the list that adds up to the target value.\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\n\ndef g(target=100):\n    nums = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return nums\n\nassert f(g())\n",
        "idx_generation": 405,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    num_set = set()\n    for num in nums:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\ndef g(target=50):\n    return [10, 20, 30, 40, 50, 60, 70, 80]\n\nassert f(g())\n",
        "idx_generation": 406,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Check if the product of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] * nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_sum=100):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n",
        "idx_generation": 407,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a combination of numbers in the list that divide the target.\"\"\"\n    return any(target % num == 0 for num in numbers)\n\ndef g(target=50):\n    return [5, 10, 15, 20, 25]\n\nassert f(g())\n",
        "idx_generation": 407,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=20) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that add up to the target value.\"\"\"\n    return any((numbers[i] + numbers[j] == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\n\ndef g(target=20):\n    numbers = [10, 15, 5, 3, 8, 12, 1, 6]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 408,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(seq: List[int], target=0, start=0) -> bool:\n    \"\"\"Check if the target number is present in the sequence starting from the given index.\"\"\"\n    return target in seq[start:]\n\ndef g(target=0, start=0):\n    return [i for i in range(10)]\n\nassert f(g())\n",
        "idx_generation": 410,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(seq: List[int], target=0, start=0) -> bool:\n    \"\"\"Find the first index in the sequence where the number is greater than the target.\"\"\"\n    for i in range(start, len(seq)):\n        if seq[i] > target:\n            return i\n    return -1\n\ndef g(target=0, start=0):\n    return [i for i in range(10)]\n\nassert f(g())",
        "idx_generation": 410,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lb: List[bool], trips=[[1, 1, 0], [1, 0, 0], [0, 0, 0], [0, 1, 1], [0, 1, 1], [1, 1, 1], [1, 0, 1]]) -> bool:\n    \"\"\"Given a list of lists of triples of integers, return True for each list with a total of at least 2 and\n    False for each other list.\"\"\"\n    return len(lb) == len(trips) and all((b is True if sum(s) >= 2 else b is False for (b, s) in zip(lb, trips)))\n\ndef g(trips=[[1, 1, 0], [1, 0, 0], [0, 0, 0], [0, 1, 1], [0, 1, 1], [1, 1, 1], [1, 0, 1]]):\n    return [sum(s) >= 2 for s in trips]\n\nassert f(g())\n",
        "idx_generation": 412,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list 'nums' that have a sum equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g(), target=10)\n",
        "idx_generation": 412,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], divisor=2) -> bool:\n    \"\"\"Check if all numbers in the list are divisible by the divisor\"\"\"\n    return all(num % divisor == 0 for num in nums)\n\ndef g(divisor=2):\n    return [2, 4, 6, 8, 10]\n\nassert f(g())\n",
        "idx_generation": 412,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=15) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that sum up to the target sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target_sum:\n                    return True\n    return False\n\ndef g(target_sum=15):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 412,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom datetime import datetime\n\ndef f(date: str, format='%Y-%m-%d') -> bool:\n    \"\"\"Check if a given date string matches a specific format\"\"\"\n    try:\n        datetime.strptime(date, format)\n        return True\n    except ValueError:\n        return False\n\ndef g(format='%Y-%m-%d'):\n    return datetime.now().strftime(format)\n\nassert f(g())\n",
        "idx_generation": 412,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=12345, b=67890, lower_bound=10) -> bool:\n    \"\"\"Check if n is a common factor of both a and b, and n is greater than or equal to lower_bound.\"\"\"\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a=12345, b=67890, lower_bound=10):\n    (m, n) = (min(a, b), max(a, b))\n    while m > 0:\n        (m, n) = (n % m, m)\n    return n\nassert f(g())\n",
        "idx_generation": 413,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target_sum=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list whose sum is equal to target_sum\"\"\"\n    return any((arr[i] + arr[j]) == target_sum for i in range(len(arr)) for j in range(i+1, len(arr)))\n\ndef g(target_sum=50):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n",
        "idx_generation": 413,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(nums: List[int], target: int = 20) -> bool:\n    \"\"\"Check if there are three numbers in the list that add up to the target number.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target: int = 20):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 413,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the list contains at least one negative number and the sum of all the numbers is greater than 0\"\"\"\n    return any(num < 0 for num in nums) and sum(nums) > 0\n\ndef g():\n    return [1, -2, 3, -4, 5]\n\nassert f(g())\n",
        "idx_generation": 414,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Check if the product of any two numbers in the given list is equal to the target\"\"\"\n    assert len(nums) >= 2\n    return any((random.choice(nums) * random.choice(nums)) == target for _ in range(100))\n\ndef g(target=15):\n    return [1, 3, 5, 7, 9, 11]\n\nassert f(g())\n",
        "idx_generation": 414,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list 'nums' that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 416,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(nums: List[int], target=0) -> List[int]:\n    \"\"\"Return a list containing the indices of all occurrences of the target number in the given list\"\"\"\n    indices = []\n    for i in range(len(nums)):\n        if nums[i] == target:\n            indices.append(i)\n    return indices\n\ndef g(target=0):\n    return [4, 0, 2, 0, 6, 0, 8, 0, 10]\n\nassert f(g()) == [1, 3, 5, 7]\n",
        "idx_generation": 417,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=100) -> bool:\n    \"\"\"Check if the sum of all elements in the list is equal to the target value.\"\"\"\n    return sum(arr) == target\n\ndef g(target=100):\n    return [10, 20, 30, 40]\n\nassert f(g())\n",
        "idx_generation": 417,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\"\"\"\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[i])))\n\ndef g():\n    matrix = [\n        [1, 2, 3],\n        [2, 4, 5],\n        [3, 5, 6]\n    ]\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 417,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find a pair of numbers from the given list that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(target=15):\n    return [7, 8]\nassert f(g())\n",
        "idx_generation": 417,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=25) -> bool:\n    \"\"\"Check if the product of any two numbers in the list is equal to target_sum\"\"\"\n    return any(nums[i] * nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_sum=25):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n",
        "idx_generation": 418,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(seq: List[int], n=100, length=50) -> bool:\n    \"\"\"Given a sequence of integers, find if there exists a subsequence that adds up to a given value n\"\"\"\n    if sum(seq) < n:\n        return False\n    if sum(seq) == n:\n        return True\n\n    for i in range(len(seq)):\n        for j in range(i + 1, len(seq) + 1):\n            if sum(seq[i:j]) == n:\n                return True\n    return False\n\ndef g(n=100, length=50):\n    return [i for i in range(length, 0, -1)]\n\nassert f(g())\n",
        "idx_generation": 419,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if there exists three numbers in the list such that their sum is equal to the target.\"\"\"\n    num_set = set(nums)\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            complement = target - nums[i] - nums[j]\n            if complement in num_set:\n                return True\n    return False\n\ndef g(target=0):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g(), 9)\n\n",
        "idx_generation": 419,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if all numbers in the list are divisible by the target.\"\"\"\n    for num in nums:\n        if num % target != 0:\n            return False\n    return True\n\ndef g(target=0):\n    return [10, 20, 30, 40, 50, 60]\n\nassert f(g(), 10)\n\n",
        "idx_generation": 419,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target\"\"\"\n    return any(target / num in numbers for num in numbers)\n\ndef g(target=50):\n    return [2, 5, 10, 20, 25, 50]\n\nassert f(g())\n",
        "idx_generation": 420,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if any two numbers in the list sum up to the target value.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g())\n",
        "idx_generation": 421,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the array whose product is equal to the target value.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] == target:\n                return True\n    return False\n\ndef g(arr=[1, 2, 3, 4, 5], target=5):\n    return arr\n\nassert f(g())\n",
        "idx_generation": 421,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=15) -> bool:\n    \"\"\"Check if there are four numbers in the list that add up to the target sum.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                for l in range(k + 1, len(nums)):\n                    if nums[i] + nums[j] + nums[k] + nums[l] == target_sum:\n                        return True\n    return False\n\ndef g(target_sum=15):\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g())\n",
        "idx_generation": 422,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\ndef f(n: int, a=10, b=5, c=20) -> bool:\n    \"\"\"Find n such that n + a == b * (the product of the first c integers)\"\"\"\n    return n + a == b * (math.prod([i for i in range(1, c+1)]))\ndef g(a=10, b=5, c=20):\n    return -a + (b * (math.prod([i for i in range(1, c+1)])))\nassert f(g())\n",
        "idx_generation": 424,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(nums: List[int], target: int, max_nums: int, options: List[int]) -> bool:\n    \"\"\"Find a combination of at most max_nums numbers whose sum is greater than or equal to the target value\"\"\"\n    for num in nums:\n        assert num in options\n    return len(nums) <= max_nums and sum(nums) >= target\n\ndef g(target: int = 50, max_nums: int = 3, options: List[int] = [10, 20, 30, 40, 50]):\n    from itertools import combinations\n    for n in range(1, max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) >= target:\n                return list(c)\n\nassert f(g(), target=50, max_nums=3, options=[10, 20, 30, 40, 50])\n",
        "idx_generation": 425,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import *\nfrom typing import List\n\ndef f(nums: List[int], target: int, max_nums: int, options: List[int]) -> bool:\n    \"\"\"Find a combination of at most max_nums numbers whose sum is less than or equal to the target value\"\"\"\n    for num in nums:\n        assert num in options\n    return len(nums) <= max_nums and sum(nums) <= target\n\ndef g(target: int = 50, max_nums: int = 3, options: List[int] = [10, 20, 30, 40, 50]):\n    from itertools import combinations\n    for n in range(1, max_nums + 1):\n        for c in combinations(options, n):\n            if sum(c) <= target:\n                return list(c)\n\nassert f(g(), target=50, max_nums=3, options=[10, 20, 30, 40, 50])\n",
        "idx_generation": 425,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target_sum=100) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list whose sum is equal to the target_sum\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\n\ndef g(target_sum=100):\n    return [n for n in range(1, target_sum+1)]\n\nassert f(g())\n\n",
        "idx_generation": 425,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(grid: List[List[int]], k=2) -> bool:\n    \"\"\"Check if there exists a subgrid of size k x k in the grid where the sum of its elements is divisible by k.\"\"\"\n    for i in range(len(grid) - k + 1):\n        for j in range(len(grid[0]) - k + 1):\n            subgrid = [row[j:j+k] for row in grid[i:i+k]]\n            if sum([val**2 for subrow in subgrid for val in subrow]) % k == 0:\n                return True\n    return False\n\ndef g(k=2):\n    return [[1, 2, 3, 4, 5],\n            [6, 7, 8, 9, 10],\n            [11, 12, 13, 14, 15],\n            [16, 17, 18, 19, 20],\n            [21, 22, 23, 24, 25]]\n\nassert f(g())\n",
        "idx_generation": 425,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target_sum=12) -> bool:\n    \"\"\"Check if any three numbers in the list sums up to the target sum\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target_sum) for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g(target_sum=12):\n    nums = [2, 4, 6, 8, 10, 12]\n    return nums\nassert f(g())\n",
        "idx_generation": 427,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=3) -> bool:\n    \"\"\"Check if k consecutive elements in the list are in ascending order\"\"\"\n    return any(arr[i] < arr[i+1] for i in range(len(arr)-k+1))\ndef g(k=3):\n    arr = [1, 2, 4, 3, 5, 6, 7]\n    return arr\nassert f(g())\n",
        "idx_generation": 427,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7]\n\nassert f(g())\n",
        "idx_generation": 427,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=10) -> bool:\n    \"\"\"Find whether the target number is present in the matrix\"\"\"\n    for row in matrix:\n        if all(num < target for num in row):\n            return True\n    return False\n\ndef g(target=10):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target]]\n\nassert f(g())\n",
        "idx_generation": 430,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List, Tuple\n\ndef f(words: List[str], target='hello') -> bool:\n    \"\"\"Check if the target word exists in the list of words\"\"\"\n    for word in words:\n        if word == target:\n            return True\n    return False\n\ndef g(words=['apple', 'banana', 'cherry', 'hello', 'mango']):\n    return words\n\nassert f(g())\n",
        "idx_generation": 430,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=100) -> bool:\n    \"\"\"Check if there exists a triplet of numbers in the list that sum up to the target\"\"\"\n    return any((nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums))))\n\ndef g(nums=[10, 20, 30, 40, 50]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 430,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom math import sqrt\ndef f(n: int, lst=[1, 4, 9, 16, 25, 36, 49, 64], k=2) -> bool:\n    \"\"\"Given a list of integers and an integer k, determine if there are at least n integers in the list that are perfect squares.\"\"\"\n    return sum((1 for num in lst if sqrt(num).is_integer())) >= n\ndef g(lst=[1, 4, 9, 16, 25, 36, 49, 64], k=2):\n    return len([num for num in lst if sqrt(num).is_integer()])\nassert f(g())\n",
        "idx_generation": 431,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Given a matrix of integers, determine if it is a symmetric matrix.\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    if rows != cols:\n        return False\n    \n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 431,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]], target=0) -> bool:\n    \"\"\"Find whether the target number is present in the 2D array\"\"\"\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if arr[i][j] == target:\n                return True\n    return False\n\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, target]]\n\nassert f(g())\n",
        "idx_generation": 432,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport random\nfrom typing import List\n\ndef f(nums: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a subarray in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        sum = 0\n        for j in range(i, len(nums)):\n            sum += nums[j]\n            if sum == target:\n                return True\n    return False\n\ndef g(target=50):\n    nums = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return nums\n\nassert f(g())\n\n",
        "idx_generation": 432,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m: int = 5) -> bool:\n    \"\"\"Check if the given number is divisible by both n and m\"\"\"\n    return n % m == 0\n\ndef g(m: int = 5):\n    return m * 2\n\nassert f(g())\n",
        "idx_generation": 433,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target: int = 100) -> bool:\n    \"\"\"Check if the sum of any two numbers in the list is equal to the target\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return True\n    return False\n\ndef g(lst: List[int] = [10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    return lst\n\nassert f(g())\n",
        "idx_generation": 433,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\nfrom typing import *\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with all elements being prime numbers.\"\"\"\n    import math\n\n    def is_prime(n):\n        \"\"\"Check if a number is prime.\"\"\"\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    for i in range(len(arr)):\n        subarray_product = 1\n        for j in range(i, len(arr)):\n            subarray_product *= arr[j]\n            if is_prime(subarray_product):\n                return True\n    return False\n\ndef g():\n    return [2, 4, 9, 16, 5]\n\nassert f(g())\n",
        "idx_generation": 433,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target: int) -> List[int]:\n    \"\"\"Find two numbers in the list that add up to the target value and return their indices.\"\"\"\n    num_dict = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_dict:\n            return [num_dict[complement], i]\n        num_dict[num] = i\n    return []\n\ndef g(nums=[2, 7, 11, 15], target=9):\n    return nums, target\n\nassert f(*g()) == [0, 1]\n",
        "idx_generation": 436,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Find if the given matrix is symmetric\"\"\"\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[i])))\ndef g(matrix: List[List[int]] = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n",
        "idx_generation": 436,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\ndef f(matrix: List[List[int]], target_row=2, target_col=2) -> bool:\n    \"\"\"Check if the element at the target_row and target_col index in the matrix is divisible by 5\"\"\"\n    return matrix[target_row][target_col] % 5 == 0\n\ndef g(target_row=2, target_col=2):\n    matrix = np.array([[5, 10, 15], [10, 15, 20], [15, 20, 25]])\n    return matrix.tolist()\n\nassert f(g())\n",
        "idx_generation": 437,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int], target_sum=10) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with the sum of elements equal to the target_sum.\"\"\"\n    for i in range(len(arr)):\n        subarray_sum = 0\n        for j in range(i, len(arr)):\n            subarray_sum += arr[j]\n            if subarray_sum == target_sum:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4]\n\nassert f(g())\n",
        "idx_generation": 437,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=8) -> bool:\n    \"\"\"Find a pair of numbers in the list that sum up to the target value\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\ndef g(nums=[2, 4, 6, 8, 10]):\n    return nums\nassert f(g())\n",
        "idx_generation": 438,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(names: List[str], target='Alice') -> bool:\n    \"\"\"Check if the target name is present in the list of names\"\"\"\n    return target in names\ndef g(names=['Alice', 'Bob', 'Charlie', 'David']):\n    return names\nassert f(g())\n",
        "idx_generation": 438,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the product of all numbers in the list is divisible by n\"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n    return product % n == 0\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[2]\nassert f(g())\n\n",
        "idx_generation": 438,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with all elements being perfect squares.\"\"\"\n    for i in range(len(arr)):\n        subarray_product = 1\n        for j in range(i, len(arr)):\n            subarray_product *= arr[j]\n            if is_perfect_square(subarray_product):\n                return True\n    return False\n\ndef g():\n    return [1, 4, 9, 16, 25]\n\ndef is_perfect_square(n: int) -> bool:\n    \"\"\"Check if a number is a perfect square.\"\"\"\n    if n < 0:\n        return False\n    sqrt = int(n**0.5)\n    return sqrt * sqrt == n\n\nassert f(g())\n",
        "idx_generation": 439,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with all elements being odd numbers.\"\"\"\n    for i in range(len(arr)):\n        subarray_product = 1\n        for j in range(i, len(arr)):\n            subarray_product *= arr[j]\n            if subarray_product % 2 != 0:\n                return True\n    return False\n\ndef g():\n    return [1, 3, 5, 7, 9]\n\nassert f(g())\n",
        "idx_generation": 439,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if there is a number in the list that is divisible by n\"\"\"\n    return any(num % n == 0 for num in nums)\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[0]\nassert f(g())\n",
        "idx_generation": 440,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if the product of all numbers in the list is divisible by n\"\"\"\n    product = 1\n    for num in nums:\n        product *= num\n    return product % n == 0\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    product = 1\n    for num in nums:\n        product *= num\n    return product\nassert f(g())\n",
        "idx_generation": 440,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(mat: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is symmetric.\"\"\"\n    rows = len(mat)\n    cols = len(mat[0])\n    if rows != cols:\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if mat[i][j] != mat[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 441,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list 'nums' that multiply to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 441,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with all elements being multiples of 3.\"\"\"\n    for i in range(len(arr)):\n        subarray_sum = 0\n        for j in range(i, len(arr)):\n            subarray_sum += arr[j]\n            if subarray_sum % 3 == 0:\n                return True\n    return False\n\ndef g():\n    return [6, 9, 2, 4, 1]\n\nassert f(g())\n",
        "idx_generation": 442,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there are three numbers in the list whose sum is equal to the target.\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 443,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import math\nfrom typing import*\n\ndef f(n: int, nums: List[int]) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to n\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == n:\n                return True\n    return False\n\ndef g(n: int, length: int) -> List[int]:\n    nums = [math.factorial(i) for i in range(1, length+1)]\n    return nums\n\nassert f(n=120, nums=g(120, 5))\n",
        "idx_generation": 443,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import Dict\ndef f(d: Dict[str, int], target_key='key4', target_value=10) -> bool:\n    \"\"\"Check if the target_key exists in the dictionary and its corresponding value matches the target_value\"\"\"\n    if target_key in d:\n        return d[target_key] == target_value\n    return False\ndef g(d={'key1': 1, 'key2': 5, 'key3': 8, 'key4': 10, 'key5': 15}, target_key='key4', target_value=10):\n    return d\nassert f(g())\n",
        "idx_generation": 445,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if there exists a subsequence of three numbers in the list such that the sum of the first two numbers is equal to the third number.\"\"\"\n    for i in range(len(nums) - 2):\n        for j in range(i + 1, len(nums) - 1):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] == nums[k]:\n                    return True\n    return False\ndef g():\n    return [3, 5, 8, 2, 10, 6]\nassert f(g())\n",
        "idx_generation": 446,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], n=3) -> bool:\n    \"\"\"Check if the sum of all the numbers in the list is greater than n\"\"\"\n    return sum(nums) > n\n\ndef g(n=3):\n    return [1, 2, 3, 4, 5]\n\nassert f(g())\n",
        "idx_generation": 448,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\nfrom typing import List\n\ndef f(numbers: List[int], min_value=10, max_value=50) -> bool:\n    \"\"\"Check if all numbers in the list are within the given range.\"\"\"\n    return all(min_value <= num <= max_value for num in numbers)\n\ndef g(min_value=10, max_value=50):\n    numbers = [15, 20, 35, 40]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 448,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int]) -> int:\n    \"\"\"Given a list of integers, return the sum of all the odd numbers in the list.\"\"\"\n    return sum(num for num in nums if num % 2 != 0)\n\ndef g(nums=[1, 2, 3, 4, 5]):\n    return nums\n\nassert f(g()) == 9\n\n",
        "idx_generation": 450,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> bool:\n    \"\"\"Check if the target integer is a perfect square root of any number in a list of integers.\"\"\"\n    for num in nums:\n        if num ** 0.5 == target:\n            return True\n    return False\n\ndef g(nums=[16, 25, 36, 49, 64], target=5):\n    return nums, target\n\nassert f(*g())\n",
        "idx_generation": 451,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, factors: List[int]=[2, 3, 5, 7]) -> bool:\n    \"\"\"Check if a number is divisible by at least two of the given factors.\n    - n: the number to be checked\n    - factors: list of factors\"\"\"\n    count = 0\n    for factor in factors:\n        if n % factor == 0:\n            count += 1\n        if count >= 2:\n            return True\n    return False\ndef g(n: int, factors: List[int]=[2, 3, 5, 7]):\n    return n\nassert f(g(30))\n",
        "idx_generation": 452,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int = 10) -> bool:\n    \"\"\"Check if there exists two numbers in the list that add up to the target.\"\"\"\n    seen = set()\n    for num in numbers:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target: int = 10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 454,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=15) -> bool:\n    \"\"\"Find three numbers in the list that add up to the target value.\"\"\"\n    return any(nums[i] + nums[j] + nums[k] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)))\ndef g(target=15):\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return nums\nassert f(g())\n",
        "idx_generation": 454,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(lst: List[int], target=50) -> bool:\n    \"\"\"Check if there exists a subsequence in the list that sums up to the target value, and the length of the subsequence is less than or equal to 3.\"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if sum(lst[i:j]) == target and j-i <= 3:\n                return True\n    return False\n    \ndef g(target=50):\n    return [10, 20, 30, 40, 50]\n    \nassert f(g())\n\n",
        "idx_generation": 456,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], n=3) -> bool:\n    \"\"\"Check if the product of the elements in the list is divisible by n\"\"\"\n    product = 1\n    for num in lst:\n        product *= num\n    return product % n == 0\n\ndef g(n=3):\n    return [2, 4, 6]\n\nassert f(g())\n",
        "idx_generation": 457,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], k=3) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is divisible by k.\"\"\"\n    return any((nums[i] + nums[j]) % k == 0 for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(k=3):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 458,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there are exactly two numbers in the list that sum up to the target\"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 458,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Check if there is a pair of numbers in the list whose product is divisible by n\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] % n == 0:\n                return True\n    return False\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    return nums[-1]\nassert f(g())\n",
        "idx_generation": 460,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(grid: List[List[int]], k=3) -> bool:\n    \"\"\"Check if there exists a subgrid of size k x k in the grid where all elements are the same and equal to 0.\"\"\"\n    for i in range(len(grid) - k + 1):\n        for j in range(len(grid[0]) - k + 1):\n            subgrid = [row[j:j+k] for row in grid[i:i+k]]\n            if all(elem == 0 for row in subgrid for elem in row):\n                return True\n    return False\n\ndef g(k=3):\n    return [[0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0]]\n\nassert f(g())\n",
        "idx_generation": 460,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(lst: List[int], target_len=4) -> bool:\n    \"\"\"Check if there exist a sublist of target_len consecutive numbers in the list\"\"\"\n    return any(lst[i:i+target_len] == list(range(lst[i], lst[i]+target_len)) for i in range(len(lst)-target_len+1))\n\ndef g(target_len=4):\n    return [n for n in range(1, 10)]\n\nassert f(g())\n",
        "idx_generation": 461,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a sum greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] > target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 461,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a difference greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if abs(nums[i] - nums[j]) > target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 461,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Find two numbers in the list 'nums' that have a quotient greater than the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[j] != 0 and nums[i] / nums[j] > target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 461,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(start: int, k=2, lower=-1000, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    \"\"\"Find a sequence of k consecutive indices whose sum is greater than a lower limit\"\"\"\n    total = 0\n    for i in range(start, start + k):\n        total += seq[i]\n    return total > lower\n\ndef g(k=2, lower=-1000, seq=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    def sum_seq(start):\n        ans = 0\n        for i in range(start, start + k):\n            ans += seq[i]\n        return ans\n    return max(range(-len(seq), len(seq) - k + 1), key=sum_seq)\n\nassert f(g())\n",
        "idx_generation": 462,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, li=[99, 51, -28, -69, -90, -15, 7, -67], target=51) -> bool:\n    \"\"\"Find the index of an item in a list. The index must be an even number.\"\"\"\n    return li[n] == target\ndef g(li=[99, 51, -28, -69, -90, -15, 7, -67], target=51):\n    return li.index(target)\n\nassert f(g())\n",
        "idx_generation": 463,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=10, c=3) -> bool:\n    \"\"\"Find n such that n + a is a perfect square and is divisible by b and c\"\"\"\n    return (n + a) % b != 0 and (n + a) % c != 0 and int(((n + a) ** 0.5) ** 2) != (n + a)\n\ndef g(a=2, b=10, c=3):\n    return b + c - a\n\nassert f(g())\n\n",
        "idx_generation": 464,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return list(range(1, target))\n\nassert f(g())\n",
        "idx_generation": 465,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, string='programming', char='m') -> bool:\n    \"\"\"Given a string and a character, determine if the character appears at least n times in the string.\"\"\"\n    return string.count(char) >= n\ndef g(string='programming', char='m'):\n    return 2\nassert f(g())\n",
        "idx_generation": 467,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import random\nfrom typing import*\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Check if there are two numbers in the list that add up to the target value.\"\"\"\n    return any(num1 + num2 == target for i, num1 in enumerate(numbers) for num2 in numbers[i+1:])\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n",
        "idx_generation": 468,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if the given matrix is a symmetric matrix.\n    A symmetric matrix is a square matrix that is equal to its transpose.\"\"\"\n    n = len(matrix)\n    \n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    \n    return True\n\ndef g(matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return matrix\n\nassert f(g())\n\n",
        "idx_generation": 471,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Determine if the given matrix is a lower triangular matrix.\n    A lower triangular matrix is a square matrix in which all the elements above the main diagonal are zero.\"\"\"\n    n = len(matrix)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != 0:\n                return False\n    \n    return True\n\ndef g(matrix=[[1, 0, 0], [2, 3, 0], [4, 5, 6]]):\n    return matrix\n\nassert f(g())\n\n",
        "idx_generation": 471,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]], target=0) -> bool:\n    \"\"\"Find the sum of all numbers in the 2D array\"\"\"\n    total_sum = sum(sum(row) for row in arr)\n    return total_sum == target\n\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g(), target=45)\n",
        "idx_generation": 471,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[List[int]], target=0) -> bool:\n    \"\"\"Find the maximum number in the 2D array\"\"\"\n    max_num = max(max(row) for row in arr)\n    return max_num == target\n\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g(), target=9)\n",
        "idx_generation": 471,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=100) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that sum up to the target_sum.\"\"\"\n    return any((numbers[i] + numbers[j] == target_sum) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\n\ndef g(target_sum=100):\n    numbers = [10, 20, 30, 40, 50, 60, 70, 80, 90]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 472,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[2, 4, 6, 8, 10, 12]) -> bool:\n    \"\"\"Check if n is divisible by all numbers in the list and is a multiple of 24\"\"\"\n    return all((n % i == 0 for i in lst)) and n % 24 == 0\n\ndef g(lst=[2, 4, 6, 8, 10, 12]):\n    ans = 1\n    for i in lst:\n        ans *= i\n    return ans * 24\n\nassert f(g())\n",
        "idx_generation": 472,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[3, 6, 9, 12, 15, 18]) -> bool:\n    \"\"\"Check if n is a multiple of all numbers in the list and is divisible by 36\"\"\"\n    return all((n % i == 0 for i in lst)) and n % 36 == 0\n\ndef g(lst=[3, 6, 9, 12, 15, 18]):\n    ans = 1\n    for i in lst:\n        ans *= i\n    return ans * 36\n\nassert f(g())\n",
        "idx_generation": 472,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, lst=[4, 8, 12, 16, 20, 24]) -> bool:\n    \"\"\"Check if n is divisible by all numbers in the list and is a multiple of 48\"\"\"\n    return all((n % i == 0 for i in lst)) and n % 48 == 0\n\ndef g(lst=[4, 8, 12, 16, 20, 24]):\n    ans = 1\n    for i in lst:\n        ans *= i\n    return ans * 48\n\nassert f(g())\n",
        "idx_generation": 472,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=30) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that add up to target_sum\"\"\"\n    return any(numbers[i] + numbers[j] == target_sum for i in range(len(numbers)) for j in range(i+1, len(numbers)))\n\ndef g(target_sum=30):\n    return [10, 20, 5, 15, 25]\n\nassert f(g())\n",
        "idx_generation": 473,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(a: List[int], b: List[int], c: int) -> bool:\n    \"\"\"Check if the concatenation of lists a and b contains exactly c number of elements\"\"\"\n    return len(a + b) == c\ndef g():\n    a = [1, 2, 3]\n    b = [4, 5, 6]\n    c = len(a) + len(b)\n    return a, b, c\nassert f(*g())\n",
        "idx_generation": 474,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(words: List[str], target='apple') -> bool:\n    \"\"\"Check if the target word is present in the list of words\"\"\"\n    return target in words\n\ndef g(target='apple'):\n    return ['banana', 'orange', 'apple', 'grape']\n\nassert f(g())\n",
        "idx_generation": 475,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=10):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 476,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there are exactly two numbers in the list whose product is equal to the target value.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target=20):\n    return nums\n\nassert f(g())\n",
        "idx_generation": 476,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "import itertools\nfrom typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a subset of the list whose sum is equal to the target number\"\"\"\n    for r in range(len(nums)-1, -1, -1):\n        for subset in itertools.combinations(nums, r):\n            if sum(subset) == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 477,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport math\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray with exactly three elements whose product is a perfect square.\"\"\"\n    for i in range(len(arr)):\n        subarray_product = 1\n        for j in range(i, len(arr)):\n            subarray_product *= arr[j]\n            if math.isqrt(subarray_product) ** 2 == subarray_product:\n                return True\n    return False\n\ndef g():\n    return [9, 12, 15, 25, 30, 35]\n\nassert f(g())\n",
        "idx_generation": 477,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, x=5) -> bool:\n    \"\"\"Check if the given number is equal to x\"\"\"\n    return n == x\ndef g(x=5):\n    return x\nassert f(g())\n",
        "idx_generation": 477,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray whose sum is equal to the target number.\"\"\"\n    for i in range(len(arr)):\n        subarray_sum = 0\n        for j in range(i, len(arr)):\n            subarray_sum += arr[j]\n            if subarray_sum == target:\n                return True\n    return False\n\ndef g():\n    return [4, 2, 3, 5, 1]\n\nassert f(g())\n",
        "idx_generation": 479,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Find whether all the numbers in the matrix are greater than the target\"\"\"\n    matrix_np = np.array(matrix)\n    return np.all(matrix_np > target)\n\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 480,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if there exists a subarray where the sum of all elements is a multiple of 3.\"\"\"\n    for i in range(len(arr)):\n        subarray_sum = 0\n        for j in range(i, len(arr)):\n            subarray_sum += arr[j]\n            if subarray_sum % 3 == 0:\n                return True\n    return False\n\ndef g():\n    return [4, 8, 12, 16, 20, 24, 28, 32, 36, 40]\n\nassert f(g())\n",
        "idx_generation": 480,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int = 10) -> bool:\n    \"\"\"Check if the product of any two numbers in the list is equal to the target.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] * numbers[j] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [2, 5, 8, 3, 1, 4]\n\nassert f(g())\n",
        "idx_generation": 482,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a square matrix.\"\"\"\n    rows = len(matrix)\n    for row in matrix:\n        if len(row) != rows:\n            return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 483,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(arr: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a contiguous subarray in the given array whose sum is equal to the target number\"\"\"\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if prefix_sum[j] - prefix_sum[i] == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4]\n\nassert f(g())\n",
        "idx_generation": 484,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sums up to the target value\"\"\"\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g())\n",
        "idx_generation": 485,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, a=2, b=3, c=4) -> bool:\n    \"\"\"Check if the given number n is divisible by a, b, and c\"\"\"\n    return n % a == 0 and n % b == 0 and n % c == 0\ndef g(a=2, b=3, c=4):\n    return a * b * c\n\nassert f(g())\n",
        "idx_generation": 485,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums1: List[int], nums2: List[int]) -> List[int]:\n    \"\"\"Find the intersection of two lists, i.e., the common elements between the two lists.\"\"\"\n    return list(set(nums1) & set(nums2))\n\n\ndef g():\n    return [1, 2, 3, 4, 5], [4, 5, 6, 7, 8]\n\n\nassert f(*g()) == [4, 5]\n\n",
        "idx_generation": 486,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> int:\n    \"\"\"Find the index of the first negative number in the list. If no negative number exists, return -1.\"\"\"\n    for i, num in enumerate(nums):\n        if num < 0:\n            return i\n    return -1\n\n\ndef g():\n    return [1, 2, -3, 4, -5, 6]\n\n\nassert f(g()) == 2\n\n",
        "idx_generation": 486,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list that divide the target value evenly.\"\"\"\n    return any((target % numbers[i] == 0) for i in range(len(numbers)))\n\ndef g(target=10):\n    numbers = [2, 4, 6, 8, 10, 12, 14, 16, 18]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 486,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    \"\"\"Determine if there exists a pair of numbers in the list whose difference is equal to the target value.\"\"\"\n    return any((abs(numbers[i] - numbers[j]) == target) for i in range(len(numbers)) for j in range(i+1, len(numbers)))\n\ndef g(target=10):\n    numbers = [5, 15, 10, 25, 30, 35, 40, 45, 50]\n    return numbers\n\nassert f(g())\n",
        "idx_generation": 486,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the matrix is a symmetric matrix\"\"\"\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g())\n",
        "idx_generation": 487,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nimport numpy as np\n\ndef f(matrix: np.ndarray, target_sum=10) -> bool:\n    \"\"\"Check if there exists a subarray in the given matrix whose sum is equal to the target sum.\n    - matrix: 2D numpy array of integers\n    - target_sum: integer representing the desired sum\"\"\"\n\n    rows, cols = matrix.shape\n\n    for i in range(rows):\n        for j in range(cols):\n            current_sum = 0\n            for k in range(i, rows):\n                for l in range(j, cols):\n                    current_sum += matrix[k, l]\n                    if current_sum == target_sum:\n                        return True\n                    elif current_sum > target_sum:\n                        break\n\n    return False\n\ndef g(target_sum=10):\n    return np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\nassert f(g())\n",
        "idx_generation": 487,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import *\ndef f(arr: List[int]) -> bool:\n    \"\"\"Check if the given list is a palindrome\"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 489,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(arr: List[int], k=5) -> bool:\n    \"\"\"Check if there exists a subarray in the given list that has a length equal to k.\"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            if len(arr[i:j]) == k:\n                return True\n    return False\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g())\n\n",
        "idx_generation": 489,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(numbers: List[int], target_sum=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target_sum\"\"\"\n    n = len(numbers)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if numbers[i] + numbers[j] == target_sum:\n                return True\n    return False\n\ndef g(target_sum=20):\n    return [10, 15, 5, 3, 8]\n\nassert f(g())\n\n",
        "idx_generation": 492,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Find if there exists a quadruple of numbers in the list whose sum is equal to the target.\"\"\"\n    return any(nums[i] + nums[j] + nums[k] + nums[l] == target for i in range(len(nums)) for j in range(i+1, len(nums)) for k in range(j+1, len(nums)) for l in range(k+1, len(nums)))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(g())\n",
        "idx_generation": 492,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(numbers: List[int], target: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the given list that subtract to the target.\"\"\"\n    seen = set()\n    for num in numbers:\n        complement = num - target\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g():\n    return [10, 20, 30, 40, 50]\n\nassert f(g(), target=10)\n",
        "idx_generation": 493,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(nums: List[int]) -> bool:\n    \"\"\"Check if the given list contains any duplicate elements.\"\"\"\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]\n\nassert f(g())\n",
        "idx_generation": 494,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    \"\"\"Check if any two elements in the matrix have a sum greater than the target value.\"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    for i in range(n):\n        for j in range(m):\n            for k in range(i, n):\n                for l in range(m):\n                    if i == k and j == l:\n                        continue\n                    if matrix[i][j] + matrix[k][l] > target:\n                        return True\n    return False\n\ndef g(target=0):\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nassert f(g())\n",
        "idx_generation": 495,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\ndef f(n: int, m: int) -> bool:\n    \"\"\"Check if there exists a pair of numbers whose sum is divisible by both n and m.\"\"\"\n    nums = [10, 15, 20, 25, 30]\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if (nums[i] + nums[j]) % n == 0 and (nums[i] + nums[j]) % m == 0:\n                return True\n    return False\n\ndef g():\n    return 2, 3\n\nassert f(*g())\n",
        "idx_generation": 496,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=0) -> bool:\n    \"\"\"Check if all numbers in the list are divisible by the target.\"\"\"\n    return all(num % target == 0 for num in nums)\n\ndef g(nums: List[int], target=1):\n    return nums\n\nassert f(g([10, 20, 30, 40, 50]), target=10)\n\n",
        "idx_generation": 497,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=20) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list that sum up to the target number\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\ndef g(target=20):\n    return [1, 3, 5, 7, 9, 11]\n\nassert f(g())\n",
        "idx_generation": 498,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=5) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose product is equal to the target.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == target:\n                return True\n    return False\n\ndef g(nums: List[int]):\n    return nums\n\nassert f(g([2, 4, 6, 8, 10]), target=12)\n",
        "idx_generation": 498,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    \"\"\"Check if there exists a pair of numbers in the list whose sum is equal to the target and their product is even.\"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target and (nums[i] * nums[j]) % 2 == 0:\n                return True\n    return False\n\ndef g(nums: List[int]):\n    return nums\n\nassert f(g([2, 4, 6, 8, 10]), target=12)\n",
        "idx_generation": 498,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if the given matrix is a diagonal matrix\"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    if rows != cols:\n        return False\n\n    for i in range(rows):\n        for j in range(cols):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True\n\ndef g():\n    return [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\nassert f(g())\n",
        "idx_generation": 499,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if all elements of the list are divisible by 3.\"\"\"\n    for num in arr:\n        if num % 3 != 0:\n            return False\n    return True\n\ndef g():\n    return [9, 6, 12, 18, 15, 21, 24, 27]\n\nassert f(g())\n",
        "idx_generation": 499,
        "target_skills": null
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import*\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    \"\"\"Given a list of integers, check if the list is a palindrome (reads the same forwards and backwards).\"\"\"\n    return arr == arr[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\n\nassert f(g())\n",
        "idx_generation": 499,
        "target_skills": null
    }
]